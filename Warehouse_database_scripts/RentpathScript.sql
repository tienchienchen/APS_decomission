USE [master]
GO
/****** Object:  Database [RentPath]    Script Date: 9/5/2017 7:20:04 AM ******/
CREATE DATABASE [RentPath]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'RentPath', FILENAME = N'F:\Data\RentPath.Mdf' , SIZE = 391577600KB , MAXSIZE = UNLIMITED, FILEGROWTH = 102400KB ), 
 FILEGROUP [PIndexSpace] 
( NAME = N'PIndexSpace', FILENAME = N'F:\Data\RentPathPIndexSpace.ndf' , SIZE = 1048576KB , MAXSIZE = UNLIMITED, FILEGROWTH = 100032KB ), 
 FILEGROUP [PTableSpace] 
( NAME = N'PTableSpace', FILENAME = N'F:\Data\RentPathPTableSpace.ndf' , SIZE = 1048576KB , MAXSIZE = UNLIMITED, FILEGROWTH = 100032KB )
 LOG ON 
( NAME = N'RentPath_log', FILENAME = N'F:\Log\RentPath_log.ldf' , SIZE = 5242880KB , MAXSIZE = 104857600KB , FILEGROWTH = 1048576KB )
GO
ALTER DATABASE [RentPath] SET COMPATIBILITY_LEVEL = 100
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [RentPath].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [RentPath] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [RentPath] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [RentPath] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [RentPath] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [RentPath] SET ARITHABORT OFF 
GO
ALTER DATABASE [RentPath] SET AUTO_CLOSE OFF 
GO
ALTER DATABASE [RentPath] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [RentPath] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [RentPath] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [RentPath] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [RentPath] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [RentPath] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [RentPath] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [RentPath] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [RentPath] SET  DISABLE_BROKER 
GO
ALTER DATABASE [RentPath] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [RentPath] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [RentPath] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [RentPath] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [RentPath] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [RentPath] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [RentPath] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [RentPath] SET RECOVERY SIMPLE 
GO
ALTER DATABASE [RentPath] SET  MULTI_USER 
GO
ALTER DATABASE [RentPath] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [RentPath] SET DB_CHAINING OFF 
GO
ALTER DATABASE [RentPath] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [RentPath] SET TARGET_RECOVERY_TIME = 0 SECONDS 
GO
ALTER DATABASE [RentPath] SET DELAYED_DURABILITY = DISABLED 
GO
EXEC sys.sp_db_vardecimal_storage_format N'RentPath', N'ON'
GO
ALTER DATABASE [RentPath] SET QUERY_STORE = OFF
GO
USE [RentPath]
GO
ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
GO
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
GO
ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
GO
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
GO
ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
GO
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
GO
ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
GO
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
GO
USE [RentPath]
GO
/****** Object:  Schema [Conformed]    Script Date: 9/5/2017 7:20:04 AM ******/
CREATE SCHEMA [Conformed]
GO
/****** Object:  Schema [DataProduct]    Script Date: 9/5/2017 7:20:04 AM ******/
CREATE SCHEMA [DataProduct]
GO
/****** Object:  Schema [Dimension]    Script Date: 9/5/2017 7:20:04 AM ******/
CREATE SCHEMA [Dimension]
GO
/****** Object:  Schema [Fact]    Script Date: 9/5/2017 7:20:04 AM ******/
CREATE SCHEMA [Fact]
GO
/****** Object:  Schema [Mart]    Script Date: 9/5/2017 7:20:04 AM ******/
CREATE SCHEMA [Mart]
GO
/****** Object:  Schema [PRM\datascience]    Script Date: 9/5/2017 7:20:04 AM ******/
CREATE SCHEMA [PRM\datascience]
GO
/****** Object:  Schema [Reports]    Script Date: 9/5/2017 7:20:04 AM ******/
CREATE SCHEMA [Reports]
GO
/****** Object:  Schema [Staging]    Script Date: 9/5/2017 7:20:04 AM ******/
CREATE SCHEMA [Staging]
GO
/****** Object:  Schema [Tableau]    Script Date: 9/5/2017 7:20:04 AM ******/
CREATE SCHEMA [Tableau]
GO
/****** Object:  UserDefinedFunction [dbo].[RetrieveMissedCalls]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[RetrieveMissedCalls] (@YMDID INT, @ListingID INT, @Website VARCHAR(20))
RETURNS INT
AS
BEGIN

DECLARE @returnMissedCalls INT

SET @returnMissedCalls = 
(SELECT ml.AllMissedCalls 
FROM ApartmentGuide.mart.AGRentCombinedMartListings AS ml
WHERE ml.YMDID = @YMDID
	AND ml.ListingID = @ListingID
	AND ml.Website = @Website)

RETURN ISNULL(@returnMissedCalls,0)

END

GO
/****** Object:  Table [Dimension].[Listings_APS]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Dimension].[Listings_APS](
	[YMDID] [int] NOT NULL,
	[ListingID] [int] NOT NULL,
	[ListingTypeID] [int] NOT NULL,
	[ListingTypeShort] [varchar](5) NOT NULL,
	[ListingType] [varchar](25) NOT NULL,
	[PropertyIDAG] [int] NOT NULL,
	[StatusIDAG] [tinyint] NOT NULL,
	[BillingIDAG] [varchar](20) NOT NULL,
	[PropertyIDRent] [int] NOT NULL,
	[StatusIDRent] [tinyint] NOT NULL,
	[BillingIDRent] [varchar](20) NOT NULL,
	[ListingSource] [varchar](20) NULL,
	[MgtCoIDAG] [int] NULL,
	[MgtCoNameAG] [varchar](100) NULL,
	[MgtCoIDRent] [int] NULL,
	[MgtCoNameRent] [varchar](100) NULL,
	[CompanyIDRent] [int] NULL,
	[SFCommunityID] [varchar](20) NULL,
	[SFPropertyAcctID] [varchar](18) NULL,
	[Ext_PropertyID] [int] NULL,
	[PropertyName] [varchar](100) NOT NULL,
	[PropertyAddress] [varchar](40) NOT NULL,
	[PropertyCity] [varchar](40) NOT NULL,
	[PropertyState] [varchar](2) NOT NULL,
	[PropertyZipCode] [varchar](10) NOT NULL,
	[ListingDescriptionLength] [int] NOT NULL,
	[VanityURL] [varchar](400) NOT NULL,
	[PropertyURL] [varchar](400) NOT NULL,
	[PropertyContactPhone] [varchar](20) NOT NULL,
	[WebMobileTargetAG] [varchar](20) NOT NULL,
	[WebTollFreeAG] [varchar](20) NOT NULL,
	[MobileTollFreeAG] [varchar](20) NOT NULL,
	[WebTargetRent] [varchar](20) NOT NULL,
	[MobileTargetRent] [varchar](20) NOT NULL,
	[WebTollFreeRent] [varchar](20) NOT NULL,
	[MobileTollFreeRent] [varchar](20) NOT NULL,
	[WebTargetRentals] [varchar](20) NOT NULL,
	[WebTollFreeRentals] [varchar](20) NOT NULL,
	[AGCTarget] [varchar](20) NOT NULL,
	[AGCTollFree] [varchar](20) NOT NULL,
	[ASGTarget] [varchar](20) NOT NULL,
	[ASGTollFree] [varchar](20) NOT NULL,
	[LeadEmailAG] [varchar](2000) NOT NULL,
	[LeadEmailRent] [varchar](2000) NOT NULL,
	[LeadEmailWithTypeAG] [varchar](1000) NOT NULL,
	[LeadEmailWithTypeRent] [varchar](1000) NOT NULL,
	[PhoneLeadRecapEmail] [varchar](400) NOT NULL,
	[LeadFaxAG] [varchar](400) NOT NULL,
	[LeadFaxRent] [varchar](400) NOT NULL,
	[LowPrice] [int] NOT NULL,
	[HighPrice] [int] NOT NULL,
	[CalculatedPrice] [int] NOT NULL,
	[CallTrackingInBook] [tinyint] NOT NULL,
	[CallTrackingInBookStartDate] [datetime] NULL,
	[WebCouponStartDate] [datetime] NULL,
	[WebCouponExpirationDate] [datetime] NULL,
	[WebCouponText] [varchar](600) NOT NULL,
	[MobileCouponStartDate] [datetime] NULL,
	[MobileCouponExpirationDate] [datetime] NULL,
	[MobileCouponText] [varchar](600) NOT NULL,
	[GeoLat] [decimal](10, 4) NOT NULL,
	[GeoLong] [decimal](10, 4) NOT NULL,
	[CBSACode] [nvarchar](50) NOT NULL,
	[CBSAName] [nvarchar](200) NOT NULL,
	[MarketCD] [varchar](20) NOT NULL,
	[MarketName] [varchar](50) NOT NULL,
	[MetroName] [varchar](40) NOT NULL,
	[SectionName] [varchar](75) NOT NULL,
	[SubSectionName] [varchar](50) NOT NULL,
	[DateModified] [datetime] NOT NULL,
	[LastUpdateYMDID] [int] NOT NULL,
	[ActiveCoupon] [tinyint] NOT NULL,
	[MobileCouponActive] [tinyint] NOT NULL,
	[ShowPricing] [tinyint] NOT NULL,
	[ShowOfficeHours] [tinyint] NOT NULL,
	[IsOverThreshold] [tinyint] NOT NULL,
	[IsSmallProperty] [tinyint] NOT NULL,
	[IsRentalProp] [tinyint] NOT NULL,
	[IsSEM] [tinyint] NOT NULL,
	[Whisper] [tinyint] NOT NULL,
	[CallRecordingOptOut] [tinyint] NOT NULL,
	[ATTUverse] [tinyint] NOT NULL,
	[Brighthouse] [tinyint] NOT NULL,
	[Charter] [tinyint] NOT NULL,
	[DIRECTV] [tinyint] NOT NULL,
	[TimeWarner] [tinyint] NOT NULL,
	[VerizonFIOS] [tinyint] NOT NULL,
	[XFinityDP] [tinyint] NOT NULL,
	[XFinitySP] [tinyint] NOT NULL,
	[XFinityTP] [tinyint] NOT NULL,
	[HasCR3] [tinyint] NOT NULL,
	[ExternalID] [varchar](50) NOT NULL,
	[ListingPricingSource] [varchar](8) NOT NULL,
	[ListingDetailsSource] [varchar](20) NOT NULL,
	[HasAvailabilityURL] [tinyint] NOT NULL,
	[AvailabilityURL] [varchar](255) NOT NULL,
	[PropertyTotalUnits] [int] NOT NULL,
	[TotalAmenities] [int] NOT NULL,
	[ActiveAmenities] [tinyint] NOT NULL,
	[TotalFloorPlans] [int] NOT NULL,
	[ActiveFloorplans] [tinyint] NOT NULL,
	[ActiveLowResFloorplans] [tinyint] NOT NULL,
	[ActiveHDFloorplans] [tinyint] NOT NULL,
	[TotalPhotos] [int] NOT NULL,
	[ActivePhotos] [tinyint] NOT NULL,
	[ActiveLowResPhotos] [tinyint] NOT NULL,
	[ActiveHDPhotos] [tinyint] NOT NULL,
	[CR3AvgOverallRatingAG] [decimal](16, 1) NOT NULL,
	[CR3AvgOverallRatingRent] [decimal](16, 1) NOT NULL,
	[PlacementTierAG] [int] NOT NULL,
	[PlacementTierRent] [int] NOT NULL,
	[ContractLoyaltyPoints] [int] NOT NULL,
	[InternetProductPoints] [int] NOT NULL,
	[LegacyLoyaltyPoints] [int] NOT NULL,
	[MobilePoints] [int] NOT NULL,
	[PrintProductPoints] [int] NOT NULL,
	[Ranking] [varchar](1) NOT NULL,
	[NumericRank] [decimal](15, 4) NOT NULL,
	[RPLRank] [decimal](8, 2) NOT NULL,
	[BadgeCollege] [tinyint] NOT NULL,
	[BadgeCorporate] [tinyint] NOT NULL,
	[BadgeIncomeRestricted] [tinyint] NOT NULL,
	[BadgeLuxury] [tinyint] NOT NULL,
	[BadgeMilitary] [tinyint] NOT NULL,
	[BadgePetFriendly] [tinyint] NOT NULL,
	[BadgeSenior] [tinyint] NOT NULL,
	[BadgeGolf] [tinyint] NOT NULL,
	[BadgeWaterfront] [tinyint] NOT NULL,
	[BadgeFurnished] [tinyint] NOT NULL,
	[BadgeNewConstruction] [tinyint] NOT NULL,
	[BadgeRemodeled] [tinyint] NOT NULL,
	[DefaultBadge] [varchar](50) NULL,
	[Upsell30SecondVideo] [tinyint] NOT NULL,
	[Upsell60SecondVideo] [tinyint] NOT NULL,
	[Upsell3DFloorplan] [tinyint] NOT NULL,
	[UpsellAdCreator] [tinyint] NOT NULL,
	[UpsellAGMobileSyndication] [tinyint] NOT NULL,
	[UpsellAGSites] [tinyint] NOT NULL,
	[UpsellAGSitesCustomURL] [varchar](400) NOT NULL,
	[UpsellApartmentListing] [tinyint] NOT NULL,
	[UpsellBillingOnly] [tinyint] NOT NULL,
	[UpsellCallRecording] [tinyint] NOT NULL,
	[UpsellCarousel] [tinyint] NOT NULL,
	[UpsellCarouselRentals] [tinyint] NOT NULL,
	[UpsellCategoryListing] [tinyint] NOT NULL,
	[UpsellCommunityVideo] [tinyint] NOT NULL,
	[UpsellCommunityVideoURLFulfilled] [tinyint] NOT NULL,
	[UpsellCoupon] [tinyint] NOT NULL,
	[UpsellDiamondCity] [tinyint] NOT NULL,
	[UpsellDiamondMax] [tinyint] NOT NULL,
	[UpsellDiamondMetro] [tinyint] NOT NULL,
	[UpsellDynamicLeadForm] [tinyint] NOT NULL,
	[UpsellEmercial] [tinyint] NOT NULL,
	[UpsellEZPay] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityAG] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityRent] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityGold] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityPlatinum] [tinyint] NOT NULL,
	[UpsellFeaturedCommunitySilver] [tinyint] NOT NULL,
	[UpsellFeaturedListingRentals] [tinyint] NOT NULL,
	[UpsellFloorplanUpgrade] [tinyint] NOT NULL,
	[UpsellFormToPhone] [tinyint] NOT NULL,
	[UpsellFrontPage] [tinyint] NOT NULL,
	[UpsellGoldTier] [tinyint] NOT NULL,
	[UpsellHDActiveFloorplansFulfilled] [tinyint] NOT NULL,
	[UpsellHDActivePhotosFulfilled] [tinyint] NOT NULL,
	[UpsellHDPanoTour] [tinyint] NOT NULL,
	[UpsellHDPanoTourFulfilled] [tinyint] NOT NULL,
	[UpsellHDPhoto] [tinyint] NOT NULL,
	[UpsellHDVideo] [tinyint] NOT NULL,
	[UpsellHDVideoFulfilled] [tinyint] NOT NULL,
	[UpsellHighlighted] [tinyint] NOT NULL,
	[UpsellLeadMail] [tinyint] NOT NULL,
	[UpsellLinked3DFloorplan] [tinyint] NOT NULL,
	[UpsellLinked3DFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedFloorplan] [tinyint] NOT NULL,
	[UpsellLinkedFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedLowResFloorplan] [tinyint] NOT NULL,
	[UpsellLinkedLowResFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedHDFloorplan] [tinyint] NOT NULL,
	[UpsellLinkedHDFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedRoomPlanner] [tinyint] NOT NULL,
	[UpsellLinkedRoomPlannerFulfilled] [tinyint] NOT NULL,
	[UpsellListingRent] [tinyint] NOT NULL,
	[UpsellListingRentals] [tinyint] NOT NULL,
	[UpsellMediaCenter] [tinyint] NOT NULL,
	[UpsellMediaCenterCoupon] [tinyint] NOT NULL,
	[UpsellMgmtManagementCoLogoDisplay] [tinyint] NOT NULL,
	[UpsellMgmtPeelAd] [tinyint] NOT NULL,
	[UpsellMobileDeal] [tinyint] NOT NULL,
	[UpsellMobileDealFulfilled] [tinyint] NOT NULL,
	[UpsellMobileDiamond] [tinyint] NOT NULL,
	[UpsellMobileSpotlight] [tinyint] NOT NULL,
	[UpsellNoVacancyRent] [tinyint] NOT NULL,
	[UpsellPayPerLead] [tinyint] NOT NULL,
	[UpsellPayPerLease] [tinyint] NOT NULL,
	[UpsellPayPerLeaseALM] [tinyint] NOT NULL,
	[UpsellPhotoUpgrade] [tinyint] NOT NULL,
	[UpsellPhotoPlus] [tinyint] NOT NULL,
	[UpsellPlatinumTier] [tinyint] NOT NULL,
	[UpsellPrecisionTargetedEmailRent] [tinyint] NOT NULL,
	[UpsellPremierListingRentals] [tinyint] NOT NULL,
	[UpsellPremiumUpgrade] [tinyint] NOT NULL,
	[UpsellPropertyLogo] [tinyint] NOT NULL,
	[UpsellPropInternetBanner] [tinyint] NOT NULL,
	[UpsellRentFeaturedPlacement] [tinyint] NOT NULL,
	[UpsellRentPathConnect] [tinyint] NOT NULL,
	[UpsellRepMon] [tinyint] NOT NULL,
	[UpsellRewardCardRent] [tinyint] NOT NULL,
	[UpsellSocialMediaMan] [tinyint] NOT NULL,
	[UpsellSpanish] [tinyint] NOT NULL,
	[UpsellSponsoredApartment] [tinyint] NOT NULL,
	[UpsellSpotlightAG] [tinyint] NOT NULL,
	[UpsellSpotlightRent] [tinyint] NOT NULL,
	[UpsellSpotlightRentals] [tinyint] NOT NULL,
	[UpsellStandardListingRentals] [tinyint] NOT NULL,
	[UpsellStandardPlusListingRentals] [tinyint] NOT NULL,
	[UpsellSubscriptionModelRent] [tinyint] NOT NULL,
	[UpsellVideoSpokesmodel] [tinyint] NOT NULL,
	[UpsellVIPPlacementRent] [tinyint] NOT NULL,
	[UpsellVirtualBrochure] [tinyint] NOT NULL,
	[UpsellVirtualTourFulfilled] [tinyint] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  View [dbo].[vw_APSDimListingsForAG]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE VIEW [dbo].[vw_APSDimListingsForAG]
as
SELECT YMDID
,'AG' AS Website
,PropertyIDAG as PropertyID
,ListingID
,ListingTypeID
,ListingType 
,ListingTypeShort 
,ExternalID
,ListingPricingSource as ExternalPriceCode
,ListingDetailsSource
,ISNULL(MgtCoIDAG,0) AS MgtCoID
,MgtCoNameAG  as MgtCoName
,PropertyName 
,PropertyAddress 
,StatusIDAG AS StatusID
,PropertyCity 
,PropertyState 
,PropertyZipCode AS ZipCode
,MetroName 
,SectionName AS SectionName
,SubSectionName  AS SubSectionName
,PropertyTotalUnits
,TotalPhotos AS TotalPhotos
,ActivePhotos
,TotalFloorPlans AS TotalFloorPlans
,ActiveFloorplans
,TotalAmenities AS TotalAmenities
,ActiveAmenities
,ActiveHDPhotos
,ActiveHDFloorplans
,ShowOfficeHours AS ShowOfficeHours
,ListingDescriptionLength
,ShowPricing AS ShowPricing
,CalculatedPrice
,UpsellHighlighted AS UpsellListHighlighted
,UpsellCoupon AS UpsellListCoupon
,UpsellEmercial AS UpsellPropEmercial
,UpsellCommunityVideo AS UpsellPropCommunityVideo
,UpsellFeaturedCommunityPlatinum AS UpsellPropFeaturedCommunityPlatinum
,UpsellFeaturedCommunityGold AS UpsellPropFeaturedCommunityGold
,UpsellFeaturedCommunitySilver AS UpsellPropFeaturedCommunitySilver
,UpsellVirtualBrochure AS UpsellPropVirtualBrochure
,BadgeCorporate AS UpsellListCorporateListing
,BadgeCollege AS UpsellListCollegeListing
,BadgeMilitary AS UpsellListMilitaryListing
,UpsellApartmentListing AS UpsellListApartmentListing
,UpsellPhotoUpgrade AS UpsellPropPhotoUpgrade
,UpsellMgmtManagementCoLogoDisplay AS UpsellMgmtManagementCoLogoDisplay
,BadgeSenior AS UpsellListSeniorListing
,UpsellPropertyLogo AS UpsellPropPropertyLogoDisplay
,UpsellPremiumUpgrade AS UpsellPropPremiumUpgrade
,UpsellVideoSpokesmodel AS UpsellPropVideoSpokesModel
,UpsellFrontPage AS UpsellPropFrontPage
,UpsellSpanish AS UpsellPropSpanish
,UpsellCallRecording AS UpsellPropCallRecording
,UpsellFormToPhone AS UpsellPropFormToPhone
,UpsellPremierListingRentals AS UpsellPropRentalsPremier
,UpsellFeaturedListingRentals AS UpsellPropRentalsFeatured
,UpsellListingRentals AS UpsellListRentalsListing
,UpsellFloorplanUpgrade AS UpsellListFloorplanUpgrade
,UpsellPayPerLead AS UpsellListPayPerLead
,UpsellSpotlightRentals AS UpsellListRentalsSpotlightAd
,UpsellSpotlightAG AS UpsellListSpotLight
,UpsellPayPerLease AS UpsellListPayPerLease
,UpsellDiamondMetro AS UpsellListDiamondMetro
,UpsellDiamondCity AS UpsellListDiamondCity
,UpsellDiamondMax AS UpsellListDiamondMax
,UpsellStandardListingRentals AS UpsellListRentalsStandard
,UpsellCarousel AS UpsellListCommunityCarousel
,Upsell30SecondVideo AS UpsellList30SecondVideo
,Upsell60SecondVideo AS UpsellList60SecondVideo
,UpsellCarouselRentals AS UpsellListRentalsCarousel
,UpsellStandardPlusListingRentals AS UpsellListRentalsStandardPlus
,UpsellMobileSpotlight AS UpsellListMobileSpotLight
,UpsellMobileDeal AS UpsellPropMobileDeal
,UpsellDynamicLeadForm AS UpsellPropDynamicLeadForm
,BadgeIncomeRestricted AS UpsellListIncomeRestricted
,BadgePetFriendly AS UpsellListPetFriendly
,BadgeLuxury AS UpsellListLuxuryCommunity
,UpsellRepMon AS UpsellPropRepMon
,UpsellSocialMediaMan AS UpsellPropSocialMediaMan
,UpsellMobileDiamond AS UpsellListMobileDiamond
,UpsellEZPay AS UpsellListEZPay
,UpsellMgmtPeelAd AS UpsellMgmtPeelAd
,UpsellSponsoredApartment AS UpsellListSponsoredApartment
,UpsellHDPanoTour AS UpsellListHDPanoTours
,UpsellHDVideo AS UpsellListHDVideo
,UpsellHDPhoto AS UpsellListHDPhoto
,Upsell3DFloorplan AS UpsellList3DFloorPlan
,UpsellCommunityVideoURLFulfilled as CommunityVideoURLFulfilled
,UpsellHDActiveFloorplansFulfilled as HDActiveFloorplansFulfilled
,UpsellHDActivePhotosFulfilled as HDActivePhotosFulfilled
,UpsellHDPanoTourFulfilled as HDTourURLFulfilled
,UpsellHDVideoFulfilled as HDVideoURLFulfilled
,UpsellLinkedFloorplanFulfilled as LinkedFloorplanFulfilled
,UpsellVirtualTourFulfilled AS VirtualTourFulfilled
,UpsellLinked3DFloorplanFulfilled as Linked3DFloorplanFulfilled
,UpsellLinkedRoomPlannerFulfilled AS LinkedRoomPlannerFulfilled
,UpsellMobileDealFulfilled as MobileDealFulfilled
,UpsellAGSites AS UpsellListAGSites
,UpsellMediaCenter AS UpsellMediaCenter
,UpsellPayPerLeaseALM AS UpsellListPayPerLeaseALM
,0 AS UpsellFutureUse04
,CR3AvgOverallRatingAG AS CR3AvgOverallRating
,IsSEM
,IsOverThreshold
,IsRentalProp as IsRentalPropToBeDeleted
,CallTrackingInBook
,NULL as CallTrackingInBookStartDate
,ActiveCoupon as CouponActiveOnSite
,isnull(WebCouponStartDate,GETDATE()) AS CouponStartDate
,isnull(WebCouponExpirationDate,GETDATE()) AS CouponExpirationDate
,WebCouponText as CouponText 
,VerizonFIOS AS VerizonFIOS
,ATTUverse
,DIRECTV
,Brighthouse
,Charter
,XFinitySP AS XfinitySP
,XFinityDP AS XfinityDP
,XFinityTP AS XfinityTP
,TimeWarner AS TimeWarner
,isnull(Ranking,'') AS Ranking
,NumericRank
,MobileTollFreeAG AS WebTollFree  --this is actually the mobile number
,WebMobileTargetAG AS WebTarget    --this is actually the mobile number
,WebTollFreeRentals  AS RentalsTollFree
,WebTargetRentals  AS RentalsTarget
,ASGTollFree 
,ASGTarget 
,AGCTollFree 
,AGCTarget 
,PropertyContactPhone as ContactPhone 
,WebTollFreeAG as LocalTestNumber
,LeadFaxAG as LeadFax
,LeadEmailAG  AS UnusedLeadEmail
,PropertyURL 
,UpsellAGSitesCustomURL as AGSitesURL
,PhoneLeadRecapEmail 
,LeadEmailWithTypeAG as LeadEmailWithType
,VanityURL  AS VanityURL
,PlacementTierAG as PlacementTier
,PrintProductPoints
,InternetProductPoints
,LegacyLoyaltyPoints
,ContractLoyaltyPoints
,MobilePoints
,LastUpdateYMDID
,getdate() as LastUpdateDateTime
,GeoLong 
,GeoLat 
,geography::Point(GeoLat, GeoLong, 4326) AS GeogPoint
,Whisper AS Whisper
,LowPrice
,HighPrice
,UpsellLinkedFloorplan as LinkedFloorplan
,UpsellLinked3DFloorplan as Linked3DFloorplan
,UpsellLinkedRoomPlanner AS LinkedRoomPlanner
,RPLRank AS RPLRANK
FROM Dimension.Listings_APS;






GO
/****** Object:  View [dbo].[vw_APSDimListingsForRentcom]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE VIEW [dbo].[vw_APSDimListingsForRentcom]
as
SELECT 
YMDID AS YMDID
,'Rentcom' AS Website
,PropertyIDRent AS RentPropertyID
,PropertyIDAG AS PropertyID
,ListingID AS ListingID
,ListingTypeID AS ListingTypeID
,ListingType AS ListingType
,ListingTypeShort AS ListingTypeShort
,StatusIDRent AS RentStatusID
,ExternalID AS ExternalID
,ListingPricingSource AS ExternalPriceCode
,ListingDetailsSource AS ListingDetailsSource
,ISNULL(MgtCoIDRent,0) AS RentMgtCoID
,MgtCoNameRent AS MgtCoName
,ISNULL(CompanyIDRent,0) AS RentCompanyID
,PropertyName AS PropertyName
,PropertyAddress AS PropertyAddress
,PropertyCity AS PropertyCity
,PropertyState AS PropertyState
,PropertyZipCode AS PropertyZip
,MetroName AS MetroName
,SectionName AS SectionName
,SubSectionName AS SubSectionName
,PropertyTotalUnits AS PropertyTotalUnits
,TotalPhotos AS TotalPhotos
,ActivePhotos AS ActivePhotos
,TotalFloorPlans AS TotalFloorPlans
,ActiveFloorplans AS ActiveFloorPlans
,TotalAmenities AS TotalAmenities
,ActiveAmenities AS ActiveAmenities
,ActiveHDPhotos AS ActiveHDPhotos
,ActiveHDFloorplans AS ActiveHDFloorPlans
,ShowPricing AS ShowPricing
,ShowOfficeHours AS ShowOfficeHours
,ListingDescriptionLength AS ListingDescriptionLength
,UpsellCoupon AS UpsellListCoupon
,UpsellCallRecording AS UpsellPropCallRecording
,UpsellListingRent AS UpsellRentListing
,UpsellRewardCardRent AS UpsellRentRewardCard
,UpsellRentFeaturedPlacement AS UpsellRentFeaturedPlacement
,UpsellPrecisionTargetedEmailRent AS UpsellRentPTE
,UpsellVIPPlacementRent AS UpsellRentVIPPlacement
,UpsellNoVacancyRent AS UpsellRentNoVacancy
,UpsellFeaturedCommunityRent AS UpsellRentMetroFL
,UpsellSpotlightRent AS UpsellRentSpotlight
,UpsellSubscriptionModelRent AS UpsellRentSubscriptionModel
,UpsellPayPerLeaseALM AS UpsellListPayPerLeaseALM
,0 AS FutureUpsell04
,0 AS FutureUpsell05
,CR3AvgOverallRatingRent AS CR3AvgOverallRating
,UpsellHDActiveFloorplansFulfilled AS HDActiveFloorPlansFulfilled
,UpsellHDActivePhotosFulfilled AS HDActivePhotosFulfilled
,UpsellLinkedFloorplanFulfilled AS LinkedFloorPlanFulfilled
,UpsellLinked3DFloorplanFulfilled AS Linked3DFloorPlanFulfilled
,UpsellLinkedRoomPlannerFulfilled AS LinkedRoomPlannerFulfilled
,UpsellMobileDealFulfilled AS MobileDealFulfilled
,ActiveCoupon AS CouponActiveOnSite
,WebCouponStartDate AS CouponStartDate
,WebCouponExpirationDate AS CouponExpirationDate
,WebCouponText AS CouponText
,WebTollFreeRent AS RentInternetTollFree
,WebTargetRent AS RentInternetTarget
,MobileTollFreeRent AS RentMobileTollFree
,MobileTargetRent AS RentMobileTarget
,PropertyContactPhone AS ContactPhone
,PropertyURL AS PropertyURL
,LeadFaxRent AS RentLeadFax
,LeadEmailRent AS RentLeadEmail
,LeadEmailWithTypeRent AS RentLeadEmailWithType
,VanityURL AS VanityURL
,LastUpdateYMDID AS LastUpdateYMDID
,DateModified AS DateModified
,GeoLong AS GeoLong
,GeoLat AS GeoLat
,Whisper AS Whisper
,UpsellLinkedFloorplan AS LinkedFloorPlan
,UpsellLinked3DFloorplan AS Linked3DFloorPlan
,UpsellLinkedRoomPlanner AS LinkedRoomPlanner
,LowPrice AS LowPrice
,HighPrice AS HighPrice
,CalculatedPrice AS CalculatedPrice
FROM Dimension.Listings_APS
WHERE PropertyIDRent <> 0





GO
/****** Object:  View [dbo].[vw_APSDimListingsForRentPath]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE VIEW [dbo].[vw_APSDimListingsForRentPath]
AS
SELECT YMDID
,'RentPath' AS Website
,ListingID
,PropertyIDAG
,StatusIDAG
,PropertyIDRent
,StatusIDRent
,ListingSource
,BillingIDAG
,BillingIDRent
,SFCommunityID AS SFDCCommunityID
,SFPropertyAcctID
,Ext_PropertyID
,ListingType
,PropertyName
,PropertyAddress
,PropertyCity
,PropertyState
,PropertyZipCode
,CBSACode
,CBSAName
,GeoLat
,GeoLong
,PropertyContactPhone
,MarketCD
,MarketName
,MgtCoIDAG
,MgtCoNameAG
,MgtCoIDRent
,MgtCoNameRent
,CompanyIDRent
,IsSEM
,IsSmallProperty
,PropertyTotalUnits
,ShowPricing
,LowPrice
,HighPrice
,WebMobileTargetAG
,WebTollFreeAG
,MobileTollFreeAG
,WebTargetRent
,WebTollFreeRent
,MobileTargetRent
,MobileTollFreeRent
,WebTargetRentals
,WebTollFreeRentals
,CallRecordingOptOut
,Whisper
,LeadEmailAG
,LeadEmailRent
,LeadEmailWithTypeAG
,LeadEmailWithTypeRent
,PhoneLeadRecapEmail
,LeadFaxAG
,LeadFaxRent
,ListingDescriptionLength
,VanityURL
,PropertyURL
,TotalAmenities
,ActiveAmenities
,ActiveCoupon
,WebCouponStartDate
,WebCouponExpirationDate
,WebCouponText
,MobileCouponStartDate
,MobileCouponExpirationDate
,MobileCouponText
,ActiveFloorplans
,ActiveLowResFloorplans
,ActiveHDFloorplans
,ActivePhotos
,ActiveLowResPhotos
,ActiveHDPhotos
,ExternalID
,ListingPricingSource
,ListingDetailsSource
,HasAvailabilityURL
,AvailabilityURL
,Charter
,DIRECTV
,HasCR3
,CR3AvgOverallRatingAG
,CR3AvgOverallRatingRent
,ShowOfficeHours
,PlacementTierAG
,PlacementTierRent
,ContractLoyaltyPoints
,InternetProductPoints
,LegacyLoyaltyPoints
,MobilePoints
,PrintProductPoints
,Ranking
,RPLRank
,BadgeCollege
,BadgeCorporate
,BadgeIncomeRestricted
,BadgeLuxury
,BadgeMilitary
,BadgePetFriendly
,BadgeSenior
,BadgeGolf
,BadgeWaterfront
,BadgeFurnished
,BadgeNewConstruction
,BadgeRemodeled
,DefaultBadge
,Upsell3DFloorplan
,UpsellAGSites
,UpsellAGSitesCustomURL
,UpsellCarousel
,UpsellCarouselRentals
,UpsellCommunityVideoURLFulfilled
,UpsellCoupon
,UpsellDiamondCity
,UpsellDiamondMax
,UpsellDiamondMetro
,UpsellDynamicLeadForm
,UpsellEmercial
,UpsellFeaturedCommunityAG
,UpsellFeaturedCommunityRent
,UpsellFeaturedListingRentals
,UpsellHDActiveFloorplansFulfilled
,UpsellHDActivePhotosFulfilled
,UpsellHDPanoTour
,UpsellHDPanoTourFulfilled
,UpsellHDPhoto
,UpsellHDVideo
,UpsellHDVideoFulfilled
,UpsellHighlighted
,UpsellLinked3DFloorplan
,UpsellLinked3DFloorplanFulfilled
,UpsellLinkedFloorplan
,UpsellLinkedFloorplanFulfilled
,UpsellLinkedLowResFloorplan
,UpsellLinkedLowResFloorplanFulfilled
,UpsellLinkedHDFloorplan
,UpsellLinkedHDFloorplanFulfilled
,UpsellLinkedRoomPlanner
,UpsellLinkedRoomPlannerFulfilled
,UpsellListingRent
,UpsellListingRentals
,UpsellMediaCenter
,UpsellMgmtPeelAd
,UpsellMobileDeal
,UpsellMobileDealFulfilled
,UpsellMobileDiamond
,UpsellMobileSpotlight
,UpsellNoVacancyRent
,UpsellPayPerLead
,UpsellPayPerLease
,UpsellPayPerLeaseALM
,UpsellPhotoUpgrade
,UpsellPrecisionTargetedEmailRent
,UpsellPremierListingRentals
,UpsellPremiumUpgrade
,UpsellPropInternetBanner
,UpsellRewardCardRent
,UpsellSponsoredApartment
,UpsellSpotlightAG
,UpsellSpotlightRent
,UpsellSpotlightRentals
,UpsellStandardListingRentals
,UpsellStandardPlusListingRentals
,UpsellSubscriptionModelRent
,UpsellVideoSpokesmodel
,UpsellVIPPlacementRent
,UpsellVirtualBrochure
,UpsellVirtualTourFulfilled
,0 AS UpsellFuture2
,0 AS UpsellFuture3
,0 AS UpsellFuture4
,0 AS UpsellFuture5
,0 AS UpsellFuture6
,0 AS UpsellFuture7
,0 AS UpsellFuture8
,0 AS UpsellFuture9
,geography::Point(GeoLat, GeoLong, 4326) AS GeoPoint
,LastUpdateYMDID
FROM Dimension.Listings_APS










GO
/****** Object:  Table [Dimension].[ClickEventsMap]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Dimension].[ClickEventsMap](
	[clickevent] [varchar](255) NULL,
	[page] [varchar](255) NULL,
	[page_sub] [varchar](255) NULL,
	[action] [varchar](255) NULL,
	[position] [varchar](255) NULL,
	[selection] [varchar](255) NULL,
	[page_category] [varchar](255) NULL,
	[ismarted] [tinyint] NULL
) ON [PRIMARY]

GO
/****** Object:  View [Dimension].[vw_clickevent]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [Dimension].[vw_clickevent] AS
SELECT distinct [clickevent]
FROM [RentPath].[Dimension].[ClickEventsMap]

GO
/****** Object:  Table [Dimension].[Listings]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Dimension].[Listings](
	[YMDID] [int] NOT NULL,
	[ListingID] [int] NOT NULL,
	[PropertyIDAG] [int] NOT NULL,
	[StatusIDAG] [tinyint] NOT NULL,
	[PropertyIDRent] [int] NOT NULL,
	[StatusIDRent] [tinyint] NOT NULL,
	[ListingSource] [varchar](20) NULL,
	[BillingIDAG] [varchar](20) NOT NULL,
	[BillingIDRent] [varchar](20) NOT NULL,
	[SFDCCommunityID] [varchar](20) NOT NULL,
	[SFPropertyAcctID] [varchar](20) NULL,
	[Ext_PropertyID] [int] NULL,
	[ListingType] [varchar](25) NOT NULL,
	[PropertyName] [varchar](100) NOT NULL,
	[PropertyAddress] [varchar](40) NOT NULL,
	[PropertyCity] [varchar](40) NOT NULL,
	[PropertyState] [varchar](2) NOT NULL,
	[PropertyZipCode] [varchar](10) NOT NULL,
	[CBSACode] [nvarchar](50) NOT NULL,
	[CBSAName] [nvarchar](200) NOT NULL,
	[GeoLat] [decimal](10, 4) NOT NULL,
	[GeoLong] [decimal](10, 4) NOT NULL,
	[PropertyContactPhone] [varchar](20) NOT NULL,
	[MarketCD] [varchar](20) NOT NULL,
	[MarketName] [varchar](50) NOT NULL,
	[MgtCoIDAG] [int] NULL,
	[MgtCoNameAG] [varchar](80) NULL,
	[MgtCoIDRent] [int] NULL,
	[MgtCoNameRent] [varchar](80) NULL,
	[CompanyIDRent] [int] NULL,
	[IsSEM] [int] NOT NULL,
	[IsSmallProperty] [tinyint] NOT NULL,
	[PropertyTotalUnits] [int] NOT NULL,
	[ShowPricing] [int] NOT NULL,
	[LowPrice] [int] NOT NULL,
	[HighPrice] [int] NOT NULL,
	[WebMobileTargetAG] [varchar](20) NOT NULL,
	[WebTollFreeAG] [varchar](20) NOT NULL,
	[MobileTollFreeAG] [varchar](20) NOT NULL,
	[WebTargetRent] [varchar](20) NOT NULL,
	[WebTollFreeRent] [varchar](20) NOT NULL,
	[MobileTargetRent] [varchar](20) NOT NULL,
	[MobileTollFreeRent] [varchar](20) NOT NULL,
	[WebTargetRentals] [varchar](20) NOT NULL,
	[WebTollFreeRentals] [varchar](20) NOT NULL,
	[CallRecordingOptOut] [tinyint] NOT NULL,
	[Whisper] [tinyint] NOT NULL,
	[LeadEmailAG] [varchar](2000) NOT NULL,
	[LeadEmailRent] [varchar](2000) NOT NULL,
	[LeadEmailWithTypeAG] [varchar](1000) NOT NULL,
	[LeadEmailWithTypeRent] [varchar](1000) NOT NULL,
	[PhoneLeadRecapEmail] [varchar](400) NOT NULL,
	[LeadFaxAG] [varchar](400) NOT NULL,
	[LeadFaxRent] [varchar](400) NOT NULL,
	[ListingDescriptionLength] [int] NOT NULL,
	[VanityURL] [varchar](400) NOT NULL,
	[PropertyURL] [varchar](400) NOT NULL,
	[TotalAmenities] [int] NOT NULL,
	[ActiveAmenities] [int] NOT NULL,
	[ActiveCoupon] [tinyint] NOT NULL,
	[WebCouponStartDate] [datetime] NULL,
	[WebCouponExpirationDate] [datetime] NULL,
	[WebCouponText] [varchar](600) NOT NULL,
	[MobileCouponStartDate] [datetime] NULL,
	[MobileCouponExpirationDate] [datetime] NULL,
	[MobileCouponText] [varchar](600) NOT NULL,
	[ActiveFloorplans] [int] NOT NULL,
	[ActiveLowResFloorplans] [int] NOT NULL,
	[ActiveHDFloorplans] [int] NOT NULL,
	[ActivePhotos] [int] NOT NULL,
	[ActiveLowResPhotos] [int] NOT NULL,
	[ActiveHDPhotos] [int] NOT NULL,
	[ExternalID] [varchar](50) NOT NULL,
	[ListingPricingSource] [varchar](8) NOT NULL,
	[ListingDetailsSource] [varchar](20) NOT NULL,
	[HasAvailabilityURL] [tinyint] NULL,
	[AvailabilityURL] [varchar](255) NOT NULL,
	[Charter] [tinyint] NOT NULL,
	[DIRECTV] [tinyint] NOT NULL,
	[HasCR3] [tinyint] NOT NULL,
	[CR3AvgOverallRatingAG] [numeric](16, 1) NOT NULL,
	[CR3AvgOverallRatingRent] [numeric](16, 1) NOT NULL,
	[ShowOfficeHours] [int] NOT NULL,
	[PlacementTierAG] [int] NOT NULL,
	[PlacementTierRent] [int] NOT NULL,
	[ContractLoyaltyPoints] [int] NOT NULL,
	[InternetProductPoints] [int] NOT NULL,
	[LegacyLoyaltyPoints] [int] NOT NULL,
	[MobilePoints] [int] NOT NULL,
	[PrintProductPoints] [int] NOT NULL,
	[Ranking] [varchar](1) NOT NULL,
	[RPLRank] [numeric](8, 2) NOT NULL,
	[BadgeCollege] [tinyint] NOT NULL,
	[BadgeCorporate] [tinyint] NOT NULL,
	[BadgeIncomeRestricted] [tinyint] NOT NULL,
	[BadgeLuxury] [tinyint] NOT NULL,
	[BadgeMilitary] [tinyint] NOT NULL,
	[BadgePetFriendly] [tinyint] NOT NULL,
	[BadgeSenior] [tinyint] NOT NULL,
	[BadgeGolf] [tinyint] NOT NULL,
	[BadgeWaterfront] [tinyint] NOT NULL,
	[BadgeFurnished] [tinyint] NOT NULL,
	[BadgeNewConstruction] [tinyint] NOT NULL,
	[BadgeRemodeled] [tinyint] NOT NULL,
	[DefaultBadge] [varchar](50) NULL,
	[Upsell3DFloorplan] [tinyint] NOT NULL,
	[UpsellAGSites] [tinyint] NOT NULL,
	[UpsellAGSitesCustomURL] [varchar](400) NOT NULL,
	[UpsellCarousel] [tinyint] NOT NULL,
	[UpsellCarouselRentals] [tinyint] NOT NULL,
	[UpsellCommunityVideoURLFulfilled] [tinyint] NOT NULL,
	[UpsellCoupon] [tinyint] NOT NULL,
	[UpsellDiamondCity] [tinyint] NOT NULL,
	[UpsellDiamondMax] [tinyint] NOT NULL,
	[UpsellDiamondMetro] [tinyint] NOT NULL,
	[UpsellDynamicLeadForm] [tinyint] NOT NULL,
	[UpsellEmercial] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityAG] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityRent] [tinyint] NOT NULL,
	[UpsellFeaturedListingRentals] [tinyint] NOT NULL,
	[UpsellHDActiveFloorplansFulfilled] [tinyint] NOT NULL,
	[UpsellHDActivePhotosFulfilled] [tinyint] NOT NULL,
	[UpsellHDPanoTour] [tinyint] NOT NULL,
	[UpsellHDPanoTourFulfilled] [tinyint] NOT NULL,
	[UpsellHDPhoto] [tinyint] NOT NULL,
	[UpsellHDVideo] [tinyint] NOT NULL,
	[UpsellHDVideoFulfilled] [tinyint] NOT NULL,
	[UpsellHighlighted] [tinyint] NOT NULL,
	[UpsellLinked3DFloorplan] [int] NOT NULL,
	[UpsellLinked3DFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedFloorplan] [int] NOT NULL,
	[UpsellLinkedFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedLowResFloorplan] [int] NOT NULL,
	[UpsellLinkedLowResFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedHDFloorplan] [int] NOT NULL,
	[UpsellLinkedHDFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedRoomPlanner] [int] NOT NULL,
	[UpsellLinkedRoomPlannerFulfilled] [tinyint] NOT NULL,
	[UpsellListingRent] [tinyint] NOT NULL,
	[UpsellListingRentals] [tinyint] NOT NULL,
	[UpsellMediaCenter] [tinyint] NOT NULL,
	[UpsellMgmtPeelAd] [tinyint] NOT NULL,
	[UpsellMobileDeal] [tinyint] NOT NULL,
	[UpsellMobileDealFulfilled] [tinyint] NOT NULL,
	[UpsellMobileDiamond] [tinyint] NOT NULL,
	[UpsellMobileSpotlight] [tinyint] NOT NULL,
	[UpsellNoVacancyRent] [tinyint] NOT NULL,
	[UpsellPayPerLead] [tinyint] NOT NULL,
	[UpsellPayPerLease] [tinyint] NOT NULL,
	[UpsellPayPerLeaseALM] [tinyint] NOT NULL,
	[UpsellPhotoUpgrade] [tinyint] NOT NULL,
	[UpsellPrecisionTargetedEmailRent] [tinyint] NOT NULL,
	[UpsellPremierListingRentals] [tinyint] NOT NULL,
	[UpsellPremiumUpgrade] [tinyint] NOT NULL,
	[UpsellPropInternetBanner] [tinyint] NOT NULL,
	[UpsellRewardCardRent] [tinyint] NOT NULL,
	[UpsellSponsoredApartment] [tinyint] NOT NULL,
	[UpsellSpotlightAG] [tinyint] NOT NULL,
	[UpsellSpotlightRent] [tinyint] NOT NULL,
	[UpsellSpotlightRentals] [tinyint] NOT NULL,
	[UpsellStandardListingRentals] [tinyint] NOT NULL,
	[UpsellStandardPlusListingRentals] [tinyint] NOT NULL,
	[UpsellSubscriptionModelRent] [tinyint] NOT NULL,
	[UpsellVideoSpokesmodel] [tinyint] NOT NULL,
	[UpsellVIPPlacementRent] [tinyint] NOT NULL,
	[UpsellVirtualBrochure] [tinyint] NOT NULL,
	[UpsellVirtualTourFulfilled] [tinyint] NOT NULL,
	[UpsellFuture2] [tinyint] NOT NULL,
	[UpsellFuture3] [tinyint] NOT NULL,
	[UpsellFuture4] [tinyint] NOT NULL,
	[UpsellFuture5] [tinyint] NOT NULL,
	[UpsellFuture6] [tinyint] NOT NULL,
	[UpsellFuture7] [tinyint] NOT NULL,
	[UpsellFuture8] [tinyint] NOT NULL,
	[UpsellFuture9] [tinyint] NOT NULL,
	[GeoPoint] [geography] NULL,
	[LastUpdateYMDID] [int] NOT NULL,
 CONSTRAINT [PK_Listings] PRIMARY KEY CLUSTERED 
(
	[ListingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  View [Dimension].[vw_Listings]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [Dimension].[vw_Listings] AS
SELECT [ListingID]
      ,[PropertyIDAG]
      ,[StatusIDAG]
      ,[PropertyIDRent]
      ,[StatusIDRent]
      ,[SFDCCommunityID]
      ,[ListingType]
      ,[PropertyName]
      ,[PropertyCity]
      ,[PropertyState]
      ,[PropertyZipCode]
      ,[CBSAName]
      ,[MarketName]
      ,[MgtCoNameAG]
      ,[MgtCoNameRent]
      ,[IsSEM]
      ,[IsSmallProperty]
      ,[PropertyTotalUnits]
      ,[ShowPricing]
      ,[LowPrice]
      ,[HighPrice]
      ,[TotalAmenities]
      ,[ActiveAmenities]
      ,[ActiveCoupon]
      ,[ActiveFloorplans]
      ,[ActiveLowResFloorplans]
      ,[ActiveHDFloorplans]
      ,[ActivePhotos]
      ,[ActiveLowResPhotos]
      ,[ActiveHDPhotos]
      ,[Charter]
      ,[DIRECTV]
      ,[CR3AvgOverallRatingAG]
      ,[CR3AvgOverallRatingRent]
      ,[ShowOfficeHours]
      ,[PlacementTierAG]
      ,[PlacementTierRent]
      ,[ContractLoyaltyPoints]
      ,[InternetProductPoints]
      ,[LegacyLoyaltyPoints]
      ,[MobilePoints]
      ,[PrintProductPoints]
      ,[Ranking]
      ,[RPLRank]
      ,[BadgeCollege]
      ,[BadgeCorporate]
      ,[BadgeIncomeRestricted]
      ,[BadgeLuxury]
      ,[BadgeMilitary]
      ,[BadgePetFriendly]
      ,[BadgeSenior]
      ,[Upsell3DFloorplan]
      ,[UpsellAGSites]
      ,[UpsellCarousel]
      ,[UpsellCarouselRentals]
      ,[UpsellCommunityVideoURLFulfilled]
      ,[UpsellCoupon]
      ,[UpsellDiamondCity]
      ,[UpsellDiamondMax]
      ,[UpsellDiamondMetro]
      ,[UpsellEmercial]
      ,[UpsellFeaturedCommunityAG]
      ,[UpsellFeaturedCommunityRent]
      ,[UpsellFeaturedListingRentals]
      ,[UpsellHDActiveFloorplansFulfilled]
      ,[UpsellHDActivePhotosFulfilled]
      ,[UpsellHDPanoTour]
      ,[UpsellHDPanoTourFulfilled]
      ,[UpsellHDPhoto]
      ,[UpsellHDVideo]
      ,[UpsellHDVideoFulfilled]
      ,[UpsellHighlighted]
      ,[UpsellLinked3DFloorplan]
      ,[UpsellLinked3DFloorplanFulfilled]
      ,[UpsellLinkedFloorplan]
      ,[UpsellLinkedFloorplanFulfilled]
      ,[UpsellLinkedLowResFloorplan]
      ,[UpsellLinkedLowResFloorplanFulfilled]
      ,[UpsellLinkedHDFloorplan]
      ,[UpsellLinkedHDFloorplanFulfilled]
      ,[UpsellLinkedRoomPlanner]
      ,[UpsellLinkedRoomPlannerFulfilled]
      ,[UpsellListingRent]
      ,[UpsellListingRentals]
      ,[UpsellMediaCenter]
      ,[UpsellMgmtPeelAd]
      ,[UpsellMobileDeal]
      ,[UpsellMobileDealFulfilled]
      ,[UpsellMobileDiamond]
      ,[UpsellMobileSpotlight]
      ,[UpsellNoVacancyRent]
      ,[UpsellPayPerLead]
      ,[UpsellPayPerLease]
      ,[UpsellPhotoUpgrade]
      ,[UpsellPrecisionTargetedEmailRent]
      ,[UpsellPremierListingRentals]
      ,[UpsellPremiumUpgrade]
      ,[UpsellRewardCardRent]
      ,[UpsellSponsoredApartment]
      ,[UpsellSpotlightAG]
      ,[UpsellSpotlightRent]
      ,[UpsellSpotlightRentals]
      ,[UpsellStandardListingRentals]
      ,[UpsellStandardPlusListingRentals]
      ,[UpsellSubscriptionModelRent]
      ,[UpsellVideoSpokesmodel]
      ,[UpsellVIPPlacementRent]
      ,[UpsellVirtualBrochure]
      ,[UpsellVirtualTourFulfilled]
      ,[GeoPoint]
  FROM [Dimension].[Listings]


GO
/****** Object:  Table [Dimension].[Profiles]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Dimension].[Profiles](
	[ProfileID] [int] NULL,
	[ProfileName] [varchar](20) NULL,
	[SubprofileID] [int] NULL,
	[SubprofileName] [varchar](50) NULL
) ON [PRIMARY]

GO
/****** Object:  View [Dimension].[vw_Profiles]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [Dimension].[vw_Profiles] AS
SELECT [ProfileID]
      ,[ProfileName]
      ,[SubprofileID]
      ,[SubprofileName]
  FROM [Dimension].[Profiles]


GO
/****** Object:  Table [Mart].[Listings]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Mart].[Listings](
	[YMDID] [int] NOT NULL,
	[YearMonth] [int] NOT NULL,
	[ListingID] [int] NOT NULL,
	[ListingDescriptionLength] [int] NOT NULL,
	[ListingTypeID] [int] NOT NULL,
	[ListingTypeShort] [varchar](5) NOT NULL,
	[PropertyIDAG] [int] NOT NULL,
	[StatusIDAG] [tinyint] NOT NULL,
	[PropertyIDRent] [int] NOT NULL,
	[StatusIDRent] [tinyint] NOT NULL,
	[ListingType] [varchar](25) NOT NULL,
	[IsSEM] [tinyint] NOT NULL,
	[ShowPricing] [tinyint] NOT NULL,
	[LowPrice] [int] NOT NULL,
	[HighPrice] [int] NOT NULL,
	[CallRecordingOptOut] [tinyint] NOT NULL,
	[TotalAmenities] [int] NOT NULL,
	[ActiveAmenities] [int] NULL,
	[ActiveCoupon] [tinyint] NOT NULL,
	[ActiveFloorplans] [int] NULL,
	[ActiveHDFloorPlans] [int] NULL,
	[ActiveHDPhotos] [int] NULL,
	[ActivePhotos] [int] NULL,
	[ExternalID] [varchar](50) NOT NULL,
	[HasAvailabilityURL] [tinyint] NULL,
	[ListingPricingSource] [varchar](8) NOT NULL,
	[CallTrackingInBook] [tinyint] NOT NULL,
	[InvoicedLeases] [int] NOT NULL,
	[IsOverThreshold] [tinyint] NOT NULL,
	[IsRentalProp] [tinyint] NOT NULL,
	[LastUpdateYMDID] [int] NOT NULL,
	[LeaseMgtCoID] [int] NOT NULL,
	[RentLeaseMgtCoID] [int] NOT NULL,
	[ATTUverse] [tinyint] NOT NULL,
	[BrightHouse] [tinyint] NOT NULL,
	[Charter] [tinyint] NOT NULL,
	[DIRECTV] [tinyint] NOT NULL,
	[TimeWarner] [tinyint] NOT NULL,
	[VerizonFIOS] [tinyint] NOT NULL,
	[XfinityDP] [tinyint] NOT NULL,
	[XfinitySP] [tinyint] NOT NULL,
	[XfinityTP] [tinyint] NOT NULL,
	[HasCR3] [tinyint] NOT NULL,
	[CR3AvgOverallRatingAG] [decimal](16, 1) NOT NULL,
	[CR3AvgOverallRatingRent] [decimal](16, 1) NOT NULL,
	[ShowOfficeHours] [tinyint] NOT NULL,
	[PlacementTierAG] [int] NOT NULL,
	[PlacementTierRent] [int] NOT NULL,
	[ContractLoyaltyPoints] [int] NOT NULL,
	[InternetProductPoints] [int] NOT NULL,
	[LegacyLoyaltyPoints] [int] NOT NULL,
	[MobilePoints] [int] NOT NULL,
	[PrintProductPoints] [int] NOT NULL,
	[Ranking] [char](1) NOT NULL,
	[NumericRank] [decimal](15, 4) NOT NULL,
	[RPLRANK] [decimal](8, 2) NOT NULL,
	[BadgeCollege] [tinyint] NOT NULL,
	[BadgeCorporate] [tinyint] NOT NULL,
	[BadgeIncomeRestricted] [tinyint] NOT NULL,
	[BadgeLuxury] [tinyint] NOT NULL,
	[BadgeMilitary] [tinyint] NOT NULL,
	[BadgePetFriendly] [tinyint] NOT NULL,
	[BadgeSenior] [tinyint] NOT NULL,
	[BadgeGolf] [tinyint] NULL,
	[BadgeWaterfront] [tinyint] NULL,
	[BadgeFurnished] [tinyint] NULL,
	[BadgeNewConstruction] [tinyint] NULL,
	[BadgeRemodeled] [tinyint] NULL,
	[DefaultBadge] [varchar](50) NULL,
	[Upsell30SecondVideo] [tinyint] NOT NULL,
	[Upsell3DFloorplan] [tinyint] NOT NULL,
	[Upsell60SecondVideo] [tinyint] NOT NULL,
	[UpsellAdCreator] [tinyint] NOT NULL,
	[UpsellAGMobileSyndication] [tinyint] NOT NULL,
	[UpsellAGSites] [tinyint] NOT NULL,
	[UpsellApartmentListing] [tinyint] NOT NULL,
	[UpsellBillingOnly] [tinyint] NOT NULL,
	[UpsellCallRecording] [tinyint] NOT NULL,
	[UpsellCarousel] [tinyint] NOT NULL,
	[UpsellCarouselRentals] [tinyint] NOT NULL,
	[UpsellCategoryListing] [tinyint] NOT NULL,
	[UpsellCommunityVideo] [tinyint] NOT NULL,
	[UpsellCommunityVideoURLFulfilled] [tinyint] NOT NULL,
	[UpsellCoupon] [tinyint] NOT NULL,
	[UpsellDiamondCity] [tinyint] NOT NULL,
	[UpsellDiamondMax] [tinyint] NOT NULL,
	[UpsellDiamondMetro] [tinyint] NOT NULL,
	[UpsellDynamicLeadForm] [tinyint] NOT NULL,
	[UpsellEmercial] [tinyint] NOT NULL,
	[UpsellEZPay] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityAG] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityGold] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityPlatinum] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityRent] [tinyint] NOT NULL,
	[UpsellFeaturedCommunitySilver] [tinyint] NOT NULL,
	[UpsellFeaturedListingRentals] [tinyint] NOT NULL,
	[UpsellFloorPlanUpgrade] [tinyint] NOT NULL,
	[UpsellFormToPhone] [tinyint] NOT NULL,
	[UpsellFrontPage] [tinyint] NOT NULL,
	[UpsellGoldTier] [tinyint] NOT NULL,
	[UpsellHDActiveFloorplansFulfilled] [tinyint] NOT NULL,
	[UpsellHDActivePhotosFulfilled] [tinyint] NOT NULL,
	[UpsellHDPanoTour] [tinyint] NOT NULL,
	[UpsellHDPanoTourFulfilled] [tinyint] NOT NULL,
	[UpsellHDPhoto] [tinyint] NOT NULL,
	[UpsellHDVideo] [tinyint] NOT NULL,
	[UpsellHDVideoFulfilled] [tinyint] NOT NULL,
	[UpsellHighlighted] [tinyint] NOT NULL,
	[UpsellLeadMail] [tinyint] NOT NULL,
	[UpsellLinked3DFloorplan] [int] NULL,
	[UpsellLinked3DFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedFloorplan] [int] NULL,
	[UpsellLinkedFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedHDFloorplan] [tinyint] NOT NULL,
	[UpsellLinkedHDFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedLowResFloorPlan] [tinyint] NOT NULL,
	[UpsellLinkedLowResFloorPlanFulFilled] [tinyint] NOT NULL,
	[UpsellLinkedRoomPlanner] [int] NULL,
	[UpsellLinkedRoomPlannerFulfilled] [tinyint] NOT NULL,
	[UpsellListingRent] [tinyint] NOT NULL,
	[UpsellListingRentals] [tinyint] NOT NULL,
	[UpsellMediaCenter] [tinyint] NOT NULL,
	[UpsellMediaCenterCoupon] [tinyint] NOT NULL,
	[UpsellMgmtManagementCoLogoDisplay] [tinyint] NOT NULL,
	[UpsellMgmtPeelAd] [tinyint] NOT NULL,
	[UpsellMobileDeal] [tinyint] NOT NULL,
	[UpsellMobileDealFulfilled] [tinyint] NOT NULL,
	[UpsellMobileDiamond] [tinyint] NOT NULL,
	[UpsellMobileSpotlight] [tinyint] NOT NULL,
	[UpsellNoVacancyRent] [tinyint] NOT NULL,
	[UpsellPayPerLead] [tinyint] NOT NULL,
	[UpsellPayPerLease] [tinyint] NOT NULL,
	[UpsellPayPerLeaseALM] [tinyint] NOT NULL,
	[UpsellPhotoPlus] [tinyint] NOT NULL,
	[UpsellPhotoUpgrade] [tinyint] NOT NULL,
	[UpsellPlatinumTier] [tinyint] NOT NULL,
	[UpsellPrecisionTargetedEmailRent] [tinyint] NOT NULL,
	[UpsellPremierListingRentals] [tinyint] NOT NULL,
	[UpsellPremiumUpgrade] [tinyint] NOT NULL,
	[UpsellPropertyLogo] [tinyint] NOT NULL,
	[UpsellPropInternetBanner] [tinyint] NULL,
	[UpsellRentFeaturedPlacement] [tinyint] NOT NULL,
	[UpsellRentpathConnect] [tinyint] NOT NULL,
	[UpsellRepMon] [tinyint] NOT NULL,
	[UpsellRewardCardRent] [tinyint] NOT NULL,
	[UpsellSocialMediaMan] [tinyint] NOT NULL,
	[UpsellSpanish] [tinyint] NOT NULL,
	[UpsellSponsoredApartment] [tinyint] NOT NULL,
	[UpsellSpotlightAG] [tinyint] NOT NULL,
	[UpsellSpotlightRent] [tinyint] NOT NULL,
	[UpsellSpotlightRentals] [tinyint] NOT NULL,
	[UpsellStandardListingRentals] [tinyint] NOT NULL,
	[UpsellStandardPlusListingRentals] [tinyint] NOT NULL,
	[UpsellSubscriptionModelRent] [tinyint] NOT NULL,
	[UpsellVideoSpokesmodel] [tinyint] NOT NULL,
	[UpsellVIPPlacementRent] [tinyint] NOT NULL,
	[UpsellVirtualBrochure] [tinyint] NOT NULL,
	[UpsellVirtualTourFulfilled] [tinyint] NOT NULL,
	[ClicksCheckYourCredit] [int] NOT NULL,
	[ClicksCommunityVideoAG] [int] NOT NULL,
	[ClicksCR3AG] [int] NOT NULL,
	[ClicksCR3Rent] [int] NOT NULL,
	[ClicksDiamondMaxCheckAvailAG] [int] NOT NULL,
	[ClicksDiamondMaxPhotoAG] [int] NOT NULL,
	[ClicksFeatCommCheckAvailAG] [int] NOT NULL,
	[ClicksFeatCommCheckAvailRent] [int] NOT NULL,
	[ClicksFeaturedCommunityAG] [int] NOT NULL,
	[ClicksFeaturedCommunityRent] [int] NOT NULL,
	[ClicksFeaturedMgtCo] [int] NOT NULL,
	[ClicksFloorplanAG] [int] NOT NULL,
	[ClicksFloorplanRent] [int] NOT NULL,
	[ClicksFrontPagePropLead] [int] NOT NULL,
	[ClicksHDFloorplanAG] [int] NOT NULL,
	[ClicksHDFloorplanRent] [int] NOT NULL,
	[ClicksHDPanoTourAG] [int] NOT NULL,
	[ClicksHDPanoTourRent] [int] NOT NULL,
	[ClicksHDPhotoAG] [int] NOT NULL,
	[ClicksHDPhotoRent] [int] NOT NULL,
	[ClicksHDVideoAG] [int] NOT NULL,
	[ClicksHDVideoRent] [int] NOT NULL,
	[ClicksLeadSubmissionAG] [int] NOT NULL,
	[ClicksLeadSubmissionRent] [int] NOT NULL,
	[ClicksMapAG] [int] NOT NULL,
	[ClicksMapRent] [int] NOT NULL,
	[ClicksMgtCoPeelAdAG] [int] NOT NULL,
	[ClicksMgtCoPeelAdRent] [int] NOT NULL,
	[ClicksMgtCoURLAG] [int] NOT NULL,
	[ClicksMgtCoURLRent] [int] NOT NULL,
	[ClicksPhotosAG] [int] NOT NULL,
	[ClicksPhotosRent] [int] NOT NULL,
	[ClicksReserveNowAG] [int] NOT NULL,
	[ClicksReserveNowRent] [int] NOT NULL,
	[ClicksSpotlightRentSpecialsAG] [int] NOT NULL,
	[ClicksSpotlightRentSpecialsRent] [int] NOT NULL,
	[ClicksSpotlightReserveNowAG] [int] NOT NULL,
	[ClicksSRPListingCheckAvailAG] [int] NOT NULL,
	[ClicksSRPListingCheckAvailRent] [int] NOT NULL,
	[ClicksWebURLAG] [int] NOT NULL,
	[ClicksWebURLRent] [int] NOT NULL,
	[ViewsEmercial] [int] NOT NULL,
	[ViewsListingPage] [int] NOT NULL,
	[ViewsListingPage_Mobile] [int] NOT NULL,
	[ViewsListingPage_Sites] [int] NOT NULL,
	[ViewsListingPageAGSites] [int] NOT NULL,
	[ViewsListingPageMobileAG] [int] NOT NULL,
	[ViewsListingPageMobileRent] [int] NOT NULL,
	[ViewsListingPageWebAG] [int] NOT NULL,
	[ViewsListingPageWebRent] [int] NOT NULL,
	[ViewsVirtualBrochure] [int] NOT NULL,
	[AGCPrintConnectedCalls] [int] NOT NULL,
	[AGCPrintMissedCalls] [int] NOT NULL,
	[ASGPrintConnectedCalls] [int] NOT NULL,
	[ASGPrintMissedCalls] [int] NOT NULL,
	[CombinedFeedsConnectedCalls] [int] NOT NULL,
	[CombinedFeedsMissedCalls] [int] NOT NULL,
	[CraigsListConnectedCalls] [int] NOT NULL,
	[CraigsListMissedCalls] [int] NOT NULL,
	[CTCConnectedCalls] [int] NOT NULL,
	[CTCMissedCalls] [int] NOT NULL,
	[DripConnectedCalls] [int] NOT NULL,
	[DripMissedCalls] [int] NOT NULL,
	[GoogleConnectedCalls] [int] NOT NULL,
	[GoogleMissedCalls] [int] NOT NULL,
	[LeadMailConnectedCalls] [int] NOT NULL,
	[LeadMailMissedCalls] [int] NOT NULL,
	[LuxuryConnectedCalls] [int] NOT NULL,
	[LuxuryMissedCalls] [int] NOT NULL,
	[MarchexConnectedCalls] [int] NOT NULL,
	[MarchexMissedCalls] [int] NOT NULL,
	[MobileSEMConnectedCalls] [int] NOT NULL,
	[MobileSEMMissedCalls] [int] NOT NULL,
	[PaidSPConnectedCalls] [int] NOT NULL,
	[PaidSPMissedCalls] [int] NOT NULL,
	[PPCConnectedCalls] [int] NOT NULL,
	[PPCMissedCalls] [int] NOT NULL,
	[RentConnectedCallsAG] [int] NOT NULL,
	[RentMissedCallsAG] [int] NOT NULL,
	[RentConnectedCallsRent] [int] NOT NULL,
	[RentMissedCallsRent] [int] NOT NULL,
	[RentMobileConnectedCallsAG] [int] NOT NULL,
	[RentMobileMissedCallsAG] [int] NOT NULL,
	[RentMobileConnectedCallsRent] [int] NOT NULL,
	[RentMobileMissedCallsRent] [int] NOT NULL,
	[RentMobileSEMConnectedCalls] [int] NOT NULL,
	[RentMobileSEMMissedCalls] [int] NOT NULL,
	[RentOneWebConnectedCallsAG] [int] NOT NULL,
	[RentOneWebMissedCallsAG] [int] NOT NULL,
	[RentOneWebConnectedCallsRent] [int] NOT NULL,
	[RentOneWebMissedCallsRent] [int] NOT NULL,
	[RentSEMConnectedCalls] [int] NOT NULL,
	[RentSEMMissedCalls] [int] NOT NULL,
	[SEMConnectedCalls] [int] NOT NULL,
	[SEMMissedCalls] [int] NOT NULL,
	[SitesConnectedCalls] [int] NOT NULL,
	[SitesMissedCalls] [int] NOT NULL,
	[SMSConnectedCalls] [int] NOT NULL,
	[SMSMissedCalls] [int] NOT NULL,
	[TruliaConnectedCalls] [int] NOT NULL,
	[TruliaMissedCalls] [int] NOT NULL,
	[VideoConnectedCalls] [int] NOT NULL,
	[VideoMissedCalls] [int] NOT NULL,
	[WebLocalTrackingNumberConnectedCalls] [int] NOT NULL,
	[WebLocalTrackingNumberMissedCalls] [int] NOT NULL,
	[WebConnectedCalls] [int] NOT NULL,
	[WebMissedCalls] [int] NOT NULL,
	[AGEmailLeads] [int] NOT NULL,
	[AGKindleEmailLeads] [int] NOT NULL,
	[AGMobileEmailLeads] [int] NOT NULL,
	[AGTabletEmailLeads] [int] NOT NULL,
	[AIMCOEmailLeads] [int] NOT NULL,
	[AndroidEmailLeadsAG] [int] NOT NULL,
	[AndroidEmailLeadsRent] [int] NOT NULL,
	[CampusHomesOnlineEmailLeads] [int] NOT NULL,
	[CondoEmailLeads] [int] NOT NULL,
	[EREIFeedLeads] [int] NOT NULL,
	[HotpadsEmailLeads] [int] NOT NULL,
	[iPadEmailLeadsAG] [int] NOT NULL,
	[iPadEmailLeadsRent] [int] NOT NULL,
	[iPhoneEmailLeadsAG] [int] NOT NULL,
	[iPhoneEmailLeadsRent] [int] NOT NULL,
	[LovelyEmailLeads] [int] NOT NULL,
	[LuxuryEmailLeads] [int] NOT NULL,
	[MetroEmailLeads] [int] NOT NULL,
	[NeighborhoodEmailLeads] [int] NOT NULL,
	[OodleEmailLeads] [int] NOT NULL,
	[PropSolutionsFeedLeads] [int] NOT NULL,
	[RDTFeedLeadsAG] [int] NOT NULL,
	[RDTFeedLeadsRent] [int] NOT NULL,
	[RentAndroidEmailLeads] [int] NOT NULL,
	[RentEmailLeadsAG] [int] NOT NULL,
	[RentEmailLeadsRent] [int] NOT NULL,
	[RentiPadEmailLeads] [int] NOT NULL,
	[RentiPhoneEmailLeads] [int] NOT NULL,
	[RentRentarEmailLeads] [int] NOT NULL,
	[SitesEmailLeads] [int] NOT NULL,
	[TruliaEmailLeadsAG] [int] NOT NULL,
	[TruliaEmailLeadsRent] [int] NOT NULL,
	[VastEmailLeads] [int] NOT NULL,
	[VerticalBrandsEmailLeads] [int] NOT NULL,
	[YardiRCFeedLeads] [int] NOT NULL,
	[YieldFeedLeads] [int] NOT NULL,
	[ZillowEmailLeads] [int] NOT NULL,
	[RentalHousesEmailLeads] [int] NOT NULL,
	[RentalsAndroidEmailLeads] [int] NOT NULL,
	[RentalsEmailLeads] [int] NOT NULL,
	[RentalsIPhoneEmailLeads] [int] NOT NULL,
	[RentalsMobileEmailLeads] [int] NOT NULL,
	[RentalsLocalConnectedCalls] [int] NOT NULL,
	[RentalsLocalMissedCalls] [int] NOT NULL,
	[RentalsConnectedCalls] [int] NOT NULL,
	[RentalsMissedCalls] [int] NOT NULL,
	[RentAltRegConnectedCallsAG] [int] NOT NULL,
	[RentAltRegMissedCallsAG] [int] NOT NULL,
	[RentAltRegConnectedCallsRent] [int] NOT NULL,
	[RentAltRegMissedCallsRent] [int] NOT NULL,
	[ImprFrontCover] [int] NOT NULL,
	[CheckListingAvail] [int] NOT NULL,
	[SRPListingImprAG] [int] NOT NULL,
	[SRPListingImprRent] [int] NOT NULL,
	[SRPUniqueVisitAG] [int] NOT NULL,
	[SRPUniqueVisitRent] [int] NOT NULL,
	[TextMsgMobile] [int] NOT NULL,
	[TextMsgWeb] [int] NOT NULL,
	[TotalFloorPlans] [int] NOT NULL,
	[TotalPhotos] [int] NOT NULL,
	[UniqueVisitsAG] [int] NOT NULL,
	[UniqueVisitsAGSites] [int] NOT NULL,
	[UniqueVisitsMobileAG] [int] NOT NULL,
	[UniqueVisitsMobileRent] [int] NOT NULL,
	[UniqueVisitsRent] [int] NOT NULL,
	[ClicksDiamondMaxPhoto]  AS ([ClicksDiamondMaxPhotoAG]+(0)),
	[ClicksDiamondMaxCheckAvail]  AS ([ClicksDiamondMaxCheckAvailAG]+(0)),
	[ClicksFloorplan]  AS ([ClicksFloorplanAG]+[ClicksFloorplanRent]),
	[ClicksHDFloorplan]  AS ([ClicksHDFloorplanAG]+[ClicksHDFloorplanRent]),
	[ClicksPhotos]  AS ([ClicksPhotosAG]+[ClicksPhotosRent]),
	[ClicksHDPhoto]  AS ([ClicksHDPhotoAG]+[ClicksHDPhotoRent]),
	[ClicksHDVideo]  AS ([ClicksHDVideoAG]+[ClicksHDVideoRent]),
	[ClicksHDPanoTour]  AS ([ClicksHDPanoTourAG]+[ClicksHDPanoTourRent]),
	[ClicksMap]  AS ([ClicksMapAG]+[ClicksMapRent]),
	[ClicksWebURL]  AS ([ClicksWebURLAG]+[ClicksWebURLRent]),
	[ClicksMgtCoPeelAd]  AS ([ClicksMgtCoPeelAdAG]+[ClicksMgtCoPeelAdRent]),
	[ClicksReserveNow]  AS ([ClicksReserveNowAG]+[ClicksReserveNowRent]),
	[ClicksFeaturedCommunity]  AS ([ClicksFeaturedCommunityAG]+[ClicksFeaturedCommunityRent]),
	[ClicksFeatCommCheckAvail]  AS ([ClicksFeatCommCheckAvailAG]+[ClicksFeatCommCheckAvailRent]),
	[ClicksSRPListingCheckAvail]  AS ([ClicksSRPListingCheckAvailAG]+[ClicksSRPListingCheckAvailRent]),
	[ClicksCR3]  AS ([ClicksCR3AG]+[ClicksCR3Rent]),
	[ClicksSpotlightRentSpecials]  AS ([ClicksSpotlightRentSpecialsAG]+[ClicksSpotlightRentSpecialsRent]),
	[ClicksSpotlightReserveNow]  AS ([ClicksSpotlightReserveNowAG]+(0)),
	[SRPListingImpr]  AS ([SRPListingImprAG]+[SRPListingImprRent]),
	[SRPUniqueVisit]  AS ([SRPUniqueVisitAG]+[SRPUniqueVisitRent]),
	[UniqueVisits]  AS ([UniqueVisitsAG]+[UniqueVisitsRent]),
	[UniqueVisitsMobile]  AS ([UniqueVisitsMobileAG]+[UniqueVisitsMobileRent]),
	[UniqueVisitsSites]  AS ([UniqueVisitsAGSites]+(0)),
	[ViewsListingPageWeb]  AS ([ViewsListingPageWebAG]+[ViewsListingPageWebRent]),
	[ViewsListingPageMobile]  AS ([ViewsListingPageMobileAG]+[ViewsListingPageMobileRent]),
	[ViewsListingPageSites]  AS ([ViewsListingPageAGSites]+(0)),
	[ConnectedCalls]  AS (((((((((((((((((((((((((((((([AGCPrintConnectedCalls]+[ASGPrintConnectedCalls])+[CombinedFeedsConnectedCalls])+[CTCConnectedCalls])+[DripConnectedCalls])+[GoogleConnectedCalls])+[LeadMailConnectedCalls])+[LuxuryConnectedCalls])+[MarchexConnectedCalls])+[MobileSEMConnectedCalls])+[PaidSPConnectedCalls])+[PPCConnectedCalls])+[RentConnectedCallsAG])+[RentConnectedCallsRent])+[RentMobileConnectedCallsAG])+[RentMobileConnectedCallsRent])+[RentMobileSEMConnectedCalls])+[RentOneWebConnectedCallsAG])+[RentOneWebConnectedCallsRent])+[RentSEMConnectedCalls])+[SEMConnectedCalls])+[SitesConnectedCalls])+[SMSConnectedCalls])+[TruliaConnectedCalls])+[VideoConnectedCalls])+[WebLocalTrackingNumberConnectedCalls])+[WebConnectedCalls])+[RentalsLocalConnectedCalls])+[RentalsConnectedCalls])+[RentAltRegConnectedCallsAG])+[RentAltRegConnectedCallsRent]),
	[ConnectedCallsAG]  AS (((((((((((((((((((((((([AGCPrintConnectedCalls]+[ASGPrintConnectedCalls])+[CombinedFeedsConnectedCalls])+[CTCConnectedCalls])+[DripConnectedCalls])+[GoogleConnectedCalls])+[LeadMailConnectedCalls])+[LuxuryConnectedCalls])+[MarchexConnectedCalls])+[MobileSEMConnectedCalls])+[PaidSPConnectedCalls])+[PPCConnectedCalls])+[RentConnectedCallsAG])+[RentMobileConnectedCallsAG])+[RentOneWebConnectedCallsAG])+[SEMConnectedCalls])+[SitesConnectedCalls])+[SMSConnectedCalls])+[TruliaConnectedCalls])+[VideoConnectedCalls])+[WebLocalTrackingNumberConnectedCalls])+[WebConnectedCalls])+[RentalsLocalConnectedCalls])+[RentalsConnectedCalls])+[RentAltRegConnectedCallsAG]),
	[ConnectedCallsRent]  AS ((((([RentConnectedCallsRent]+[RentMobileConnectedCallsRent])+[RentMobileSEMConnectedCalls])+[RentOneWebConnectedCallsRent])+[RentSEMConnectedCalls])+[RentAltRegConnectedCallsRent]),
	[DesktopConnectedCalls]  AS ((((((((((((((((((((((([CombinedFeedsConnectedCalls]+[CTCConnectedCalls])+[DripConnectedCalls])+[GoogleConnectedCalls])+[LeadMailConnectedCalls])+[LuxuryConnectedCalls])+[MarchexConnectedCalls])+[PaidSPConnectedCalls])+[PPCConnectedCalls])+[RentConnectedCallsAG])+[RentConnectedCallsRent])+[RentOneWebConnectedCallsAG])+[RentOneWebConnectedCallsRent])+[RentSEMConnectedCalls])+[SEMConnectedCalls])+[SitesConnectedCalls])+[SMSConnectedCalls])+[TruliaConnectedCalls])+[VideoConnectedCalls])+[WebConnectedCalls])+[RentalsLocalConnectedCalls])+[RentalsConnectedCalls])+[RentAltRegConnectedCallsAG])+[RentAltRegConnectedCallsRent]),
	[DesktopConnectedCallsAG]  AS ((((((((((((((((((([CombinedFeedsConnectedCalls]+[CTCConnectedCalls])+[DripConnectedCalls])+[GoogleConnectedCalls])+[LeadMailConnectedCalls])+[LuxuryConnectedCalls])+[MarchexConnectedCalls])+[PaidSPConnectedCalls])+[PPCConnectedCalls])+[RentConnectedCallsAG])+[RentOneWebConnectedCallsAG])+[SEMConnectedCalls])+[SitesConnectedCalls])+[SMSConnectedCalls])+[TruliaConnectedCalls])+[VideoConnectedCalls])+[WebConnectedCalls])+[RentalsLocalConnectedCalls])+[RentalsConnectedCalls])+[RentAltRegConnectedCallsAG]),
	[DesktopConnectedCallsRent]  AS ((([RentConnectedCallsRent]+[RentOneWebConnectedCallsRent])+[RentSEMConnectedCalls])+[RentAltRegConnectedCallsRent]),
	[MobileConnectedCalls]  AS (((([MobileSEMConnectedCalls]+[RentMobileConnectedCallsAG])+[RentMobileConnectedCallsRent])+[RentMobileSEMConnectedCalls])+[WebLocalTrackingNumberConnectedCalls]),
	[MobileConnectedCallsAG]  AS (([MobileSEMConnectedCalls]+[RentMobileConnectedCallsAG])+[WebLocalTrackingNumberConnectedCalls]),
	[MobileConnectedCallsRent]  AS ([RentMobileConnectedCallsRent]+[RentMobileSEMConnectedCalls]),
	[MissedCalls]  AS (((((((((((((((((((((((((((((([AGCPrintMissedCalls]+[ASGPrintMissedCalls])+[CombinedFeedsMissedCalls])+[CTCMissedCalls])+[DripMissedCalls])+[GoogleMissedCalls])+[LeadMailMissedCalls])+[LuxuryMissedCalls])+[MarchexMissedCalls])+[MobileSEMMissedCalls])+[PaidSPMissedCalls])+[PPCMissedCalls])+[RentMissedCallsAG])+[RentMissedCallsRent])+[RentMobileMissedCallsAG])+[RentMobileMissedCallsRent])+[RentMobileSEMMissedCalls])+[RentOneWebMissedCallsAG])+[RentOneWebMissedCallsRent])+[RentSEMMissedCalls])+[SEMMissedCalls])+[SitesMissedCalls])+[SMSMissedCalls])+[TruliaMissedCalls])+[VideoMissedCalls])+[WebLocalTrackingNumberMissedCalls])+[WebMissedCalls])+[RentalsLocalMissedCalls])+[RentalsMissedCalls])+[RentAltRegMissedCallsAG])+[RentAltRegMissedCallsRent]),
	[MissedCallsAG]  AS (((((((((((((((((((((((([AGCPrintMissedCalls]+[ASGPrintMissedCalls])+[CombinedFeedsMissedCalls])+[CTCMissedCalls])+[DripMissedCalls])+[GoogleMissedCalls])+[LeadMailMissedCalls])+[LuxuryMissedCalls])+[MarchexMissedCalls])+[MobileSEMMissedCalls])+[PaidSPMissedCalls])+[PPCMissedCalls])+[RentMissedCallsAG])+[RentMobileMissedCallsAG])+[RentOneWebMissedCallsAG])+[SEMMissedCalls])+[SitesMissedCalls])+[SMSMissedCalls])+[TruliaMissedCalls])+[VideoMissedCalls])+[WebLocalTrackingNumberMissedCalls])+[WebMissedCalls])+[RentalsLocalMissedCalls])+[RentalsMissedCalls])+[RentAltRegMissedCallsAG]),
	[MissedCallsRent]  AS ((((([RentMissedCallsRent]+[RentMobileMissedCallsRent])+[RentMobileSEMMissedCalls])+[RentOneWebMissedCallsRent])+[RentSEMMissedCalls])+[RentAltRegMissedCallsRent]),
	[DesktopMissedCalls]  AS ((((((((((((((((((((((([CombinedFeedsMissedCalls]+[CTCMissedCalls])+[DripMissedCalls])+[GoogleMissedCalls])+[LeadMailMissedCalls])+[LuxuryMissedCalls])+[MarchexMissedCalls])+[PaidSPMissedCalls])+[PPCMissedCalls])+[RentMissedCallsAG])+[RentMissedCallsRent])+[RentOneWebMissedCallsAG])+[RentOneWebMissedCallsRent])+[RentSEMMissedCalls])+[SEMMissedCalls])+[SitesMissedCalls])+[SMSMissedCalls])+[TruliaMissedCalls])+[VideoMissedCalls])+[WebMissedCalls])+[RentalsLocalMissedCalls])+[RentalsMissedCalls])+[RentAltRegMissedCallsAG])+[RentAltRegMissedCallsRent]),
	[DesktopMissedCallsAG]  AS ((((((((((((((((((([CombinedFeedsMissedCalls]+[CTCMissedCalls])+[DripMissedCalls])+[GoogleMissedCalls])+[LeadMailMissedCalls])+[LuxuryMissedCalls])+[MarchexMissedCalls])+[PaidSPMissedCalls])+[PPCMissedCalls])+[RentMissedCallsAG])+[RentOneWebMissedCallsAG])+[SEMMissedCalls])+[SitesMissedCalls])+[SMSMissedCalls])+[TruliaMissedCalls])+[VideoMissedCalls])+[WebMissedCalls])+[RentalsLocalMissedCalls])+[RentalsMissedCalls])+[RentAltRegMissedCallsAG]),
	[DesktopMissedCallsRent]  AS ((([RentMissedCallsRent]+[RentOneWebMissedCallsRent])+[RentSEMMissedCalls])+[RentAltRegMissedCallsRent]),
	[MobileMissedCalls]  AS (((([MobileSEMMissedCalls]+[RentMobileMissedCallsAG])+[RentMobileMissedCallsRent])+[RentMobileSEMMissedCalls])+[WebLocalTrackingNumberMissedCalls]),
	[MobileMissedCallsAG]  AS (([MobileSEMMissedCalls]+[RentMobileMissedCallsAG])+[WebLocalTrackingNumberMissedCalls]),
	[MobileMissedCallsRent]  AS ([RentMobileMissedCallsRent]+[RentMobileSEMMissedCalls]),
	[PhoneLeads]  AS (((((((((((((((((((((((((((((([AGCPrintConnectedCalls]+[ASGPrintConnectedCalls])+[CombinedFeedsConnectedCalls])+[CTCConnectedCalls])+[DripConnectedCalls])+[GoogleConnectedCalls])+[LeadMailConnectedCalls])+[LuxuryConnectedCalls])+[MarchexConnectedCalls])+[MobileSEMConnectedCalls])+[PaidSPConnectedCalls])+[PPCConnectedCalls])+[RentConnectedCallsAG])+[RentConnectedCallsRent])+[RentMobileConnectedCallsAG])+[RentMobileConnectedCallsRent])+[RentMobileSEMConnectedCalls])+[RentOneWebConnectedCallsAG])+[RentOneWebConnectedCallsRent])+[RentSEMConnectedCalls])+[SEMConnectedCalls])+[SitesConnectedCalls])+[SMSConnectedCalls])+[TruliaConnectedCalls])+[VideoConnectedCalls])+[WebLocalTrackingNumberConnectedCalls])+[WebConnectedCalls])+[RentalsLocalConnectedCalls])+[RentalsConnectedCalls])+[RentAltRegConnectedCallsAG])+[RentAltRegConnectedCallsRent]),
	[PhoneLeadsAG]  AS (((((((((((((((((((((((([AGCPrintConnectedCalls]+[ASGPrintConnectedCalls])+[CombinedFeedsConnectedCalls])+[CTCConnectedCalls])+[DripConnectedCalls])+[GoogleConnectedCalls])+[LeadMailConnectedCalls])+[LuxuryConnectedCalls])+[MarchexConnectedCalls])+[MobileSEMConnectedCalls])+[PaidSPConnectedCalls])+[PPCConnectedCalls])+[RentConnectedCallsAG])+[RentMobileConnectedCallsAG])+[RentOneWebConnectedCallsAG])+[SEMConnectedCalls])+[SitesConnectedCalls])+[SMSConnectedCalls])+[TruliaConnectedCalls])+[VideoConnectedCalls])+[WebLocalTrackingNumberConnectedCalls])+[WebConnectedCalls])+[RentalsLocalConnectedCalls])+[RentalsConnectedCalls])+[RentAltRegConnectedCallsAG]),
	[PhoneLeadsRent]  AS ((((([RentConnectedCallsRent]+[RentMobileConnectedCallsRent])+[RentMobileSEMConnectedCalls])+[RentOneWebConnectedCallsRent])+[RentSEMConnectedCalls])+[RentAltRegConnectedCallsRent]),
	[DesktopPhoneLeads]  AS ((((((((((((((((((((((([CombinedFeedsConnectedCalls]+[CTCConnectedCalls])+[DripConnectedCalls])+[GoogleConnectedCalls])+[LeadMailConnectedCalls])+[LuxuryConnectedCalls])+[MarchexConnectedCalls])+[PaidSPConnectedCalls])+[PPCConnectedCalls])+[RentConnectedCallsAG])+[RentConnectedCallsRent])+[RentOneWebConnectedCallsAG])+[RentOneWebConnectedCallsRent])+[RentSEMConnectedCalls])+[SEMConnectedCalls])+[SitesConnectedCalls])+[SMSConnectedCalls])+[TruliaConnectedCalls])+[VideoConnectedCalls])+[WebConnectedCalls])+[RentalsLocalConnectedCalls])+[RentalsConnectedCalls])+[RentAltRegConnectedCallsAG])+[RentAltRegConnectedCallsRent]),
	[DesktopPhoneLeadsAG]  AS ((((((((((((((((((([CombinedFeedsConnectedCalls]+[CTCConnectedCalls])+[DripConnectedCalls])+[GoogleConnectedCalls])+[LeadMailConnectedCalls])+[LuxuryConnectedCalls])+[MarchexConnectedCalls])+[PaidSPConnectedCalls])+[PPCConnectedCalls])+[RentConnectedCallsAG])+[RentOneWebConnectedCallsAG])+[SEMConnectedCalls])+[SitesConnectedCalls])+[SMSConnectedCalls])+[TruliaConnectedCalls])+[VideoConnectedCalls])+[WebConnectedCalls])+[RentalsLocalConnectedCalls])+[RentalsConnectedCalls])+[RentAltRegConnectedCallsAG]),
	[DesktopPhoneLeadsRent]  AS ((([RentConnectedCallsRent]+[RentOneWebConnectedCallsRent])+[RentSEMConnectedCalls])+[RentAltRegConnectedCallsRent]),
	[MobilePhoneLeads]  AS (((([MobileSEMConnectedCalls]+[RentMobileConnectedCallsAG])+[RentMobileConnectedCallsRent])+[RentMobileSEMConnectedCalls])+[WebLocalTrackingNumberConnectedCalls]),
	[MobilePhoneLeadsAG]  AS (([MobileSEMConnectedCalls]+[RentMobileConnectedCallsAG])+[WebLocalTrackingNumberConnectedCalls]),
	[MobilePhoneLeadsRent]  AS ([RentMobileConnectedCallsRent]+[RentMobileSEMConnectedCalls]),
	[EmailLeads]  AS ((((((((((((((((((((((((((((((((((((((((([AGEmailLeads]+[AGKindleEmailLeads])+[AGMobileEmailLeads])+[AGTabletEmailLeads])+[AIMCOEmailLeads])+[AndroidEmailLeadsAG])+[AndroidEmailLeadsRent])+[CampusHomesOnlineEmailLeads])+[CondoEmailLeads])+[EREIFeedLeads])+[HotpadsEmailLeads])+[iPadEmailLeadsAG])+[iPadEmailLeadsRent])+[iPhoneEmailLeadsAG])+[iPhoneEmailLeadsRent])+[LovelyEmailLeads])+[LuxuryEmailLeads])+[MetroEmailLeads])+[NeighborhoodEmailLeads])+[OodleEmailLeads])+[PropSolutionsFeedLeads])+[RDTFeedLeadsAG])+[RDTFeedLeadsRent])+[RentAndroidEmailLeads])+[RentEmailLeadsAG])+[RentEmailLeadsRent])+[RentiPadEmailLeads])+[RentiPhoneEmailLeads])+[RentRentarEmailLeads])+[SitesEmailLeads])+[TruliaEmailLeadsAG])+[TruliaEmailLeadsRent])+[VastEmailLeads])+[VerticalBrandsEmailLeads])+[YardiRCFeedLeads])+[YieldFeedLeads])+[ZillowEmailLeads])+[RentalHousesEmailLeads])+[RentalsAndroidEmailLeads])+[RentalsEmailLeads])+[RentalsIPhoneEmailLeads])+[RentalsMobileEmailLeads]),
	[EmailLeadsAG]  AS ((((((((((((((((((((((((((((((((([AGEmailLeads]+[AGKindleEmailLeads])+[AGMobileEmailLeads])+[AGTabletEmailLeads])+[AIMCOEmailLeads])+[AndroidEmailLeadsAG])+[CampusHomesOnlineEmailLeads])+[CondoEmailLeads])+[EREIFeedLeads])+[HotpadsEmailLeads])+[iPadEmailLeadsAG])+[iPhoneEmailLeadsAG])+[LovelyEmailLeads])+[LuxuryEmailLeads])+[MetroEmailLeads])+[NeighborhoodEmailLeads])+[OodleEmailLeads])+[PropSolutionsFeedLeads])+[RDTFeedLeadsAG])+[RentAndroidEmailLeads])+[RentEmailLeadsAG])+[RentRentarEmailLeads])+[SitesEmailLeads])+[TruliaEmailLeadsAG])+[VastEmailLeads])+[VerticalBrandsEmailLeads])+[YardiRCFeedLeads])+[YieldFeedLeads])+[ZillowEmailLeads])+[RentalHousesEmailLeads])+[RentalsAndroidEmailLeads])+[RentalsEmailLeads])+[RentalsIPhoneEmailLeads])+[RentalsMobileEmailLeads]),
	[EmailLeadsRent]  AS ((((((([AndroidEmailLeadsRent]+[iPadEmailLeadsRent])+[iPhoneEmailLeadsRent])+[RDTFeedLeadsRent])+[RentEmailLeadsRent])+[RentiPadEmailLeads])+[RentiPhoneEmailLeads])+[TruliaEmailLeadsRent]),
	[ThirdPartyFeedLeads]  AS ((((((([CombinedFeedsConnectedCalls]+[CombinedFeedsMissedCalls])+[EREIFeedLeads])+[PropSolutionsFeedLeads])+[RDTFeedLeadsAG])+[RDTFeedLeadsRent])+[YardiRCFeedLeads])+[YieldFeedLeads]),
	[DesktopEmailLeads]  AS (((((((((((((((((((((((((([AGEmailLeads]+[AIMCOEmailLeads])+[CampusHomesOnlineEmailLeads])+[CondoEmailLeads])+[EREIFeedLeads])+[HotpadsEmailLeads])+[LovelyEmailLeads])+[LuxuryEmailLeads])+[MetroEmailLeads])+[NeighborhoodEmailLeads])+[OodleEmailLeads])+[PropSolutionsFeedLeads])+[RDTFeedLeadsAG])+[RDTFeedLeadsRent])+[RentEmailLeadsAG])+[RentEmailLeadsRent])+[RentRentarEmailLeads])+[SitesEmailLeads])+[TruliaEmailLeadsAG])+[TruliaEmailLeadsRent])+[VastEmailLeads])+[VerticalBrandsEmailLeads])+[YardiRCFeedLeads])+[YieldFeedLeads])+[ZillowEmailLeads])+[RentalHousesEmailLeads])+[RentalsEmailLeads]),
	[DesktopEmailLeadsAG]  AS ((((((((((((((((((((((([AGEmailLeads]+[AIMCOEmailLeads])+[CampusHomesOnlineEmailLeads])+[CondoEmailLeads])+[EREIFeedLeads])+[HotpadsEmailLeads])+[LovelyEmailLeads])+[LuxuryEmailLeads])+[MetroEmailLeads])+[NeighborhoodEmailLeads])+[OodleEmailLeads])+[PropSolutionsFeedLeads])+[RDTFeedLeadsAG])+[RentEmailLeadsAG])+[RentRentarEmailLeads])+[SitesEmailLeads])+[TruliaEmailLeadsAG])+[VastEmailLeads])+[VerticalBrandsEmailLeads])+[YardiRCFeedLeads])+[YieldFeedLeads])+[ZillowEmailLeads])+[RentalHousesEmailLeads])+[RentalsEmailLeads]),
	[DesktopEmailLeadsRent]  AS (([RDTFeedLeadsRent]+[RentEmailLeadsRent])+[TruliaEmailLeadsRent]),
	[MobileEmailLeads]  AS (((((((((((((([AGKindleEmailLeads]+[AGMobileEmailLeads])+[AGTabletEmailLeads])+[AndroidEmailLeadsAG])+[AndroidEmailLeadsRent])+[iPadEmailLeadsAG])+[iPadEmailLeadsRent])+[iPhoneEmailLeadsAG])+[iPhoneEmailLeadsRent])+[RentAndroidEmailLeads])+[RentiPadEmailLeads])+[RentiPhoneEmailLeads])+[RentalsAndroidEmailLeads])+[RentalsIPhoneEmailLeads])+[RentalsMobileEmailLeads]),
	[MobileEmailLeadsAG]  AS ((((((((([AGKindleEmailLeads]+[AGMobileEmailLeads])+[AGTabletEmailLeads])+[AndroidEmailLeadsAG])+[iPadEmailLeadsAG])+[iPhoneEmailLeadsAG])+[RentAndroidEmailLeads])+[RentalsAndroidEmailLeads])+[RentalsIPhoneEmailLeads])+[RentalsMobileEmailLeads]),
	[MobileEmailLeadsRent]  AS (((([AndroidEmailLeadsRent]+[iPadEmailLeadsRent])+[iPhoneEmailLeadsRent])+[RentiPadEmailLeads])+[RentiPhoneEmailLeads]),
	[AllLeads]  AS ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((([AGCPrintConnectedCalls]+[AGCPrintMissedCalls])+[ASGPrintConnectedCalls])+[ASGPrintMissedCalls])+[CombinedFeedsConnectedCalls])+[CombinedFeedsMissedCalls])+[CTCConnectedCalls])+[CTCMissedCalls])+[DripConnectedCalls])+[DripMissedCalls])+[GoogleConnectedCalls])+[GoogleMissedCalls])+[LeadMailConnectedCalls])+[LeadMailMissedCalls])+[LuxuryConnectedCalls])+[LuxuryMissedCalls])+[MarchexConnectedCalls])+[MarchexMissedCalls])+[MobileSEMConnectedCalls])+[MobileSEMMissedCalls])+[PaidSPConnectedCalls])+[PaidSPMissedCalls])+[PPCConnectedCalls])+[PPCMissedCalls])+[RentConnectedCallsAG])+[RentMissedCallsAG])+[RentConnectedCallsRent])+[RentMissedCallsRent])+[RentMobileConnectedCallsAG])+[RentMobileMissedCallsAG])+[RentMobileConnectedCallsRent])+[RentMobileMissedCallsRent])+[RentMobileSEMConnectedCalls])+[RentMobileSEMMissedCalls])+[RentOneWebConnectedCallsAG])+[RentOneWebMissedCallsAG])+[RentOneWebConnectedCallsRent])+[RentOneWebMissedCallsRent])+[RentSEMConnectedCalls])+[RentSEMMissedCalls])+[SEMConnectedCalls])+[SEMMissedCalls])+[SitesConnectedCalls])+[SitesMissedCalls])+[SMSConnectedCalls])+[SMSMissedCalls])+[TruliaConnectedCalls])+[TruliaMissedCalls])+[VideoConnectedCalls])+[VideoMissedCalls])+[WebLocalTrackingNumberConnectedCalls])+[WebLocalTrackingNumberMissedCalls])+[WebConnectedCalls])+[WebMissedCalls])+[AGEmailLeads])+[AGKindleEmailLeads])+[AGMobileEmailLeads])+[AGTabletEmailLeads])+[AIMCOEmailLeads])+[AndroidEmailLeadsAG])+[AndroidEmailLeadsRent])+[CampusHomesOnlineEmailLeads])+[CondoEmailLeads])+[EREIFeedLeads])+[HotpadsEmailLeads])+[iPadEmailLeadsAG])+[iPadEmailLeadsRent])+[iPhoneEmailLeadsAG])+[iPhoneEmailLeadsRent])+[LovelyEmailLeads])+[LuxuryEmailLeads])+[MetroEmailLeads])+[NeighborhoodEmailLeads])+[OodleEmailLeads])+[PropSolutionsFeedLeads])+[RDTFeedLeadsAG])+[RDTFeedLeadsRent])+[RentAndroidEmailLeads])+[RentEmailLeadsAG])+[RentEmailLeadsRent])+[RentiPadEmailLeads])+[RentiPhoneEmailLeads])+[RentRentarEmailLeads])+[SitesEmailLeads])+[TruliaEmailLeadsAG])+[TruliaEmailLeadsRent])+[VastEmailLeads])+[VerticalBrandsEmailLeads])+[YardiRCFeedLeads])+[YieldFeedLeads])+[ZillowEmailLeads])+[RentalHousesEmailLeads])+[RentalsAndroidEmailLeads])+[RentalsEmailLeads])+[RentalsIPhoneEmailLeads])+[RentalsMobileEmailLeads])+[RentalsLocalConnectedCalls])+[RentalsLocalMissedCalls])+[RentalsConnectedCalls])+[RentalsMissedCalls])+[RentAltRegConnectedCallsAG])+[RentAltRegMissedCallsAG])+[RentAltRegConnectedCallsRent])+[RentAltRegMissedCallsRent])
) ON [PRIMARY]

GO
/****** Object:  Index [cuidx_YMDID_ListingID]    Script Date: 9/5/2017 7:20:04 AM ******/
CREATE UNIQUE CLUSTERED INDEX [cuidx_YMDID_ListingID] ON [Mart].[Listings]
(
	[YMDID] ASC,
	[ListingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  View [Fact].[LeadCounts]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






/*************************************************************************************************
* Name:	Mart.LeadCounts
*
* Note: This is a view used by SFDC for lead counts
*
* Hist:	01	08/31/2015		Colleen Rocks		Initial version
**************************************************************************************************/

CREATE VIEW [Fact].[LeadCounts]
AS

SELECT l.PropertyIDAG
	,SUM(CASE WHEN l.YearMonth = LEFT(CONVERT(VARCHAR(8),DATEADD(MONTH,DATEDIFF(MONTH,0,DATEADD(MONTH,-1,GETDATE())),0),112),6) THEN l.EmailLeadsAG END) AS LastMonthEmailLeadsAG
	,SUM(CASE WHEN l.YearMonth = LEFT(CONVERT(VARCHAR(8),DATEADD(MONTH,DATEDIFF(MONTH,0,DATEADD(MONTH,-1,GETDATE())),0),112),6) THEN l.EmailLeadsRent END) AS LastMonthEmailLeadsRent
	,SUM(CASE WHEN l.YearMonth = LEFT(CONVERT(VARCHAR(8),DATEADD(MONTH,DATEDIFF(MONTH,0,DATEADD(MONTH,-1,GETDATE())),0),112),6) THEN l.PhoneLeadsAG END) AS LastMonthPhoneLeadsAG
	,SUM(CASE WHEN l.YearMonth = LEFT(CONVERT(VARCHAR(8),DATEADD(MONTH,DATEDIFF(MONTH,0,DATEADD(MONTH,-1,GETDATE())),0),112),6) THEN l.PhoneLeadsRent END) AS LastMonthPhoneLeadsRent
	,SUM(CASE WHEN l.YearMonth = LEFT(CONVERT(VARCHAR(8),DATEADD(MONTH,DATEDIFF(MONTH,0,GETDATE()),0),112),6) THEN l.EmailLeadsAG END) AS CurrentMonthEmailLeadsAG
	,SUM(CASE WHEN l.YearMonth = LEFT(CONVERT(VARCHAR(8),DATEADD(MONTH,DATEDIFF(MONTH,0,GETDATE()),0),112),6) THEN l.EmailLeadsRent END) AS CurrentMonthEmailLeadsRent
	,SUM(CASE WHEN l.YearMonth = LEFT(CONVERT(VARCHAR(8),DATEADD(MONTH,DATEDIFF(MONTH,0,GETDATE()),0),112),6) THEN l.PhoneLeadsAG END) AS CurrentMonthPhoneLeadsAG
	,SUM(CASE WHEN l.YearMonth = LEFT(CONVERT(VARCHAR(8),DATEADD(MONTH,DATEDIFF(MONTH,0,GETDATE()),0),112),6) THEN l.PhoneLeadsRent END) AS CurrentMonthPhoneLeadsRent
FROM RentPath.Mart.Listings AS l
WHERE l.YMDID BETWEEN CONVERT(VARCHAR(8),DATEADD(MONTH,DATEDIFF(MONTH,0,DATEADD(MONTH,-1,GETDATE())),0),112)
	AND CONVERT(VARCHAR(8),EOMONTH(GETDATE()),112)
GROUP BY l.PropertyIDAG





GO
/****** Object:  View [Staging].[vw_RentpathMartListings]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [Staging].[vw_RentpathMartListings]
AS
SELECT ml.[YMDID] AS  [YMDID]
,ml.[YearMonth] AS  [YearMonth]
,ml.[ListingID] AS  [ListingID]
,COALESCE(ml.[PropertyIDAG],dl.[PropertyIDAG]) AS  [PropertyIDAG]
,ml.[StatusIDAG] AS  [StatusIDAG]
,COALESCE(ml.[PropertyIDRent],dl.propertyidrent) AS  [PropertyIDRent]
,ml.[StatusIDRent] AS  [StatusIDRent]
,ml.[ListingType] AS  [ListingType]
,ml.[IsSEM] AS  [IsSEM]
,ml.[ShowPricing] AS  [ShowPricing]
,ml.[LowPrice] AS  [LowPrice]
,ml.[HighPrice] AS  [HighPrice]
,ml.[CallRecordingOptOut] AS  [CallRecordingOptOut]
,ml.[TotalAmenities] AS  [TotalAmenities]
,ml.[ActiveAmenities] AS  [ActiveAmenities]
,ml.[ActiveCoupon] AS  [ActiveCoupon]
,ml.[ActiveFloorplans] AS  [ActiveFloorplans]
,ml.[ActiveHDFloorPlans] AS  [ActiveHDFloorPlans]
,ml.[ActiveHDPhotos] AS  [ActiveHDPhotos]
,ml.[ActivePhotos] AS  [ActivePhotos]
,ml.[ExternalID] AS  [ExternalID]
,ml.[ListingPricingSource] AS  [ExternalPriceCode]
,ml.[Charter] AS  [Charter]
,ml.[DIRECTV] AS  [DIRECTV]
,ml.[HasCR3] AS  [HasCR3]
,ml.[CR3AvgOverallRatingAG] AS  [CR3AvgOverallRatingAG]
,ml.[CR3AvgOverallRatingRent] AS  [CR3AvgOverallRatingRent]
,ml.[ShowOfficeHours] AS  [ShowOfficeHours]
,ml.[PlacementTierAG] AS  [PlacementTierAG]
,ml.[PlacementTierRent] AS  [PlacementTierRent]
,ml.[ContractLoyaltyPoints] AS  [ContractLoyaltyPoints]
,ml.[InternetProductPoints] AS  [InternetProductPoints]
,ml.[LegacyLoyaltyPoints] AS  [LegacyLoyaltyPoints]
,ml.[MobilePoints] AS  [MobilePoints]
,ml.[PrintProductPoints] AS  [PrintProductPoints]
,ml.[Ranking] AS  [Ranking]
,ml.[RPLRANK] AS  [RPLRANK]
,ml.[BadgeCollege] AS  [BadgeCollege]
,ml.[BadgeCorporate] AS  [BadgeCorporate]
,ml.[BadgeIncomeRestricted] AS  [BadgeIncomeRestricted]
,ml.[BadgeLuxury] AS  [BadgeLuxury]
,ml.[BadgeMilitary] AS  [BadgeMilitary]
,ml.[BadgePetFriendly] AS  [BadgePetFriendly]
,ml.[BadgeSenior] AS  [BadgeSenior]
,ml.[Upsell3DFloorplan] AS  [Upsell3DFloorplan]
,ml.[UpsellAGSites] AS  [UpsellAGSites]
,ml.[UpsellCarousel] AS  [UpsellCarousel]
,ml.[UpsellCarouselRentals] AS  [UpsellCarouselRentals]
,ml.[UpsellCommunityVideoURLFulfilled] AS  [UpsellCommunityVideoURLFulfilled]
,ml.[UpsellCoupon] AS  [UpsellCoupon]
,ml.[UpsellDiamondCity] AS  [UpsellDiamondCity]
,ml.[UpsellDiamondMax] AS  [UpsellDiamondMax]
,ml.[UpsellDiamondMetro] AS  [UpsellDiamondMetro]
,ml.[UpsellEmercial] AS  [UpsellEmercial]
,ml.[UpsellFeaturedCommunityAG] AS  [UpsellFeaturedCommunityAG]
,ml.[UpsellFeaturedCommunityRent] AS  [UpsellFeaturedCommunityRent]
,ml.[UpsellFeaturedListingRentals] AS  [UpsellFeaturedListingRentals]
,ml.[UpsellHDActiveFloorplansFulfilled] AS  [UpsellHDActiveFloorplansFulfilled]
,ml.[UpsellHDActivePhotosFulfilled] AS  [UpsellHDActivePhotosFulfilled]
,ml.[UpsellHDPanoTour] AS  [UpsellHDPanoTour]
,ml.[UpsellHDPanoTourFulfilled] AS  [UpsellHDPanoTourFulfilled]
,ml.[UpsellHDPhoto] AS  [UpsellHDPhoto]
,ml.[UpsellHDVideo] AS  [UpsellHDVideo]
,ml.[UpsellHDVideoFulfilled] AS  [UpsellHDVideoFulfilled]
,ml.[UpsellHighlighted] AS  [UpsellHighlighted]
,ml.[UpsellLinked3DFloorplan] AS  [UpsellLinked3DFloorplan]
,ml.[UpsellLinked3DFloorplanFulfilled] AS  [UpsellLinked3DFloorplanFulfilled]
,ml.[UpsellLinkedFloorplan] AS  [UpsellLinkedFloorplan]
,ml.[UpsellLinkedFloorplanFulfilled] AS  [UpsellLinkedFloorplanFulfilled]
,ml.[UpsellLinkedRoomPlanner] AS  [UpsellLinkedRoomPlanner]
,ml.[UpsellLinkedRoomPlannerFulfilled] AS  [UpsellLinkedRoomPlannerFulfilled]
,ml.[UpsellListingRent] AS  [UpsellListingRent]
,ml.[UpsellListingRentals] AS  [UpsellListingRentals]
,ml.[UpsellMediaCenter] AS  [UpsellMediaCenter]
,ml.[UpsellMgmtPeelAd] AS  [UpsellMgmtPeelAd]
,ml.[UpsellMobileDeal] AS  [UpsellMobileDeal]
,ml.[UpsellMobileDealFulfilled] AS  [UpsellMobileDealFulfilled]
,ml.[UpsellMobileDiamond] AS  [UpsellMobileDiamond]
,ml.[UpsellMobileSpotlight] AS  [UpsellMobileSpotlight]
,ml.[UpsellNoVacancyRent] AS  [UpsellNoVacancyRent]
,ml.[UpsellPayPerLead] AS  [UpsellPayPerLead]
,ml.[UpsellPayPerLease] AS  [UpsellPayPerLease]
,ml.[UpsellPhotoUpgrade] AS  [UpsellPhotoUpgrade]
,ml.[UpsellPrecisionTargetedEmailRent] AS  [UpsellPrecisionTargetedEmailRent]
,ml.[UpsellPremierListingRentals] AS  [UpsellPremierListingRentals]
,ml.[UpsellPremiumUpgrade] AS  [UpsellPremiumUpgrade]
,ml.[UpsellRewardCardRent] AS  [UpsellRewardCardRent]
,ml.[UpsellSponsoredApartment] AS  [UpsellSponsoredApartment]
,ml.[UpsellSpotlightAG] AS  [UpsellSpotlightAG]
,ml.[UpsellSpotlightRent] AS  [UpsellSpotlightRent]
,ml.[UpsellSpotlightRentals] AS  [UpsellSpotlightRentals]
,ml.[UpsellStandardListingRentals] AS  [UpsellStandardListingRentals]
,ml.[UpsellStandardPlusListingRentals] AS  [UpsellStandardPlusListingRentals]
,ml.[UpsellSubscriptionModelRent] AS  [UpsellSubscriptionModelRent]
,ml.[UpsellVideoSpokesmodel] AS  [UpsellVideoSpokesmodel]
,ml.[UpsellVIPPlacementRent] AS  [UpsellVIPPlacementRent]
,ml.[UpsellVirtualBrochure] AS  [UpsellVirtualBrochure]
,ml.[UpsellVirtualTourFulfilled] AS  [UpsellVirtualTourFulfilled]
,ml.[UpsellPayPerLeaseALM] AS  [UpsellPayPerLeaseALM]
,ml.[ClicksCommunityVideoAG] AS  [ClicksCommunityVideoAG]
,ml.[ClicksDiamondMaxPhotoAG] AS  [ClicksDiamondMaxPhotoAG]
,ml.[ClicksDiamondMaxCheckAvailAG] AS  [ClicksDiamondMaxCheckAvailAG]
,ml.[ClicksFloorplanAG] AS  [ClicksFloorplanAG]
,ml.[ClicksFloorplanRent] AS  [ClicksFloorplanRent]
,ml.[ClicksHDFloorplanAG] AS  [ClicksHDFloorplanAG]
,ml.[ClicksHDFloorplanRent] AS  [ClicksHDFloorplanRent]
,ml.[ClicksPhotosAG] AS  [ClicksPhotosAG]
,ml.[ClicksPhotosRent] AS  [ClicksPhotosRent]
,ml.[ClicksHDPhotoAG] AS  [ClicksHDPhotoAG]
,ml.[ClicksHDPhotoRent] AS  [ClicksHDPhotoRent]
,ml.[ClicksHDVideoAG] AS  [ClicksHDVideoAG]
,ml.[ClicksHDVideoRent] AS  [ClicksHDVideoRent]
,ml.[ClicksHDPanoTourAG] AS  [ClicksHDPanoTourAG]
,ml.[ClicksHDPanoTourRent] AS  [ClicksHDPanoTourRent]
,ml.[ClicksMapAG] AS  [ClicksMapAG]
,ml.[ClicksMapRent] AS  [ClicksMapRent]
,ml.[ClicksWebURLAG] AS  [ClicksWebURLAG]
,ml.[ClicksWebURLRent] AS  [ClicksWebURLRent]
,ml.[ClicksMgtCoURLAG] AS  [ClicksMgtCoURLAG]
,ml.[ClicksMgtCoURLRent] AS  [ClicksMgtCoURLRent]
,ml.[ClicksMgtCoPeelAdAG] AS  [ClicksMgtCoPeelAdAG]
,ml.[ClicksMgtCoPeelAdRent] AS  [ClicksMgtCoPeelAdRent]
,ml.[ClicksReserveNowAG] AS  [ClicksReserveNowAG]
,ml.[ClicksReserveNowRent] AS  [ClicksReserveNowRent]
,ml.[ClicksFeaturedCommunityAG] AS  [ClicksFeaturedCommunityAG]
,ml.[ClicksFeaturedCommunityRent] AS  [ClicksFeaturedCommunityRent]
,ml.[ClicksFeatCommCheckAvailAG] AS  [ClicksFeatCommCheckAvailAG]
,ml.[ClicksFeatCommCheckAvailRent] AS  [ClicksFeatCommCheckAvailRent]
,ml.[ClicksSRPListingCheckAvailAG] AS  [ClicksSRPListingCheckAvailAG]
,ml.[ClicksSRPListingCheckAvailRent] AS  [ClicksSRPListingCheckAvailRent]
,ml.[ClicksCR3AG] AS  [ClicksCR3AG]
,ml.[ClicksCR3Rent] AS  [ClicksCR3Rent]
,ml.[ClicksSpotlightRentSpecialsAG] AS  [ClicksSpotlightRentSpecialsAG]
,ml.[ClicksSpotlightRentSpecialsRent] AS  [ClicksSpotlightRentSpecialsRent]
,ml.[ClicksSpotlightReserveNowAG] AS  [ClicksSpotlightReserveNowAG]
,ml.[SRPListingImprAG] AS  [SRPListingImprAG]
,ml.[SRPListingImprRent] AS  [SRPListingImprRent]
,ml.[SRPUniqueVisitAG] AS  [SRPUniqueVisitAG]
,ml.[SRPUniqueVisitRent] AS  [SRPUniqueVisitRent]
,ml.[UniqueVisitsAG] AS  [UniqueVisitsAG]
,ml.[UniqueVisitsRent] AS  [UniqueVisitsRent]
,ml.[UniqueVisitsMobileAG] AS  [UniqueVisitsMobileAG]
,ml.[UniqueVisitsMobileRent] AS  [UniqueVisitsMobileRent]
,ml.[UniqueVisitsAGSites] AS  [UniqueVisitsAGSites]
,ml.[ViewsListingPageWebAG] AS  [ViewsListingPageWebAG]
,ml.[ViewsListingPageWebRent] AS  [ViewsListingPageWebRent]
,ml.[ViewsListingPageMobileAG] AS  [ViewsListingPageMobileAG]
,ml.[ViewsListingPageMobileRent] AS  [ViewsListingPageMobileRent]
,ml.[ViewsListingPageAGSites] AS  [ViewsListingPageAGSites]
,ml.[PhoneLeadsAG] AS  [PhoneLeadsAG]
,ml.[PhoneLeadsRent] AS  [PhoneLeadsRent]
,ml.[MissedCallsAG] AS  [MissedCallsAG]
,ml.[MissedCallsRent] AS  [MissedCallsRent]
,ml.[EmailLeadsAG] AS  [EmailLeadsAG]
,ml.[EmailLeadsRent] AS  [EmailLeadsRent]
FROM rentpath.mart.listings ml
LEFT JOIN rentpath.dimension.listings dl
	ON ml.listingid = dl.listingid


GO
/****** Object:  View [dbo].[TealiumToAPS]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[TealiumToAPS]
AS

SELECT LEFT(CleanStringListOrder,LEN(CleanStringList)-CHARINDEX(']',CleanStringList)+1) AS CleanSelectStatement
--CASE WHEN Location = 0 THEN CAST(REVERSE(RIGHT(CleanStringList,LEN(CleanStringList)))AS VARCHAR(8000)) ELSE
--CAST(REVERSE(RIGHT(CleanStringList,LEN(CleanStringList)-(Location-1)))AS VARCHAR(8000))END AS CleanSelectStatement
,CAST(REVERSE(RIGHT(CleanConcatenatedColumns,LEN(CleanConcatenatedColumns)-1))AS VARCHAR(8000)) AS CleanColumnList
,TableName
,SchemaName
,YMDID
,ConcatenatedList
,ConcatenatedColumns
,CleanConcatenatedColumns
,CleanStringList
,Location
,CHARINDEX('NULL',ConcatenatedList) AS FirstNull
,LEFT(ConcatenatedList,CHARINDEX('NULL',ConcatenatedList)) AS LeftOfFirstNullLocation
,CleanStringListOrder
FROM
(
SELECT CHARINDEX(']qes[',REVERSE(
		REPLACE(REPLACE(CASE WHEN CHARINDEX('NULL',ConcatenatedList) = 0 THEN ConcatenatedList
		ELSE LEFT(ConcatenatedList,CHARINDEX('NULL',ConcatenatedList,0)-1) END,']','],'),'],AS','] AS')
		)) AS Location
,
		REPLACE(REPLACE(CASE WHEN CHARINDEX('NULL',ConcatenatedLIst) = 0 THEN ConcatenatedList
		ELSE LEFT(ConcatenatedList,CHARINDEX('NULL',ConcatenatedList,0)-1) END,']','],'),'],AS','] AS')
		AS CleanStringListOrder
,REVERSE(
		REPLACE(REPLACE(CASE WHEN CHARINDEX('NULL',ConcatenatedLIst) = 0 THEN ConcatenatedList
		ELSE LEFT(ConcatenatedList,CHARINDEX('NULL',ConcatenatedList,0)-1) END,']','],'),'],AS','] AS')
		) 
		AS CleanStringList
,ConcatenatedList
,ConcatenatedColumns
,REVERSE(REPLACE(CASE WHEN CHARINDEX('NULL',ConcatenatedColumns) = 0 THEN ConcatenatedColumns
		ELSE LEFT(ConcatenatedColumns,CHARINDEX('NULL',ConcatenatedColumns,0)-1) END,']','],')) AS CleanConcatenatedColumns
,TableName
,SchemaName
,YMDID
FROM
(

SELECT TableName
	,SchemaName
	,YMDID
	,ConcatenatedList = [1]
	+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9]+[10]
	+[11]+[12]+[13]+[14]+[15]+[16]+[17]+[18]+[19]+[20]
	+[21]+[22]+[23]+[24]+[25]+[26]+[27]+[28]+[29]+[30]
	+[31]+[32]+[33]+[34]+[35]+[36]+[37]+[38]+[39]+[40]
	+[41]+[42]+[43]+[44]+[45]+[46]+[47]+[48]+[49]+[50]
	+[51]+[52]+[53]+[54]+[55]+[56]+[57]+[58]+[59]+[60]
	+[61]+[62]+[63]+[64]+[65]+[66]+[67]+[68]+[69]+[70]
	+[71]+[72]+[73]+[74]+[75]+[76]+[77]+[78]
	+'CAST('+[79]+'AS VARCHAR(7000)) AS '+[79]
	+'CAST('+[80]+'AS VARCHAR(7000)) AS '+[80]
	+'CAST('+[81]+'AS VARCHAR(7000)) AS '+[81]
	+'CAST('+[82]+'AS VARCHAR(7000)) AS '+[82]
	+'CAST('+[83]+'AS VARCHAR(7000)) AS '+[83]
	+'CAST('+[84]+'AS VARCHAR(7000)) AS '+[84]
	+'CAST('+[85]+'AS VARCHAR(7000)) AS '+[85]
	+'CAST('+[86]+'AS VARCHAR(7000)) AS '+[86]
	+'CAST('+[87]+'AS VARCHAR(7000)) AS '+[87]
	+'CAST('+[88]+'AS VARCHAR(7000)) AS '+[88]
	+'CAST('+[89]+'AS VARCHAR(7000)) AS '+ [89]
	+'CAST('+[90]+'AS VARCHAR(7000)) AS '+ [90]
	+'CAST('+[91]+'AS VARCHAR(7000)) AS '+ [91]
	+'CAST('+[92]+'AS VARCHAR(7000)) AS '+ [92]
	+'CAST('+[93]+'AS VARCHAR(7000)) AS '+ [93]
	+'CAST('+[94]+'AS VARCHAR(7000)) AS '+ [94]
	+'CAST('+[95]+'AS VARCHAR(7000)) AS '+ [95]
	+'CAST('+[96]+'AS VARCHAR(7000)) AS '+ [96]
	+'CAST('+[97]+'AS VARCHAR(7000)) AS '+ [97]
	+'CAST('+[98]+'AS VARCHAR(7000)) AS '+ [98]
	+'CAST('+[99]+'AS VARCHAR(7000)) AS '+ [99]
	+'CAST('+[100]+'AS VARCHAR(7000))AS '+ [100]
	+'CAST('+[101]+'AS VARCHAR(7000))AS '+ [101]
	+'CAST('+[102]+'AS VARCHAR(7000))AS '+ [102]
	+'CAST('+[103]+'AS VARCHAR(7000))AS '+ [103]
	+'CAST('+[104]+'AS VARCHAR(7000))AS '+ [104]
	+'CAST('+[105]+'AS VARCHAR(7000))AS '+ [105]
	+'CAST('+[106]+'AS VARCHAR(7000))AS '+ [106]
	+'CAST('+[107]+'AS VARCHAR(7000))AS '+ [107]
	+'CAST('+[108]+'AS VARCHAR(7000))AS '+ [108]
	+'CAST('+[109]+'AS VARCHAR(7000))AS '+ [109]
	+'CAST('+[110]+'AS VARCHAR(7000))AS '+ [110]
	+'CAST('+[111]+'AS VARCHAR(7000))AS '+ [111]
	+'CAST('+[112]+'AS VARCHAR(7000))AS '+ [112]
	+'CAST('+[113]+'AS VARCHAR(7000))AS '+ [113]
	+'CAST('+[114]+'AS VARCHAR(7000))AS '+ [114]
	+'CAST('+[115]+'AS VARCHAR(7000))AS'+[115]
	+'CAST('+[116]+'AS VARCHAR(7000))AS'+[116]
	+'CAST('+[117]+'AS VARCHAR(7000))AS'+[117]
	+'CAST('+[118]+'AS VARCHAR(7000))AS'+[118]
	+'CAST('+[119]+'AS VARCHAR(7000))AS'+[119]
	+'CAST('+[120]+'AS VARCHAR(7000))AS'+[120]
	+'CAST('+[121]+'AS VARCHAR(7000))AS'+[121]
	+'CAST('+[122]+'AS VARCHAR(7000))AS'+[122]
	+'CAST('+[123]+'AS VARCHAR(7000))AS'+[123]
	+'CAST('+[124]+'AS VARCHAR(7000))AS'+[124]
	+'CAST('+[125]+'AS VARCHAR(7000))AS'+[125]
	+'CAST('+[126]+'AS VARCHAR(7000))AS'+[126]
	+'CAST('+[127]+'AS VARCHAR(7000))AS'+[127]
	+'CAST('+[128]+'AS VARCHAR(7000))AS'+[128]
	+'CAST('+[129]+'AS VARCHAR(7000))AS'+[129]
	+'CAST('+[130]+'AS VARCHAR(7000))AS'+[130]
	+'CAST('+[131]+'AS VARCHAR(7000))AS'+[131]
	+'CAST('+[132]+'AS VARCHAR(7000))AS'+[132]
	+'CAST('+[133]+'AS VARCHAR(7000))AS'+[133]
	+'CAST('+[134]+'AS VARCHAR(7000))AS'+[134]
	+'CAST('+[135]+'AS VARCHAR(7000))AS'+[135]
	+'CAST('+[136]+'AS VARCHAR(7000))AS'+[136]
	+'CAST('+[137]+'AS VARCHAR(7000))AS'+[137]
	+'CAST('+[138]+'AS VARCHAR(7000))AS'+[138]
	+'CAST('+[139]+'AS VARCHAR(7000))AS'+[139]
	+'CAST('+[140]+'AS VARCHAR(7000))AS'+[140]
	+'CAST('+[141]+'AS VARCHAR(7000))AS'+[141]
	+'CAST('+[142]+'AS VARCHAR(7000))AS'+[142]
,ConcatenatedColumns= [6]+[7]+[8]+[9]+[10]
	+[11]+[12]+[13]+[14]+[15]+[16]+[17]+[18]+[19]+[20]
	+[21]+[22]+[23]+[24]+[25]+[26]+[27]+[28]+[29]+[30]
	+[31]+[32]+[33]+[34]+[35]+[36]+[37]+[38]+[39]+[40]
	+[41]+[42]+[43]+[44]+[45]+[46]+[47]+[48]+[49]+[50]
	+[51]+[52]+[53]+[54]+[55]+[56]+[57]+[58]+[59]+[60]
	+[61]+[62]+[63]+[64]+[65]+[66]+[67]+[68]+[69]+[70]
	+[71]+[72]+[73]+[74]+[75]+[76]+[77]+[78]+[79]+[80]
	+[81]+[82]+[83]+[84]+[85]+[86]+[87]+[88]+[89]+[90]
	+[91]+[92]+[93]+[94]+[95]+[96]+[97]+[98]+[99]+[100]
	+[101]+[102]+[103]+[104]+[105]+[106]+[107]+[108]+[109]+[110]
	+[111]+[112]+[113]+[114]+[115]+[116]+[117]+[118]+[119]+[120]
	+[121]+[122]+[123]+[124]+[125]+[126]+[127]+[128]+[129]+[130]+[131]
	+[132]+[133]+[134]+[135]+[136]+[137]+[138]+[139]+[140]+[141]+[142]

FROM
(
SELECT b.TableName
,b.SchemaName
,b.YMDID
,ISNULL([1],'NULL') AS 	[1]
,ISNULL([2],'NULL') AS 	[2]
,ISNULL([3],'NULL') AS 	[3]
,ISNULL([4],'NULL') AS 	[4]
,ISNULL([5],'NULL') AS 	[5]
,ISNULL([6],'NULL') AS 	[6]
,ISNULL([7],'NULL') AS 	[7]
,ISNULL([8],'NULL') AS 	[8]
,ISNULL([9],'NULL') AS 	[9]
,ISNULL([10],'NULL') AS [10] 
,ISNULL([11],'NULL') AS [11] 
,ISNULL([12],'NULL') AS [12] 
,ISNULL([13],'NULL') AS [13] 
,ISNULL([14],'NULL') AS [14] 
,ISNULL([15],'NULL') AS [15] 
,ISNULL([16],'NULL') AS [16] 
,ISNULL([17],'NULL') AS [17] 
,ISNULL([18],'NULL') AS [18] 
,ISNULL([19],'NULL') AS [19] 
,ISNULL([20],'NULL') AS [20] 
,ISNULL([21],'NULL') AS [21] 
,ISNULL([22],'NULL') AS [22] 
,ISNULL([23],'NULL') AS [23] 
,ISNULL([24],'NULL') AS [24] 
,ISNULL([25],'NULL') AS [25] 
,ISNULL([26],'NULL') AS [26] 
,ISNULL([27],'NULL') AS [27] 
,ISNULL([28],'NULL') AS [28] 
,ISNULL([29],'NULL') AS [29] 
,ISNULL([30],'NULL') AS [30] 
,ISNULL([31],'NULL') AS [31] 
,ISNULL([32],'NULL') AS [32] 
,ISNULL([33],'NULL') AS [33] 
,ISNULL([34],'NULL') AS [34] 
,ISNULL([35],'NULL') AS [35] 
,ISNULL([36],'NULL') AS [36] 
,ISNULL([37],'NULL') AS [37] 
,ISNULL([38],'NULL') AS [38] 
,ISNULL([39],'NULL') AS [39] 
,ISNULL([40],'NULL') AS [40] 
,ISNULL([41],'NULL') AS [41] 
,ISNULL([42],'NULL') AS [42] 
,ISNULL([43],'NULL') AS [43] 
,ISNULL([44],'NULL') AS [44] 
,ISNULL([45],'NULL') AS [45] 
,ISNULL([46],'NULL') AS [46] 
,ISNULL([47],'NULL') AS [47] 
,ISNULL([48],'NULL') AS [48] 
,ISNULL([49],'NULL') AS [49] 
,ISNULL([50],'NULL') AS [50] 
,ISNULL([51],'NULL') AS [51] 
,ISNULL([52],'NULL') AS [52] 
,ISNULL([53],'NULL') AS [53] 
,ISNULL([54],'NULL') AS [54] 
,ISNULL([55],'NULL') AS [55] 
,ISNULL([56],'NULL') AS [56] 
,ISNULL([57],'NULL') AS [57] 
,ISNULL([58],'NULL') AS [58] 
,ISNULL([59],'NULL') AS [59] 
,ISNULL([60],'NULL') AS [60] 
,ISNULL([61],'NULL') AS [61] 
,ISNULL([62],'NULL') AS [62] 
,ISNULL([63],'NULL') AS [63] 
,ISNULL([64],'NULL') AS [64] 
,ISNULL([65],'NULL') AS [65] 
,ISNULL([66],'NULL') AS [66] 
,ISNULL([67],'NULL') AS [67] 
,ISNULL([68],'NULL') AS [68] 
,ISNULL([69],'NULL') AS [69] 
,ISNULL([70],'NULL') AS [70] 
,ISNULL([71],'NULL') AS [71] 
,ISNULL([72],'NULL') AS [72] 
,ISNULL([73],'NULL') AS [73] 
,ISNULL([74],'NULL') AS [74] 
,ISNULL([75],'NULL') AS [75] 
,ISNULL([76],'NULL') AS [76] 
,ISNULL([77],'NULL') AS [77] 
,ISNULL([78],'NULL') AS [78] 
,ISNULL([79],'NULL') AS [79] 
,ISNULL([80],'NULL') AS [80] 
,ISNULL([81],'NULL') AS [81] 
,ISNULL([82],'NULL') AS [82] 
,ISNULL([83],'NULL') AS [83] 
,ISNULL([84],'NULL') AS [84] 
,ISNULL([85],'NULL') AS [85] 
,ISNULL([86],'NULL') AS [86] 
,ISNULL([87],'NULL') AS [87] 
,ISNULL([88],'NULL') AS [88] 
,ISNULL([89],'NULL') AS [89] 
,ISNULL([90],'NULL') AS [90] 
,ISNULL([91],'NULL') AS [91] 
,ISNULL([92],'NULL') AS [92] 
,ISNULL([93],'NULL') AS [93] 
,ISNULL([94],'NULL') AS [94] 
,ISNULL([95],'NULL') AS [95] 
,ISNULL([96],'NULL') AS [96] 
,ISNULL([97],'NULL') AS [97] 
,ISNULL([98],'NULL') AS [98] 
,ISNULL([99],'NULL') AS [99] 
,ISNULL([100],'NULL') AS [100]
,ISNULL([101],'NULL') AS [101]	
,ISNULL([102],'NULL') AS [102]	
,ISNULL([103],'NULL') AS [103]	
,ISNULL([104],'NULL') AS [104]	
,ISNULL([105],'NULL') AS [105]	
,ISNULL([106],'NULL') AS [106]	
,ISNULL([107],'NULL') AS [107]	
,ISNULL([108],'NULL') AS [108]	
,ISNULL([109],'NULL') AS [109]	
,ISNULL([110],'NULL') AS [110]	
,ISNULL([111],'NULL') AS [111]	
,ISNULL([112],'NULL') AS [112]	
,ISNULL([113],'NULL') AS [113]	
,ISNULL([114],'NULL') AS [114]
,ISNULL([115],'NULL') AS [115]
,ISNULL([116],'NULL') AS [116]
,ISNULL([117],'NULL') AS [117]
,ISNULL([118],'NULL') AS [118]
,ISNULL([119],'NULL') AS [119]
,ISNULL([120],'NULL') AS [120]
,ISNULL([121],'NULL') AS [121]
,ISNULL([122],'NULL') AS [122]
,ISNULL([123],'NULL') AS [123]
,ISNULL([124],'NULL') AS [124]
,ISNULL([125],'NULL') AS [125]
,ISNULL([126],'NULL') AS [126]
,ISNULL([127],'NULL') AS [127]
,ISNULL([128],'NULL') AS [128]
,ISNULL([129],'NULL') AS [129]
,ISNULL([130],'NULL') AS [130]
,ISNULL([131],'NULL') AS [131]
,ISNULL([132],'NULL') AS [132]
,ISNULL([133],'NULL') AS [133]
,ISNULL([134],'NULL') AS [134]
,ISNULL([135],'NULL') AS [135]
,ISNULL([136],'NULL') AS [136]
,ISNULL([137],'NULL') AS [137]
,ISNULL([138],'NULL') AS [138]
,ISNULL([139],'NULL') AS [139]
,ISNULL([140],'NULL') AS [140]
,ISNULL([141],'NULL') AS [141]
,ISNULL([142],'NULL') AS [142]
FROM
(
SELECT  TableName
			,SchemaName
			,YMDID
			,[1],[2],[3],[4],[5],[6],[7],[8],[9],[10] 
			,[11] ,[12],[13] ,[14] ,[15] ,[16] ,[17] ,[18] ,[19] ,[20] 
			,[21] ,[22] ,[23] ,[24] ,[25] ,[26] ,[27] ,[28] ,[29],[30] 
			,[31] ,[32] ,[33] ,[34] ,[35] ,[36] ,[37] ,[38] ,[39] ,[40] 
			,[41] 
			,[42] 
			,[43] 
			,[44] 
			,[45] 
			,[46] 
			,[47] 
			,[48] 
			,[49] 
			,[50] 
			,[51] 
			,[52] 
			,[53] 
			,[54] 
			,[55] 
			,[56] 
			,[57] 
			,[58] 
			,[59] 
			,[60] 
			,[61] 
			,[62] 
			,[63] 
			,[64] 
			,[65] 
			,[66] 
			,[67] 
			,[68] 
			,[69] 
			,[70] 
			,[71] 
			,[72] 
			,[73] 
			,[74] 
			,[75] 
			,[76] 
			,[77] 
			,[78] 
			,[79] 
			,[80] 
			,[81] 
			,[82] 
			,[83] 
			,[84] 
			,[85] 
			,[86] 
			,[87] 
			,[88] 
			,[89] 
			,[90] 
			,[91] 
			,[92] 
			,[93] 
			,[94] 
			,[95] 
			,[96] 
			,[97] 
			,[98] 
			,[99] 
			,[100] 
			,[101]	
			,[102]	
			,[103]	
			,[104]	
			,[105]	
			,[106]	
			,[107]	
			,[108]	
			,[109]	
			,[110]	
			,[111]	
			,[112]	
			,[113]	
			,[114]
			,[115]
			,[116]
			,[117]
			,[118]
			,[119]
			,[120]
			,[121]
			,[122]
			,[123]
			,[124]
			,[125]
			,[126]
			,[127]
			,[128]
			,[129]
			,[130]
			,[131]
			,[132]
			,[133]
			,[134]
			,[135]
			,[136]
			,[137]
			,[138]
			,[139]
			,[140]
			,[141]
			,[142]

			FROM    (
					 SELECT t.name AS TableName
						   ,RIGHT(t.name, 8) AS YMDID
						   ,t.object_id
						   --,c.column_id AS OGcolumnid
						   ,ROW_NUMBER() OVER (PARTITION BY t.name ORDER BY column_id) AS column_id
						   ,'[' + c.name + ']' AS columnname
						   ,s.name AS SchemaName
					 FROM   Sys.tables AS t
					 JOIN   sys.columns AS c
							ON t.object_id = c.object_id
					 JOIN  Sys.schemas AS s
							ON t.schema_id = s.schema_id
					 WHERE  t.object_id IN (529436960
											,545437017
											,561437074
											,577437131
											,593437188
											,609437245
											,625437302
											,641437359
											,657437416
											,673437473
											,689437530
											,705437587
											,721437644
											,737437701
											,753437758
											,769437815,785437872
											,1892917815
											,1908917872
											,1924917929
											,1940917986
											,1956918043
											,1972918100
											,1380915991
											,1396916048
											,1412916105
											,1988918157
											,1108915022
											,512056910
											,2020918271
											,1764917359
											,273436048
											,113435478
											,321436219
											,1169439240
											,1009438670
											,1201439354
											,1377439981
											,2001442204
											,893962261
											,1341963857
											,1677965054
											,64055314
											,1664061014
											,1696061128
											,1712061185
											,1760061356
											,293628139
											,1824061584
											,1840061641
											,2008446279
											,1888061812
											,1984062154
											,2000062211
											,2016062268
											,2032062325
											,2048062382
											,2064062439
											,2080062496
											,2096062553
											,2112062610
											,2128062667
											,2144062724
											,12579133
											,28579190
											,44579247
											,60579304
											,76579361
											,2003538221
											,352056340
											,1040058791
											,1648060957
											,1424060159
											,108579475
											,140579589
											,716581641
											,1324583807
											,1532584548
											,1740585289
											,1948586030
											,9103123
											,217103864
											,473104776
											,745105745
											,985106600
											,1193107341
											,1401108082
											,1705109165
											,2057110419
											,261628025
											,485628823
											,693629564
											,853630134
											,1077630932
											,1301631730
											,1988970212
											,1659205011
											,1931205980
											,87723415
											,247723985
											,279724099
											,1156251224
											,1549300629
											,281820116
											,473820800
											,665821484
											,857822168
											,1049822852
											,1369823992
											,1577824733)
					) AS X PIVOT( MAX(columnname) FOR X.column_id IN ([1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36],[37],[38],[39],[40],[41],[42],[43],[44],[45],[46],[47],[48],[49],[50],[51],[52],[53],[54],[55],[56],[57],[58],[59],[60],[61],[62],[63],[64],[65],[66],[67],[68],[69],[70],[71],[72],[73],[74],[75],[76],[77],[78],[79],[80],[81],[82],[83],[84],[85],[86],[87],[88],[89],[90],[91],[92],[93],[94],[95],[96],[97],[98],[99],[100],[101],[102],[103],[104],[105],[106],[107],[108],[109],[110],[111],[112],[113],[114],[115]
,[116]
,[117]
,[118]
,[119]
,[120]
,[121]
,[122]
,[123]
,[124]
,[125]
,[126]
,[127]
,[128]
,[129]
,[130]
,[131]
,[132]
,[133]
,[134]
,[135]
,[136]
,[137]
,[138]
,[139]
,[140]
,[141]
,[142]
) ) AS P
	) AS b
) AS X
) AS a
) AS c


GO
/****** Object:  View [dbo].[vw_TealiumToAPS_Final]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[vw_TealiumToAPS_Final]
AS
/*************************************************************************************************
*
* Name:	[dbo].[vw_TealiumToAPS_Final]
*
* Note: This view allows me to UNPIVOT TealiumParsedPivot from 5/15 to 9/1
*
* Test: SELECT * FROM [dbo].[vw_TealiumToAPS_Final]
*
* Hist:	01	04/21/2016		Sarah Mims			Initial Version. Ticket # 22676.
**************************************************************************************************/

SELECT LEFT(CleanStringListOrder,LEN(CleanStringList)-CHARINDEX(',',CleanStringList)) AS CleanSelectStatement
,CAST(REVERSE(RIGHT(CleanConcatenatedColumns,LEN(CleanConcatenatedColumns)-1))AS VARCHAR(8000)) AS CleanColumnList
,TableName
,SchemaName
,YMDID
,ConcatenatedList
,ConcatenatedColumns
,CleanConcatenatedColumns
,CleanStringList
,Location
,CHARINDEX('NULL',ConcatenatedList) AS FirstNull
,LEFT(ConcatenatedList,CHARINDEX('NULL',ConcatenatedList)) AS LeftOfFirstNullLocation
,CleanStringListOrder
FROM
(
SELECT CHARINDEX(']qes[',REVERSE(
		REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(CASE WHEN CHARINDEX('NULL',ConcatenatedList) = 0 THEN ConcatenatedList
		ELSE LEFT(ConcatenatedList,CHARINDEX('NULL',ConcatenatedList,0)-1) END,']','],'),'[LastEventFlag],','[LastEventFlag]'),'[FirstEventFlag],','[FirstEventFlag]'),'[DerivedEFID],','[DerivedEFID]'),'[ef_id],','[ef_id]')
		)) AS Location
,
		REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(CASE WHEN CHARINDEX('NULL',ConcatenatedLIst) = 0 THEN ConcatenatedList
		ELSE LEFT(ConcatenatedList,CHARINDEX('NULL',ConcatenatedList,0)-1) END,']','],'),'[LastEventFlag],','[LastEventFlag]'),'[FirstEventFlag],','[FirstEventFlag]'),'[DerivedEFID],','[DerivedEFID]'),'[ef_id],','[ef_id]')
		AS CleanStringListOrder
,REVERSE(
		REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(CASE WHEN CHARINDEX('NULL',ConcatenatedList) = 0 THEN ConcatenatedList
		ELSE LEFT(ConcatenatedList,CHARINDEX('NULL',ConcatenatedList,0)-1) END,']','],'),'[LastEventFlag],','[LastEventFlag]'),'[FirstEventFlag],','[FirstEventFlag]'),'[DerivedEFID],','[DerivedEFID]'),'[ef_id],','[ef_id]')
		) 
		AS CleanStringList
,ConcatenatedList
,ConcatenatedColumns
,REVERSE(
	REPLACE(
		REPLACE(
			REPLACE(
				REPLACE(
					REPLACE(
					CASE WHEN CHARINDEX('NULL',ConcatenatedColumns) = 0 
					THEN ConcatenatedColumns 
					ELSE LEFT(ConcatenatedColumns,CHARINDEX('NULL',ConcatenatedColumns)-1)
					END 
							,']','],')
								,'CAST([FirstEventFlag], AS VARCHAR (7000)) AS [FirstEventFlag],','[FirstEventFlag]')
									,'CAST([LastEventFlag], AS VARCHAR (7000)) AS [LastEventFlag],','[LastEventFlag]')
										,'CAST([DerivedEFID], AS VARCHAR (7000)) AS [DerivedEFID],','[DerivedEFID]')
											,'CAST([ef_id], AS VARCHAR (7000)) AS [ef_id],','[ef_id]')
			) AS CleanConcatenatedColumns
,TableName
,SchemaName
,YMDID
FROM
(

SELECT TableName
	,SchemaName
	,YMDID
	,ConcatenatedList = [1]
	+[2]+[3]+[4]+[5]+[6]+[7]+[8]+[9]+[10]
	+[11]+[12]+[13]+[14]+[15]+[16]+[17]+[18]+[19]+[20]
	+[21]+[22]+[23]+[24]+[25]+[26]+[27]+[28]+[29]+[30]
	+[31]+[32]+[33]+[34]+[35]+[36]+[37]+[38]+[39]+[40]
	+[41]+[42]+[43]+[44]+[45]+[46]+[47]+[48]+[49]+[50]
	+[51]+[52]+[53]+[54]+[55]+[56]+[57]+[58]+[59]+[60]
	+[61]+[62]+[63]+[64]+[65]+[66]+[67]+[68]+[69]+[70]
	+[71]+[72]+[73]+[74]+[75]+[76]+[77]+[78]
	+[79]
	+[80]
	+[81]
	+[82]
	+[83]
	+[84]
	+[85]
	+[86]
	+[87]
	+[88]
	+[89]
	+[90]
	+[91]
	+[92]
	+[93]
	+[94]
	+[95]
	+[96]
	+[97]
	+[98]
	+[99]
	+[100]
	+[101]
	+[102]
	+[103]
	+[104]
	+[105]
	+[106]
	+[107]
	+[108]
	+[109]
	+[110]
	+[111]
	+[112]
	+[113]
	+[114]
	+[115]
	+[116]
	+[117]
	+[118]
	+[119]
	+[120]
	+[121]
	+[122]
	+[123]
	+[124]
	+[125]
	+[126]
	+[127]
	+[128]
	+[129]
	+[130]
	+[131]
	+[132]
	+[133]
	+[134]
	+[135]
	+[136]
	+[137]
	+[138]
	+[139]
	+[140]
	+[141]
	+[142]
,ConcatenatedColumns= [6]+[7]+[8]+[9]+[10]
	+[11]+[12]+[13]+[14]+[15]+[16]+[17]+[18]+[19]+[20]
	+[21]+[22]+[23]+[24]+[25]+[26]+[27]+[28]+[29]+[30]
	+[31]+[32]+[33]+[34]+[35]+[36]+[37]+[38]+[39]+[40]
	+[41]+[42]+[43]+[44]+[45]+[46]+[47]+[48]+[49]+[50]
	+[51]+[52]+[53]+[54]+[55]+[56]+[57]+[58]+[59]+[60]
	+[61]+[62]+[63]+[64]+[65]+[66]+[67]+[68]+[69]+[70]
	+[71]+[72]+[73]+[74]+[75]+[76]+[77]+[78]+[79]+[80]
	+[81]+[82]+[83]+[84]+[85]+[86]+[87]+[88]+[89]+[90]
	+[91]+[92]+[93]+[94]+[95]+[96]+[97]+[98]+[99]+[100]
	+[101]+[102]+[103]+[104]+[105]+[106]+[107]+[108]+[109]+[110]
	+[111]+[112]+[113]+[114]+[115]+[116]+[117]+[118]+[119]+[120]
	+[121]+[122]+[123]+[124]+[125]+[126]+[127]+[128]+[129]+[130]+[131]
	+[132]+[133]+[134]+[135]+[136]+[137]+[138]+[139]+[140]+[141]+[142]

FROM
(
SELECT b.TableName
,b.SchemaName
,b.YMDID
,ISNULL([1],'NULL') AS 	[1]
,ISNULL([2],'NULL') AS 	[2]
,ISNULL([3],'NULL') AS 	[3]
,ISNULL([4],'NULL') AS 	[4]
,ISNULL([5],'NULL') AS 	[5]
,ISNULL([6],'NULL') AS 	[6]
,ISNULL([7],'NULL') AS 	[7]
,ISNULL([8],'NULL') AS 	[8]
,ISNULL([9],'NULL') AS 	[9]
,ISNULL([10],'NULL') AS [10] 
,ISNULL([11],'NULL') AS [11] 
,ISNULL([12],'NULL') AS [12] 
,ISNULL([13],'NULL') AS [13] 
,ISNULL([14],'NULL') AS [14] 
,ISNULL([15],'NULL') AS [15] 
,ISNULL([16],'NULL') AS [16] 
,ISNULL([17],'NULL') AS [17] 
,ISNULL([18],'NULL') AS [18] 
,ISNULL([19],'NULL') AS [19] 
,ISNULL([20],'NULL') AS [20] 
,ISNULL([21],'NULL') AS [21] 
,ISNULL([22],'NULL') AS [22] 
,ISNULL([23],'NULL') AS [23] 
,ISNULL([24],'NULL') AS [24] 
,ISNULL([25],'NULL') AS [25] 
,ISNULL([26],'NULL') AS [26] 
,ISNULL([27],'NULL') AS [27] 
,ISNULL([28],'NULL') AS [28] 
,ISNULL([29],'NULL') AS [29] 
,ISNULL([30],'NULL') AS [30] 
,ISNULL([31],'NULL') AS [31] 
,ISNULL([32],'NULL') AS [32] 
,ISNULL([33],'NULL') AS [33] 
,ISNULL([34],'NULL') AS [34] 
,ISNULL([35],'NULL') AS [35] 
,ISNULL([36],'NULL') AS [36] 
,ISNULL([37],'NULL') AS [37] 
,ISNULL([38],'NULL') AS [38] 
,ISNULL([39],'NULL') AS [39] 
,ISNULL([40],'NULL') AS [40] 
,ISNULL([41],'NULL') AS [41] 
,ISNULL([42],'NULL') AS [42] 
,ISNULL([43],'NULL') AS [43] 
,ISNULL([44],'NULL') AS [44] 
,ISNULL([45],'NULL') AS [45] 
,ISNULL([46],'NULL') AS [46] 
,ISNULL([47],'NULL') AS [47] 
,ISNULL([48],'NULL') AS [48] 
,ISNULL([49],'NULL') AS [49] 
,ISNULL([50],'NULL') AS [50] 
,ISNULL([51],'NULL') AS [51] 
,ISNULL([52],'NULL') AS [52] 
,ISNULL([53],'NULL') AS [53] 
,ISNULL([54],'NULL') AS [54] 
,ISNULL([55],'NULL') AS [55] 
,ISNULL([56],'NULL') AS [56] 
,ISNULL([57],'NULL') AS [57] 
,ISNULL([58],'NULL') AS [58] 
,ISNULL([59],'NULL') AS [59] 
,ISNULL([60],'NULL') AS [60] 
,ISNULL([61],'NULL') AS [61] 
,ISNULL([62],'NULL') AS [62] 
,ISNULL([63],'NULL') AS [63] 
,ISNULL([64],'NULL') AS [64] 
,ISNULL([65],'NULL') AS [65] 
,ISNULL([66],'NULL') AS [66] 
,ISNULL([67],'NULL') AS [67] 
,ISNULL([68],'NULL') AS [68] 
,ISNULL([69],'NULL') AS [69] 
,ISNULL([70],'NULL') AS [70] 
,ISNULL([71],'NULL') AS [71] 
,ISNULL([72],'NULL') AS [72] 
,ISNULL([73],'NULL') AS [73] 
,ISNULL([74],'NULL') AS [74] 
,ISNULL([75],'NULL') AS [75] 
,ISNULL([76],'NULL') AS [76] 
,ISNULL([77],'NULL') AS [77] 
,ISNULL([78],'NULL') AS [78] 
,ISNULL([79],'NULL') AS [79] 
,ISNULL([80],'NULL') AS [80] 
,ISNULL([81],'NULL') AS [81] 
,ISNULL([82],'NULL') AS [82] 
,ISNULL([83],'NULL') AS [83] 
,ISNULL([84],'NULL') AS [84] 
,ISNULL([85],'NULL') AS [85] 
,ISNULL([86],'NULL') AS [86] 
,ISNULL([87],'NULL') AS [87] 
,ISNULL([88],'NULL') AS [88] 
,ISNULL([89],'NULL') AS [89] 
,ISNULL([90],'NULL') AS [90] 
,ISNULL([91],'NULL') AS [91] 
,ISNULL([92],'NULL') AS [92] 
,ISNULL([93],'NULL') AS [93] 
,ISNULL([94],'NULL') AS [94] 
,ISNULL([95],'NULL') AS [95] 
,ISNULL([96],'NULL') AS [96] 
,ISNULL([97],'NULL') AS [97] 
,ISNULL([98],'NULL') AS [98] 
,ISNULL([99],'NULL') AS [99] 
,ISNULL([100],'NULL') AS [100]
,ISNULL([101],'NULL') AS [101]	
,ISNULL([102],'NULL') AS [102]	
,ISNULL([103],'NULL') AS [103]	
,ISNULL([104],'NULL') AS [104]	
,ISNULL([105],'NULL') AS [105]	
,ISNULL([106],'NULL') AS [106]	
,ISNULL([107],'NULL') AS [107]	
,ISNULL([108],'NULL') AS [108]	
,ISNULL([109],'NULL') AS [109]	
,ISNULL([110],'NULL') AS [110]	
,ISNULL([111],'NULL') AS [111]	
,ISNULL([112],'NULL') AS [112]	
,ISNULL([113],'NULL') AS [113]	
,ISNULL([114],'NULL') AS [114]
,ISNULL([115],'NULL') AS [115]
,ISNULL([116],'NULL') AS [116]
,ISNULL([117],'NULL') AS [117]
,ISNULL([118],'NULL') AS [118]
,ISNULL([119],'NULL') AS [119]
,ISNULL([120],'NULL') AS [120]
,ISNULL([121],'NULL') AS [121]
,ISNULL([122],'NULL') AS [122]
,ISNULL([123],'NULL') AS [123]
,ISNULL([124],'NULL') AS [124]
,ISNULL([125],'NULL') AS [125]
,ISNULL([126],'NULL') AS [126]
,ISNULL([127],'NULL') AS [127]
,ISNULL([128],'NULL') AS [128]
,ISNULL([129],'NULL') AS [129]
,ISNULL([130],'NULL') AS [130]
,ISNULL([131],'NULL') AS [131]
,ISNULL([132],'NULL') AS [132]
,ISNULL([133],'NULL') AS [133]
,ISNULL([134],'NULL') AS [134]
,ISNULL([135],'NULL') AS [135]
,ISNULL([136],'NULL') AS [136]
,ISNULL([137],'NULL') AS [137]
,ISNULL([138],'NULL') AS [138]
,ISNULL([139],'NULL') AS [139]
,ISNULL([140],'NULL') AS [140]
,ISNULL([141],'NULL') AS [141]
,ISNULL([142],'NULL') AS [142]
FROM
(
SELECT  TableName
			,SchemaName
			,YMDID
			,[1],[2],[3],[4],[5],[6],[7],[8],[9],[10] 
			,[11] ,[12],[13] ,[14] ,[15] ,[16] ,[17] ,[18] ,[19] ,[20] 
			,[21] ,[22] ,[23] ,[24] ,[25] ,[26] ,[27] ,[28] ,[29],[30] 
			,[31] ,[32] ,[33] ,[34] ,[35] ,[36] ,[37] ,[38] ,[39] ,[40] 
			,[41] 
			,[42] 
			,[43] 
			,[44] 
			,[45] 
			,[46] 
			,[47] 
			,[48] 
			,[49] 
			,[50] 
			,[51] 
			,[52] 
			,[53] 
			,[54] 
			,[55] 
			,[56] 
			,[57] 
			,[58] 
			,[59] 
			,[60] 
			,[61] 
			,[62] 
			,[63] 
			,[64] 
			,[65] 
			,[66] 
			,[67] 
			,[68] 
			,[69] 
			,[70] 
			,[71] 
			,[72] 
			,[73] 
			,[74] 
			,[75] 
			,[76] 
			,[77] 
			,[78] 
			,[79] 
			,[80] 
			,[81] 
			,[82] 
			,[83] 
			,[84] 
			,[85] 
			,[86] 
			,[87] 
			,[88] 
			,[89] 
			,[90] 
			,[91] 
			,[92] 
			,[93] 
			,[94] 
			,[95] 
			,[96] 
			,[97] 
			,[98] 
			,[99] 
			,[100] 
			,[101]	
			,[102]	
			,[103]	
			,[104]	
			,[105]	
			,[106]	
			,[107]	
			,[108]	
			,[109]	
			,[110]	
			,[111]	
			,[112]	
			,[113]	
			,[114]
			,[115]
			,[116]
			,[117]
			,[118]
			,[119]
			,[120]
			,[121]
			,[122]
			,[123]
			,[124]
			,[125]
			,[126]
			,[127]
			,[128]
			,[129]
			,[130]
			,[131]
			,[132]
			,[133]
			,[134]
			,[135]
			,[136]
			,[137]
			,[138]
			,[139]
			,[140]
			,[141]
			,[142]

			FROM    (
					 SELECT t.name AS TableName
						   ,RIGHT(t.name, 8) AS YMDID
						   ,t.object_id
						   --,c.column_id AS OGcolumnid
						   ,ROW_NUMBER() OVER (PARTITION BY t.name ORDER BY column_id) AS column_id
						   --,'[' + c.name + ']' AS OGcolumnname
						   ,CASE WHEN c.system_type_id = 48 THEN 'CAST([' + c.name + '] AS VARCHAR (7000)) AS [' + c.NAME + '],' 
								WHEN c.name  = 'DerivedEFID' THEN 'CAST([' + c.name + '] AS VARCHAR (7000)) AS [' + c.NAME + '],' 
								WHEN c.NAME = 'ef_id' THEN 'CAST([' + c.name + '] AS VARCHAR (7000)) AS [' + c.NAME + '],' 
						   ELSE '[' + c.name + ']' END AS columnname
						   ,s.name AS SchemaName
					 FROM   Sys.tables AS t
					 JOIN   sys.columns AS c
							ON t.object_id = c.object_id
					 JOIN  Sys.schemas AS s
							ON t.schema_id = s.schema_id
					 WHERE  t.object_id IN (529436960
											,545437017
											,561437074
											,577437131
											,593437188
											,609437245
											,625437302
											,641437359
											,657437416
											,673437473
											,689437530
											,705437587
											,721437644
											,737437701
											,753437758
											,769437815,785437872
											,1892917815
											,1908917872
											,1924917929
											,1940917986
											,1956918043
											,1972918100
											,1380915991
											,1396916048
											,1412916105
											,1988918157
											,1108915022
											,512056910
											,2020918271
											,1764917359
											,273436048
											,113435478
											,321436219
											,1169439240
											,1009438670
											,1201439354
											,1377439981
											,2001442204
											,893962261
											,1341963857
											,1677965054
											,64055314
											,1664061014
											,1696061128
											,1712061185
											,1760061356
											,293628139
											,1824061584
											,1840061641
											,2008446279
											,1888061812
											,1984062154
											,2000062211
											,2016062268
											,2032062325
											,2048062382
											,2064062439
											,2080062496
											,2096062553
											,2112062610
											,2128062667
											,2144062724
											,12579133
											,28579190
											,44579247
											,60579304
											,76579361
											,2003538221
											,352056340
											,1040058791
											,1648060957
											,1424060159
											,108579475
											,140579589
											,716581641
											,1324583807
											,1532584548
											,1740585289
											,1948586030
											,9103123
											,217103864
											,473104776
											,745105745
											,985106600
											,1193107341
											,1401108082
											,1705109165
											,2057110419
											,261628025
											,485628823
											,693629564
											,853630134
											,1077630932
											,1301631730
											,1988970212
											,1659205011
											,1931205980
											,87723415
											,247723985
											,279724099
											,1156251224
											,1549300629
											,281820116
											,473820800
											,665821484
											,857822168
											,1049822852
											,1369823992
											,1577824733)
					) AS X PIVOT( MAX(columnname) FOR X.column_id IN ([1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36],[37],[38],[39],[40],[41],[42],[43],[44],[45],[46],[47],[48],[49],[50],[51],[52],[53],[54],[55],[56],[57],[58],[59],[60],[61],[62],[63],[64],[65],[66],[67],[68],[69],[70],[71],[72],[73],[74],[75],[76],[77],[78],[79],[80],[81],[82],[83],[84],[85],[86],[87],[88],[89],[90],[91],[92],[93],[94],[95],[96],[97],[98],[99],[100],[101],[102],[103],[104],[105],[106],[107],[108],[109],[110],[111],[112],[113],[114],[115]
,[116]
,[117]
,[118]
,[119]
,[120]
,[121]
,[122]
,[123]
,[124]
,[125]
,[126]
,[127]
,[128]
,[129]
,[130]
,[131]
,[132]
,[133]
,[134]
,[135]
,[136]
,[137]
,[138]
,[139]
,[140]
,[141]
,[142]
) ) AS P
	) AS b
) AS X
) AS a
) AS c



GO
/****** Object:  Table [DataProduct].[AmenityRefinementsCityLevel]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [DataProduct].[AmenityRefinementsCityLevel](
	[YearMonth] [int] NULL,
	[City] [varchar](100) NULL,
	[StateAbbr] [varchar](2) NULL,
	[Amenity] [varchar](100) NULL,
	[SearchCount] [int] NULL,
	[Rank] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [DataProduct].[AmenityRefinementsMSALevel]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [DataProduct].[AmenityRefinementsMSALevel](
	[YearMonth] [int] NULL,
	[MSACode] [varchar](10) NULL,
	[MSAName] [varchar](50) NULL,
	[Amenity] [varchar](100) NULL,
	[SearchCount] [int] NULL,
	[Rank] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [DataProduct].[DM_DataProduct_AG_RelatedListing_FinalResultFromDMProcess]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [DataProduct].[DM_DataProduct_AG_RelatedListing_FinalResultFromDMProcess](
	[ListingID1] [int] NULL,
	[ListingID2] [int] NULL,
	[SortOrder] [int] NOT NULL,
	[MSOLAP_NODE_SCORE] [float] NOT NULL,
	[DateCreated] [datetime] NULL,
	[DateUpdated] [datetime] NULL,
	[Rnk] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [DataProduct].[DM_DataProduct_Rent_RelatedListing_FinalResultFromDMProcess]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [DataProduct].[DM_DataProduct_Rent_RelatedListing_FinalResultFromDMProcess](
	[ListingID1] [int] NULL,
	[ListingID2] [int] NULL,
	[SortOrder] [int] NOT NULL,
	[MSOLAP_NODE_SCORE] [float] NOT NULL,
	[DateCreated] [datetime] NULL,
	[DateUpdated] [datetime] NULL,
	[Rnk] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [DataProduct].[FloorplanAvailabilityVsClicked]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [DataProduct].[FloorplanAvailabilityVsClicked](
	[FloorplanAvsCID] [int] IDENTITY(1,1) NOT NULL,
	[YearMonth] [int] NULL,
	[MSACode] [varchar](50) NULL,
	[Available_Studio_Floorplan_Pct] [numeric](21, 13) NOT NULL,
	[Available_1_Bedroom_Floorplan_Pct] [numeric](21, 13) NOT NULL,
	[Available_2_Bedrooms_Floorplan_Pct] [numeric](21, 13) NOT NULL,
	[Available_3_Bedrooms_Floorplan_Pct] [numeric](21, 13) NOT NULL,
	[Available_4_Or_More_Bedrooms_Floorplan_Pct] [numeric](21, 13) NOT NULL,
	[Clicked_Studio_Pct] [numeric](21, 15) NOT NULL,
	[Clicked_1_Bedroom_Pct] [numeric](21, 15) NOT NULL,
	[Clicked_2_Bedrooms_Pct] [numeric](21, 15) NOT NULL,
	[Clicked_3_Bedrooms_Pct] [numeric](21, 15) NOT NULL,
	[Clicked_4_Or_More_Bedrooms_Pct] [numeric](21, 15) NOT NULL,
 CONSTRAINT [PK_FloorplanAvailabilityVsClicked_FloorplanAvsCID] PRIMARY KEY CLUSTERED 
(
	[FloorplanAvsCID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [DataProduct].[MarketSearches]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [DataProduct].[MarketSearches](
	[MarketSearchID] [int] IDENTITY(1,1) NOT NULL,
	[YearMonth] [int] NULL,
	[MSACode] [varchar](50) NULL,
	[No_Search_Profile] [int] NOT NULL,
	[Inside_Market_Search] [int] NOT NULL,
	[Outside_of_100_Miles] [int] NOT NULL,
 CONSTRAINT [PK_MarketSearches_MarketSearchID] PRIMARY KEY CLUSTERED 
(
	[MarketSearchID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [DataProduct].[MSARentGrowthTrend]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [DataProduct].[MSARentGrowthTrend](
	[YearMonth] [varchar](6) NULL,
	[GrowthYearMonth] [varchar](6) NULL,
	[MonthValue] [varchar](16) NULL,
	[MSACode] [varchar](50) NULL,
	[MonthlyGrowth] [numeric](24, 13) NULL,
	[MinLowPrice] [numeric](10, 2) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [DataProduct].[PropertyRentGrowthTrend]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [DataProduct].[PropertyRentGrowthTrend](
	[YearMonth] [varchar](6) NULL,
	[GrowthYearMonth] [varchar](6) NULL,
	[MonthValue] [varchar](16) NULL,
	[ListingID] [int] NULL,
	[AGPropertyID] [int] NULL,
	[MonthlyGrowth] [numeric](24, 13) NULL,
	[MinLowPrice] [numeric](10, 2) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [DataProduct].[UnitBedLevelMSAInfo]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [DataProduct].[UnitBedLevelMSAInfo](
	[YearMonth] [varchar](6) NULL,
	[MSACode] [varchar](50) NULL,
	[Level] [numeric](10, 2) NULL,
	[AnnualGrowth] [numeric](24, 13) NULL,
	[UnitCount] [int] NULL,
	[SQft] [int] NULL,
	[RentPerSqft] [numeric](21, 13) NULL,
	[LastMonthGrowth] [numeric](24, 13) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [DataProduct].[UnitBedLevelPropertyInfo]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [DataProduct].[UnitBedLevelPropertyInfo](
	[YearMonth] [varchar](6) NULL,
	[AGPropertyID] [int] NULL,
	[StudioBedAvgRent] [numeric](10, 2) NULL,
	[StudioBedAnnualGrowth] [numeric](24, 13) NULL,
	[StudioBedUnitCount] [int] NULL,
	[StudioBedSqft] [int] NULL,
	[StudioBedRentSqft] [numeric](21, 13) NULL,
	[StudioBedTotalUnits] [float] NULL,
	[StudioBedLastMonthGrowth] [numeric](24, 13) NULL,
	[OneBedAvgRent] [numeric](10, 2) NULL,
	[OneBedAnnualGrowth] [numeric](24, 13) NULL,
	[OneBedUnitCount] [int] NULL,
	[OneBedSqft] [int] NULL,
	[OneBedRentSqft] [numeric](21, 13) NULL,
	[OneBedTotalUnits] [float] NULL,
	[OneBedLastMonthGrowth] [numeric](24, 13) NULL,
	[TwoBedAvgRent] [numeric](10, 2) NULL,
	[TwoBedAnnualGrowth] [numeric](24, 13) NULL,
	[TwoBedUnitCount] [int] NULL,
	[TwoBedSqft] [int] NULL,
	[TwoBedRentSqft] [numeric](21, 13) NULL,
	[TwoBedTotalUnits] [float] NULL,
	[TwoBedLastMonthGrowth] [numeric](24, 13) NULL,
	[ThreeBedAvgRent] [numeric](10, 2) NULL,
	[ThreeBedAnnualGrowth] [numeric](24, 13) NULL,
	[ThreeBedUnitCount] [int] NULL,
	[ThreeBedSqft] [int] NULL,
	[ThreeBedRentSqft] [numeric](21, 13) NULL,
	[ThreeBedTotalUnits] [float] NULL,
	[ThreeBedLastMonthGrowth] [numeric](24, 13) NULL,
	[FourPlusBedAvgRent] [numeric](10, 2) NULL,
	[FourPlusBedAnnualGrowth] [numeric](24, 13) NULL,
	[FourPlusBedUnitCount] [int] NULL,
	[FourPlusBedSqft] [int] NULL,
	[FourPlusBedRentSqft] [numeric](21, 13) NULL,
	[FourPlusBedTotalUnits] [float] NULL,
	[FourPlusBedLastMonthGrowth] [numeric](24, 13) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[AdvancedSubscriptionDataColumns]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AdvancedSubscriptionDataColumns](
	[ColumnID] [int] NOT NULL,
	[DatabaseName] [varchar](300) NULL,
	[TableName] [varchar](300) NULL,
	[ColumnName] [varchar](1000) NULL,
	[FriendlyColumnName] [varchar](300) NULL,
	[DataDictionary] [varchar](1000) NULL,
	[IsPeriodAccum] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[ColumnID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [UC_AdvancedSubscriptionDataColumns_ColumnID] UNIQUE NONCLUSTERED 
(
	[ColumnID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Dashboard_Daily_Email_Subscriptions_List]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Dashboard_Daily_Email_Subscriptions_List](
	[RecID] [int] IDENTITY(1,1) NOT NULL,
	[Email] [varchar](4000) NULL,
	[SubjectLine] [varchar](2000) NULL,
	[Headline] [varchar](3000) NULL,
	[SubHeading] [varchar](3000) NULL,
	[PropertyName] [varchar](200) NULL,
	[URL] [varchar](3000) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[DashboardBasicSubOneTimeEmail]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DashboardBasicSubOneTimeEmail](
	[RecID] [int] IDENTITY(1,1) NOT NULL,
	[PropertyID] [int] NOT NULL,
	[UserGUID] [uniqueidentifier] NOT NULL,
	[CreatorGUID] [uniqueidentifier] NOT NULL,
	[CreatorEmail] [varchar](300) NOT NULL,
	[Description] [varchar](2000) NULL,
	[Report] [int] NOT NULL,
	[TO] [varchar](2000) NULL,
	[LCHost] [varchar](50) NOT NULL,
	[LCUser] [varchar](50) NOT NULL,
	[LCDate] [datetime] NOT NULL,
 CONSTRAINT [PK_DashboardBasicSubOneTimeEmail_On_RecID] PRIMARY KEY CLUSTERED 
(
	[RecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[DashboardBasicSubOneTimeEmailAudit]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DashboardBasicSubOneTimeEmailAudit](
	[RecAuditID] [int] IDENTITY(1,1) NOT NULL,
	[RecID] [int] NOT NULL,
	[PropertyID] [int] NOT NULL,
	[UserGUID] [uniqueidentifier] NOT NULL,
	[CreatorGUID] [uniqueidentifier] NOT NULL,
	[CreatorEmail] [varchar](300) NOT NULL,
	[Description] [varchar](2000) NULL,
	[Report] [int] NOT NULL,
	[TO] [varchar](2000) NULL,
	[LCHost] [varchar](50) NOT NULL,
	[LCUser] [varchar](50) NOT NULL,
	[LCDate] [datetime] NOT NULL,
	[FinalDelete] [bit] NULL,
 CONSTRAINT [PK_DashboardBasicSubOneTimeEmailAudit_On_RecAuditID] PRIMARY KEY CLUSTERED 
(
	[RecAuditID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[DashboardDailyAdvancedReportSubscriptionDetails]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DashboardDailyAdvancedReportSubscriptionDetails](
	[YMDID] [int] NULL,
	[SubscriptionID] [int] NULL,
	[PropertyID] [int] NULL,
	[Server] [varchar](200) NULL,
	[Port] [varchar](20) NULL,
	[Login] [varchar](100) NULL,
	[Password] [varchar](100) NULL,
	[AdvancedReportType] [int] NULL,
	[AdvancedMethod] [int] NULL,
	[EmailAddress] [varchar](2000) NULL,
	[PropertyName] [varchar](100) NULL,
	[Frequency] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[DashboardDailySubscriptionDetails]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DashboardDailySubscriptionDetails](
	[YMDID] [int] NULL,
	[SubscriptionID] [int] NULL,
	[PropertyID] [int] NULL,
	[Server] [varchar](200) NULL,
	[Port] [varchar](20) NULL,
	[Login] [varchar](100) NULL,
	[Password] [varchar](100) NULL,
	[FileName] [varchar](4000) NULL,
	[AdvancedMethod] [int] NULL,
	[EmailAddress] [varchar](2000) NULL,
	[PropertyName] [varchar](100) NULL,
	[Frequency] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[DashboardMessages]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DashboardMessages](
	[MessageID] [int] IDENTITY(1,1) NOT NULL,
	[StartDate] [datetime] NOT NULL,
	[EndDate] [datetime] NOT NULL,
	[Title] [varchar](50) NULL,
	[Message] [varchar](4000) NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[DashboardSubscriptions]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DashboardSubscriptions](
	[SubscriptionID] [int] IDENTITY(1,1) NOT NULL,
	[PropertyID] [int] NOT NULL,
	[UserGUID] [uniqueidentifier] NULL,
	[Description] [varchar](1000) NULL,
	[Report] [int] NOT NULL,
	[AdvancedReportType] [int] NULL,
	[AdvancedMethod] [int] NULL,
	[TO] [varchar](2000) NULL,
	[Frequency] [int] NOT NULL,
	[Creator] [uniqueidentifier] NOT NULL,
	[Server] [varchar](200) NULL,
	[Port] [varchar](20) NULL,
	[Login] [varchar](100) NULL,
	[Password] [varchar](100) NULL,
	[DisplayColumns] [varchar](4000) NULL,
	[LCHost] [varchar](50) NOT NULL,
	[LCUser] [varchar](50) NOT NULL,
	[LCDate] [datetime] NOT NULL,
 CONSTRAINT [PK_DashboardSubscriptions_On_SubscriptionID] PRIMARY KEY CLUSTERED 
(
	[SubscriptionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[dashboardSubscriptions2]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[dashboardSubscriptions2](
	[SubscriptionID] [int] IDENTITY(1,1) NOT NULL,
	[PropertyID] [int] NOT NULL,
	[UserGUID] [uniqueidentifier] NULL,
	[Description] [varchar](1000) NULL,
	[Report] [int] NOT NULL,
	[AdvancedReportType] [int] NULL,
	[AdvancedMethod] [int] NULL,
	[TO] [varchar](2000) NULL,
	[Frequency] [int] NOT NULL,
	[Creator] [uniqueidentifier] NOT NULL,
	[Server] [varchar](200) NULL,
	[Port] [varchar](20) NULL,
	[Login] [varchar](100) NULL,
	[Password] [varchar](100) NULL,
	[DisplayColumns] [varchar](4000) NULL,
	[LCHost] [varchar](50) NOT NULL,
	[LCUser] [varchar](50) NOT NULL,
	[LCDate] [datetime] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[DashboardSubscriptionsAudit]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DashboardSubscriptionsAudit](
	[SubscriptionAuditID] [int] IDENTITY(1,1) NOT NULL,
	[SubscriptionID] [int] NULL,
	[PropertyID] [int] NULL,
	[UserGUID] [uniqueidentifier] NULL,
	[Description] [varchar](1000) NULL,
	[Report] [int] NULL,
	[AdvancedReportType] [int] NULL,
	[AdvancedMethod] [int] NULL,
	[TO] [varchar](2000) NULL,
	[Frequency] [int] NULL,
	[Creator] [uniqueidentifier] NULL,
	[Server] [varchar](200) NULL,
	[Port] [varchar](20) NULL,
	[Login] [varchar](100) NULL,
	[Password] [varchar](100) NULL,
	[DisplayColumns] [varchar](4000) NULL,
	[LCHost] [varchar](50) NULL,
	[LCUser] [varchar](50) NULL,
	[LCDate] [datetime] NULL,
	[FinalDelete] [bit] NULL,
 CONSTRAINT [PK_DashboardSubscriptionsAudit_On_SubscriptionAuditID] PRIMARY KEY CLUSTERED 
(
	[SubscriptionAuditID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[dimphonelookup_last2]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[dimphonelookup_last2](
	[PhoneNumber] [varchar](20) NULL,
	[PhoneType] [varchar](10) NULL,
	[DID] [varchar](10) NULL,
	[RecordType] [varchar](10) NULL,
	[FirstDate] [datetime2](3) NULL,
	[LastDate] [datetime2](3) NULL,
	[TELCOName] [varchar](50) NULL,
	[BusinessName] [varchar](100) NULL,
	[FirstName] [varchar](100) NULL,
	[MiddleInitial] [varchar](1) NULL,
	[LastName] [varchar](100) NULL,
	[PrimaryStreetNumber] [varchar](20) NULL,
	[PrimaryPredirAbbrev] [varchar](10) NULL,
	[PrimaryStreetName] [varchar](100) NULL,
	[PrimaryStreetSuffix] [varchar](10) NULL,
	[PrimaryPostdirAbbrev] [varchar](10) NULL,
	[SecondaryUnitType] [varchar](20) NULL,
	[SecondaryUnitNBR] [varchar](10) NULL,
	[City] [varchar](50) NULL,
	[StateCode] [varchar](2) NULL,
	[Zip] [varchar](10) NULL,
	[ZipExt] [varchar](10) NULL,
	[DeliveryPointCode] [varchar](10) NULL,
	[CarrierRoute] [varchar](10) NULL,
	[CountyCode] [varchar](10) NULL,
	[Zip4Type] [varchar](10) NULL,
	[DeliveryPointValidation] [varchar](10) NULL,
	[MailableFlag] [varchar](10) NULL,
	[AddressValidationDate] [datetime2](3) NULL,
	[Country] [varchar](10) NULL,
	[MCD] [varchar](10) NULL,
	[DirectoryAssistance] [varchar](10) NULL,
	[TelephoneConfidenceScore] [varchar](10) NULL,
	[LastUpdateDate] [datetime2](3) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[MC_CONTACTS]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MC_CONTACTS](
	[CustomerID] [nvarchar](50) NULL,
	[ContactType] [nvarchar](50) NULL,
	[PropertyID] [nvarchar](50) NULL,
	[FirstName] [nvarchar](128) NULL,
	[LastName] [nvarchar](128) NULL,
	[Email] [nvarchar](128) NULL,
	[Phone] [nvarchar](50) NULL,
	[PhoneType] [nvarchar](50) NULL,
	[SubscriptionEmail] [nvarchar](50) NULL,
	[SubscriptionSurvey] [nvarchar](50) NULL,
	[SubscriptionText] [nvarchar](50) NULL,
	[PreferredMeansOfContact] [nvarchar](50) NULL,
	[Unit#] [nvarchar](50) NULL,
	[Building#] [nvarchar](50) NULL,
	[Status] [nvarchar](50) NULL,
	[MoveInDate] [nvarchar](50) NULL,
	[Source] [nvarchar](50) NULL,
	[PriceMin] [nvarchar](50) NULL,
	[PriceMax] [nvarchar](50) NULL,
	[Beds(#)] [nvarchar](50) NULL,
	[Baths(#)] [nvarchar](50) NULL,
	[ResponseDate] [nvarchar](50) NULL,
	[ReasonForMove] [nvarchar](50) NULL,
	[Comments] [nvarchar](4000) NULL,
	[LeaseTermDateStart] [nvarchar](50) NULL,
	[LeaseTermDateEnd] [nvarchar](50) NULL,
	[Birthday] [nvarchar](50) NULL,
	[UnitType] [nvarchar](50) NULL,
	[ContactID] [nvarchar](50) NULL,
	[DateUpdate] [nvarchar](50) NULL,
	[DateCreated] [nvarchar](50) NULL,
	[IdentificationType] [nvarchar](50) NULL,
	[IdentificationScopeType] [nvarchar](50) NULL,
	[IdentificationRank] [nvarchar](50) NULL,
	[IdentificationIDValue] [nvarchar](50) NULL,
	[IdentificationOrganizationName] [nvarchar](50) NULL,
	[CustomerType] [nvarchar](50) NULL,
	[CustomerDescription] [nvarchar](50) NULL,
	[PropertyPrimaryID] [nvarchar](50) NULL,
	[PropertyMarketingName] [nvarchar](50) NULL,
	[AddressType] [nvarchar](50) NULL,
	[CurrentRent] [nvarchar](50) NULL,
	[ExpectedMoveOutDate] [nvarchar](50) NULL,
	[ActualMoveInDate] [nvarchar](50) NULL,
	[DesiredUnitID] [nvarchar](50) NULL,
	[DesiredPropertyPrimaryID] [nvarchar](50) NULL,
	[DesiredPropertyMarketingName] [nvarchar](50) NULL,
	[ApplicationDate] [nvarchar](50) NULL,
	[ApproveDate] [nvarchar](50) NULL,
	[LeaseSignDate] [nvarchar](50) NULL,
	[RenewDate] [nvarchar](50) NULL,
	[NoticeDate] [nvarchar](50) NULL,
	[WalkInDate] [nvarchar](50) NULL,
	[UnitCode] [nvarchar](50) NULL,
	[UnitRent] [nvarchar](50) NULL,
	[UnitSqFt] [nvarchar](50) NULL,
	[UnitEconomicStatus] [nvarchar](50) NULL,
	[UnitTypeDescription] [nvarchar](50) NULL,
	[UnitTypeRent] [nvarchar](50) NULL,
	[UnitTypeSqFt] [nvarchar](50) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[MonthlyAxioFileIDList]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MonthlyAxioFileIDList](
	[SFPropertyAcctID] [char](18) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[MonthlyAxioInformation]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MonthlyAxioInformation](
	[SFPropertyAcctID] [char](18) NULL,
	[PropertyName] [nvarchar](255) NULL,
	[PropertyAddress] [nvarchar](255) NULL,
	[PropertyCity] [nvarchar](40) NULL,
	[PropertyState] [nvarchar](80) NULL,
	[PropertyZipCode] [nvarchar](20) NULL,
	[GeoLat] [nvarchar](15) NULL,
	[GeoLong] [nvarchar](15) NULL,
	[NumUnits] [int] NULL,
	[MgtCoName] [varchar](80) NULL,
	[PropertyURL] [varchar](400) NOT NULL,
	[MgtCoURL] [varchar](2000) NULL,
	[FloorPlanName] [varchar](300) NULL,
	[Beds] [varchar](30) NULL,
	[FullBaths] [varchar](30) NULL,
	[HalfBaths] [varchar](30) NULL,
	[SqFt] [varchar](30) NOT NULL,
	[RentPriceLow] [varchar](30) NOT NULL,
	[RentPriceHigh] [varchar](30) NOT NULL,
	[LeaseTerm] [varchar](300) NULL,
	[DepositAmt] [varchar](30) NOT NULL,
	[Availability] [varchar](30) NULL,
	[AptFeatures] [varchar](8000) NULL,
	[CommunityFeatures] [varchar](8000) NULL,
	[CustomFeatures] [varchar](8000) NULL,
	[SpecialFeatures] [varchar](8000) NULL,
	[WebCouponText] [varchar](8000) NULL,
	[PropertyURLAG] [varchar](3000) NOT NULL,
	[PropertyURLRent] [varchar](3000) NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[MVTResultSet]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MVTResultSet](
	[TestName] [varchar](255) NOT NULL,
	[VariationGroupName] [varchar](255) NOT NULL,
	[DateSort] [int] NOT NULL,
	[GroupNumber] [int] NOT NULL,
	[FirstSegment] [varchar](15) NOT NULL,
	[SecondSegment] [varchar](20) NOT NULL,
	[FixedVCount] [int] NULL,
	[CustomEventCount] [int] NULL,
	[CustomVCount] [int] NULL,
	[CustomEventConv] [decimal](26, 13) NULL,
	[CustomEventConvDelta] [decimal](27, 13) NULL,
	[CustomEventConvDiff] [decimal](38, 11) NULL,
	[Binary] [decimal](26, 13) NULL,
	[BinaryDelta] [decimal](27, 13) NULL,
	[BinaryDiff] [decimal](38, 11) NULL,
	[OriginalFixedVCount] [int] NOT NULL,
	[OriginalCustomEventCount] [int] NOT NULL,
	[OriginalCustomVCount] [int] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[MVTResultSet4Product]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MVTResultSet4Product](
	[DateSort] [int] NOT NULL,
	[FirstSegment] [varchar](64) NULL,
	[SecondSegment] [varchar](13) NOT NULL,
	[FixedVCount] [int] NULL,
	[CustomEventCount] [int] NULL,
	[CustomVCount] [int] NULL,
	[CustomEventConv] [decimal](26, 13) NULL,
	[Binary] [decimal](26, 13) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ParsedData]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ParsedData](
	[ParseID] [bigint] NOT NULL,
	[ProfileID] [int] NOT NULL,
	[YMDID] [int] NOT NULL,
	[EventDate] [datetime] NOT NULL,
	[MeasureType] [varchar](50) NOT NULL,
	[Measure] [varchar](7000) NOT NULL,
	[SubProfileID] [tinyint] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ParsedData_20160726]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ParsedData_20160726](
	[ParseID] [bigint] NOT NULL,
	[ProfileID] [int] NOT NULL,
	[YMDID] [int] NOT NULL,
	[EventDate] [datetime] NOT NULL,
	[MeasureType] [varchar](50) NOT NULL,
	[Measure] [varchar](7000) NOT NULL,
	[SubProfileID] [tinyint] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[PhoneCallAppointmentSetPredictionBeta]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PhoneCallAppointmentSetPredictionBeta](
	[CallID] [nvarchar](50) NOT NULL,
	[Prediction] [int] NULL,
	[YMDID] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[CallID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[RDTManagementReport]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RDTManagementReport](
	[RDTXMLID] [int] IDENTITY(1,1) NOT NULL,
	[dateofdata] [int] NULL,
	[RDTCode] [varchar](8) NULL,
	[ymdid] [int] NULL,
	[ManagementName] [nvarchar](255) NULL,
	[ManagementProperties] [tinyint] NULL,
	[ExternalID] [varchar](20) NULL,
	[PropertyID] [bigint] NULL,
	[ListingID] [int] NULL,
	[PropertyName] [nvarchar](255) NULL,
	[UniqueSessions] [int] NULL,
	[pageviews] [int] NULL,
	[leadid] [bigint] NULL,
	[customerid] [nvarchar](255) NULL,
	[UnitNumber] [nvarchar](255) NULL,
	[FirstName] [nvarchar](255) NULL,
	[LastName] [nvarchar](255) NULL,
	[AddressAll] [nvarchar](255) NULL,
	[Address1] [nvarchar](255) NULL,
	[Address2] [nvarchar](255) NULL,
	[city] [nvarchar](255) NULL,
	[State] [nvarchar](255) NULL,
	[postalcode] [nvarchar](255) NULL,
	[email] [nvarchar](255) NULL,
	[phone] [nvarchar](255) NULL,
	[screeningresponse] [nvarchar](255) NULL,
	[LeadDateTime] [datetime] NULL,
	[estimatedmovedate] [datetime] NULL,
	[message] [nvarchar](255) NULL,
	[visitedproperty] [bit] NULL,
	[screened] [tinyint] NULL,
	[Unscreened] [tinyint] NULL,
	[LeadSource] [varchar](50) NULL,
	[website] [varchar](50) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[RDTManagementReport_TEST]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RDTManagementReport_TEST](
	[RDTXMLID] [int] IDENTITY(1,1) NOT NULL,
	[dateofdata] [int] NULL,
	[RDTCode] [varchar](8) NULL,
	[ymdid] [int] NULL,
	[ManagementName] [nvarchar](255) NULL,
	[ManagementProperties] [tinyint] NULL,
	[ExternalID] [varchar](20) NULL,
	[PropertyID] [bigint] NULL,
	[ListingID] [int] NULL,
	[PropertyName] [nvarchar](255) NULL,
	[UniqueSessions] [int] NULL,
	[pageviews] [int] NULL,
	[leadid] [bigint] NULL,
	[customerid] [nvarchar](255) NULL,
	[UnitNumber] [nvarchar](255) NULL,
	[FirstName] [nvarchar](255) NULL,
	[LastName] [nvarchar](255) NULL,
	[AddressAll] [nvarchar](255) NULL,
	[Address1] [nvarchar](255) NULL,
	[Address2] [nvarchar](255) NULL,
	[city] [nvarchar](255) NULL,
	[State] [nvarchar](255) NULL,
	[postalcode] [nvarchar](255) NULL,
	[email] [nvarchar](255) NULL,
	[phone] [nvarchar](255) NULL,
	[screeningresponse] [nvarchar](255) NULL,
	[LeadDateTime] [datetime] NULL,
	[estimatedmovedate] [datetime] NULL,
	[message] [nvarchar](255) NULL,
	[visitedproperty] [bit] NULL,
	[screened] [tinyint] NULL,
	[Unscreened] [tinyint] NULL,
	[LeadSource] [varchar](50) NULL,
	[website] [varchar](50) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[RDTManagementReport_TEST2]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RDTManagementReport_TEST2](
	[RDTXMLID] [int] IDENTITY(1,1) NOT NULL,
	[dateofdata] [datetime] NULL,
	[RDTCode] [varchar](8) NULL,
	[ymdid] [int] NULL,
	[ManagementName] [nvarchar](255) NULL,
	[ManagementProperties] [tinyint] NULL,
	[ExternalID] [varchar](20) NULL,
	[PropertyID] [bigint] NULL,
	[ListingID] [int] NULL,
	[PropertyName] [nvarchar](255) NULL,
	[UniqueSessions] [int] NULL,
	[pageviews] [int] NULL,
	[leadid] [bigint] NULL,
	[customerid] [nvarchar](255) NULL,
	[UnitNumber] [nvarchar](255) NULL,
	[FirstName] [nvarchar](255) NULL,
	[LastName] [nvarchar](255) NULL,
	[AddressAll] [nvarchar](255) NULL,
	[Address1] [nvarchar](255) NULL,
	[Address2] [nvarchar](255) NULL,
	[city] [nvarchar](255) NULL,
	[State] [nvarchar](255) NULL,
	[postalcode] [nvarchar](255) NULL,
	[email] [nvarchar](255) NULL,
	[phone] [nvarchar](255) NULL,
	[screeningresponse] [nvarchar](255) NULL,
	[LeadDateTime] [datetime] NULL,
	[estimatedmovedate] [datetime] NULL,
	[message] [nvarchar](255) NULL,
	[visitedproperty] [bit] NULL,
	[screened] [tinyint] NULL,
	[Unscreened] [tinyint] NULL,
	[LeadSource] [varchar](50) NULL,
	[website] [varchar](50) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[tableau_conversion]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tableau_conversion](
	[profilename] [varchar](64) NOT NULL,
	[ymdid] [int] NULL,
	[ymd] [datetime] NULL,
	[cbsaname] [varchar](200) NULL,
	[visittype] [varchar](12) NOT NULL,
	[desk_mobile] [varchar](7) NOT NULL,
	[leadtagcount] [bigint] NULL,
	[phonetagcount] [bigint] NULL,
	[visitcount] [int] NULL,
	[email_lead_count] [int] NULL,
	[phone_lead_count] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[tableau_email_conversion]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tableau_email_conversion](
	[profilename] [varchar](64) NOT NULL,
	[ymdid] [int] NULL,
	[ymd] [datetime] NULL,
	[cbsaname] [varchar](200) NULL,
	[trafficsourcename] [varchar](32) NOT NULL,
	[visittype] [varchar](12) NOT NULL,
	[browser] [varchar](50) NULL,
	[device_type] [varchar](7) NOT NULL,
	[desk_mobile] [varchar](7) NOT NULL,
	[entrypage] [varchar](512) NOT NULL,
	[leadtagcount] [bigint] NULL,
	[phonetagcount] [bigint] NULL,
	[visitcount] [int] NULL,
	[email_lead_count] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[test_dimbackfilllisting_final]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[test_dimbackfilllisting_final](
	[YMDID] [int] NULL,
	[DisplayListingID] [varchar](40) NULL,
	[ListingID] [int] NULL,
	[PropertyIDAG] [int] NULL,
	[PropertyIDRent] [int] NULL,
	[StatusIDAG] [int] NULL,
	[StatusIDRent] [int] NULL,
	[IsRentals] [int] NULL,
	[IsRentalHouses] [int] NULL,
	[IsLovely] [int] NULL,
	[IsRentSmallProp] [int] NULL,
	[PropertyName] [varchar](300) NOT NULL,
	[PropertyAddress] [varchar](300) NOT NULL,
	[PropertyCity] [varchar](300) NOT NULL,
	[PropertyState] [varchar](30) NOT NULL,
	[ZipCode] [varchar](30) NOT NULL,
	[CBSACode] [varchar](50) NULL,
	[CBSAName] [varchar](200) NULL,
	[GeoLat] [decimal](10, 4) NULL,
	[GeoLong] [decimal](10, 4) NULL,
	[MgtCoID] [varchar](50) NULL,
	[MgtCoName] [varchar](100) NULL,
	[ShowPricing] [int] NULL,
	[LowPrice] [int] NULL,
	[HighPrice] [int] NULL,
	[WebTollFree] [varchar](30) NULL,
	[MobileTollFree] [varchar](30) NULL,
	[ActiveAmenities] [int] NULL,
	[ActiveFloorPlans] [int] NULL,
	[ActivePhotos] [int] NULL,
	[PropertyTotalUnits] [int] NULL,
	[LastUpdateYMDID] [int] NULL,
	[TargetPhoneNumber] [varchar](20) NULL,
	[TPLSource] [varchar](50) NULL,
	[IsCourtesy] [int] NOT NULL,
	[IsSmallProperty] [int] NOT NULL,
	[DateModified] [datetime] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[TESTWeblog]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TESTWeblog](
	[LogDate] [varchar](20) NULL,
	[LogTime] [varchar](20) NULL,
	[ServerIP] [varchar](20) NULL,
	[MethodVal] [varchar](100) NULL,
	[ImageVal] [varchar](100) NULL,
	[KeyValuePair] [varchar](6000) NULL,
	[PortNo] [varchar](20) NULL,
	[DummyVal1] [varchar](20) NULL,
	[CustIP] [varchar](100) NULL,
	[UserAgent] [varchar](1000) NULL,
	[StatusVal] [varchar](300) NULL,
	[DummyVal2] [varchar](300) NULL,
	[DummyVal3] [varchar](300) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[TestWebLogException]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TestWebLogException](
	[ExceptionDate] [datetime] NOT NULL,
	[LogDate] [varchar](20) NULL,
	[LogTime] [varchar](20) NULL,
	[ServerIP] [varchar](20) NULL,
	[MethodVal] [varchar](100) NULL,
	[ImageVal] [varchar](100) NULL,
	[KeyValuePair] [varchar](6000) NULL,
	[PortNo] [varchar](20) NULL,
	[DummyVal1] [varchar](20) NULL,
	[CustIP] [varchar](100) NULL,
	[UserAgent] [varchar](1000) NULL,
	[StatusVal] [varchar](300) NULL,
	[DummyVal2] [varchar](300) NULL,
	[DummyVal3] [varchar](300) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[TESTWeblogFullLine]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TESTWeblogFullLine](
	[FullLine] [varchar](8000) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[TestWebLogStaging]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TestWebLogStaging](
	[Parse] [bigint] IDENTITY(1,1) NOT NULL,
	[LogDate] [varchar](20) NULL,
	[LogTime] [varchar](20) NULL,
	[ServerIP] [varchar](20) NULL,
	[MethodVal] [varchar](100) NULL,
	[ImageVal] [varchar](100) NULL,
	[KeyValuePair] [varchar](6000) NULL,
	[PortNo] [varchar](20) NULL,
	[DummyVal1] [varchar](20) NULL,
	[CustIP] [varchar](100) NULL,
	[UserAgent] [varchar](1000) NULL,
	[StatusVal] [varchar](300) NULL,
	[DummyVal2] [varchar](300) NULL,
	[DummyVal3] [varchar](300) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[TestWebLogStagingKeyVal]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TestWebLogStagingKeyVal](
	[RecID] [bigint] IDENTITY(1,1) NOT NULL,
	[ParseID] [bigint] NULL,
	[PairKey] [varchar](4000) NULL,
	[PairVal] [varchar](8000) NULL,
 CONSTRAINT [PK_On_RecID] PRIMARY KEY CLUSTERED 
(
	[RecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[TestWebLogStagingKeyValData]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TestWebLogStagingKeyValData](
	[RecID] [bigint] IDENTITY(1,1) NOT NULL,
	[ParseID] [bigint] NULL,
	[PairKey] [varchar](2000) NULL,
	[PairVal] [varchar](6000) NULL,
 CONSTRAINT [PK_TestWebLogStagingKeyValData_On_RecID] PRIMARY KEY CLUSTERED 
(
	[RecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[TestWeblogStagingSplit]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TestWeblogStagingSplit](
	[FullLine] [varchar](8000) NULL,
	[MyValue] [nvarchar](4000) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[TestWeblogStagingSplitXML]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TestWeblogStagingSplitXML](
	[Col1] [varchar](2000) NULL,
	[Col2] [varchar](2000) NULL,
	[Col3] [varchar](2000) NULL,
	[Col4] [varchar](2000) NULL,
	[Col5] [varchar](2000) NULL,
	[Col6] [varchar](3000) NULL,
	[Col7] [varchar](2000) NULL,
	[Col8] [varchar](2000) NULL,
	[Col9] [varchar](2000) NULL,
	[Col10] [varchar](2000) NULL,
	[Col11] [varchar](2000) NULL,
	[Col12] [varchar](2000) NULL,
	[Col13] [varchar](2000) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[tmpleads]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tmpleads](
	[ListingID] [int] NOT NULL,
	[PropertyName] [varchar](100) NOT NULL,
	[PropertyAddress] [varchar](40) NOT NULL,
	[PropertyCity] [varchar](40) NOT NULL,
	[PropertyState] [varchar](2) NOT NULL,
	[ZipCode] [varchar](10) NOT NULL,
	[LeadType] [varchar](5) NOT NULL,
	[YMDID] [int] NULL,
	[LeadDayTime] [datetime] NOT NULL,
	[LeadDate] [varchar](38) NULL,
	[Name] [varchar](161) NOT NULL,
	[EmailAddress] [varchar](255) NOT NULL,
	[Comments] [varchar](2500) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[tmpParsedPivotListingArrayValues]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tmpParsedPivotListingArrayValues](
	[ParseID] [bigint] NULL,
	[ProfileKey] [int] NULL,
	[ListingID] [varchar](4000) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[tmpParsedPivotListingArrayValuesStaging]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tmpParsedPivotListingArrayValuesStaging](
	[Parseid] [bigint] NULL,
	[ProfileKey] [int] NOT NULL,
	[listing_array] [varchar](4000) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ViewsListingPageUpdate]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ViewsListingPageUpdate](
	[YMDID] [int] NOT NULL,
	[ListingID] [int] NOT NULL,
	[NewRecCount] [int] NULL,
	[NewViewsListingPage_Mobile] [int] NULL,
	[NewViewsListingPageMobileAG] [int] NULL,
	[OldRecCount] [int] NULL,
	[OldViewsListingPage_Mobile] [int] NULL,
	[OldViewsListingPageMobileAG] [int] NULL,
	[DiffRecs] [int] NULL,
	[DiffViewsListingPage_Mobile] [int] NULL,
	[DiffViewsListingPageMobileAG] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ZutronTaggedWebSite]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ZutronTaggedWebSite](
	[Domain] [nvarchar](255) NULL,
	[MgtCoNameAG] [nvarchar](255) NULL,
	[PropertyName] [nvarchar](255) NULL,
	[PropertyIDAG] [int] NULL,
	[Status] [nvarchar](255) NULL,
	[MGTCoIDAG] [int] NULL,
	[DateTagged] [datetime] NULL,
	[POC] [nvarchar](255) NULL,
	[POCEmail] [nvarchar](255) NULL,
	[Referral] [nvarchar](255) NULL,
	[ListingID] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Dimension].[BackfillListing]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Dimension].[BackfillListing](
	[YMDID] [int] NOT NULL,
	[DisplayListingID] [varchar](30) NOT NULL,
	[ListingID] [int] NOT NULL,
	[PropertyIDAG] [int] NOT NULL,
	[PropertyIDRent] [int] NOT NULL,
	[StatusIDAG] [int] NOT NULL,
	[StatusIDRent] [int] NOT NULL,
	[IsRentals] [tinyint] NOT NULL,
	[IsRentalHouses] [tinyint] NOT NULL,
	[IsLovely] [tinyint] NOT NULL,
	[IsRentSmallProp] [tinyint] NOT NULL,
	[PropertyName] [varchar](100) NOT NULL,
	[PropertyAddress] [varchar](100) NOT NULL,
	[PropertyCity] [varchar](40) NOT NULL,
	[PropertyState] [varchar](2) NOT NULL,
	[ZipCode] [varchar](10) NOT NULL,
	[CBSACode] [varchar](50) NOT NULL,
	[CBSAName] [varchar](200) NOT NULL,
	[GeoLat] [decimal](10, 4) NULL,
	[GeoLong] [decimal](10, 4) NULL,
	[GeogPoint] [geography] NULL,
	[MgtCoID] [varchar](30) NOT NULL,
	[MgtCoName] [varchar](80) NOT NULL,
	[ShowPricing] [tinyint] NULL,
	[LowPrice] [int] NOT NULL,
	[HighPrice] [int] NOT NULL,
	[WebTollFree] [varchar](20) NOT NULL,
	[MobileTollFree] [varchar](20) NOT NULL,
	[ActiveAmenities] [int] NOT NULL,
	[ActiveFloorPlans] [int] NOT NULL,
	[ActivePhotos] [int] NOT NULL,
	[PropertyTotalUnits] [int] NOT NULL,
	[LastUpdateYMDID] [int] NOT NULL,
	[DateModified] [datetime] NOT NULL,
	[TargetPhoneNumber] [varchar](20) NOT NULL,
	[TPLSource] [varchar](30) NOT NULL,
	[IsCourtesy] [int] NOT NULL,
	[IsSmallProperty] [int] NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [Dimension].[Greystar_XREF]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Dimension].[Greystar_XREF](
	[masterid] [int] NOT NULL,
	[propertyid] [int] NOT NULL,
	[prop_nm] [varchar](100) NOT NULL,
	[address] [varchar](100) NOT NULL,
	[city] [varchar](40) NOT NULL,
	[state] [varchar](2) NOT NULL,
	[zip] [varchar](10) NOT NULL,
	[ListingID] [int] NULL,
	[PropertyIDAG] [int] NULL,
	[SFPropertyAcctID] [varchar](20) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Dimension].[LeadTypes]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Dimension].[LeadTypes](
	[BusinessUnit] [varchar](50) NULL,
	[LeadChannel] [varchar](255) NULL,
	[LeadGeneratedSite] [varchar](50) NULL,
	[LeadType] [varchar](50) NULL,
	[LeadSourceDesc] [varchar](400) NULL,
	[TrafficSource] [varchar](255) NULL,
	[IsSEM] [int] NOT NULL,
	[PaidLead] [int] NULL,
	[IncludeInLeadCounts] [int] NOT NULL,
	[DBSourceSystemKey] [int] NOT NULL,
	[DBSourceSystem] [varchar](255) NULL,
	[LeadTypeDesc] [varchar](32) NULL,
	[LeadMediumDesc] [varchar](64) NOT NULL,
	[LeadSourceKey] [int] NOT NULL,
	[LeadSourceBusinessKey] [varchar](64) NOT NULL,
	[ProfileKey] [int] NOT NULL,
 CONSTRAINT [PK_LeadTypes] PRIMARY KEY CLUSTERED 
(
	[LeadSourceKey] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [Dimension].[Listings_APS_old]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Dimension].[Listings_APS_old](
	[YMDID] [int] NOT NULL,
	[ListingID] [int] NOT NULL,
	[ListingTypeID] [int] NOT NULL,
	[ListingTypeShort] [varchar](5) NOT NULL,
	[ListingType] [varchar](25) NOT NULL,
	[PropertyIDAG] [int] NOT NULL,
	[StatusIDAG] [tinyint] NOT NULL,
	[BillingIDAG] [varchar](20) NOT NULL,
	[PropertyIDRent] [int] NOT NULL,
	[StatusIDRent] [tinyint] NOT NULL,
	[BillingIDRent] [varchar](20) NOT NULL,
	[ListingSource] [varchar](20) NULL,
	[MgtCoIDAG] [int] NULL,
	[MgtCoNameAG] [varchar](100) NULL,
	[MgtCoIDRent] [int] NULL,
	[MgtCoNameRent] [varchar](100) NULL,
	[CompanyIDRent] [int] NULL,
	[SFCommunityID] [varchar](20) NULL,
	[SFPropertyAcctID] [varchar](18) NULL,
	[Ext_PropertyID] [int] NULL,
	[PropertyName] [varchar](100) NOT NULL,
	[PropertyAddress] [varchar](40) NOT NULL,
	[PropertyCity] [varchar](40) NOT NULL,
	[PropertyState] [varchar](2) NOT NULL,
	[PropertyZipCode] [varchar](10) NOT NULL,
	[ListingDescriptionLength] [int] NOT NULL,
	[VanityURL] [varchar](400) NOT NULL,
	[PropertyURL] [varchar](400) NOT NULL,
	[PropertyContactPhone] [varchar](20) NOT NULL,
	[WebMobileTargetAG] [varchar](20) NOT NULL,
	[WebTollFreeAG] [varchar](20) NOT NULL,
	[MobileTollFreeAG] [varchar](20) NOT NULL,
	[WebTargetRent] [varchar](20) NOT NULL,
	[MobileTargetRent] [varchar](20) NOT NULL,
	[WebTollFreeRent] [varchar](20) NOT NULL,
	[MobileTollFreeRent] [varchar](20) NOT NULL,
	[WebTargetRentals] [varchar](20) NOT NULL,
	[WebTollFreeRentals] [varchar](20) NOT NULL,
	[AGCTarget] [varchar](20) NOT NULL,
	[AGCTollFree] [varchar](20) NOT NULL,
	[ASGTarget] [varchar](20) NOT NULL,
	[ASGTollFree] [varchar](20) NOT NULL,
	[LeadEmailAG] [varchar](2000) NOT NULL,
	[LeadEmailRent] [varchar](2000) NOT NULL,
	[LeadEmailWithTypeAG] [varchar](1000) NOT NULL,
	[LeadEmailWithTypeRent] [varchar](1000) NOT NULL,
	[PhoneLeadRecapEmail] [varchar](400) NOT NULL,
	[LeadFaxAG] [varchar](400) NOT NULL,
	[LeadFaxRent] [varchar](400) NOT NULL,
	[LowPrice] [int] NOT NULL,
	[HighPrice] [int] NOT NULL,
	[CalculatedPrice] [int] NOT NULL,
	[CallTrackingInBook] [tinyint] NOT NULL,
	[CallTrackingInBookStartDate] [datetime] NULL,
	[WebCouponStartDate] [datetime] NULL,
	[WebCouponExpirationDate] [datetime] NULL,
	[WebCouponText] [varchar](600) NOT NULL,
	[MobileCouponStartDate] [datetime] NULL,
	[MobileCouponExpirationDate] [datetime] NULL,
	[MobileCouponText] [varchar](600) NOT NULL,
	[GeoLat] [decimal](10, 4) NOT NULL,
	[GeoLong] [decimal](10, 4) NOT NULL,
	[CBSACode] [nvarchar](50) NOT NULL,
	[CBSAName] [nvarchar](200) NOT NULL,
	[MarketCD] [varchar](20) NOT NULL,
	[MarketName] [varchar](50) NOT NULL,
	[MetroName] [varchar](40) NOT NULL,
	[SectionName] [varchar](75) NOT NULL,
	[SubSectionName] [varchar](50) NOT NULL,
	[DateModified] [datetime] NOT NULL,
	[LastUpdateYMDID] [int] NOT NULL,
	[ActiveCoupon] [tinyint] NOT NULL,
	[MobileCouponActive] [tinyint] NOT NULL,
	[ShowPricing] [tinyint] NOT NULL,
	[ShowOfficeHours] [tinyint] NOT NULL,
	[IsOverThreshold] [tinyint] NOT NULL,
	[IsSmallProperty] [tinyint] NOT NULL,
	[IsRentalProp] [tinyint] NOT NULL,
	[IsSEM] [tinyint] NOT NULL,
	[Whisper] [tinyint] NOT NULL,
	[CallRecordingOptOut] [tinyint] NOT NULL,
	[ATTUverse] [tinyint] NOT NULL,
	[Brighthouse] [tinyint] NOT NULL,
	[Charter] [tinyint] NOT NULL,
	[DIRECTV] [tinyint] NOT NULL,
	[TimeWarner] [tinyint] NOT NULL,
	[VerizonFIOS] [tinyint] NOT NULL,
	[XFinityDP] [tinyint] NOT NULL,
	[XFinitySP] [tinyint] NOT NULL,
	[XFinityTP] [tinyint] NOT NULL,
	[HasCR3] [tinyint] NOT NULL,
	[ExternalID] [varchar](50) NOT NULL,
	[ListingPricingSource] [varchar](8) NOT NULL,
	[ListingDetailsSource] [varchar](20) NOT NULL,
	[HasAvailabilityURL] [tinyint] NOT NULL,
	[PropertyTotalUnits] [int] NOT NULL,
	[TotalAmenities] [int] NOT NULL,
	[ActiveAmenities] [tinyint] NOT NULL,
	[TotalFloorPlans] [int] NOT NULL,
	[ActiveFloorplans] [tinyint] NOT NULL,
	[ActiveLowResFloorplans] [tinyint] NOT NULL,
	[ActiveHDFloorplans] [tinyint] NOT NULL,
	[TotalPhotos] [int] NOT NULL,
	[ActivePhotos] [tinyint] NOT NULL,
	[ActiveLowResPhotos] [tinyint] NOT NULL,
	[ActiveHDPhotos] [tinyint] NOT NULL,
	[CR3AvgOverallRatingAG] [decimal](16, 1) NOT NULL,
	[CR3AvgOverallRatingRent] [decimal](16, 1) NOT NULL,
	[PlacementTierAG] [int] NOT NULL,
	[PlacementTierRent] [int] NOT NULL,
	[ContractLoyaltyPoints] [int] NOT NULL,
	[InternetProductPoints] [int] NOT NULL,
	[LegacyLoyaltyPoints] [int] NOT NULL,
	[MobilePoints] [int] NOT NULL,
	[PrintProductPoints] [int] NOT NULL,
	[Ranking] [varchar](1) NOT NULL,
	[NumericRank] [decimal](15, 4) NOT NULL,
	[RPLRank] [decimal](8, 2) NOT NULL,
	[BadgeCollege] [tinyint] NOT NULL,
	[BadgeCorporate] [tinyint] NOT NULL,
	[BadgeIncomeRestricted] [tinyint] NOT NULL,
	[BadgeLuxury] [tinyint] NOT NULL,
	[BadgeMilitary] [tinyint] NOT NULL,
	[BadgePetFriendly] [tinyint] NOT NULL,
	[BadgeSenior] [tinyint] NOT NULL,
	[BadgeGolf] [tinyint] NOT NULL,
	[BadgeWaterfront] [tinyint] NOT NULL,
	[BadgeFurnished] [tinyint] NOT NULL,
	[DefaultBadge] [varchar](50) NULL,
	[Upsell30SecondVideo] [tinyint] NOT NULL,
	[Upsell60SecondVideo] [tinyint] NOT NULL,
	[Upsell3DFloorplan] [tinyint] NOT NULL,
	[UpsellAdCreator] [tinyint] NOT NULL,
	[UpsellAGMobileSyndication] [tinyint] NOT NULL,
	[UpsellAGSites] [tinyint] NOT NULL,
	[UpsellAGSitesCustomURL] [varchar](400) NOT NULL,
	[UpsellApartmentListing] [tinyint] NOT NULL,
	[UpsellBillingOnly] [tinyint] NOT NULL,
	[UpsellCallRecording] [tinyint] NOT NULL,
	[UpsellCarousel] [tinyint] NOT NULL,
	[UpsellCarouselRentals] [tinyint] NOT NULL,
	[UpsellCategoryListing] [tinyint] NOT NULL,
	[UpsellCommunityVideo] [tinyint] NOT NULL,
	[UpsellCommunityVideoURLFulfilled] [tinyint] NOT NULL,
	[UpsellCoupon] [tinyint] NOT NULL,
	[UpsellDiamondCity] [tinyint] NOT NULL,
	[UpsellDiamondMax] [tinyint] NOT NULL,
	[UpsellDiamondMetro] [tinyint] NOT NULL,
	[UpsellDynamicLeadForm] [tinyint] NOT NULL,
	[UpsellEmercial] [tinyint] NOT NULL,
	[UpsellEZPay] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityAG] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityRent] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityGold] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityPlatinum] [tinyint] NOT NULL,
	[UpsellFeaturedCommunitySilver] [tinyint] NOT NULL,
	[UpsellFeaturedListingRentals] [tinyint] NOT NULL,
	[UpsellFloorplanUpgrade] [tinyint] NOT NULL,
	[UpsellFormToPhone] [tinyint] NOT NULL,
	[UpsellFrontPage] [tinyint] NOT NULL,
	[UpsellGoldTier] [tinyint] NOT NULL,
	[UpsellHDActiveFloorplansFulfilled] [tinyint] NOT NULL,
	[UpsellHDActivePhotosFulfilled] [tinyint] NOT NULL,
	[UpsellHDPanoTour] [tinyint] NOT NULL,
	[UpsellHDPanoTourFulfilled] [tinyint] NOT NULL,
	[UpsellHDPhoto] [tinyint] NOT NULL,
	[UpsellHDVideo] [tinyint] NOT NULL,
	[UpsellHDVideoFulfilled] [tinyint] NOT NULL,
	[UpsellHighlighted] [tinyint] NOT NULL,
	[UpsellLeadMail] [tinyint] NOT NULL,
	[UpsellLinked3DFloorplan] [tinyint] NOT NULL,
	[UpsellLinked3DFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedFloorplan] [tinyint] NOT NULL,
	[UpsellLinkedFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedLowResFloorplan] [tinyint] NOT NULL,
	[UpsellLinkedLowResFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedHDFloorplan] [tinyint] NOT NULL,
	[UpsellLinkedHDFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedRoomPlanner] [tinyint] NOT NULL,
	[UpsellLinkedRoomPlannerFulfilled] [tinyint] NOT NULL,
	[UpsellListingRent] [tinyint] NOT NULL,
	[UpsellListingRentals] [tinyint] NOT NULL,
	[UpsellMediaCenter] [tinyint] NOT NULL,
	[UpsellMediaCenterCoupon] [tinyint] NOT NULL,
	[UpsellMgmtManagementCoLogoDisplay] [tinyint] NOT NULL,
	[UpsellMgmtPeelAd] [tinyint] NOT NULL,
	[UpsellMobileDeal] [tinyint] NOT NULL,
	[UpsellMobileDealFulfilled] [tinyint] NOT NULL,
	[UpsellMobileDiamond] [tinyint] NOT NULL,
	[UpsellMobileSpotlight] [tinyint] NOT NULL,
	[UpsellNoVacancyRent] [tinyint] NOT NULL,
	[UpsellPayPerLead] [tinyint] NOT NULL,
	[UpsellPayPerLease] [tinyint] NOT NULL,
	[UpsellPayPerLeaseALM] [tinyint] NOT NULL,
	[UpsellPhotoUpgrade] [tinyint] NOT NULL,
	[UpsellPhotoPlus] [tinyint] NOT NULL,
	[UpsellPlatinumTier] [tinyint] NOT NULL,
	[UpsellPrecisionTargetedEmailRent] [tinyint] NOT NULL,
	[UpsellPremierListingRentals] [tinyint] NOT NULL,
	[UpsellPremiumUpgrade] [tinyint] NOT NULL,
	[UpsellPropertyLogo] [tinyint] NOT NULL,
	[UpsellRentFeaturedPlacement] [tinyint] NOT NULL,
	[UpsellRentPathConnect] [tinyint] NOT NULL,
	[UpsellRepMon] [tinyint] NOT NULL,
	[UpsellRewardCardRent] [tinyint] NOT NULL,
	[UpsellSocialMediaMan] [tinyint] NOT NULL,
	[UpsellSpanish] [tinyint] NOT NULL,
	[UpsellSponsoredApartment] [tinyint] NOT NULL,
	[UpsellSpotlightAG] [tinyint] NOT NULL,
	[UpsellSpotlightRent] [tinyint] NOT NULL,
	[UpsellSpotlightRentals] [tinyint] NOT NULL,
	[UpsellStandardListingRentals] [tinyint] NOT NULL,
	[UpsellStandardPlusListingRentals] [tinyint] NOT NULL,
	[UpsellSubscriptionModelRent] [tinyint] NOT NULL,
	[UpsellVideoSpokesmodel] [tinyint] NOT NULL,
	[UpsellVIPPlacementRent] [tinyint] NOT NULL,
	[UpsellVirtualBrochure] [tinyint] NOT NULL,
	[UpsellVirtualTourFulfilled] [tinyint] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Dimension].[Listings_old]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Dimension].[Listings_old](
	[YMDID] [int] NOT NULL,
	[ListingID] [int] NOT NULL,
	[PropertyIDAG] [int] NOT NULL,
	[StatusIDAG] [tinyint] NOT NULL,
	[PropertyIDRent] [int] NOT NULL,
	[StatusIDRent] [tinyint] NOT NULL,
	[ListingSource] [varchar](20) NULL,
	[BillingIDAG] [varchar](20) NOT NULL,
	[BillingIDRent] [varchar](20) NOT NULL,
	[SFDCCommunityID] [varchar](20) NOT NULL,
	[SFPropertyAcctID] [varchar](20) NULL,
	[ListingType] [varchar](25) NOT NULL,
	[PropertyName] [varchar](100) NOT NULL,
	[PropertyAddress] [varchar](40) NOT NULL,
	[PropertyCity] [varchar](40) NOT NULL,
	[PropertyState] [varchar](2) NOT NULL,
	[PropertyZipCode] [varchar](10) NOT NULL,
	[CBSACode] [nvarchar](50) NOT NULL,
	[CBSAName] [nvarchar](200) NOT NULL,
	[GeoLat] [decimal](10, 4) NOT NULL,
	[GeoLong] [decimal](10, 4) NOT NULL,
	[PropertyContactPhone] [varchar](20) NOT NULL,
	[MarketCD] [varchar](20) NOT NULL,
	[MarketName] [varchar](50) NOT NULL,
	[MgtCoIDAG] [int] NULL,
	[MgtCoNameAG] [varchar](80) NULL,
	[MgtCoIDRent] [int] NULL,
	[MgtCoNameRent] [varchar](80) NULL,
	[CompanyIDRent] [int] NULL,
	[IsSEM] [int] NOT NULL,
	[IsSmallProperty] [tinyint] NOT NULL,
	[PropertyTotalUnits] [int] NOT NULL,
	[ShowPricing] [int] NOT NULL,
	[LowPrice] [int] NOT NULL,
	[HighPrice] [int] NOT NULL,
	[WebMobileTargetAG] [varchar](20) NOT NULL,
	[WebTollFreeAG] [varchar](20) NOT NULL,
	[MobileTollFreeAG] [varchar](20) NOT NULL,
	[WebTargetRent] [varchar](20) NOT NULL,
	[WebTollFreeRent] [varchar](20) NOT NULL,
	[MobileTargetRent] [varchar](20) NOT NULL,
	[MobileTollFreeRent] [varchar](20) NOT NULL,
	[WebTargetRentals] [varchar](20) NOT NULL,
	[WebTollFreeRentals] [varchar](20) NOT NULL,
	[CallRecordingOptOut] [tinyint] NOT NULL,
	[Whisper] [tinyint] NOT NULL,
	[LeadEmailAG] [varchar](2000) NOT NULL,
	[LeadEmailRent] [varchar](2000) NOT NULL,
	[LeadEmailWithTypeAG] [varchar](1000) NOT NULL,
	[LeadEmailWithTypeRent] [varchar](1000) NOT NULL,
	[PhoneLeadRecapEmail] [varchar](400) NOT NULL,
	[LeadFaxAG] [varchar](400) NOT NULL,
	[LeadFaxRent] [varchar](400) NOT NULL,
	[ListingDescriptionLength] [int] NOT NULL,
	[VanityURL] [varchar](400) NOT NULL,
	[PropertyURL] [varchar](400) NOT NULL,
	[TotalAmenities] [int] NOT NULL,
	[ActiveAmenities] [int] NOT NULL,
	[ActiveCoupon] [tinyint] NOT NULL,
	[WebCouponStartDate] [datetime] NULL,
	[WebCouponExpirationDate] [datetime] NULL,
	[WebCouponText] [varchar](600) NOT NULL,
	[MobileCouponStartDate] [datetime] NULL,
	[MobileCouponExpirationDate] [datetime] NULL,
	[MobileCouponText] [varchar](600) NOT NULL,
	[ActiveFloorplans] [int] NOT NULL,
	[ActiveLowResFloorplans] [int] NOT NULL,
	[ActiveHDFloorplans] [int] NOT NULL,
	[ActivePhotos] [int] NOT NULL,
	[ActiveLowResPhotos] [int] NOT NULL,
	[ActiveHDPhotos] [int] NOT NULL,
	[ExternalID] [varchar](50) NOT NULL,
	[ListingPricingSource] [varchar](8) NOT NULL,
	[ListingDetailsSource] [varchar](20) NOT NULL,
	[HasAvailabilityURL] [tinyint] NULL,
	[Charter] [tinyint] NOT NULL,
	[DIRECTV] [tinyint] NOT NULL,
	[HasCR3] [tinyint] NOT NULL,
	[CR3AvgOverallRatingAG] [numeric](16, 1) NOT NULL,
	[CR3AvgOverallRatingRent] [numeric](16, 1) NOT NULL,
	[ShowOfficeHours] [int] NOT NULL,
	[PlacementTierAG] [int] NOT NULL,
	[PlacementTierRent] [int] NOT NULL,
	[ContractLoyaltyPoints] [int] NOT NULL,
	[InternetProductPoints] [int] NOT NULL,
	[LegacyLoyaltyPoints] [int] NOT NULL,
	[MobilePoints] [int] NOT NULL,
	[PrintProductPoints] [int] NOT NULL,
	[Ranking] [varchar](1) NOT NULL,
	[RPLRank] [numeric](8, 2) NOT NULL,
	[BadgeCollege] [tinyint] NOT NULL,
	[BadgeCorporate] [tinyint] NOT NULL,
	[BadgeIncomeRestricted] [tinyint] NOT NULL,
	[BadgeLuxury] [tinyint] NOT NULL,
	[BadgeMilitary] [tinyint] NOT NULL,
	[BadgePetFriendly] [tinyint] NOT NULL,
	[BadgeSenior] [tinyint] NOT NULL,
	[BadgeGolf] [tinyint] NULL,
	[BadgeWaterfront] [tinyint] NULL,
	[BadgeFurnished] [tinyint] NULL,
	[DefaultBadge] [varchar](50) NULL,
	[Upsell3DFloorplan] [tinyint] NOT NULL,
	[UpsellAGSites] [tinyint] NOT NULL,
	[UpsellAGSitesCustomURL] [varchar](400) NOT NULL,
	[UpsellCarousel] [tinyint] NOT NULL,
	[UpsellCarouselRentals] [tinyint] NOT NULL,
	[UpsellCommunityVideoURLFulfilled] [tinyint] NOT NULL,
	[UpsellCoupon] [tinyint] NOT NULL,
	[UpsellDiamondCity] [tinyint] NOT NULL,
	[UpsellDiamondMax] [tinyint] NOT NULL,
	[UpsellDiamondMetro] [tinyint] NOT NULL,
	[UpsellEmercial] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityAG] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityRent] [tinyint] NOT NULL,
	[UpsellFeaturedListingRentals] [tinyint] NOT NULL,
	[UpsellHDActiveFloorplansFulfilled] [tinyint] NOT NULL,
	[UpsellHDActivePhotosFulfilled] [tinyint] NOT NULL,
	[UpsellHDPanoTour] [tinyint] NOT NULL,
	[UpsellHDPanoTourFulfilled] [tinyint] NOT NULL,
	[UpsellHDPhoto] [tinyint] NOT NULL,
	[UpsellHDVideo] [tinyint] NOT NULL,
	[UpsellHDVideoFulfilled] [tinyint] NOT NULL,
	[UpsellHighlighted] [tinyint] NOT NULL,
	[UpsellLinked3DFloorplan] [int] NOT NULL,
	[UpsellLinked3DFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedFloorplan] [int] NOT NULL,
	[UpsellLinkedFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedLowResFloorplan] [int] NOT NULL,
	[UpsellLinkedLowResFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedHDFloorplan] [int] NOT NULL,
	[UpsellLinkedHDFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedRoomPlanner] [int] NOT NULL,
	[UpsellLinkedRoomPlannerFulfilled] [tinyint] NOT NULL,
	[UpsellListingRent] [tinyint] NOT NULL,
	[UpsellListingRentals] [tinyint] NOT NULL,
	[UpsellMediaCenter] [tinyint] NOT NULL,
	[UpsellMgmtPeelAd] [tinyint] NOT NULL,
	[UpsellMobileDeal] [tinyint] NOT NULL,
	[UpsellMobileDealFulfilled] [tinyint] NOT NULL,
	[UpsellMobileDiamond] [tinyint] NOT NULL,
	[UpsellMobileSpotlight] [tinyint] NOT NULL,
	[UpsellNoVacancyRent] [tinyint] NOT NULL,
	[UpsellPayPerLead] [tinyint] NOT NULL,
	[UpsellPayPerLease] [tinyint] NOT NULL,
	[UpsellPayPerLeaseALM] [tinyint] NOT NULL,
	[UpsellPhotoUpgrade] [tinyint] NOT NULL,
	[UpsellPrecisionTargetedEmailRent] [tinyint] NOT NULL,
	[UpsellPremierListingRentals] [tinyint] NOT NULL,
	[UpsellPremiumUpgrade] [tinyint] NOT NULL,
	[UpsellRewardCardRent] [tinyint] NOT NULL,
	[UpsellSponsoredApartment] [tinyint] NOT NULL,
	[UpsellSpotlightAG] [tinyint] NOT NULL,
	[UpsellSpotlightRent] [tinyint] NOT NULL,
	[UpsellSpotlightRentals] [tinyint] NOT NULL,
	[UpsellStandardListingRentals] [tinyint] NOT NULL,
	[UpsellStandardPlusListingRentals] [tinyint] NOT NULL,
	[UpsellSubscriptionModelRent] [tinyint] NOT NULL,
	[UpsellVideoSpokesmodel] [tinyint] NOT NULL,
	[UpsellVIPPlacementRent] [tinyint] NOT NULL,
	[UpsellVirtualBrochure] [tinyint] NOT NULL,
	[UpsellVirtualTourFulfilled] [tinyint] NOT NULL,
	[UpsellFuture2] [tinyint] NOT NULL,
	[UpsellFuture3] [tinyint] NOT NULL,
	[UpsellFuture4] [tinyint] NOT NULL,
	[UpsellFuture5] [tinyint] NOT NULL,
	[UpsellFuture6] [tinyint] NOT NULL,
	[UpsellFuture7] [tinyint] NOT NULL,
	[UpsellFuture8] [tinyint] NOT NULL,
	[UpsellFuture9] [tinyint] NOT NULL,
	[GeoPoint] [geography] NULL,
	[LastUpdateYMDID] [int] NOT NULL,
 CONSTRAINT [PK_Listings_New] PRIMARY KEY CLUSTERED 
(
	[ListingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [Dimension].[ListingsFromAPS_unused]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Dimension].[ListingsFromAPS_unused](
	[YMDID] [int] NOT NULL,
	[ListingID] [int] NOT NULL,
	[PropertyIDAG] [int] NOT NULL,
	[StatusIDAG] [tinyint] NOT NULL,
	[PropertyIDRent] [int] NOT NULL,
	[StatusIDRent] [tinyint] NOT NULL,
	[BillingIDAG] [varchar](20) NOT NULL,
	[BillingIDRent] [varchar](20) NOT NULL,
	[SFDCCommunityID] [varchar](20) NOT NULL,
	[SFPropertyAcctID] [varchar](20) NULL,
	[ListingType] [varchar](25) NOT NULL,
	[PropertyName] [varchar](100) NOT NULL,
	[PropertyAddress] [varchar](40) NOT NULL,
	[PropertyCity] [varchar](40) NOT NULL,
	[PropertyState] [varchar](2) NOT NULL,
	[PropertyZipCode] [varchar](10) NOT NULL,
	[CBSACode] [nvarchar](50) NOT NULL,
	[CBSAName] [nvarchar](200) NOT NULL,
	[GeoLat] [decimal](10, 4) NOT NULL,
	[GeoLong] [decimal](10, 4) NOT NULL,
	[PropertyContactPhone] [varchar](20) NOT NULL,
	[MarketCD] [varchar](20) NOT NULL,
	[MarketName] [varchar](50) NOT NULL,
	[MgtCoIDAG] [int] NULL,
	[MgtCoNameAG] [varchar](80) NULL,
	[MgtCoIDRent] [int] NULL,
	[MgtCoNameRent] [varchar](80) NULL,
	[CompanyIDRent] [int] NULL,
	[IsSEM] [int] NOT NULL,
	[IsSmallProperty] [tinyint] NOT NULL,
	[PropertyTotalUnits] [int] NOT NULL,
	[ShowPricing] [int] NOT NULL,
	[LowPrice] [int] NOT NULL,
	[HighPrice] [int] NOT NULL,
	[WebMobileTargetAG] [varchar](20) NOT NULL,
	[WebTollFreeAG] [varchar](20) NOT NULL,
	[MobileTollFreeAG] [varchar](20) NOT NULL,
	[WebTargetRent] [varchar](20) NOT NULL,
	[WebTollFreeRent] [varchar](20) NOT NULL,
	[MobileTargetRent] [varchar](20) NOT NULL,
	[MobileTollFreeRent] [varchar](20) NOT NULL,
	[WebTargetRentals] [varchar](20) NOT NULL,
	[WebTollFreeRentals] [varchar](20) NOT NULL,
	[CallRecordingOptOut] [tinyint] NOT NULL,
	[Whisper] [tinyint] NOT NULL,
	[LeadEmailAG] [varchar](2000) NOT NULL,
	[LeadEmailRent] [varchar](2000) NOT NULL,
	[LeadEmailWithTypeAG] [varchar](1000) NOT NULL,
	[LeadEmailWithTypeRent] [varchar](1000) NOT NULL,
	[PhoneLeadRecapEmail] [varchar](400) NOT NULL,
	[LeadFaxAG] [varchar](400) NOT NULL,
	[LeadFaxRent] [varchar](400) NOT NULL,
	[ListingDescriptionLength] [int] NOT NULL,
	[VanityURL] [varchar](400) NOT NULL,
	[PropertyURL] [varchar](400) NOT NULL,
	[TotalAmenities] [int] NOT NULL,
	[ActiveAmenities] [int] NOT NULL,
	[ActiveCoupon] [tinyint] NOT NULL,
	[WebCouponStartDate] [datetime] NULL,
	[WebCouponExpirationDate] [datetime] NULL,
	[WebCouponText] [varchar](600) NOT NULL,
	[MobileCouponStartDate] [datetime] NULL,
	[MobileCouponExpirationDate] [datetime] NULL,
	[MobileCouponText] [varchar](600) NOT NULL,
	[ActiveFloorplans] [int] NOT NULL,
	[ActiveLowResFloorplans] [int] NOT NULL,
	[ActiveHDFloorplans] [int] NOT NULL,
	[ActivePhotos] [int] NOT NULL,
	[ActiveLowResPhotos] [int] NOT NULL,
	[ActiveHDPhotos] [int] NOT NULL,
	[ExternalID] [varchar](50) NOT NULL,
	[ListingPricingSource] [varchar](8) NOT NULL,
	[ListingDetailsSource] [varchar](20) NOT NULL,
	[Charter] [tinyint] NOT NULL,
	[DIRECTV] [tinyint] NOT NULL,
	[HasCR3] [tinyint] NOT NULL,
	[CR3AvgOverallRatingAG] [numeric](16, 1) NOT NULL,
	[CR3AvgOverallRatingRent] [numeric](16, 1) NOT NULL,
	[ShowOfficeHours] [int] NOT NULL,
	[PlacementTierAG] [int] NOT NULL,
	[PlacementTierRent] [int] NOT NULL,
	[ContractLoyaltyPoints] [int] NOT NULL,
	[InternetProductPoints] [int] NOT NULL,
	[LegacyLoyaltyPoints] [int] NOT NULL,
	[MobilePoints] [int] NOT NULL,
	[PrintProductPoints] [int] NOT NULL,
	[Ranking] [varchar](1) NOT NULL,
	[RPLRank] [numeric](8, 2) NOT NULL,
	[BadgeCollege] [tinyint] NOT NULL,
	[BadgeCorporate] [tinyint] NOT NULL,
	[BadgeIncomeRestricted] [tinyint] NOT NULL,
	[BadgeLuxury] [tinyint] NOT NULL,
	[BadgeMilitary] [tinyint] NOT NULL,
	[BadgePetFriendly] [tinyint] NOT NULL,
	[BadgeSenior] [tinyint] NOT NULL,
	[Upsell3DFloorplan] [tinyint] NOT NULL,
	[UpsellAGSites] [tinyint] NOT NULL,
	[UpsellAGSitesCustomURL] [varchar](400) NOT NULL,
	[UpsellCarousel] [tinyint] NOT NULL,
	[UpsellCarouselRentals] [tinyint] NOT NULL,
	[UpsellCommunityVideoURLFulfilled] [tinyint] NOT NULL,
	[UpsellCoupon] [tinyint] NOT NULL,
	[UpsellDiamondCity] [tinyint] NOT NULL,
	[UpsellDiamondMax] [tinyint] NOT NULL,
	[UpsellDiamondMetro] [tinyint] NOT NULL,
	[UpsellEmercial] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityAG] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityRent] [tinyint] NOT NULL,
	[UpsellFeaturedListingRentals] [tinyint] NOT NULL,
	[UpsellHDActiveFloorplansFulfilled] [tinyint] NOT NULL,
	[UpsellHDActivePhotosFulfilled] [tinyint] NOT NULL,
	[UpsellHDPanoTour] [tinyint] NOT NULL,
	[UpsellHDPanoTourFulfilled] [tinyint] NOT NULL,
	[UpsellHDPhoto] [tinyint] NOT NULL,
	[UpsellHDVideo] [tinyint] NOT NULL,
	[UpsellHDVideoFulfilled] [tinyint] NOT NULL,
	[UpsellHighlighted] [tinyint] NOT NULL,
	[UpsellLinked3DFloorplan] [int] NOT NULL,
	[UpsellLinked3DFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedFloorplan] [int] NOT NULL,
	[UpsellLinkedFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedLowResFloorplan] [int] NOT NULL,
	[UpsellLinkedLowResFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedHDFloorplan] [int] NOT NULL,
	[UpsellLinkedHDFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedRoomPlanner] [int] NOT NULL,
	[UpsellLinkedRoomPlannerFulfilled] [tinyint] NOT NULL,
	[UpsellListingRent] [tinyint] NOT NULL,
	[UpsellListingRentals] [tinyint] NOT NULL,
	[UpsellMediaCenter] [tinyint] NOT NULL,
	[UpsellMgmtPeelAd] [tinyint] NOT NULL,
	[UpsellMobileDeal] [tinyint] NOT NULL,
	[UpsellMobileDealFulfilled] [tinyint] NOT NULL,
	[UpsellMobileDiamond] [tinyint] NOT NULL,
	[UpsellMobileSpotlight] [tinyint] NOT NULL,
	[UpsellNoVacancyRent] [tinyint] NOT NULL,
	[UpsellPayPerLead] [tinyint] NOT NULL,
	[UpsellPayPerLease] [tinyint] NOT NULL,
	[UpsellPayPerLeaseALM] [tinyint] NOT NULL,
	[UpsellPhotoUpgrade] [tinyint] NOT NULL,
	[UpsellPrecisionTargetedEmailRent] [tinyint] NOT NULL,
	[UpsellPremierListingRentals] [tinyint] NOT NULL,
	[UpsellPremiumUpgrade] [tinyint] NOT NULL,
	[UpsellRewardCardRent] [tinyint] NOT NULL,
	[UpsellSponsoredApartment] [tinyint] NOT NULL,
	[UpsellSpotlightAG] [tinyint] NOT NULL,
	[UpsellSpotlightRent] [tinyint] NOT NULL,
	[UpsellSpotlightRentals] [tinyint] NOT NULL,
	[UpsellStandardListingRentals] [tinyint] NOT NULL,
	[UpsellStandardPlusListingRentals] [tinyint] NOT NULL,
	[UpsellSubscriptionModelRent] [tinyint] NOT NULL,
	[UpsellVideoSpokesmodel] [tinyint] NOT NULL,
	[UpsellVIPPlacementRent] [tinyint] NOT NULL,
	[UpsellVirtualBrochure] [tinyint] NOT NULL,
	[UpsellVirtualTourFulfilled] [tinyint] NOT NULL,
	[UpsellFuture2] [tinyint] NOT NULL,
	[UpsellFuture3] [tinyint] NOT NULL,
	[UpsellFuture4] [tinyint] NOT NULL,
	[UpsellFuture5] [tinyint] NOT NULL,
	[UpsellFuture6] [tinyint] NOT NULL,
	[UpsellFuture7] [tinyint] NOT NULL,
	[UpsellFuture8] [tinyint] NOT NULL,
	[UpsellFuture9] [tinyint] NOT NULL,
	[GeoPoint] [geography] NULL,
	[LastUpdateYMDID] [int] NOT NULL,
 CONSTRAINT [PK_ListingIDs] PRIMARY KEY CLUSTERED 
(
	[ListingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [Dimension].[LocatorListings]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Dimension].[LocatorListings](
	[YMDID] [int] NOT NULL,
	[ListingID] [int] NULL,
	[StatusID] [tinyint] NULL,
	[StatusIDAG] [tinyint] NULL,
	[StatusIDRent] [tinyint] NULL,
	[StatusIDRentalHouses] [tinyint] NULL,
	[StatusIDRentals] [tinyint] NULL,
	[DataSource] [varchar](25) NULL,
	[PropertyName] [varchar](100) NULL,
	[Address] [varchar](200) NULL,
	[City] [varchar](50) NULL,
	[State] [varchar](20) NULL,
	[Zip] [varchar](10) NULL,
	[Latitude] [decimal](10, 4) NULL,
	[Longitude] [decimal](10, 4) NULL,
	[MarketCD] [varchar](20) NULL,
	[MarketName] [varchar](50) NULL,
	[Phone] [varchar](20) NULL,
	[Email] [varchar](200) NULL,
	[PriceLow] [int] NULL,
	[PriceHigh] [int] NULL,
	[MinBedrooms] [int] NULL,
	[MaxBedrooms] [int] NULL,
	[ShowOfficeHours] [int] NULL,
	[ActivePhotos] [int] NULL,
	[ActiveFloorPlans] [int] NULL,
	[ActiveAmenities] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Dimension].[MonthlyAxioComps]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Dimension].[MonthlyAxioComps](
	[External_Id__c] [varchar](50) NULL,
	[ID] [varchar](50) NULL,
	[Axio_Comps] [varchar](50) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Dimension].[SmallPropertyListings]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Dimension].[SmallPropertyListings](
	[YMDID] [int] NOT NULL,
	[DisplayListingID] [varchar](30) NOT NULL,
	[ListingID] [int] NOT NULL,
	[PropertyIDAG] [int] NOT NULL,
	[PropertyIDRent] [int] NOT NULL,
	[StatusIDAG] [int] NOT NULL,
	[StatusIDRent] [int] NOT NULL,
	[IsRentals] [tinyint] NOT NULL,
	[IsRentalHouses] [tinyint] NOT NULL,
	[IsLovely] [tinyint] NOT NULL,
	[IsRentSmallProp] [tinyint] NOT NULL,
	[PropertyName] [varchar](100) NOT NULL,
	[PropertyAddress] [varchar](100) NOT NULL,
	[PropertyCity] [varchar](40) NOT NULL,
	[PropertyState] [varchar](2) NOT NULL,
	[ZipCode] [varchar](10) NOT NULL,
	[CBSACode] [varchar](50) NOT NULL,
	[CBSAName] [varchar](200) NOT NULL,
	[GeoLat] [decimal](10, 4) NULL,
	[GeoLong] [decimal](10, 4) NULL,
	[GeogPoint] [geography] NULL,
	[MgtCoID] [varchar](30) NOT NULL,
	[MgtCoName] [varchar](80) NOT NULL,
	[ShowPricing] [tinyint] NULL,
	[LowPrice] [int] NOT NULL,
	[HighPrice] [int] NOT NULL,
	[WebTollFree] [varchar](20) NOT NULL,
	[MobileTollFree] [varchar](20) NOT NULL,
	[ActiveAmenities] [int] NOT NULL,
	[ActiveFloorPlans] [int] NOT NULL,
	[ActivePhotos] [int] NOT NULL,
	[PropertyTotalUnits] [int] NOT NULL,
	[LastUpdateYMDID] [int] NOT NULL,
	[DateModified] [datetime] NOT NULL,
 CONSTRAINT [PK__SmallProperty_ListingID_isLovely_IsRent_IsRentals_IsRentalHouses] PRIMARY KEY CLUSTERED 
(
	[ListingID] ASC,
	[IsLovely] ASC,
	[IsRentals] ASC,
	[IsRentSmallProp] ASC,
	[IsRentalHouses] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [Dimension].[Website_Domains_Visited]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Dimension].[Website_Domains_Visited](
	[id] [int] NOT NULL,
	[uzid] [varchar](300) NULL,
	[domainvisited] [nvarchar](2000) NULL,
	[created_at] [datetime] NULL,
	[updated_at] [datetime] NULL,
 CONSTRAINT [PK_Website_Domains_Visited_On_ID] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [Dimension].[Website_Login_Accounts]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Dimension].[Website_Login_Accounts](
	[id] [int] NOT NULL,
	[email] [varchar](300) NULL,
	[first_name] [varchar](300) NULL,
	[last_name] [varchar](300) NULL,
	[uuid] [varchar](300) NULL,
	[created_at] [datetime] NULL,
	[updated_at] [datetime] NULL,
	[realm] [varchar](300) NULL,
	[source] [varchar](1000) NULL,
 CONSTRAINT [PK_Website_Login_Accounts_On_ID] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [Fact].[CityStateListings]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Fact].[CityStateListings](
	[YMDID] [int] NOT NULL,
	[City] [varchar](100) NULL,
	[State] [varchar](100) NULL,
	[ListingID] [varchar](50) NULL,
	[SortOrder] [int] NULL,
	[Sources] [varchar](50) NULL,
	[Page] [int] NULL,
	[Position] [int] NULL,
	[RecsPerPage] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Index [CIDX_YMDID]    Script Date: 9/5/2017 7:20:04 AM ******/
CREATE CLUSTERED INDEX [CIDX_YMDID] ON [Fact].[CityStateListings]
(
	[YMDID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [Fact].[EmailsLovelySyndication]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Fact].[EmailsLovelySyndication](
	[DisplayListingID] [varchar](30) NOT NULL,
	[ListingID] [int] NOT NULL,
	[YMDID] [int] NOT NULL,
	[WhenEntered] [datetime] NOT NULL,
	[LeadID] [int] NOT NULL,
	[LeadTypeID] [int] NOT NULL,
	[Status] [int] NULL,
	[Email] [varchar](255) NOT NULL,
	[FirstName] [varchar](100) NOT NULL,
	[LastName] [varchar](100) NOT NULL,
	[Address1] [varchar](80) NULL,
	[City] [varchar](40) NULL,
	[State] [varchar](20) NULL,
	[Zip] [varchar](20) NULL,
	[DayPhone] [varchar](30) NULL,
	[MoveMonth] [varchar](15) NULL,
	[Bedrooms] [varchar](50) NULL,
	[Bathrooms] [varchar](3) NULL,
	[Comments] [varchar](2500) NULL,
	[Source] [varchar](25) NULL,
	[PersonalizationID] [varchar](255) NULL,
	[CampaignID] [varchar](20) NULL,
	[EF_ID] [varchar](255) NULL,
	[EV_TRANS_ID] [varchar](255) NULL,
	[SessionID] [varchar](255) NULL,
	[reasonformove] [varchar](255) NULL,
	[pricerange] [varchar](255) NULL,
	[Device] [varchar](255) NULL,
	[PageType] [varchar](255) NULL,
	[Context] [varchar](255) NULL
) ON [PRIMARY]

GO
/****** Object:  Index [cuidx_YMDID]    Script Date: 9/5/2017 7:20:04 AM ******/
CREATE CLUSTERED INDEX [cuidx_YMDID] ON [Fact].[EmailsLovelySyndication]
(
	[YMDID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [Fact].[ExactTarget_PTE]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Fact].[ExactTarget_PTE](
	[ListingID] [int] NOT NULL,
	[PropertyID] [int] NULL,
	[EmailName] [varchar](50) NULL,
	[YMDID] [int] NOT NULL,
	[PTE] [varchar](50) NULL,
	[SendCount] [int] NULL,
	[DeliveredCount] [int] NULL,
	[Opens] [int] NULL,
	[Clicks] [int] NULL,
	[DT_Updated] [datetime] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Fact].[ThirdPartyFeedLeads_deprecate]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Fact].[ThirdPartyFeedLeads_deprecate](
	[ListingID] [numeric](9, 0) NOT NULL,
	[YMDID] [int] NULL,
	[WhenEntered] [datetime] NOT NULL,
	[LeadID] [numeric](20, 0) NULL,
	[LeadTypeID] [numeric](1, 0) NOT NULL,
	[Status] [numeric](1, 0) NULL,
	[Email] [varchar](255) NOT NULL,
	[FirstName] [varchar](40) NOT NULL,
	[LastName] [varchar](40) NOT NULL,
	[Address1] [varchar](80) NULL,
	[Address2] [varchar](80) NULL,
	[City] [varchar](40) NULL,
	[State] [varchar](20) NULL,
	[Zip] [varchar](20) NULL,
	[DayPhone] [varchar](30) NULL,
	[NightPhone] [varchar](30) NULL,
	[FaxNumber] [varchar](30) NULL,
	[MoveMonth] [varchar](15) NULL,
	[Bedrooms] [varchar](50) NULL,
	[Bathrooms] [varchar](3) NULL,
	[Comments] [varchar](1000) NULL,
	[LeaseTerms] [varchar](15) NULL,
	[LeadScore] [numeric](5, 2) NULL,
	[Source] [varchar](25) NULL,
	[PersonalizationID] [varchar](20) NULL,
	[CampaignID] [varchar](20) NULL,
	[EF_ID] [varchar](255) NULL,
	[EV_TRANS_ID] [varchar](255) NULL,
	[SessionID] [varchar](255) NULL,
	[reasonformove] [varchar](255) NULL,
	[pricerange] [varchar](255) NULL,
	[website] [varchar](50) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Fact].[ZutronParsedData]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Fact].[ZutronParsedData](
	[ParseID] [bigint] NOT NULL,
	[ProfileID] [int] NOT NULL,
	[YMDID] [int] NOT NULL,
	[EventDate] [datetime] NOT NULL,
	[MeasureType] [varchar](50) NOT NULL,
	[Measure] [varchar](7000) NOT NULL,
	[SubProfileID] [tinyint] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Index [cuidx_ZutronParsedData_YMDID]    Script Date: 9/5/2017 7:20:04 AM ******/
CREATE CLUSTERED INDEX [cuidx_ZutronParsedData_YMDID] ON [Fact].[ZutronParsedData]
(
	[YMDID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [Mart].[adobe_efid]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Mart].[adobe_efid](
	[Adobe_EFID_ID] [int] IDENTITY(1,1) NOT NULL,
	[YMDID] [int] NOT NULL,
	[Device] [varchar](7) NULL,
	[EF_ID] [varchar](7000) NOT NULL,
	[TransactionID] [varchar](50) NULL,
	[ListingID] [varchar](64) NULL,
	[CampaignKey] [int] NOT NULL,
	[EntryCampaignKey] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[Adobe_EFID_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [Mart].[DiakritInvoices]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Mart].[DiakritInvoices](
	[YMDID] [int] NOT NULL,
	[OrderType] [varchar](25) NOT NULL,
	[OrderID] [float] NOT NULL,
	[IntegrationNumber] [float] NULL,
	[OrderDate] [datetime] NULL,
	[DeliveryDate] [datetime] NULL,
	[ApartmentNumber] [float] NULL,
	[OrderName] [nvarchar](255) NULL,
	[Ordered] [float] NULL,
	[AdditionalFlCharged] [float] NULL,
	[Charged] [float] NULL,
	[PricePerUnitUSD] [float] NULL,
	[AmountUSD] [float] NULL,
	[CorrectionRounds] [float] NULL,
	[TemplateChanges] [float] NULL,
 CONSTRAINT [PK_MART_DIAKRITINVOICES] PRIMARY KEY CLUSTERED 
(
	[YMDID] ASC,
	[OrderType] ASC,
	[OrderID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [Mart].[EmailLeads]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Mart].[EmailLeads](
	[Website] [varchar](4) NULL,
	[FeedLead] [int] NOT NULL,
	[RentPropertyID] [int] NULL,
	[ListingID] [int] NOT NULL,
	[YMDID] [int] NULL,
	[WhenEntered] [datetime2](3) NOT NULL,
	[LeadID] [decimal](20, 0) NULL,
	[LeadTypeID] [decimal](1, 0) NOT NULL,
	[Status] [decimal](1, 0) NULL,
	[Email] [varchar](255) NOT NULL,
	[FirstName] [varchar](80) NOT NULL,
	[LastName] [varchar](80) NOT NULL,
	[Address1] [varchar](80) NULL,
	[Address2] [varchar](80) NULL,
	[City] [varchar](40) NULL,
	[State] [varchar](20) NULL,
	[Zip] [varchar](20) NULL,
	[DayPhone] [varchar](30) NULL,
	[NightPhone] [varchar](30) NULL,
	[FaxNumber] [varchar](30) NULL,
	[MoveMonth] [varchar](15) NULL,
	[Bedrooms] [varchar](50) NULL,
	[Bathrooms] [varchar](3) NULL,
	[Comments] [varchar](1000) NULL,
	[LeaseTerms] [varchar](15) NULL,
	[LeadScore] [decimal](5, 2) NULL,
	[Source] [varchar](25) NULL,
	[PersonalizationID] [varchar](255) NULL,
	[CampaignID] [varchar](20) NULL,
	[EF_ID] [varchar](255) NULL,
	[EV_TRANS_ID] [varchar](255) NULL,
	[SessionID] [varchar](255) NULL,
	[reasonformove] [varchar](255) NULL,
	[pricerange] [varchar](255) NULL,
	[BusinessModel] [varchar](15) NULL,
	[CompanyID] [int] NULL,
	[UpdateYMDID] [int] NOT NULL,
	[Device] [varchar](50) NULL,
	[PageType] [varchar](50) NULL,
	[Context] [varchar](50) NULL,
	[Endeca_ID] [varchar](50) NULL,
	[UnitLayout_ID] [int] NULL,
	[uzid] [varchar](255) NULL,
	[sortorder] [varchar](255) NULL,
	[refinements] [varchar](1000) NULL,
	[tvisit] [varchar](255) NULL
) ON [PRIMARY]

GO
/****** Object:  Index [cuidx_YMDID]    Script Date: 9/5/2017 7:20:04 AM ******/
CREATE CLUSTERED INDEX [cuidx_YMDID] ON [Mart].[EmailLeads]
(
	[YMDID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [Mart].[exportVListings]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Mart].[exportVListings](
	[LISTINGID] [int] NOT NULL,
	[YMDID] [int] NOT NULL,
	[Year] [int] NULL,
	[Quarter] [tinyint] NULL,
	[MonthNum] [tinyint] NULL,
	[MonthName] [nvarchar](10) NULL,
	[CalendarMonthDesc] [nvarchar](20) NULL,
	[YearMonth] [int] NULL,
	[WeekOfYear] [tinyint] NULL,
	[DayOfWeek] [tinyint] NULL,
	[WeekStartingDate] [date] NULL,
	[WeekEndingDate] [date] NULL,
	[LastMonthStartDate] [datetime] NULL,
	[MonthEndDate] [datetime] NULL,
	[ActiveonAG] [tinyint] NOT NULL,
	[ActiveonRent] [tinyint] NOT NULL,
	[PropertyName] [nvarchar](100) NOT NULL,
	[PropertyAddress] [nvarchar](40) NOT NULL,
	[PropertyCity] [nvarchar](40) NOT NULL,
	[PropertyState] [nvarchar](2) NOT NULL,
	[PropertyZipCode] [nvarchar](10) NOT NULL,
	[CBSACode] [nvarchar](50) NOT NULL,
	[CBSAName] [nvarchar](200) NOT NULL,
	[GeoLat] [decimal](10, 4) NOT NULL,
	[GeoLong] [decimal](10, 4) NOT NULL,
	[MarketCode] [nvarchar](20) NOT NULL,
	[MarketName] [nvarchar](50) NOT NULL,
	[ManagementCompanyID] [int] NULL,
	[ManagementCompany] [nvarchar](80) NULL,
	[PackageName] [nvarchar](255) NULL,
	[PackageSpend] [decimal](18, 2) NULL,
	[SFDCMarket] [nvarchar](255) NULL,
	[SFDCDistrict] [nvarchar](255) NULL,
	[SFDCRegion] [nvarchar](255) NULL,
	[SFDCTerritory] [nvarchar](255) NULL,
	[ActiveAmenities] [int] NOT NULL,
	[ActiveCoupon] [tinyint] NOT NULL,
	[ActiveFloorplans] [int] NOT NULL,
	[ActiveHDFloorplans] [int] NOT NULL,
	[ActiveHDPhotos] [int] NOT NULL,
	[ActiveLowResFloorplans] [int] NOT NULL,
	[ActiveLowResPhotos] [int] NOT NULL,
	[ActivePhotos] [int] NOT NULL,
	[WebCouponStartDate] [datetime] NULL,
	[WebCouponExpirationDate] [datetime] NULL,
	[WebCouponText] [nvarchar](258) NULL,
	[MobileCouponStartDate] [datetime] NULL,
	[MobileCouponExpirationDate] [datetime] NULL,
	[MobileCouponText] [nvarchar](258) NULL,
	[SRPImpressionsAG] [int] NOT NULL,
	[SRPImpressionsRent] [int] NOT NULL,
	[SRPImpressions] [int] NULL,
	[SRPUniqueVisitsAG] [int] NOT NULL,
	[SRPUniqueVistsRent] [int] NOT NULL,
	[SearchResultsUniqueVisits] [int] NULL,
	[WebPageViewsAG] [int] NOT NULL,
	[WebPageViewsRent] [int] NOT NULL,
	[MobilePageViewsAG] [int] NOT NULL,
	[PageViewsAGSites] [int] NOT NULL,
	[PageViews] [int] NULL,
	[ConnectedCalls] [int] NULL,
	[ConnectedCallsAG] [int] NULL,
	[ConnectedCallsRent] [int] NULL,
	[DesktopConnectedCalls] [int] NULL,
	[DesktopConnectedCallsAG] [int] NULL,
	[DesktopConnectedCallsRent] [int] NULL,
	[MobileConnectedCalls] [int] NULL,
	[MobileConnectedCallsAG] [int] NULL,
	[MobileConnectedCallsRent] [int] NULL,
	[MissedCalls] [int] NULL,
	[MissedCallsAG] [int] NULL,
	[MissedCallsRent] [int] NULL,
	[DesktopMissedCalls] [int] NULL,
	[DesktopMissedCallsAG] [int] NULL,
	[DesktopMissedCallsRent] [int] NULL,
	[MobileMissedCalls] [int] NULL,
	[MobileMissedCallsAG] [int] NULL,
	[MobileMissedCallsRent] [int] NULL,
	[PhoneLeads] [int] NULL,
	[PhoneLeadsAG] [int] NULL,
	[PhoneLeadsRent] [int] NULL,
	[DesktopPhoneLeads] [int] NULL,
	[DesktopPhoneLeadsAG] [int] NULL,
	[DesktopPhoneLeadsRent] [int] NULL,
	[MobilePhoneLeads] [int] NULL,
	[MobilePhoneLeadsAG] [int] NULL,
	[MobilePhoneLeadsRent] [int] NULL,
	[EmailLeads] [int] NULL,
	[EmailLeadsAG] [int] NULL,
	[EmailLeadsRent] [int] NULL,
	[DesktopEmailLeads] [int] NULL,
	[DesktopEmailLeadsAG] [int] NULL,
	[DesktopEmailLeadsRent] [int] NULL,
	[MobileEmailLeads] [int] NULL,
	[MobileEmailLeadsAG] [int] NULL,
	[MobileEmailLeadsRent] [int] NULL,
	[AllLeads] [int] NULL,
	[MapClicksAG] [int] NOT NULL,
	[MapClicksRent] [int] NOT NULL,
	[MapClicks] [int] NULL,
	[MgtCoURLClicksAG] [int] NOT NULL,
	[MgtCoURLClicksRent] [int] NOT NULL,
	[PropertyURLClicksAG] [int] NOT NULL,
	[PropertyURLClicksRent] [int] NOT NULL,
	[PropertyURLClicks] [int] NULL,
	[ClicksLeadSubmissionAG] [int] NOT NULL,
	[ClicksLeadSubmissionRent] [int] NOT NULL,
	[ClicksSRPListingCheckAvailAG] [int] NOT NULL,
	[ClicksSRPListingCheckAvailRent] [int] NOT NULL,
	[ClicksSRPListingCheckAvail] [int] NULL,
	[ClicksPhotos] [int] NULL,
	[ClicksPhotosAG] [int] NOT NULL,
	[ClicksPhotosRent] [int] NOT NULL,
	[SRPCityCount] [int] NULL,
	[CRPStateCount] [int] NULL,
	[AverageAGPage] [int] NULL,
	[AverageAGPosition] [int] NULL,
	[AverageAGMobilePage] [int] NULL,
	[AverageAGMobilePosition] [int] NULL,
	[AverageRentPage] [int] NULL,
	[AverageRentPosition] [int] NULL,
	[NumReviews] [int] NULL,
	[HasCR3] [tinyint] NOT NULL,
	[CR3AvgOverallRatingAG] [numeric](16, 1) NOT NULL,
	[CR3AvgOverallRatingRent] [numeric](16, 1) NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Index [CIX_MARTEXPORTVLISTINGS_LISTINGIDYMDID]    Script Date: 9/5/2017 7:20:04 AM ******/
CREATE CLUSTERED INDEX [CIX_MARTEXPORTVLISTINGS_LISTINGIDYMDID] ON [Mart].[exportVListings]
(
	[YMDID] ASC,
	[LISTINGID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [Mart].[Listings_Legacy]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Mart].[Listings_Legacy](
	[YMDID] [int] NOT NULL,
	[YearMonth] [int] NOT NULL,
	[ListingID] [int] NOT NULL,
	[PropertyIDAG] [int] NULL,
	[StatusIDAG] [tinyint] NOT NULL,
	[PropertyIDRent] [int] NULL,
	[StatusIDRent] [tinyint] NOT NULL,
	[ListingType] [varchar](25) NULL,
	[IsSEM] [int] NOT NULL,
	[ShowPricing] [int] NOT NULL,
	[LowPrice] [int] NULL,
	[HighPrice] [int] NULL,
	[CallRecordingOptOut] [tinyint] NOT NULL,
	[TotalAmenities] [int] NULL,
	[ActiveAmenities] [int] NULL,
	[ActiveCoupon] [tinyint] NULL,
	[ActiveFloorplans] [int] NULL,
	[ActiveHDFloorplans] [int] NULL,
	[ActiveHDPhotos] [int] NULL,
	[ActivePhotos] [int] NULL,
	[ExternalID] [varchar](50) NULL,
	[ListingPricingSource] [varchar](8) NULL,
	[Charter] [tinyint] NOT NULL,
	[DIRECTV] [tinyint] NOT NULL,
	[HasCR3] [tinyint] NOT NULL,
	[CR3AvgOverallRatingAG] [numeric](16, 1) NULL,
	[CR3AvgOverallRatingRent] [numeric](16, 1) NULL,
	[ShowOfficeHours] [int] NOT NULL,
	[PlacementTierAG] [int] NULL,
	[PlacementTierRent] [int] NULL,
	[ContractLoyaltyPoints] [int] NULL,
	[InternetProductPoints] [int] NULL,
	[LegacyLoyaltyPoints] [int] NULL,
	[MobilePoints] [int] NULL,
	[PrintProductPoints] [int] NULL,
	[Ranking] [varchar](1) NULL,
	[RPLRank] [numeric](8, 2) NULL,
	[BadgeCollege] [tinyint] NULL,
	[BadgeCorporate] [tinyint] NULL,
	[BadgeIncomeRestricted] [tinyint] NULL,
	[BadgeLuxury] [tinyint] NULL,
	[BadgeMilitary] [tinyint] NULL,
	[BadgePetFriendly] [tinyint] NULL,
	[BadgeSenior] [tinyint] NULL,
	[Upsell3DFloorplan] [tinyint] NOT NULL,
	[UpsellAGSites] [tinyint] NOT NULL,
	[UpsellCarousel] [tinyint] NULL,
	[UpsellCarouselRentals] [tinyint] NULL,
	[UpsellCommunityVideoURLFulfilled] [tinyint] NULL,
	[UpsellCoupon] [tinyint] NULL,
	[UpsellDiamondCity] [tinyint] NULL,
	[UpsellDiamondMax] [tinyint] NULL,
	[UpsellDiamondMetro] [tinyint] NULL,
	[UpsellEmercial] [tinyint] NULL,
	[UpsellFeaturedCommunityAG] [tinyint] NULL,
	[UpsellFeaturedCommunityRent] [tinyint] NULL,
	[UpsellFeaturedListingRentals] [tinyint] NULL,
	[UpsellHDActiveFloorplansFulfilled] [tinyint] NULL,
	[UpsellHDActivePhotosFulfilled] [tinyint] NULL,
	[UpsellHDPanoTour] [tinyint] NOT NULL,
	[UpsellHDPanoTourFulfilled] [tinyint] NULL,
	[UpsellHDPhoto] [tinyint] NOT NULL,
	[UpsellHDVideo] [tinyint] NOT NULL,
	[UpsellHDVideoFulfilled] [tinyint] NULL,
	[UpsellHighlighted] [tinyint] NULL,
	[UpsellLinked3DFloorplan] [int] NOT NULL,
	[UpsellLinked3DFloorplanFulfilled] [tinyint] NULL,
	[UpsellLinkedFloorplan] [int] NOT NULL,
	[UpsellLinkedFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedRoomPlanner] [int] NOT NULL,
	[UpsellLinkedRoomPlannerFulfilled] [tinyint] NOT NULL,
	[UpsellListingRent] [tinyint] NOT NULL,
	[UpsellListingRentals] [tinyint] NOT NULL,
	[UpsellMediaCenter] [tinyint] NOT NULL,
	[UpsellMgmtPeelAd] [tinyint] NOT NULL,
	[UpsellMobileDeal] [tinyint] NOT NULL,
	[UpsellMobileDealFulfilled] [tinyint] NOT NULL,
	[UpsellMobileDiamond] [tinyint] NOT NULL,
	[UpsellMobileSpotlight] [tinyint] NOT NULL,
	[UpsellNoVacancyRent] [tinyint] NOT NULL,
	[UpsellPayPerLead] [tinyint] NOT NULL,
	[UpsellPayPerLease] [tinyint] NOT NULL,
	[UpsellPhotoUpgrade] [tinyint] NOT NULL,
	[UpsellPrecisionTargetedEmailRent] [tinyint] NOT NULL,
	[UpsellPremierListingRentals] [tinyint] NOT NULL,
	[UpsellPremiumUpgrade] [tinyint] NOT NULL,
	[UpsellRewardCardRent] [tinyint] NOT NULL,
	[UpsellSponsoredApartment] [tinyint] NOT NULL,
	[UpsellSpotlightAG] [tinyint] NOT NULL,
	[UpsellSpotlightRent] [tinyint] NOT NULL,
	[UpsellSpotlightRentals] [tinyint] NOT NULL,
	[UpsellStandardListingRentals] [tinyint] NOT NULL,
	[UpsellStandardPlusListingRentals] [tinyint] NOT NULL,
	[UpsellSubscriptionModelRent] [tinyint] NOT NULL,
	[UpsellVideoSpokesmodel] [tinyint] NOT NULL,
	[UpsellVIPPlacementRent] [tinyint] NOT NULL,
	[UpsellVirtualBrochure] [tinyint] NOT NULL,
	[UpsellVirtualTourFulfilled] [tinyint] NOT NULL,
	[UpsellPayPerLeaseALM] [tinyint] NOT NULL,
	[UpsellFuture2] [tinyint] NOT NULL,
	[UpsellFuture3] [tinyint] NOT NULL,
	[UpsellFuture4] [tinyint] NOT NULL,
	[UpsellFuture5] [tinyint] NOT NULL,
	[UpsellFuture6] [tinyint] NOT NULL,
	[UpsellFuture7] [tinyint] NOT NULL,
	[UpsellFuture8] [tinyint] NOT NULL,
	[UpsellFuture9] [tinyint] NOT NULL,
	[ClicksCommunityVideoAG] [int] NOT NULL,
	[ClicksDiamondMaxPhotoAG] [int] NOT NULL,
	[ClicksDiamondMaxCheckAvailAG] [int] NOT NULL,
	[ClicksFloorplanAG] [int] NOT NULL,
	[ClicksFloorplanRent] [int] NOT NULL,
	[ClicksHDFloorplanAG] [int] NOT NULL,
	[ClicksHDFloorplanRent] [int] NOT NULL,
	[ClicksPhotosAG] [int] NOT NULL,
	[ClicksPhotosRent] [int] NOT NULL,
	[ClicksHDPhotoAG] [int] NOT NULL,
	[ClicksHDPhotoRent] [int] NOT NULL,
	[ClicksHDVideoAG] [int] NOT NULL,
	[ClicksHDVideoRent] [int] NOT NULL,
	[ClicksHDPanoTourAG] [int] NOT NULL,
	[ClicksHDPanoTourRent] [int] NOT NULL,
	[ClicksMapAG] [int] NOT NULL,
	[ClicksMapRent] [int] NOT NULL,
	[ClicksWebURLAG] [int] NOT NULL,
	[ClicksWebURLRent] [int] NOT NULL,
	[ClicksMgtCoURLAG] [int] NOT NULL,
	[ClicksMgtCoURLRent] [int] NOT NULL,
	[ClicksMgtCoPeelAdAG] [int] NOT NULL,
	[ClicksMgtCoPeelAdRent] [int] NOT NULL,
	[ClicksReserveNowAG] [int] NOT NULL,
	[ClicksReserveNowRent] [int] NOT NULL,
	[ClicksFeaturedCommunityAG] [int] NOT NULL,
	[ClicksFeaturedCommunityRent] [int] NOT NULL,
	[ClicksFeatCommCheckAvailAG] [int] NOT NULL,
	[ClicksFeatCommCheckAvailRent] [int] NOT NULL,
	[ClicksSRPListingCheckAvailAG] [int] NOT NULL,
	[ClicksSRPListingCheckAvailRent] [int] NOT NULL,
	[ClicksCR3AG] [int] NOT NULL,
	[ClicksCR3Rent] [int] NOT NULL,
	[ClicksSpotlightRentSpecialsAG] [int] NOT NULL,
	[ClicksSpotlightRentSpecialsRent] [int] NOT NULL,
	[ClicksSpotlightReserveNowAG] [int] NOT NULL,
	[ClicksFuture1] [int] NOT NULL,
	[ClicksFuture2] [int] NOT NULL,
	[ClicksFuture3] [int] NOT NULL,
	[ClicksFuture4] [int] NOT NULL,
	[ClicksFuture5] [int] NOT NULL,
	[ClicksFuture6] [int] NOT NULL,
	[ClicksFuture7] [int] NOT NULL,
	[ClicksFuture8] [int] NOT NULL,
	[ClicksFuture9] [int] NOT NULL,
	[ClicksFuture10] [int] NOT NULL,
	[ClicksFuture11] [int] NOT NULL,
	[ClicksFuture12] [int] NOT NULL,
	[SRPListingImprAG] [int] NOT NULL,
	[SRPListingImprRent] [int] NOT NULL,
	[SRPUniqueVisitAG] [int] NOT NULL,
	[SRPUniqueVisitRent] [int] NOT NULL,
	[UniqueVisitsAG] [int] NOT NULL,
	[UniqueVisitsRent] [int] NOT NULL,
	[UniqueVisitsMobileAG] [int] NOT NULL,
	[UniqueVisitsMobileRent] [int] NOT NULL,
	[UniqueVisitsAGSites] [int] NOT NULL,
	[ViewsListingPageWebAG] [int] NOT NULL,
	[ViewsListingPageWebRent] [int] NOT NULL,
	[ViewsListingPageMobileAG] [int] NOT NULL,
	[ViewsListingPageMobileRent] [int] NOT NULL,
	[ViewsListingPageAGSites] [int] NOT NULL,
	[PhoneLeadsAG] [int] NOT NULL,
	[PhoneLeadsRent] [int] NOT NULL,
	[MissedCallsAG] [int] NOT NULL,
	[MissedCallsRent] [int] NOT NULL,
	[EmailLeadsAG] [int] NOT NULL,
	[EmailLeadsRent] [int] NOT NULL,
	[ClicksDiamondMaxPhoto]  AS ([ClicksDiamondMaxPhotoAG]+(0)),
	[ClicksDiamondMaxCheckAvail]  AS ([ClicksDiamondMaxCheckAvailAG]+(0)),
	[ClicksFloorplan]  AS ([ClicksFloorplanAG]+[ClicksFloorplanRent]),
	[ClicksHDFloorplan]  AS ([ClicksHDFloorplanAG]+[ClicksHDFloorplanRent]),
	[ClicksPhotos]  AS ([ClicksPhotosAG]+[ClicksPhotosRent]),
	[ClicksHDPhoto]  AS ([ClicksHDPhotoAG]+[ClicksHDPhotoRent]),
	[ClicksHDVideo]  AS ([ClicksHDVideoAG]+[ClicksHDVideoRent]),
	[ClicksHDPanoTour]  AS ([ClicksHDPanoTourAG]+[ClicksHDPanoTourRent]),
	[ClicksMap]  AS ([ClicksMapAG]+[ClicksMapRent]),
	[ClicksWebURL]  AS ([ClicksWebURLAG]+[ClicksWebURLRent]),
	[ClicksMgtCoPeelAd]  AS ([ClicksMgtCoPeelAdAG]+[ClicksMgtCoPeelAdRent]),
	[ClicksReserveNow]  AS ([ClicksReserveNowAG]+[ClicksReserveNowRent]),
	[ClicksFeaturedCommunity]  AS ([ClicksFeaturedCommunityAG]+[ClicksFeaturedCommunityRent]),
	[ClicksFeatCommCheckAvail]  AS ([ClicksFeatCommCheckAvailAG]+[ClicksFeatCommCheckAvailRent]),
	[ClicksSRPListingCheckAvail]  AS ([ClicksSRPListingCheckAvailAG]+[ClicksSRPListingCheckAvailRent]),
	[ClicksCR3]  AS ([ClicksCR3AG]+[ClicksCR3Rent]),
	[ClicksSpotlightRentSpecials]  AS ([ClicksSpotlightRentSpecialsAG]+[ClicksSpotlightRentSpecialsRent]),
	[ClicksSpotlightReserveNow]  AS ([ClicksSpotlightReserveNowAG]+(0)),
	[SRPListingImpr]  AS ([SRPListingImprAG]+[SRPListingImprRent]),
	[SRPUniqueVisit]  AS ([SRPUniqueVisitAG]+[SRPUniqueVisitRent]),
	[UniqueVisits]  AS ([UniqueVisitsAG]+[UniqueVisitsRent]),
	[UniqueVisitsMobile]  AS ([UniqueVisitsMobileAG]+[UniqueVisitsMobileRent]),
	[UniqueVisitsSites]  AS ([UniqueVisitsAGSites]+(0)),
	[ViewsListingPageWeb]  AS ([ViewsListingPageWebAG]+[ViewsListingPageWebRent]),
	[ViewsListingPageMobile]  AS ([ViewsListingPageMobileAG]+[ViewsListingPageMobileRent]),
	[ViewsListingPageSites]  AS ([ViewsListingPageAGSites]+(0)),
	[PhoneLeads]  AS ([PhoneLeadsAG]+[PhoneLeadsRent]),
	[EmailLeads]  AS ([EmailLeadsAG]+[EmailLeadsRent]),
	[AllLeads]  AS ((([PhoneLeadsAG]+[PhoneLeadsRent])+[EmailLeadsAG])+[EmailLeadsRent])
) ON [PRIMARY]

GO
/****** Object:  Index [cuidx_Legacy_YMDID_ListingID]    Script Date: 9/5/2017 7:20:04 AM ******/
CREATE UNIQUE CLUSTERED INDEX [cuidx_Legacy_YMDID_ListingID] ON [Mart].[Listings_Legacy]
(
	[YMDID] ASC,
	[ListingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [Mart].[Listings_OLD_20170208]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Mart].[Listings_OLD_20170208](
	[YMDID] [int] NOT NULL,
	[YearMonth] [int] NOT NULL,
	[ListingID] [int] NOT NULL,
	[ListingDescriptionLength] [int] NOT NULL,
	[ListingTypeID] [int] NOT NULL,
	[ListingTypeShort] [varchar](5) NOT NULL,
	[PropertyIDAG] [int] NOT NULL,
	[StatusIDAG] [tinyint] NOT NULL,
	[PropertyIDRent] [int] NOT NULL,
	[StatusIDRent] [tinyint] NOT NULL,
	[ListingType] [varchar](25) NOT NULL,
	[IsSEM] [tinyint] NOT NULL,
	[ShowPricing] [tinyint] NOT NULL,
	[LowPrice] [int] NOT NULL,
	[HighPrice] [int] NOT NULL,
	[CallRecordingOptOut] [tinyint] NOT NULL,
	[TotalAmenities] [int] NOT NULL,
	[ActiveAmenities] [int] NULL,
	[ActiveCoupon] [tinyint] NOT NULL,
	[ActiveFloorplans] [int] NULL,
	[ActiveHDFloorPlans] [int] NULL,
	[ActiveHDPhotos] [int] NULL,
	[ActivePhotos] [int] NULL,
	[ExternalID] [varchar](50) NOT NULL,
	[HasAvailabilityURL] [tinyint] NULL,
	[ListingPricingSource] [varchar](8) NOT NULL,
	[CallTrackingInBook] [tinyint] NOT NULL,
	[InvoicedLeases] [int] NOT NULL,
	[IsOverThreshold] [tinyint] NOT NULL,
	[IsRentalProp] [tinyint] NOT NULL,
	[LastUpdateYMDID] [int] NOT NULL,
	[LeaseMgtCoID] [int] NOT NULL,
	[RentLeaseMgtCoID] [int] NOT NULL,
	[ATTUverse] [tinyint] NOT NULL,
	[BrightHouse] [tinyint] NOT NULL,
	[Charter] [tinyint] NOT NULL,
	[DIRECTV] [tinyint] NOT NULL,
	[TimeWarner] [tinyint] NOT NULL,
	[VerizonFIOS] [tinyint] NOT NULL,
	[XfinityDP] [tinyint] NOT NULL,
	[XfinitySP] [tinyint] NOT NULL,
	[XfinityTP] [tinyint] NOT NULL,
	[HasCR3] [tinyint] NOT NULL,
	[CR3AvgOverallRatingAG] [decimal](16, 1) NOT NULL,
	[CR3AvgOverallRatingRent] [decimal](16, 1) NOT NULL,
	[ShowOfficeHours] [tinyint] NOT NULL,
	[PlacementTierAG] [int] NOT NULL,
	[PlacementTierRent] [int] NOT NULL,
	[ContractLoyaltyPoints] [int] NOT NULL,
	[InternetProductPoints] [int] NOT NULL,
	[LegacyLoyaltyPoints] [int] NOT NULL,
	[MobilePoints] [int] NOT NULL,
	[PrintProductPoints] [int] NOT NULL,
	[Ranking] [char](1) NOT NULL,
	[NumericRank] [decimal](15, 4) NOT NULL,
	[RPLRANK] [decimal](8, 2) NOT NULL,
	[BadgeCollege] [tinyint] NOT NULL,
	[BadgeCorporate] [tinyint] NOT NULL,
	[BadgeIncomeRestricted] [tinyint] NOT NULL,
	[BadgeLuxury] [tinyint] NOT NULL,
	[BadgeMilitary] [tinyint] NOT NULL,
	[BadgePetFriendly] [tinyint] NOT NULL,
	[BadgeSenior] [tinyint] NOT NULL,
	[BadgeGolf] [tinyint] NULL,
	[BadgeWaterfront] [tinyint] NULL,
	[BadgeFurnished] [tinyint] NULL,
	[DefaultBadge] [varchar](50) NULL,
	[Upsell30SecondVideo] [tinyint] NOT NULL,
	[Upsell3DFloorplan] [tinyint] NOT NULL,
	[Upsell60SecondVideo] [tinyint] NOT NULL,
	[UpsellAdCreator] [tinyint] NOT NULL,
	[UpsellAGMobileSyndication] [tinyint] NOT NULL,
	[UpsellAGSites] [tinyint] NOT NULL,
	[UpsellApartmentListing] [tinyint] NOT NULL,
	[UpsellBillingOnly] [tinyint] NOT NULL,
	[UpsellCallRecording] [tinyint] NOT NULL,
	[UpsellCarousel] [tinyint] NOT NULL,
	[UpsellCarouselRentals] [tinyint] NOT NULL,
	[UpsellCategoryListing] [tinyint] NOT NULL,
	[UpsellCommunityVideo] [tinyint] NOT NULL,
	[UpsellCommunityVideoURLFulfilled] [tinyint] NOT NULL,
	[UpsellCoupon] [tinyint] NOT NULL,
	[UpsellDiamondCity] [tinyint] NOT NULL,
	[UpsellDiamondMax] [tinyint] NOT NULL,
	[UpsellDiamondMetro] [tinyint] NOT NULL,
	[UpsellDynamicLeadForm] [tinyint] NOT NULL,
	[UpsellEmercial] [tinyint] NOT NULL,
	[UpsellEZPay] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityAG] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityGold] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityPlatinum] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityRent] [tinyint] NOT NULL,
	[UpsellFeaturedCommunitySilver] [tinyint] NOT NULL,
	[UpsellFeaturedListingRentals] [tinyint] NOT NULL,
	[UpsellFloorPlanUpgrade] [tinyint] NOT NULL,
	[UpsellFormToPhone] [tinyint] NOT NULL,
	[UpsellFrontPage] [tinyint] NOT NULL,
	[UpsellGoldTier] [tinyint] NOT NULL,
	[UpsellHDActiveFloorplansFulfilled] [tinyint] NOT NULL,
	[UpsellHDActivePhotosFulfilled] [tinyint] NOT NULL,
	[UpsellHDPanoTour] [tinyint] NOT NULL,
	[UpsellHDPanoTourFulfilled] [tinyint] NOT NULL,
	[UpsellHDPhoto] [tinyint] NOT NULL,
	[UpsellHDVideo] [tinyint] NOT NULL,
	[UpsellHDVideoFulfilled] [tinyint] NOT NULL,
	[UpsellHighlighted] [tinyint] NOT NULL,
	[UpsellLeadMail] [tinyint] NOT NULL,
	[UpsellLinked3DFloorplan] [int] NULL,
	[UpsellLinked3DFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedFloorplan] [int] NULL,
	[UpsellLinkedFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedHDFloorplan] [tinyint] NOT NULL,
	[UpsellLinkedHDFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedLowResFloorPlan] [tinyint] NOT NULL,
	[UpsellLinkedLowResFloorPlanFulFilled] [tinyint] NOT NULL,
	[UpsellLinkedRoomPlanner] [int] NULL,
	[UpsellLinkedRoomPlannerFulfilled] [tinyint] NOT NULL,
	[UpsellListingRent] [tinyint] NOT NULL,
	[UpsellListingRentals] [tinyint] NOT NULL,
	[UpsellMediaCenter] [tinyint] NOT NULL,
	[UpsellMediaCenterCoupon] [tinyint] NOT NULL,
	[UpsellMgmtManagementCoLogoDisplay] [tinyint] NOT NULL,
	[UpsellMgmtPeelAd] [tinyint] NOT NULL,
	[UpsellMobileDeal] [tinyint] NOT NULL,
	[UpsellMobileDealFulfilled] [tinyint] NOT NULL,
	[UpsellMobileDiamond] [tinyint] NOT NULL,
	[UpsellMobileSpotlight] [tinyint] NOT NULL,
	[UpsellNoVacancyRent] [tinyint] NOT NULL,
	[UpsellPayPerLead] [tinyint] NOT NULL,
	[UpsellPayPerLease] [tinyint] NOT NULL,
	[UpsellPayPerLeaseALM] [tinyint] NOT NULL,
	[UpsellPhotoPlus] [tinyint] NOT NULL,
	[UpsellPhotoUpgrade] [tinyint] NOT NULL,
	[UpsellPlatinumTier] [tinyint] NOT NULL,
	[UpsellPrecisionTargetedEmailRent] [tinyint] NOT NULL,
	[UpsellPremierListingRentals] [tinyint] NOT NULL,
	[UpsellPremiumUpgrade] [tinyint] NOT NULL,
	[UpsellPropertyLogo] [tinyint] NOT NULL,
	[UpsellRentFeaturedPlacement] [tinyint] NOT NULL,
	[UpsellRentpathConnect] [tinyint] NOT NULL,
	[UpsellRepMon] [tinyint] NOT NULL,
	[UpsellRewardCardRent] [tinyint] NOT NULL,
	[UpsellSocialMediaMan] [tinyint] NOT NULL,
	[UpsellSpanish] [tinyint] NOT NULL,
	[UpsellSponsoredApartment] [tinyint] NOT NULL,
	[UpsellSpotlightAG] [tinyint] NOT NULL,
	[UpsellSpotlightRent] [tinyint] NOT NULL,
	[UpsellSpotlightRentals] [tinyint] NOT NULL,
	[UpsellStandardListingRentals] [tinyint] NOT NULL,
	[UpsellStandardPlusListingRentals] [tinyint] NOT NULL,
	[UpsellSubscriptionModelRent] [tinyint] NOT NULL,
	[UpsellVideoSpokesmodel] [tinyint] NOT NULL,
	[UpsellVIPPlacementRent] [tinyint] NOT NULL,
	[UpsellVirtualBrochure] [tinyint] NOT NULL,
	[UpsellVirtualTourFulfilled] [tinyint] NOT NULL,
	[ClicksCheckYourCredit] [int] NOT NULL,
	[ClicksCommunityVideoAG] [int] NOT NULL,
	[ClicksCR3AG] [int] NOT NULL,
	[ClicksCR3Rent] [int] NOT NULL,
	[ClicksDiamondMaxCheckAvailAG] [int] NOT NULL,
	[ClicksDiamondMaxPhotoAG] [int] NOT NULL,
	[ClicksFeatCommCheckAvailAG] [int] NOT NULL,
	[ClicksFeatCommCheckAvailRent] [int] NOT NULL,
	[ClicksFeaturedCommunityAG] [int] NOT NULL,
	[ClicksFeaturedCommunityRent] [int] NOT NULL,
	[ClicksFeaturedMgtCo] [int] NOT NULL,
	[ClicksFloorplanAG] [int] NOT NULL,
	[ClicksFloorplanRent] [int] NOT NULL,
	[ClicksFrontPagePropLead] [int] NOT NULL,
	[ClicksHDFloorplanAG] [int] NOT NULL,
	[ClicksHDFloorplanRent] [int] NOT NULL,
	[ClicksHDPanoTourAG] [int] NOT NULL,
	[ClicksHDPanoTourRent] [int] NOT NULL,
	[ClicksHDPhotoAG] [int] NOT NULL,
	[ClicksHDPhotoRent] [int] NOT NULL,
	[ClicksHDVideoAG] [int] NOT NULL,
	[ClicksHDVideoRent] [int] NOT NULL,
	[ClicksLeadSubmissionAG] [int] NOT NULL,
	[ClicksLeadSubmissionRent] [int] NOT NULL,
	[ClicksMapAG] [int] NOT NULL,
	[ClicksMapRent] [int] NOT NULL,
	[ClicksMgtCoPeelAdAG] [int] NOT NULL,
	[ClicksMgtCoPeelAdRent] [int] NOT NULL,
	[ClicksMgtCoURLAG] [int] NOT NULL,
	[ClicksMgtCoURLRent] [int] NOT NULL,
	[ClicksPhotosAG] [int] NOT NULL,
	[ClicksPhotosRent] [int] NOT NULL,
	[ClicksReserveNowAG] [int] NOT NULL,
	[ClicksReserveNowRent] [int] NOT NULL,
	[ClicksSpotlightRentSpecialsAG] [int] NOT NULL,
	[ClicksSpotlightRentSpecialsRent] [int] NOT NULL,
	[ClicksSpotlightReserveNowAG] [int] NOT NULL,
	[ClicksSRPListingCheckAvailAG] [int] NOT NULL,
	[ClicksSRPListingCheckAvailRent] [int] NOT NULL,
	[ClicksWebURLAG] [int] NOT NULL,
	[ClicksWebURLRent] [int] NOT NULL,
	[ViewsEmercial] [int] NOT NULL,
	[ViewsListingPage] [int] NOT NULL,
	[ViewsListingPage_Mobile] [int] NOT NULL,
	[ViewsListingPage_Sites] [int] NOT NULL,
	[ViewsListingPageAGSites] [int] NOT NULL,
	[ViewsListingPageMobileAG] [int] NOT NULL,
	[ViewsListingPageMobileRent] [int] NOT NULL,
	[ViewsListingPageWebAG] [int] NOT NULL,
	[ViewsListingPageWebRent] [int] NOT NULL,
	[ViewsVirtualBrochure] [int] NOT NULL,
	[AGCPrintConnectedCalls] [int] NOT NULL,
	[AGCPrintMissedCalls] [int] NOT NULL,
	[ASGPrintConnectedCalls] [int] NOT NULL,
	[ASGPrintMissedCalls] [int] NOT NULL,
	[CombinedFeedsConnectedCalls] [int] NOT NULL,
	[CombinedFeedsMissedCalls] [int] NOT NULL,
	[CraigsListConnectedCalls] [int] NOT NULL,
	[CraigsListMissedCalls] [int] NOT NULL,
	[CTCConnectedCalls] [int] NOT NULL,
	[CTCMissedCalls] [int] NOT NULL,
	[DripConnectedCalls] [int] NOT NULL,
	[DripMissedCalls] [int] NOT NULL,
	[GoogleConnectedCalls] [int] NOT NULL,
	[GoogleMissedCalls] [int] NOT NULL,
	[LeadMailConnectedCalls] [int] NOT NULL,
	[LeadMailMissedCalls] [int] NOT NULL,
	[LuxuryConnectedCalls] [int] NOT NULL,
	[LuxuryMissedCalls] [int] NOT NULL,
	[MarchexConnectedCalls] [int] NOT NULL,
	[MarchexMissedCalls] [int] NOT NULL,
	[MobileSEMConnectedCalls] [int] NOT NULL,
	[MobileSEMMissedCalls] [int] NOT NULL,
	[PaidSPConnectedCalls] [int] NOT NULL,
	[PaidSPMissedCalls] [int] NOT NULL,
	[PPCConnectedCalls] [int] NOT NULL,
	[PPCMissedCalls] [int] NOT NULL,
	[RentConnectedCallsAG] [int] NOT NULL,
	[RentMissedCallsAG] [int] NOT NULL,
	[RentConnectedCallsRent] [int] NOT NULL,
	[RentMissedCallsRent] [int] NOT NULL,
	[RentMobileConnectedCallsAG] [int] NOT NULL,
	[RentMobileMissedCallsAG] [int] NOT NULL,
	[RentMobileConnectedCallsRent] [int] NOT NULL,
	[RentMobileMissedCallsRent] [int] NOT NULL,
	[RentMobileSEMConnectedCalls] [int] NOT NULL,
	[RentMobileSEMMissedCalls] [int] NOT NULL,
	[RentOneWebConnectedCallsAG] [int] NOT NULL,
	[RentOneWebMissedCallsAG] [int] NOT NULL,
	[RentOneWebConnectedCallsRent] [int] NOT NULL,
	[RentOneWebMissedCallsRent] [int] NOT NULL,
	[RentSEMConnectedCalls] [int] NOT NULL,
	[RentSEMMissedCalls] [int] NOT NULL,
	[SEMConnectedCalls] [int] NOT NULL,
	[SEMMissedCalls] [int] NOT NULL,
	[SitesConnectedCalls] [int] NOT NULL,
	[SitesMissedCalls] [int] NOT NULL,
	[SMSConnectedCalls] [int] NOT NULL,
	[SMSMissedCalls] [int] NOT NULL,
	[TruliaConnectedCalls] [int] NOT NULL,
	[TruliaMissedCalls] [int] NOT NULL,
	[VideoConnectedCalls] [int] NOT NULL,
	[VideoMissedCalls] [int] NOT NULL,
	[WebLocalTrackingNumberConnectedCalls] [int] NOT NULL,
	[WebLocalTrackingNumberMissedCalls] [int] NOT NULL,
	[WebConnectedCalls] [int] NOT NULL,
	[WebMissedCalls] [int] NOT NULL,
	[AGEmailLeads] [int] NOT NULL,
	[AGKindleEmailLeads] [int] NOT NULL,
	[AGMobileEmailLeads] [int] NOT NULL,
	[AGTabletEmailLeads] [int] NOT NULL,
	[AIMCOEmailLeads] [int] NOT NULL,
	[AndroidEmailLeadsAG] [int] NOT NULL,
	[AndroidEmailLeadsRent] [int] NOT NULL,
	[CampusHomesOnlineEmailLeads] [int] NOT NULL,
	[CondoEmailLeads] [int] NOT NULL,
	[EREIFeedLeads] [int] NOT NULL,
	[HotpadsEmailLeads] [int] NOT NULL,
	[iPadEmailLeadsAG] [int] NOT NULL,
	[iPadEmailLeadsRent] [int] NOT NULL,
	[iPhoneEmailLeadsAG] [int] NOT NULL,
	[iPhoneEmailLeadsRent] [int] NOT NULL,
	[LovelyEmailLeads] [int] NOT NULL,
	[LuxuryEmailLeads] [int] NOT NULL,
	[MetroEmailLeads] [int] NOT NULL,
	[NeighborhoodEmailLeads] [int] NOT NULL,
	[OodleEmailLeads] [int] NOT NULL,
	[PropSolutionsFeedLeads] [int] NOT NULL,
	[RDTFeedLeadsAG] [int] NOT NULL,
	[RDTFeedLeadsRent] [int] NOT NULL,
	[RentAndroidEmailLeads] [int] NOT NULL,
	[RentEmailLeadsAG] [int] NOT NULL,
	[RentEmailLeadsRent] [int] NOT NULL,
	[RentiPadEmailLeads] [int] NOT NULL,
	[RentiPhoneEmailLeads] [int] NOT NULL,
	[RentRentarEmailLeads] [int] NOT NULL,
	[SitesEmailLeads] [int] NOT NULL,
	[TruliaEmailLeadsAG] [int] NOT NULL,
	[TruliaEmailLeadsRent] [int] NOT NULL,
	[VastEmailLeads] [int] NOT NULL,
	[VerticalBrandsEmailLeads] [int] NOT NULL,
	[YardiRCFeedLeads] [int] NOT NULL,
	[YieldFeedLeads] [int] NOT NULL,
	[ZillowEmailLeads] [int] NOT NULL,
	[RentalHousesEmailLeads] [int] NOT NULL,
	[RentalsAndroidEmailLeads] [int] NOT NULL,
	[RentalsEmailLeads] [int] NOT NULL,
	[RentalsIPhoneEmailLeads] [int] NOT NULL,
	[RentalsMobileEmailLeads] [int] NOT NULL,
	[RentalsLocalConnectedCalls] [int] NOT NULL,
	[RentalsLocalMissedCalls] [int] NOT NULL,
	[RentalsConnectedCalls] [int] NOT NULL,
	[RentalsMissedCalls] [int] NOT NULL,
	[RentAltRegConnectedCallsAG] [int] NOT NULL,
	[RentAltRegMissedCallsAG] [int] NOT NULL,
	[RentAltRegConnectedCallsRent] [int] NOT NULL,
	[RentAltRegMissedCallsRent] [int] NOT NULL,
	[ImprFrontCover] [int] NOT NULL,
	[CheckListingAvail] [int] NOT NULL,
	[SRPListingImprAG] [int] NOT NULL,
	[SRPListingImprRent] [int] NOT NULL,
	[SRPUniqueVisitAG] [int] NOT NULL,
	[SRPUniqueVisitRent] [int] NOT NULL,
	[TextMsgMobile] [int] NOT NULL,
	[TextMsgWeb] [int] NOT NULL,
	[TotalFloorPlans] [int] NOT NULL,
	[TotalPhotos] [int] NOT NULL,
	[UniqueVisitsAG] [int] NOT NULL,
	[UniqueVisitsAGSites] [int] NOT NULL,
	[UniqueVisitsMobileAG] [int] NOT NULL,
	[UniqueVisitsMobileRent] [int] NOT NULL,
	[UniqueVisitsRent] [int] NOT NULL,
	[ClicksDiamondMaxPhoto]  AS ([ClicksDiamondMaxPhotoAG]+(0)),
	[ClicksDiamondMaxCheckAvail]  AS ([ClicksDiamondMaxCheckAvailAG]+(0)),
	[ClicksFloorplan]  AS ([ClicksFloorplanAG]+[ClicksFloorplanRent]),
	[ClicksHDFloorplan]  AS ([ClicksHDFloorplanAG]+[ClicksHDFloorplanRent]),
	[ClicksPhotos]  AS ([ClicksPhotosAG]+[ClicksPhotosRent]),
	[ClicksHDPhoto]  AS ([ClicksHDPhotoAG]+[ClicksHDPhotoRent]),
	[ClicksHDVideo]  AS ([ClicksHDVideoAG]+[ClicksHDVideoRent]),
	[ClicksHDPanoTour]  AS ([ClicksHDPanoTourAG]+[ClicksHDPanoTourRent]),
	[ClicksMap]  AS ([ClicksMapAG]+[ClicksMapRent]),
	[ClicksWebURL]  AS ([ClicksWebURLAG]+[ClicksWebURLRent]),
	[ClicksMgtCoPeelAd]  AS ([ClicksMgtCoPeelAdAG]+[ClicksMgtCoPeelAdRent]),
	[ClicksReserveNow]  AS ([ClicksReserveNowAG]+[ClicksReserveNowRent]),
	[ClicksFeaturedCommunity]  AS ([ClicksFeaturedCommunityAG]+[ClicksFeaturedCommunityRent]),
	[ClicksFeatCommCheckAvail]  AS ([ClicksFeatCommCheckAvailAG]+[ClicksFeatCommCheckAvailRent]),
	[ClicksSRPListingCheckAvail]  AS ([ClicksSRPListingCheckAvailAG]+[ClicksSRPListingCheckAvailRent]),
	[ClicksCR3]  AS ([ClicksCR3AG]+[ClicksCR3Rent]),
	[ClicksSpotlightRentSpecials]  AS ([ClicksSpotlightRentSpecialsAG]+[ClicksSpotlightRentSpecialsRent]),
	[ClicksSpotlightReserveNow]  AS ([ClicksSpotlightReserveNowAG]+(0)),
	[SRPListingImpr]  AS ([SRPListingImprAG]+[SRPListingImprRent]),
	[SRPUniqueVisit]  AS ([SRPUniqueVisitAG]+[SRPUniqueVisitRent]),
	[UniqueVisits]  AS ([UniqueVisitsAG]+[UniqueVisitsRent]),
	[UniqueVisitsMobile]  AS ([UniqueVisitsMobileAG]+[UniqueVisitsMobileRent]),
	[UniqueVisitsSites]  AS ([UniqueVisitsAGSites]+(0)),
	[ViewsListingPageWeb]  AS ([ViewsListingPageWebAG]+[ViewsListingPageWebRent]),
	[ViewsListingPageMobile]  AS ([ViewsListingPageMobileAG]+[ViewsListingPageMobileRent]),
	[ViewsListingPageSites]  AS ([ViewsListingPageAGSites]+(0)),
	[ConnectedCalls]  AS (((((((((((((((((((((((((((((([AGCPrintConnectedCalls]+[ASGPrintConnectedCalls])+[CombinedFeedsConnectedCalls])+[CTCConnectedCalls])+[DripConnectedCalls])+[GoogleConnectedCalls])+[LeadMailConnectedCalls])+[LuxuryConnectedCalls])+[MarchexConnectedCalls])+[MobileSEMConnectedCalls])+[PaidSPConnectedCalls])+[PPCConnectedCalls])+[RentConnectedCallsAG])+[RentConnectedCallsRent])+[RentMobileConnectedCallsAG])+[RentMobileConnectedCallsRent])+[RentMobileSEMConnectedCalls])+[RentOneWebConnectedCallsAG])+[RentOneWebConnectedCallsRent])+[RentSEMConnectedCalls])+[SEMConnectedCalls])+[SitesConnectedCalls])+[SMSConnectedCalls])+[TruliaConnectedCalls])+[VideoConnectedCalls])+[WebLocalTrackingNumberConnectedCalls])+[WebConnectedCalls])+[RentalsLocalConnectedCalls])+[RentalsConnectedCalls])+[RentAltRegConnectedCallsAG])+[RentAltRegConnectedCallsRent]),
	[ConnectedCallsAG]  AS (((((((((((((((((((((((([AGCPrintConnectedCalls]+[ASGPrintConnectedCalls])+[CombinedFeedsConnectedCalls])+[CTCConnectedCalls])+[DripConnectedCalls])+[GoogleConnectedCalls])+[LeadMailConnectedCalls])+[LuxuryConnectedCalls])+[MarchexConnectedCalls])+[MobileSEMConnectedCalls])+[PaidSPConnectedCalls])+[PPCConnectedCalls])+[RentConnectedCallsAG])+[RentMobileConnectedCallsAG])+[RentOneWebConnectedCallsAG])+[SEMConnectedCalls])+[SitesConnectedCalls])+[SMSConnectedCalls])+[TruliaConnectedCalls])+[VideoConnectedCalls])+[WebLocalTrackingNumberConnectedCalls])+[WebConnectedCalls])+[RentalsLocalConnectedCalls])+[RentalsConnectedCalls])+[RentAltRegConnectedCallsAG]),
	[ConnectedCallsRent]  AS ((((([RentConnectedCallsRent]+[RentMobileConnectedCallsRent])+[RentMobileSEMConnectedCalls])+[RentOneWebConnectedCallsRent])+[RentSEMConnectedCalls])+[RentAltRegConnectedCallsRent]),
	[DesktopConnectedCalls]  AS ((((((((((((((((((((((([CombinedFeedsConnectedCalls]+[CTCConnectedCalls])+[DripConnectedCalls])+[GoogleConnectedCalls])+[LeadMailConnectedCalls])+[LuxuryConnectedCalls])+[MarchexConnectedCalls])+[PaidSPConnectedCalls])+[PPCConnectedCalls])+[RentConnectedCallsAG])+[RentConnectedCallsRent])+[RentOneWebConnectedCallsAG])+[RentOneWebConnectedCallsRent])+[RentSEMConnectedCalls])+[SEMConnectedCalls])+[SitesConnectedCalls])+[SMSConnectedCalls])+[TruliaConnectedCalls])+[VideoConnectedCalls])+[WebConnectedCalls])+[RentalsLocalConnectedCalls])+[RentalsConnectedCalls])+[RentAltRegConnectedCallsAG])+[RentAltRegConnectedCallsRent]),
	[DesktopConnectedCallsAG]  AS ((((((((((((((((((([CombinedFeedsConnectedCalls]+[CTCConnectedCalls])+[DripConnectedCalls])+[GoogleConnectedCalls])+[LeadMailConnectedCalls])+[LuxuryConnectedCalls])+[MarchexConnectedCalls])+[PaidSPConnectedCalls])+[PPCConnectedCalls])+[RentConnectedCallsAG])+[RentOneWebConnectedCallsAG])+[SEMConnectedCalls])+[SitesConnectedCalls])+[SMSConnectedCalls])+[TruliaConnectedCalls])+[VideoConnectedCalls])+[WebConnectedCalls])+[RentalsLocalConnectedCalls])+[RentalsConnectedCalls])+[RentAltRegConnectedCallsAG]),
	[DesktopConnectedCallsRent]  AS ((([RentConnectedCallsRent]+[RentOneWebConnectedCallsRent])+[RentSEMConnectedCalls])+[RentAltRegConnectedCallsRent]),
	[MobileConnectedCalls]  AS (((([MobileSEMConnectedCalls]+[RentMobileConnectedCallsAG])+[RentMobileConnectedCallsRent])+[RentMobileSEMConnectedCalls])+[WebLocalTrackingNumberConnectedCalls]),
	[MobileConnectedCallsAG]  AS (([MobileSEMConnectedCalls]+[RentMobileConnectedCallsAG])+[WebLocalTrackingNumberConnectedCalls]),
	[MobileConnectedCallsRent]  AS ([RentMobileConnectedCallsRent]+[RentMobileSEMConnectedCalls]),
	[MissedCalls]  AS (((((((((((((((((((((((((((((([AGCPrintMissedCalls]+[ASGPrintMissedCalls])+[CombinedFeedsMissedCalls])+[CTCMissedCalls])+[DripMissedCalls])+[GoogleMissedCalls])+[LeadMailMissedCalls])+[LuxuryMissedCalls])+[MarchexMissedCalls])+[MobileSEMMissedCalls])+[PaidSPMissedCalls])+[PPCMissedCalls])+[RentMissedCallsAG])+[RentMissedCallsRent])+[RentMobileMissedCallsAG])+[RentMobileMissedCallsRent])+[RentMobileSEMMissedCalls])+[RentOneWebMissedCallsAG])+[RentOneWebMissedCallsRent])+[RentSEMMissedCalls])+[SEMMissedCalls])+[SitesMissedCalls])+[SMSMissedCalls])+[TruliaMissedCalls])+[VideoMissedCalls])+[WebLocalTrackingNumberMissedCalls])+[WebMissedCalls])+[RentalsLocalMissedCalls])+[RentalsMissedCalls])+[RentAltRegMissedCallsAG])+[RentAltRegMissedCallsRent]),
	[MissedCallsAG]  AS (((((((((((((((((((((((([AGCPrintMissedCalls]+[ASGPrintMissedCalls])+[CombinedFeedsMissedCalls])+[CTCMissedCalls])+[DripMissedCalls])+[GoogleMissedCalls])+[LeadMailMissedCalls])+[LuxuryMissedCalls])+[MarchexMissedCalls])+[MobileSEMMissedCalls])+[PaidSPMissedCalls])+[PPCMissedCalls])+[RentMissedCallsAG])+[RentMobileMissedCallsAG])+[RentOneWebMissedCallsAG])+[SEMMissedCalls])+[SitesMissedCalls])+[SMSMissedCalls])+[TruliaMissedCalls])+[VideoMissedCalls])+[WebLocalTrackingNumberMissedCalls])+[WebMissedCalls])+[RentalsLocalMissedCalls])+[RentalsMissedCalls])+[RentAltRegMissedCallsAG]),
	[MissedCallsRent]  AS ((((([RentMissedCallsRent]+[RentMobileMissedCallsRent])+[RentMobileSEMMissedCalls])+[RentOneWebMissedCallsRent])+[RentSEMMissedCalls])+[RentAltRegMissedCallsRent]),
	[DesktopMissedCalls]  AS ((((((((((((((((((((((([CombinedFeedsMissedCalls]+[CTCMissedCalls])+[DripMissedCalls])+[GoogleMissedCalls])+[LeadMailMissedCalls])+[LuxuryMissedCalls])+[MarchexMissedCalls])+[PaidSPMissedCalls])+[PPCMissedCalls])+[RentMissedCallsAG])+[RentMissedCallsRent])+[RentOneWebMissedCallsAG])+[RentOneWebMissedCallsRent])+[RentSEMMissedCalls])+[SEMMissedCalls])+[SitesMissedCalls])+[SMSMissedCalls])+[TruliaMissedCalls])+[VideoMissedCalls])+[WebMissedCalls])+[RentalsLocalMissedCalls])+[RentalsMissedCalls])+[RentAltRegMissedCallsAG])+[RentAltRegMissedCallsRent]),
	[DesktopMissedCallsAG]  AS ((((((((((((((((((([CombinedFeedsMissedCalls]+[CTCMissedCalls])+[DripMissedCalls])+[GoogleMissedCalls])+[LeadMailMissedCalls])+[LuxuryMissedCalls])+[MarchexMissedCalls])+[PaidSPMissedCalls])+[PPCMissedCalls])+[RentMissedCallsAG])+[RentOneWebMissedCallsAG])+[SEMMissedCalls])+[SitesMissedCalls])+[SMSMissedCalls])+[TruliaMissedCalls])+[VideoMissedCalls])+[WebMissedCalls])+[RentalsLocalMissedCalls])+[RentalsMissedCalls])+[RentAltRegMissedCallsAG]),
	[DesktopMissedCallsRent]  AS ((([RentMissedCallsRent]+[RentOneWebMissedCallsRent])+[RentSEMMissedCalls])+[RentAltRegMissedCallsRent]),
	[MobileMissedCalls]  AS (((([MobileSEMMissedCalls]+[RentMobileMissedCallsAG])+[RentMobileMissedCallsRent])+[RentMobileSEMMissedCalls])+[WebLocalTrackingNumberMissedCalls]),
	[MobileMissedCallsAG]  AS (([MobileSEMMissedCalls]+[RentMobileMissedCallsAG])+[WebLocalTrackingNumberMissedCalls]),
	[MobileMissedCallsRent]  AS ([RentMobileMissedCallsRent]+[RentMobileSEMMissedCalls]),
	[PhoneLeads]  AS ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((([AGCPrintConnectedCalls]+[ASGPrintConnectedCalls])+[CraigsListConnectedCalls])+[CTCConnectedCalls])+[DripConnectedCalls])+[GoogleConnectedCalls])+[LeadMailConnectedCalls])+[LuxuryConnectedCalls])+[MarchexConnectedCalls])+[MobileSEMConnectedCalls])+[PaidSPConnectedCalls])+[PPCConnectedCalls])+[RentConnectedCallsAG])+[RentConnectedCallsRent])+[RentMobileConnectedCallsAG])+[RentMobileConnectedCallsRent])+[RentMobileSEMConnectedCalls])+[RentOneWebConnectedCallsAG])+[RentOneWebConnectedCallsRent])+[RentSEMConnectedCalls])+[SEMConnectedCalls])+[SitesConnectedCalls])+[SMSConnectedCalls])+[TruliaConnectedCalls])+[VideoConnectedCalls])+[WebLocalTrackingNumberConnectedCalls])+[WebConnectedCalls])+[RentalsLocalConnectedCalls])+[RentalsConnectedCalls])+[RentAltRegConnectedCallsAG])+[RentAltRegConnectedCallsRent])+[AGCPrintMissedCalls])+[ASGPrintMissedCalls])+[CombinedFeedsMissedCalls])+[CTCMissedCalls])+[DripMissedCalls])+[GoogleMissedCalls])+[LeadMailMissedCalls])+[LuxuryMissedCalls])+[MarchexMissedCalls])+[MobileSEMMissedCalls])+[PaidSPMissedCalls])+[PPCMissedCalls])+[RentMissedCallsAG])+[RentMissedCallsRent])+[RentMobileMissedCallsAG])+[RentMobileMissedCallsRent])+[RentMobileSEMMissedCalls])+[RentOneWebMissedCallsAG])+[RentOneWebMissedCallsRent])+[RentSEMMissedCalls])+[SEMMissedCalls])+[SitesMissedCalls])+[SMSMissedCalls])+[TruliaMissedCalls])+[VideoMissedCalls])+[WebLocalTrackingNumberMissedCalls])+[WebMissedCalls])+[RentalsLocalMissedCalls])+[RentalsMissedCalls])+[RentAltRegMissedCallsAG])+[RentAltRegMissedCallsRent]),
	[PhoneLeadsAG]  AS (((((((((((((((((((((((((((((((((((((((((((((((((([AGCPrintConnectedCalls]+[ASGPrintConnectedCalls])+[CombinedFeedsConnectedCalls])+[CraigsListConnectedCalls])+[CTCConnectedCalls])+[DripConnectedCalls])+[GoogleConnectedCalls])+[LeadMailConnectedCalls])+[LuxuryConnectedCalls])+[MarchexConnectedCalls])+[MobileSEMConnectedCalls])+[PaidSPConnectedCalls])+[PPCConnectedCalls])+[RentConnectedCallsAG])+[RentMobileConnectedCallsAG])+[RentOneWebConnectedCallsAG])+[SEMConnectedCalls])+[SitesConnectedCalls])+[SMSConnectedCalls])+[TruliaConnectedCalls])+[VideoConnectedCalls])+[WebLocalTrackingNumberConnectedCalls])+[WebConnectedCalls])+[RentalsLocalConnectedCalls])+[RentalsConnectedCalls])+[RentAltRegConnectedCallsAG])+[AGCPrintMissedCalls])+[ASGPrintMissedCalls])+[CombinedFeedsMissedCalls])+[CTCMissedCalls])+[DripMissedCalls])+[GoogleMissedCalls])+[LeadMailMissedCalls])+[LuxuryMissedCalls])+[MarchexMissedCalls])+[MobileSEMMissedCalls])+[PaidSPMissedCalls])+[PPCMissedCalls])+[RentMissedCallsAG])+[RentMobileMissedCallsAG])+[RentOneWebMissedCallsAG])+[SEMMissedCalls])+[SitesMissedCalls])+[SMSMissedCalls])+[TruliaMissedCalls])+[VideoMissedCalls])+[WebLocalTrackingNumberMissedCalls])+[WebMissedCalls])+[RentalsLocalMissedCalls])+[RentalsMissedCalls])+[RentAltRegMissedCallsAG]),
	[PhoneLeadsRent]  AS ((((((((((([RentConnectedCallsRent]+[RentMobileConnectedCallsRent])+[RentMobileSEMConnectedCalls])+[RentOneWebConnectedCallsRent])+[RentSEMConnectedCalls])+[RentAltRegConnectedCallsRent])+[RentMissedCallsRent])+[RentMobileMissedCallsRent])+[RentMobileSEMMissedCalls])+[RentOneWebMissedCallsRent])+[RentSEMMissedCalls])+[RentAltRegMissedCallsRent]),
	[DesktopPhoneLeads]  AS (((((((((((((((((((((((((((((((((((((((((((((((([CombinedFeedsConnectedCalls]+[CTCConnectedCalls])+[DripConnectedCalls])+[GoogleConnectedCalls])+[LeadMailConnectedCalls])+[LuxuryConnectedCalls])+[MarchexConnectedCalls])+[PaidSPConnectedCalls])+[PPCConnectedCalls])+[RentConnectedCallsAG])+[RentConnectedCallsRent])+[RentOneWebConnectedCallsAG])+[RentOneWebConnectedCallsRent])+[RentSEMConnectedCalls])+[SEMConnectedCalls])+[SitesConnectedCalls])+[SMSConnectedCalls])+[TruliaConnectedCalls])+[VideoConnectedCalls])+[WebConnectedCalls])+[RentalsLocalConnectedCalls])+[RentalsConnectedCalls])+[RentAltRegConnectedCallsAG])+[RentAltRegConnectedCallsRent])+[CombinedFeedsMissedCalls])+[CraigsListMissedCalls])+[CTCMissedCalls])+[DripMissedCalls])+[GoogleMissedCalls])+[LeadMailMissedCalls])+[LuxuryMissedCalls])+[MarchexMissedCalls])+[PaidSPMissedCalls])+[PPCMissedCalls])+[RentMissedCallsAG])+[RentMissedCallsRent])+[RentOneWebMissedCallsAG])+[RentOneWebMissedCallsRent])+[RentSEMMissedCalls])+[SEMMissedCalls])+[SitesMissedCalls])+[SMSMissedCalls])+[TruliaMissedCalls])+[VideoMissedCalls])+[WebMissedCalls])+[RentalsLocalMissedCalls])+[RentalsMissedCalls])+[RentAltRegMissedCallsAG])+[RentAltRegMissedCallsRent]),
	[DesktopPhoneLeadsAG]  AS (((((((((((((((((((((((((((((((((((((((([CombinedFeedsConnectedCalls]+[CTCConnectedCalls])+[DripConnectedCalls])+[GoogleConnectedCalls])+[LeadMailConnectedCalls])+[LuxuryConnectedCalls])+[MarchexConnectedCalls])+[PaidSPConnectedCalls])+[PPCConnectedCalls])+[RentConnectedCallsAG])+[RentOneWebConnectedCallsAG])+[SEMConnectedCalls])+[SitesConnectedCalls])+[SMSConnectedCalls])+[TruliaConnectedCalls])+[VideoConnectedCalls])+[WebConnectedCalls])+[RentalsLocalConnectedCalls])+[RentalsConnectedCalls])+[RentAltRegConnectedCallsAG])+[CombinedFeedsMissedCalls])+[CraigsListMissedCalls])+[CTCMissedCalls])+[DripMissedCalls])+[GoogleMissedCalls])+[LeadMailMissedCalls])+[LuxuryMissedCalls])+[MarchexMissedCalls])+[PaidSPMissedCalls])+[PPCMissedCalls])+[RentMissedCallsAG])+[RentOneWebMissedCallsAG])+[SEMMissedCalls])+[SitesMissedCalls])+[SMSMissedCalls])+[TruliaMissedCalls])+[VideoMissedCalls])+[WebMissedCalls])+[RentalsLocalMissedCalls])+[RentalsMissedCalls])+[RentAltRegMissedCallsAG]),
	[DesktopPhoneLeadsRent]  AS ((((((([RentConnectedCallsRent]+[RentOneWebConnectedCallsRent])+[RentSEMConnectedCalls])+[RentAltRegConnectedCallsRent])+[RentMissedCallsRent])+[RentOneWebMissedCallsRent])+[RentSEMMissedCalls])+[RentAltRegMissedCallsRent]),
	[MobilePhoneLeads]  AS ((((((((([MobileSEMConnectedCalls]+[RentMobileConnectedCallsAG])+[RentMobileConnectedCallsRent])+[RentMobileSEMConnectedCalls])+[WebLocalTrackingNumberConnectedCalls])+[MobileSEMMissedCalls])+[RentMobileMissedCallsAG])+[RentMobileMissedCallsRent])+[RentMobileSEMMissedCalls])+[WebLocalTrackingNumberMissedCalls]),
	[MobilePhoneLeadsAG]  AS ((((([MobileSEMConnectedCalls]+[RentMobileConnectedCallsAG])+[WebLocalTrackingNumberConnectedCalls])+[MobileSEMMissedCalls])+[RentMobileMissedCallsAG])+[WebLocalTrackingNumberMissedCalls]),
	[MobilePhoneLeadsRent]  AS ((([RentMobileConnectedCallsRent]+[RentMobileSEMConnectedCalls])+[RentMobileMissedCallsRent])+[RentMobileSEMMissedCalls]),
	[EmailLeads]  AS ((((((((((((((((((((((((((((((((((((((((([AGEmailLeads]+[AGKindleEmailLeads])+[AGMobileEmailLeads])+[AGTabletEmailLeads])+[AIMCOEmailLeads])+[AndroidEmailLeadsAG])+[AndroidEmailLeadsRent])+[CampusHomesOnlineEmailLeads])+[CondoEmailLeads])+[EREIFeedLeads])+[HotpadsEmailLeads])+[iPadEmailLeadsAG])+[iPadEmailLeadsRent])+[iPhoneEmailLeadsAG])+[iPhoneEmailLeadsRent])+[LovelyEmailLeads])+[LuxuryEmailLeads])+[MetroEmailLeads])+[NeighborhoodEmailLeads])+[OodleEmailLeads])+[PropSolutionsFeedLeads])+[RDTFeedLeadsAG])+[RDTFeedLeadsRent])+[RentAndroidEmailLeads])+[RentEmailLeadsAG])+[RentEmailLeadsRent])+[RentiPadEmailLeads])+[RentiPhoneEmailLeads])+[RentRentarEmailLeads])+[SitesEmailLeads])+[TruliaEmailLeadsAG])+[TruliaEmailLeadsRent])+[VastEmailLeads])+[VerticalBrandsEmailLeads])+[YardiRCFeedLeads])+[YieldFeedLeads])+[ZillowEmailLeads])+[RentalHousesEmailLeads])+[RentalsAndroidEmailLeads])+[RentalsEmailLeads])+[RentalsIPhoneEmailLeads])+[RentalsMobileEmailLeads]),
	[EmailLeadsAG]  AS ((((((((((((((((((((((((((((((((([AGEmailLeads]+[AGKindleEmailLeads])+[AGMobileEmailLeads])+[AGTabletEmailLeads])+[AIMCOEmailLeads])+[AndroidEmailLeadsAG])+[CampusHomesOnlineEmailLeads])+[CondoEmailLeads])+[EREIFeedLeads])+[HotpadsEmailLeads])+[iPadEmailLeadsAG])+[iPhoneEmailLeadsAG])+[LovelyEmailLeads])+[LuxuryEmailLeads])+[MetroEmailLeads])+[NeighborhoodEmailLeads])+[OodleEmailLeads])+[PropSolutionsFeedLeads])+[RDTFeedLeadsAG])+[RentAndroidEmailLeads])+[RentEmailLeadsAG])+[RentRentarEmailLeads])+[SitesEmailLeads])+[TruliaEmailLeadsAG])+[VastEmailLeads])+[VerticalBrandsEmailLeads])+[YardiRCFeedLeads])+[YieldFeedLeads])+[ZillowEmailLeads])+[RentalHousesEmailLeads])+[RentalsAndroidEmailLeads])+[RentalsEmailLeads])+[RentalsIPhoneEmailLeads])+[RentalsMobileEmailLeads]),
	[EmailLeadsRent]  AS ((((((([AndroidEmailLeadsRent]+[iPadEmailLeadsRent])+[iPhoneEmailLeadsRent])+[RDTFeedLeadsRent])+[RentEmailLeadsRent])+[RentiPadEmailLeads])+[RentiPhoneEmailLeads])+[TruliaEmailLeadsRent]),
	[DesktopEmailLeads]  AS (((((((((((((((((((((((((([AGEmailLeads]+[AIMCOEmailLeads])+[CampusHomesOnlineEmailLeads])+[CondoEmailLeads])+[EREIFeedLeads])+[HotpadsEmailLeads])+[LovelyEmailLeads])+[LuxuryEmailLeads])+[MetroEmailLeads])+[NeighborhoodEmailLeads])+[OodleEmailLeads])+[PropSolutionsFeedLeads])+[RDTFeedLeadsAG])+[RDTFeedLeadsRent])+[RentEmailLeadsAG])+[RentEmailLeadsRent])+[RentRentarEmailLeads])+[SitesEmailLeads])+[TruliaEmailLeadsAG])+[TruliaEmailLeadsRent])+[VastEmailLeads])+[VerticalBrandsEmailLeads])+[YardiRCFeedLeads])+[YieldFeedLeads])+[ZillowEmailLeads])+[RentalHousesEmailLeads])+[RentalsEmailLeads]),
	[DesktopEmailLeadsAG]  AS ((((((((((((((((((((((([AGEmailLeads]+[AIMCOEmailLeads])+[CampusHomesOnlineEmailLeads])+[CondoEmailLeads])+[EREIFeedLeads])+[HotpadsEmailLeads])+[LovelyEmailLeads])+[LuxuryEmailLeads])+[MetroEmailLeads])+[NeighborhoodEmailLeads])+[OodleEmailLeads])+[PropSolutionsFeedLeads])+[RDTFeedLeadsAG])+[RentEmailLeadsAG])+[RentRentarEmailLeads])+[SitesEmailLeads])+[TruliaEmailLeadsAG])+[VastEmailLeads])+[VerticalBrandsEmailLeads])+[YardiRCFeedLeads])+[YieldFeedLeads])+[ZillowEmailLeads])+[RentalHousesEmailLeads])+[RentalsEmailLeads]),
	[DesktopEmailLeadsRent]  AS (([RDTFeedLeadsRent]+[RentEmailLeadsRent])+[TruliaEmailLeadsRent]),
	[MobileEmailLeads]  AS (((((((((((((([AGKindleEmailLeads]+[AGMobileEmailLeads])+[AGTabletEmailLeads])+[AndroidEmailLeadsAG])+[AndroidEmailLeadsRent])+[iPadEmailLeadsAG])+[iPadEmailLeadsRent])+[iPhoneEmailLeadsAG])+[iPhoneEmailLeadsRent])+[RentAndroidEmailLeads])+[RentiPadEmailLeads])+[RentiPhoneEmailLeads])+[RentalsAndroidEmailLeads])+[RentalsIPhoneEmailLeads])+[RentalsMobileEmailLeads]),
	[MobileEmailLeadsAG]  AS ((((((((([AGKindleEmailLeads]+[AGMobileEmailLeads])+[AGTabletEmailLeads])+[AndroidEmailLeadsAG])+[iPadEmailLeadsAG])+[iPhoneEmailLeadsAG])+[RentAndroidEmailLeads])+[RentalsAndroidEmailLeads])+[RentalsIPhoneEmailLeads])+[RentalsMobileEmailLeads]),
	[MobileEmailLeadsRent]  AS (((([AndroidEmailLeadsRent]+[iPadEmailLeadsRent])+[iPhoneEmailLeadsRent])+[RentiPadEmailLeads])+[RentiPhoneEmailLeads]),
	[AllLeads]  AS ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((([AGCPrintConnectedCalls]+[AGCPrintMissedCalls])+[ASGPrintConnectedCalls])+[ASGPrintMissedCalls])+[CombinedFeedsConnectedCalls])+[CombinedFeedsMissedCalls])+[CraigsListConnectedCalls])+[CraigsListMissedCalls])+[CTCConnectedCalls])+[CTCMissedCalls])+[DripConnectedCalls])+[DripMissedCalls])+[GoogleConnectedCalls])+[GoogleMissedCalls])+[LeadMailConnectedCalls])+[LeadMailMissedCalls])+[LuxuryConnectedCalls])+[LuxuryMissedCalls])+[MarchexConnectedCalls])+[MarchexMissedCalls])+[MobileSEMConnectedCalls])+[MobileSEMMissedCalls])+[PaidSPConnectedCalls])+[PaidSPMissedCalls])+[PPCConnectedCalls])+[PPCMissedCalls])+[RentConnectedCallsAG])+[RentMissedCallsAG])+[RentConnectedCallsRent])+[RentMissedCallsRent])+[RentMobileConnectedCallsAG])+[RentMobileMissedCallsAG])+[RentMobileConnectedCallsRent])+[RentMobileMissedCallsRent])+[RentMobileSEMConnectedCalls])+[RentMobileSEMMissedCalls])+[RentOneWebConnectedCallsAG])+[RentOneWebMissedCallsAG])+[RentOneWebConnectedCallsRent])+[RentOneWebMissedCallsRent])+[RentSEMConnectedCalls])+[RentSEMMissedCalls])+[SEMConnectedCalls])+[SEMMissedCalls])+[SitesConnectedCalls])+[SitesMissedCalls])+[SMSConnectedCalls])+[SMSMissedCalls])+[TruliaConnectedCalls])+[TruliaMissedCalls])+[VideoConnectedCalls])+[VideoMissedCalls])+[WebLocalTrackingNumberConnectedCalls])+[WebLocalTrackingNumberMissedCalls])+[WebConnectedCalls])+[WebMissedCalls])+[AGEmailLeads])+[AGKindleEmailLeads])+[AGMobileEmailLeads])+[AGTabletEmailLeads])+[AIMCOEmailLeads])+[AndroidEmailLeadsAG])+[AndroidEmailLeadsRent])+[CampusHomesOnlineEmailLeads])+[CondoEmailLeads])+[EREIFeedLeads])+[HotpadsEmailLeads])+[iPadEmailLeadsAG])+[iPadEmailLeadsRent])+[iPhoneEmailLeadsAG])+[iPhoneEmailLeadsRent])+[LovelyEmailLeads])+[LuxuryEmailLeads])+[MetroEmailLeads])+[NeighborhoodEmailLeads])+[OodleEmailLeads])+[PropSolutionsFeedLeads])+[RDTFeedLeadsAG])+[RDTFeedLeadsRent])+[RentAndroidEmailLeads])+[RentEmailLeadsAG])+[RentEmailLeadsRent])+[RentiPadEmailLeads])+[RentiPhoneEmailLeads])+[RentRentarEmailLeads])+[SitesEmailLeads])+[TruliaEmailLeadsAG])+[TruliaEmailLeadsRent])+[VastEmailLeads])+[VerticalBrandsEmailLeads])+[YardiRCFeedLeads])+[YieldFeedLeads])+[ZillowEmailLeads])+[RentalHousesEmailLeads])+[RentalsAndroidEmailLeads])+[RentalsEmailLeads])+[RentalsIPhoneEmailLeads])+[RentalsMobileEmailLeads])+[RentalsLocalConnectedCalls])+[RentalsLocalMissedCalls])+[RentalsConnectedCalls])+[RentalsMissedCalls])+[RentAltRegConnectedCallsAG])+[RentAltRegMissedCallsAG])+[RentAltRegConnectedCallsRent])+[RentAltRegMissedCallsRent])
) ON [PRIMARY]

GO
/****** Object:  Index [cuidx_YMDID_ListingID]    Script Date: 9/5/2017 7:20:04 AM ******/
CREATE UNIQUE CLUSTERED INDEX [cuidx_YMDID_ListingID] ON [Mart].[Listings_OLD_20170208]
(
	[YMDID] ASC,
	[ListingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [Mart].[Listings_PreProdChange20170207]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Mart].[Listings_PreProdChange20170207](
	[YMDID] [int] NOT NULL,
	[YearMonth] [int] NOT NULL,
	[ListingID] [int] NOT NULL,
	[PropertyIDAG] [int] NULL,
	[StatusIDAG] [tinyint] NOT NULL,
	[PropertyIDRent] [int] NULL,
	[StatusIDRent] [tinyint] NOT NULL,
	[ListingType] [varchar](25) NULL,
	[IsSEM] [int] NOT NULL,
	[ShowPricing] [int] NOT NULL,
	[LowPrice] [int] NULL,
	[HighPrice] [int] NULL,
	[CallRecordingOptOut] [tinyint] NOT NULL,
	[TotalAmenities] [int] NULL,
	[ActiveAmenities] [int] NULL,
	[ActiveCoupon] [tinyint] NULL,
	[ActiveFloorplans] [int] NULL,
	[ActiveHDFloorplans] [int] NULL,
	[ActiveHDPhotos] [int] NULL,
	[ActivePhotos] [int] NULL,
	[ExternalID] [varchar](50) NULL,
	[HasAvailabilityURL] [tinyint] NULL,
	[ListingPricingSource] [varchar](8) NULL,
	[Charter] [tinyint] NOT NULL,
	[DIRECTV] [tinyint] NOT NULL,
	[HasCR3] [tinyint] NOT NULL,
	[CR3AvgOverallRatingAG] [numeric](16, 1) NULL,
	[CR3AvgOverallRatingRent] [numeric](16, 1) NULL,
	[ShowOfficeHours] [int] NOT NULL,
	[PlacementTierAG] [int] NULL,
	[PlacementTierRent] [int] NULL,
	[ContractLoyaltyPoints] [int] NULL,
	[InternetProductPoints] [int] NULL,
	[LegacyLoyaltyPoints] [int] NULL,
	[MobilePoints] [int] NULL,
	[PrintProductPoints] [int] NULL,
	[Ranking] [varchar](1) NULL,
	[RPLRank] [numeric](8, 2) NULL,
	[BadgeCollege] [tinyint] NULL,
	[BadgeCorporate] [tinyint] NULL,
	[BadgeIncomeRestricted] [tinyint] NULL,
	[BadgeLuxury] [tinyint] NULL,
	[BadgeMilitary] [tinyint] NULL,
	[BadgePetFriendly] [tinyint] NULL,
	[BadgeSenior] [tinyint] NULL,
	[BadgeGolf] [tinyint] NULL,
	[BadgeWaterfront] [tinyint] NULL,
	[BadgeFurnished] [tinyint] NULL,
	[DefaultBadge] [varchar](50) NULL,
	[Upsell3DFloorplan] [tinyint] NOT NULL,
	[UpsellAGSites] [tinyint] NOT NULL,
	[UpsellCarousel] [tinyint] NULL,
	[UpsellCarouselRentals] [tinyint] NULL,
	[UpsellCommunityVideoURLFulfilled] [tinyint] NULL,
	[UpsellCoupon] [tinyint] NULL,
	[UpsellDiamondCity] [tinyint] NULL,
	[UpsellDiamondMax] [tinyint] NULL,
	[UpsellDiamondMetro] [tinyint] NULL,
	[UpsellEmercial] [tinyint] NULL,
	[UpsellFeaturedCommunityAG] [tinyint] NULL,
	[UpsellFeaturedCommunityRent] [tinyint] NULL,
	[UpsellFeaturedListingRentals] [tinyint] NULL,
	[UpsellHDActiveFloorplansFulfilled] [tinyint] NULL,
	[UpsellHDActivePhotosFulfilled] [tinyint] NULL,
	[UpsellHDPanoTour] [tinyint] NOT NULL,
	[UpsellHDPanoTourFulfilled] [tinyint] NULL,
	[UpsellHDPhoto] [tinyint] NOT NULL,
	[UpsellHDVideo] [tinyint] NOT NULL,
	[UpsellHDVideoFulfilled] [tinyint] NULL,
	[UpsellHighlighted] [tinyint] NULL,
	[UpsellLinked3DFloorplan] [int] NOT NULL,
	[UpsellLinked3DFloorplanFulfilled] [tinyint] NULL,
	[UpsellLinkedFloorplan] [int] NOT NULL,
	[UpsellLinkedFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedRoomPlanner] [int] NOT NULL,
	[UpsellLinkedRoomPlannerFulfilled] [tinyint] NOT NULL,
	[UpsellListingRent] [tinyint] NOT NULL,
	[UpsellListingRentals] [tinyint] NOT NULL,
	[UpsellMediaCenter] [tinyint] NOT NULL,
	[UpsellMgmtPeelAd] [tinyint] NOT NULL,
	[UpsellMobileDeal] [tinyint] NOT NULL,
	[UpsellMobileDealFulfilled] [tinyint] NOT NULL,
	[UpsellMobileDiamond] [tinyint] NOT NULL,
	[UpsellMobileSpotlight] [tinyint] NOT NULL,
	[UpsellNoVacancyRent] [tinyint] NOT NULL,
	[UpsellPayPerLead] [tinyint] NOT NULL,
	[UpsellPayPerLease] [tinyint] NOT NULL,
	[UpsellPhotoUpgrade] [tinyint] NOT NULL,
	[UpsellPrecisionTargetedEmailRent] [tinyint] NOT NULL,
	[UpsellPremierListingRentals] [tinyint] NOT NULL,
	[UpsellPremiumUpgrade] [tinyint] NOT NULL,
	[UpsellRewardCardRent] [tinyint] NOT NULL,
	[UpsellSponsoredApartment] [tinyint] NOT NULL,
	[UpsellSpotlightAG] [tinyint] NOT NULL,
	[UpsellSpotlightRent] [tinyint] NOT NULL,
	[UpsellSpotlightRentals] [tinyint] NOT NULL,
	[UpsellStandardListingRentals] [tinyint] NOT NULL,
	[UpsellStandardPlusListingRentals] [tinyint] NOT NULL,
	[UpsellSubscriptionModelRent] [tinyint] NOT NULL,
	[UpsellVideoSpokesmodel] [tinyint] NOT NULL,
	[UpsellVIPPlacementRent] [tinyint] NOT NULL,
	[UpsellVirtualBrochure] [tinyint] NOT NULL,
	[UpsellVirtualTourFulfilled] [tinyint] NOT NULL,
	[UpsellPayPerLeaseALM] [tinyint] NOT NULL,
	[UpsellFuture2] [tinyint] NOT NULL,
	[UpsellFuture3] [tinyint] NOT NULL,
	[UpsellFuture4] [tinyint] NOT NULL,
	[UpsellFuture5] [tinyint] NOT NULL,
	[UpsellFuture6] [tinyint] NOT NULL,
	[UpsellFuture7] [tinyint] NOT NULL,
	[UpsellFuture8] [tinyint] NOT NULL,
	[UpsellFuture9] [tinyint] NOT NULL,
	[ClicksCommunityVideoAG] [int] NOT NULL,
	[ClicksDiamondMaxPhotoAG] [int] NOT NULL,
	[ClicksDiamondMaxCheckAvailAG] [int] NOT NULL,
	[ClicksFloorplanAG] [int] NOT NULL,
	[ClicksFloorplanRent] [int] NOT NULL,
	[ClicksHDFloorplanAG] [int] NOT NULL,
	[ClicksHDFloorplanRent] [int] NOT NULL,
	[ClicksPhotosAG] [int] NOT NULL,
	[ClicksPhotosRent] [int] NOT NULL,
	[ClicksHDPhotoAG] [int] NOT NULL,
	[ClicksHDPhotoRent] [int] NOT NULL,
	[ClicksHDVideoAG] [int] NOT NULL,
	[ClicksHDVideoRent] [int] NOT NULL,
	[ClicksHDPanoTourAG] [int] NOT NULL,
	[ClicksHDPanoTourRent] [int] NOT NULL,
	[ClicksMapAG] [int] NOT NULL,
	[ClicksMapRent] [int] NOT NULL,
	[ClicksWebURLAG] [int] NOT NULL,
	[ClicksWebURLRent] [int] NOT NULL,
	[ClicksMgtCoURLAG] [int] NOT NULL,
	[ClicksMgtCoURLRent] [int] NOT NULL,
	[ClicksMgtCoPeelAdAG] [int] NOT NULL,
	[ClicksMgtCoPeelAdRent] [int] NOT NULL,
	[ClicksReserveNowAG] [int] NOT NULL,
	[ClicksReserveNowRent] [int] NOT NULL,
	[ClicksFeaturedCommunityAG] [int] NOT NULL,
	[ClicksFeaturedCommunityRent] [int] NOT NULL,
	[ClicksFeatCommCheckAvailAG] [int] NOT NULL,
	[ClicksFeatCommCheckAvailRent] [int] NOT NULL,
	[ClicksSRPListingCheckAvailAG] [int] NOT NULL,
	[ClicksSRPListingCheckAvailRent] [int] NOT NULL,
	[ClicksCR3AG] [int] NOT NULL,
	[ClicksCR3Rent] [int] NOT NULL,
	[ClicksSpotlightRentSpecialsAG] [int] NOT NULL,
	[ClicksSpotlightRentSpecialsRent] [int] NOT NULL,
	[ClicksSpotlightReserveNowAG] [int] NOT NULL,
	[ClicksFuture1] [int] NOT NULL,
	[ClicksFuture2] [int] NOT NULL,
	[ClicksFuture3] [int] NOT NULL,
	[ClicksFuture4] [int] NOT NULL,
	[ClicksFuture5] [int] NOT NULL,
	[ClicksFuture6] [int] NOT NULL,
	[ClicksFuture7] [int] NOT NULL,
	[ClicksFuture8] [int] NOT NULL,
	[ClicksFuture9] [int] NOT NULL,
	[ClicksFuture10] [int] NOT NULL,
	[ClicksFuture11] [int] NOT NULL,
	[ClicksFuture12] [int] NOT NULL,
	[SRPListingImprAG] [int] NOT NULL,
	[SRPListingImprRent] [int] NOT NULL,
	[SRPUniqueVisitAG] [int] NOT NULL,
	[SRPUniqueVisitRent] [int] NOT NULL,
	[UniqueVisitsAG] [int] NOT NULL,
	[UniqueVisitsRent] [int] NOT NULL,
	[UniqueVisitsMobileAG] [int] NOT NULL,
	[UniqueVisitsMobileRent] [int] NOT NULL,
	[UniqueVisitsAGSites] [int] NOT NULL,
	[ViewsListingPageWebAG] [int] NOT NULL,
	[ViewsListingPageWebRent] [int] NOT NULL,
	[ViewsListingPageMobileAG] [int] NOT NULL,
	[ViewsListingPageMobileRent] [int] NOT NULL,
	[ViewsListingPageAGSites] [int] NOT NULL,
	[PhoneLeadsAG] [int] NOT NULL,
	[PhoneLeadsRent] [int] NOT NULL,
	[MissedCallsAG] [int] NOT NULL,
	[MissedCallsRent] [int] NOT NULL,
	[EmailLeadsAG] [int] NOT NULL,
	[EmailLeadsRent] [int] NOT NULL,
	[ClicksDiamondMaxPhoto]  AS ([ClicksDiamondMaxPhotoAG]+(0)),
	[ClicksDiamondMaxCheckAvail]  AS ([ClicksDiamondMaxCheckAvailAG]+(0)),
	[ClicksFloorplan]  AS ([ClicksFloorplanAG]+[ClicksFloorplanRent]),
	[ClicksHDFloorplan]  AS ([ClicksHDFloorplanAG]+[ClicksHDFloorplanRent]),
	[ClicksPhotos]  AS ([ClicksPhotosAG]+[ClicksPhotosRent]),
	[ClicksHDPhoto]  AS ([ClicksHDPhotoAG]+[ClicksHDPhotoRent]),
	[ClicksHDVideo]  AS ([ClicksHDVideoAG]+[ClicksHDVideoRent]),
	[ClicksHDPanoTour]  AS ([ClicksHDPanoTourAG]+[ClicksHDPanoTourRent]),
	[ClicksMap]  AS ([ClicksMapAG]+[ClicksMapRent]),
	[ClicksWebURL]  AS ([ClicksWebURLAG]+[ClicksWebURLRent]),
	[ClicksMgtCoPeelAd]  AS ([ClicksMgtCoPeelAdAG]+[ClicksMgtCoPeelAdRent]),
	[ClicksReserveNow]  AS ([ClicksReserveNowAG]+[ClicksReserveNowRent]),
	[ClicksFeaturedCommunity]  AS ([ClicksFeaturedCommunityAG]+[ClicksFeaturedCommunityRent]),
	[ClicksFeatCommCheckAvail]  AS ([ClicksFeatCommCheckAvailAG]+[ClicksFeatCommCheckAvailRent]),
	[ClicksSRPListingCheckAvail]  AS ([ClicksSRPListingCheckAvailAG]+[ClicksSRPListingCheckAvailRent]),
	[ClicksCR3]  AS ([ClicksCR3AG]+[ClicksCR3Rent]),
	[ClicksSpotlightRentSpecials]  AS ([ClicksSpotlightRentSpecialsAG]+[ClicksSpotlightRentSpecialsRent]),
	[ClicksSpotlightReserveNow]  AS ([ClicksSpotlightReserveNowAG]+(0)),
	[SRPListingImpr]  AS ([SRPListingImprAG]+[SRPListingImprRent]),
	[SRPUniqueVisit]  AS ([SRPUniqueVisitAG]+[SRPUniqueVisitRent]),
	[UniqueVisits]  AS ([UniqueVisitsAG]+[UniqueVisitsRent]),
	[UniqueVisitsMobile]  AS ([UniqueVisitsMobileAG]+[UniqueVisitsMobileRent]),
	[UniqueVisitsSites]  AS ([UniqueVisitsAGSites]+(0)),
	[ViewsListingPageWeb]  AS ([ViewsListingPageWebAG]+[ViewsListingPageWebRent]),
	[ViewsListingPageMobile]  AS ([ViewsListingPageMobileAG]+[ViewsListingPageMobileRent]),
	[ViewsListingPageSites]  AS ([ViewsListingPageAGSites]+(0)),
	[PhoneLeads]  AS ((([PhoneLeadsAG]+[MissedCallsAG])+[PhoneLeadsRent])+[MissedCallsRent]),
	[EmailLeads]  AS ([EmailLeadsAG]+[EmailLeadsRent]),
	[AllLeads]  AS ((((([PhoneLeadsAG]+[MissedCallsAG])+[PhoneLeadsRent])+[MissedCallsRent])+[EmailLeadsAG])+[EmailLeadsRent])
) ON [PRIMARY]

GO
/****** Object:  Index [cuidx_YMDID_ListingID2]    Script Date: 9/5/2017 7:20:04 AM ******/
CREATE UNIQUE CLUSTERED INDEX [cuidx_YMDID_ListingID2] ON [Mart].[Listings_PreProdChange20170207]
(
	[YMDID] ASC,
	[ListingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [Mart].[ListingsCombinedAGRent]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Mart].[ListingsCombinedAGRent](
	[YearMonth] [int] NOT NULL,
	[ListingID] [int] NOT NULL,
	[AG_PropertyID] [int] NULL,
	[R_RentPropertyID] [int] NULL,
	[R_PropertyID] [int] NULL,
	[AG_ListingType] [varchar](25) NULL,
	[R_ListingTypeID] [int] NULL,
	[R_ListingType] [varchar](25) NULL,
	[AG_ListingTypeShort] [varchar](5) NULL,
	[R_ListingTypeShort] [varchar](5) NULL,
	[AG_ExternalID] [varchar](50) NULL,
	[R_ExternalID] [varchar](50) NULL,
	[AG_ExternalPriceCode] [varchar](8) NULL,
	[R_ExternalPriceCode] [varchar](25) NULL,
	[AG_ListingStatusID] [int] NULL,
	[R_ListingStatusID] [tinyint] NULL,
	[ThruDate] [datetime] NULL,
	[LastUpdate] [datetime] NULL,
	[AG_TotalPhotos] [int] NULL,
	[R_TotalPhotos] [int] NULL,
	[AG_ActivePhotos] [int] NULL,
	[R_ActivePhotos] [int] NULL,
	[AG_TotalFloorPlans] [int] NULL,
	[R_TotalFloorPlans] [int] NULL,
	[AG_ActiveFloorPlans] [int] NULL,
	[R_ActiveFloorPlans] [int] NULL,
	[AG_TotalAmenities] [int] NULL,
	[R_TotalAmenities] [int] NULL,
	[AG_ActiveAmenities] [int] NULL,
	[R_ActiveAmenities] [int] NULL,
	[AG_ActiveHDPhotos] [int] NULL,
	[R_ActiveHDPhotos] [int] NULL,
	[AG_ActiveHDFloorPlans] [int] NULL,
	[R_ActiveHDFloorPlans] [int] NULL,
	[AG_ShowPricing] [tinyint] NULL,
	[R_ShowPricing] [tinyint] NULL,
	[AG_ShowOfficeHours] [tinyint] NULL,
	[R_ShowOfficeHours] [tinyint] NULL,
	[AG_ListingDescriptionLength] [int] NULL,
	[R_ListingDescriptionLength] [int] NULL,
	[AG_UpsellListHighlighted] [tinyint] NULL,
	[AG_UpsellListCoupon] [tinyint] NULL,
	[R_UpsellListCoupon] [tinyint] NULL,
	[AG_UpsellPropEmercial] [tinyint] NULL,
	[AG_UpsellPropCommunityVideo] [tinyint] NULL,
	[AG_UpsellPropFeaturedCommunityPlatinum] [tinyint] NULL,
	[AG_UpsellPropFeaturedCommunityGold] [tinyint] NULL,
	[AG_UpsellPropFeaturedCommunitySilver] [tinyint] NULL,
	[AG_UpsellPropVirtualBrochure] [tinyint] NULL,
	[AG_UpsellListCorporateListing] [tinyint] NULL,
	[AG_UpsellListCollegeListing] [tinyint] NULL,
	[AG_UpsellListMilitaryListing] [tinyint] NULL,
	[AG_UpsellListApartmentListing] [tinyint] NULL,
	[AG_UpsellPropPhotoUpgrade] [tinyint] NULL,
	[AG_UpsellMgmtManagementCoLogoDisplay] [tinyint] NULL,
	[AG_UpsellListSeniorListing] [tinyint] NULL,
	[AG_UpsellPropPropertyLogoDisplay] [tinyint] NULL,
	[AG_UpsellPropPremiumUpgrade] [tinyint] NULL,
	[AG_UpsellPropVideoSpokesModel] [tinyint] NULL,
	[AG_UpsellPropFrontPage] [tinyint] NULL,
	[AG_UpsellPropSpanish] [tinyint] NULL,
	[AG_UpsellPropCallRecording] [tinyint] NULL,
	[R_UpsellPropCallRecording] [tinyint] NULL,
	[AG_UpsellPropFormToPhone] [tinyint] NULL,
	[AG_UpsellPropRentalsPremier] [tinyint] NULL,
	[AG_UpsellPropRentalsFeatured] [tinyint] NULL,
	[AG_UpsellListRentalsListing] [tinyint] NULL,
	[AG_UpsellListFloorPlanUpgrade] [tinyint] NULL,
	[AG_UpsellListPayPerLead] [int] NULL,
	[AG_UpsellListRentalsSpotlightAd] [tinyint] NULL,
	[AG_UpsellListSpotLight] [tinyint] NULL,
	[AG_UpsellListPayPerLease] [tinyint] NULL,
	[AG_UpsellListDiamondMetro] [tinyint] NULL,
	[AG_UpsellListDiamondCity] [tinyint] NULL,
	[AG_UpsellListDiamondMax] [tinyint] NULL,
	[AG_UpsellListRentalsStandard] [tinyint] NULL,
	[AG_UpsellListCommunityCarousel] [tinyint] NULL,
	[AG_UpsellList30SecondVideo] [tinyint] NULL,
	[AG_UpsellList60SecondVideo] [tinyint] NULL,
	[AG_UpsellListRentalsCarousel] [tinyint] NULL,
	[AG_UpsellListRentalsStandardPlus] [tinyint] NULL,
	[AG_UpsellListMobileSpotLight] [tinyint] NULL,
	[AG_UpsellPropMobileDeal] [tinyint] NULL,
	[AG_UpsellPropDynamicLeadForm] [int] NULL,
	[AG_UpsellListIncomeRestricted] [tinyint] NULL,
	[AG_UpsellListPetFriendly] [tinyint] NULL,
	[AG_UpsellListLuxuryCommunity] [tinyint] NULL,
	[AG_UpsellPropRepMon] [int] NULL,
	[AG_UpsellPropSocialMediaMan] [int] NULL,
	[AG_UpsellListMobileDiamond] [int] NULL,
	[AG_UpsellListEZPay] [tinyint] NULL,
	[AG_UpsellMgmtPeelAd] [int] NULL,
	[AG_UpsellListSponsoredApartment] [int] NULL,
	[AG_UpsellListHDPanoTours] [int] NULL,
	[AG_UpsellListHDVideo] [int] NULL,
	[AG_UpsellListHDPhoto] [int] NULL,
	[AG_UpsellList3DFloorPlan] [int] NULL,
	[AG_UpsellListAGSites] [int] NULL,
	[AG_UpsellMediaCenter] [int] NULL,
	[AG_CR3AvgOverallRating] [numeric](16, 1) NULL,
	[R_CR3AvgOverallRating] [numeric](16, 1) NULL,
	[AG_CommunityVideoURLFulfilled] [tinyint] NULL,
	[AG_HDActiveFloorPlansFulfilled] [tinyint] NULL,
	[R_HDActiveFloorPlansFulfilled] [tinyint] NULL,
	[AG_HDActivePhotosFulfilled] [tinyint] NULL,
	[R_HDActivePhotosFulfilled] [tinyint] NULL,
	[AG_HDTourURLFulfilled] [tinyint] NULL,
	[AG_HDVideoURLFulfilled] [tinyint] NULL,
	[AG_LinkedFloorPlanFulfilled] [tinyint] NULL,
	[R_LinkedFloorPlanFulfilled] [tinyint] NULL,
	[AG_VirtualTourFulfilled] [tinyint] NULL,
	[AG_Linked3DFloorPlanFulfilled] [tinyint] NULL,
	[R_Linked3DFloorPlanFulfilled] [tinyint] NULL,
	[AG_LinkedRoomPlannerFulfilled] [tinyint] NULL,
	[R_LinkedRoomPlannerFulfilled] [tinyint] NULL,
	[AG_MobileDealFulfilled] [tinyint] NULL,
	[R_MobileDealFulfilled] [tinyint] NULL,
	[AG_LowPrice] [int] NULL,
	[R_LowPrice] [int] NULL,
	[AG_HighPrice] [int] NULL,
	[R_HighPrice] [int] NULL,
	[AG_IsSEM] [tinyint] NULL,
	[AG_IsOverThreshold] [tinyint] NULL,
	[AG_IsRentalPropToBeDELETED] [tinyint] NULL,
	[AG_CallTrackingInBook] [tinyint] NULL,
	[AG_CouponActiveOnSite] [tinyint] NULL,
	[R_CouponActiveOnSite] [tinyint] NULL,
	[AG_VerizonFIOS] [tinyint] NULL,
	[AG_ATTUverse] [tinyint] NULL,
	[AG_DIRECTV] [tinyint] NULL,
	[AG_BrightHouse] [tinyint] NULL,
	[AG_Charter] [tinyint] NULL,
	[AG_XfinitySP] [tinyint] NULL,
	[AG_XfinityDP] [tinyint] NULL,
	[AG_XfinityTP] [tinyint] NULL,
	[AG_TimeWarner] [tinyint] NULL,
	[AG_Ranking] [varchar](1) NULL,
	[AG_NumericRank] [numeric](15, 4) NULL,
	[AG_UniqueVisits] [int] NULL,
	[R_UniqueVisits] [int] NULL,
	[AG_UniqueVisits_Mobile] [int] NULL,
	[AG_UniqueVisits_Sites] [int] NULL,
	[AG_ViewsListingPage] [int] NULL,
	[AG_ViewsListingPage_Mobile] [int] NULL,
	[AG_ViewsListingPage_Sites] [int] NULL,
	[AG_ViewsEmercial] [int] NULL,
	[AG_ViewsVirtualBrochure] [int] NULL,
	[AG_ClicksSpotlightListing] [int] NULL,
	[AG_ClicksCommunityVideo] [int] NULL,
	[AG_ClicksSpotlightCommunityVideo] [int] NULL,
	[AG_ClicksListingWebLink] [int] NULL,
	[AG_ClicksMgtCoWebLink] [int] NULL,
	[R_ClicksMgtCoWebLink] [int] NULL,
	[AG_ClicksListingMap] [int] NULL,
	[AG_ClicksOnlineAppt] [int] NULL,
	[AG_ClicksOnlineApptSubmit] [int] NULL,
	[AG_ClicksOnlineAppl] [int] NULL,
	[AG_ClicksOnlineApplSubmit] [int] NULL,
	[AG_ClicksOnlineApptCR] [int] NULL,
	[AG_ClicksOnlineApplCR] [int] NULL,
	[AG_ClicksPrintableGuide] [int] NULL,
	[AG_ClicksWeCanCallYou] [int] NULL,
	[AG_ClicksMapDirections] [int] NULL,
	[AG_ClicksLeadSubmission] [int] NULL,
	[AG_ClicksSpotlightLeadSubmission] [int] NULL,
	[AG_ClicksPhotos] [int] NULL,
	[AG_ClicksSpotlightPhotos] [int] NULL,
	[AG_ClicksSpotlightPhotoPopup] [int] NULL,
	[AG_ClicksFloorPlans] [int] NULL,
	[AG_ClicksCheckYourCredit] [int] NULL,
	[AG_ClicksWebBuilderLink] [int] NULL,
	[AG_ClicksFeaturedMgtCo] [int] NULL,
	[AG_ClicksFrontPagePropLead] [int] NULL,
	[AG_ClicksLuxurySlideshow] [int] NULL,
	[AG_ClicksPanoramicTours] [int] NULL,
	[AG_ClicksHDVideos] [int] NULL,
	[AG_ClicksHDPhotos] [int] NULL,
	[AG_ClicksMgmtCoPeelAd] [int] NULL,
	[AG_ClicksReserveNow] [int] NULL,
	[AG_ImprSearchResults] [int] NULL,
	[R_ImprSearchResults] [int] NULL,
	[AG_ImprSearchResults_Rent] [int] NULL,
	[AG_ImprFrontCover] [int] NULL,
	[AG_ImprVisitCount] [int] NULL,
	[AG_TextMsgWeb] [int] NULL,
	[AG_TextMsgMobile] [int] NULL,
	[AG_CheckListingAvail] [int] NULL,
	[AG_ClicksSpotlightListingAvail] [int] NULL,
	[AG_ClicksVirtualTourListingAvail] [int] NULL,
	[AG_AGCPrintConnectedCalls] [int] NULL,
	[AG_AGCPrintMissedCalls] [int] NULL,
	[AG_ASGPrintConnectedCalls] [int] NULL,
	[AG_ASGPrintMissedCalls] [int] NULL,
	[AG_WebConnectedCalls] [int] NULL,
	[AG_WebMissedCalls] [int] NULL,
	[AG_RentalsConnectedCalls] [int] NULL,
	[AG_RentalsMissedCalls] [int] NULL,
	[AG_CTCConnectedCalls] [int] NULL,
	[AG_CTCMissedCalls] [int] NULL,
	[AG_PaidSPConnectedCalls] [int] NULL,
	[AG_PaidSPMissedCalls] [int] NULL,
	[AG_CombinedFeedsConnectedCalls] [int] NULL,
	[AG_CombinedFeedsMissedCalls] [int] NULL,
	[AG_GoogleConnectedCalls] [int] NULL,
	[AG_GoogleMissedCalls] [int] NULL,
	[AG_PPCConnectedCalls] [int] NULL,
	[AG_PPCMissedCalls] [int] NULL,
	[AG_LuxuryConnectedCalls] [int] NULL,
	[AG_LuxuryMissedCalls] [int] NULL,
	[AG_MarchexConnectedCalls] [int] NULL,
	[AG_MarchexMissedCalls] [int] NULL,
	[AG_CraigsListConnectedCalls] [int] NULL,
	[AG_CraigsListMissedCalls] [int] NULL,
	[AG_WebLocalTrackingNumberConnectedCalls] [int] NULL,
	[AG_WebLocalTrackingNumberMissedCalls] [int] NULL,
	[AG_RentalsLocalConnectedCalls] [int] NULL,
	[AG_RentalsLocalMissedCalls] [int] NULL,
	[AG_VideoConnectedCalls] [int] NULL,
	[AG_VideoMissedCalls] [int] NULL,
	[AG_SEMConnectedCalls] [int] NULL,
	[AG_SEMMissedCalls] [int] NULL,
	[AG_TruliaConnectedCalls] [int] NULL,
	[AG_TruliaMissedCalls] [int] NULL,
	[AG_RentConnectedCalls] [int] NULL,
	[R_RentConnectedCalls] [int] NULL,
	[AG_RentMissedCalls] [int] NULL,
	[R_RentMissedCalls] [int] NULL,
	[AG_RentOneWebConnectedCalls] [int] NULL,
	[R_RentOneWebConnectedCalls] [int] NULL,
	[AG_RentOneWebMissedCalls] [int] NULL,
	[R_RentOneWebMissedCalls] [int] NULL,
	[AG_RentMobileConnectedCalls] [int] NULL,
	[R_RentMobileConnectedCalls] [int] NULL,
	[AG_RentMobileMissedCalls] [int] NULL,
	[R_RentMobileMissedCalls] [int] NULL,
	[AG_RentAltRegConnectedCalls] [int] NULL,
	[R_RentAltRegConnectedCalls] [int] NULL,
	[AG_RentAltRegMissedCalls] [int] NULL,
	[R_RentAltRegMissedCalls] [int] NULL,
	[AG_LeadMailConnectedCalls] [int] NULL,
	[AG_LeadMailMissedCalls] [int] NULL,
	[AG_SMSConnectedCalls] [int] NULL,
	[AG_SMSMissedCalls] [int] NULL,
	[AG_MobileSEMConnectedCalls] [int] NULL,
	[AG_MobileSEMMissedCalls] [int] NULL,
	[AG_SitesConnectedCalls] [int] NULL,
	[AG_SitesMissedCalls] [int] NULL,
	[AG_AGEmailLeads] [int] NULL,
	[AG_MetroEmailLeads] [int] NULL,
	[AG_NeighborhoodEmailLeads] [int] NULL,
	[AG_AIMCOEmailLeads] [int] NULL,
	[AG_RentalsEmailLeads] [int] NULL,
	[AG_RentRentarEmailLeads] [int] NULL,
	[AG_RentalHousesEmailLeads] [int] NULL,
	[AG_iPhoneEmailLeads] [int] NULL,
	[AG_OodleEmailLeads] [int] NULL,
	[AG_AndroidEmailLeads] [int] NULL,
	[AG_HotpadsEmailLeads] [int] NULL,
	[AG_LuxuryEmailLeads] [int] NULL,
	[AG_CondoEmailLeads] [int] NULL,
	[AG_iPadEmailLeads] [int] NULL,
	[AG_TruliaEmailLeads] [int] NULL,
	[R_TruliaEmailLeads] [int] NULL,
	[AG_ZillowEmailLeads] [int] NULL,
	[AG_VerticalBrandsEmailLeads] [int] NULL,
	[AG_RDTFeedLeads] [int] NULL,
	[AG_PropSolutionsFeedLeads] [int] NULL,
	[AG_YieldFeedLeads] [int] NULL,
	[AG_EREIFeedLeads] [int] NULL,
	[AG_YardiRCFeedLeads] [int] NULL,
	[AG_AGMobileEmailLeads] [int] NULL,
	[AG_RentalsMobileEmailLeads] [int] NULL,
	[AG_RentalsAndroidEmailLeads] [int] NULL,
	[AG_RentalsIPhoneEmailLeads] [int] NULL,
	[AG_VastEmailLeads] [int] NULL,
	[AG_CampusHomesOnlineEmailLeads] [int] NULL,
	[AG_AGTabletEmailLeads] [int] NULL,
	[AG_AGKindleEmailLeads] [int] NULL,
	[AG_RentEmailLeads] [int] NULL,
	[R_RentEmailLeads] [int] NULL,
	[AG_LovelyEmailLeads] [int] NULL,
	[AG_SitesEmailLeads] [int] NULL,
	[AG_PlacementTier] [int] NULL,
	[AG_PrintProductPoints] [int] NULL,
	[AG_InternetProductPoints] [int] NULL,
	[AG_LegacyLoyaltyPoints] [int] NULL,
	[AG_ContractLoyaltyPoints] [int] NULL,
	[AG_MobilePoints] [int] NULL,
	[AG_LastUpdateYMDID] [int] NULL,
	[R_LastUpdateYMDID] [int] NULL,
	[AG_LinkedFloorPlan] [int] NULL,
	[R_LinkedFloorPlan] [int] NULL,
	[AG_Linked3DFloorPlan] [int] NULL,
	[R_Linked3DFloorPlan] [int] NULL,
	[AG_LinkedRoomPlanner] [int] NULL,
	[R_LinkedRoomPlanner] [int] NULL,
	[AG_RPLRANK] [numeric](8, 2) NULL,
	[AG_UpsellListBold] [tinyint] NULL,
	[AG_UpsellListFrontCover] [tinyint] NULL,
	[AG_UpsellPropPhotoFeature] [tinyint] NULL,
	[AG_UpsellMgmtManagementCoLogo] [tinyint] NULL,
	[AG_UpsellPropPropertyLogo] [tinyint] NULL,
	[AG_UpsellPropPremiumPackage] [tinyint] NULL,
	[AG_UpsellListFloorplanPkg] [tinyint] NULL,
	[AG_InternetPhoneLeads] [int] NULL,
	[R_InternetPhoneLeads] [int] NULL,
	[AG_InternetPhoneLeads_NoMobile] [int] NULL,
	[R_InternetPhoneLeads_NoMobile] [int] NULL,
	[AG_DigitalPhoneLeads] [int] NULL,
	[R_DigitalPhoneLeads] [int] NULL,
	[AG_EmailLeads] [int] NULL,
	[AG_InternetEmailLeads_NoMobile] [int] NULL,
	[R_InternetEmailLeads_NoMobile] [int] NULL,
	[AG_DigitalEmailLeads] [int] NULL,
	[R_DigitalEmailLeads] [int] NULL,
	[AG_AGCMissedCalls] [int] NULL,
	[AG_ASGMissedCalls] [int] NULL,
	[AG_AGCAllLeads] [int] NULL,
	[AG_ASGAllLeads] [int] NULL,
	[AG_AllMissedCalls] [int] NULL,
	[R_AllMissedCalls] [int] NULL,
	[AG_AllConnectedCalls] [int] NULL,
	[R_AllConnectedCalls] [int] NULL,
	[AG_AllLeads] [int] NULL,
	[R_AllLeads] [int] NULL,
	[AG_AllInternetLeads_NoMobile] [int] NULL,
	[R_AllInternetLeads_NoMobile] [int] NULL,
	[AG_AllDigitalLeads] [int] NULL,
	[R_AllDigitalLeads] [int] NULL,
	[AG_ThirdPartyFeedLeads] [int] NULL,
	[AG_WebsiteCalls] [int] NULL,
	[R_WebsiteCalls] [int] NULL,
	[AG_WebsiteEmails] [int] NULL,
	[R_WebsiteEmails] [int] NULL,
	[AG_WebsiteLeads_Rentals] [int] NULL,
	[AG_MobileEmails] [int] NULL,
	[R_MobileEmails] [int] NULL,
	[AG_MobileCalls] [int] NULL,
	[R_MobileCalls] [int] NULL,
	[AG_MobileLeads_AG] [int] NULL,
	[AG_MobileLeads_Rentals] [int] NULL,
	[AG_MobileAllLeads] [int] NULL,
	[R_MobileAllLeads] [int] NULL,
	[AG_AllRentLeads] [int] NULL,
	[AG_AllRentCalls] [int] NULL,
	[AG_MRSyndicationEmailLeads] [int] NULL,
	[AG_MRAGEmailLeads] [int] NULL,
	[AG_MRAGWebPhoneLeads] [int] NULL,
	[AG_MRAppsEmailLeads] [int] NULL,
	[AG_MRPhoneCalls] [int] NULL,
	[R_InvoicedLeases] [int] NULL,
	[R_LeaseMgtCoID] [int] NULL,
	[R_MapClicks] [int] NULL,
	[R_UpsellRentFeaturedPlacement] [tinyint] NULL,
	[R_UpsellRentListing] [tinyint] NULL,
	[R_UpsellRentMetroFL] [tinyint] NULL,
	[R_UpsellRentNoVacancy] [tinyint] NULL,
	[R_UpsellRentPTE] [tinyint] NULL,
	[R_UpsellRentRewardCard] [tinyint] NULL,
	[R_UpsellRentSubscriptionModel] [tinyint] NULL,
	[R_UpsellRentVIPPlacement] [tinyint] NULL,
PRIMARY KEY CLUSTERED 
(
	[YearMonth] ASC,
	[ListingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [Mart].[LocatorListings]    Script Date: 9/5/2017 7:20:04 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Mart].[LocatorListings](
	[YMDID] [int] NULL,
	[YearMonth] [int] NULL,
	[ListingID] [int] NULL,
	[RentListingID] [varchar](64) NULL,
	[StatusID] [int] NULL,
	[StatusIDAG] [int] NULL,
	[StatusIDRent] [int] NULL,
	[StatusIDRentalHouses] [int] NULL,
	[StatusIDRentals] [int] NULL,
	[DataSource] [varchar](50) NULL,
	[LowPrice] [int] NULL,
	[HighPrice] [int] NULL,
	[MinBedrooms] [int] NULL,
	[MaxBedrooms] [int] NULL,
	[ShowOfficeHours] [int] NULL,
	[ActivePhotos] [int] NULL,
	[ActiveFloorPlans] [int] NULL,
	[ActiveAmenities] [int] NULL,
	[FeedConnectedCalls] [int] NOT NULL,
	[FeedMissedCalls] [int] NOT NULL,
	[MobileSEMConnectedCalls] [int] NULL,
	[MobileSEMMissedCalls] [int] NULL,
	[RentalsConnectedCalls] [int] NULL,
	[RentalsMissedCalls] [int] NULL,
	[RentOneWebConnectedCalls] [int] NULL,
	[RentOneWebMissedCalls] [int] NULL,
	[SEMConnectedCalls] [int] NULL,
	[SEMMissedCalls] [int] NULL,
	[TruliaConnectedCalls] [int] NULL,
	[TruliaMissedCalls] [int] NULL,
	[WebConnectedCalls] [int] NULL,
	[WebMissedCalls] [int] NULL,
	[WebLocalTrackingNumberConnectedCalls] [int] NULL,
	[WebLocalTrackingNumberMissedCalls] [int] NULL,
	[AGAndroidEmailLeads] [int] NULL,
	[AGAndroidEmailLeadsAdditional] [int] NULL,
	[AGEmailLeads] [int] NULL,
	[AGEmailLeadsAdditional] [int] NULL,
	[AGiPadEmailLeads] [int] NULL,
	[AGiPadEmailLeadsAdditional] [int] NULL,
	[AGiPhoneEmailLeads] [int] NULL,
	[AGiPhoneEmailLeadsAdditional] [int] NULL,
	[AGKindleEmailLeads] [int] NULL,
	[AGKindleEmailLeadsAdditional] [int] NULL,
	[AGMobileEmailLeads] [int] NULL,
	[AGMobileEmailLeadsAdditional] [int] NULL,
	[AGTabletEmailLeads] [int] NULL,
	[AGTabletEmailLeadsAdditional] [int] NULL,
	[MetroEmailLeads] [int] NULL,
	[MetroEmailLeadsAdditional] [int] NULL,
	[NeighborhoodEmailLeads] [int] NULL,
	[NeighborhoodEmailLeadsAdditional] [int] NULL,
	[RentalHousesEmailLeads] [int] NULL,
	[RentalHousesEmailLeadsAdditional] [int] NULL,
	[RentalsAndroidEmailLeads] [int] NULL,
	[RentalsAndroidEmailLeadsAdditional] [int] NULL,
	[RentalsEmailLeads] [int] NULL,
	[RentalsEmailLeadsAdditional] [int] NULL,
	[RentalsIPhoneEmailLeads] [int] NULL,
	[RentalsIPhoneEmailLeadsAdditional] [int] NULL,
	[RentalsMobileEmailLeads] [int] NULL,
	[RentalsMobileEmailLeadsAdditional] [int] NULL,
	[RentAndroidEmailLeads] [int] NOT NULL,
	[RentAndroidEmailLeadsAdditional] [int] NOT NULL,
	[RentEmailLeads] [int] NOT NULL,
	[RentEmailLeadsAdditional] [int] NOT NULL,
	[RentiPadEmailLeads] [int] NOT NULL,
	[RentiPadEmailLeadsAdditional] [int] NOT NULL,
	[RentiPhoneEmailLeads] [int] NOT NULL,
	[RentiPhoneEmailLeadsAdditional] [int] NOT NULL,
	[TruliaEmailLeads] [int] NULL,
	[TruliaEmailLeadsAdditional] [int] NULL,
	[ClicksCommunityVideoAG] [int] NOT NULL,
	[ClicksCR3AG] [int] NOT NULL,
	[ClicksCR3Rent] [int] NOT NULL,
	[ClicksDiamondMaxCheckAvailAG] [int] NOT NULL,
	[ClicksDiamondMaxPhotoAG] [int] NOT NULL,
	[ClicksFeatCommCheckAvailAG] [int] NOT NULL,
	[ClicksFeatCommCheckAvailRent] [int] NOT NULL,
	[ClicksFeaturedCommunityAG] [int] NOT NULL,
	[ClicksFeaturedCommunityRent] [int] NOT NULL,
	[ClicksFloorplanAG] [int] NOT NULL,
	[ClicksFloorplanRent] [int] NOT NULL,
	[ClicksHDFloorplanAG] [int] NOT NULL,
	[ClicksHDFloorplanRent] [int] NOT NULL,
	[ClicksHDPanoTourAG] [int] NOT NULL,
	[ClicksHDPanoTourRent] [int] NOT NULL,
	[ClicksHDPhotoAG] [int] NOT NULL,
	[ClicksHDPhotoRent] [int] NOT NULL,
	[ClicksHDVideoAG] [int] NOT NULL,
	[ClicksHDVideoRent] [int] NOT NULL,
	[ClicksLeadSubmissionAG] [int] NOT NULL,
	[ClicksLeadSubmissionRent] [int] NOT NULL,
	[ClicksMapAG] [int] NOT NULL,
	[ClicksMapRent] [int] NOT NULL,
	[ClicksMgtCoPeelAdAG] [int] NOT NULL,
	[ClicksMgtCoPeelAdRent] [int] NOT NULL,
	[ClicksMgtCoURLAG] [int] NOT NULL,
	[ClicksMgtCoURLRent] [int] NOT NULL,
	[ClicksPhotosAG] [int] NOT NULL,
	[ClicksPhotosRent] [int] NOT NULL,
	[ClicksReserveNowAG] [int] NOT NULL,
	[ClicksReserveNowRent] [int] NOT NULL,
	[ClicksSpotlightRentSpecialsAG] [int] NOT NULL,
	[ClicksSpotlightRentSpecialsRent] [int] NOT NULL,
	[ClicksSpotlightReserveNowAG] [int] NOT NULL,
	[ClicksSRPListingCheckAvailAG] [int] NOT NULL,
	[ClicksSRPListingCheckAvailRent] [int] NOT NULL,
	[ClicksWebURLAG] [int] NOT NULL,
	[ClicksWebURLRent] [int] NOT NULL,
	[ClicksCheckAvailability] [int] NOT NULL,
	[SRPListingImprAG] [int] NULL,
	[SRPListingImprRent] [int] NOT NULL,
	[SRPListingImprRentals] [int] NULL,
	[SRPUniqueVisitsAG] [int] NULL,
	[SRPUniqueVisitsRent] [int] NOT NULL,
	[SRPUniqueVisitsRentals] [int] NULL,
	[UniqueVisitsWebAG] [int] NULL,
	[UniqueVisitsWebRent] [int] NOT NULL,
	[UniqueVisitsWebRentals] [int] NULL,
	[UniqueVisitsMobileAG] [int] NOT NULL,
	[UniqueVisitsMobileRent] [int] NOT NULL,
	[UniqueVisitsMobileRentals] [int] NOT NULL,
	[ViewsListingPageMobileAG] [int] NOT NULL,
	[ViewsListingPageMobileRent] [int] NOT NULL,
	[ViewsListingPageMobileRentals] [int] NOT NULL,
	[ViewsListingPageWebAG] [int] NOT NULL,
	[ViewsListingPageWebRent] [int] NOT NULL,
	[ViewsListingPageWebRentals] [int] NOT NULL,
	[ClicksDiamondMaxPhoto]  AS ([ClicksDiamondMaxPhotoAG]+(0)),
	[ClicksDiamondMaxCheckAvail]  AS ([ClicksDiamondMaxCheckAvailAG]+(0)),
	[ClicksFloorplan]  AS ([ClicksFloorplanAG]+[ClicksFloorplanRent]),
	[ClicksHDFloorplan]  AS ([ClicksHDFloorplanAG]+[ClicksHDFloorplanRent]),
	[ClicksPhotos]  AS ([ClicksPhotosAG]+[ClicksPhotosRent]),
	[ClicksHDPhoto]  AS ([ClicksHDPhotoAG]+[ClicksHDPhotoRent]),
	[ClicksHDVideo]  AS ([ClicksHDVideoAG]+[ClicksHDVideoRent]),
	[ClicksHDPanoTour]  AS ([ClicksHDPanoTourAG]+[ClicksHDPanoTourRent]),
	[ClicksMap]  AS ([ClicksMapAG]+[ClicksMapRent]),
	[ClicksWebURL]  AS ([ClicksWebURLAG]+[ClicksWebURLRent]),
	[ClicksMgtCoPeelAd]  AS ([ClicksMgtCoPeelAdAG]+[ClicksMgtCoPeelAdRent]),
	[ClicksReserveNow]  AS ([ClicksReserveNowAG]+[ClicksReserveNowRent]),
	[ClicksFeaturedCommunity]  AS ([ClicksFeaturedCommunityAG]+[ClicksFeaturedCommunityRent]),
	[ClicksFeatCommCheckAvail]  AS ([ClicksFeatCommCheckAvailAG]+[ClicksFeatCommCheckAvailRent]),
	[ClicksSRPListingCheckAvail]  AS ([ClicksSRPListingCheckAvailAG]+[ClicksSRPListingCheckAvailRent]),
	[ClicksCR3]  AS ([ClicksCR3AG]+[ClicksCR3Rent]),
	[ClicksSpotlightRentSpecials]  AS ([ClicksSpotlightRentSpecialsAG]+[ClicksSpotlightRentSpecialsRent]),
	[ClicksSpotlightReserveNow]  AS ([ClicksSpotlightReserveNowAG]+(0)),
	[SRPListingImpr]  AS ([SRPListingImprAG]+[SRPListingImprRent]),
	[SRPUniqueVisit]  AS ([SRPUniqueVisitsAG]+[SRPUniqueVisitsRent]),
	[UniqueVisits]  AS ([UniqueVisitsWebAG]+[UniqueVisitsWebRent]),
	[UniqueVisitsMobile]  AS ([UniqueVisitsMobileAG]+[UniqueVisitsMobileRent]),
	[ViewsListingPageWeb]  AS ([ViewsListingPageWebAG]+[ViewsListingPageWebRent]),
	[ViewsListingPageMobile]  AS ([ViewsListingPageMobileAG]+[ViewsListingPageMobileRent]),
	[ConnectedCalls]  AS ((((((([FeedConnectedCalls]+[MobileSEMConnectedCalls])+[RentalsConnectedCalls])+[RentOneWebConnectedCalls])+[SEMConnectedCalls])+[TruliaConnectedCalls])+[WebConnectedCalls])+[WebLocalTrackingNumberConnectedCalls]),
	[ConnectedCallsAG]  AS (((((([FeedConnectedCalls]+[MobileSEMConnectedCalls])+[RentalsConnectedCalls])+[SEMConnectedCalls])+[TruliaConnectedCalls])+[WebConnectedCalls])+[WebLocalTrackingNumberConnectedCalls]),
	[ConnectedCallsRent]  AS ([RentOneWebConnectedCalls]),
	[DesktopConnectedCalls]  AS ((((([FeedConnectedCalls]+[RentalsConnectedCalls])+[RentOneWebConnectedCalls])+[SEMConnectedCalls])+[TruliaConnectedCalls])+[WebLocalTrackingNumberConnectedCalls]),
	[DesktopConnectedCallsAG]  AS (((([FeedConnectedCalls]+[RentalsConnectedCalls])+[SEMConnectedCalls])+[TruliaConnectedCalls])+[WebLocalTrackingNumberConnectedCalls]),
	[DesktopConnectedCallsRent]  AS ([RentOneWebConnectedCalls]),
	[MobileConnectedCalls]  AS ([MobileSEMConnectedCalls]+[WebConnectedCalls]),
	[MobileConnectedCallsAG]  AS ([MobileSEMConnectedCalls]+[WebConnectedCalls]),
	[MobileConnectedCallsRent]  AS ((0)),
	[MissedCalls]  AS ((((((([FeedMissedCalls]+[MobileSEMMissedCalls])+[RentalsMissedCalls])+[RentOneWebMissedCalls])+[SEMMissedCalls])+[TruliaMissedCalls])+[WebMissedCalls])+[WebLocalTrackingNumberMissedCalls]),
	[MissedCallsAG]  AS (((((([FeedMissedCalls]+[MobileSEMMissedCalls])+[RentalsMissedCalls])+[SEMMissedCalls])+[TruliaMissedCalls])+[WebMissedCalls])+[WebLocalTrackingNumberMissedCalls]),
	[MissedCallsRent]  AS ([RentOneWebMissedCalls]),
	[DesktopMissedCalls]  AS ((((([FeedMissedCalls]+[RentalsMissedCalls])+[RentOneWebMissedCalls])+[SEMMissedCalls])+[TruliaMissedCalls])+[WebLocalTrackingNumberMissedCalls]),
	[DesktopMissedCallsAG]  AS ((((([FeedMissedCalls]+[MobileSEMMissedCalls])+[RentalsMissedCalls])+[SEMMissedCalls])+[TruliaMissedCalls])+[WebLocalTrackingNumberMissedCalls]),
	[DesktopMissedCallsRent]  AS ([RentOneWebMissedCalls]),
	[MobileMissedCalls]  AS ([MobileSEMMissedCalls]+[WebMissedCalls]),
	[MobileMissedCallsAG]  AS ([MobileSEMMissedCalls]+[WebMissedCalls]),
	[MobileMissedCallsRent]  AS ((0)),
	[PhoneLeads]  AS ((((((((((((((([FeedConnectedCalls]+[MobileSEMConnectedCalls])+[RentalsConnectedCalls])+[RentOneWebConnectedCalls])+[SEMConnectedCalls])+[TruliaConnectedCalls])+[WebConnectedCalls])+[WebLocalTrackingNumberConnectedCalls])+[FeedMissedCalls])+[MobileSEMMissedCalls])+[RentalsMissedCalls])+[RentOneWebMissedCalls])+[SEMMissedCalls])+[TruliaMissedCalls])+[WebMissedCalls])+[WebLocalTrackingNumberMissedCalls]),
	[PhoneLeadsAG]  AS ((((((((((((([FeedConnectedCalls]+[MobileSEMConnectedCalls])+[RentalsConnectedCalls])+[SEMConnectedCalls])+[TruliaConnectedCalls])+[WebConnectedCalls])+[WebLocalTrackingNumberConnectedCalls])+[FeedMissedCalls])+[MobileSEMMissedCalls])+[RentalsMissedCalls])+[SEMMissedCalls])+[TruliaMissedCalls])+[WebMissedCalls])+[WebLocalTrackingNumberMissedCalls]),
	[PhoneLeadsRent]  AS ([RentOneWebConnectedCalls]+[RentOneWebMissedCalls]),
	[DesktopPhoneLeads]  AS ((((((((((([FeedConnectedCalls]+[RentalsConnectedCalls])+[RentOneWebConnectedCalls])+[SEMConnectedCalls])+[TruliaConnectedCalls])+[WebLocalTrackingNumberConnectedCalls])+[FeedMissedCalls])+[RentalsMissedCalls])+[RentOneWebMissedCalls])+[SEMMissedCalls])+[TruliaMissedCalls])+[WebLocalTrackingNumberMissedCalls]),
	[DesktopPhoneLeadsAG]  AS ((((((((((([FeedConnectedCalls]+[MobileSEMConnectedCalls])+[RentalsConnectedCalls])+[SEMConnectedCalls])+[TruliaConnectedCalls])+[WebLocalTrackingNumberConnectedCalls])+[FeedMissedCalls])+[MobileSEMMissedCalls])+[RentalsMissedCalls])+[SEMMissedCalls])+[TruliaMissedCalls])+[WebLocalTrackingNumberMissedCalls]),
	[DesktopPhoneLeadsRent]  AS ([RentOneWebConnectedCalls]+[RentOneWebMissedCalls]),
	[MobilePhoneLeads]  AS ((([MobileSEMConnectedCalls]+[WebConnectedCalls])+[MobileSEMMissedCalls])+[WebMissedCalls]),
	[MobilePhoneLeadsAG]  AS ((([MobileSEMConnectedCalls]+[WebConnectedCalls])+[MobileSEMMissedCalls])+[WebMissedCalls]),
	[MobilePhoneLeadsRent]  AS ((0)),
	[EmailLeads]  AS (((((((((((((((((([AGAndroidEmailLeads]+[AGEmailLeads])+[AGiPadEmailLeads])+[AGiPhoneEmailLeads])+[AGKindleEmailLeads])+[AGMobileEmailLeads])+[AGTabletEmailLeads])+[MetroEmailLeads])+[NeighborhoodEmailLeads])+[RentalHousesEmailLeads])+[RentalsAndroidEmailLeads])+[RentalsEmailLeads])+[RentalsIPhoneEmailLeads])+[RentalsMobileEmailLeads])+[RentAndroidEmailLeads])+[RentEmailLeads])+[RentiPadEmailLeads])+[RentiPhoneEmailLeads])+[TruliaEmailLeads]),
	[EmailLeadsAG]  AS (((((((((((((([AGAndroidEmailLeads]+[AGEmailLeads])+[AGiPadEmailLeads])+[AGiPhoneEmailLeads])+[AGKindleEmailLeads])+[AGMobileEmailLeads])+[AGTabletEmailLeads])+[MetroEmailLeads])+[NeighborhoodEmailLeads])+[RentalHousesEmailLeads])+[RentalsAndroidEmailLeads])+[RentalsEmailLeads])+[RentalsIPhoneEmailLeads])+[RentalsMobileEmailLeads])+[TruliaEmailLeads]),
	[EmailLeadsRent]  AS ((([RentAndroidEmailLeads]+[RentEmailLeads])+[RentiPadEmailLeads])+[RentiPhoneEmailLeads]),
	[DesktopEmailLeads]  AS (((((([AGEmailLeads]+[MetroEmailLeads])+[NeighborhoodEmailLeads])+[RentalHousesEmailLeads])+[RentalsEmailLeads])+[RentEmailLeads])+[TruliaEmailLeads]),
	[DesktopEmailLeadsAG]  AS ((((([AGEmailLeads]+[MetroEmailLeads])+[NeighborhoodEmailLeads])+[RentalHousesEmailLeads])+[RentalsEmailLeads])+[TruliaEmailLeads]),
	[DesktopEmailLeadsRent]  AS ([RentEmailLeads]),
	[MobileEmailLeads]  AS ((((((((((([AGAndroidEmailLeads]+[AGiPadEmailLeads])+[AGiPhoneEmailLeads])+[AGKindleEmailLeads])+[AGMobileEmailLeads])+[AGTabletEmailLeads])+[RentalsAndroidEmailLeads])+[RentalsIPhoneEmailLeads])+[RentalsMobileEmailLeads])+[RentAndroidEmailLeads])+[RentiPadEmailLeads])+[RentiPhoneEmailLeads]),
	[MobileEmailLeadsAG]  AS (((((((([AGAndroidEmailLeads]+[AGiPadEmailLeads])+[AGiPhoneEmailLeads])+[AGKindleEmailLeads])+[AGMobileEmailLeads])+[AGTabletEmailLeads])+[RentalsAndroidEmailLeads])+[RentalsIPhoneEmailLeads])+[RentalsMobileEmailLeads]),
	[MobileEmailLeadsRent]  AS (([RentAndroidEmailLeads]+[RentiPadEmailLeads])+[RentiPhoneEmailLeads]),
	[DesktopLeads]  AS (((((((((((((((((([FeedConnectedCalls]+[RentalsConnectedCalls])+[RentOneWebConnectedCalls])+[SEMConnectedCalls])+[TruliaConnectedCalls])+[WebLocalTrackingNumberConnectedCalls])+[FeedMissedCalls])+[RentalsMissedCalls])+[RentOneWebMissedCalls])+[SEMMissedCalls])+[TruliaMissedCalls])+[WebLocalTrackingNumberMissedCalls])+[AGEmailLeads])+[MetroEmailLeads])+[NeighborhoodEmailLeads])+[RentalHousesEmailLeads])+[RentalsEmailLeads])+[RentEmailLeads])+[TruliaEmailLeads]),
	[MobileLeads]  AS ((((((((((((((([MobileSEMConnectedCalls]+[WebConnectedCalls])+[MobileSEMMissedCalls])+[WebMissedCalls])+[AGAndroidEmailLeads])+[AGiPadEmailLeads])+[AGiPhoneEmailLeads])+[AGKindleEmailLeads])+[AGMobileEmailLeads])+[AGTabletEmailLeads])+[RentalsAndroidEmailLeads])+[RentalsIPhoneEmailLeads])+[RentalsMobileEmailLeads])+[RentAndroidEmailLeads])+[RentiPadEmailLeads])+[RentiPhoneEmailLeads]),
	[AdditionalEmailLeads]  AS (((((((((((((((((([AGAndroidEmailLeadsAdditional]+[AGEmailLeadsAdditional])+[AGiPadEmailLeadsAdditional])+[AGiPhoneEmailLeadsAdditional])+[AGKindleEmailLeadsAdditional])+[AGMobileEmailLeadsAdditional])+[AGTabletEmailLeadsAdditional])+[MetroEmailLeadsAdditional])+[NeighborhoodEmailLeadsAdditional])+[RentalHousesEmailLeadsAdditional])+[RentalsAndroidEmailLeadsAdditional])+[RentalsEmailLeadsAdditional])+[RentalsIPhoneEmailLeadsAdditional])+[RentalsMobileEmailLeadsAdditional])+[RentAndroidEmailLeadsAdditional])+[RentEmailLeadsAdditional])+[RentiPadEmailLeadsAdditional])+[RentiPhoneEmailLeadsAdditional])+[TruliaEmailLeadsAdditional]),
	[AllLeads]  AS (((((((((((((((((((((((((((((((((([FeedConnectedCalls]+[MobileSEMConnectedCalls])+[RentalsConnectedCalls])+[RentOneWebConnectedCalls])+[SEMConnectedCalls])+[TruliaConnectedCalls])+[WebConnectedCalls])+[WebLocalTrackingNumberConnectedCalls])+[FeedMissedCalls])+[MobileSEMMissedCalls])+[RentalsMissedCalls])+[RentOneWebMissedCalls])+[SEMMissedCalls])+[TruliaMissedCalls])+[WebMissedCalls])+[WebLocalTrackingNumberMissedCalls])+[AGAndroidEmailLeads])+[AGEmailLeads])+[AGiPadEmailLeads])+[AGiPhoneEmailLeads])+[AGKindleEmailLeads])+[AGMobileEmailLeads])+[AGTabletEmailLeads])+[MetroEmailLeads])+[NeighborhoodEmailLeads])+[RentalHousesEmailLeads])+[RentalsAndroidEmailLeads])+[RentalsEmailLeads])+[RentalsIPhoneEmailLeads])+[RentalsMobileEmailLeads])+[RentAndroidEmailLeads])+[RentEmailLeads])+[RentiPadEmailLeads])+[RentiPhoneEmailLeads])+[TruliaEmailLeads])
) ON [PRIMARY]

GO
/****** Object:  Index [cuidx_YMDID_ListingID_Loc]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE UNIQUE CLUSTERED INDEX [cuidx_YMDID_ListingID_Loc] ON [Mart].[LocatorListings]
(
	[YMDID] ASC,
	[ListingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [Mart].[MediaCenterCampaigns]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Mart].[MediaCenterCampaigns](
	[MCCID] [int] IDENTITY(1,1) NOT NULL,
	[CampaignId] [int] NULL,
	[PropertyID] [int] NULL,
	[CampaignName] [varchar](100) NULL,
	[Type] [varchar](50) NULL,
	[Status] [varchar](50) NULL,
	[CampaignType] [varchar](50) NULL,
	[Created] [datetime] NULL,
	[Scheduled] [datetime] NULL,
	[Sent] [datetime] NULL,
	[SendFromEmail] [varchar](255) NULL,
	[TotalRecipients] [int] NULL,
	[TotalMessagesDelivered] [int] NULL,
	[SurveySubmissions] [int] NULL,
	[MessagesPendingDelivery] [int] NULL,
	[BouncedMessages] [int] NULL,
	[OptOutRequests] [int] NULL,
	[TimesOpened] [int] NULL,
	[TotalTimesOpened] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Mart].[MediaCenterCampaigns_WithDups]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Mart].[MediaCenterCampaigns_WithDups](
	[MCCID] [int] IDENTITY(1,1) NOT NULL,
	[CampaignId] [int] NULL,
	[PropertyID] [int] NULL,
	[CampaignName] [varchar](100) NULL,
	[Type] [varchar](50) NULL,
	[Status] [varchar](50) NULL,
	[CampaignType] [varchar](50) NULL,
	[Created] [datetime] NULL,
	[Scheduled] [datetime] NULL,
	[Sent] [datetime] NULL,
	[SendFromEmail] [varchar](255) NULL,
	[TotalRecipients] [int] NULL,
	[TotalMessagesDelivered] [int] NULL,
	[SurveySubmissions] [int] NULL,
	[MessagesPendingDelivery] [int] NULL,
	[BouncedMessages] [int] NULL,
	[OptOutRequests] [int] NULL,
	[TimesOpened] [int] NULL,
	[TotalTimesOpened] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Mart].[MediaCenterPropertyContactCounts]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Mart].[MediaCenterPropertyContactCounts](
	[MCPCID] [int] IDENTITY(1,1) NOT NULL,
	[PropertyId] [int] NULL,
	[ContactType] [varchar](50) NULL,
	[ContactsUploaded] [int] NULL,
	[YMDID] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Mart].[PhoneCallAppointmentSetPrediction]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Mart].[PhoneCallAppointmentSetPrediction](
	[CallID] [nvarchar](50) NOT NULL,
	[Prediction] [int] NULL,
	[YMDID] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[CallID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [Mart].[PhoneLeads]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Mart].[PhoneLeads](
	[Website] [varchar](4) NULL,
	[YMDID] [int] NULL,
	[CallId] [varchar](50) NULL,
	[ListingID] [int] NULL,
	[RentPropertyID] [int] NULL,
	[PropertyID] [int] NULL,
	[CallerName] [varchar](255) NULL,
	[CallerPhoneNumber] [varchar](15) NULL,
	[PublishedPhoneNumber] [varchar](10) NULL,
	[TargetPhoneNumber] [varchar](10) NULL,
	[CallStartDateTime] [datetime] NULL,
	[CallEndDateTime] [datetime] NULL,
	[DurationInSeconds] [int] NULL,
	[CallStatus] [int] NULL,
	[CallSource] [varchar](2) NULL,
	[CallType] [varchar](25) NULL,
	[AudioURL] [varchar](500) NULL,
	[CallLoadHour] [tinyint] NULL,
	[CallLoadYMDID] [int] NULL,
	[CallEndHour] [int] NULL,
	[DateAddedYMDID] [int] NULL,
	[CallerLocation] [varchar](255) NULL,
	[CallerIP] [varchar](255) NULL,
	[CallerAddress] [varchar](255) NULL,
	[CallerCity] [varchar](255) NULL,
	[CallerState] [varchar](255) NULL,
	[CallerZip] [varchar](255) NULL,
	[LinkName] [varchar](255) NULL,
	[LinkID] [varchar](255) NULL,
	[Population] [varchar](255) NULL,
	[AvgTravelTimeToWork] [varchar](255) NULL,
	[MedianHouseholdIncome] [varchar](255) NULL,
	[PerCapitaIncome] [varchar](255) NULL,
	[MedianEarnings] [varchar](255) NULL,
	[MedianContractRent] [varchar](255) NULL,
	[MedianRentAsked] [varchar](255) NULL,
	[MedianGrossRent] [varchar](255) NULL,
	[MedianPriceAsked] [varchar](255) NULL,
	[MedianRealEstateTaxes] [varchar](255) NULL,
	[Households] [varchar](255) NULL,
	[OwnerHouseholds] [varchar](255) NULL,
	[RenterHouseholds] [varchar](255) NULL,
	[CallerURL] [nvarchar](255) NULL,
	[CallerTrimSilenceURL] [nvarchar](255) NULL,
	[ReceiverURL] [nvarchar](255) NULL,
	[ActualCallDuration] [int] NULL,
	[CallerTrimBeginning] [int] NULL,
	[TotalCallerTrimTalkTime] [int] NULL,
	[EurekaID] [int] NULL,
	[IsAbandoned] [int] NULL,
	[TimePriorToCallerSpeaking] [int] NULL,
	[MP3URL] [nvarchar](255) NULL,
	[BusinessModel] [varchar](15) NULL,
	[AnalyticsResult] [varchar](75) NULL,
	[AnalyticsMethod] [varchar](75) NULL
) ON [PRIMARY]

GO
/****** Object:  Index [cidx_YMDID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE CLUSTERED INDEX [cidx_YMDID] ON [Mart].[PhoneLeads]
(
	[YMDID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [Mart].[SmallPropertyListings]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Mart].[SmallPropertyListings](
	[YMDID] [int] NOT NULL,
	[YearMonth] [int] NOT NULL,
	[StatusIDAG] [int] NOT NULL,
	[StatusIDRent] [int] NOT NULL,
	[DisplayListingID] [varchar](30) NOT NULL,
	[ListingID] [int] NOT NULL,
	[PropertyIDAG] [int] NOT NULL,
	[PropertyIDRent] [int] NOT NULL,
	[IsRentals] [tinyint] NOT NULL,
	[IsRentalHouses] [tinyint] NOT NULL,
	[IsLovely] [tinyint] NOT NULL,
	[IsRentSmallProp] [tinyint] NOT NULL,
	[ShowPricing] [tinyint] NULL,
	[LowPrice] [int] NOT NULL,
	[HighPrice] [int] NOT NULL,
	[ActiveAmenities] [int] NOT NULL,
	[ActiveFloorPlans] [int] NOT NULL,
	[ActivePhotos] [int] NOT NULL,
	[UniqueVisitsAG] [int] NOT NULL,
	[UniqueVisitsRent] [int] NOT NULL,
	[UniqueVisitsMobileAG] [int] NOT NULL,
	[UniqueVisitsMobileRent] [int] NOT NULL,
	[ViewsListingPageWebAG] [int] NOT NULL,
	[ViewsListingPageWebRent] [int] NOT NULL,
	[ViewsListingPageMobileAG] [int] NOT NULL,
	[ViewsListingPageMobileRent] [int] NOT NULL,
	[SRPListingImprAG] [int] NOT NULL,
	[SRPListingImprRent] [int] NOT NULL,
	[SRPUniqueVisitAG] [int] NOT NULL,
	[SRPUniqueVisitRent] [int] NOT NULL,
	[InternetConnectedCalls] [int] NOT NULL,
	[InternetMissedCalls] [int] NOT NULL,
	[MobileConnectedCalls] [int] NOT NULL,
	[MobileMissedCalls] [int] NOT NULL,
	[EmailLeadsAG] [int] NOT NULL,
	[MobileEmailLeadsAG] [int] NOT NULL,
	[IphoneEmailLeadsAG] [int] NOT NULL,
	[AndroidEmailLeadsAG] [int] NOT NULL,
	[IPadEmailLeadsAG] [int] NOT NULL,
	[TabletEmailLeadsAG] [int] NOT NULL,
	[KindleEmailLeadsAG] [int] NOT NULL,
	[EmailLeadsRent] [int] NOT NULL,
	[MobileEmailLeadsRent] [int] NOT NULL,
	[IphoneEmailLeadsRent] [int] NOT NULL,
	[AndroidEmailLeadsRent] [int] NOT NULL,
	[IPadEmailLeadsRent] [int] NOT NULL,
	[TabletEmailLeadsRent] [int] NOT NULL,
	[KindleEmailLeadsRent] [int] NOT NULL,
	[EmailLeadsRentals] [int] NOT NULL,
	[MobileEmailLeadsRentals] [int] NOT NULL,
	[AndroidEmailLeadsRentals] [int] NOT NULL,
	[IphoneEmailLeadsRentals] [int] NOT NULL,
	[AGTotalEmailLeads]  AS ((((([EmailLeadsAG]+[IphoneEmailLeadsAG])+[IPadEmailLeadsAG])+[AndroidEmailLeadsAG])+[TabletEmailLeadsAG])+[KindleEmailLeadsAG]),
	[RentTotalEmailLeads]  AS ((((([EmailLeadsRent]+[IphoneEmailLeadsRent])+[IPadEmailLeadsRent])+[AndroidEmailLeadsRent])+[TabletEmailLeadsRent])+[KindleEmailLeadsRent])
) ON [PRIMARY]

GO
/****** Object:  Index [cidx_ymdid]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE CLUSTERED INDEX [cidx_ymdid] ON [Mart].[SmallPropertyListings]
(
	[YMDID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [Mart].[SmallPropertyListings_OLD_20160516]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Mart].[SmallPropertyListings_OLD_20160516](
	[YMDID] [int] NOT NULL,
	[YearMonth] [int] NOT NULL,
	[StatusIDAG] [int] NOT NULL,
	[StatusIDRent] [int] NOT NULL,
	[DisplayListingID] [varchar](30) NOT NULL,
	[ListingID] [int] NOT NULL,
	[PropertyIDAG] [int] NOT NULL,
	[PropertyIDRent] [int] NOT NULL,
	[IsRentals] [tinyint] NOT NULL,
	[IsRentalHouses] [tinyint] NOT NULL,
	[IsLovely] [tinyint] NOT NULL,
	[IsRentSmallProp] [tinyint] NOT NULL,
	[ShowPricing] [tinyint] NULL,
	[LowPrice] [int] NOT NULL,
	[HighPrice] [int] NOT NULL,
	[ActiveAmenities] [int] NOT NULL,
	[ActiveFloorPlans] [int] NOT NULL,
	[ActivePhotos] [int] NOT NULL,
	[UniqueVisitsAG] [int] NOT NULL,
	[UniqueVisitsRent] [int] NOT NULL,
	[UniqueVisitsMobileAG] [int] NOT NULL,
	[UniqueVisitsMobileRent] [int] NOT NULL,
	[ViewsListingPageWebAG] [int] NOT NULL,
	[ViewsListingPageWebRent] [int] NOT NULL,
	[ViewsListingPageMobileAG] [int] NOT NULL,
	[ViewsListingPageMobileRent] [int] NOT NULL,
	[SRPListingImprAG] [int] NOT NULL,
	[SRPListingImprRent] [int] NOT NULL,
	[SRPUniqueVisitAG] [int] NOT NULL,
	[SRPUniqueVisitRent] [int] NOT NULL,
	[InternetConnectedCalls] [int] NOT NULL,
	[InternetMissedCalls] [int] NOT NULL,
	[MobileConnectedCalls] [int] NOT NULL,
	[MobileMissedCalls] [int] NOT NULL,
	[EmailLeadsAG] [int] NOT NULL,
	[MobileEmailLeadsAG] [int] NOT NULL,
	[IphoneEmailLeadsAG] [int] NOT NULL,
	[AndroidEmailLeadsAG] [int] NOT NULL,
	[IPadEmailLeadsAG] [int] NOT NULL,
	[TabletEmailLeadsAG] [int] NOT NULL,
	[KindleEmailLeadsAG] [int] NOT NULL,
	[EmailLeadsRent] [int] NOT NULL,
	[MobileEmailLeadsRent] [int] NOT NULL,
	[IphoneEmailLeadsRent] [int] NOT NULL,
	[AndroidEmailLeadsRent] [int] NOT NULL,
	[IPadEmailLeadsRent] [int] NOT NULL,
	[TabletEmailLeadsRent] [int] NOT NULL,
	[KindleEmailLeadsRent] [int] NOT NULL,
	[AGTotalEmailLeads]  AS ((((([EmailLeadsAG]+[IphoneEmailLeadsAG])+[IPadEmailLeadsAG])+[AndroidEmailLeadsAG])+[TabletEmailLeadsAG])+[KindleEmailLeadsAG]),
	[RentTotalEmailLeads]  AS ((((([EmailLeadsRent]+[IphoneEmailLeadsRent])+[IPadEmailLeadsRent])+[AndroidEmailLeadsRent])+[TabletEmailLeadsRent])+[KindleEmailLeadsRent])
) ON [PRIMARY]

GO
/****** Object:  Index [cidx_ymdid_20160317-082130]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE CLUSTERED INDEX [cidx_ymdid_20160317-082130] ON [Mart].[SmallPropertyListings_OLD_20160516]
(
	[YMDID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [Mart].[wwwapartmentguidecom_google_serp_top_20]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Mart].[wwwapartmentguidecom_google_serp_top_20](
	[YMDID] [int] NOT NULL,
	[Keyword] [nvarchar](100) NOT NULL,
	[Market] [nvarchar](5) NOT NULL,
	[Location] [nvarchar](20) NOT NULL,
	[Device] [nvarchar](10) NOT NULL,
	[GlobalMonthlySearchVolume] [bigint] NOT NULL,
	[RegionalMonthlySearchVolume] [bigint] NOT NULL,
	[Rank] [int] NOT NULL,
	[ResultTypeForPriorDay] [nvarchar](20) NOT NULL,
	[ProtocolForPriorDay] [nvarchar](10) NOT NULL,
	[RankingUrlOnPriorDay] [nvarchar](50) NOT NULL,
	[ResultType] [nvarchar](20) NOT NULL,
	[Protocol] [nvarchar](10) NOT NULL,
	[RankingUrl] [nvarchar](50) NOT NULL,
	[Tags] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_wwwapartmentguidecom_google_serp_top_20] PRIMARY KEY CLUSTERED 
(
	[YMDID] ASC,
	[Keyword] ASC,
	[Market] ASC,
	[Location] ASC,
	[Device] ASC,
	[Rank] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [Mart].[zutronExternalSite]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Mart].[zutronExternalSite](
	[UZID] [varchar](100) NULL,
	[YMDID] [int] NULL,
	[ExternalSite] [varchar](7000) NULL,
	[EventDate] [datetime] NULL,
	[UPsellAGSites] [int] NOT NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [cidx_ymdid_uzid_site]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE UNIQUE CLUSTERED INDEX [cidx_ymdid_uzid_site] ON [Mart].[zutronExternalSite]
(
	[YMDID] ASC,
	[UZID] ASC,
	[ExternalSite] ASC,
	[UPsellAGSites] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [Mart].[zutronRentPath]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Mart].[zutronRentPath](
	[UZID] [varchar](100) NULL,
	[YMDID] [int] NULL,
	[EventDate] [datetime] NULL,
	[Profilekey] [int] NULL,
	[Screen_Type] [varchar](50) NULL,
	[TotalPageViews] [int] NULL,
	[PDPPageViews] [int] NULL,
	[SRPPageViews] [int] NULL,
	[PhoneLeadCount] [int] NULL,
	[EmailLeadCount] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Mart].[zutronRentPathEvent]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Mart].[zutronRentPathEvent](
	[UZID] [varchar](100) NULL,
	[YMDID] [int] NULL,
	[ParseID] [bigint] NULL,
	[ProfileKey] [int] NOT NULL,
	[Action] [varchar](100) NULL,
	[Page] [varchar](200) NULL,
	[SEQ] [varchar](30) NULL,
	[ListingID] [varchar](100) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Mart].[ZutronRentPathUzidEvents]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Mart].[ZutronRentPathUzidEvents](
	[YMDID] [int] NULL,
	[UZID] [varchar](100) NULL,
	[ProfileKey] [int] NULL,
	[ScreenType] [varchar](50) NULL,
	[EventDate] [datetime] NULL,
	[TotalPageViews] [int] NULL,
	[PDPPageViews] [int] NULL,
	[SRPPageViews] [int] NULL,
	[PhoneLeadCount] [int] NULL,
	[EmailLeadCount] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Mart].[ZutronSitesVisited]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Mart].[ZutronSitesVisited](
	[RecID] [int] IDENTITY(1,1) NOT NULL,
	[YMDID] [int] NULL,
	[UZID] [varchar](100) NULL,
	[WebsiteDomain] [varchar](7000) NULL,
	[WebsitePath] [varchar](7000) NULL,
	[EventDate] [datetime] NULL,
 CONSTRAINT [PK_RecID] PRIMARY KEY NONCLUSTERED 
(
	[RecID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [CI_ZutronSitesVisited_YMDID_UZID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE CLUSTERED INDEX [CI_ZutronSitesVisited_YMDID_UZID] ON [Mart].[ZutronSitesVisited]
(
	[YMDID] ASC,
	[UZID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [Reports].[EmailsProducingLeads]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Reports].[EmailsProducingLeads](
	[ReportingPeriod] [varchar](64) NULL,
	[Email] [varchar](255) NOT NULL,
	[ProspectName] [varchar](161) NOT NULL,
	[PropertyCity] [varchar](40) NOT NULL,
	[PropertyState] [varchar](2) NOT NULL,
	[PropertyZipCode] [varchar](10) NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Reports].[RealTimeLeadsByHourEmail]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Reports].[RealTimeLeadsByHourEmail](
	[YMDID] [int] NULL,
	[HH] [int] NULL,
	[leads] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Reports].[RealTimeVisitsByHourDesktop]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Reports].[RealTimeVisitsByHourDesktop](
	[YMDID] [int] NULL,
	[HH] [int] NULL,
	[Visits] [int] NULL,
	[Visitors] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Reports].[RealTimeVisitsByHourMobile]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Reports].[RealTimeVisitsByHourMobile](
	[YMDID] [int] NULL,
	[HH] [int] NULL,
	[Visits] [int] NULL,
	[Visitors] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[agparseddata]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[agparseddata](
	[ParseID] [bigint] NOT NULL,
	[ProfileID] [int] NOT NULL,
	[YMDID] [int] NOT NULL,
	[EventDate] [datetime] NOT NULL,
	[MeasureType] [varchar](50) NOT NULL,
	[Measure] [varchar](7000) NOT NULL,
	[SubProfileID] [smallint] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[APSDimListing]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[APSDimListing](
	[YMDID] [int] NULL,
	[ListingID] [int] NULL,
	[ListingTypeID] [int] NOT NULL,
	[ListingTypeShort] [varchar](5) NULL,
	[ListingType] [varchar](25) NULL,
	[PropertyIDAG] [int] NULL,
	[StatusIDAG] [tinyint] NULL,
	[BillingIDAG] [varchar](20) NULL,
	[PropertyIDRent] [int] NULL,
	[StatusIDRent] [tinyint] NULL,
	[BillingIDRent] [varchar](20) NULL,
	[ListingSource] [varchar](20) NULL,
	[MgtCoIDAG] [int] NULL,
	[MgtCoNameAG] [varchar](100) NULL,
	[MgtCoIDRent] [int] NULL,
	[MgtCoNameRent] [varchar](100) NULL,
	[CompanyIDRent] [int] NULL,
	[SFCommunityID] [varchar](20) NULL,
	[SFPropertyAcctID] [varchar](18) NULL,
	[Ext_propertyid] [int] NULL,
	[PropertyName] [varchar](100) NULL,
	[PropertyAddress] [varchar](40) NULL,
	[PropertyCity] [varchar](40) NULL,
	[PropertyState] [varchar](2) NULL,
	[PropertyZipCode] [varchar](10) NULL,
	[ListingDescriptionLength] [int] NOT NULL,
	[VanityURL] [varchar](400) NULL,
	[PropertyURL] [varchar](400) NULL,
	[PropertyContactPhone] [varchar](20) NULL,
	[WebMobileTargetAG] [varchar](20) NULL,
	[WebTollFreeAG] [varchar](20) NULL,
	[MobileTollFreeAG] [varchar](20) NULL,
	[WebTargetRent] [varchar](20) NULL,
	[MobileTargetRent] [varchar](20) NULL,
	[WebTollFreeRent] [varchar](20) NULL,
	[MobileTollFreeRent] [varchar](20) NULL,
	[WebTargetRentals] [varchar](20) NULL,
	[WebTollFreeRentals] [varchar](20) NULL,
	[AGCTarget] [varchar](20) NULL,
	[AGCTollFree] [varchar](20) NULL,
	[ASGTarget] [varchar](20) NULL,
	[ASGTollFree] [varchar](20) NULL,
	[LeadEmailAG] [varchar](2000) NULL,
	[LeadEmailRent] [varchar](2000) NULL,
	[LeadEmailWithTypeAG] [varchar](1000) NULL,
	[LeadEmailWithTypeRent] [varchar](1000) NULL,
	[PhoneLeadRecapEmail] [varchar](400) NULL,
	[LeadFaxAG] [varchar](400) NULL,
	[LeadFaxRent] [varchar](400) NULL,
	[LowPrice] [int] NOT NULL,
	[HighPrice] [int] NOT NULL,
	[CalculatedPrice] [int] NOT NULL,
	[CallTrackingInBook] [tinyint] NOT NULL,
	[CallTrackingInBookStartDate] [datetime] NULL,
	[WebCouponStartDate] [datetime] NULL,
	[WebCouponExpirationDate] [datetime] NULL,
	[WebCouponText] [varchar](600) NULL,
	[MobileCouponStartDate] [datetime] NULL,
	[MobileCouponExpirationDate] [datetime] NULL,
	[MobileCouponText] [varchar](600) NULL,
	[GeoLat] [decimal](10, 4) NOT NULL,
	[GeoLong] [decimal](10, 4) NOT NULL,
	[CBSACode] [nvarchar](50) NULL,
	[CBSAName] [nvarchar](200) NULL,
	[MarketCD] [varchar](20) NULL,
	[MarketName] [varchar](50) NULL,
	[MetroName] [varchar](40) NULL,
	[SectionName] [varchar](75) NULL,
	[SubSectionName] [varchar](50) NULL,
	[DateModified] [datetime] NULL,
	[LastUpdateYMDID] [int] NULL,
	[ActiveCoupon] [tinyint] NOT NULL,
	[MobileCouponActive] [tinyint] NOT NULL,
	[ShowPricing] [tinyint] NOT NULL,
	[ShowOfficeHours] [tinyint] NOT NULL,
	[IsOverThreshold] [tinyint] NOT NULL,
	[IsSmallProperty] [tinyint] NULL,
	[IsRentalProp] [tinyint] NOT NULL,
	[IsSEM] [tinyint] NOT NULL,
	[Whisper] [tinyint] NOT NULL,
	[CallRecordingOptOut] [tinyint] NOT NULL,
	[ATTUverse] [tinyint] NOT NULL,
	[Brighthouse] [tinyint] NOT NULL,
	[Charter] [tinyint] NOT NULL,
	[DIRECTV] [tinyint] NOT NULL,
	[TimeWarner] [tinyint] NOT NULL,
	[VerizonFIOS] [tinyint] NOT NULL,
	[XFinityDP] [tinyint] NOT NULL,
	[XFinitySP] [tinyint] NOT NULL,
	[XFinityTP] [tinyint] NOT NULL,
	[HasCR3] [tinyint] NULL,
	[ExternalID] [varchar](50) NOT NULL,
	[ListingPricingSource] [varchar](8) NOT NULL,
	[ListingDetailsSource] [varchar](20) NOT NULL,
	[HasAvailabilityURL] [tinyint] NOT NULL,
	[AvailabilityURL] [nvarchar](255) NOT NULL,
	[PropertyTotalUnits] [int] NOT NULL,
	[TotalAmenities] [int] NOT NULL,
	[ActiveAmenities] [tinyint] NOT NULL,
	[TotalFloorPlans] [int] NOT NULL,
	[ActiveFloorplans] [tinyint] NOT NULL,
	[ActiveLowResFloorplans] [tinyint] NOT NULL,
	[ActiveHDFloorplans] [tinyint] NOT NULL,
	[TotalPhotos] [int] NOT NULL,
	[ActivePhotos] [tinyint] NOT NULL,
	[ActiveLowResPhotos] [tinyint] NOT NULL,
	[ActiveHDPhotos] [tinyint] NOT NULL,
	[CR3AvgOverallRatingAG] [decimal](16, 1) NOT NULL,
	[CR3AvgOverallRatingRent] [decimal](16, 1) NOT NULL,
	[PlacementTierAG] [int] NOT NULL,
	[PlacementTierRent] [int] NOT NULL,
	[ContractLoyaltyPoints] [int] NOT NULL,
	[InternetProductPoints] [int] NOT NULL,
	[LegacyLoyaltyPoints] [int] NOT NULL,
	[MobilePoints] [int] NOT NULL,
	[PrintProductPoints] [int] NOT NULL,
	[Ranking] [varchar](1) NULL,
	[NumericRank] [decimal](15, 4) NOT NULL,
	[RPLRank] [decimal](8, 2) NOT NULL,
	[BadgeCollege] [tinyint] NOT NULL,
	[BadgeCorporate] [tinyint] NOT NULL,
	[BadgeIncomeRestricted] [tinyint] NOT NULL,
	[BadgeLuxury] [tinyint] NOT NULL,
	[BadgeMilitary] [tinyint] NOT NULL,
	[BadgePetFriendly] [tinyint] NOT NULL,
	[BadgeSenior] [tinyint] NOT NULL,
	[BadgeGolf] [tinyint] NOT NULL,
	[BadgeWaterfront] [tinyint] NOT NULL,
	[BadgeFurnished] [tinyint] NOT NULL,
	[BadgeNewConstruction] [tinyint] NOT NULL,
	[BadgeRemodeled] [tinyint] NOT NULL,
	[DefaultBadge] [varchar](50) NULL,
	[Upsell30SecondVideo] [tinyint] NOT NULL,
	[Upsell60SecondVideo] [tinyint] NOT NULL,
	[Upsell3DFloorplan] [tinyint] NOT NULL,
	[UpsellAdCreator] [tinyint] NOT NULL,
	[UpsellAGMobileSyndication] [tinyint] NOT NULL,
	[UpsellAGSites] [tinyint] NOT NULL,
	[UpsellAGSitesCustomURL] [varchar](400) NULL,
	[UpsellApartmentListing] [tinyint] NOT NULL,
	[UpsellBillingOnly] [tinyint] NOT NULL,
	[UpsellCallRecording] [tinyint] NOT NULL,
	[UpsellCarousel] [tinyint] NOT NULL,
	[UpsellCarouselRentals] [tinyint] NOT NULL,
	[UpsellCategoryListing] [tinyint] NOT NULL,
	[UpsellCommunityVideo] [tinyint] NOT NULL,
	[UpsellCommunityVideoURLFulfilled] [tinyint] NOT NULL,
	[UpsellCoupon] [tinyint] NOT NULL,
	[UpsellDiamondCity] [tinyint] NOT NULL,
	[UpsellDiamondMax] [tinyint] NOT NULL,
	[UpsellDiamondMetro] [tinyint] NOT NULL,
	[UpsellDynamicLeadForm] [tinyint] NOT NULL,
	[UpsellEmercial] [tinyint] NOT NULL,
	[UpsellEZPay] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityAG] [tinyint] NULL,
	[UpsellFeaturedCommunityRent] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityGold] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityPlatinum] [tinyint] NOT NULL,
	[UpsellFeaturedCommunitySilver] [tinyint] NOT NULL,
	[UpsellFeaturedListingRentals] [tinyint] NOT NULL,
	[UpsellFloorplanUpgrade] [tinyint] NOT NULL,
	[UpsellFormToPhone] [tinyint] NOT NULL,
	[UpsellFrontPage] [tinyint] NOT NULL,
	[UpsellGoldTier] [tinyint] NOT NULL,
	[UpsellHDActiveFloorplansFulfilled] [tinyint] NOT NULL,
	[UpsellHDActivePhotosFulfilled] [tinyint] NOT NULL,
	[UpsellHDPanoTour] [tinyint] NOT NULL,
	[UpsellHDPanoTourFulfilled] [tinyint] NOT NULL,
	[UpsellHDPhoto] [tinyint] NOT NULL,
	[UpsellHDVideo] [tinyint] NOT NULL,
	[UpsellHDVideoFulfilled] [tinyint] NOT NULL,
	[UpsellHighlighted] [tinyint] NOT NULL,
	[UpsellLeadMail] [tinyint] NOT NULL,
	[UpsellLinked3DFloorplan] [tinyint] NOT NULL,
	[UpsellLinked3DFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedFloorplan] [tinyint] NOT NULL,
	[UpsellLinkedFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedLowResFloorplan] [tinyint] NOT NULL,
	[UpsellLinkedLowResFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedHDFloorplan] [tinyint] NOT NULL,
	[UpsellLinkedHDFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedRoomPlanner] [tinyint] NOT NULL,
	[UpsellLinkedRoomPlannerFulfilled] [tinyint] NOT NULL,
	[UpsellListingRent] [tinyint] NOT NULL,
	[UpsellListingRentals] [tinyint] NOT NULL,
	[UpsellMediaCenter] [tinyint] NOT NULL,
	[UpsellMediaCenterCoupon] [tinyint] NOT NULL,
	[UpsellMgmtManagementCoLogoDisplay] [tinyint] NOT NULL,
	[UpsellMgmtPeelAd] [tinyint] NOT NULL,
	[UpsellMobileDeal] [tinyint] NOT NULL,
	[UpsellMobileDealFulfilled] [tinyint] NOT NULL,
	[UpsellMobileDiamond] [tinyint] NOT NULL,
	[UpsellMobileSpotlight] [tinyint] NOT NULL,
	[UpsellNoVacancyRent] [tinyint] NOT NULL,
	[UpsellPayPerLead] [tinyint] NOT NULL,
	[UpsellPayPerLease] [tinyint] NOT NULL,
	[UpsellPayPerLeaseALM] [tinyint] NOT NULL,
	[UpsellPhotoUpgrade] [tinyint] NOT NULL,
	[UpsellPhotoPlus] [tinyint] NOT NULL,
	[UpsellPlatinumTier] [tinyint] NOT NULL,
	[UpsellPrecisionTargetedEmailRent] [tinyint] NOT NULL,
	[UpsellPremierListingRentals] [tinyint] NOT NULL,
	[UpsellPremiumUpgrade] [tinyint] NOT NULL,
	[UpsellPropertyLogo] [tinyint] NOT NULL,
	[UpsellPropInternetBanner] [tinyint] NOT NULL,
	[UpsellRentFeaturedPlacement] [tinyint] NOT NULL,
	[UpsellRentPathConnect] [tinyint] NOT NULL,
	[UpsellRepMon] [tinyint] NOT NULL,
	[UpsellRewardCardRent] [tinyint] NOT NULL,
	[UpsellSocialMediaMan] [tinyint] NOT NULL,
	[UpsellSpanish] [tinyint] NOT NULL,
	[UpsellSponsoredApartment] [tinyint] NOT NULL,
	[UpsellSpotlightAG] [tinyint] NOT NULL,
	[UpsellSpotlightRent] [tinyint] NOT NULL,
	[UpsellSpotlightRentals] [tinyint] NOT NULL,
	[UpsellStandardListingRentals] [tinyint] NOT NULL,
	[UpsellStandardPlusListingRentals] [tinyint] NOT NULL,
	[UpsellSubscriptionModelRent] [tinyint] NOT NULL,
	[UpsellVideoSpokesmodel] [tinyint] NOT NULL,
	[UpsellVIPPlacementRent] [tinyint] NOT NULL,
	[UpsellVirtualBrochure] [tinyint] NOT NULL,
	[UpsellVirtualTourFulfilled] [tinyint] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[APSDimListing_old]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[APSDimListing_old](
	[YMDID] [int] NULL,
	[ListingID] [int] NULL,
	[ListingTypeID] [int] NOT NULL,
	[ListingTypeShort] [varchar](5) NULL,
	[ListingType] [varchar](25) NULL,
	[PropertyIDAG] [int] NULL,
	[StatusIDAG] [tinyint] NULL,
	[BillingIDAG] [varchar](20) NULL,
	[PropertyIDRent] [int] NULL,
	[StatusIDRent] [tinyint] NULL,
	[BillingIDRent] [varchar](20) NULL,
	[ListingSource] [varchar](20) NULL,
	[MgtCoIDAG] [int] NULL,
	[MgtCoNameAG] [varchar](100) NULL,
	[MgtCoIDRent] [int] NULL,
	[MgtCoNameRent] [varchar](100) NULL,
	[CompanyIDRent] [int] NULL,
	[SFCommunityID] [varchar](20) NULL,
	[SFPropertyAcctID] [varchar](18) NULL,
	[PropertyName] [varchar](100) NULL,
	[PropertyAddress] [varchar](40) NULL,
	[PropertyCity] [varchar](40) NULL,
	[PropertyState] [varchar](2) NULL,
	[PropertyZipCode] [varchar](10) NULL,
	[ListingDescriptionLength] [int] NOT NULL,
	[VanityURL] [varchar](400) NULL,
	[PropertyURL] [varchar](400) NULL,
	[PropertyContactPhone] [varchar](20) NULL,
	[WebMobileTargetAG] [varchar](20) NULL,
	[WebTollFreeAG] [varchar](20) NULL,
	[MobileTollFreeAG] [varchar](20) NULL,
	[WebTargetRent] [varchar](20) NULL,
	[MobileTargetRent] [varchar](20) NULL,
	[WebTollFreeRent] [varchar](20) NULL,
	[MobileTollFreeRent] [varchar](20) NULL,
	[WebTargetRentals] [varchar](20) NULL,
	[WebTollFreeRentals] [varchar](20) NULL,
	[AGCTarget] [varchar](20) NULL,
	[AGCTollFree] [varchar](20) NULL,
	[ASGTarget] [varchar](20) NULL,
	[ASGTollFree] [varchar](20) NULL,
	[LeadEmailAG] [varchar](2000) NULL,
	[LeadEmailRent] [varchar](2000) NULL,
	[LeadEmailWithTypeAG] [varchar](1000) NULL,
	[LeadEmailWithTypeRent] [varchar](1000) NULL,
	[PhoneLeadRecapEmail] [varchar](400) NULL,
	[LeadFaxAG] [varchar](400) NULL,
	[LeadFaxRent] [varchar](400) NULL,
	[LowPrice] [int] NOT NULL,
	[HighPrice] [int] NOT NULL,
	[CalculatedPrice] [int] NOT NULL,
	[CallTrackingInBook] [tinyint] NOT NULL,
	[CallTrackingInBookStartDate] [datetime] NULL,
	[WebCouponStartDate] [datetime] NULL,
	[WebCouponExpirationDate] [datetime] NULL,
	[WebCouponText] [varchar](600) NULL,
	[MobileCouponStartDate] [datetime] NULL,
	[MobileCouponExpirationDate] [datetime] NULL,
	[MobileCouponText] [varchar](600) NULL,
	[GeoLat] [decimal](10, 4) NOT NULL,
	[GeoLong] [decimal](10, 4) NOT NULL,
	[CBSACode] [nvarchar](50) NULL,
	[CBSAName] [nvarchar](200) NULL,
	[MarketCD] [varchar](20) NULL,
	[MarketName] [varchar](50) NULL,
	[MetroName] [varchar](40) NULL,
	[SectionName] [varchar](75) NULL,
	[SubSectionName] [varchar](50) NULL,
	[DateModified] [datetime] NULL,
	[LastUpdateYMDID] [int] NULL,
	[ActiveCoupon] [tinyint] NOT NULL,
	[MobileCouponActive] [tinyint] NOT NULL,
	[ShowPricing] [tinyint] NOT NULL,
	[ShowOfficeHours] [tinyint] NOT NULL,
	[IsOverThreshold] [tinyint] NOT NULL,
	[IsSmallProperty] [tinyint] NULL,
	[IsRentalProp] [tinyint] NOT NULL,
	[IsSEM] [tinyint] NOT NULL,
	[Whisper] [tinyint] NOT NULL,
	[CallRecordingOptOut] [tinyint] NOT NULL,
	[ATTUverse] [tinyint] NOT NULL,
	[Brighthouse] [tinyint] NOT NULL,
	[Charter] [tinyint] NOT NULL,
	[DIRECTV] [tinyint] NOT NULL,
	[TimeWarner] [tinyint] NOT NULL,
	[VerizonFIOS] [tinyint] NOT NULL,
	[XFinityDP] [tinyint] NOT NULL,
	[XFinitySP] [tinyint] NOT NULL,
	[XFinityTP] [tinyint] NOT NULL,
	[HasCR3] [tinyint] NULL,
	[ExternalID] [varchar](50) NOT NULL,
	[ListingPricingSource] [varchar](8) NOT NULL,
	[ListingDetailsSource] [varchar](20) NOT NULL,
	[HasAvailabilityURL] [tinyint] NOT NULL,
	[PropertyTotalUnits] [int] NOT NULL,
	[TotalAmenities] [int] NOT NULL,
	[ActiveAmenities] [tinyint] NOT NULL,
	[TotalFloorPlans] [int] NOT NULL,
	[ActiveFloorplans] [tinyint] NOT NULL,
	[ActiveLowResFloorplans] [tinyint] NOT NULL,
	[ActiveHDFloorplans] [tinyint] NOT NULL,
	[TotalPhotos] [int] NOT NULL,
	[ActivePhotos] [tinyint] NOT NULL,
	[ActiveLowResPhotos] [tinyint] NOT NULL,
	[ActiveHDPhotos] [tinyint] NOT NULL,
	[CR3AvgOverallRatingAG] [decimal](16, 1) NOT NULL,
	[CR3AvgOverallRatingRent] [decimal](16, 1) NOT NULL,
	[PlacementTierAG] [int] NOT NULL,
	[PlacementTierRent] [int] NOT NULL,
	[ContractLoyaltyPoints] [int] NOT NULL,
	[InternetProductPoints] [int] NOT NULL,
	[LegacyLoyaltyPoints] [int] NOT NULL,
	[MobilePoints] [int] NOT NULL,
	[PrintProductPoints] [int] NOT NULL,
	[Ranking] [varchar](1) NULL,
	[NumericRank] [decimal](15, 4) NOT NULL,
	[RPLRank] [decimal](8, 2) NOT NULL,
	[BadgeCollege] [tinyint] NOT NULL,
	[BadgeCorporate] [tinyint] NOT NULL,
	[BadgeIncomeRestricted] [tinyint] NOT NULL,
	[BadgeLuxury] [tinyint] NOT NULL,
	[BadgeMilitary] [tinyint] NOT NULL,
	[BadgePetFriendly] [tinyint] NOT NULL,
	[BadgeSenior] [tinyint] NOT NULL,
	[BadgeGolf] [tinyint] NOT NULL,
	[BadgeWaterfront] [tinyint] NOT NULL,
	[BadgeFurnished] [tinyint] NOT NULL,
	[DefaultBadge] [varchar](50) NULL,
	[Upsell30SecondVideo] [tinyint] NOT NULL,
	[Upsell60SecondVideo] [tinyint] NOT NULL,
	[Upsell3DFloorplan] [tinyint] NOT NULL,
	[UpsellAdCreator] [tinyint] NOT NULL,
	[UpsellAGMobileSyndication] [tinyint] NOT NULL,
	[UpsellAGSites] [tinyint] NOT NULL,
	[UpsellAGSitesCustomURL] [varchar](400) NULL,
	[UpsellApartmentListing] [tinyint] NOT NULL,
	[UpsellBillingOnly] [tinyint] NOT NULL,
	[UpsellCallRecording] [tinyint] NOT NULL,
	[UpsellCarousel] [tinyint] NOT NULL,
	[UpsellCarouselRentals] [tinyint] NOT NULL,
	[UpsellCategoryListing] [tinyint] NOT NULL,
	[UpsellCommunityVideo] [tinyint] NOT NULL,
	[UpsellCommunityVideoURLFulfilled] [tinyint] NOT NULL,
	[UpsellCoupon] [tinyint] NOT NULL,
	[UpsellDiamondCity] [tinyint] NOT NULL,
	[UpsellDiamondMax] [tinyint] NOT NULL,
	[UpsellDiamondMetro] [tinyint] NOT NULL,
	[UpsellDynamicLeadForm] [tinyint] NOT NULL,
	[UpsellEmercial] [tinyint] NOT NULL,
	[UpsellEZPay] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityAG] [tinyint] NULL,
	[UpsellFeaturedCommunityRent] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityGold] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityPlatinum] [tinyint] NOT NULL,
	[UpsellFeaturedCommunitySilver] [tinyint] NOT NULL,
	[UpsellFeaturedListingRentals] [tinyint] NOT NULL,
	[UpsellFloorplanUpgrade] [tinyint] NOT NULL,
	[UpsellFormToPhone] [tinyint] NOT NULL,
	[UpsellFrontPage] [tinyint] NOT NULL,
	[UpsellGoldTier] [tinyint] NOT NULL,
	[UpsellHDActiveFloorplansFulfilled] [tinyint] NOT NULL,
	[UpsellHDActivePhotosFulfilled] [tinyint] NOT NULL,
	[UpsellHDPanoTour] [tinyint] NOT NULL,
	[UpsellHDPanoTourFulfilled] [tinyint] NOT NULL,
	[UpsellHDPhoto] [tinyint] NOT NULL,
	[UpsellHDVideo] [tinyint] NOT NULL,
	[UpsellHDVideoFulfilled] [tinyint] NOT NULL,
	[UpsellHighlighted] [tinyint] NOT NULL,
	[UpsellLeadMail] [tinyint] NOT NULL,
	[UpsellLinked3DFloorplan] [tinyint] NOT NULL,
	[UpsellLinked3DFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedFloorplan] [tinyint] NOT NULL,
	[UpsellLinkedFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedLowResFloorplan] [tinyint] NOT NULL,
	[UpsellLinkedLowResFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedHDFloorplan] [tinyint] NOT NULL,
	[UpsellLinkedHDFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedRoomPlanner] [tinyint] NOT NULL,
	[UpsellLinkedRoomPlannerFulfilled] [tinyint] NOT NULL,
	[UpsellListingRent] [tinyint] NOT NULL,
	[UpsellListingRentals] [tinyint] NOT NULL,
	[UpsellMediaCenter] [tinyint] NOT NULL,
	[UpsellMediaCenterCoupon] [tinyint] NOT NULL,
	[UpsellMgmtManagementCoLogoDisplay] [tinyint] NOT NULL,
	[UpsellMgmtPeelAd] [tinyint] NOT NULL,
	[UpsellMobileDeal] [tinyint] NOT NULL,
	[UpsellMobileDealFulfilled] [tinyint] NOT NULL,
	[UpsellMobileDiamond] [tinyint] NOT NULL,
	[UpsellMobileSpotlight] [tinyint] NOT NULL,
	[UpsellNoVacancyRent] [tinyint] NOT NULL,
	[UpsellPayPerLead] [tinyint] NOT NULL,
	[UpsellPayPerLease] [tinyint] NOT NULL,
	[UpsellPayPerLeaseALM] [tinyint] NOT NULL,
	[UpsellPhotoUpgrade] [tinyint] NOT NULL,
	[UpsellPhotoPlus] [tinyint] NOT NULL,
	[UpsellPlatinumTier] [tinyint] NOT NULL,
	[UpsellPrecisionTargetedEmailRent] [tinyint] NOT NULL,
	[UpsellPremierListingRentals] [tinyint] NOT NULL,
	[UpsellPremiumUpgrade] [tinyint] NOT NULL,
	[UpsellPropertyLogo] [tinyint] NOT NULL,
	[UpsellRentFeaturedPlacement] [tinyint] NOT NULL,
	[UpsellRentPathConnect] [tinyint] NOT NULL,
	[UpsellRepMon] [tinyint] NOT NULL,
	[UpsellRewardCardRent] [tinyint] NOT NULL,
	[UpsellSocialMediaMan] [tinyint] NOT NULL,
	[UpsellSpanish] [tinyint] NOT NULL,
	[UpsellSponsoredApartment] [tinyint] NOT NULL,
	[UpsellSpotlightAG] [tinyint] NOT NULL,
	[UpsellSpotlightRent] [tinyint] NOT NULL,
	[UpsellSpotlightRentals] [tinyint] NOT NULL,
	[UpsellStandardListingRentals] [tinyint] NOT NULL,
	[UpsellStandardPlusListingRentals] [tinyint] NOT NULL,
	[UpsellSubscriptionModelRent] [tinyint] NOT NULL,
	[UpsellVideoSpokesmodel] [tinyint] NOT NULL,
	[UpsellVIPPlacementRent] [tinyint] NOT NULL,
	[UpsellVirtualBrochure] [tinyint] NOT NULL,
	[UpsellVirtualTourFulfilled] [tinyint] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[Calls]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[Calls](
	[Website] [varchar](4) NULL,
	[YMDID] [int] NOT NULL,
	[CallID] [varchar](50) NULL,
	[ListingID] [int] NULL,
	[CallStatus] [varchar](50) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[ClickEventDiff_20151029]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[ClickEventDiff_20151029](
	[YMDID] [int] NOT NULL,
	[ListingID] [int] NOT NULL,
	[ClicksCommunityVideoAGOld] [int] NOT NULL,
	[ClicksCommunityVideoAGNew] [int] NOT NULL,
	[ClicksDiamondMaxPhotoAGOld] [int] NOT NULL,
	[ClicksDiamondMaxPhotoAGNew] [int] NOT NULL,
	[ClicksDiamondMaxCheckAvailAGOld] [int] NOT NULL,
	[ClicksDiamondMaxCheckAvailAGNew] [int] NOT NULL,
	[ClicksFloorplanAGOld] [int] NOT NULL,
	[ClicksFloorplanAGNew] [int] NOT NULL,
	[ClicksFloorplanRentOld] [int] NOT NULL,
	[ClicksFloorplanRentNew] [int] NOT NULL,
	[ClicksHDFloorplanAGOld] [int] NOT NULL,
	[ClicksHDFloorplanAGNew] [int] NOT NULL,
	[ClicksHDFloorplanRentOld] [int] NOT NULL,
	[ClicksHDFloorplanRentNew] [int] NOT NULL,
	[ClicksPhotosAGOld] [int] NOT NULL,
	[ClicksPhotosAGNew] [int] NOT NULL,
	[ClicksPhotosRentOld] [int] NOT NULL,
	[ClicksPhotosRentNew] [int] NOT NULL,
	[ClicksHDPhotoAGOld] [int] NOT NULL,
	[ClicksHDPhotoAGNew] [int] NOT NULL,
	[ClicksHDPhotoRentOld] [int] NOT NULL,
	[ClicksHDPhotoRentNew] [int] NOT NULL,
	[ClicksHDVideoAGOld] [int] NOT NULL,
	[ClicksHDVideoAGNew] [int] NOT NULL,
	[ClicksHDVideoRentOld] [int] NOT NULL,
	[ClicksHDVideoRentNew] [int] NOT NULL,
	[ClicksHDPanoTourAGOld] [int] NOT NULL,
	[ClicksHDPanoTourAGNew] [int] NOT NULL,
	[ClicksHDPanoTourRentOld] [int] NOT NULL,
	[ClicksHDPanoTourRentNew] [int] NOT NULL,
	[ClicksMapAGOld] [int] NOT NULL,
	[ClicksMapAGNew] [int] NOT NULL,
	[ClicksMapRentOld] [int] NOT NULL,
	[ClicksMapRentNew] [int] NOT NULL,
	[ClicksWebURLAGOld] [int] NOT NULL,
	[ClicksWebURLAGNew] [int] NOT NULL,
	[ClicksWebURLRentOld] [int] NOT NULL,
	[ClicksWebURLRentNew] [int] NOT NULL,
	[ClicksMgtCoURLAGOld] [int] NOT NULL,
	[ClicksMgtCoURLAGNew] [int] NOT NULL,
	[ClicksMgtCoURLRentOld] [int] NOT NULL,
	[ClicksMgtCoURLRentNew] [int] NOT NULL,
	[ClicksMgtCoPeelAdAGOld] [int] NOT NULL,
	[ClicksMgtCoPeelAdAGNew] [int] NOT NULL,
	[ClicksMgtCoPeelAdRentOld] [int] NOT NULL,
	[ClicksMgtCoPeelAdRentNew] [int] NOT NULL,
	[ClicksReserveNowAGOld] [int] NOT NULL,
	[ClicksReserveNowAGNew] [int] NOT NULL,
	[ClicksReserveNowRentOld] [int] NOT NULL,
	[ClicksReserveNowRentNew] [int] NOT NULL,
	[ClicksFeaturedCommunityAGOld] [int] NOT NULL,
	[ClicksFeaturedCommunityAGNew] [int] NOT NULL,
	[ClicksFeaturedCommunityRentOld] [int] NOT NULL,
	[ClicksFeaturedCommunityRentNew] [int] NOT NULL,
	[ClicksFeatCommCheckAvailAGOld] [int] NOT NULL,
	[ClicksFeatCommCheckAvailAGNew] [int] NOT NULL,
	[ClicksFeatCommCheckAvailRentOld] [int] NOT NULL,
	[ClicksFeatCommCheckAvailRentNew] [int] NOT NULL,
	[ClicksSRPListingCheckAvailAGOld] [int] NOT NULL,
	[ClicksSRPListingCheckAvailAGNew] [int] NOT NULL,
	[ClicksSRPListingCheckAvailRentOld] [int] NOT NULL,
	[ClicksSRPListingCheckAvailRentNew] [int] NOT NULL,
	[ClicksCR3AGOld] [int] NOT NULL,
	[ClicksCR3AGNew] [int] NOT NULL,
	[ClicksCR3RentOld] [int] NOT NULL,
	[ClicksCR3RentNew] [int] NOT NULL,
	[ClicksSpotlightRentSpecialsAGOld] [int] NOT NULL,
	[ClicksSpotlightRentSpecialsAGNew] [int] NOT NULL,
	[ClicksSpotlightRentSpecialsRentOld] [int] NOT NULL,
	[ClicksSpotlightRentSpecialsRentNew] [int] NOT NULL,
	[ClicksSpotlightReserveNowAGOld] [int] NOT NULL,
	[ClicksSpotlightReserveNowAGNew] [int] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[ClickEvents]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[ClickEvents](
	[YMDID] [int] NOT NULL,
	[ListingID] [int] NOT NULL,
	[ClicksCommunityVideoAG] [int] NOT NULL,
	[ClicksDiamondMaxPhotoAG] [int] NOT NULL,
	[ClicksDiamondMaxCheckAvailAG] [int] NOT NULL,
	[ClicksFloorplanAG] [int] NOT NULL,
	[ClicksFloorplanRent] [int] NOT NULL,
	[ClicksHDFloorplanAG] [int] NOT NULL,
	[ClicksHDFloorplanRent] [int] NOT NULL,
	[ClicksPhotosAG] [int] NOT NULL,
	[ClicksPhotosRent] [int] NOT NULL,
	[ClicksHDPhotoAG] [int] NOT NULL,
	[ClicksHDPhotoRent] [int] NOT NULL,
	[ClicksHDVideoAG] [int] NOT NULL,
	[ClicksHDVideoRent] [int] NOT NULL,
	[ClicksHDPanoTourAG] [int] NOT NULL,
	[ClicksHDPanoTourRent] [int] NOT NULL,
	[ClicksMapAG] [int] NOT NULL,
	[ClicksMapRent] [int] NOT NULL,
	[ClicksWebURLAG] [int] NOT NULL,
	[ClicksWebURLRent] [int] NOT NULL,
	[ClicksMgtCoURLAG] [int] NOT NULL,
	[ClicksMgtCoURLRent] [int] NOT NULL,
	[ClicksMgtCoPeelAdAG] [int] NOT NULL,
	[ClicksMgtCoPeelAdRent] [int] NOT NULL,
	[ClicksReserveNowAG] [int] NOT NULL,
	[ClicksReserveNowRent] [int] NOT NULL,
	[ClicksFeaturedCommunityAG] [int] NOT NULL,
	[ClicksFeaturedCommunityRent] [int] NOT NULL,
	[ClicksFeatCommCheckAvailAG] [int] NOT NULL,
	[ClicksFeatCommCheckAvailRent] [int] NOT NULL,
	[ClicksSRPListingCheckAvailAG] [int] NOT NULL,
	[ClicksSRPListingCheckAvailRent] [int] NOT NULL,
	[ClicksCR3AG] [int] NOT NULL,
	[ClicksCR3Rent] [int] NOT NULL,
	[ClicksSpotlightRentSpecialsAG] [int] NOT NULL,
	[ClicksSpotlightRentSpecialsRent] [int] NOT NULL,
	[ClicksSpotlightReserveNowAG] [int] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[ClickEvents2]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[ClickEvents2](
	[YMDID] [int] NOT NULL,
	[ListingID] [int] NOT NULL,
	[ClicksCommunityVideoAG] [int] NOT NULL,
	[ClicksDiamondMaxPhotoAG] [int] NOT NULL,
	[ClicksDiamondMaxCheckAvailAG] [int] NOT NULL,
	[ClicksFloorplanAG] [int] NOT NULL,
	[ClicksFloorplanRent] [int] NOT NULL,
	[ClicksHDFloorplanAG] [int] NOT NULL,
	[ClicksHDFloorplanRent] [int] NOT NULL,
	[ClicksPhotosAG] [int] NOT NULL,
	[ClicksPhotosRent] [int] NOT NULL,
	[ClicksHDPhotoAG] [int] NOT NULL,
	[ClicksHDPhotoRent] [int] NOT NULL,
	[ClicksHDVideoAG] [int] NOT NULL,
	[ClicksHDVideoRent] [int] NOT NULL,
	[ClicksHDPanoTourAG] [int] NOT NULL,
	[ClicksHDPanoTourRent] [int] NOT NULL,
	[ClicksMapAG] [int] NOT NULL,
	[ClicksMapRent] [int] NOT NULL,
	[ClicksWebURLAG] [int] NOT NULL,
	[ClicksWebURLRent] [int] NOT NULL,
	[ClicksMgtCoURLAG] [int] NOT NULL,
	[ClicksMgtCoURLRent] [int] NOT NULL,
	[ClicksMgtCoPeelAdAG] [int] NOT NULL,
	[ClicksMgtCoPeelAdRent] [int] NOT NULL,
	[ClicksReserveNowAG] [int] NOT NULL,
	[ClicksReserveNowRent] [int] NOT NULL,
	[ClicksFeaturedCommunityAG] [int] NOT NULL,
	[ClicksFeaturedCommunityRent] [int] NOT NULL,
	[ClicksFeatCommCheckAvailAG] [int] NOT NULL,
	[ClicksFeatCommCheckAvailRent] [int] NOT NULL,
	[ClicksSRPListingCheckAvailAG] [int] NOT NULL,
	[ClicksSRPListingCheckAvailRent] [int] NOT NULL,
	[ClicksCR3AG] [int] NOT NULL,
	[ClicksCR3Rent] [int] NOT NULL,
	[ClicksSpotlightRentSpecialsAG] [int] NOT NULL,
	[ClicksSpotlightRentSpecialsRent] [int] NOT NULL,
	[ClicksSpotlightReserveNowAG] [int] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[ClickEventUpdate]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[ClickEventUpdate](
	[ymdid] [int] NULL,
	[listingid] [int] NULL,
	[profileid] [int] NULL,
	[ClicksCommunityVideo] [int] NULL,
	[ClicksCR3] [int] NULL,
	[ClicksDiamondMaxCheckAvail] [int] NULL,
	[ClicksDiamondMaxPhoto] [int] NULL,
	[ClicksFeatCommCheckAvail] [int] NULL,
	[ClicksFeaturedCommunity] [int] NULL,
	[ClicksFloorplan] [int] NULL,
	[ClicksHDFloorplan] [int] NULL,
	[ClicksHDPanoTour] [int] NULL,
	[ClicksHDPhoto] [int] NULL,
	[ClicksHDVideo] [int] NULL,
	[ClicksMap] [int] NULL,
	[ClicksMgtCoPeelAd] [int] NULL,
	[ClicksPhotos] [int] NULL,
	[ClicksReserveNow] [int] NULL,
	[ClicksSpotlightRentSpecials] [int] NULL,
	[ClicksSpotlightReserveNow] [int] NULL,
	[ClicksSRPListingCheckAvail] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[Dashboard_SendTestSub_EmailDetail]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[Dashboard_SendTestSub_EmailDetail](
	[YMDID] [int] NULL,
	[AGPropertyID] [int] NULL,
	[ListingID] [int] NULL,
	[PropertyName] [varchar](100) NULL,
	[PropertyAddress] [varchar](80) NULL,
	[PropertyCity] [varchar](40) NULL,
	[PropertyState] [varchar](20) NULL,
	[ZipCode] [varchar](20) NULL,
	[LeadDate] [datetime] NULL,
	[PropectEmail] [varchar](255) NULL,
	[LeadName] [varchar](80) NULL,
	[Phone] [varchar](30) NULL,
	[MoveMonth] [varchar](15) NULL,
	[Bedrooms] [varchar](50) NULL,
	[Bathrooms] [varchar](50) NULL,
	[Comments] [varchar](2500) NULL,
	[ExternalID] [varchar](50) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[Dashboard_SendTestSub_PhoneDetail]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[Dashboard_SendTestSub_PhoneDetail](
	[YMDID] [int] NULL,
	[AGPropertyID] [int] NULL,
	[PropertyName] [varchar](100) NULL,
	[PropertyAddress] [varchar](80) NULL,
	[PropertyCity] [varchar](40) NULL,
	[PropertyState] [varchar](20) NULL,
	[ZipCode] [varchar](20) NULL,
	[CallDate] [varchar](10) NULL,
	[CallTime] [varchar](255) NULL,
	[CallStartDateTime] [datetime] NULL,
	[CallerPhoneNumber] [varchar](15) NULL,
	[CallerName] [varchar](255) NULL,
	[CallerLocation] [varchar](255) NULL,
	[CallStatus] [varchar](20) NULL,
	[IsAbandoned] [int] NULL,
	[DurationinSeconds] [int] NULL,
	[CallWaitTime] [int] NULL,
	[AudioURL] [varchar](500) NULL,
	[ExternalID] [varchar](50) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[DashboardAdvancedSubscriptionMainData]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[DashboardAdvancedSubscriptionMainData](
	[ListingID] [int] NOT NULL,
	[ReserveNowClicks] [int] NULL,
	[AGSitesPageViews] [int] NULL,
	[TotalPhoneLeads] [int] NULL,
	[TotalLeads] [int] NULL,
	[TotalEmailLeads] [int] NULL,
	[UniqueDetailVisits] [int] NULL,
	[MobileDetailUniqueVisits] [int] NULL,
	[DetailPageViews] [int] NULL,
	[MobileDetailPageViews] [int] NULL,
	[VideoClicks] [int] NULL,
	[PropertyWebLinkClicks] [int] NULL,
	[MgtCoWebLinkClicks] [int] NULL,
	[PropertyMapClicks] [int] NULL,
	[PhotoClicks] [int] NULL,
	[FloorplanClicks] [int] NULL,
	[PanoramicToursClicks] [int] NULL,
	[HDVideosClicks] [int] NULL,
	[HDPhotosClicks] [int] NULL,
	[MgtCoPeelAdClicks] [int] NULL,
	[SearchResultsImpressions] [int] NULL,
	[DetailVisitCountImpressions] [int] NULL,
	[TotalPhoneLeadsweekly] [int] NULL,
	[TotalLeadsweekly] [int] NULL,
	[TotalEmailLeadsweekly] [int] NULL,
	[UniqueDetailVisitsweekly] [int] NULL,
	[MobileDetailUniqueVisitsweekly] [int] NULL,
	[DetailPageViewsweekly] [int] NULL,
	[MobileDetailPageViewsweekly] [int] NULL,
	[VideoClicksweekly] [int] NULL,
	[PropertyWebLinkClicksweekly] [int] NULL,
	[MgtCoWebLinkClicksweekly] [int] NULL,
	[PropertyMapClicksweekly] [int] NULL,
	[PhotoClicksweekly] [int] NULL,
	[FloorplanClicksweekly] [int] NULL,
	[PanoramicToursClicksweekly] [int] NULL,
	[HDVideosClicksweekly] [int] NULL,
	[HDPhotosClicksweekly] [int] NULL,
	[MgtCoPeelAdClicksweekly] [int] NULL,
	[SearchResultsImpressionsweekly] [int] NULL,
	[DetailVisitCountImpressionsweekly] [int] NULL,
	[TotalPhoneLeadsdaily] [int] NULL,
	[TotalLeadsdaily] [int] NULL,
	[TotalEmailLeadsdaily] [int] NULL,
	[UniqueDetailVisitsdaily] [int] NULL,
	[MobileDetailUniqueVisitsdaily] [int] NULL,
	[DetailPageViewsdaily] [int] NULL,
	[MobileDetailPageViewsdaily] [int] NULL,
	[VideoClicksdaily] [int] NULL,
	[PropertyWebLinkClicksdaily] [int] NULL,
	[MgtCoWebLinkClicksdaily] [int] NULL,
	[PropertyMapClicksdaily] [int] NULL,
	[PhotoClicksdaily] [int] NULL,
	[FloorplanClicksdaily] [int] NULL,
	[PanoramicToursClicksdaily] [int] NULL,
	[HDVideosClicksdaily] [int] NULL,
	[HDPhotosClicksdaily] [int] NULL,
	[MgtCoPeelAdClicksdaily] [int] NULL,
	[SearchResultsImpressionsdaily] [int] NULL,
	[DetailVisitCountImpressionsdaily] [int] NULL,
	[NumberofCertifiedReview] [int] NULL,
	[LowRentalRate] [int] NULL,
	[HighRentalRate] [int] NULL,
	[ActiveCoupononSite] [int] NULL,
	[CouponExpirationDate] [datetime] NULL,
	[CouponStartDate] [datetime] NULL,
	[ActiveHDFloorplans] [int] NULL,
	[ActiveHDPhotos] [int] NULL,
	[ActivePhotos] [int] NULL,
	[ActiveAmenities] [int] NULL,
	[ActiveFloorplans] [int] NULL,
	[ExternalPropertyID] [varchar](300) NULL,
	[HDPhoto] [int] NULL,
	[HDVideo] [int] NULL,
	[Highlighted] [int] NULL,
	[MobileDiamond] [int] NULL,
	[MobileSpotLight] [int] NULL,
	[PayPerLead] [int] NULL,
	[PayPerLease] [int] NULL,
	[RentalsCarousel] [int] NULL,
	[RentalsListing] [int] NULL,
	[RentalsSpotlight] [int] NULL,
	[RentalsStandard] [int] NULL,
	[RentalsStandardPlu] [int] NULL,
	[SponsoredApartment] [int] NULL,
	[SpotLight] [int] NULL,
	[ManagementPeelAd] [int] NULL,
	[CallRecording] [int] NULL,
	[GoldFeaturedCommunity] [int] NULL,
	[MobileDeal] [int] NULL,
	[PhotoUpgrade] [int] NULL,
	[PremiumUpgrade] [int] NULL,
	[RentalsFeatured] [int] NULL,
	[RentalsPremier] [int] NULL,
	[RentFeaturedPlacement] [int] NULL,
	[RentPTE] [int] NULL,
	[RentVIPPlacement] [int] NULL,
	[Linked3DFloorplans] [int] NULL,
	[LinkedRoomPlanner] [int] NULL,
	[TotalUnits] [int] NULL,
	[ShowsOfficeHours] [int] NULL,
	[ShowsPricing] [int] NULL,
	[Whisper] [int] NULL,
	[3DFloorplanUpsell] [int] NULL,
	[AGSitesUpsell] [int] NULL,
	[CommunityCarousel] [int] NULL,
	[Coupon] [int] NULL,
	[DiamondCity] [int] NULL,
	[DiamondMax] [int] NULL,
	[DiamondMetro] [int] NULL,
	[CategoryBadge] [int] NULL,
	[AGDesktopPhoneNumber] [varchar](20) NULL,
	[AGMobilePhoneNumber] [varchar](20) NULL,
	[AGDestinationNumber] [varchar](20) NULL,
	[AGLeadEmailRecipient] [varchar](1000) NULL,
	[RentDesktopPhoneNumber] [varchar](20) NULL,
	[RentMobilePhoneNumber] [varchar](20) NULL,
	[RentDestinationNumber] [varchar](20) NULL,
	[RentLeadEmailRecipient] [varchar](1000) NULL,
	[AGPropertyID] [int] NULL,
	[RentPropertyID] [int] NULL,
	[TotalPoints] [int] NULL,
	[AGPlacementTier] [varchar](20) NULL,
	[RentPlacementTier] [varchar](20) NULL,
	[AGMgtCoName] [varchar](300) NULL,
	[RentMgtCoName] [varchar](300) NULL,
	[PropertyName] [varchar](300) NULL,
	[PropertyAddress] [varchar](300) NULL,
	[PropertyCity] [varchar](300) NULL,
	[PropertyState] [varchar](300) NULL,
	[PropertyZipCode] [int] NULL,
	[AGAvgOverallRatings] [int] NULL,
	[RentAvgOverallRatings] [int] NULL,
	[AGHDPanoTours] [int] NULL,
	[AGStatusID] [int] NULL,
	[RentStatusID] [int] NULL,
	[RentSpotlight] [int] NULL,
	[RentSubscription] [int] NULL,
	[CouponText] [varchar](300) NULL,
	[AGPropertyURL] [varchar](300) NULL,
	[RentPropertyURL] [varchar](300) NULL,
	[YearMonthDay] [int] NULL,
	[YearMonthDayweekly] [int] NULL,
	[YearMonthDaydaily] [int] NULL,
	[MonthDayYear] [int] NULL,
	[MonthDayYearweekly] [int] NULL,
	[MonthDayYeardaily] [int] NULL,
	[YearMonth] [int] NULL,
	[YearMonthweekly] [int] NULL,
	[YearMonthdaily] [int] NULL,
	[AGSitesURL] [varchar](300) NULL,
	[CBSAName] [varchar](300) NULL,
	[CurrentMonthlySpend] [decimal](17, 2) NULL,
	[AGPackageType] [varchar](300) NULL,
	[RentPackageType] [varchar](300) NULL,
	[AGProductDescription] [varchar](8000) NULL,
	[AGMonthlySpend] [decimal](17, 2) NULL,
	[RentProductDescription] [varchar](8000) NULL,
	[RentMonthlySpend] [decimal](17, 2) NULL,
	[ComboProductDescription] [varchar](8000) NULL,
	[ComboProductMonthlySpend] [decimal](17, 2) NULL,
	[ReportURLLeads] [varchar](2020) NULL,
	[ReportURLPageViews] [varchar](2020) NULL,
	[AVGCBSALowRentalRate] [int] NULL,
	[AVGCBSAHighRentalRate] [int] NULL,
	[AVGZipLowRentalRate] [int] NULL,
	[AVGZipHighRentalRate] [int] NULL,
	[AVGCityLowRentalRate] [int] NULL,
	[AVGCityHighRentalRate] [int] NULL,
	[MobileCouponExpirationDate] [datetime] NULL,
	[MobileCouponStartDate] [datetime] NULL,
	[MobileCouponText] [varchar](2000) NULL,
	[MediaCenter] [int] NULL,
	[CorporateBadge] [int] NULL,
	[CollegeBadge] [int] NULL,
	[MilitaryBadge] [int] NULL,
	[SeniorBadge] [int] NULL,
	[LuxuryBadge] [int] NULL,
	[ExternalReferenceID] [varchar](50) NULL,
 CONSTRAINT [PK_DashboardAdvancedSubscriptionMainData_4419111_ListingID] PRIMARY KEY CLUSTERED 
(
	[ListingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[DashboardAVGInfo]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[DashboardAVGInfo](
	[ListingID] [int] NULL,
	[AVGZipLowRentalRate] [int] NULL,
	[AVGZipHighRentalRate] [int] NULL,
	[AVGCBSALowRentalRate] [int] NULL,
	[AVGCBSAHighRentalRate] [int] NULL,
	[AVGCityLowRentalRate] [int] NULL,
	[AVGCityHighRentalRate] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Index [CI_DashboardAVGInfo_on_ListingID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE CLUSTERED INDEX [CI_DashboardAVGInfo_on_ListingID] ON [Staging].[DashboardAVGInfo]
(
	[ListingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [Staging].[DashboardCR3info]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[DashboardCR3info](
	[ListingID] [int] NULL,
	[RentPropertyID] [int] NULL,
	[MGTCOID] [int] NULL,
	[PROPERTYNAME] [varchar](500) NULL,
	[addressline1] [varchar](500) NULL,
	[addressline2] [varchar](500) NULL,
	[CITY] [varchar](500) NULL,
	[statecd] [varchar](50) NULL,
	[postalcode] [varchar](50) NULL,
	[cbsacode] [varchar](50) NULL,
	[cbsaname] [varchar](500) NULL,
	[PrimaryMarketName] [varchar](500) NULL,
	[NumActivePhotos] [int] NULL,
	[HasActiveHDPhotos] [int] NULL,
	[HasCommunityVideoURL] [int] NULL,
	[HasHDVideoURL] [int] NULL,
	[HasVirtualTour] [int] NULL,
	[HasHDTourURL] [int] NULL,
	[NumActiveFloorPlans] [int] NULL,
	[HasLinkedFloorPlans] [int] NULL,
	[HasActiveHDFloorPlans] [int] NULL,
	[NumActiveAmenities] [int] NULL,
	[NumCertRatingsReviews] [int] NULL,
	[HasCouponActive] [int] NULL,
	[HasPricing] [int] NULL,
	[HasOfficeHours] [int] NULL,
	[HasDescriptionLength] [int] NULL,
	[LastUpdate] [datetime] NULL,
	[HasDynamicLeadForm] [int] NULL,
	[PlacementTier] [varchar](500) NULL,
	[Points] [int] NULL,
	[LeadEmail] [varchar](500) NULL
) ON [PRIMARY]

GO
/****** Object:  Index [CI_DashboardCR3Info_on_ListingID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE CLUSTERED INDEX [CI_DashboardCR3Info_on_ListingID] ON [Staging].[DashboardCR3info]
(
	[ListingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [Staging].[DashboardInvInfo]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[DashboardInvInfo](
	[ListingID] [int] NULL,
	[AGPropertyID] [int] NULL,
	[RentComPropertyID] [int] NULL,
	[InvAmt] [decimal](17, 2) NULL,
	[AGPackageType] [varchar](300) NULL,
	[RentPackageType] [varchar](300) NULL,
	[AGProductDescription] [varchar](8000) NULL,
	[AGMonthlySpend] [decimal](17, 2) NULL,
	[RentProductDescription] [varchar](8000) NULL,
	[RentMonthlySpend] [decimal](17, 2) NULL,
	[ComboProductDescription] [varchar](8000) NULL,
	[ComboProductMonthlySpend] [decimal](17, 2) NULL
) ON [PRIMARY]

GO
/****** Object:  Index [CI_DashboardInvInfo_on_ListingID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE CLUSTERED INDEX [CI_DashboardInvInfo_on_ListingID] ON [Staging].[DashboardInvInfo]
(
	[ListingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [Staging].[DashboardMobileCouponInfo]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[DashboardMobileCouponInfo](
	[ListingID] [int] NULL,
	[MobileCouponActive] [int] NULL,
	[MobileCouponText] [varchar](3000) NULL,
	[MobileCouponStartDate] [datetime] NULL,
	[MobileCouponExpirationDate] [datetime] NULL
) ON [PRIMARY]

GO
/****** Object:  Index [CI_DashboardMobileCouponInfo_on_ListingID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE CLUSTERED INDEX [CI_DashboardMobileCouponInfo_on_ListingID] ON [Staging].[DashboardMobileCouponInfo]
(
	[ListingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [Staging].[DashboardURLInfo]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[DashboardURLInfo](
	[ListingID] [int] NULL,
	[Website] [varchar](20) NULL,
	[PropertyID] [int] NULL,
	[RentPropertyID] [int] NULL,
	[PropertyName] [varchar](1000) NULL,
	[PropertyURL] [varchar](3000) NULL
) ON [PRIMARY]

GO
/****** Object:  Index [CI_DashboardURLInfo_on_ListingID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE CLUSTERED INDEX [CI_DashboardURLInfo_on_ListingID] ON [Staging].[DashboardURLInfo]
(
	[ListingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Table [Staging].[DavidsTstTlmPPvt]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[DavidsTstTlmPPvt](
	[ymdid] [int] NOT NULL,
	[parseid] [bigint] NULL,
	[profileid] [int] NOT NULL,
	[subprofileid] [smallint] NULL,
	[eventdate] [datetime] NOT NULL,
	[profile] [varchar](22) NULL,
	[subprofile] [varchar](35) NULL,
	[page] [varchar](28) NULL,
	[position] [varchar](130) NULL,
	[value] [varchar](1555) NULL,
	[listingid] [varchar](10) NULL,
	[action] [varchar](25) NULL,
	[campaign_id] [varchar](135) NULL,
	[entry_campaign_id] [varchar](5) NULL,
	[visit] [varchar](27) NULL,
	[session_id] [varchar](13) NULL,
	[referrer] [varchar](3541) NULL,
	[referring_domain] [varchar](38) NULL,
	[_sm_ovs] [varchar](41) NULL,
	[adlt] [varchar](6) NULL,
	[adt] [varchar](1) NULL,
	[browser] [varchar](18) NULL,
	[browser_size] [varchar](21) NULL,
	[browser_version] [varchar](18) NULL,
	[bvm] [varchar](17) NULL,
	[cd] [varchar](1) NULL,
	[city] [varchar](58) NULL,
	[clickvalue] [varchar](97) NULL,
	[CustIPAddress] [varchar](39) NULL,
	[dcsuri] [varchar](97) NULL,
	[device] [varchar](25) NULL,
	[ei] [varchar](22) NULL,
	[esrc] [varchar](1) NULL,
	[featured_array] [varchar](47) NULL,
	[first_pageview] [varchar](1) NULL,
	[frm] [varchar](1) NULL,
	[hash] [varchar](742) NULL,
	[listing_array] [varchar](319) NULL,
	[listing_type] [varchar](18) NULL,
	[listingid_lead_submission] [varchar](10) NULL,
	[listings_per_page] [varchar](2) NULL,
	[node_class] [varchar](144) NULL,
	[node_g_parent_class] [varchar](167) NULL,
	[node_g_parent_id] [varchar](42) NULL,
	[node_g_parent_name] [varchar](9) NULL,
	[node_great_g_parent_class] [varchar](167) NULL,
	[node_great_g_parent_id] [varchar](30) NULL,
	[node_great_g_parent_name] [varchar](9) NULL,
	[node_href] [varchar](1555) NULL,
	[node_id] [varchar](63) NULL,
	[node_name] [varchar](18) NULL,
	[node_parent_class] [varchar](167) NULL,
	[node_parent_href] [varchar](697) NULL,
	[node_parent_id] [varchar](76) NULL,
	[node_parent_name] [varchar](8) NULL,
	[node_value] [varchar](295) NULL,
	[operating_system] [varchar](11) NULL,
	[os] [varchar](7) NULL,
	[page_category] [varchar](12) NULL,
	[page_number] [varchar](13) NULL,
	[page_sub] [varchar](116) NULL,
	[path] [varchar](481) NULL,
	[querystring] [varchar](1201) NULL,
	[rct] [varchar](1) NULL,
	[screen_resolution] [varchar](14) NULL,
	[selection] [varchar](100) NULL,
	[serveripaddress] [varchar](14) NULL,
	[source] [varchar](3) NULL,
	[spotlight_array] [varchar](58) NULL,
	[spotlight_count] [varchar](2) NULL,
	[sssitename] [varchar](4) NULL,
	[sstestname] [varchar](31) NULL,
	[ssvariationgroupname] [varchar](33) NULL,
	[state] [varchar](21) NULL,
	[title] [varchar](174) NULL,
	[url] [varchar](1247) NULL,
	[user_id] [varchar](27) NULL,
	[useragent] [varchar](1634) NULL,
	[usg] [varchar](34) NULL,
	[ved] [varchar](9) NULL,
	[version] [varchar](18) NULL,
	[visitor] [varchar](13) NULL,
	[wb48617274] [varchar](8) NULL,
	[WT.ti] [varchar](136) NULL,
	[zip_code] [varchar](5) NULL,
	[ef_id] [varchar](2) NULL,
	[derivedcampaignid] [varchar](7) NULL,
	[derivedefid] [varchar](33) NULL,
	[firsteventflag] [varchar](1) NULL,
	[lasteventflag] [varchar](1) NULL,
	[screen_type] [varchar](2) NULL,
	[seq] [varchar](2) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[Diakrit_2D]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[Diakrit_2D](
	[OrderID] [float] NULL,
	[IntergrationNumber] [float] NULL,
	[OrderDate] [datetime] NULL,
	[DeliveryDate] [datetime] NULL,
	[ApartmentNumber] [float] NULL,
	[OrderName] [nvarchar](255) NULL,
	[2DOrdered] [float] NULL,
	[AdditionalFlCharged] [float] NULL,
	[2DCharged] [float] NULL,
	[PricePerUnitUSD] [float] NULL,
	[AmountUSD] [float] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[Diakrit_2D3D]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[Diakrit_2D3D](
	[OrderID] [float] NULL,
	[IntergrationNumber] [float] NULL,
	[OrderDate] [datetime] NULL,
	[DeliveryDate] [datetime] NULL,
	[ApartmentNumber] [float] NULL,
	[OrderName] [nvarchar](255) NULL,
	[2D3DOrdered] [float] NULL,
	[AdditionalFlCharged] [float] NULL,
	[2D3DCharged] [float] NULL,
	[PricePerUnitUSD] [float] NULL,
	[AmountUSD] [float] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[Diakrit_2DCorrections]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[Diakrit_2DCorrections](
	[OrderID] [float] NULL,
	[IntergrationNumber] [float] NULL,
	[OrderDate] [datetime] NULL,
	[DeliveryDate] [datetime] NULL,
	[ApartmentNumber] [float] NULL,
	[OrderName] [nvarchar](255) NULL,
	[2DCorrectionRounds] [float] NULL,
	[PricePerUnitUSD] [float] NULL,
	[AmountUSD] [float] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[Diakrit_3DCorrections]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[Diakrit_3DCorrections](
	[OrderID] [float] NULL,
	[IntergrationNumber] [float] NULL,
	[OrderDate] [datetime] NULL,
	[DeliveryDate] [datetime] NULL,
	[ApartmentNumber] [float] NULL,
	[OrderName] [nvarchar](255) NULL,
	[3DCorrectionRounds] [float] NULL,
	[PricePerUnitUSD] [float] NULL,
	[AmountUSD] [float] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[Diakrit_3DS]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[Diakrit_3DS](
	[OrderID] [float] NULL,
	[IntergrationNumber] [float] NULL,
	[OrderDate] [datetime] NULL,
	[DeliveryDate] [datetime] NULL,
	[ApartmentNumber] [float] NULL,
	[OrderName] [nvarchar](255) NULL,
	[3DOrdered] [float] NULL,
	[AdditionalFlCharged] [float] NULL,
	[3DCharged] [float] NULL,
	[PricePerUnitUSD] [float] NULL,
	[AmountUSD] [float] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[Diakrit_TemplateChange]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[Diakrit_TemplateChange](
	[OrderID] [float] NULL,
	[IntergrationNumber] [float] NULL,
	[OrderDate] [datetime] NULL,
	[DeliveryDate] [datetime] NULL,
	[ApartmentNumber] [float] NULL,
	[OrderName] [nvarchar](255) NULL,
	[TemplateChanges] [float] NULL,
	[PricePerUnitUSD] [float] NULL,
	[AmountUSD] [float] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[DimBackfillListings]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[DimBackfillListings](
	[YMDID] [int] NOT NULL,
	[DisplayListingID] [varchar](30) NOT NULL,
	[ListingID] [int] NOT NULL,
	[PropertyIDAG] [int] NOT NULL,
	[PropertyIDRent] [int] NOT NULL,
	[StatusIDAG] [int] NOT NULL,
	[StatusIDRent] [int] NOT NULL,
	[IsRentals] [tinyint] NOT NULL,
	[IsRentalHouses] [tinyint] NOT NULL,
	[IsLovely] [tinyint] NOT NULL,
	[IsRentSmallProp] [tinyint] NOT NULL,
	[PropertyName] [varchar](100) NOT NULL,
	[PropertyAddress] [varchar](100) NOT NULL,
	[PropertyCity] [varchar](40) NOT NULL,
	[PropertyState] [varchar](2) NOT NULL,
	[ZipCode] [varchar](10) NOT NULL,
	[CBSACode] [varchar](50) NOT NULL,
	[CBSAName] [varchar](200) NOT NULL,
	[GeoLat] [decimal](10, 4) NULL,
	[GeoLong] [decimal](10, 4) NULL,
	[MgtCoID] [varchar](30) NOT NULL,
	[MgtCoName] [varchar](80) NOT NULL,
	[ShowPricing] [tinyint] NULL,
	[LowPrice] [int] NOT NULL,
	[HighPrice] [int] NOT NULL,
	[WebTollFree] [varchar](20) NOT NULL,
	[MobileTollFree] [varchar](20) NOT NULL,
	[ActiveAmenities] [int] NOT NULL,
	[ActiveFloorPlans] [int] NOT NULL,
	[ActivePhotos] [int] NOT NULL,
	[PropertyTotalUnits] [int] NOT NULL,
	[LastUpdateYMDID] [int] NOT NULL,
	[DateModified] [datetime] NULL,
	[TargetPhoneNumber] [varchar](20) NULL,
	[TPLSource] [varchar](30) NULL,
	[IsCourtesy] [int] NOT NULL,
	[IsSmallProperty] [int] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[EmailLeads]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[EmailLeads](
	[listingid] [int] NULL,
	[profileid] [int] NULL,
	[EmailLeads] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[EmailLeadsRecover]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[EmailLeadsRecover](
	[listingid] [int] NULL,
	[profileid] [int] NULL,
	[EmailLeads] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[Events]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[Events](
	[listingid] [int] NULL,
	[profileid] [int] NULL,
	[SRPListingImpr] [int] NULL,
	[SRPUniqueVisit] [int] NULL,
	[PhoneLeads] [int] NULL,
	[MissedCalls] [int] NULL,
	[EmailLeads] [int] NULL,
	[PDPUniqueVisitWeb] [int] NULL,
	[PDPUniqueVisitMobile] [int] NULL,
	[PDPPageViewWeb] [int] NULL,
	[PDPPageViewMobile] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[EventsRecover]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[EventsRecover](
	[listingid] [int] NULL,
	[profileid] [int] NULL,
	[SRPListingImpr] [int] NULL,
	[SRPUniqueVisit] [int] NULL,
	[PhoneLeads] [int] NULL,
	[MissedCalls] [int] NULL,
	[EmailLeads] [int] NULL,
	[PDPUniqueVisitWeb] [int] NULL,
	[PDPUniqueVisitMobile] [int] NULL,
	[PDPPageViewWeb] [int] NULL,
	[PDPPageViewMobile] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[ExactTarget_PTE]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[ExactTarget_PTE](
	[ListingID] [int] NULL,
	[PropertyID] [int] NULL,
	[EmailName] [varchar](50) NULL,
	[YMDID] [int] NULL,
	[PTE] [varchar](50) NULL,
	[SendCount] [int] NULL,
	[DeliveredCount] [int] NULL,
	[Opens] [int] NULL,
	[Clicks] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[Impressions]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[Impressions](
	[listingid] [int] NULL,
	[profileid] [int] NULL,
	[SRPListingImpr] [int] NULL,
	[SRPUniqueVisit] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[ImpressionsRecover]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[ImpressionsRecover](
	[listingid] [int] NULL,
	[profileid] [int] NULL,
	[SRPListingImpr] [int] NULL,
	[SRPUniqueVisit] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[listingArray]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[listingArray](
	[Listingid] [int] NULL,
	[visit] [varchar](7000) NULL,
	[profileid] [int] NULL,
	[EVENT] [varchar](21) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[listingArray_old]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[listingArray_old](
	[Listingid] [varchar](4000) NULL,
	[visit] [varchar](7000) NULL,
	[profileid] [int] NULL,
	[EVENT] [varchar](21) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[listingArrayRecover]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[listingArrayRecover](
	[Listingid] [int] NULL,
	[visit] [varchar](7000) NULL,
	[profileid] [int] NULL,
	[EVENT] [varchar](21) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[Listings]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[Listings](
	[YMDID] [nvarchar](8) NULL,
	[AGPROPERTYID] [numeric](9, 0) NOT NULL,
	[RENTPROPERTYID] [numeric](15, 0) NULL,
	[SALESFORCEID] [nvarchar](20) NOT NULL,
	[LISTINGID] [numeric](9, 0) NOT NULL,
	[LISTINGTYPEID] [numeric](9, 0) NOT NULL,
	[LISTINGTYPE] [nvarchar](25) NOT NULL,
	[EXTERNALID] [nvarchar](50) NULL,
	[EXTERNALPRICECODE] [nvarchar](8) NULL,
	[LISTINGDETAILSSOURCE] [nvarchar](20) NULL,
	[AGMGTCOID] [numeric](9, 0) NULL,
	[RENTMGTCOID] [numeric](9, 0) NULL,
	[AGMGTCONAME] [nvarchar](80) NULL,
	[RENTMGTCONAME] [nvarchar](80) NULL,
	[RENTCOMPANYID] [numeric](15, 0) NULL,
	[PROPERTYNAME] [nvarchar](100) NOT NULL,
	[PROPERTYADDRESS] [nvarchar](40) NULL,
	[AGSTATUSID] [nchar](1) NOT NULL,
	[RENTSTATUSID] [numeric](1, 0) NULL,
	[PROPERTYCITY] [nvarchar](40) NULL,
	[PROPERTYSTATE] [nvarchar](2) NULL,
	[ZIPCODE] [nvarchar](10) NULL,
	[CBSACODE] [nchar](5) NULL,
	[CBSANAME] [nvarchar](64) NULL,
	[TOTALUNITS] [nvarchar](384) NULL,
	[TOTALPHOTOS] [nvarchar](384) NULL,
	[ACTIVEPHOTOS] [nvarchar](384) NULL,
	[TOTALFLOORPLANS] [nvarchar](384) NULL,
	[ACTIVEFLOORPLANS] [nvarchar](384) NULL,
	[TOTALAMENITIES] [nvarchar](384) NULL,
	[ACTIVEAMENITIES] [nvarchar](384) NULL,
	[PRICING] [nvarchar](384) NULL,
	[CALCULATEDPRICE] [nvarchar](384) NULL,
	[UPSELLLISTHIGHLIGHTED] [nvarchar](384) NULL,
	[UPSELLLISTCOUPON] [nvarchar](384) NULL,
	[UPSELLPROPEMERCIAL] [nvarchar](384) NULL,
	[UPSELLPROPFEATCOMMPLATINUM] [nvarchar](384) NULL,
	[UPSELLPROPVIRTUALBROCHURE] [nvarchar](384) NULL,
	[UPSELLLISTCORPORATELISTING] [nvarchar](384) NULL,
	[UPSELLLISTCOLLEGELISTING] [nvarchar](384) NULL,
	[UPSELLLISTMILITARYLISTING] [nvarchar](384) NULL,
	[UPSELLLISTAPARTMENTLISTING] [nvarchar](384) NULL,
	[UPSELLPROPPHOTOUPGRADE] [nvarchar](384) NULL,
	[UPSELLMGMTMANAGEMENTCOLOGO] [nvarchar](384) NULL,
	[UPSELLLISTSENIORLISTING] [nvarchar](384) NULL,
	[UPSELLPROPPROPERTYLOGO] [nvarchar](384) NULL,
	[UPSELLPROPPREMIUMUPGRADE] [nvarchar](384) NULL,
	[UPSELLPROPVIDEOSPOKESMODEL] [nvarchar](384) NULL,
	[UPSELLPROPFRONTPAGE] [nvarchar](384) NULL,
	[UPSELLPROPSPANISH] [nvarchar](384) NULL,
	[UPSELLPROPCALLRECORDING] [nvarchar](384) NULL,
	[CALLRECORDINGOPTOUT] [nvarchar](384) NULL,
	[UPSELLPROPFORMTOPHONE] [nvarchar](384) NULL,
	[UPSELLPROPRENTALSPREMIER] [nvarchar](384) NULL,
	[UPSELLPROPRENTALSFEATURED] [nvarchar](384) NULL,
	[UPSELLLISTRENTALSLISTING] [nvarchar](384) NULL,
	[UPSELLLISTFLOORPLANUPGRADE] [nvarchar](384) NULL,
	[UPSELLPROPCOMMUNITYVIDEO] [nvarchar](384) NULL,
	[UPSELLPROPFEATCOMMGOLD] [nvarchar](384) NULL,
	[UPSELLPROPFEATCOMMSILVER] [nvarchar](384) NULL,
	[UPSELLLISTPAYPERLEAD] [nvarchar](384) NULL,
	[UPSELLLISTRENTALSSPOTLIGHTAD] [nvarchar](384) NULL,
	[UPSELLLISTSPOTLIGHT] [nvarchar](384) NULL,
	[UPSELLLIST30SECONDVIDEO] [nvarchar](384) NULL,
	[UPSELLLIST60SECONDVIDEO] [nvarchar](384) NULL,
	[UPSELLLISTPAYPERLEASE] [nvarchar](384) NULL,
	[UPSELLLISTDIAMONDCITY] [nvarchar](384) NULL,
	[UPSELLLISTDIAMONDMETRO] [nvarchar](384) NULL,
	[UPSELLLISTDIAMONDMAX] [nvarchar](384) NULL,
	[UPSELLLISTRENTALSSTANDARD] [nvarchar](384) NULL,
	[UPSELLLISTCOMMUNITYCAROUSEL] [nvarchar](384) NULL,
	[UPSELLLISTRENTALSCAROUSEL] [nvarchar](384) NULL,
	[UPSELLLISTRENTALSSTANDARDPLUS] [nvarchar](384) NULL,
	[UPSELLLISTMOBILESPOTLIGHT] [nvarchar](384) NULL,
	[UPSELLPROPMOBILEDEAL] [nvarchar](384) NULL,
	[UPSELLPROPDYNAMICLEADFORM] [nvarchar](384) NULL,
	[UPSELLLISTINCOMERESTRICTED] [nvarchar](384) NULL,
	[UPSELLLISTPETFRIENDLY] [nvarchar](384) NULL,
	[UPSELLLISTLUXURYCOMMUNITY] [nvarchar](384) NULL,
	[UPSELLPROPREPMON] [nvarchar](384) NULL,
	[UPSELLPROPSOCIALMEDIAMAN] [nvarchar](384) NULL,
	[UPSELLLISTMOBILEDIAMOND] [nvarchar](384) NULL,
	[UPSELLLISTPAYPERLEASEALM] [nvarchar](384) NULL,
	[ISSEM] [nvarchar](384) NULL,
	[ISOVERTHRESHOLD] [nvarchar](384) NULL,
	[ISRENTALPROP] [nvarchar](384) NULL,
	[CALLTRACKINGINBOOK] [nvarchar](384) NULL,
	[COUPONACTIVE] [nvarchar](384) NULL,
	[COUPONSTARTDATE] [datetime2](7) NULL,
	[COUPONEXPIRATIONDATE] [datetime2](7) NULL,
	[COUPONTEXT] [nvarchar](600) NULL,
	[MOBILECOUPONACTIVE] [nvarchar](384) NULL,
	[MOBILECOUPONSTARTDATE] [datetime2](7) NULL,
	[MOBILECOUPONEXPIRATIONDATE] [datetime2](7) NULL,
	[MOBILECOUPONTEXT] [nvarchar](500) NULL,
	[ISSMALLPROPERTY] [nvarchar](384) NULL,
	[VERIZONFIOS] [nvarchar](384) NULL,
	[ATTUVERSE] [nvarchar](384) NULL,
	[DIRECTV] [nvarchar](384) NULL,
	[BRIGHTHOUSE] [nvarchar](384) NULL,
	[CHARTER] [nvarchar](384) NULL,
	[XFINITYSP] [nvarchar](384) NULL,
	[XFINITYDP] [nvarchar](384) NULL,
	[XFINITYTP] [nvarchar](384) NULL,
	[TIMEWARNER] [nvarchar](384) NULL,
	[RANKING] [nvarchar](1) NULL,
	[NUMERICRANK] [nvarchar](384) NULL,
	[WEBTOLLFREE] [nvarchar](4000) NULL,
	[WEBTARGET] [nvarchar](4000) NULL,
	[RENTALSTOLLFREE] [nvarchar](4000) NULL,
	[RENTALSTARGET] [nvarchar](4000) NULL,
	[ASGTOLLFREE] [nvarchar](4000) NULL,
	[ASGTARGET] [nvarchar](4000) NULL,
	[AGCTOLLFREE] [nvarchar](4000) NULL,
	[AGCTARGET] [nvarchar](4000) NULL,
	[RENTMOBILETOLLFREE] [nvarchar](10) NULL,
	[RENTMOBILETARGET] [nvarchar](4000) NULL,
	[RENTINTERNETTOLLFREE] [nvarchar](10) NULL,
	[RENTINTERNETTARGET] [nvarchar](4000) NULL,
	[CONTACTPHONE] [nvarchar](4000) NULL,
	[LOCALTESTNUMBER] [nvarchar](10) NULL,
	[LEADFAX] [nvarchar](4000) NULL,
	[LEADEMAIL] [nvarchar](4000) NULL,
	[PROPERTYURL] [nvarchar](4000) NULL,
	[AGSITESURL] [nvarchar](4000) NULL,
	[PHONELEADRECAPEMAIL] [nvarchar](4000) NULL,
	[LEADEMAILWITHTYPE] [nvarchar](4000) NULL,
	[RENTLEADFAX] [nvarchar](4000) NULL,
	[RENTLEADEMAIL] [nvarchar](4000) NULL,
	[RENTLEADEMAILWITHTYPE] [nvarchar](4000) NULL,
	[VANITYURL] [nvarchar](255) NULL,
	[PLACEMENTTIER] [nvarchar](384) NULL,
	[RENTPLACEMENTTIER] [nvarchar](384) NULL,
	[PRINTPRODUCTPOINTS] [nvarchar](384) NULL,
	[INTERNETPRODUCTPOINTS] [nvarchar](384) NULL,
	[LEGACYLOYALTYPOINTS] [nvarchar](384) NULL,
	[CONTRACTLOYALTYPOINTS] [nvarchar](384) NULL,
	[MOBILEPOINTS] [nvarchar](384) NULL,
	[LASTUPDATEYMDID] [nvarchar](8) NULL,
	[METRONAME] [nvarchar](2) NULL,
	[REGIONNAME] [nvarchar](50) NULL,
	[SECTIONNAME] [nvarchar](50) NULL,
	[GEOLAT] [numeric](10, 4) NULL,
	[GEOLONG] [numeric](10, 4) NULL,
	[WHISPER] [nchar](1) NULL,
	[LOWPRICE] [nvarchar](384) NULL,
	[HIGHPRICE] [nvarchar](384) NULL,
	[LINKEDFLOORPLAN] [nvarchar](384) NULL,
	[LINKEDHDFLOORPLAN] [nvarchar](384) NULL,
	[LINKEDLOWRESFLOORPLAN] [nvarchar](384) NULL,
	[LINKED3DFLOORPLAN] [nvarchar](384) NULL,
	[LINKEDROOMPLANNER] [nvarchar](384) NULL,
	[RPLRANK] [nvarchar](384) NULL,
	[UPSELLRENTLISTING] [nvarchar](384) NULL,
	[UPSELLRENTREWARDCARD] [nvarchar](384) NULL,
	[UPSELLRENTFEATUREDPLACEMENT] [nvarchar](384) NULL,
	[UPSELLRENTPTE] [nvarchar](384) NULL,
	[UPSELLRENTVIPPLACEMENT] [nvarchar](384) NULL,
	[UPSELLRENTNOVACANCY] [nvarchar](384) NULL,
	[UPSELLRENTSPOTLIGHT] [nvarchar](384) NULL,
	[UPSELLLISTEZPAY] [nvarchar](384) NULL,
	[UPSELLLISTSPONSOREDAPARTMENT] [nvarchar](384) NULL,
	[UPSELLMGMTCOPEELAD] [nvarchar](384) NULL,
	[UPSELLLISTHDPANOTOURS] [nvarchar](384) NULL,
	[UPSELLLISTHDVIDEO] [nvarchar](384) NULL,
	[UPSELLLISTHDPHOTO] [nvarchar](384) NULL,
	[UPSELLLIST3DFLOORPLAN] [nvarchar](384) NULL,
	[ACTIVEHDFLOORPLANS] [nvarchar](384) NULL,
	[ACTIVELOWRESFLOORPLANS] [nvarchar](384) NULL,
	[ACTIVEHDPHOTOS] [nvarchar](384) NULL,
	[ACTIVELOWRESPHOTOS] [nvarchar](384) NULL,
	[COMMUNITYVIDEOURLFULFILLED] [nvarchar](384) NULL,
	[HDACTIVEFLOORPLANSFULFILLED] [nvarchar](384) NULL,
	[HDACTIVEPHOTOSFULFILLED] [nvarchar](384) NULL,
	[HDTOURURLFULFILLED] [nvarchar](384) NULL,
	[HDVIDEOURLFULFILLED] [nvarchar](384) NULL,
	[LINKEDFLOORPLANFULFILLED] [nvarchar](384) NULL,
	[LINKEDHDFLOORPLANFULFILLED] [nvarchar](384) NULL,
	[LINKEDLOWRESFLOORPLANFULFILLED] [nvarchar](384) NULL,
	[LINKED3DFLOORPLANFULFILLED] [nvarchar](384) NULL,
	[LINKEDROOMPLANNERFULFILLED] [nvarchar](384) NULL,
	[LISTINGDESCRIPTIONLENGTH] [nvarchar](384) NULL,
	[SHOWOFFICEHOURS] [nvarchar](384) NULL,
	[VIRTUALTOURFULFILLED] [nvarchar](384) NULL,
	[UPSELLRENTMETROFL] [nvarchar](384) NULL,
	[UPSELLRENTSUBSCRIPTIONMODEL] [nvarchar](384) NULL,
	[UPSELLLISTAGSITES] [nvarchar](384) NULL,
	[UPSELLMEDIACENTER] [nvarchar](384) NULL,
	[MOBILEDEALFULFILLED] [nvarchar](384) NULL,
	[HasCR3] [int] NULL,
	[CR3AvgOverallRatingAG] [nvarchar](384) NULL,
	[CR3AvgOverallRatingRent] [nvarchar](384) NULL,
	[MarketName] [varchar](50) NULL,
	[MarketCD] [varchar](20) NULL,
	[BillingIDAG] [varchar](20) NULL,
	[BillingIDRent] [varchar](20) NULL,
	[GeoPoint] [geography] NULL,
	[SFPropertyAcctID] [nvarchar](20) NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [Staging].[Listings_BAK]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[Listings_BAK](
	[YMDID] [nvarchar](8) NULL,
	[AGPROPERTYID] [numeric](9, 0) NOT NULL,
	[RENTPROPERTYID] [numeric](15, 0) NULL,
	[SALESFORCEID] [nvarchar](20) NOT NULL,
	[LISTINGID] [numeric](9, 0) NOT NULL,
	[LISTINGTYPEID] [numeric](9, 0) NOT NULL,
	[LISTINGTYPE] [nvarchar](25) NOT NULL,
	[EXTERNALID] [nvarchar](50) NULL,
	[EXTERNALPRICECODE] [nvarchar](8) NULL,
	[LISTINGDETAILSSOURCE] [nvarchar](20) NULL,
	[AGMGTCOID] [numeric](9, 0) NULL,
	[RENTMGTCOID] [numeric](9, 0) NULL,
	[AGMGTCONAME] [nvarchar](80) NULL,
	[RENTMGTCONAME] [nvarchar](80) NULL,
	[RENTCOMPANYID] [numeric](15, 0) NULL,
	[PROPERTYNAME] [nvarchar](100) NOT NULL,
	[PROPERTYADDRESS] [nvarchar](40) NULL,
	[AGSTATUSID] [nchar](1) NOT NULL,
	[RENTSTATUSID] [numeric](1, 0) NULL,
	[PROPERTYCITY] [nvarchar](40) NULL,
	[PROPERTYSTATE] [nvarchar](2) NULL,
	[ZIPCODE] [nvarchar](10) NULL,
	[CBSACODE] [nchar](5) NULL,
	[CBSANAME] [nvarchar](64) NULL,
	[TOTALUNITS] [nvarchar](384) NULL,
	[TOTALPHOTOS] [nvarchar](384) NULL,
	[ACTIVEPHOTOS] [nvarchar](384) NULL,
	[TOTALFLOORPLANS] [nvarchar](384) NULL,
	[ACTIVEFLOORPLANS] [nvarchar](384) NULL,
	[TOTALAMENITIES] [nvarchar](384) NULL,
	[ACTIVEAMENITIES] [nvarchar](384) NULL,
	[PRICING] [nvarchar](384) NULL,
	[CALCULATEDPRICE] [nvarchar](384) NULL,
	[UPSELLLISTHIGHLIGHTED] [nvarchar](384) NULL,
	[UPSELLLISTCOUPON] [nvarchar](384) NULL,
	[UPSELLPROPEMERCIAL] [nvarchar](384) NULL,
	[UPSELLPROPFEATCOMMPLATINUM] [nvarchar](384) NULL,
	[UPSELLPROPVIRTUALBROCHURE] [nvarchar](384) NULL,
	[UPSELLLISTCORPORATELISTING] [nvarchar](384) NULL,
	[UPSELLLISTCOLLEGELISTING] [nvarchar](384) NULL,
	[UPSELLLISTMILITARYLISTING] [nvarchar](384) NULL,
	[UPSELLLISTAPARTMENTLISTING] [nvarchar](384) NULL,
	[UPSELLPROPPHOTOUPGRADE] [nvarchar](384) NULL,
	[UPSELLMGMTMANAGEMENTCOLOGO] [nvarchar](384) NULL,
	[UPSELLLISTSENIORLISTING] [nvarchar](384) NULL,
	[UPSELLPROPPROPERTYLOGO] [nvarchar](384) NULL,
	[UPSELLPROPPREMIUMUPGRADE] [nvarchar](384) NULL,
	[UPSELLPROPVIDEOSPOKESMODEL] [nvarchar](384) NULL,
	[UPSELLPROPFRONTPAGE] [nvarchar](384) NULL,
	[UPSELLPROPSPANISH] [nvarchar](384) NULL,
	[UPSELLPROPCALLRECORDING] [nvarchar](384) NULL,
	[CALLRECORDINGOPTOUT] [nvarchar](384) NULL,
	[UPSELLPROPFORMTOPHONE] [nvarchar](384) NULL,
	[UPSELLPROPRENTALSPREMIER] [nvarchar](384) NULL,
	[UPSELLPROPRENTALSFEATURED] [nvarchar](384) NULL,
	[UPSELLLISTRENTALSLISTING] [nvarchar](384) NULL,
	[UPSELLLISTFLOORPLANUPGRADE] [nvarchar](384) NULL,
	[UPSELLPROPCOMMUNITYVIDEO] [nvarchar](384) NULL,
	[UPSELLPROPFEATCOMMGOLD] [nvarchar](384) NULL,
	[UPSELLPROPFEATCOMMSILVER] [nvarchar](384) NULL,
	[UPSELLLISTPAYPERLEAD] [nvarchar](384) NULL,
	[UPSELLLISTRENTALSSPOTLIGHTAD] [nvarchar](384) NULL,
	[UPSELLLISTSPOTLIGHT] [nvarchar](384) NULL,
	[UPSELLLIST30SECONDVIDEO] [nvarchar](384) NULL,
	[UPSELLLIST60SECONDVIDEO] [nvarchar](384) NULL,
	[UPSELLLISTPAYPERLEASE] [nvarchar](384) NULL,
	[UPSELLLISTDIAMONDCITY] [nvarchar](384) NULL,
	[UPSELLLISTDIAMONDMETRO] [nvarchar](384) NULL,
	[UPSELLLISTDIAMONDMAX] [nvarchar](384) NULL,
	[UPSELLLISTRENTALSSTANDARD] [nvarchar](384) NULL,
	[UPSELLLISTCOMMUNITYCAROUSEL] [nvarchar](384) NULL,
	[UPSELLLISTRENTALSCAROUSEL] [nvarchar](384) NULL,
	[UPSELLLISTRENTALSSTANDARDPLUS] [nvarchar](384) NULL,
	[UPSELLLISTMOBILESPOTLIGHT] [nvarchar](384) NULL,
	[UPSELLPROPMOBILEDEAL] [nvarchar](384) NULL,
	[UPSELLPROPDYNAMICLEADFORM] [nvarchar](384) NULL,
	[UPSELLLISTINCOMERESTRICTED] [nvarchar](384) NULL,
	[UPSELLLISTPETFRIENDLY] [nvarchar](384) NULL,
	[UPSELLLISTLUXURYCOMMUNITY] [nvarchar](384) NULL,
	[UPSELLPROPREPMON] [nvarchar](384) NULL,
	[UPSELLPROPSOCIALMEDIAMAN] [nvarchar](384) NULL,
	[UPSELLLISTMOBILEDIAMOND] [nvarchar](384) NULL,
	[ISSEM] [nvarchar](384) NULL,
	[ISOVERTHRESHOLD] [nvarchar](384) NULL,
	[ISRENTALPROP] [nvarchar](384) NULL,
	[CALLTRACKINGINBOOK] [nvarchar](384) NULL,
	[COUPONACTIVE] [nvarchar](384) NULL,
	[COUPONSTARTDATE] [datetime2](7) NULL,
	[COUPONEXPIRATIONDATE] [datetime2](7) NULL,
	[COUPONTEXT] [nvarchar](600) NULL,
	[MOBILECOUPONACTIVE] [nvarchar](384) NULL,
	[MOBILECOUPONSTARTDATE] [datetime2](7) NULL,
	[MOBILECOUPONEXPIRATIONDATE] [datetime2](7) NULL,
	[MOBILECOUPONTEXT] [nvarchar](500) NULL,
	[ISSMALLPROPERTY] [nvarchar](384) NULL,
	[VERIZONFIOS] [nvarchar](384) NULL,
	[ATTUVERSE] [nvarchar](384) NULL,
	[DIRECTV] [nvarchar](384) NULL,
	[BRIGHTHOUSE] [nvarchar](384) NULL,
	[CHARTER] [nvarchar](384) NULL,
	[XFINITYSP] [nvarchar](384) NULL,
	[XFINITYDP] [nvarchar](384) NULL,
	[XFINITYTP] [nvarchar](384) NULL,
	[TIMEWARNER] [nvarchar](384) NULL,
	[RANKING] [nvarchar](1) NULL,
	[NUMERICRANK] [nvarchar](384) NULL,
	[WEBTOLLFREE] [nvarchar](4000) NULL,
	[WEBTARGET] [nvarchar](4000) NULL,
	[RENTALSTOLLFREE] [nvarchar](4000) NULL,
	[RENTALSTARGET] [nvarchar](4000) NULL,
	[ASGTOLLFREE] [nvarchar](4000) NULL,
	[ASGTARGET] [nvarchar](4000) NULL,
	[AGCTOLLFREE] [nvarchar](4000) NULL,
	[AGCTARGET] [nvarchar](4000) NULL,
	[RENTMOBILETOLLFREE] [nvarchar](10) NULL,
	[RENTMOBILETARGET] [nvarchar](4000) NULL,
	[RENTINTERNETTOLLFREE] [nvarchar](10) NULL,
	[RENTINTERNETTARGET] [nvarchar](4000) NULL,
	[CONTACTPHONE] [nvarchar](4000) NULL,
	[LOCALTESTNUMBER] [nvarchar](10) NULL,
	[LEADFAX] [nvarchar](4000) NULL,
	[LEADEMAIL] [nvarchar](4000) NULL,
	[PROPERTYURL] [nvarchar](4000) NULL,
	[AGSITESURL] [nvarchar](4000) NULL,
	[PHONELEADRECAPEMAIL] [nvarchar](4000) NULL,
	[LEADEMAILWITHTYPE] [nvarchar](4000) NULL,
	[RENTLEADFAX] [nvarchar](4000) NULL,
	[RENTLEADEMAIL] [nvarchar](4000) NULL,
	[RENTLEADEMAILWITHTYPE] [nvarchar](4000) NULL,
	[VANITYURL] [nvarchar](255) NULL,
	[PLACEMENTTIER] [nvarchar](384) NULL,
	[RENTPLACEMENTTIER] [nvarchar](384) NULL,
	[PRINTPRODUCTPOINTS] [nvarchar](384) NULL,
	[INTERNETPRODUCTPOINTS] [nvarchar](384) NULL,
	[LEGACYLOYALTYPOINTS] [nvarchar](384) NULL,
	[CONTRACTLOYALTYPOINTS] [nvarchar](384) NULL,
	[MOBILEPOINTS] [nvarchar](384) NULL,
	[LASTUPDATEYMDID] [nvarchar](8) NULL,
	[METRONAME] [nvarchar](2) NULL,
	[REGIONNAME] [nvarchar](50) NULL,
	[SECTIONNAME] [nvarchar](50) NULL,
	[GEOLAT] [numeric](10, 4) NULL,
	[GEOLONG] [numeric](10, 4) NULL,
	[WHISPER] [nchar](1) NULL,
	[LOWPRICE] [nvarchar](384) NULL,
	[HIGHPRICE] [nvarchar](384) NULL,
	[LINKEDFLOORPLAN] [nvarchar](384) NULL,
	[LINKEDHDFLOORPLAN] [nvarchar](384) NULL,
	[LINKEDLOWRESFLOORPLAN] [nvarchar](384) NULL,
	[LINKED3DFLOORPLAN] [nvarchar](384) NULL,
	[LINKEDROOMPLANNER] [nvarchar](384) NULL,
	[RPLRANK] [nvarchar](384) NULL,
	[UPSELLRENTLISTING] [nvarchar](384) NULL,
	[UPSELLRENTREWARDCARD] [nvarchar](384) NULL,
	[UPSELLRENTFEATUREDPLACEMENT] [nvarchar](384) NULL,
	[UPSELLRENTPTE] [nvarchar](384) NULL,
	[UPSELLRENTVIPPLACEMENT] [nvarchar](384) NULL,
	[UPSELLRENTNOVACANCY] [nvarchar](384) NULL,
	[UPSELLRENTSPOTLIGHT] [nvarchar](384) NULL,
	[UPSELLLISTEZPAY] [nvarchar](384) NULL,
	[UPSELLLISTSPONSOREDAPARTMENT] [nvarchar](384) NULL,
	[UPSELLMGMTCOPEELAD] [nvarchar](384) NULL,
	[UPSELLLISTHDPANOTOURS] [nvarchar](384) NULL,
	[UPSELLLISTHDVIDEO] [nvarchar](384) NULL,
	[UPSELLLISTHDPHOTO] [nvarchar](384) NULL,
	[UPSELLLIST3DFLOORPLAN] [nvarchar](384) NULL,
	[ACTIVEHDFLOORPLANS] [nvarchar](384) NULL,
	[ACTIVELOWRESFLOORPLANS] [nvarchar](384) NULL,
	[ACTIVEHDPHOTOS] [nvarchar](384) NULL,
	[ACTIVELOWRESPHOTOS] [nvarchar](384) NULL,
	[COMMUNITYVIDEOURLFULFILLED] [nvarchar](384) NULL,
	[HDACTIVEFLOORPLANSFULFILLED] [nvarchar](384) NULL,
	[HDACTIVEPHOTOSFULFILLED] [nvarchar](384) NULL,
	[HDTOURURLFULFILLED] [nvarchar](384) NULL,
	[HDVIDEOURLFULFILLED] [nvarchar](384) NULL,
	[LINKEDFLOORPLANFULFILLED] [nvarchar](384) NULL,
	[LINKEDHDFLOORPLANFULFILLED] [nvarchar](384) NULL,
	[LINKEDLOWRESFLOORPLANFULFILLED] [nvarchar](384) NULL,
	[LINKED3DFLOORPLANFULFILLED] [nvarchar](384) NULL,
	[LINKEDROOMPLANNERFULFILLED] [nvarchar](384) NULL,
	[LISTINGDESCRIPTIONLENGTH] [nvarchar](384) NULL,
	[SHOWOFFICEHOURS] [nvarchar](384) NULL,
	[VIRTUALTOURFULFILLED] [nvarchar](384) NULL,
	[UPSELLRENTMETROFL] [nvarchar](384) NULL,
	[UPSELLRENTSUBSCRIPTIONMODEL] [nvarchar](384) NULL,
	[UPSELLLISTAGSITES] [nvarchar](384) NULL,
	[UPSELLMEDIACENTER] [nvarchar](384) NULL,
	[MOBILEDEALFULFILLED] [nvarchar](384) NULL,
	[CR3AvgOverallRatingAG] [nvarchar](384) NULL,
	[CR3AvgOverallRatingRent] [nvarchar](384) NULL,
	[MarketName] [varchar](50) NULL,
	[MarketCD] [varchar](20) NULL,
	[BillingIDAG] [varchar](20) NULL,
	[BillingIDRent] [varchar](20) NULL,
	[GeoPoint] [geography] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [Staging].[LocatorListings]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[LocatorListings](
	[YMDID] [int] NULL,
	[ListingID] [int] NULL,
	[StatusID] [int] NULL,
	[StatusIDAG] [int] NULL,
	[StatusIDRent] [int] NULL,
	[StatusIDRentalHouses] [int] NULL,
	[StatusIDRentals] [int] NULL,
	[DataSource] [varchar](25) NULL,
	[PropertyName] [varchar](100) NULL,
	[Address] [varchar](200) NULL,
	[City] [varchar](50) NULL,
	[State] [varchar](20) NULL,
	[Zip] [varchar](10) NULL,
	[Latitude] [decimal](10, 4) NULL,
	[Longitude] [decimal](10, 4) NULL,
	[MarketCD] [varchar](20) NULL,
	[MarketName] [varchar](50) NULL,
	[Phone] [varchar](20) NULL,
	[Email] [varchar](200) NULL,
	[LowPrice] [int] NULL,
	[HighPrice] [int] NULL,
	[MinBedrooms] [int] NULL,
	[MaxBedrooms] [int] NULL,
	[ShowOfficeHours] [int] NULL,
	[ActivePhotos] [int] NULL,
	[ActiveFloorPlans] [int] NULL,
	[ActiveAmenities] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[MartListings_Oct]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[MartListings_Oct](
	[YMDID] [int] NOT NULL,
	[YearMonth] [int] NOT NULL,
	[ListingID] [int] NOT NULL,
	[ListingDescriptionLength] [int] NOT NULL,
	[ListingTypeID] [int] NOT NULL,
	[ListingTypeShort] [varchar](5) NOT NULL,
	[PropertyIDAG] [int] NOT NULL,
	[StatusIDAG] [tinyint] NOT NULL,
	[PropertyIDRent] [int] NOT NULL,
	[StatusIDRent] [tinyint] NOT NULL,
	[ListingType] [varchar](25) NOT NULL,
	[IsSEM] [tinyint] NOT NULL,
	[ShowPricing] [tinyint] NOT NULL,
	[LowPrice] [int] NOT NULL,
	[HighPrice] [int] NOT NULL,
	[CallRecordingOptOut] [tinyint] NOT NULL,
	[TotalAmenities] [int] NOT NULL,
	[ActiveAmenities] [tinyint] NOT NULL,
	[ActiveCoupon] [tinyint] NOT NULL,
	[ActiveFloorplans] [smallint] NOT NULL,
	[ActiveHDFloorPlans] [tinyint] NOT NULL,
	[ActiveHDPhotos] [tinyint] NOT NULL,
	[ActivePhotos] [smallint] NOT NULL,
	[ExternalID] [varchar](50) NOT NULL,
	[HasAvailabilityURL] [tinyint] NULL,
	[ExternalPriceCode] [varchar](8) NOT NULL,
	[CallTrackingInBook] [tinyint] NOT NULL,
	[InvoicedLeases] [int] NOT NULL,
	[IsOverThreshold] [tinyint] NOT NULL,
	[IsRentalProp] [tinyint] NOT NULL,
	[LastUpdateYMDID] [int] NOT NULL,
	[LeaseMgtCoID] [int] NOT NULL,
	[RentLeaseMgtCoID] [int] NOT NULL,
	[ATTUverse] [tinyint] NOT NULL,
	[BrightHouse] [tinyint] NOT NULL,
	[Charter] [tinyint] NOT NULL,
	[DIRECTV] [tinyint] NOT NULL,
	[TimeWarner] [tinyint] NOT NULL,
	[VerizonFIOS] [tinyint] NOT NULL,
	[XfinityDP] [tinyint] NOT NULL,
	[XfinitySP] [tinyint] NOT NULL,
	[XfinityTP] [tinyint] NOT NULL,
	[HasCR3] [tinyint] NOT NULL,
	[CR3AvgOverallRatingAG] [decimal](16, 1) NOT NULL,
	[CR3AvgOverallRatingRent] [decimal](16, 1) NOT NULL,
	[ShowOfficeHours] [tinyint] NOT NULL,
	[PlacementTierAG] [int] NOT NULL,
	[PlacementTierRent] [int] NOT NULL,
	[ContractLoyaltyPoints] [int] NOT NULL,
	[InternetProductPoints] [int] NOT NULL,
	[LegacyLoyaltyPoints] [int] NOT NULL,
	[MobilePoints] [int] NOT NULL,
	[PrintProductPoints] [int] NOT NULL,
	[Ranking] [char](1) NOT NULL,
	[NumericRank] [decimal](15, 4) NOT NULL,
	[RPLRANK] [decimal](8, 2) NOT NULL,
	[BadgeCollege] [tinyint] NOT NULL,
	[BadgeCorporate] [tinyint] NOT NULL,
	[BadgeIncomeRestricted] [tinyint] NOT NULL,
	[BadgeLuxury] [tinyint] NOT NULL,
	[BadgeMilitary] [tinyint] NOT NULL,
	[BadgePetFriendly] [tinyint] NOT NULL,
	[BadgeSenior] [tinyint] NOT NULL,
	[BadgeGolf] [tinyint] NULL,
	[BadgeWaterfront] [tinyint] NULL,
	[BadgeFurnished] [tinyint] NULL,
	[DefaultBadge] [varchar](50) NULL,
	[Upsell30SecondVideo] [tinyint] NOT NULL,
	[Upsell3DFloorplan] [tinyint] NOT NULL,
	[Upsell60SecondVideo] [tinyint] NOT NULL,
	[UpsellAdCreator] [tinyint] NOT NULL,
	[UpsellAGMobileSyndication] [tinyint] NOT NULL,
	[UpsellAGSites] [tinyint] NOT NULL,
	[UpsellApartmentListing] [tinyint] NOT NULL,
	[UpsellBillingOnly] [tinyint] NOT NULL,
	[UpsellCallRecording] [tinyint] NOT NULL,
	[UpsellCarousel] [tinyint] NOT NULL,
	[UpsellCarouselRentals] [tinyint] NOT NULL,
	[UpsellCategoryListing] [tinyint] NOT NULL,
	[UpsellCommunityVideo] [tinyint] NOT NULL,
	[UpsellCommunityVideoURLFulfilled] [tinyint] NOT NULL,
	[UpsellCoupon] [tinyint] NOT NULL,
	[UpsellDiamondCity] [tinyint] NOT NULL,
	[UpsellDiamondMax] [tinyint] NOT NULL,
	[UpsellDiamondMetro] [tinyint] NOT NULL,
	[UpsellDynamicLeadForm] [tinyint] NOT NULL,
	[UpsellEmercial] [tinyint] NOT NULL,
	[UpsellEZPay] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityAG] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityGold] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityPlatinum] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityRent] [tinyint] NOT NULL,
	[UpsellFeaturedCommunitySilver] [tinyint] NOT NULL,
	[UpsellFeaturedListingRentals] [tinyint] NOT NULL,
	[UpsellFloorPlanUpgrade] [tinyint] NOT NULL,
	[UpsellFormToPhone] [tinyint] NOT NULL,
	[UpsellFrontPage] [tinyint] NOT NULL,
	[UpsellGoldTier] [tinyint] NOT NULL,
	[UpsellHDActiveFloorplansFulfilled] [tinyint] NOT NULL,
	[UpsellHDActivePhotosFulfilled] [tinyint] NOT NULL,
	[UpsellHDPanoTour] [tinyint] NOT NULL,
	[UpsellHDPanoTourFulfilled] [tinyint] NOT NULL,
	[UpsellHDPhoto] [tinyint] NOT NULL,
	[UpsellHDVideo] [tinyint] NOT NULL,
	[UpsellHDVideoFulfilled] [tinyint] NOT NULL,
	[UpsellHighlighted] [tinyint] NOT NULL,
	[UpsellLeadMail] [tinyint] NOT NULL,
	[UpsellLinked3DFloorplan] [smallint] NOT NULL,
	[UpsellLinked3DFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedFloorplan] [smallint] NOT NULL,
	[UpsellLinkedFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedHDFloorplan] [tinyint] NOT NULL,
	[UpsellLinkedHDFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedLowResFloorPlan] [tinyint] NOT NULL,
	[UpsellLinkedLowResFloorPlanFulFilled] [tinyint] NOT NULL,
	[UpsellLinkedRoomPlanner] [smallint] NOT NULL,
	[UpsellLinkedRoomPlannerFulfilled] [tinyint] NOT NULL,
	[UpsellListingRent] [tinyint] NOT NULL,
	[UpsellListingRentals] [tinyint] NOT NULL,
	[UpsellMediaCenter] [tinyint] NOT NULL,
	[UpsellMediaCenterCoupon] [tinyint] NOT NULL,
	[UpsellMgmtManagementCoLogoDisplay] [tinyint] NOT NULL,
	[UpsellMgmtPeelAd] [tinyint] NOT NULL,
	[UpsellMobileDeal] [tinyint] NOT NULL,
	[UpsellMobileDealFulfilled] [tinyint] NOT NULL,
	[UpsellMobileDiamond] [tinyint] NOT NULL,
	[UpsellMobileSpotlight] [tinyint] NOT NULL,
	[UpsellNoVacancyRent] [tinyint] NOT NULL,
	[UpsellPayPerLead] [tinyint] NOT NULL,
	[UpsellPayPerLease] [tinyint] NOT NULL,
	[UpsellPayPerLeaseALM] [tinyint] NOT NULL,
	[UpsellPhotoPlus] [tinyint] NOT NULL,
	[UpsellPhotoUpgrade] [tinyint] NOT NULL,
	[UpsellPlatinumTier] [tinyint] NOT NULL,
	[UpsellPrecisionTargetedEmailRent] [tinyint] NOT NULL,
	[UpsellPremierListingRentals] [tinyint] NOT NULL,
	[UpsellPremiumUpgrade] [tinyint] NOT NULL,
	[UpsellPropertyLogo] [tinyint] NOT NULL,
	[UpsellRentFeaturedPlacement] [tinyint] NOT NULL,
	[UpsellRentpathConnect] [tinyint] NOT NULL,
	[UpsellRepMon] [tinyint] NOT NULL,
	[UpsellRewardCardRent] [tinyint] NOT NULL,
	[UpsellSocialMediaMan] [tinyint] NOT NULL,
	[UpsellSpanish] [tinyint] NOT NULL,
	[UpsellSponsoredApartment] [tinyint] NOT NULL,
	[UpsellSpotlightAG] [tinyint] NOT NULL,
	[UpsellSpotlightRent] [tinyint] NOT NULL,
	[UpsellSpotlightRentals] [tinyint] NOT NULL,
	[UpsellStandardListingRentals] [tinyint] NOT NULL,
	[UpsellStandardPlusListingRentals] [tinyint] NOT NULL,
	[UpsellSubscriptionModelRent] [tinyint] NOT NULL,
	[UpsellVideoSpokesmodel] [tinyint] NOT NULL,
	[UpsellVIPPlacementRent] [tinyint] NOT NULL,
	[UpsellVirtualBrochure] [tinyint] NOT NULL,
	[UpsellVirtualTourFulfilled] [tinyint] NOT NULL,
	[ClicksCheckYourCredit] [int] NOT NULL,
	[ClicksCommunityVideoAG] [int] NOT NULL,
	[ClicksCR3AG] [int] NOT NULL,
	[ClicksCR3Rent] [int] NOT NULL,
	[ClicksDiamondMaxCheckAvailAG] [int] NOT NULL,
	[ClicksDiamondMaxPhotoAG] [int] NOT NULL,
	[ClicksFeatCommCheckAvailAG] [int] NOT NULL,
	[ClicksFeatCommCheckAvailRent] [int] NOT NULL,
	[ClicksFeaturedCommunityAG] [int] NOT NULL,
	[ClicksFeaturedCommunityRent] [int] NOT NULL,
	[ClicksFeaturedMgtCo] [int] NOT NULL,
	[ClicksFloorplanAG] [int] NOT NULL,
	[ClicksFloorplanRent] [int] NOT NULL,
	[ClicksFrontPagePropLead] [int] NOT NULL,
	[ClicksHDFloorplanAG] [int] NOT NULL,
	[ClicksHDFloorplanRent] [int] NOT NULL,
	[ClicksHDPanoTourAG] [int] NOT NULL,
	[ClicksHDPanoTourRent] [int] NOT NULL,
	[ClicksHDPhotoAG] [int] NOT NULL,
	[ClicksHDPhotoRent] [int] NOT NULL,
	[ClicksHDVideoAG] [int] NOT NULL,
	[ClicksHDVideoRent] [int] NOT NULL,
	[ClicksLeadSubmissionAG] [int] NOT NULL,
	[ClicksLeadSubmissionRent] [int] NOT NULL,
	[ClicksMapAG] [int] NOT NULL,
	[ClicksMapRent] [int] NOT NULL,
	[ClicksMgtCoPeelAdAG] [int] NOT NULL,
	[ClicksMgtCoPeelAdRent] [int] NOT NULL,
	[ClicksMgtCoURLAG] [int] NOT NULL,
	[ClicksMgtCoURLRent] [int] NOT NULL,
	[ClicksPhotosAG] [int] NOT NULL,
	[ClicksPhotosRent] [int] NOT NULL,
	[ClicksReserveNowAG] [int] NOT NULL,
	[ClicksReserveNowRent] [int] NOT NULL,
	[ClicksSpotlightRentSpecialsAG] [int] NOT NULL,
	[ClicksSpotlightRentSpecialsRent] [int] NOT NULL,
	[ClicksSpotlightReserveNowAG] [int] NOT NULL,
	[ClicksSRPListingCheckAvailAG] [int] NOT NULL,
	[ClicksSRPListingCheckAvailRent] [int] NOT NULL,
	[ClicksWebURLAG] [int] NOT NULL,
	[ClicksWebURLRent] [int] NOT NULL,
	[ViewsEmercial] [int] NOT NULL,
	[ViewsListingPage] [int] NOT NULL,
	[ViewsListingPage_Mobile] [int] NOT NULL,
	[ViewsListingPage_Sites] [int] NOT NULL,
	[ViewsListingPageAGSites] [int] NOT NULL,
	[ViewsListingPageMobileAG] [int] NOT NULL,
	[ViewsListingPageMobileRent] [int] NOT NULL,
	[ViewsListingPageWebAG] [int] NOT NULL,
	[ViewsListingPageWebRent] [int] NOT NULL,
	[ViewsVirtualBrochure] [int] NOT NULL,
	[AGCPrintConnectedCalls] [int] NOT NULL,
	[AGCPrintMissedCalls] [int] NOT NULL,
	[ASGPrintConnectedCalls] [int] NOT NULL,
	[ASGPrintMissedCalls] [int] NOT NULL,
	[CombinedFeedsConnectedCalls] [int] NOT NULL,
	[CombinedFeedsMissedCalls] [int] NOT NULL,
	[CraigsListConnectedCalls] [int] NOT NULL,
	[CraigsListMissedCalls] [int] NOT NULL,
	[CTCConnectedCalls] [int] NOT NULL,
	[CTCMissedCalls] [int] NOT NULL,
	[GoogleConnectedCalls] [int] NOT NULL,
	[GoogleMissedCalls] [int] NOT NULL,
	[LeadMailConnectedCalls] [int] NOT NULL,
	[LeadMailMissedCalls] [int] NOT NULL,
	[LuxuryConnectedCalls] [int] NOT NULL,
	[LuxuryMissedCalls] [int] NOT NULL,
	[MarchexConnectedCalls] [int] NOT NULL,
	[MarchexMissedCalls] [int] NOT NULL,
	[MobileSEMConnectedCalls] [int] NOT NULL,
	[MobileSEMMissedCalls] [int] NOT NULL,
	[PaidSPConnectedCalls] [int] NOT NULL,
	[PaidSPMissedCalls] [int] NOT NULL,
	[PPCConnectedCalls] [int] NOT NULL,
	[PPCMissedCalls] [int] NOT NULL,
	[RentConnectedCallsAG] [int] NOT NULL,
	[RentMissedCallsAG] [int] NOT NULL,
	[RentConnectedCallsRent] [int] NOT NULL,
	[RentMissedCallsRent] [int] NOT NULL,
	[RentMobileConnectedCallsAG] [int] NOT NULL,
	[RentMobileMissedCallsAG] [int] NOT NULL,
	[RentMobileConnectedCallsRent] [int] NOT NULL,
	[RentMobileMissedCallsRent] [int] NOT NULL,
	[RentMobileSEMConnectedCalls] [int] NOT NULL,
	[RentMobileSEMMissedCalls] [int] NOT NULL,
	[RentOneWebConnectedCallsAG] [int] NOT NULL,
	[RentOneWebMissedCallsAG] [int] NOT NULL,
	[RentOneWebConnectedCallsRent] [int] NOT NULL,
	[RentOneWebMissedCallsRent] [int] NOT NULL,
	[RentSEMConnectedCalls] [int] NOT NULL,
	[RentSEMMissedCalls] [int] NOT NULL,
	[SEMConnectedCalls] [int] NOT NULL,
	[SEMMissedCalls] [int] NOT NULL,
	[SitesConnectedCalls] [int] NOT NULL,
	[SitesMissedCalls] [int] NOT NULL,
	[SMSConnectedCalls] [int] NOT NULL,
	[SMSMissedCalls] [int] NOT NULL,
	[TruliaConnectedCalls] [int] NOT NULL,
	[TruliaMissedCalls] [int] NOT NULL,
	[VideoConnectedCalls] [int] NOT NULL,
	[VideoMissedCalls] [int] NOT NULL,
	[WebLocalTrackingNumberConnectedCalls] [int] NOT NULL,
	[WebLocalTrackingNumberMissedCalls] [int] NOT NULL,
	[WebConnectedCalls] [int] NOT NULL,
	[WebMissedCalls] [int] NOT NULL,
	[AGEmailLeads] [int] NOT NULL,
	[AGKindleEmailLeads] [int] NOT NULL,
	[AGMobileEmailLeads] [int] NOT NULL,
	[AGTabletEmailLeads] [int] NOT NULL,
	[AIMCOEmailLeads] [int] NOT NULL,
	[AndroidEmailLeadsAG] [int] NOT NULL,
	[AndroidEmailLeadsRent] [int] NOT NULL,
	[CampusHomesOnlineEmailLeads] [int] NOT NULL,
	[CondoEmailLeads] [int] NOT NULL,
	[EREIFeedLeads] [int] NOT NULL,
	[HotpadsEmailLeads] [int] NOT NULL,
	[iPadEmailLeadsAG] [int] NOT NULL,
	[iPadEmailLeadsRent] [int] NOT NULL,
	[iPhoneEmailLeadsAG] [int] NOT NULL,
	[iPhoneEmailLeadsRent] [int] NOT NULL,
	[LovelyEmailLeads] [int] NOT NULL,
	[LuxuryEmailLeads] [int] NOT NULL,
	[MetroEmailLeads] [int] NOT NULL,
	[NeighborhoodEmailLeads] [int] NOT NULL,
	[OodleEmailLeads] [int] NOT NULL,
	[PropSolutionsFeedLeads] [int] NOT NULL,
	[RDTFeedLeadsAG] [int] NOT NULL,
	[RDTFeedLeadsRent] [int] NOT NULL,
	[RentAndroidEmailLeads] [int] NOT NULL,
	[RentEmailLeadsAG] [int] NOT NULL,
	[RentEmailLeadsRent] [int] NOT NULL,
	[RentiPadEmailLeads] [int] NOT NULL,
	[RentiPhoneEmailLeads] [int] NOT NULL,
	[RentRentarEmailLeads] [int] NOT NULL,
	[SitesEmailLeads] [int] NOT NULL,
	[TruliaEmailLeadsAG] [int] NOT NULL,
	[TruliaEmailLeadsRent] [int] NOT NULL,
	[VastEmailLeads] [int] NOT NULL,
	[VerticalBrandsEmailLeads] [int] NOT NULL,
	[YardiRCFeedLeads] [int] NOT NULL,
	[YieldFeedLeads] [int] NOT NULL,
	[ZillowEmailLeads] [int] NOT NULL,
	[RentalHousesEmailLeads] [int] NOT NULL,
	[RentalsAndroidEmailLeads] [int] NOT NULL,
	[RentalsEmailLeads] [int] NOT NULL,
	[RentalsIPhoneEmailLeads] [int] NOT NULL,
	[RentalsMobileEmailLeads] [int] NOT NULL,
	[RentalsLocalConnectedCalls] [int] NOT NULL,
	[RentalsLocalMissedCalls] [int] NOT NULL,
	[RentalsConnectedCalls] [int] NOT NULL,
	[RentalsMissedCalls] [int] NOT NULL,
	[RentAltRegConnectedCallsAG] [int] NOT NULL,
	[RentAltRegMissedCallsAG] [int] NOT NULL,
	[RentAltRegConnectedCallsRent] [int] NOT NULL,
	[RentAltRegMissedCallsRent] [int] NOT NULL,
	[ImprFrontCover] [int] NOT NULL,
	[CheckListingAvail] [int] NOT NULL,
	[EmailLeadsAG] [int] NOT NULL,
	[EmailLeadsRent] [int] NOT NULL,
	[MissedCallsAG] [int] NOT NULL,
	[MissedCallsRent] [int] NOT NULL,
	[PhoneLeadsAG] [int] NOT NULL,
	[PhoneLeadsRent] [int] NOT NULL,
	[SRPListingImprAG] [int] NOT NULL,
	[SRPListingImprRent] [int] NOT NULL,
	[SRPUniqueVisitAG] [int] NOT NULL,
	[SRPUniqueVisitRent] [int] NOT NULL,
	[TextMsgMobile] [int] NOT NULL,
	[TextMsgWeb] [int] NOT NULL,
	[TotalFloorPlans] [int] NOT NULL,
	[TotalPhotos] [int] NOT NULL,
	[UniqueVisitsAG] [int] NOT NULL,
	[UniqueVisitsAGSites] [int] NOT NULL,
	[UniqueVisitsMobileAG] [int] NOT NULL,
	[UniqueVisitsMobileRent] [int] NOT NULL,
	[UniqueVisitsRent] [int] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[MartListingsFromAPS]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[MartListingsFromAPS](
	[YMDID] [int] NOT NULL,
	[YearMonth] [int] NOT NULL,
	[ListingID] [int] NOT NULL,
	[ListingDescriptionLength] [int] NOT NULL,
	[ListingTypeID] [int] NOT NULL,
	[ListingTypeShort] [varchar](5) NOT NULL,
	[PropertyIDAG] [int] NOT NULL,
	[StatusIDAG] [tinyint] NOT NULL,
	[PropertyIDRent] [int] NOT NULL,
	[StatusIDRent] [tinyint] NOT NULL,
	[ListingType] [varchar](25) NOT NULL,
	[IsSEM] [tinyint] NOT NULL,
	[ShowPricing] [tinyint] NOT NULL,
	[LowPrice] [int] NOT NULL,
	[HighPrice] [int] NOT NULL,
	[CallRecordingOptOut] [tinyint] NOT NULL,
	[TotalAmenities] [int] NOT NULL,
	[ActiveAmenities] [int] NULL,
	[ActiveCoupon] [tinyint] NOT NULL,
	[ActiveFloorplans] [int] NULL,
	[ActiveHDFloorPlans] [int] NULL,
	[ActiveHDPhotos] [int] NULL,
	[ActivePhotos] [int] NULL,
	[ExternalID] [varchar](50) NOT NULL,
	[HasAvailabilityURL] [tinyint] NULL,
	[ExternalPriceCode] [varchar](8) NOT NULL,
	[CallTrackingInBook] [tinyint] NOT NULL,
	[InvoicedLeases] [int] NOT NULL,
	[IsOverThreshold] [tinyint] NOT NULL,
	[IsRentalProp] [tinyint] NOT NULL,
	[LastUpdateYMDID] [int] NOT NULL,
	[LeaseMgtCoID] [int] NOT NULL,
	[RentLeaseMgtCoID] [int] NOT NULL,
	[ATTUverse] [tinyint] NOT NULL,
	[BrightHouse] [tinyint] NOT NULL,
	[Charter] [tinyint] NOT NULL,
	[DIRECTV] [tinyint] NOT NULL,
	[TimeWarner] [tinyint] NOT NULL,
	[VerizonFIOS] [tinyint] NOT NULL,
	[XfinityDP] [tinyint] NOT NULL,
	[XfinitySP] [tinyint] NOT NULL,
	[XfinityTP] [tinyint] NOT NULL,
	[HasCR3] [tinyint] NOT NULL,
	[CR3AvgOverallRatingAG] [decimal](16, 1) NOT NULL,
	[CR3AvgOverallRatingRent] [decimal](16, 1) NOT NULL,
	[ShowOfficeHours] [tinyint] NOT NULL,
	[PlacementTierAG] [int] NOT NULL,
	[PlacementTierRent] [int] NOT NULL,
	[ContractLoyaltyPoints] [int] NOT NULL,
	[InternetProductPoints] [int] NOT NULL,
	[LegacyLoyaltyPoints] [int] NOT NULL,
	[MobilePoints] [int] NOT NULL,
	[PrintProductPoints] [int] NOT NULL,
	[Ranking] [char](1) NOT NULL,
	[NumericRank] [decimal](15, 4) NOT NULL,
	[RPLRANK] [decimal](8, 2) NOT NULL,
	[BadgeCollege] [tinyint] NOT NULL,
	[BadgeCorporate] [tinyint] NOT NULL,
	[BadgeIncomeRestricted] [tinyint] NOT NULL,
	[BadgeLuxury] [tinyint] NOT NULL,
	[BadgeMilitary] [tinyint] NOT NULL,
	[BadgePetFriendly] [tinyint] NOT NULL,
	[BadgeSenior] [tinyint] NOT NULL,
	[BadgeGolf] [tinyint] NULL,
	[BadgeWaterfront] [tinyint] NULL,
	[BadgeFurnished] [tinyint] NULL,
	[BadgeNewConstruction] [tinyint] NULL,
	[BadgeRemodeled] [tinyint] NULL,
	[DefaultBadge] [varchar](50) NULL,
	[Upsell30SecondVideo] [tinyint] NOT NULL,
	[Upsell3DFloorplan] [tinyint] NOT NULL,
	[Upsell60SecondVideo] [tinyint] NOT NULL,
	[UpsellAdCreator] [tinyint] NOT NULL,
	[UpsellAGMobileSyndication] [tinyint] NOT NULL,
	[UpsellAGSites] [tinyint] NOT NULL,
	[UpsellApartmentListing] [tinyint] NOT NULL,
	[UpsellBillingOnly] [tinyint] NOT NULL,
	[UpsellCallRecording] [tinyint] NOT NULL,
	[UpsellCarousel] [tinyint] NOT NULL,
	[UpsellCarouselRentals] [tinyint] NOT NULL,
	[UpsellCategoryListing] [tinyint] NOT NULL,
	[UpsellCommunityVideo] [tinyint] NOT NULL,
	[UpsellCommunityVideoURLFulfilled] [tinyint] NOT NULL,
	[UpsellCoupon] [tinyint] NOT NULL,
	[UpsellDiamondCity] [tinyint] NOT NULL,
	[UpsellDiamondMax] [tinyint] NOT NULL,
	[UpsellDiamondMetro] [tinyint] NOT NULL,
	[UpsellDynamicLeadForm] [tinyint] NOT NULL,
	[UpsellEmercial] [tinyint] NOT NULL,
	[UpsellEZPay] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityAG] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityGold] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityPlatinum] [tinyint] NOT NULL,
	[UpsellFeaturedCommunityRent] [tinyint] NOT NULL,
	[UpsellFeaturedCommunitySilver] [tinyint] NOT NULL,
	[UpsellFeaturedListingRentals] [tinyint] NOT NULL,
	[UpsellFloorPlanUpgrade] [tinyint] NOT NULL,
	[UpsellFormToPhone] [tinyint] NOT NULL,
	[UpsellFrontPage] [tinyint] NOT NULL,
	[UpsellGoldTier] [tinyint] NOT NULL,
	[UpsellHDActiveFloorplansFulfilled] [tinyint] NOT NULL,
	[UpsellHDActivePhotosFulfilled] [tinyint] NOT NULL,
	[UpsellHDPanoTour] [tinyint] NOT NULL,
	[UpsellHDPanoTourFulfilled] [tinyint] NOT NULL,
	[UpsellHDPhoto] [tinyint] NOT NULL,
	[UpsellHDVideo] [tinyint] NOT NULL,
	[UpsellHDVideoFulfilled] [tinyint] NOT NULL,
	[UpsellHighlighted] [tinyint] NOT NULL,
	[UpsellLeadMail] [tinyint] NOT NULL,
	[UpsellLinked3DFloorplan] [int] NULL,
	[UpsellLinked3DFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedFloorplan] [int] NULL,
	[UpsellLinkedFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedHDFloorplan] [tinyint] NOT NULL,
	[UpsellLinkedHDFloorplanFulfilled] [tinyint] NOT NULL,
	[UpsellLinkedLowResFloorPlan] [tinyint] NOT NULL,
	[UpsellLinkedLowResFloorPlanFulFilled] [tinyint] NOT NULL,
	[UpsellLinkedRoomPlanner] [int] NULL,
	[UpsellLinkedRoomPlannerFulfilled] [tinyint] NOT NULL,
	[UpsellListingRent] [tinyint] NOT NULL,
	[UpsellListingRentals] [tinyint] NOT NULL,
	[UpsellMediaCenter] [tinyint] NOT NULL,
	[UpsellMediaCenterCoupon] [tinyint] NOT NULL,
	[UpsellMgmtManagementCoLogoDisplay] [tinyint] NOT NULL,
	[UpsellMgmtPeelAd] [tinyint] NOT NULL,
	[UpsellMobileDeal] [tinyint] NOT NULL,
	[UpsellMobileDealFulfilled] [tinyint] NOT NULL,
	[UpsellMobileDiamond] [tinyint] NOT NULL,
	[UpsellMobileSpotlight] [tinyint] NOT NULL,
	[UpsellNoVacancyRent] [tinyint] NOT NULL,
	[UpsellPayPerLead] [tinyint] NOT NULL,
	[UpsellPayPerLease] [tinyint] NOT NULL,
	[UpsellPayPerLeaseALM] [tinyint] NOT NULL,
	[UpsellPhotoPlus] [tinyint] NOT NULL,
	[UpsellPhotoUpgrade] [tinyint] NOT NULL,
	[UpsellPlatinumTier] [tinyint] NOT NULL,
	[UpsellPrecisionTargetedEmailRent] [tinyint] NOT NULL,
	[UpsellPremierListingRentals] [tinyint] NOT NULL,
	[UpsellPremiumUpgrade] [tinyint] NOT NULL,
	[UpsellPropertyLogo] [tinyint] NOT NULL,
	[UpsellPropInternetBanner] [tinyint] NULL,
	[UpsellRentFeaturedPlacement] [tinyint] NOT NULL,
	[UpsellRentpathConnect] [tinyint] NOT NULL,
	[UpsellRepMon] [tinyint] NOT NULL,
	[UpsellRewardCardRent] [tinyint] NOT NULL,
	[UpsellSocialMediaMan] [tinyint] NOT NULL,
	[UpsellSpanish] [tinyint] NOT NULL,
	[UpsellSponsoredApartment] [tinyint] NOT NULL,
	[UpsellSpotlightAG] [tinyint] NOT NULL,
	[UpsellSpotlightRent] [tinyint] NOT NULL,
	[UpsellSpotlightRentals] [tinyint] NOT NULL,
	[UpsellStandardListingRentals] [tinyint] NOT NULL,
	[UpsellStandardPlusListingRentals] [tinyint] NOT NULL,
	[UpsellSubscriptionModelRent] [tinyint] NOT NULL,
	[UpsellVideoSpokesmodel] [tinyint] NOT NULL,
	[UpsellVIPPlacementRent] [tinyint] NOT NULL,
	[UpsellVirtualBrochure] [tinyint] NOT NULL,
	[UpsellVirtualTourFulfilled] [tinyint] NOT NULL,
	[ClicksCheckYourCredit] [int] NOT NULL,
	[ClicksCommunityVideoAG] [int] NOT NULL,
	[ClicksCR3AG] [int] NOT NULL,
	[ClicksCR3Rent] [int] NOT NULL,
	[ClicksDiamondMaxCheckAvailAG] [int] NOT NULL,
	[ClicksDiamondMaxPhotoAG] [int] NOT NULL,
	[ClicksFeatCommCheckAvailAG] [int] NOT NULL,
	[ClicksFeatCommCheckAvailRent] [int] NOT NULL,
	[ClicksFeaturedCommunityAG] [int] NOT NULL,
	[ClicksFeaturedCommunityRent] [int] NOT NULL,
	[ClicksFeaturedMgtCo] [int] NOT NULL,
	[ClicksFloorplanAG] [int] NOT NULL,
	[ClicksFloorplanRent] [int] NOT NULL,
	[ClicksFrontPagePropLead] [int] NOT NULL,
	[ClicksHDFloorplanAG] [int] NOT NULL,
	[ClicksHDFloorplanRent] [int] NOT NULL,
	[ClicksHDPanoTourAG] [int] NOT NULL,
	[ClicksHDPanoTourRent] [int] NOT NULL,
	[ClicksHDPhotoAG] [int] NOT NULL,
	[ClicksHDPhotoRent] [int] NOT NULL,
	[ClicksHDVideoAG] [int] NOT NULL,
	[ClicksHDVideoRent] [int] NOT NULL,
	[ClicksLeadSubmissionAG] [int] NOT NULL,
	[ClicksLeadSubmissionRent] [int] NOT NULL,
	[ClicksMapAG] [int] NOT NULL,
	[ClicksMapRent] [int] NOT NULL,
	[ClicksMgtCoPeelAdAG] [int] NOT NULL,
	[ClicksMgtCoPeelAdRent] [int] NOT NULL,
	[ClicksMgtCoURLAG] [int] NOT NULL,
	[ClicksMgtCoURLRent] [int] NOT NULL,
	[ClicksPhotosAG] [int] NOT NULL,
	[ClicksPhotosRent] [int] NOT NULL,
	[ClicksReserveNowAG] [int] NOT NULL,
	[ClicksReserveNowRent] [int] NOT NULL,
	[ClicksSpotlightRentSpecialsAG] [int] NOT NULL,
	[ClicksSpotlightRentSpecialsRent] [int] NOT NULL,
	[ClicksSpotlightReserveNowAG] [int] NOT NULL,
	[ClicksSRPListingCheckAvailAG] [int] NOT NULL,
	[ClicksSRPListingCheckAvailRent] [int] NOT NULL,
	[ClicksWebURLAG] [int] NOT NULL,
	[ClicksWebURLRent] [int] NOT NULL,
	[ViewsEmercial] [int] NOT NULL,
	[ViewsListingPage] [int] NOT NULL,
	[ViewsListingPage_Mobile] [int] NOT NULL,
	[ViewsListingPage_Sites] [int] NOT NULL,
	[ViewsListingPageAGSites] [int] NOT NULL,
	[ViewsListingPageMobileAG] [int] NOT NULL,
	[ViewsListingPageMobileRent] [int] NOT NULL,
	[ViewsListingPageWebAG] [int] NOT NULL,
	[ViewsListingPageWebRent] [int] NOT NULL,
	[ViewsVirtualBrochure] [int] NOT NULL,
	[AGCPrintConnectedCalls] [int] NOT NULL,
	[AGCPrintMissedCalls] [int] NOT NULL,
	[ASGPrintConnectedCalls] [int] NOT NULL,
	[ASGPrintMissedCalls] [int] NOT NULL,
	[CombinedFeedsConnectedCalls] [int] NOT NULL,
	[CombinedFeedsMissedCalls] [int] NOT NULL,
	[CraigsListConnectedCalls] [int] NOT NULL,
	[CraigsListMissedCalls] [int] NOT NULL,
	[CTCConnectedCalls] [int] NOT NULL,
	[CTCMissedCalls] [int] NOT NULL,
	[DripConnectedCalls] [int] NOT NULL,
	[DripMissedCalls] [int] NOT NULL,
	[GoogleConnectedCalls] [int] NOT NULL,
	[GoogleMissedCalls] [int] NOT NULL,
	[LeadMailConnectedCalls] [int] NOT NULL,
	[LeadMailMissedCalls] [int] NOT NULL,
	[LuxuryConnectedCalls] [int] NOT NULL,
	[LuxuryMissedCalls] [int] NOT NULL,
	[MarchexConnectedCalls] [int] NOT NULL,
	[MarchexMissedCalls] [int] NOT NULL,
	[MobileSEMConnectedCalls] [int] NOT NULL,
	[MobileSEMMissedCalls] [int] NOT NULL,
	[PaidSPConnectedCalls] [int] NOT NULL,
	[PaidSPMissedCalls] [int] NOT NULL,
	[PPCConnectedCalls] [int] NOT NULL,
	[PPCMissedCalls] [int] NOT NULL,
	[RentConnectedCallsAG] [int] NOT NULL,
	[RentMissedCallsAG] [int] NOT NULL,
	[RentConnectedCallsRent] [int] NOT NULL,
	[RentMissedCallsRent] [int] NOT NULL,
	[RentMobileConnectedCallsAG] [int] NOT NULL,
	[RentMobileMissedCallsAG] [int] NOT NULL,
	[RentMobileConnectedCallsRent] [int] NOT NULL,
	[RentMobileMissedCallsRent] [int] NOT NULL,
	[RentMobileSEMConnectedCalls] [int] NOT NULL,
	[RentMobileSEMMissedCalls] [int] NOT NULL,
	[RentOneWebConnectedCallsAG] [int] NOT NULL,
	[RentOneWebMissedCallsAG] [int] NOT NULL,
	[RentOneWebConnectedCallsRent] [int] NOT NULL,
	[RentOneWebMissedCallsRent] [int] NOT NULL,
	[RentSEMConnectedCalls] [int] NOT NULL,
	[RentSEMMissedCalls] [int] NOT NULL,
	[SEMConnectedCalls] [int] NOT NULL,
	[SEMMissedCalls] [int] NOT NULL,
	[SitesConnectedCalls] [int] NOT NULL,
	[SitesMissedCalls] [int] NOT NULL,
	[SMSConnectedCalls] [int] NOT NULL,
	[SMSMissedCalls] [int] NOT NULL,
	[TruliaConnectedCalls] [int] NOT NULL,
	[TruliaMissedCalls] [int] NOT NULL,
	[VideoConnectedCalls] [int] NOT NULL,
	[VideoMissedCalls] [int] NOT NULL,
	[WebLocalTrackingNumberConnectedCalls] [int] NOT NULL,
	[WebLocalTrackingNumberMissedCalls] [int] NOT NULL,
	[WebConnectedCalls] [int] NOT NULL,
	[WebMissedCalls] [int] NOT NULL,
	[AGEmailLeads] [int] NOT NULL,
	[AGKindleEmailLeads] [int] NOT NULL,
	[AGMobileEmailLeads] [int] NOT NULL,
	[AGTabletEmailLeads] [int] NOT NULL,
	[AIMCOEmailLeads] [int] NOT NULL,
	[AndroidEmailLeadsAG] [int] NOT NULL,
	[AndroidEmailLeadsRent] [int] NOT NULL,
	[CampusHomesOnlineEmailLeads] [int] NOT NULL,
	[CondoEmailLeads] [int] NOT NULL,
	[EREIFeedLeads] [int] NOT NULL,
	[HotpadsEmailLeads] [int] NOT NULL,
	[iPadEmailLeadsAG] [int] NOT NULL,
	[iPadEmailLeadsRent] [int] NOT NULL,
	[iPhoneEmailLeadsAG] [int] NOT NULL,
	[iPhoneEmailLeadsRent] [int] NOT NULL,
	[LovelyEmailLeads] [int] NOT NULL,
	[LuxuryEmailLeads] [int] NOT NULL,
	[MetroEmailLeads] [int] NOT NULL,
	[NeighborhoodEmailLeads] [int] NOT NULL,
	[OodleEmailLeads] [int] NOT NULL,
	[PropSolutionsFeedLeads] [int] NOT NULL,
	[RDTFeedLeadsAG] [int] NOT NULL,
	[RDTFeedLeadsRent] [int] NOT NULL,
	[RentAndroidEmailLeads] [int] NOT NULL,
	[RentEmailLeadsAG] [int] NOT NULL,
	[RentEmailLeadsRent] [int] NOT NULL,
	[RentiPadEmailLeads] [int] NOT NULL,
	[RentiPhoneEmailLeads] [int] NOT NULL,
	[RentRentarEmailLeads] [int] NOT NULL,
	[SitesEmailLeads] [int] NOT NULL,
	[TruliaEmailLeadsAG] [int] NOT NULL,
	[TruliaEmailLeadsRent] [int] NOT NULL,
	[VastEmailLeads] [int] NOT NULL,
	[VerticalBrandsEmailLeads] [int] NOT NULL,
	[YardiRCFeedLeads] [int] NOT NULL,
	[YieldFeedLeads] [int] NOT NULL,
	[ZillowEmailLeads] [int] NOT NULL,
	[RentalHousesEmailLeads] [int] NOT NULL,
	[RentalsAndroidEmailLeads] [int] NOT NULL,
	[RentalsEmailLeads] [int] NOT NULL,
	[RentalsIPhoneEmailLeads] [int] NOT NULL,
	[RentalsMobileEmailLeads] [int] NOT NULL,
	[RentalsLocalConnectedCalls] [int] NOT NULL,
	[RentalsLocalMissedCalls] [int] NOT NULL,
	[RentalsConnectedCalls] [int] NOT NULL,
	[RentalsMissedCalls] [int] NOT NULL,
	[RentAltRegConnectedCallsAG] [int] NOT NULL,
	[RentAltRegMissedCallsAG] [int] NOT NULL,
	[RentAltRegConnectedCallsRent] [int] NOT NULL,
	[RentAltRegMissedCallsRent] [int] NOT NULL,
	[ImprFrontCover] [int] NOT NULL,
	[CheckListingAvail] [int] NOT NULL,
	[SRPListingImprAG] [int] NOT NULL,
	[SRPListingImprRent] [int] NOT NULL,
	[SRPUniqueVisitAG] [int] NOT NULL,
	[SRPUniqueVisitRent] [int] NOT NULL,
	[TextMsgMobile] [int] NOT NULL,
	[TextMsgWeb] [int] NOT NULL,
	[TotalFloorPlans] [int] NOT NULL,
	[TotalPhotos] [int] NOT NULL,
	[UniqueVisitsAG] [int] NOT NULL,
	[UniqueVisitsAGSites] [int] NOT NULL,
	[UniqueVisitsMobileAG] [int] NOT NULL,
	[UniqueVisitsMobileRent] [int] NOT NULL,
	[UniqueVisitsRent] [int] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[MartLocatorListings]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[MartLocatorListings](
	[YMDID] [int] NOT NULL,
	[YearMonth] [int] NULL,
	[ListingID] [int] NULL,
	[RentListingID] [varchar](64) NULL,
	[StatusID] [int] NULL,
	[StatusIDAG] [int] NULL,
	[StatusIDRent] [int] NULL,
	[StatusIDRentalHouses] [int] NULL,
	[StatusIDRentals] [int] NULL,
	[DataSource] [varchar](50) NULL,
	[LowPrice] [int] NULL,
	[HighPrice] [int] NULL,
	[MinBedrooms] [int] NULL,
	[MaxBedrooms] [int] NULL,
	[ShowOfficeHours] [int] NULL,
	[ActivePhotos] [int] NULL,
	[ActiveFloorPlans] [int] NULL,
	[ActiveAmenities] [int] NULL,
	[FeedConnectedCalls] [int] NOT NULL,
	[FeedMissedCalls] [int] NOT NULL,
	[MobileSEMConnectedCalls] [int] NULL,
	[MobileSEMMissedCalls] [int] NULL,
	[RentalsConnectedCalls] [int] NULL,
	[RentalsMissedCalls] [int] NULL,
	[RentOneWebConnectedCalls] [int] NULL,
	[RentOneWebMissedCalls] [int] NULL,
	[SEMConnectedCalls] [int] NULL,
	[SEMMissedCalls] [int] NULL,
	[TruliaConnectedCalls] [int] NULL,
	[TruliaMissedCalls] [int] NULL,
	[WebConnectedCalls] [int] NULL,
	[WebMissedCalls] [int] NULL,
	[WebLocalTrackingNumberConnectedCalls] [int] NULL,
	[WebLocalTrackingNumberMissedCalls] [int] NULL,
	[AGAndroidEmailLeads] [int] NULL,
	[AGAndroidEmailLeadsAdditional] [int] NULL,
	[AGEmailLeads] [int] NULL,
	[AGEmailLeadsAdditional] [int] NULL,
	[AGiPadEmailLeads] [int] NULL,
	[AGiPadEmailLeadsAdditional] [int] NULL,
	[AGiPhoneEmailLeads] [int] NULL,
	[AGiPhoneEmailLeadsAdditional] [int] NULL,
	[AGKindleEmailLeads] [int] NULL,
	[AGKindleEmailLeadsAdditional] [int] NULL,
	[AGMobileEmailLeads] [int] NULL,
	[AGMobileEmailLeadsAdditional] [int] NULL,
	[AGTabletEmailLeads] [int] NULL,
	[AGTabletEmailLeadsAdditional] [int] NULL,
	[MetroEmailLeads] [int] NULL,
	[MetroEmailLeadsAdditional] [int] NULL,
	[NeighborhoodEmailLeads] [int] NULL,
	[NeighborhoodEmailLeadsAdditional] [int] NULL,
	[RentalHousesEmailLeads] [int] NULL,
	[RentalHousesEmailLeadsAdditional] [int] NULL,
	[RentalsAndroidEmailLeads] [int] NULL,
	[RentalsAndroidEmailLeadsAdditional] [int] NULL,
	[RentalsEmailLeads] [int] NULL,
	[RentalsEmailLeadsAdditional] [int] NULL,
	[RentalsIPhoneEmailLeads] [int] NULL,
	[RentalsIPhoneEmailLeadsAdditional] [int] NULL,
	[RentalsMobileEmailLeads] [int] NULL,
	[RentalsMobileEmailLeadsAdditional] [int] NULL,
	[RentAndroidEmailLeads] [int] NOT NULL,
	[RentAndroidEmailLeadsAdditional] [int] NOT NULL,
	[RentEmailLeads] [int] NOT NULL,
	[RentEmailLeadsAdditional] [int] NOT NULL,
	[RentiPadEmailLeads] [int] NOT NULL,
	[RentiPadEmailLeadsAdditional] [int] NOT NULL,
	[RentiPhoneEmailLeads] [int] NOT NULL,
	[RentiPhoneEmailLeadsAdditional] [int] NOT NULL,
	[TruliaEmailLeads] [int] NULL,
	[TruliaEmailLeadsAdditional] [int] NULL,
	[ClicksCommunityVideoAG] [int] NOT NULL,
	[ClicksCR3AG] [int] NOT NULL,
	[ClicksCR3Rent] [int] NOT NULL,
	[ClicksDiamondMaxCheckAvailAG] [int] NOT NULL,
	[ClicksDiamondMaxPhotoAG] [int] NOT NULL,
	[ClicksFeatCommCheckAvailAG] [int] NOT NULL,
	[ClicksFeatCommCheckAvailRent] [int] NOT NULL,
	[ClicksFeaturedCommunityAG] [int] NOT NULL,
	[ClicksFeaturedCommunityRent] [int] NOT NULL,
	[ClicksFloorplanAG] [int] NOT NULL,
	[ClicksFloorplanRent] [int] NOT NULL,
	[ClicksHDFloorplanAG] [int] NOT NULL,
	[ClicksHDFloorplanRent] [int] NOT NULL,
	[ClicksHDPanoTourAG] [int] NOT NULL,
	[ClicksHDPanoTourRent] [int] NOT NULL,
	[ClicksHDPhotoAG] [int] NOT NULL,
	[ClicksHDPhotoRent] [int] NOT NULL,
	[ClicksHDVideoAG] [int] NOT NULL,
	[ClicksHDVideoRent] [int] NOT NULL,
	[ClicksLeadSubmissionAG] [int] NOT NULL,
	[ClicksLeadSubmissionRent] [int] NOT NULL,
	[ClicksMapAG] [int] NOT NULL,
	[ClicksMapRent] [int] NOT NULL,
	[ClicksMgtCoPeelAdAG] [int] NOT NULL,
	[ClicksMgtCoPeelAdRent] [int] NOT NULL,
	[ClicksMgtCoURLAG] [int] NOT NULL,
	[ClicksMgtCoURLRent] [int] NOT NULL,
	[ClicksPhotosAG] [int] NOT NULL,
	[ClicksPhotosRent] [int] NOT NULL,
	[ClicksReserveNowAG] [int] NOT NULL,
	[ClicksReserveNowRent] [int] NOT NULL,
	[ClicksSpotlightRentSpecialsAG] [int] NOT NULL,
	[ClicksSpotlightRentSpecialsRent] [int] NOT NULL,
	[ClicksSpotlightReserveNowAG] [int] NOT NULL,
	[ClicksSRPListingCheckAvailAG] [int] NOT NULL,
	[ClicksSRPListingCheckAvailRent] [int] NOT NULL,
	[ClicksWebURLAG] [int] NOT NULL,
	[ClicksWebURLRent] [int] NOT NULL,
	[ClicksCheckAvailability] [int] NOT NULL,
	[SRPListingImprAG] [int] NULL,
	[SRPListingImprRent] [int] NOT NULL,
	[SRPListingImprRentals] [int] NULL,
	[SRPUniqueVisitsAG] [int] NULL,
	[SRPUniqueVisitsRent] [int] NOT NULL,
	[SRPUniqueVisitsRentals] [int] NULL,
	[UniqueVisitsWebAG] [int] NULL,
	[UniqueVisitsWebRent] [int] NOT NULL,
	[UniqueVisitsWebRentals] [int] NULL,
	[UniqueVisitsMobileAG] [int] NOT NULL,
	[UniqueVisitsMobileRent] [int] NOT NULL,
	[UniqueVisitsMobileRentals] [int] NOT NULL,
	[ViewsListingPageMobileAG] [int] NOT NULL,
	[ViewsListingPageMobileRent] [int] NOT NULL,
	[ViewsListingPageMobileRentals] [int] NOT NULL,
	[ViewsListingPageWebAG] [int] NOT NULL,
	[ViewsListingPageWebRent] [int] NOT NULL,
	[ViewsListingPageWebRentals] [int] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[MartLog]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[MartLog](
	[YMDID] [int] NULL,
	[Step] [varchar](1000) NULL,
	[EndTime] [datetime] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[MC_Contacts]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[MC_Contacts](
	[CustomerID] [nvarchar](4000) NULL,
	[2] [nvarchar](4000) NULL,
	[3] [nvarchar](4000) NULL,
	[4] [nvarchar](4000) NULL,
	[5] [nvarchar](4000) NULL,
	[6] [nvarchar](4000) NULL,
	[7] [nvarchar](4000) NULL,
	[8] [nvarchar](4000) NULL,
	[9] [nvarchar](4000) NULL,
	[10] [nvarchar](4000) NULL,
	[11] [nvarchar](4000) NULL,
	[12] [nvarchar](4000) NULL,
	[13] [nvarchar](4000) NULL,
	[14] [nvarchar](4000) NULL,
	[15] [nvarchar](4000) NULL,
	[16] [nvarchar](4000) NULL,
	[17] [nvarchar](4000) NULL,
	[18] [nvarchar](4000) NULL,
	[19] [nvarchar](4000) NULL,
	[20] [nvarchar](4000) NULL,
	[21] [nvarchar](4000) NULL,
	[22] [nvarchar](4000) NULL,
	[23] [nvarchar](4000) NULL,
	[24] [nvarchar](4000) NULL,
	[25] [nvarchar](4000) NULL,
	[26] [nvarchar](4000) NULL,
	[27] [nvarchar](4000) NULL,
	[28] [nvarchar](4000) NULL,
	[29] [nvarchar](4000) NULL,
	[30] [nvarchar](4000) NULL,
	[31] [nvarchar](4000) NULL,
	[32] [nvarchar](4000) NULL,
	[33] [nvarchar](4000) NULL,
	[34] [nvarchar](4000) NULL,
	[35] [nvarchar](4000) NULL,
	[36] [nvarchar](4000) NULL,
	[37] [nvarchar](4000) NULL,
	[38] [nvarchar](4000) NULL,
	[39] [nvarchar](4000) NULL,
	[40] [nvarchar](4000) NULL,
	[41] [nvarchar](4000) NULL,
	[42] [nvarchar](4000) NULL,
	[43] [nvarchar](4000) NULL,
	[44] [nvarchar](4000) NULL,
	[45] [nvarchar](4000) NULL,
	[46] [nvarchar](4000) NULL,
	[47] [nvarchar](4000) NULL,
	[48] [nvarchar](4000) NULL,
	[49] [nvarchar](4000) NULL,
	[50] [nvarchar](4000) NULL,
	[51] [nvarchar](4000) NULL,
	[52] [nvarchar](4000) NULL,
	[53] [nvarchar](4000) NULL,
	[54] [nvarchar](4000) NULL,
	[55] [nvarchar](4000) NULL,
	[56] [nvarchar](4000) NULL,
	[57] [nvarchar](4000) NULL,
	[58] [nvarchar](4000) NULL,
	[59] [nvarchar](4000) NULL,
	[UnitTypeSqFt] [nvarchar](4000) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[MC_Contacts_JW]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[MC_Contacts_JW](
	[ContactType] [nvarchar](50) NULL,
	[PropertyID] [int] NULL,
	[FirstName] [nvarchar](100) NULL,
	[LastName] [nvarchar](100) NULL,
	[Email] [nvarchar](255) NULL,
	[Phone] [nvarchar](30) NULL,
	[PhoneType] [nvarchar](30) NULL,
	[SubscriptionEmail] [nvarchar](30) NULL,
	[SubscriptionSurvey] [nvarchar](30) NULL,
	[SubscriptionText] [nvarchar](30) NULL,
	[PreferredMeansOfContact] [nvarchar](30) NULL,
	[UnitNum] [nvarchar](50) NULL,
	[BuildingNum] [nvarchar](50) NULL,
	[Status] [nvarchar](25) NULL,
	[MoveInDate] [nvarchar](50) NULL,
	[Source] [nvarchar](50) NULL,
	[PriceMin] [nvarchar](30) NULL,
	[PriceMax] [nvarchar](30) NULL,
	[NumBeds] [nvarchar](30) NULL,
	[NumBaths] [nvarchar](30) NULL,
	[ResponseDate] [datetime] NULL,
	[ReasonForMove] [nvarchar](200) NULL,
	[Comments] [nvarchar](4000) NULL,
	[LeaseTermDateStart] [datetime] NULL,
	[LeaseTermDateEnd] [datetime] NULL,
	[Birthday] [nvarchar](30) NULL,
	[UnitType] [nvarchar](30) NULL,
	[ContactID] [nvarchar](50) NULL,
	[DateUpdate] [datetime] NULL,
	[DateCreated] [datetime] NULL,
	[IdentificationType] [nvarchar](30) NULL,
	[IdentificationScopeType] [nvarchar](30) NULL,
	[IdentificationRank] [nvarchar](255) NULL,
	[IdentificationIDValue] [nvarchar](30) NULL,
	[IdentificationOrganizationName] [nvarchar](50) NULL,
	[CustomerType] [nvarchar](30) NULL,
	[CustomerDescription] [nvarchar](30) NULL,
	[PropertyPrimaryID] [nvarchar](30) NULL,
	[PropertyMarketingName] [nvarchar](75) NULL,
	[AddressType] [nvarchar](30) NULL,
	[CurrentRent] [int] NULL,
	[ExpectedMoveOutDate] [datetime] NULL,
	[ActualMoveInDate] [datetime] NULL,
	[DesiredUnitID] [nvarchar](30) NULL,
	[DesiredPropertyPrimaryID] [nvarchar](30) NULL,
	[DesiredPropertyMarketingName] [nvarchar](75) NULL,
	[ApplicationDate] [datetime] NULL,
	[ApproveDate] [datetime] NULL,
	[LeaseSignDate] [datetime] NULL,
	[RenewDate] [datetime] NULL,
	[NoticeDate] [datetime] NULL,
	[WalkInDate] [datetime] NULL,
	[UnitCode] [nvarchar](30) NULL,
	[UnitRent] [nvarchar](30) NULL,
	[UnitSqFt] [nvarchar](50) NULL,
	[UnitEconomicStatus] [nvarchar](30) NULL,
	[UnitTypeDescription] [nvarchar](75) NULL,
	[UnitTypeRent] [nvarchar](140) NULL,
	[UnitTypeSqFt] [nvarchar](50) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[MC_Contacts_SingleColumn]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[MC_Contacts_SingleColumn](
	[text] [varchar](4000) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[MC_SMS]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[MC_SMS](
	[Id] [float] NULL,
	[PropertyID] [float] NULL,
	[Name] [nvarchar](255) NULL,
	[Type] [nvarchar](255) NULL,
	[Status] [nvarchar](255) NULL,
	[CampaignType] [nvarchar](255) NULL,
	[Created] [datetime] NULL,
	[Scheduled] [datetime] NULL,
	[Sent] [datetime] NULL,
	[SendFromEmail] [nvarchar](255) NULL,
	[TotalRecipients] [float] NULL,
	[TotalMessagesDelivered] [float] NULL,
	[SurveySubmissions] [float] NULL,
	[MessagesPendingDelivery] [float] NULL,
	[BouncedMessages] [float] NULL,
	[OptOutRequests] [float] NULL,
	[TimesOpened] [float] NULL,
	[TotalTimesOpened] [float] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[MediaCenterCampaigns]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[MediaCenterCampaigns](
	[CampaignId] [int] NULL,
	[PropertyID] [int] NULL,
	[CampaignName] [varchar](100) NULL,
	[Type] [varchar](50) NULL,
	[Status] [varchar](50) NULL,
	[CampaignType] [varchar](50) NULL,
	[Created] [datetime] NULL,
	[Scheduled] [datetime] NULL,
	[Sent] [datetime] NULL,
	[SendFromEmail] [varchar](255) NULL,
	[TotalRecipients] [int] NULL,
	[TotalMessagesDelivered] [int] NULL,
	[SurveySubmissions] [int] NULL,
	[MessagesPendingDelivery] [int] NULL,
	[BouncedMessages] [int] NULL,
	[OptOutRequests] [int] NULL,
	[TimesOpened] [int] NULL,
	[TotalTimesOpened] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[MediaCenterContacts]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[MediaCenterContacts](
	[ContactType] [nvarchar](50) NULL,
	[PropertyID] [int] NULL,
	[FirstName] [nvarchar](100) NULL,
	[LastName] [nvarchar](100) NULL,
	[Email] [nvarchar](255) NULL,
	[Phone] [nvarchar](30) NULL,
	[PhoneType] [nvarchar](30) NULL,
	[SubscriptionEmail] [nvarchar](30) NULL,
	[SubscriptionSurvey] [nvarchar](30) NULL,
	[SubscriptionText] [nvarchar](30) NULL,
	[PreferredMeansOfContact] [nvarchar](30) NULL,
	[UnitNum] [nvarchar](50) NULL,
	[BuildingNum] [nvarchar](50) NULL,
	[Status] [nvarchar](25) NULL,
	[MoveInDate] [nvarchar](50) NULL,
	[Source] [nvarchar](50) NULL,
	[PriceMin] [nvarchar](30) NULL,
	[PriceMax] [nvarchar](30) NULL,
	[NumBeds] [nvarchar](30) NULL,
	[NumBaths] [nvarchar](30) NULL,
	[ResponseDate] [datetime] NULL,
	[ReasonForMove] [nvarchar](200) NULL,
	[Comments] [nvarchar](4000) NULL,
	[LeaseTermDateStart] [datetime] NULL,
	[LeaseTermDateEnd] [datetime] NULL,
	[Birthday] [nvarchar](30) NULL,
	[UnitType] [nvarchar](30) NULL,
	[ContactID] [nvarchar](50) NULL,
	[DateUpdate] [datetime] NULL,
	[DateCreated] [datetime] NULL,
	[IdentificationType] [nvarchar](30) NULL,
	[IdentificationScopeType] [nvarchar](30) NULL,
	[IdentificationRank] [nvarchar](255) NULL,
	[IdentificationIDValue] [nvarchar](30) NULL,
	[IdentificationOrganizationName] [nvarchar](50) NULL,
	[CustomerType] [nvarchar](30) NULL,
	[CustomerDescription] [nvarchar](30) NULL,
	[PropertyPrimaryID] [nvarchar](30) NULL,
	[PropertyMarketingName] [nvarchar](75) NULL,
	[AddressType] [nvarchar](30) NULL,
	[CurrentRent] [int] NULL,
	[ExpectedMoveOutDate] [datetime] NULL,
	[ActualMoveInDate] [datetime] NULL,
	[DesiredUnitID] [nvarchar](30) NULL,
	[DesiredPropertyPrimaryID] [nvarchar](30) NULL,
	[DesiredPropertyMarketingName] [nvarchar](75) NULL,
	[ApplicationDate] [datetime] NULL,
	[ApproveDate] [datetime] NULL,
	[LeaseSignDate] [datetime] NULL,
	[RenewDate] [datetime] NULL,
	[NoticeDate] [datetime] NULL,
	[WalkInDate] [datetime] NULL,
	[UnitCode] [nvarchar](30) NULL,
	[UnitRent] [nvarchar](30) NULL,
	[UnitSqFt] [nvarchar](50) NULL,
	[UnitEconomicStatus] [nvarchar](30) NULL,
	[UnitTypeDescription] [nvarchar](75) NULL,
	[UnitTypeRent] [nvarchar](140) NULL,
	[UnitTypeSqFt] [nvarchar](50) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[MediaCenterPropertyContactCounts]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[MediaCenterPropertyContactCounts](
	[PropertyId] [int] NULL,
	[ContactType] [varchar](50) NULL,
	[ContactsUploaded] [int] NULL,
	[YMDID] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[MonthlyAxioComps]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[MonthlyAxioComps](
	[External_Id__c] [varchar](50) NULL,
	[ID] [varchar](50) NULL,
	[Axio_Comp1__c] [varchar](50) NULL,
	[Axio_Comp2__c] [varchar](50) NULL,
	[Axio_Comp3__c] [varchar](50) NULL,
	[Axio_Comp4__c] [varchar](50) NULL,
	[Axio_Comp5__c] [varchar](50) NULL,
	[Axio_Comp6__c] [varchar](50) NULL,
	[Axio_Comp7__c] [varchar](50) NULL,
	[Axio_Comp8__c] [varchar](50) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[MonthlyAxioCompsPivot]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[MonthlyAxioCompsPivot](
	[External_Id__c] [varchar](50) NULL,
	[ID] [varchar](50) NULL,
	[Axio_Comp1__c] [varchar](50) NULL,
	[Axio_Comp2__c] [varchar](50) NULL,
	[Axio_Comp3__c] [varchar](50) NULL,
	[Axio_Comp4__c] [varchar](50) NULL,
	[Axio_Comp5__c] [varchar](50) NULL,
	[Axio_Comp6__c] [varchar](50) NULL,
	[Axio_Comp7__c] [varchar](50) NULL,
	[Axio_Comp8__c] [varchar](50) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[NewParsePivot]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[NewParsePivot](
	[ymdid] [int] NOT NULL,
	[parseid] [bigint] NULL,
	[profileid] [int] NOT NULL,
	[subprofileid] [smallint] NULL,
	[eventdate] [datetime] NOT NULL,
	[profile] [varchar](7000) NULL,
	[subprofile] [varchar](7000) NULL,
	[page] [varchar](7000) NULL,
	[position] [varchar](7000) NULL,
	[selection] [varchar](7000) NULL,
	[listingid] [varchar](7000) NULL,
	[action] [varchar](7000) NULL,
	[campaign_id] [varchar](7000) NULL,
	[entry_campaign_id] [varchar](7000) NULL,
	[visit] [varchar](7000) NULL,
	[session_id] [varchar](7000) NULL,
	[referrer] [varchar](7000) NULL,
	[referring_domain] [varchar](7000) NULL,
	[adlt] [varchar](7000) NULL,
	[browser] [varchar](7000) NULL,
	[browser_size] [varchar](7000) NULL,
	[browser_version] [varchar](7000) NULL,
	[city] [varchar](7000) NULL,
	[clickvalue] [varchar](7000) NULL,
	[cube_campaign] [varchar](7000) NULL,
	[CustIPAddress] [varchar](7000) NULL,
	[dcsuri] [varchar](7000) NULL,
	[device] [varchar](7000) NULL,
	[ef_id] [varchar](7000) NULL,
	[featured_array] [varchar](7000) NULL,
	[first_pageview] [varchar](7000) NULL,
	[form] [varchar](7000) NULL,
	[hash] [varchar](7000) NULL,
	[listing_array] [varchar](7000) NULL,
	[listing_id_click] [varchar](7000) NULL,
	[listing_type] [varchar](7000) NULL,
	[listingid_lead_submission] [varchar](7000) NULL,
	[listings_per_page] [varchar](7000) NULL,
	[membership] [varchar](7000) NULL,
	[node_class] [varchar](7000) NULL,
	[node_g_parent_class] [varchar](7000) NULL,
	[node_g_parent_id] [varchar](7000) NULL,
	[node_g_parent_name] [varchar](7000) NULL,
	[node_great_g_parent_class] [varchar](7000) NULL,
	[node_great_g_parent_id] [varchar](7000) NULL,
	[node_great_g_parent_name] [varchar](7000) NULL,
	[node_href] [varchar](7000) NULL,
	[node_id] [varchar](7000) NULL,
	[node_name] [varchar](7000) NULL,
	[node_parent_class] [varchar](7000) NULL,
	[node_parent_href] [varchar](7000) NULL,
	[node_parent_id] [varchar](7000) NULL,
	[node_parent_name] [varchar](7000) NULL,
	[node_value] [varchar](7000) NULL,
	[operating_system] [varchar](7000) NULL,
	[os] [varchar](7000) NULL,
	[page_category] [varchar](7000) NULL,
	[page_number] [varchar](7000) NULL,
	[page_sub] [varchar](7000) NULL,
	[path] [varchar](7000) NULL,
	[pdp_listing_id] [varchar](7000) NULL,
	[pq] [varchar](7000) NULL,
	[propertyid] [varchar](7000) NULL,
	[qs] [varchar](7000) NULL,
	[querystring] [varchar](7000) NULL,
	[safe] [varchar](7000) NULL,
	[sc] [varchar](7000) NULL,
	[screen_resolution] [varchar](7000) NULL,
	[ServerIPAddress] [varchar](7000) NULL,
	[session_check] [varchar](7000) NULL,
	[sp] [varchar](7000) NULL,
	[spotlight_array] [varchar](7000) NULL,
	[spotlight_count] [varchar](7000) NULL,
	[ssSiteName] [varchar](7000) NULL,
	[ssTestName] [varchar](7000) NULL,
	[ssVariationGroupName] [varchar](7000) NULL,
	[state] [varchar](7000) NULL,
	[This is nothing] [varchar](7000) NULL,
	[title] [varchar](7000) NULL,
	[track] [varchar](7000) NULL,
	[unit_id] [varchar](7000) NULL,
	[url] [varchar](7000) NULL,
	[user_email] [varchar](7000) NULL,
	[user_id] [varchar](7000) NULL,
	[UserAgent] [varchar](7000) NULL,
	[userid] [varchar](7000) NULL,
	[value] [varchar](7000) NULL,
	[version] [varchar](7000) NULL,
	[visitor] [varchar](7000) NULL,
	[wb48617274] [varchar](7000) NULL,
	[WT.ti] [varchar](7000) NULL,
	[zip_code] [varchar](7000) NULL,
	[entry_campaign_id_True] [varchar](7000) NULL,
	[first_pageview_true] [int] NOT NULL,
	[last_entry_true] [int] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[PageViews]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[PageViews](
	[listingid] [int] NULL,
	[profileid] [int] NULL,
	[WebVisit] [int] NULL,
	[MobileVisit] [int] NULL,
	[WebPageview] [int] NULL,
	[MobilePageView] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[PageViewsRecover]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[PageViewsRecover](
	[listingid] [int] NULL,
	[profileid] [int] NULL,
	[WebVisit] [int] NULL,
	[MobileVisit] [int] NULL,
	[WebPageview] [int] NULL,
	[MobilePageView] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[ParsedData]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[ParsedData](
	[ParseID] [bigint] NULL,
	[ProfileID] [int] NOT NULL,
	[YMDID] [int] NOT NULL,
	[EventDate] [datetime] NOT NULL,
	[MeasureType] [varchar](50) NOT NULL,
	[Measure] [varchar](7000) NOT NULL,
	[SubProfileID] [smallint] NULL,
	[Visit] [varchar](255) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[parseddatabackmart]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[parseddatabackmart](
	[ParseID] [bigint] NOT NULL,
	[ProfileID] [int] NOT NULL,
	[YMDID] [int] NOT NULL,
	[EventDate] [datetime] NOT NULL,
	[MeasureType] [varchar](50) NOT NULL,
	[Measure] [varchar](7000) NOT NULL,
	[SubProfileID] [smallint] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[PhoneCallAppointmentSetPrediction]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[PhoneCallAppointmentSetPrediction](
	[CallID] [nvarchar](50) NOT NULL,
	[Prediction] [int] NULL,
	[YMDID] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[CallID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[PhoneCallAppointmentSetPredictionBeta]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[PhoneCallAppointmentSetPredictionBeta](
	[CallID] [nvarchar](50) NOT NULL,
	[Prediction] [int] NULL,
	[YMDID] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[PhoneLeads]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[PhoneLeads](
	[listingid] [int] NULL,
	[profileid] [int] NULL,
	[callstatus] [int] NULL,
	[PhoneLeads] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[PhoneLeadsRecover]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[PhoneLeadsRecover](
	[listingid] [int] NULL,
	[profileid] [int] NULL,
	[callstatus] [int] NULL,
	[PhoneLeads] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[phonelookupdups_20160624]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[phonelookupdups_20160624](
	[PhoneNumber] [varchar](20) NULL,
	[PhoneType] [varchar](10) NULL,
	[DID] [varchar](10) NULL,
	[RecordType] [varchar](10) NULL,
	[FirstDate] [datetime2](3) NULL,
	[LastDate] [datetime2](3) NULL,
	[TELCOName] [varchar](50) NULL,
	[BusinessName] [varchar](100) NULL,
	[FirstName] [varchar](100) NULL,
	[MiddleInitial] [varchar](1) NULL,
	[LastName] [varchar](100) NULL,
	[PrimaryStreetNumber] [varchar](20) NULL,
	[PrimaryPredirAbbrev] [varchar](10) NULL,
	[PrimaryStreetName] [varchar](100) NULL,
	[PrimaryStreetSuffix] [varchar](10) NULL,
	[PrimaryPostdirAbbrev] [varchar](10) NULL,
	[SecondaryUnitType] [varchar](20) NULL,
	[SecondaryUnitNBR] [varchar](10) NULL,
	[City] [varchar](50) NULL,
	[StateCode] [varchar](2) NULL,
	[Zip] [varchar](10) NULL,
	[ZipExt] [varchar](10) NULL,
	[DeliveryPointCode] [varchar](10) NULL,
	[CarrierRoute] [varchar](10) NULL,
	[CountyCode] [varchar](10) NULL,
	[Zip4Type] [varchar](10) NULL,
	[DeliveryPointValidation] [varchar](10) NULL,
	[MailableFlag] [varchar](10) NULL,
	[AddressValidationDate] [datetime2](3) NULL,
	[Country] [varchar](10) NULL,
	[MCD] [varchar](10) NULL,
	[DirectoryAssistance] [varchar](10) NULL,
	[TelephoneConfidenceScore] [varchar](10) NULL,
	[LastUpdateDate] [datetime2](3) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[PropAnalysisLog]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[PropAnalysisLog](
	[ListingID] [int] NULL,
	[StepNum] [smallint] NULL,
	[Step] [varchar](1000) NULL,
	[EndTime] [datetime] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[RDTDate]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[RDTDate](
	[DateOfData] [datetime] NULL,
	[RDTID] [varchar](8) NULL,
	[YMDID] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[RDTLead]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[RDTLead](
	[LeadID] [bigint] NULL,
	[CustomerID] [nvarchar](255) NULL,
	[UnitNumber] [nvarchar](255) NULL,
	[FirstName] [nvarchar](255) NULL,
	[LastName] [nvarchar](255) NULL,
	[AddressAll] [nvarchar](255) NULL,
	[Address1] [nvarchar](255) NULL,
	[Address2] [nvarchar](255) NULL,
	[City] [nvarchar](255) NULL,
	[State] [nvarchar](255) NULL,
	[PostalCode] [nvarchar](255) NULL,
	[Email] [nvarchar](255) NULL,
	[Phone] [nvarchar](255) NULL,
	[ScreeningResponse] [nvarchar](255) NULL,
	[DateTime] [datetime] NULL,
	[EstimatedMoveDate] [datetime] NULL,
	[Message] [nvarchar](1000) NULL,
	[VisitedProperty] [bit] NULL,
	[LeadData_Id] [numeric](20, 0) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[RDTLeadData]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[RDTLeadData](
	[LeadData_Id] [numeric](20, 0) NULL,
	[Screened] [tinyint] NULL,
	[Unscreened] [tinyint] NULL,
	[PropertyLoadId] [numeric](20, 0) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[RDTManagement]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[RDTManagement](
	[Management_Id] [numeric](20, 0) NULL,
	[Name] [nvarchar](255) NULL,
	[Website] [nvarchar](255) NULL,
	[PropertyCount] [tinyint] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[RDTProperty]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[RDTProperty](
	[PropertyLoadId] [numeric](20, 0) NULL,
	[ExternalId] [varchar](20) NULL,
	[PropertyId] [nvarchar](255) NULL,
	[Name] [nvarchar](255) NULL,
	[Website] [nvarchar](255) NULL,
	[UniqueSessions] [int] NULL,
	[PageViews] [int] NULL,
	[Management_Id] [numeric](20, 0) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[rentpathparseddata]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[rentpathparseddata](
	[ParseID] [bigint] NOT NULL,
	[ProfileID] [int] NOT NULL,
	[YMDID] [int] NOT NULL,
	[EventDate] [datetime] NOT NULL,
	[MeasureType] [varchar](50) NOT NULL,
	[Measure] [varchar](7000) NOT NULL,
	[SubProfileID] [smallint] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[RentPathTagMapping]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[RentPathTagMapping](
	[CubeEventName] [varchar](50) NULL,
	[page] [varchar](50) NULL,
	[page_sub] [varchar](50) NULL,
	[action] [varchar](50) NULL,
	[position] [varchar](50) NULL,
	[selection] [varchar](50) NULL,
	[page_category] [varchar](50) NULL,
	[IsMarted] [int] NULL,
	[NAME] [varchar](200) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[RentPathTagMapping_new]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[RentPathTagMapping_new](
	[Name] [varchar](50) NULL,
	[page] [varchar](50) NULL,
	[page_sub] [varchar](50) NULL,
	[action] [varchar](50) NULL,
	[position] [varchar](50) NULL,
	[selection] [varchar](50) NULL,
	[page_category] [varchar](50) NULL,
	[IsMarted] [varchar](50) NULL,
	[CubeEventName] [varchar](50) NULL,
	[Column 9] [varchar](50) NULL,
	[Column 10] [varchar](50) NULL,
	[Column 11] [varchar](50) NULL,
	[Column 12] [varchar](50) NULL,
	[Column 13] [varchar](50) NULL,
	[Column 14] [varchar](50) NULL,
	[Column 15] [varchar](50) NULL,
	[Column 16] [varchar](50) NULL,
	[Column 17] [varchar](50) NULL,
	[Column 18] [varchar](50) NULL,
	[Column 19] [varchar](50) NULL,
	[Column 20] [varchar](50) NULL,
	[Column 21] [varchar](50) NULL,
	[Column 22] [varchar](50) NULL,
	[Column 23] [varchar](50) NULL,
	[Column 24] [varchar](50) NULL,
	[Column 25] [varchar](50) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[RentPathTagMapping_old]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[RentPathTagMapping_old](
	[Name] [varchar](50) NULL,
	[Location State] [varchar](50) NULL,
	[page] [varchar](50) NULL,
	[page_sub] [varchar](50) NULL,
	[action] [varchar](50) NULL,
	[position] [varchar](50) NULL,
	[selection] [varchar](50) NULL,
	[page_category] [varchar](50) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[RentPathTagMapping20150811]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[RentPathTagMapping20150811](
	[Name] [varchar](50) NULL,
	[page] [varchar](50) NULL,
	[page_sub] [varchar](50) NULL,
	[action] [varchar](50) NULL,
	[position] [varchar](50) NULL,
	[selection] [varchar](50) NULL,
	[page_category] [varchar](50) NULL,
	[IsMarted] [varchar](50) NULL,
	[CubeEventName] [varchar](50) NULL,
	[ToAddToClickEventsMap] [tinyint] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[RentPTEReport]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[RentPTEReport](
	[ListingID] [varchar](50) NULL,
	[PropertyID] [varchar](50) NULL,
	[Email Name] [varchar](50) NULL,
	[Date] [varchar](50) NULL,
	[PTE] [varchar](50) NULL,
	[Send Count] [varchar](50) NULL,
	[Delivered Count] [varchar](50) NULL,
	[Opens] [varchar](50) NULL,
	[Clicks] [varchar](50) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[SmallPropertyListings]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[SmallPropertyListings](
	[YMDID] [int] NOT NULL,
	[YearMonth] [int] NOT NULL,
	[ListingID] [varchar](30) NOT NULL,
	[IsRentals] [tinyint] NOT NULL,
	[IsLovely] [tinyint] NOT NULL,
	[ListingStatusID] [tinyint] NULL,
	[ShowPricing] [tinyint] NULL,
	[LowPrice] [int] NOT NULL,
	[HighPrice] [int] NOT NULL,
	[PropertyCity] [varchar](40) NOT NULL,
	[PropertyState] [varchar](2) NOT NULL,
	[ZipCode] [varchar](10) NOT NULL,
	[GeoLong] [decimal](10, 4) NULL,
	[GeoLat] [decimal](10, 4) NULL,
	[GeogPoint] [geography] NULL,
PRIMARY KEY CLUSTERED 
(
	[YMDID] ASC,
	[ListingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [Staging].[tableau_conversion]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[tableau_conversion](
	[profilename] [varchar](64) NOT NULL,
	[ymdid] [int] NOT NULL,
	[ymd] [datetime] NULL,
	[cbsaname] [varchar](200) NULL,
	[visittype] [varchar](12) NOT NULL,
	[desk_mobile] [varchar](7) NOT NULL,
	[leadtagcount] [bigint] NULL,
	[phonetagcount] [bigint] NULL,
	[visitcount] [int] NULL,
	[email_lead_count] [int] NULL,
	[phone_lead_count] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[tableau_email_conversion]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[tableau_email_conversion](
	[profilename] [varchar](64) NOT NULL,
	[ymdid] [int] NOT NULL,
	[ymd] [datetime] NULL,
	[cbsaname] [varchar](200) NULL,
	[trafficsourcename] [varchar](32) NOT NULL,
	[visittype] [varchar](12) NOT NULL,
	[browser] [varchar](50) NULL,
	[device_type] [varchar](7) NOT NULL,
	[desk_mobile] [varchar](7) NOT NULL,
	[entrypage] [varchar](512) NOT NULL,
	[leadtagcount] [bigint] NULL,
	[phonetagcount] [bigint] NULL,
	[visitcount] [int] NULL,
	[email_lead_count] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[TagCounts]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[TagCounts](
	[ymdid] [int] NOT NULL,
	[profileid] [int] NOT NULL,
	[subprofileid] [smallint] NULL,
	[page] [varchar](7000) NULL,
	[page_sub] [varchar](7000) NULL,
	[action] [varchar](7000) NULL,
	[position] [varchar](7000) NULL,
	[selection] [varchar](7000) NULL,
	[page_category] [varchar](7000) NULL,
	[TagCount] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[Tealium]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[Tealium](
	[listingid] [int] NULL,
	[profileid] [int] NULL,
	[ClickCheckAvailability] [int] NULL,
	[ClicksCommunityVideo] [int] NULL,
	[ClicksCR3] [int] NULL,
	[ClicksDiamondMaxCheckAvail] [int] NULL,
	[ClicksDiamondMaxPhoto] [int] NULL,
	[ClicksFeatCommCheckAvail] [int] NULL,
	[ClicksFeaturedCommunity] [int] NULL,
	[ClicksFloorplan] [int] NULL,
	[ClicksHDFloorplan] [int] NULL,
	[ClicksHDPanoTour] [int] NULL,
	[ClicksHDPhoto] [int] NULL,
	[ClicksHDVideo] [int] NULL,
	[ClicksLeadSubmission] [int] NULL,
	[ClicksMap] [int] NULL,
	[ClicksMgtCoPeelAd] [int] NULL,
	[ClicksMgtCoURL] [int] NULL,
	[ClicksPanoTour] [int] NULL,
	[ClicksPhotos] [int] NULL,
	[ClicksReserveNow] [int] NULL,
	[ClicksSpotlightRentSpecials] [int] NULL,
	[ClicksSpotlightReserveNow] [int] NULL,
	[ClicksSRPListingCheckAvail] [int] NULL,
	[ClicksWebURL] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[TealiumParsedPivot]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[TealiumParsedPivot](
	[ymdid] [int] NOT NULL,
	[parseid] [bigint] NOT NULL,
	[profileid] [int] NOT NULL,
	[subprofileid] [tinyint] NOT NULL,
	[eventdate] [datetime] NOT NULL,
	[profile] [varchar](7000) NULL,
	[subprofile] [varchar](7000) NULL,
	[page] [varchar](7000) NULL,
	[position] [varchar](7000) NULL,
	[selection] [varchar](7000) NULL,
	[listingid] [varchar](7000) NULL,
	[action] [varchar](7000) NULL,
	[campaign_id] [varchar](7000) NULL,
	[visit] [varchar](7000) NULL,
	[ef_id] [varchar](7000) NULL,
	[referrer] [varchar](7000) NULL,
	[referring_domain] [varchar](7000) NULL,
	[adlt] [varchar](7000) NULL,
	[browser] [varchar](7000) NULL,
	[browser_size] [varchar](7000) NULL,
	[browser_version] [varchar](7000) NULL,
	[city] [varchar](7000) NULL,
	[college] [varchar](7000) NULL,
	[CustIPAddress] [varchar](7000) NULL,
	[event_name] [varchar](7000) NULL,
	[event_number] [varchar](7000) NULL,
	[featured_array] [varchar](7000) NULL,
	[gclid] [varchar](7000) NULL,
	[gclsrc] [varchar](7000) NULL,
	[hash] [varchar](7000) NULL,
	[listing_array] [varchar](7000) NULL,
	[listings_per_page] [varchar](7000) NULL,
	[military] [varchar](7000) NULL,
	[neighborhood] [varchar](7000) NULL,
	[node_class] [varchar](7000) NULL,
	[node_g_parent_class] [varchar](7000) NULL,
	[node_g_parent_name] [varchar](7000) NULL,
	[node_great_g_parent_class] [varchar](7000) NULL,
	[node_href] [varchar](7000) NULL,
	[node_name] [varchar](7000) NULL,
	[node_parent_class] [varchar](7000) NULL,
	[node_value] [varchar](7000) NULL,
	[operating_system] [varchar](7000) NULL,
	[operating_system_version] [varchar](7000) NULL,
	[page_category] [varchar](7000) NULL,
	[page_number] [varchar](7000) NULL,
	[page_sub] [varchar](7000) NULL,
	[path] [varchar](7000) NULL,
	[pdp_tab] [varchar](7000) NULL,
	[phone_number] [varchar](7000) NULL,
	[propertyid] [varchar](7000) NULL,
	[q] [varchar](7000) NULL,
	[querystring] [varchar](7000) NULL,
	[rct] [varchar](7000) NULL,
	[refinement_array] [varchar](7000) NULL,
	[revenue] [varchar](7000) NULL,
	[safe] [varchar](7000) NULL,
	[screen_resolution] [varchar](7000) NULL,
	[screen_type] [varchar](7000) NULL,
	[seq] [varchar](7000) NULL,
	[ServerIPAddress] [varchar](7000) NULL,
	[spotlight_array] [varchar](7000) NULL,
	[ssSiteName] [varchar](7000) NULL,
	[ssTestName] [varchar](7000) NULL,
	[ssVariationGroupName] [varchar](7000) NULL,
	[state] [varchar](7000) NULL,
	[t_visit] [varchar](7000) NULL,
	[timeout_error] [varchar](7000) NULL,
	[title] [varchar](7000) NULL,
	[tpl_source] [varchar](7000) NULL,
	[unitlayout_id] [varchar](7000) NULL,
	[url] [varchar](7000) NULL,
	[user_email] [varchar](7000) NULL,
	[user_id] [varchar](7000) NULL,
	[UserAgent] [varchar](7000) NULL,
	[utm_campaign] [varchar](7000) NULL,
	[utm_content] [varchar](7000) NULL,
	[utm_medium] [varchar](7000) NULL,
	[utm_source] [varchar](7000) NULL,
	[utm_term] [varchar](7000) NULL,
	[uzid] [varchar](7000) NULL,
	[validation_error] [varchar](7000) NULL,
	[value] [varchar](7000) NULL,
	[visitor] [varchar](7000) NULL,
	[wb48617274] [varchar](7000) NULL,
	[x] [varchar](7000) NULL,
	[y] [varchar](7000) NULL,
	[zip_code] [varchar](7000) NULL,
	[device] [varchar](7000) NULL,
	[DerivedCampaignID] [varchar](7000) NULL,
	[DerivedEFID] [varchar](64) NULL,
	[FirstEventFlag] [tinyint] NULL,
	[LastEventFlag] [tinyint] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[TealiumParsedPivot_20160726]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[TealiumParsedPivot_20160726](
	[ymdid] [int] NOT NULL,
	[parseid] [bigint] NOT NULL,
	[profileid] [int] NOT NULL,
	[subprofileid] [tinyint] NOT NULL,
	[eventdate] [datetime] NOT NULL,
	[profile] [varchar](7000) NULL,
	[subprofile] [varchar](7000) NULL,
	[page] [varchar](7000) NULL,
	[position] [varchar](7000) NULL,
	[selection] [varchar](7000) NULL,
	[listingid] [varchar](7000) NULL,
	[action] [varchar](7000) NULL,
	[campaign_id] [varchar](7000) NULL,
	[entry_campaign_id] [varchar](7000) NULL,
	[visit] [varchar](7000) NULL,
	[ef_id] [varchar](7000) NULL,
	[referrer] [varchar](7000) NULL,
	[referring_domain] [varchar](7000) NULL,
	[adlt] [varchar](7000) NULL,
	[amp;action] [varchar](7000) NULL,
	[amp;browser] [varchar](7000) NULL,
	[amp;browser_size] [varchar](7000) NULL,
	[amp;browser_version] [varchar](7000) NULL,
	[amp;city] [varchar](7000) NULL,
	[amp;featured_array] [varchar](7000) NULL,
	[amp;listing_array] [varchar](7000) NULL,
	[amp;listingid] [varchar](7000) NULL,
	[amp;listings_per_page] [varchar](7000) NULL,
	[amp;node_class] [varchar](7000) NULL,
	[amp;node_g_parent_class] [varchar](7000) NULL,
	[amp;node_g_parent_name] [varchar](7000) NULL,
	[amp;node_great_g_parent_class] [varchar](7000) NULL,
	[amp;node_href] [varchar](7000) NULL,
	[amp;node_name] [varchar](7000) NULL,
	[amp;node_parent_class] [varchar](7000) NULL,
	[amp;node_value] [varchar](7000) NULL,
	[amp;operating_system] [varchar](7000) NULL,
	[amp;page] [varchar](7000) NULL,
	[amp;page_category] [varchar](7000) NULL,
	[amp;page_number] [varchar](7000) NULL,
	[amp;page_sub] [varchar](7000) NULL,
	[amp;path] [varchar](7000) NULL,
	[amp;position] [varchar](7000) NULL,
	[amp;querystring] [varchar](7000) NULL,
	[amp;referrer] [varchar](7000) NULL,
	[amp;referring_domain] [varchar](7000) NULL,
	[amp;refinement_array] [varchar](7000) NULL,
	[amp;screen_resolution] [varchar](7000) NULL,
	[amp;screen_type] [varchar](7000) NULL,
	[amp;selection] [varchar](7000) NULL,
	[amp;seq] [varchar](7000) NULL,
	[amp;spotlight_array] [varchar](7000) NULL,
	[amp;state] [varchar](7000) NULL,
	[amp;subprofile] [varchar](7000) NULL,
	[amp;t_visit] [varchar](7000) NULL,
	[amp;title] [varchar](7000) NULL,
	[amp;tpl_source] [varchar](7000) NULL,
	[amp;unitlayout_id] [varchar](7000) NULL,
	[amp;url] [varchar](7000) NULL,
	[amp;user_id] [varchar](7000) NULL,
	[amp;uzid] [varchar](7000) NULL,
	[amp;value] [varchar](7000) NULL,
	[amp;visit] [varchar](7000) NULL,
	[amp;visitor] [varchar](7000) NULL,
	[amp;x] [varchar](7000) NULL,
	[amp;y] [varchar](7000) NULL,
	[browser] [varchar](7000) NULL,
	[browser_size] [varchar](7000) NULL,
	[browser_version] [varchar](7000) NULL,
	[cd] [varchar](7000) NULL,
	[city] [varchar](7000) NULL,
	[CustIPAddress] [varchar](7000) NULL,
	[esrc] [varchar](7000) NULL,
	[event_name] [varchar](7000) NULL,
	[featured_array] [varchar](7000) NULL,
	[FORM] [varchar](7000) NULL,
	[hash] [varchar](7000) NULL,
	[listing_array] [varchar](7000) NULL,
	[listing_type] [varchar](7000) NULL,
	[listings_per_page] [varchar](7000) NULL,
	[neighborhood] [varchar](7000) NULL,
	[node_class] [varchar](7000) NULL,
	[node_g_parent_class] [varchar](7000) NULL,
	[node_g_parent_id] [varchar](7000) NULL,
	[node_g_parent_name] [varchar](7000) NULL,
	[node_great_g_parent_class] [varchar](7000) NULL,
	[node_great_g_parent_id] [varchar](7000) NULL,
	[node_great_g_parent_name] [varchar](7000) NULL,
	[node_href] [varchar](7000) NULL,
	[node_id] [varchar](7000) NULL,
	[node_name] [varchar](7000) NULL,
	[node_parent_class] [varchar](7000) NULL,
	[node_parent_id] [varchar](7000) NULL,
	[node_parent_name] [varchar](7000) NULL,
	[node_value] [varchar](7000) NULL,
	[operating_system] [varchar](7000) NULL,
	[page_category] [varchar](7000) NULL,
	[page_number] [varchar](7000) NULL,
	[page_sub] [varchar](7000) NULL,
	[path] [varchar](7000) NULL,
	[propertyid] [varchar](7000) NULL,
	[querystring] [varchar](7000) NULL,
	[rct] [varchar](7000) NULL,
	[refinement_array] [varchar](7000) NULL,
	[safe] [varchar](7000) NULL,
	[screen_resolution] [varchar](7000) NULL,
	[screen_type] [varchar](7000) NULL,
	[seq] [varchar](7000) NULL,
	[ServerIPAddress] [varchar](7000) NULL,
	[sort] [varchar](7000) NULL,
	[source] [varchar](7000) NULL,
	[spotlight_array] [varchar](7000) NULL,
	[spotlight_count] [varchar](7000) NULL,
	[src] [varchar](7000) NULL,
	[ssSiteName] [varchar](7000) NULL,
	[ssTestName] [varchar](7000) NULL,
	[ssVariationGroupName] [varchar](7000) NULL,
	[state] [varchar](7000) NULL,
	[t_visit] [varchar](7000) NULL,
	[title] [varchar](7000) NULL,
	[tpl_source] [varchar](7000) NULL,
	[unit_id] [varchar](7000) NULL,
	[unitlayout_id] [varchar](7000) NULL,
	[url] [varchar](7000) NULL,
	[user_email] [varchar](7000) NULL,
	[user_id] [varchar](7000) NULL,
	[UserAgent] [varchar](7000) NULL,
	[userid] [varchar](7000) NULL,
	[uzid] [varchar](7000) NULL,
	[value] [varchar](7000) NULL,
	[ved] [varchar](7000) NULL,
	[version] [varchar](7000) NULL,
	[visitor] [varchar](7000) NULL,
	[vm] [varchar](7000) NULL,
	[wb48617274] [varchar](7000) NULL,
	[x] [varchar](7000) NULL,
	[y] [varchar](7000) NULL,
	[zip_code] [varchar](7000) NULL,
	[device] [varchar](7000) NULL,
	[DerivedCampaignID] [varchar](7000) NULL,
	[DerivedEFID] [varchar](64) NULL,
	[FirstEventFlag] [tinyint] NULL,
	[LastEventFlag] [tinyint] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[TealiumParsedPivotBackMart]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[TealiumParsedPivotBackMart](
	[ymdid] [int] NOT NULL,
	[parseid] [bigint] NOT NULL,
	[profileid] [int] NOT NULL,
	[subprofileid] [smallint] NULL,
	[eventdate] [datetime] NOT NULL,
	[profile] [varchar](7000) NULL,
	[subprofile] [varchar](7000) NULL,
	[page] [varchar](7000) NULL,
	[position] [varchar](7000) NULL,
	[selection] [varchar](7000) NULL,
	[listingid] [varchar](7000) NULL,
	[action] [varchar](7000) NULL,
	[campaign_id] [varchar](7000) NULL,
	[visit] [varchar](7000) NULL,
	[ef_id] [varchar](7000) NULL,
	[referrer] [varchar](7000) NULL,
	[referring_domain] [varchar](7000) NULL,
	[adlt] [varchar](7000) NULL,
	[amp;action] [varchar](7000) NULL,
	[amp;browser] [varchar](7000) NULL,
	[amp;browser_size] [varchar](7000) NULL,
	[amp;browser_version] [varchar](7000) NULL,
	[amp;city] [varchar](7000) NULL,
	[amp;featured_array] [varchar](7000) NULL,
	[amp;listing_array] [varchar](7000) NULL,
	[amp;listings_per_page] [varchar](7000) NULL,
	[amp;operating_system] [varchar](7000) NULL,
	[amp;page] [varchar](7000) NULL,
	[amp;page_category] [varchar](7000) NULL,
	[amp;path] [varchar](7000) NULL,
	[amp;referrer] [varchar](7000) NULL,
	[amp;referring_domain] [varchar](7000) NULL,
	[amp;refinement_array] [varchar](7000) NULL,
	[amp;screen_resolution] [varchar](7000) NULL,
	[amp;screen_type] [varchar](7000) NULL,
	[amp;seq] [varchar](7000) NULL,
	[amp;state] [varchar](7000) NULL,
	[amp;subprofile] [varchar](7000) NULL,
	[amp;t_visit] [varchar](7000) NULL,
	[amp;title] [varchar](7000) NULL,
	[amp;url] [varchar](7000) NULL,
	[amp;user_id] [varchar](7000) NULL,
	[amp;visit] [varchar](7000) NULL,
	[amp;visitor] [varchar](7000) NULL,
	[browser] [varchar](7000) NULL,
	[browser_size] [varchar](7000) NULL,
	[browser_version] [varchar](7000) NULL,
	[city] [varchar](7000) NULL,
	[college] [varchar](7000) NULL,
	[CustIPAddress] [varchar](7000) NULL,
	[event_name] [varchar](7000) NULL,
	[event_number] [varchar](7000) NULL,
	[featured_array] [varchar](7000) NULL,
	[gclid] [varchar](7000) NULL,
	[gclsrc] [varchar](7000) NULL,
	[hash] [varchar](7000) NULL,
	[listing_array] [varchar](7000) NULL,
	[listings_per_page] [varchar](7000) NULL,
	[military] [varchar](7000) NULL,
	[neighborhood] [varchar](7000) NULL,
	[node_class] [varchar](7000) NULL,
	[node_g_parent_class] [varchar](7000) NULL,
	[node_g_parent_name] [varchar](7000) NULL,
	[node_great_g_parent_class] [varchar](7000) NULL,
	[node_href] [varchar](7000) NULL,
	[node_name] [varchar](7000) NULL,
	[node_parent_class] [varchar](7000) NULL,
	[node_value] [varchar](7000) NULL,
	[operating_system] [varchar](7000) NULL,
	[operating_system_version] [varchar](7000) NULL,
	[page_category] [varchar](7000) NULL,
	[page_number] [varchar](7000) NULL,
	[page_sub] [varchar](7000) NULL,
	[path] [varchar](7000) NULL,
	[propertyid] [varchar](7000) NULL,
	[querystring] [varchar](7000) NULL,
	[refinement_array] [varchar](7000) NULL,
	[screen_resolution] [varchar](7000) NULL,
	[screen_type] [varchar](7000) NULL,
	[seq] [varchar](7000) NULL,
	[ServerIPAddress] [varchar](7000) NULL,
	[spotlight_array] [varchar](7000) NULL,
	[ssSiteName] [varchar](7000) NULL,
	[ssTestName] [varchar](7000) NULL,
	[ssVariationGroupName] [varchar](7000) NULL,
	[state] [varchar](7000) NULL,
	[t_visit] [varchar](7000) NULL,
	[timeout_error] [varchar](7000) NULL,
	[title] [varchar](7000) NULL,
	[tpl_source] [varchar](7000) NULL,
	[unitlayout_id] [varchar](7000) NULL,
	[url] [varchar](7000) NULL,
	[user_email] [varchar](7000) NULL,
	[user_id] [varchar](7000) NULL,
	[UserAgent] [varchar](7000) NULL,
	[uzid] [varchar](7000) NULL,
	[validation_error] [varchar](7000) NULL,
	[value] [varchar](7000) NULL,
	[visitor] [varchar](7000) NULL,
	[wb48617274] [varchar](7000) NULL,
	[x] [varchar](7000) NULL,
	[y] [varchar](7000) NULL,
	[zip_code] [varchar](7000) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[TealiumParsedPivotRecover]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[TealiumParsedPivotRecover](
	[ymdid] [int] NOT NULL,
	[parseid] [bigint] NOT NULL,
	[profileid] [int] NOT NULL,
	[subprofileid] [smallint] NULL,
	[eventdate] [datetime] NOT NULL,
	[profile] [varchar](7000) NULL,
	[subprofile] [varchar](7000) NULL,
	[page] [varchar](7000) NULL,
	[position] [varchar](7000) NULL,
	[selection] [varchar](7000) NULL,
	[listingid] [varchar](7000) NULL,
	[action] [varchar](7000) NULL,
	[campaign_id] [varchar](7000) NULL,
	[entry_campaign_id] [varchar](7000) NULL,
	[visit] [varchar](7000) NULL,
	[ef_id] [varchar](7000) NULL,
	[referrer] [varchar](7000) NULL,
	[referring_domain] [varchar](7000) NULL,
	[browser] [varchar](7000) NULL,
	[browser_size] [varchar](7000) NULL,
	[browser_version] [varchar](7000) NULL,
	[cd] [varchar](7000) NULL,
	[city] [varchar](7000) NULL,
	[CustIPAddress] [varchar](7000) NULL,
	[esrc] [varchar](7000) NULL,
	[event_name] [varchar](7000) NULL,
	[featured_array] [varchar](7000) NULL,
	[hash] [varchar](7000) NULL,
	[listing_array] [varchar](7000) NULL,
	[listing_type] [varchar](7000) NULL,
	[listings_per_page] [varchar](7000) NULL,
	[neighborhood] [varchar](7000) NULL,
	[node_class] [varchar](7000) NULL,
	[node_g_parent_class] [varchar](7000) NULL,
	[node_g_parent_id] [varchar](7000) NULL,
	[node_g_parent_name] [varchar](7000) NULL,
	[node_great_g_parent_class] [varchar](7000) NULL,
	[node_great_g_parent_id] [varchar](7000) NULL,
	[node_great_g_parent_name] [varchar](7000) NULL,
	[node_href] [varchar](7000) NULL,
	[node_id] [varchar](7000) NULL,
	[node_name] [varchar](7000) NULL,
	[node_parent_class] [varchar](7000) NULL,
	[node_parent_href] [varchar](7000) NULL,
	[node_parent_id] [varchar](7000) NULL,
	[node_parent_name] [varchar](7000) NULL,
	[node_value] [varchar](7000) NULL,
	[operating_system] [varchar](7000) NULL,
	[page_category] [varchar](7000) NULL,
	[page_number] [varchar](7000) NULL,
	[page_sub] [varchar](7000) NULL,
	[path] [varchar](7000) NULL,
	[propertyid] [varchar](7000) NULL,
	[q] [varchar](7000) NULL,
	[querystring] [varchar](7000) NULL,
	[rct] [varchar](7000) NULL,
	[refinement_array] [varchar](7000) NULL,
	[s_it] [varchar](7000) NULL,
	[s_qt] [varchar](7000) NULL,
	[safe] [varchar](7000) NULL,
	[screen_resolution] [varchar](7000) NULL,
	[screen_type] [varchar](7000) NULL,
	[seq] [varchar](7000) NULL,
	[ServerIPAddress] [varchar](7000) NULL,
	[session_check] [varchar](7000) NULL,
	[sort] [varchar](7000) NULL,
	[source] [varchar](7000) NULL,
	[spotlight_array] [varchar](7000) NULL,
	[spotlight_count] [varchar](7000) NULL,
	[ssSiteName] [varchar](7000) NULL,
	[ssTestName] [varchar](7000) NULL,
	[ssVariationGroupName] [varchar](7000) NULL,
	[state] [varchar](7000) NULL,
	[t_visit] [varchar](7000) NULL,
	[title] [varchar](7000) NULL,
	[tpl_source] [varchar](7000) NULL,
	[unitlayout_id] [varchar](7000) NULL,
	[url] [varchar](7000) NULL,
	[user_email] [varchar](7000) NULL,
	[user_id] [varchar](7000) NULL,
	[UserAgent] [varchar](7000) NULL,
	[userid] [varchar](7000) NULL,
	[usg] [varchar](7000) NULL,
	[uzid] [varchar](7000) NULL,
	[value] [varchar](7000) NULL,
	[ved] [varchar](7000) NULL,
	[version] [varchar](7000) NULL,
	[visitor] [varchar](7000) NULL,
	[wb48617274] [varchar](7000) NULL,
	[x] [varchar](7000) NULL,
	[y] [varchar](7000) NULL,
	[zip_code] [varchar](7000) NULL,
	[device] [varchar](7000) NULL,
	[DerivedCampaignID] [varchar](7000) NULL,
	[DerivedEFID] [varchar](64) NULL,
	[FirstEventFlag] [tinyint] NULL,
	[LastEventFlag] [tinyint] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[TealiumParsedPivotTestCW201608192]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[TealiumParsedPivotTestCW201608192](
	[ymdid] [int] NOT NULL,
	[parseid] [bigint] NOT NULL,
	[profileid] [int] NOT NULL,
	[subprofileid] [tinyint] NOT NULL,
	[eventdate] [datetime] NOT NULL,
	[profile] [varchar](7000) NULL,
	[subprofile] [varchar](7000) NULL,
	[page] [varchar](7000) NULL,
	[position] [varchar](7000) NULL,
	[selection] [varchar](7000) NULL,
	[listingid] [varchar](7000) NULL,
	[action] [varchar](7000) NULL,
	[campaign_id] [varchar](7000) NULL,
	[entry_campaign_id] [varchar](7000) NULL,
	[visit] [varchar](7000) NULL,
	[referrer] [varchar](7000) NULL,
	[referring_domain] [varchar](7000) NULL,
	[adlt] [varchar](7000) NULL,
	[amp;action] [varchar](7000) NULL,
	[amp;browser] [varchar](7000) NULL,
	[amp;browser_size] [varchar](7000) NULL,
	[amp;browser_version] [varchar](7000) NULL,
	[amp;city] [varchar](7000) NULL,
	[amp;cvid] [varchar](7000) NULL,
	[amp;form] [varchar](7000) NULL,
	[amp;listing_array] [varchar](7000) NULL,
	[amp;listingid] [varchar](7000) NULL,
	[amp;listings_per_page] [varchar](7000) NULL,
	[amp;node_class] [varchar](7000) NULL,
	[amp;node_g_parent_class] [varchar](7000) NULL,
	[amp;node_g_parent_name] [varchar](7000) NULL,
	[amp;node_great_g_parent_class] [varchar](7000) NULL,
	[amp;node_href] [varchar](7000) NULL,
	[amp;node_name] [varchar](7000) NULL,
	[amp;node_parent_class] [varchar](7000) NULL,
	[amp;node_value] [varchar](7000) NULL,
	[amp;operating_system] [varchar](7000) NULL,
	[amp;page] [varchar](7000) NULL,
	[amp;page_category] [varchar](7000) NULL,
	[amp;page_number] [varchar](7000) NULL,
	[amp;page_sub] [varchar](7000) NULL,
	[amp;path] [varchar](7000) NULL,
	[amp;position] [varchar](7000) NULL,
	[amp;pq] [varchar](7000) NULL,
	[amp;qs] [varchar](7000) NULL,
	[amp;referrer] [varchar](7000) NULL,
	[amp;referring_domain] [varchar](7000) NULL,
	[amp;refinement_array] [varchar](7000) NULL,
	[amp;sc] [varchar](7000) NULL,
	[amp;screen_resolution] [varchar](7000) NULL,
	[amp;screen_type] [varchar](7000) NULL,
	[amp;seq] [varchar](7000) NULL,
	[amp;sp] [varchar](7000) NULL,
	[amp;spotlight_array] [varchar](7000) NULL,
	[amp;ssSiteName] [varchar](7000) NULL,
	[amp;ssTestName] [varchar](7000) NULL,
	[amp;ssVariationGroupName] [varchar](7000) NULL,
	[amp;state] [varchar](7000) NULL,
	[amp;subprofile] [varchar](7000) NULL,
	[amp;t_visit] [varchar](7000) NULL,
	[amp;title] [varchar](7000) NULL,
	[amp;tpl_source] [varchar](7000) NULL,
	[amp;unitlayout_id] [varchar](7000) NULL,
	[amp;url] [varchar](7000) NULL,
	[amp;user_id] [varchar](7000) NULL,
	[amp;uzid] [varchar](7000) NULL,
	[amp;value] [varchar](7000) NULL,
	[amp;visit] [varchar](7000) NULL,
	[amp;visitor] [varchar](7000) NULL,
	[amp;x] [varchar](7000) NULL,
	[amp;y] [varchar](7000) NULL,
	[browser] [varchar](7000) NULL,
	[browser_size] [varchar](7000) NULL,
	[browser_version] [varchar](7000) NULL,
	[city] [varchar](7000) NULL,
	[CustIPAddress] [varchar](7000) NULL,
	[cvid] [varchar](7000) NULL,
	[ef_id] [varchar](7000) NULL,
	[event_name] [varchar](7000) NULL,
	[featured_array] [varchar](7000) NULL,
	[form] [varchar](7000) NULL,
	[hash] [varchar](7000) NULL,
	[listing_array] [varchar](7000) NULL,
	[listing_type] [varchar](7000) NULL,
	[listings_per_page] [varchar](7000) NULL,
	[neighborhood] [varchar](7000) NULL,
	[node_class] [varchar](7000) NULL,
	[node_g_parent_class] [varchar](7000) NULL,
	[node_g_parent_id] [varchar](7000) NULL,
	[node_g_parent_name] [varchar](7000) NULL,
	[node_great_g_parent_class] [varchar](7000) NULL,
	[node_great_g_parent_id] [varchar](7000) NULL,
	[node_great_g_parent_name] [varchar](7000) NULL,
	[node_href] [varchar](7000) NULL,
	[node_id] [varchar](7000) NULL,
	[node_name] [varchar](7000) NULL,
	[node_parent_class] [varchar](7000) NULL,
	[node_parent_id] [varchar](7000) NULL,
	[node_parent_name] [varchar](7000) NULL,
	[node_value] [varchar](7000) NULL,
	[operating_system] [varchar](7000) NULL,
	[operating_system_version] [varchar](7000) NULL,
	[page_category] [varchar](7000) NULL,
	[page_number] [varchar](7000) NULL,
	[page_sub] [varchar](7000) NULL,
	[path] [varchar](7000) NULL,
	[pq] [varchar](7000) NULL,
	[propertyid] [varchar](7000) NULL,
	[qs] [varchar](7000) NULL,
	[querystring] [varchar](7000) NULL,
	[refinement_array] [varchar](7000) NULL,
	[safe] [varchar](7000) NULL,
	[sc] [varchar](7000) NULL,
	[screen_resolution] [varchar](7000) NULL,
	[screen_type] [varchar](7000) NULL,
	[seq] [varchar](7000) NULL,
	[ServerIPAddress] [varchar](7000) NULL,
	[sp] [varchar](7000) NULL,
	[spotlight_array] [varchar](7000) NULL,
	[spotlight_count] [varchar](7000) NULL,
	[ssSiteName] [varchar](7000) NULL,
	[ssTestName] [varchar](7000) NULL,
	[ssVariationGroupName] [varchar](7000) NULL,
	[state] [varchar](7000) NULL,
	[t_visit] [varchar](7000) NULL,
	[title] [varchar](7000) NULL,
	[tpl_source] [varchar](7000) NULL,
	[unitlayout_id] [varchar](7000) NULL,
	[url] [varchar](7000) NULL,
	[user_email] [varchar](7000) NULL,
	[user_id] [varchar](7000) NULL,
	[UserAgent] [varchar](7000) NULL,
	[userid] [varchar](7000) NULL,
	[uzid] [varchar](7000) NULL,
	[value] [varchar](7000) NULL,
	[version] [varchar](7000) NULL,
	[visitor] [varchar](7000) NULL,
	[vm] [varchar](7000) NULL,
	[wb48617274] [varchar](7000) NULL,
	[x] [varchar](7000) NULL,
	[y] [varchar](7000) NULL,
	[zip_code] [varchar](7000) NULL,
	[entry_campaign_id_True] [varchar](7000) NULL,
	[first_pageview_true] [int] NOT NULL,
	[last_entry_true] [int] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[TealiumRecover]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[TealiumRecover](
	[listingid] [int] NULL,
	[profileid] [int] NULL,
	[ClicksCommunityVideo] [int] NULL,
	[ClicksCR3] [int] NULL,
	[ClicksDiamondMaxCheckAvail] [int] NULL,
	[ClicksDiamondMaxPhoto] [int] NULL,
	[ClicksFeatCommCheckAvail] [int] NULL,
	[ClicksFeaturedCommunity] [int] NULL,
	[ClicksFloorplan] [int] NULL,
	[ClicksHDFloorplan] [int] NULL,
	[ClicksHDPanoTour] [int] NULL,
	[ClicksHDPhoto] [int] NULL,
	[ClicksHDVideo] [int] NULL,
	[ClicksMap] [int] NULL,
	[ClicksMgtCoPeelAd] [int] NULL,
	[ClicksPhoto] [int] NULL,
	[ClicksPhotos] [int] NULL,
	[ClicksReserveNow] [int] NULL,
	[ClicksSpotlightRentSpecials] [int] NULL,
	[ClicksSpotlightReserveNow] [int] NULL,
	[ClicksSRPListingCheckAvail] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[UnitStyleClicks]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[UnitStyleClicks](
	[ParseID] [bigint] NOT NULL,
	[YMDID] [int] NOT NULL,
	[Listingid] [varchar](7000) NOT NULL,
	[unitstyle] [varchar](7000) NOT NULL,
	[ClickCount] [int] NOT NULL,
	[YearMonth] [int] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[Website_Domains_Visited]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[Website_Domains_Visited](
	[id] [int] NOT NULL,
	[uzid] [varchar](300) NULL,
	[domainvisited] [nvarchar](2000) NULL,
	[created_at] [datetime] NULL,
	[updated_at] [datetime] NULL,
 CONSTRAINT [PK_Website_Domains_Visited_On_ID] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[Website_Login_Accounts]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[Website_Login_Accounts](
	[id] [int] NOT NULL,
	[email] [varchar](300) NULL,
	[first_name] [varchar](300) NULL,
	[last_name] [varchar](300) NULL,
	[uuid] [varchar](2000) NULL,
	[created_at] [datetime] NULL,
	[updated_at] [datetime] NULL,
	[realm] [varchar](300) NULL,
	[source] [varchar](1000) NULL,
 CONSTRAINT [PK_Website_Login_Accounts_On_ID] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[WhseListingsViewForAPS]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[WhseListingsViewForAPS](
	[YMDID] [nvarchar](8) NULL,
	[AGPROPERTYID] [numeric](9, 0) NOT NULL,
	[RENTPROPERTYID] [numeric](15, 0) NULL,
	[SALESFORCEID] [nvarchar](20) NOT NULL,
	[LISTINGID] [numeric](9, 0) NOT NULL,
	[LISTINGTYPEID] [numeric](9, 0) NOT NULL,
	[LISTINGTYPE] [nvarchar](25) NOT NULL,
	[EXTERNALID] [nvarchar](50) NULL,
	[EXTERNALPRICECODE] [nvarchar](8) NULL,
	[LISTINGDETAILSSOURCE] [nvarchar](20) NULL,
	[AGMGTCOID] [numeric](9, 0) NULL,
	[RENTMGTCOID] [numeric](9, 0) NULL,
	[AGMGTCONAME] [nvarchar](80) NULL,
	[RENTMGTCONAME] [nvarchar](80) NULL,
	[RENTCOMPANYID] [numeric](15, 0) NULL,
	[PROPERTYNAME] [nvarchar](100) NOT NULL,
	[PROPERTYADDRESS] [nvarchar](40) NULL,
	[AGSTATUSID] [nchar](1) NOT NULL,
	[RENTSTATUSID] [numeric](1, 0) NULL,
	[PROPERTYCITY] [nvarchar](40) NULL,
	[PROPERTYSTATE] [nvarchar](2) NULL,
	[ZIPCODE] [nvarchar](10) NULL,
	[CBSACODE] [nchar](5) NULL,
	[CBSANAME] [nvarchar](64) NULL,
	[TOTALUNITS] [nvarchar](384) NULL,
	[TOTALPHOTOS] [nvarchar](384) NULL,
	[ACTIVEPHOTOS] [nvarchar](384) NULL,
	[TOTALFLOORPLANS] [nvarchar](384) NULL,
	[ACTIVEFLOORPLANS] [nvarchar](384) NULL,
	[TOTALAMENITIES] [nvarchar](384) NULL,
	[ACTIVEAMENITIES] [nvarchar](384) NULL,
	[PRICING] [nvarchar](384) NULL,
	[CALCULATEDPRICE] [nvarchar](384) NULL,
	[UPSELLLISTHIGHLIGHTED] [nvarchar](384) NULL,
	[UPSELLLISTCOUPON] [nvarchar](384) NULL,
	[UPSELLPROPEMERCIAL] [nvarchar](384) NULL,
	[UPSELLPROPFEATCOMMPLATINUM] [nvarchar](384) NULL,
	[UPSELLPROPVIRTUALBROCHURE] [nvarchar](384) NULL,
	[UPSELLLISTCORPORATELISTING] [nvarchar](384) NULL,
	[UPSELLLISTCOLLEGELISTING] [nvarchar](384) NULL,
	[UPSELLLISTMILITARYLISTING] [nvarchar](384) NULL,
	[UPSELLLISTAPARTMENTLISTING] [nvarchar](384) NULL,
	[UPSELLPROPPHOTOUPGRADE] [nvarchar](384) NULL,
	[UPSELLMGMTMANAGEMENTCOLOGO] [nvarchar](384) NULL,
	[UPSELLLISTSENIORLISTING] [nvarchar](384) NULL,
	[UPSELLPROPPROPERTYLOGO] [nvarchar](384) NULL,
	[UPSELLPROPPREMIUMUPGRADE] [nvarchar](384) NULL,
	[UPSELLPROPVIDEOSPOKESMODEL] [nvarchar](384) NULL,
	[UPSELLPROPFRONTPAGE] [nvarchar](384) NULL,
	[UPSELLPROPSPANISH] [nvarchar](384) NULL,
	[UPSELLPROPCALLRECORDING] [nvarchar](384) NULL,
	[CALLRECORDINGOPTOUT] [nvarchar](384) NULL,
	[UPSELLPROPFORMTOPHONE] [nvarchar](384) NULL,
	[UPSELLPROPRENTALSPREMIER] [nvarchar](384) NULL,
	[UPSELLPROPRENTALSFEATURED] [nvarchar](384) NULL,
	[UPSELLLISTRENTALSLISTING] [nvarchar](384) NULL,
	[UPSELLLISTFLOORPLANUPGRADE] [nvarchar](384) NULL,
	[UPSELLPROPCOMMUNITYVIDEO] [nvarchar](384) NULL,
	[UPSELLPROPFEATCOMMGOLD] [nvarchar](384) NULL,
	[UPSELLPROPFEATCOMMSILVER] [nvarchar](384) NULL,
	[UPSELLLISTPAYPERLEAD] [nvarchar](384) NULL,
	[UPSELLLISTRENTALSSPOTLIGHTAD] [nvarchar](384) NULL,
	[UPSELLLISTSPOTLIGHT] [nvarchar](384) NULL,
	[UPSELLLIST30SECONDVIDEO] [nvarchar](384) NULL,
	[UPSELLLIST60SECONDVIDEO] [nvarchar](384) NULL,
	[UPSELLLISTPAYPERLEASE] [nvarchar](384) NULL,
	[UPSELLLISTDIAMONDCITY] [nvarchar](384) NULL,
	[UPSELLLISTDIAMONDMETRO] [nvarchar](384) NULL,
	[UPSELLLISTDIAMONDMAX] [nvarchar](384) NULL,
	[UPSELLLISTRENTALSSTANDARD] [nvarchar](384) NULL,
	[UPSELLLISTCOMMUNITYCAROUSEL] [nvarchar](384) NULL,
	[UPSELLLISTRENTALSCAROUSEL] [nvarchar](384) NULL,
	[UPSELLLISTRENTALSSTANDARDPLUS] [nvarchar](384) NULL,
	[UPSELLLISTMOBILESPOTLIGHT] [nvarchar](384) NULL,
	[UPSELLPROPMOBILEDEAL] [nvarchar](384) NULL,
	[UPSELLPROPDYNAMICLEADFORM] [nvarchar](384) NULL,
	[UPSELLLISTINCOMERESTRICTED] [nvarchar](384) NULL,
	[UPSELLLISTPETFRIENDLY] [nvarchar](384) NULL,
	[UPSELLLISTLUXURYCOMMUNITY] [nvarchar](384) NULL,
	[UPSELLPROPREPMON] [nvarchar](384) NULL,
	[UPSELLPROPSOCIALMEDIAMAN] [nvarchar](384) NULL,
	[UPSELLLISTMOBILEDIAMOND] [nvarchar](384) NULL,
	[UPSELLLISTPAYPERLEASEALM] [nvarchar](384) NULL,
	[ISSEM] [nvarchar](384) NULL,
	[ISOVERTHRESHOLD] [nvarchar](384) NULL,
	[ISRENTALPROP] [nvarchar](384) NULL,
	[CALLTRACKINGINBOOK] [nvarchar](384) NULL,
	[COUPONACTIVE] [nvarchar](384) NULL,
	[COUPONSTARTDATE] [datetime2](7) NULL,
	[COUPONEXPIRATIONDATE] [datetime2](7) NULL,
	[COUPONTEXT] [nvarchar](600) NULL,
	[MOBILECOUPONACTIVE] [nvarchar](384) NULL,
	[MOBILECOUPONSTARTDATE] [datetime2](7) NULL,
	[MOBILECOUPONEXPIRATIONDATE] [datetime2](7) NULL,
	[MOBILECOUPONTEXT] [nvarchar](500) NULL,
	[ISSMALLPROPERTY] [nvarchar](384) NULL,
	[VERIZONFIOS] [nvarchar](384) NULL,
	[ATTUVERSE] [nvarchar](384) NULL,
	[DIRECTV] [nvarchar](384) NULL,
	[BRIGHTHOUSE] [nvarchar](384) NULL,
	[CHARTER] [nvarchar](384) NULL,
	[XFINITYSP] [nvarchar](384) NULL,
	[XFINITYDP] [nvarchar](384) NULL,
	[XFINITYTP] [nvarchar](384) NULL,
	[TIMEWARNER] [nvarchar](384) NULL,
	[RANKING] [nvarchar](1) NULL,
	[NUMERICRANK] [nvarchar](384) NULL,
	[WEBTOLLFREE] [nvarchar](4000) NULL,
	[WEBTARGET] [nvarchar](4000) NULL,
	[RENTALSTOLLFREE] [nvarchar](4000) NULL,
	[RENTALSTARGET] [nvarchar](4000) NULL,
	[ASGTOLLFREE] [nvarchar](4000) NULL,
	[ASGTARGET] [nvarchar](4000) NULL,
	[AGCTOLLFREE] [nvarchar](4000) NULL,
	[AGCTARGET] [nvarchar](4000) NULL,
	[RENTMOBILETOLLFREE] [nvarchar](10) NULL,
	[RENTMOBILETARGET] [nvarchar](4000) NULL,
	[RENTINTERNETTOLLFREE] [nvarchar](10) NULL,
	[RENTINTERNETTARGET] [nvarchar](4000) NULL,
	[CONTACTPHONE] [nvarchar](4000) NULL,
	[LOCALTESTNUMBER] [nvarchar](10) NULL,
	[LEADFAX] [nvarchar](4000) NULL,
	[LEADEMAIL] [nvarchar](4000) NULL,
	[PROPERTYURL] [nvarchar](4000) NULL,
	[AGSITESURL] [nvarchar](4000) NULL,
	[PHONELEADRECAPEMAIL] [nvarchar](4000) NULL,
	[LEADEMAILWITHTYPE] [nvarchar](4000) NULL,
	[RENTLEADFAX] [nvarchar](4000) NULL,
	[RENTLEADEMAIL] [nvarchar](4000) NULL,
	[RENTLEADEMAILWITHTYPE] [nvarchar](4000) NULL,
	[VANITYURL] [nvarchar](255) NULL,
	[PLACEMENTTIER] [nvarchar](384) NULL,
	[RENTPLACEMENTTIER] [nvarchar](384) NULL,
	[PRINTPRODUCTPOINTS] [nvarchar](384) NULL,
	[INTERNETPRODUCTPOINTS] [nvarchar](384) NULL,
	[LEGACYLOYALTYPOINTS] [nvarchar](384) NULL,
	[CONTRACTLOYALTYPOINTS] [nvarchar](384) NULL,
	[MOBILEPOINTS] [nvarchar](384) NULL,
	[LASTUPDATEYMDID] [nvarchar](8) NULL,
	[METRONAME] [nvarchar](2) NULL,
	[REGIONNAME] [nvarchar](50) NULL,
	[SECTIONNAME] [nvarchar](50) NULL,
	[GEOLAT] [numeric](10, 4) NULL,
	[GEOLONG] [numeric](10, 4) NULL,
	[WHISPER] [nchar](1) NULL,
	[LOWPRICE] [nvarchar](384) NULL,
	[HIGHPRICE] [nvarchar](384) NULL,
	[LINKEDFLOORPLAN] [nvarchar](384) NULL,
	[LINKEDHDFLOORPLAN] [nvarchar](384) NULL,
	[LINKEDLOWRESFLOORPLAN] [nvarchar](384) NULL,
	[LINKED3DFLOORPLAN] [nvarchar](384) NULL,
	[LINKEDROOMPLANNER] [nvarchar](384) NULL,
	[RPLRANK] [nvarchar](384) NULL,
	[UPSELLRENTLISTING] [nvarchar](384) NULL,
	[UPSELLRENTREWARDCARD] [nvarchar](384) NULL,
	[UPSELLRENTFEATUREDPLACEMENT] [nvarchar](384) NULL,
	[UPSELLRENTPTE] [nvarchar](384) NULL,
	[UPSELLRENTVIPPLACEMENT] [nvarchar](384) NULL,
	[UPSELLRENTNOVACANCY] [nvarchar](384) NULL,
	[UPSELLRENTSPOTLIGHT] [nvarchar](384) NULL,
	[UPSELLLISTEZPAY] [nvarchar](384) NULL,
	[UPSELLLISTSPONSOREDAPARTMENT] [nvarchar](384) NULL,
	[UPSELLMGMTCOPEELAD] [nvarchar](384) NULL,
	[UPSELLLISTHDPANOTOURS] [nvarchar](384) NULL,
	[UPSELLLISTHDVIDEO] [nvarchar](384) NULL,
	[UPSELLLISTHDPHOTO] [nvarchar](384) NULL,
	[UPSELLLIST3DFLOORPLAN] [nvarchar](384) NULL,
	[ACTIVEHDFLOORPLANS] [nvarchar](384) NULL,
	[ACTIVELOWRESFLOORPLANS] [nvarchar](384) NULL,
	[ACTIVEHDPHOTOS] [nvarchar](384) NULL,
	[ACTIVELOWRESPHOTOS] [nvarchar](384) NULL,
	[COMMUNITYVIDEOURLFULFILLED] [nvarchar](384) NULL,
	[HDACTIVEFLOORPLANSFULFILLED] [nvarchar](384) NULL,
	[HDACTIVEPHOTOSFULFILLED] [nvarchar](384) NULL,
	[HDTOURURLFULFILLED] [nvarchar](384) NULL,
	[HDVIDEOURLFULFILLED] [nvarchar](384) NULL,
	[LINKEDFLOORPLANFULFILLED] [nvarchar](384) NULL,
	[LINKEDHDFLOORPLANFULFILLED] [nvarchar](384) NULL,
	[LINKEDLOWRESFLOORPLANFULFILLED] [nvarchar](384) NULL,
	[LINKED3DFLOORPLANFULFILLED] [nvarchar](384) NULL,
	[LINKEDROOMPLANNERFULFILLED] [nvarchar](384) NULL,
	[LISTINGDESCRIPTIONLENGTH] [nvarchar](384) NULL,
	[SHOWOFFICEHOURS] [nvarchar](384) NULL,
	[VIRTUALTOURFULFILLED] [nvarchar](384) NULL,
	[UPSELLRENTMETROFL] [nvarchar](384) NULL,
	[UPSELLRENTSUBSCRIPTIONMODEL] [nvarchar](384) NULL,
	[UPSELLLISTAGSITES] [nvarchar](384) NULL,
	[UPSELLMEDIACENTER] [nvarchar](384) NULL,
	[MOBILEDEALFULFILLED] [nvarchar](384) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[wwwapartmentguidecom_google_serp_top_20]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[wwwapartmentguidecom_google_serp_top_20](
	[Keyword] [nvarchar](100) NULL,
	[Market] [nvarchar](10) NULL,
	[Location] [nvarchar](50) NULL,
	[Device] [nvarchar](15) NULL,
	[Global Monthly Search Volume] [nvarchar](50) NULL,
	[Regional Monthly Search Volume] [nvarchar](50) NULL,
	[Rank] [nvarchar](50) NULL,
	[Result Type for prior day] [nvarchar](50) NULL,
	[Protocol for prior day] [nvarchar](50) NULL,
	[Ranking URL on prior day] [nvarchar](50) NULL,
	[Result Type] [nvarchar](50) NULL,
	[Protocol] [nvarchar](50) NULL,
	[Ranking URL] [nvarchar](50) NULL,
	[Tags] [nvarchar](50) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[zutronExternalSite]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[zutronExternalSite](
	[UZID] [varchar](100) NULL,
	[YMDID] [int] NOT NULL,
	[ExternalSite] [varchar](7000) NULL,
	[EventDate] [datetime] NULL,
	[UPsellAGSites] [int] NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[ZutronRentPath]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[ZutronRentPath](
	[UZID] [varchar](100) NULL,
	[YMDID] [int] NOT NULL,
	[EventDate] [datetime] NULL,
	[Profilekey] [int] NULL,
	[Screen_Type] [varchar](50) NULL,
	[TotalPageViews] [int] NULL,
	[PDPPageViews] [int] NULL,
	[SRPPageViews] [int] NULL,
	[PhoneLeadCount] [int] NULL,
	[EmailLeadCount] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[zutronRentPathEvent]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[zutronRentPathEvent](
	[Uzid] [varchar](100) NOT NULL,
	[ymdid] [int] NULL,
	[parseid] [bigint] NULL,
	[profilekey] [int] NOT NULL,
	[Action] [varchar](100) NULL,
	[page] [varchar](200) NULL,
	[seq] [varchar](30) NULL,
	[listingid] [varchar](20) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[ZutronRentPathUzidEvents]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[ZutronRentPathUzidEvents](
	[YMDID] [int] NULL,
	[UZID] [varchar](100) NULL,
	[ProfileKey] [int] NULL,
	[ScreenType] [varchar](50) NULL,
	[EventDate] [datetime] NULL,
	[TotalPageViews] [int] NULL,
	[PDPPageViews] [int] NULL,
	[SRPPageViews] [int] NULL,
	[PhoneLeadCount] [int] NULL,
	[EmailLeadCount] [int] NULL
) ON [PRIMARY]

GO
/****** Object:  Table [Staging].[ZutronSitesVisited]    Script Date: 9/5/2017 7:20:05 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [Staging].[ZutronSitesVisited](
	[YMDID] [int] NOT NULL,
	[UZID] [varchar](100) NULL,
	[WebsiteDomain] [varchar](7000) NULL,
	[WebsitePath] [varchar](7000) NULL,
	[EventDate] [datetime] NULL
) ON [PRIMARY]

GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_FloorplanAvailabilityVsClicked_MSACode_YearMonth]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_FloorplanAvailabilityVsClicked_MSACode_YearMonth] ON [DataProduct].[FloorplanAvailabilityVsClicked]
(
	[MSACode] ASC,
	[YearMonth] ASC
)
INCLUDE ( 	[Available_Studio_Floorplan_Pct],
	[Available_1_Bedroom_Floorplan_Pct],
	[Available_2_Bedrooms_Floorplan_Pct],
	[Available_3_Bedrooms_Floorplan_Pct],
	[Available_4_Or_More_Bedrooms_Floorplan_Pct],
	[Clicked_Studio_Pct],
	[Clicked_1_Bedroom_Pct],
	[Clicked_2_Bedrooms_Pct],
	[Clicked_3_Bedrooms_Pct],
	[Clicked_4_Or_More_Bedrooms_Pct]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_FloorplanAvailabilityVsClicked_YearMonth_MSACode]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idx_FloorplanAvailabilityVsClicked_YearMonth_MSACode] ON [DataProduct].[FloorplanAvailabilityVsClicked]
(
	[YearMonth] ASC,
	[MSACode] ASC
)
INCLUDE ( 	[Available_Studio_Floorplan_Pct],
	[Available_1_Bedroom_Floorplan_Pct],
	[Available_2_Bedrooms_Floorplan_Pct],
	[Available_3_Bedrooms_Floorplan_Pct],
	[Available_4_Or_More_Bedrooms_Floorplan_Pct],
	[Clicked_Studio_Pct],
	[Clicked_1_Bedroom_Pct],
	[Clicked_2_Bedrooms_Pct],
	[Clicked_3_Bedrooms_Pct],
	[Clicked_4_Or_More_Bedrooms_Pct]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_MarketSearches_MSACode_YearMonth]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_MarketSearches_MSACode_YearMonth] ON [DataProduct].[MarketSearches]
(
	[MSACode] ASC,
	[YearMonth] ASC
)
INCLUDE ( 	[No_Search_Profile],
	[Inside_Market_Search],
	[Outside_of_100_Miles]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_MarketSearches_YearMonth_MSACode]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idx_MarketSearches_YearMonth_MSACode] ON [DataProduct].[MarketSearches]
(
	[YearMonth] ASC,
	[MSACode] ASC
)
INCLUDE ( 	[No_Search_Profile],
	[Inside_Market_Search],
	[Outside_of_100_Miles]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [NI_DashboardSubscriptions_on_PropertyID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [NI_DashboardSubscriptions_on_PropertyID] ON [dbo].[DashboardSubscriptions]
(
	[PropertyID] ASC
)
INCLUDE ( 	[Frequency]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [NI_DashboardSubscriptions_on_UserGUID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [NI_DashboardSubscriptions_on_UserGUID] ON [dbo].[DashboardSubscriptions]
(
	[UserGUID] ASC
)
INCLUDE ( 	[PropertyID]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [NI_DashboardSubscriptionsAudit_on_SubscriptionID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [NI_DashboardSubscriptionsAudit_on_SubscriptionID] ON [dbo].[DashboardSubscriptionsAudit]
(
	[SubscriptionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx#MeasureType]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx#MeasureType] ON [dbo].[ParsedData]
(
	[MeasureType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx#ParseID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx#ParseID] ON [dbo].[ParsedData]
(
	[ParseID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [NI_tableau_conversion_ON_ymdid]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [NI_tableau_conversion_ON_ymdid] ON [dbo].[tableau_conversion]
(
	[ymdid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [NI_tableau_email_conversion_ON_ymdid]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [NI_tableau_email_conversion_ON_ymdid] ON [dbo].[tableau_email_conversion]
(
	[ymdid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [UIDX_AllColumnsUnique]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE UNIQUE NONCLUSTERED INDEX [UIDX_AllColumnsUnique] ON [Dimension].[ClickEventsMap]
(
	[page] ASC,
	[page_sub] ASC,
	[action] ASC,
	[position] ASC,
	[selection] ASC,
	[page_category] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_DimListings_CBSACode]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_DimListings_CBSACode] ON [Dimension].[Listings]
(
	[CBSACode] ASC
)
INCLUDE ( 	[ListingID]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_DimListings_PropIDAG_incl_ListingID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_DimListings_PropIDAG_incl_ListingID] ON [Dimension].[Listings]
(
	[PropertyIDAG] ASC
)
INCLUDE ( 	[ListingID]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_DimListings_PropIDRent_incl_ListingID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_DimListings_PropIDRent_incl_ListingID] ON [Dimension].[Listings]
(
	[PropertyIDRent] ASC
)
INCLUDE ( 	[ListingID]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_DimListings_SFDCCommunityID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_DimListings_SFDCCommunityID] ON [Dimension].[Listings]
(
	[SFDCCommunityID] ASC
)
INCLUDE ( 	[ListingID]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_PropertyZipCode]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_PropertyZipCode] ON [Dimension].[Listings]
(
	[PropertyZipCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_DimListings_CBSACode]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_DimListings_CBSACode] ON [Dimension].[Listings_old]
(
	[CBSACode] ASC
)
INCLUDE ( 	[ListingID]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_DimListings_PropIDAG_incl_ListingID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_DimListings_PropIDAG_incl_ListingID] ON [Dimension].[Listings_old]
(
	[PropertyIDAG] ASC
)
INCLUDE ( 	[ListingID]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_DimListings_PropIDRent_incl_ListingID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_DimListings_PropIDRent_incl_ListingID] ON [Dimension].[Listings_old]
(
	[PropertyIDRent] ASC
)
INCLUDE ( 	[ListingID]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_DimListings_SFDCCommunityID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_DimListings_SFDCCommunityID] ON [Dimension].[Listings_old]
(
	[SFDCCommunityID] ASC
)
INCLUDE ( 	[ListingID]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_PropertyZipCode]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_PropertyZipCode] ON [Dimension].[Listings_old]
(
	[PropertyZipCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_DimListings_CBSACode]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_DimListings_CBSACode] ON [Dimension].[ListingsFromAPS_unused]
(
	[CBSACode] ASC
)
INCLUDE ( 	[ListingID]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_DimListings_PropIDAG_incl_ListingID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_DimListings_PropIDAG_incl_ListingID] ON [Dimension].[ListingsFromAPS_unused]
(
	[PropertyIDAG] ASC
)
INCLUDE ( 	[ListingID]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_DimListings_PropIDRent_incl_ListingID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_DimListings_PropIDRent_incl_ListingID] ON [Dimension].[ListingsFromAPS_unused]
(
	[PropertyIDRent] ASC
)
INCLUDE ( 	[ListingID]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_DimListings_SFDCCommunityID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_DimListings_SFDCCommunityID] ON [Dimension].[ListingsFromAPS_unused]
(
	[SFDCCommunityID] ASC
)
INCLUDE ( 	[ListingID]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_PropertyZipCode]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_PropertyZipCode] ON [Dimension].[ListingsFromAPS_unused]
(
	[PropertyZipCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [NI_Website_Domains_Visited_on_uzid]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [NI_Website_Domains_Visited_on_uzid] ON [Dimension].[Website_Domains_Visited]
(
	[uzid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [NI_Website_Login_Accounts_on_uuid]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [NI_Website_Login_Accounts_on_uuid] ON [Dimension].[Website_Login_Accounts]
(
	[uuid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IDX_CityStateListings_YMDID_ListingID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [IDX_CityStateListings_YMDID_ListingID] ON [Fact].[CityStateListings]
(
	[YMDID] ASC,
	[ListingID] ASC
)
INCLUDE ( 	[City],
	[State],
	[Sources],
	[Page],
	[Position]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_DisplayListingID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_DisplayListingID] ON [Fact].[EmailsLovelySyndication]
(
	[DisplayListingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [abode_efid_ymdid]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [abode_efid_ymdid] ON [Mart].[adobe_efid]
(
	[YMDID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_Email]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_Email] ON [Mart].[EmailLeads]
(
	[Email] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_ListingID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_ListingID] ON [Mart].[EmailLeads]
(
	[ListingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [NIX_MARTEXPORTVLISTINGS_YMDID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [NIX_MARTEXPORTVLISTINGS_YMDID] ON [Mart].[exportVListings]
(
	[YMDID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ARITHABORT ON
SET CONCAT_NULL_YIELDS_NULL ON
SET QUOTED_IDENTIFIER ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
SET NUMERIC_ROUNDABORT OFF

GO
/****** Object:  Index [idx_MartListings_ListingID_YearMonth]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_MartListings_ListingID_YearMonth] ON [Mart].[Listings]
(
	[ListingID] ASC,
	[YearMonth] ASC
)
INCLUDE ( 	[PropertyIDAG],
	[StatusIDAG],
	[StatusIDRent],
	[ViewsListingPageWeb],
	[ViewsListingPageMobile],
	[AllLeads]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_MartListings_PropertyIDAG_YMDID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_MartListings_PropertyIDAG_YMDID] ON [Mart].[Listings]
(
	[PropertyIDAG] ASC,
	[YMDID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ARITHABORT ON
SET CONCAT_NULL_YIELDS_NULL ON
SET QUOTED_IDENTIFIER ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
SET NUMERIC_ROUNDABORT OFF

GO
/****** Object:  Index [idx_MartListings_ListingID_YearMonth]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_MartListings_ListingID_YearMonth] ON [Mart].[Listings_OLD_20170208]
(
	[ListingID] ASC,
	[YearMonth] ASC
)
INCLUDE ( 	[PropertyIDAG],
	[StatusIDAG],
	[StatusIDRent],
	[ViewsListingPageWeb],
	[ViewsListingPageMobile],
	[AllLeads]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_MartListings_PropertyIDAG_YMDID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_MartListings_PropertyIDAG_YMDID] ON [Mart].[Listings_OLD_20170208]
(
	[PropertyIDAG] ASC,
	[YMDID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ARITHABORT ON
SET CONCAT_NULL_YIELDS_NULL ON
SET QUOTED_IDENTIFIER ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
SET NUMERIC_ROUNDABORT OFF

GO
/****** Object:  Index [idx_MartListings_ListingID_YearMonth2]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_MartListings_ListingID_YearMonth2] ON [Mart].[Listings_PreProdChange20170207]
(
	[ListingID] ASC,
	[YearMonth] ASC
)
INCLUDE ( 	[PropertyIDAG],
	[StatusIDAG],
	[StatusIDRent],
	[ViewsListingPageWeb],
	[ViewsListingPageMobile],
	[AllLeads]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_MartListings_PropertyIDAG_YMDID2]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_MartListings_PropertyIDAG_YMDID2] ON [Mart].[Listings_PreProdChange20170207]
(
	[PropertyIDAG] ASC,
	[YMDID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [NI_ListingsCombinedAGRent_on_AG_ListingStatusID_R_ListingStatusID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [NI_ListingsCombinedAGRent_on_AG_ListingStatusID_R_ListingStatusID] ON [Mart].[ListingsCombinedAGRent]
(
	[AG_ListingStatusID] ASC,
	[R_ListingStatusID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [NI_ListingsCombinedAGRent_on_ListingID_YearMonth]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [NI_ListingsCombinedAGRent_on_ListingID_YearMonth] ON [Mart].[ListingsCombinedAGRent]
(
	[ListingID] ASC,
	[YearMonth] ASC
)
INCLUDE ( 	[AG_ListingStatusID],
	[R_ListingStatusID],
	[AG_ViewsListingPage],
	[AG_AllLeads],
	[R_AllLeads]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [NI_ListingsCombinedAGRent_on_YearMonth_AG_PropertyID_R_PropertyID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [NI_ListingsCombinedAGRent_on_YearMonth_AG_PropertyID_R_PropertyID] ON [Mart].[ListingsCombinedAGRent]
(
	[YearMonth] ASC,
	[AG_PropertyID] ASC,
	[R_PropertyID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_MartListings_DataSource_YMDID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_MartListings_DataSource_YMDID] ON [Mart].[LocatorListings]
(
	[DataSource] ASC,
	[YMDID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ARITHABORT ON
SET CONCAT_NULL_YIELDS_NULL ON
SET QUOTED_IDENTIFIER ON
SET ANSI_NULLS ON
SET ANSI_PADDING ON
SET ANSI_WARNINGS ON
SET NUMERIC_ROUNDABORT OFF

GO
/****** Object:  Index [idx_MartListings_ListingID_YearMonth_Loc]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_MartListings_ListingID_YearMonth_Loc] ON [Mart].[LocatorListings]
(
	[ListingID] ASC,
	[YearMonth] ASC
)
INCLUDE ( 	[RentListingID],
	[StatusIDAG],
	[StatusIDRent],
	[ViewsListingPageWeb],
	[ViewsListingPageMobile],
	[AllLeads]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_MartListings_RentListingID_YMDID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_MartListings_RentListingID_YMDID] ON [Mart].[LocatorListings]
(
	[RentListingID] ASC,
	[YMDID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_CallerPhoneNumber]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_CallerPhoneNumber] ON [Mart].[PhoneLeads]
(
	[CallerPhoneNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_CallID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_CallID] ON [Mart].[PhoneLeads]
(
	[CallId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_CallLoadYMDID_hour]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_CallLoadYMDID_hour] ON [Mart].[PhoneLeads]
(
	[CallLoadYMDID] ASC,
	[CallLoadHour] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_listingid]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_listingid] ON [Mart].[PhoneLeads]
(
	[ListingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_listingid]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_listingid] ON [Mart].[SmallPropertyListings]
(
	[ListingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_listingid]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_listingid] ON [Mart].[SmallPropertyListings_OLD_20160516]
(
	[ListingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_screentype]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_screentype] ON [Mart].[zutronRentPath]
(
	[Screen_Type] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_uzid_zurtonRentpath]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_uzid_zurtonRentpath] ON [Mart].[zutronRentPath]
(
	[UZID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_Ymdid_ZutronRentPath]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_Ymdid_ZutronRentPath] ON [Mart].[zutronRentPath]
(
	[YMDID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_action]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_action] ON [Mart].[zutronRentPathEvent]
(
	[Action] ASC,
	[SEQ] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_listingID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_listingID] ON [Mart].[zutronRentPathEvent]
(
	[ListingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_uzid_zutronRentPathEvent]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_uzid_zutronRentPathEvent] ON [Mart].[zutronRentPathEvent]
(
	[UZID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_ymdid_zutronRentPathEvent]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_ymdid_zutronRentPathEvent] ON [Mart].[zutronRentPathEvent]
(
	[YMDID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [NI_DashboardAdvancedSubscriptionMainData_4419111_on_AGPropertyID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [NI_DashboardAdvancedSubscriptionMainData_4419111_on_AGPropertyID] ON [Staging].[DashboardAdvancedSubscriptionMainData]
(
	[AGPropertyID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [NI_DashboardAdvancedSubscriptionMainData_4419111_on_RentPropertyID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [NI_DashboardAdvancedSubscriptionMainData_4419111_on_RentPropertyID] ON [Staging].[DashboardAdvancedSubscriptionMainData]
(
	[RentPropertyID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_Email_LID_Profile]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_Email_LID_Profile] ON [Staging].[EmailLeads]
(
	[listingid] ASC,
	[profileid] ASC
)
INCLUDE ( 	[EmailLeads]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_Email_LID_Profile]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_Email_LID_Profile] ON [Staging].[EmailLeadsRecover]
(
	[listingid] ASC,
	[profileid] ASC
)
INCLUDE ( 	[EmailLeads]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_Events_LID_Profile]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_Events_LID_Profile] ON [Staging].[Events]
(
	[listingid] ASC,
	[profileid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_Events_LID_Profile]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_Events_LID_Profile] ON [Staging].[EventsRecover]
(
	[listingid] ASC,
	[profileid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_Impr_LID_Profile]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_Impr_LID_Profile] ON [Staging].[Impressions]
(
	[listingid] ASC,
	[profileid] ASC
)
INCLUDE ( 	[SRPListingImpr]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_Impr_LID_Profile]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_Impr_LID_Profile] ON [Staging].[ImpressionsRecover]
(
	[listingid] ASC,
	[profileid] ASC
)
INCLUDE ( 	[SRPListingImpr]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_LA_LID_Profile]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_LA_LID_Profile] ON [Staging].[listingArray]
(
	[Listingid] ASC,
	[profileid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_LA_LID_Profile]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_LA_LID_Profile] ON [Staging].[listingArrayRecover]
(
	[Listingid] ASC,
	[profileid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_Pageviews_LID_Profile]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_Pageviews_LID_Profile] ON [Staging].[PageViews]
(
	[listingid] ASC,
	[profileid] ASC
)
INCLUDE ( 	[WebVisit],
	[MobileVisit],
	[WebPageview],
	[MobilePageView]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_Pageviews_LID_Profile]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_Pageviews_LID_Profile] ON [Staging].[PageViewsRecover]
(
	[listingid] ASC,
	[profileid] ASC
)
INCLUDE ( 	[WebVisit],
	[MobileVisit],
	[WebPageview],
	[MobilePageView]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_profileid]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_profileid] ON [Staging].[parseddatabackmart]
(
	[ProfileID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_Phone_LID_Profile]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_Phone_LID_Profile] ON [Staging].[PhoneLeads]
(
	[listingid] ASC,
	[profileid] ASC
)
INCLUDE ( 	[PhoneLeads]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idx_Phone_LID_Profile]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_Phone_LID_Profile] ON [Staging].[PhoneLeadsRecover]
(
	[listingid] ASC,
	[profileid] ASC
)
INCLUDE ( 	[PhoneLeads]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_StagingSmallPropertyListings_ListingID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_StagingSmallPropertyListings_ListingID] ON [Staging].[SmallPropertyListings]
(
	[ListingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_UnitStyleClicks_YearMonth]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_UnitStyleClicks_YearMonth] ON [Staging].[UnitStyleClicks]
(
	[YearMonth] ASC
)
INCLUDE ( 	[Listingid],
	[unitstyle],
	[ClickCount]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idx_UnitStyleClicks_YMDID]    Script Date: 9/5/2017 7:20:05 AM ******/
CREATE NONCLUSTERED INDEX [idx_UnitStyleClicks_YMDID] ON [Staging].[UnitStyleClicks]
(
	[YMDID] ASC
)
INCLUDE ( 	[Listingid],
	[unitstyle],
	[ClickCount]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE [dbo].[AdvancedSubscriptionDataColumns] ADD  DEFAULT ((0)) FOR [IsPeriodAccum]
GO
ALTER TABLE [dbo].[DashboardBasicSubOneTimeEmail] ADD  CONSTRAINT [DF_DashboardBasicSubOneTimeEmail_PropertyID]  DEFAULT ((0)) FOR [PropertyID]
GO
ALTER TABLE [dbo].[DashboardBasicSubOneTimeEmail] ADD  CONSTRAINT [DF_DashboardBasicSubOneTimeEmail_LCHost]  DEFAULT (host_name()) FOR [LCHost]
GO
ALTER TABLE [dbo].[DashboardBasicSubOneTimeEmail] ADD  CONSTRAINT [DF_DashboardBasicSubOneTimeEmail_LCUser]  DEFAULT (user_name()) FOR [LCUser]
GO
ALTER TABLE [dbo].[DashboardBasicSubOneTimeEmail] ADD  CONSTRAINT [DF_DashboardBasicSubOneTimeEmail_LCDate]  DEFAULT (getdate()) FOR [LCDate]
GO
ALTER TABLE [dbo].[DashboardBasicSubOneTimeEmailAudit] ADD  CONSTRAINT [DF_DashboardBasicSubOneTimeEmailAudit_PropertyID]  DEFAULT ((0)) FOR [PropertyID]
GO
ALTER TABLE [dbo].[DashboardDailyAdvancedReportSubscriptionDetails] ADD  DEFAULT (NULL) FOR [AdvancedMethod]
GO
ALTER TABLE [dbo].[DashboardDailyAdvancedReportSubscriptionDetails] ADD  DEFAULT (NULL) FOR [EmailAddress]
GO
ALTER TABLE [dbo].[DashboardDailyAdvancedReportSubscriptionDetails] ADD  DEFAULT (NULL) FOR [PropertyName]
GO
ALTER TABLE [dbo].[DashboardDailyAdvancedReportSubscriptionDetails] ADD  DEFAULT (NULL) FOR [Frequency]
GO
ALTER TABLE [dbo].[DashboardDailySubscriptionDetails] ADD  DEFAULT (NULL) FOR [AdvancedMethod]
GO
ALTER TABLE [dbo].[DashboardDailySubscriptionDetails] ADD  DEFAULT (NULL) FOR [EmailAddress]
GO
ALTER TABLE [dbo].[DashboardDailySubscriptionDetails] ADD  DEFAULT (NULL) FOR [PropertyName]
GO
ALTER TABLE [dbo].[DashboardDailySubscriptionDetails] ADD  DEFAULT (NULL) FOR [Frequency]
GO
ALTER TABLE [dbo].[DashboardSubscriptions] ADD  CONSTRAINT [DF__Dashboard__Prope__1C873BEC]  DEFAULT ((0)) FOR [PropertyID]
GO
ALTER TABLE [dbo].[DashboardSubscriptions] ADD  CONSTRAINT [DF__Dashboard__Repor__1D7B6025]  DEFAULT ((1)) FOR [Report]
GO
ALTER TABLE [dbo].[DashboardSubscriptions] ADD  CONSTRAINT [DF_DashboardSubscriptions_AdvancedReportType]  DEFAULT ((1)) FOR [AdvancedReportType]
GO
ALTER TABLE [dbo].[DashboardSubscriptions] ADD  CONSTRAINT [DF_DashboardSubscriptions_AdvancedMethod]  DEFAULT ((1)) FOR [AdvancedMethod]
GO
ALTER TABLE [dbo].[DashboardSubscriptions] ADD  CONSTRAINT [DF__Dashboard__Frequ__1E6F845E]  DEFAULT ((1)) FOR [Frequency]
GO
ALTER TABLE [dbo].[DashboardSubscriptions] ADD  CONSTRAINT [DF__Dashboard__LCHos__1F63A897]  DEFAULT (host_name()) FOR [LCHost]
GO
ALTER TABLE [dbo].[DashboardSubscriptions] ADD  CONSTRAINT [DF__Dashboard__LCUse__2057CCD0]  DEFAULT (user_name()) FOR [LCUser]
GO
ALTER TABLE [dbo].[DashboardSubscriptions] ADD  CONSTRAINT [DF__Dashboard__LCDat__214BF109]  DEFAULT (getdate()) FOR [LCDate]
GO
ALTER TABLE [dbo].[DashboardSubscriptionsAudit] ADD  CONSTRAINT [DF_DashboardSubscriptionsAudit_AdvancedReportType]  DEFAULT ((1)) FOR [AdvancedReportType]
GO
ALTER TABLE [dbo].[ParsedData] ADD  DEFAULT ((0)) FOR [ProfileID]
GO
ALTER TABLE [dbo].[ParsedData] ADD  DEFAULT ((0)) FOR [SubProfileID]
GO
ALTER TABLE [dbo].[ParsedData_20160726] ADD  DEFAULT ((0)) FOR [ProfileID]
GO
ALTER TABLE [dbo].[ParsedData_20160726] ADD  DEFAULT ((0)) FOR [SubProfileID]
GO
ALTER TABLE [Dimension].[ClickEventsMap] ADD  CONSTRAINT [DF_ClickEventsMap_ismarted1]  DEFAULT ((0)) FOR [ismarted]
GO
ALTER TABLE [Dimension].[Listings_old] ADD  CONSTRAINT [DF_Listings_UpsellFuture2]  DEFAULT ((0)) FOR [UpsellFuture2]
GO
ALTER TABLE [Dimension].[Listings_old] ADD  CONSTRAINT [DF_Listings_UpsellFuture3]  DEFAULT ((0)) FOR [UpsellFuture3]
GO
ALTER TABLE [Dimension].[Listings_old] ADD  CONSTRAINT [DF_Listings_UpsellFuture4]  DEFAULT ((0)) FOR [UpsellFuture4]
GO
ALTER TABLE [Dimension].[Listings_old] ADD  CONSTRAINT [DF_Listings_UpsellFuture5]  DEFAULT ((0)) FOR [UpsellFuture5]
GO
ALTER TABLE [Dimension].[Listings_old] ADD  CONSTRAINT [DF_Listings_UpsellFuture6]  DEFAULT ((0)) FOR [UpsellFuture6]
GO
ALTER TABLE [Dimension].[Listings_old] ADD  CONSTRAINT [DF_Listings_UpsellFuture7]  DEFAULT ((0)) FOR [UpsellFuture7]
GO
ALTER TABLE [Dimension].[Listings_old] ADD  CONSTRAINT [DF_Listings_UpsellFuture8]  DEFAULT ((0)) FOR [UpsellFuture8]
GO
ALTER TABLE [Dimension].[Listings_old] ADD  CONSTRAINT [DF_Listings_UpsellFuture9]  DEFAULT ((0)) FOR [UpsellFuture9]
GO
ALTER TABLE [Dimension].[SmallPropertyListings] ADD  DEFAULT ('') FOR [PropertyCity]
GO
ALTER TABLE [Dimension].[SmallPropertyListings] ADD  DEFAULT ('') FOR [PropertyState]
GO
ALTER TABLE [Dimension].[SmallPropertyListings] ADD  DEFAULT ('') FOR [ZipCode]
GO
ALTER TABLE [Dimension].[SmallPropertyListings] ADD  DEFAULT ((0)) FOR [ShowPricing]
GO
ALTER TABLE [Dimension].[SmallPropertyListings] ADD  DEFAULT ((0)) FOR [LowPrice]
GO
ALTER TABLE [Dimension].[SmallPropertyListings] ADD  DEFAULT ((0)) FOR [HighPrice]
GO
ALTER TABLE [Dimension].[SmallPropertyListings] ADD  DEFAULT (getdate()) FOR [DateModified]
GO
ALTER TABLE [Fact].[ExactTarget_PTE] ADD  CONSTRAINT [DF_ExactTarget_PTE_DT_UpDate]  DEFAULT (getdate()) FOR [DT_Updated]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [YearMonth]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [StatusIDAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [StatusIDRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [IsSEM]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ShowPricing]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [CallRecordingOptOut]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [Charter]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [DIRECTV]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [HasCR3]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ShowOfficeHours]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [Upsell3DFloorplan]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellAGSites]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellHDPanoTour]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellHDPhoto]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellHDVideo]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellLinked3DFloorplan]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellLinkedFloorplan]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellLinkedFloorplanFulfilled]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellLinkedRoomPlanner]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellLinkedRoomPlannerFulfilled]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellListingRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellListingRentals]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellMediaCenter]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellMgmtPeelAd]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellMobileDeal]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellMobileDealFulfilled]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellMobileDiamond]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellMobileSpotlight]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellNoVacancyRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellPayPerLead]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellPayPerLease]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellPhotoUpgrade]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellPrecisionTargetedEmailRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellPremierListingRentals]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellPremiumUpgrade]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellRewardCardRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellSponsoredApartment]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellSpotlightAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellSpotlightRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellSpotlightRentals]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellStandardListingRentals]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellStandardPlusListingRentals]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellSubscriptionModelRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellVideoSpokesmodel]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellVIPPlacementRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellVirtualBrochure]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellVirtualTourFulfilled]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellPayPerLeaseALM]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellFuture2]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellFuture3]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellFuture4]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellFuture5]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellFuture6]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellFuture7]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellFuture8]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UpsellFuture9]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksCommunityVideoAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksDiamondMaxPhotoAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksDiamondMaxCheckAvailAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksFloorplanAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksFloorplanRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksHDFloorplanAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksHDFloorplanRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksPhotosAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksPhotosRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksHDPhotoAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksHDPhotoRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksHDVideoAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksHDVideoRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksHDPanoTourAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksHDPanoTourRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksMapAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksMapRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksWebURLAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksWebURLRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksMgtCoURLAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksMgtCoURLRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksMgtCoPeelAdAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksMgtCoPeelAdRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksReserveNowAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksReserveNowRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksFeaturedCommunityAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksFeaturedCommunityRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksFeatCommCheckAvailAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksFeatCommCheckAvailRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksSRPListingCheckAvailAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksSRPListingCheckAvailRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksCR3AG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksCR3Rent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksSpotlightRentSpecialsAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksSpotlightRentSpecialsRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksSpotlightReserveNowAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksFuture1]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksFuture2]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksFuture3]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksFuture4]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksFuture5]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksFuture6]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksFuture7]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksFuture8]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksFuture9]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksFuture10]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksFuture11]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ClicksFuture12]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [SRPListingImprAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [SRPListingImprRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [SRPUniqueVisitAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [SRPUniqueVisitRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UniqueVisitsAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UniqueVisitsRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UniqueVisitsMobileAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UniqueVisitsMobileRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [UniqueVisitsAGSites]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ViewsListingPageWebAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ViewsListingPageWebRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ViewsListingPageMobileAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ViewsListingPageMobileRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [ViewsListingPageAGSites]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [PhoneLeadsAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [PhoneLeadsRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [MissedCallsAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [MissedCallsRent]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [EmailLeadsAG]
GO
ALTER TABLE [Mart].[Listings_Legacy] ADD  DEFAULT ((0)) FOR [EmailLeadsRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [YearMonth]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [StatusIDAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [StatusIDRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [IsSEM]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ShowPricing]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [CallRecordingOptOut]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [Charter]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [DIRECTV]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [HasCR3]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ShowOfficeHours]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [Upsell3DFloorplan]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellAGSites]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellHDPanoTour]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellHDPhoto]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellHDVideo]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellLinked3DFloorplan]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellLinkedFloorplan]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellLinkedFloorplanFulfilled]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellLinkedRoomPlanner]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellLinkedRoomPlannerFulfilled]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellListingRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellListingRentals]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellMediaCenter]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellMgmtPeelAd]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellMobileDeal]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellMobileDealFulfilled]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellMobileDiamond]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellMobileSpotlight]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellNoVacancyRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellPayPerLead]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellPayPerLease]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellPhotoUpgrade]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellPrecisionTargetedEmailRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellPremierListingRentals]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellPremiumUpgrade]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellRewardCardRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellSponsoredApartment]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellSpotlightAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellSpotlightRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellSpotlightRentals]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellStandardListingRentals]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellStandardPlusListingRentals]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellSubscriptionModelRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellVideoSpokesmodel]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellVIPPlacementRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellVirtualBrochure]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellVirtualTourFulfilled]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellPayPerLeaseALM]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellFuture2]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellFuture3]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellFuture4]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellFuture5]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellFuture6]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellFuture7]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellFuture8]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UpsellFuture9]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksCommunityVideoAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksDiamondMaxPhotoAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksDiamondMaxCheckAvailAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksFloorplanAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksFloorplanRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksHDFloorplanAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksHDFloorplanRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksPhotosAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksPhotosRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksHDPhotoAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksHDPhotoRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksHDVideoAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksHDVideoRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksHDPanoTourAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksHDPanoTourRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksMapAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksMapRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksWebURLAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksWebURLRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksMgtCoURLAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksMgtCoURLRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksMgtCoPeelAdAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksMgtCoPeelAdRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksReserveNowAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksReserveNowRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksFeaturedCommunityAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksFeaturedCommunityRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksFeatCommCheckAvailAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksFeatCommCheckAvailRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksSRPListingCheckAvailAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksSRPListingCheckAvailRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksCR3AG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksCR3Rent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksSpotlightRentSpecialsAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksSpotlightRentSpecialsRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksSpotlightReserveNowAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksFuture1]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksFuture2]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksFuture3]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksFuture4]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksFuture5]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksFuture6]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksFuture7]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksFuture8]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksFuture9]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksFuture10]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksFuture11]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ClicksFuture12]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [SRPListingImprAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [SRPListingImprRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [SRPUniqueVisitAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [SRPUniqueVisitRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UniqueVisitsAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UniqueVisitsRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UniqueVisitsMobileAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UniqueVisitsMobileRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [UniqueVisitsAGSites]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ViewsListingPageWebAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ViewsListingPageWebRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ViewsListingPageMobileAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ViewsListingPageMobileRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [ViewsListingPageAGSites]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [PhoneLeadsAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [PhoneLeadsRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [MissedCallsAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [MissedCallsRent]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [EmailLeadsAG]
GO
ALTER TABLE [Mart].[Listings_PreProdChange20170207] ADD  DEFAULT ((0)) FOR [EmailLeadsRent]
GO
ALTER TABLE [Mart].[SmallPropertyListings] ADD  DEFAULT ((0)) FOR [ShowPricing]
GO
ALTER TABLE [Mart].[SmallPropertyListings] ADD  DEFAULT ((0)) FOR [LowPrice]
GO
ALTER TABLE [Mart].[SmallPropertyListings] ADD  DEFAULT ((0)) FOR [HighPrice]
GO
ALTER TABLE [Mart].[SmallPropertyListings_OLD_20160516] ADD  DEFAULT ((0)) FOR [ShowPricing]
GO
ALTER TABLE [Mart].[SmallPropertyListings_OLD_20160516] ADD  DEFAULT ((0)) FOR [LowPrice]
GO
ALTER TABLE [Mart].[SmallPropertyListings_OLD_20160516] ADD  DEFAULT ((0)) FOR [HighPrice]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksCommunityVideoAG]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksDiamondMaxPhotoAG]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksDiamondMaxCheckAvailAG]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksFloorplanAG]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksFloorplanRent]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksHDFloorplanAG]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksHDFloorplanRent]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksPhotosAG]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksPhotosRent]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksHDPhotoAG]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksHDPhotoRent]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksHDVideoAG]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksHDVideoRent]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksHDPanoTourAG]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksHDPanoTourRent]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksMapAG]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksMapRent]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksWebURLAG]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksWebURLRent]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksMgtCoURLAG]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksMgtCoURLRent]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksMgtCoPeelAdAG]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksMgtCoPeelAdRent]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksReserveNowAG]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksReserveNowRent]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksFeaturedCommunityAG]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksFeaturedCommunityRent]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksFeatCommCheckAvailAG]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksFeatCommCheckAvailRent]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksSRPListingCheckAvailAG]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksSRPListingCheckAvailRent]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksCR3AG]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksCR3Rent]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksSpotlightRentSpecialsAG]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksSpotlightRentSpecialsRent]
GO
ALTER TABLE [Staging].[ClickEvents] ADD  DEFAULT ((0)) FOR [ClicksSpotlightReserveNowAG]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksCommunityVideoAG]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksDiamondMaxPhotoAG]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksDiamondMaxCheckAvailAG]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksFloorplanAG]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksFloorplanRent]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksHDFloorplanAG]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksHDFloorplanRent]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksPhotosAG]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksPhotosRent]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksHDPhotoAG]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksHDPhotoRent]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksHDVideoAG]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksHDVideoRent]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksHDPanoTourAG]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksHDPanoTourRent]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksMapAG]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksMapRent]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksWebURLAG]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksWebURLRent]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksMgtCoURLAG]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksMgtCoURLRent]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksMgtCoPeelAdAG]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksMgtCoPeelAdRent]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksReserveNowAG]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksReserveNowRent]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksFeaturedCommunityAG]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksFeaturedCommunityRent]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksFeatCommCheckAvailAG]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksFeatCommCheckAvailRent]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksSRPListingCheckAvailAG]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksSRPListingCheckAvailRent]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksCR3AG]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksCR3Rent]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksSpotlightRentSpecialsAG]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksSpotlightRentSpecialsRent]
GO
ALTER TABLE [Staging].[ClickEvents2] ADD  DEFAULT ((0)) FOR [ClicksSpotlightReserveNowAG]
GO
ALTER TABLE [Staging].[ParsedData] ADD  DEFAULT ((0)) FOR [ProfileID]
GO
ALTER TABLE [Staging].[SmallPropertyListings] ADD  DEFAULT ((0)) FOR [ShowPricing]
GO
ALTER TABLE [Staging].[SmallPropertyListings] ADD  DEFAULT ((0)) FOR [LowPrice]
GO
ALTER TABLE [Staging].[SmallPropertyListings] ADD  DEFAULT ((0)) FOR [HighPrice]
GO
ALTER TABLE [Staging].[SmallPropertyListings] ADD  DEFAULT ('') FOR [PropertyCity]
GO
ALTER TABLE [Staging].[SmallPropertyListings] ADD  DEFAULT ('') FOR [PropertyState]
GO
ALTER TABLE [Staging].[SmallPropertyListings] ADD  DEFAULT ('') FOR [ZipCode]
GO
/****** Object:  StoredProcedure [DataProduct].[rpt_AmenityRefinementsCityLevel]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [DataProduct].[rpt_AmenityRefinementsCityLevel] (@Month DATE)

/*******************************************************************************************
* Name:	[DataProduct].[rpt_AmenityRefinementsCityLevel]
* ------------------------------------------------------------------------------------------
* Desc:	This code was taken from the ApartmentGuide.Reports.rpt_SearchWhatDetails sproc 
* which populates the detail portion of the AG.com Search Refinements report. It has been modified
* to calculate all city/state feature refinements, ranked by most pageviews.
* ------------------------------------------------------------------------------------------
* Test:	EXEC [DataProduct].[rpt_AmenityRefinementsCityLevel] '11/01/2015'
* SELECT * FROM RentPath.[DataProduct].[AmenityRefinementsCityLevel] WHERE YearMonth = 201511
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist:	01	12/16/2015		Colleen Rocks		No ticket; data product initial version
********************************************************************************************/
AS
BEGIN
    SET NOCOUNT ON;
/*test:
DECLARE @Month DATE = '12/01/2015'
*/

------------------------------
/*Remove previous values if this is a rerun*/
------------------------------
    DELETE  FROM RentPath.DataProduct.AmenityRefinementsCityLevel
    WHERE   YearMonth = LEFT(CAST(CONVERT(VARCHAR(8),@Month,112) AS INT),6);

------------------------------
/*Declare and set variables*/
------------------------------
    DECLARE @StartYMDID INT
       ,@EndYMDID INT;

    SET @StartYMDID = CAST(CONVERT(VARCHAR(8),@Month,112) AS INT);
    SET @EndYMDID = CAST(CONVERT(VARCHAR(8),EOMONTH(@Month),112) AS INT);

------------------------------
/*Get rank of click value search refinements
for the city/state*/
------------------------------
    INSERT  INTO RentPath.DataProduct.AmenityRefinementsCityLevel
            (YearMonth
            ,City
            ,StateAbbr
            ,Amenity
            ,SearchCount
            ,[Rank])
            SELECT  LEFT(CAST(CONVERT(VARCHAR(8),@Month,112) AS INT),6) AS YearMonth
                   ,x.City
                   ,x.StateAbbr
                   ,x.Amenity
                   ,x.SearchCount
                   ,DENSE_RANK() OVER (PARTITION BY x.CityState ORDER BY x.SearchCount DESC) AS [Rank]
            FROM    (
                     SELECT City
                           ,StateAbbr
                           ,CONCAT(City,StateAbbr) AS CityState
                           ,REPLACE(REPLACE(clickvalue,'|','-'),'&amp;','&') AS Amenity
                           ,SUM(PageViews) AS SearchCount
                     FROM   ApartmentGuide.Dimension.CityRefinement
                     WHERE  ymdid BETWEEN @StartYMDID AND @EndYMDID
                            AND (clickvalue NOT LIKE '%(D)%'
                                 AND clickvalue <> 'No Click Value')
                            AND State IS NOT NULL
                            AND City IS NOT NULL
                            AND position IS NOT NULL
                            AND clickvalue IS NOT NULL
                            AND position IN ('community','community_cat','Community Features','Apartment Features','apartment','apartment_cat','Special Features','musthave_cat','musthave')
                            AND clickvalue <> '-1'
                     GROUP BY City
                           ,StateAbbr
                           ,clickvalue
                    ) AS x
            ORDER BY x.City
                   ,x.StateAbbr
                   ,x.SearchCount DESC;


    SET NOCOUNT OFF;
END 






GO
/****** Object:  StoredProcedure [DataProduct].[rpt_AmenityRefinementsMSALevel]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [DataProduct].[rpt_AmenityRefinementsMSALevel] (@Month DATE)

/*******************************************************************************************
* Name:	[DataProduct].[rpt_AmenityRefinementsMSALevel]
* ------------------------------------------------------------------------------------------
* Desc:	This code was taken from the ApartmentGuide.Reports.rpt_SearchWhatDetails sproc 
* which populates the detail portion of the AG.com Search Refinements report. It has been modified
* to calculate all MSA feature refinements, ranked by most pageviews.
* ------------------------------------------------------------------------------------------
* Test:	EXEC [DataProduct].[rpt_AmenityRefinementsMSALevel] '11/01/2015'
* SELECT * FROM RentPath.[DataProduct].[AmenityRefinementsMSALevel] WHERE YearMonth = 201511
* ------------------------------------------------------------------------------------------
* Notes: The 0000-No MSA doesn't exist in this table because it would group together zip codes
* from all across the US. Top searched amenities no longer seems an insight if that is done.
* ------------------------------------------------------------------------------------------
* Hist:	01	12/17/2015		Colleen Rocks		No ticket; data product initial version
********************************************************************************************/
AS
BEGIN
    SET NOCOUNT ON;
/*
--test:
    DECLARE @Month DATE = '12/01/2015'
*/


------------------------------
/*Remove previous values if this is a rerun*/
------------------------------
    DELETE  FROM RentPath.DataProduct.AmenityRefinementsMSALevel
    WHERE   YearMonth = LEFT(CAST(CONVERT(VARCHAR(8),@Month,112) AS INT),6)

------------------------------
/*Declare and set variables*/
------------------------------
    DECLARE @StartYMDID INT
       ,@EndYMDID INT;

    SET @StartYMDID = CAST(CONVERT(VARCHAR(8),@Month,112) AS INT);
    SET @EndYMDID = CAST(CONVERT(VARCHAR(8),EOMONTH(@Month),112) AS INT);

------------------------------
/*Get rank of click value search refinements
for the city/state*/
------------------------------
    INSERT  INTO RentPath.DataProduct.AmenityRefinementsMSALevel
            (YearMonth
            ,MSACode
            ,MSAName
            ,Amenity
            ,SearchCount
            ,[Rank])
            SELECT  LEFT(CAST(CONVERT(VARCHAR(8),@Month,112) AS INT),6) AS YearMonth
                   ,x.MSACode
                   ,x.MSAName
                   ,x.Amenity
                   ,x.SearchCount
                   ,DENSE_RANK() OVER (PARTITION BY x.MSA ORDER BY x.SearchCount DESC) AS [Rank]
            FROM    (
                     SELECT z.MSACode
                           ,z.MSAName
                           ,CONCAT(z.MSAName,' - ',z.MSACode) AS MSA
                           ,REPLACE(REPLACE(cr.clickvalue,'|','-'),'&amp;','&') AS Amenity
                           ,SUM(cr.PageViews) AS SearchCount
                     FROM   ApartmentGuide.Dimension.CityRefinement AS cr
                     JOIN   (
                             SELECT DISTINCT
                                    z.CityName
                                   ,z.StateAbbr
                                   ,z.MSACode
                                   ,zml.MSAName
                             FROM   DBAUtility.dbo.ZipMSA AS z
                             LEFT JOIN DBAUtility.dbo.ZipMSALookup AS zml
                                    ON z.MSACode = zml.MSACode
                             WHERE  z.MSACode <> 0000
                            ) AS z
                            ON z.CityName = cr.City
                               AND z.StateAbbr = cr.StateAbbr
                     WHERE  cr.ymdid BETWEEN @StartYMDID AND @EndYMDID
                            AND (cr.clickvalue NOT LIKE '%(D)%'
                                 AND cr.clickvalue <> 'No Click Value')
                            AND cr.State IS NOT NULL
                            AND cr.City IS NOT NULL
                            AND cr.position IS NOT NULL
                            AND cr.clickvalue IS NOT NULL
                            AND cr.position IN ('community','community_cat','Community Features','Apartment Features','apartment','apartment_cat','Special Features','musthave_cat','musthave')
                            AND cr.clickvalue <> '-1'
                     GROUP BY z.MSACode
                           ,z.MSAName
                           ,cr.clickvalue
                    ) AS x
            ORDER BY x.MSAName
                   ,x.MSACode
                   ,x.SearchCount DESC;


    SET NOCOUNT OFF;
END 









GO
/****** Object:  StoredProcedure [DataProduct].[rpt_MSARentGrowthTrend]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [DataProduct].[rpt_MSARentGrowthTrend] 

/*******************************************************************************************
* Name:	DataProduct.[rpt_MSARentGrowthTrend]
* ------------------------------------------------------------------------------------------
* Desc:	This provides MSA Rent Trends for the past 13 months for 1 bedrooms only
* ------------------------------------------------------------------------------------------
* Test:	EXEC DataProduct.[rpt_MSARentGrowthTrend]  
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist: 01	12/16/2015		Shetal Gandhi		No ticket; Created for the Urgent Data Product Project
********************************************************************************************/
AS
SET NOCOUNT ON;



DECLARE @CurrYearCurrMonth INT ,
		@PriorYearCurrMonth INT,
		@PriorYearLastMonth INT,
		@CurrYearLastMonth INT

SET @CurrYearCurrMonth = CAST(CONVERT(VARCHAR(8),DATEADD(mm,-1,DATEADD(dd,-(DAY(GETDATE())-1),GETDATE())),112) AS INT)  -- 1st of Last Month
SET @PriorYearLastMonth = CAST(CONVERT(VARCHAR(8),DATEADD(yyyy,-1,DATEADD(mm,-2,DATEADD(dd,-(DAY(GETDATE())-1),GETDATE()))),112) AS INT) -- 1st of Last Month, 1 year ago
SET @PriorYearCurrMonth = CAST(CONVERT(VARCHAR(8),DATEADD(yyyy,-1,DATEADD(mm,-1,DATEADD(dd,-(DAY(GETDATE())-1),GETDATE()))),112) AS INT) -- 1st of Last Month, 1 year ago
SET @CurrYearLastMonth = CAST(CONVERT(VARCHAR(8),DATEADD(mm,-2,DATEADD(dd,-(DAY(GETDATE())-1),GETDATE())),112) AS INT) --2 months ago --CAST(CONVERT(VARCHAR(6),DATEADD(mm,-1,GETDATE()),112) AS INT)




BEGIN TRY
    DROP TABLE #MarketProperties
END TRY
BEGIN CATCH 
END CATCH

BEGIN TRY
	DROP TABLE #Dates
END TRY
BEGIN CATCH 
END CATCH


BEGIN TRY
	DROP TABLE #MarketUnits
END TRY
BEGIN CATCH 
END CATCH

DELETE FROM [DataProduct].MSARentGrowthTrend
WHERE YearMonth = LEFT(@CurrYearCurrMonth,6)



CREATE TABLE #Dates
(YMDID INT,
MonthValue VARCHAR(20))

INSERT INTO #Dates
SELECT YMDID,  ROW_NUMBER() OVER (ORDER BY YMDID) AS MonthValue
FROM (
SELECT DISTINCT MonthStartYMDID AS YMDID
FROM dbautility.dimension.dates AS d
WHERE d.ymdid BETWEEN @PriorYearLastMonth AND @CurrYearCurrMonth
) AS A


select DISTINCT 
		dl.ListingID
       ,dl.PropertyIDAG
       ,dl.PropertyIDRent
       ,dl.PropertyName
       ,dl.PropertyZipCode
       ,zm.MSACode
into #MarketProperties
from Rentpath.Dimension.Listings AS dl
LEFT JOIN    DBAUtility.dbo.ZipMSA AS zm
        ON dl.PropertyZipCode = zm.ZipCode
WHERE (dl.StatusIDAG = 1 OR dl.StatusIDRent = 1)

CREATE NONCLUSTERED INDEX idx_tempMarketProperties_ListingID
ON #MarketProperties ([ListingID])


	SELECT @currYearCurrMonth AS CurrYearMonth, d.MonthValue, MSACode,d.ymdid
	,MIN(ul.PriceLow) AS MinLowPrice, COUNT(DISTINCT ul.ID) AS UnitCount, AVG(ul.SqFtLow) AS Sqft
	INTO #MarketUnits
	FROM #Dates AS d
	LEFT JOIN ApartmentGuide.[Dimension].[UnitLayouts] AS ul
		ON d.ymdid BETWEEN DimStartYMDID AND ISNULL(DimEndYMDID,'29990101')	
	JOIN #MarketProperties AS mp
			ON mp.ListingID = ul.ListingID
	where bedrooms = 1
	--and d.ymdid IN (@PriorYearLastMonth, @PriorYearCurrMonth , @CurrYearCurrMonth, @CurrYearLastMonth)
	GROUP BY d.YMDID, msacode, d.MonthValue
	

;
WITH NewLowPrice
AS (
SELECT LEFT(d.YMDID,6) AS YearMonth ,CAST(d.MonthValue AS VARCHAR(10)) AS MonthValue, MSACode, su.MinLowPrice --, su2.MinLowPrice
FROM #Dates AS d
LEFT JOIN #MarketUnits AS su
	ON d.MonthValue = su.MonthValue
),
OldLowPrice
AS (
SELECT LEFT(d.YMDID,6) AS YearMonth ,CAST(d.MonthValue - 1 AS VARCHAR(10)) AS MonthValue, MSACode, su2.MinLowPrice  --, su2.MinLowPrice
FROM #Dates AS d
LEFT JOIN #MarketUnits AS su2
	ON d.MonthValue = su2.MonthValue + 1
)

INSERT INTO DataProduct.MSARentGrowthTrend
SELECT LEFT(@CurrYearCurrMonth,6) as YearMonth, LEFT(d.YMDID,6) AS GrowthYearMonth ,'Month '+CAST(d.MonthValue - 1 AS VARCHAR(10)) AS MonthValue, su.MSACode --, su.MinLowPrice AS NewMinLowPrice, su2.MinLowPrice
,(ISNULL(su1.MinLowPrice,0) - ISNULL(su2.MinLowPrice,0))/CASE WHEN (su2.MinLowPrice IS NULL OR su2.MinLowPrice = 0) AND su1.MinLowPrice IS NOT NULL THEN 100 
																	ELSE su2.MinLowPrice END AS MonthlyGrowth
,su.MinLowPrice
--INTO DataProduct.MSARentGrowthTrend
FROM #Dates AS d
LEFT JOIN #MarketUnits AS su
	ON su.YMDID = d.YMDID
LEFT JOIN NewLowPrice AS su1
	ON d.MonthValue = su1.MonthValue
	AND su.MSACode = su1.MSACode
LEFT JOIN NewLowPrice AS su2
	ON d.MonthValue = su2.MonthValue + 1
	AND su.MSACode = su2.MSACode
WHERE d.MonthValue - 1 != 0 


ORDER BY GrowthYearMonth

SET NOCOUNT OFF;




GO
/****** Object:  StoredProcedure [DataProduct].[rpt_PropertyRentGrowthTrend]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [DataProduct].[rpt_PropertyRentGrowthTrend] 

/*******************************************************************************************
* Name:	DataProduct.[rpt_PropertyRentGrowthTrend]
* ------------------------------------------------------------------------------------------
* Desc:	This provides Property Rent Trends for the past 13 months
* ------------------------------------------------------------------------------------------
* Test:	EXEC DataProduct.[rpt_PropertyRentGrowthTrend]  
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist: 01	12/16/2015		Shetal Gandhi		No ticket; Created for the Urgent Data Product Project
********************************************************************************************/
AS
SET NOCOUNT ON;



BEGIN TRY
    DROP TABLE #SubjectProperty
END TRY
BEGIN CATCH 
END CATCH


BEGIN TRY
	DROP TABLE #SubjectUnits
END TRY
BEGIN CATCH 
END CATCH

BEGIN TRY
	DROP TABLE #Dates
END TRY
BEGIN CATCH 
END CATCH



DECLARE @CurrYearCurrMonth INT ,
		@PriorYearCurrMonth INT,
		@CurrYearLastMonth INT


SET @CurrYearCurrMonth = CAST(CONVERT(VARCHAR(8),DATEADD(mm,-1,DATEADD(dd,-(DAY(GETDATE())-1),GETDATE())),112) AS INT)  
SET @PriorYearCurrMonth = CAST(CONVERT(VARCHAR(8),DATEADD(yyyy,-1,DATEADD(mm,-2,DATEADD(dd,-(DAY(GETDATE())-1),GETDATE()))),112) AS INT) -- 1st of Last Month, 1 year ago
SET @CurrYearLastMonth = CAST(CONVERT(VARCHAR(8),DATEADD(mm,-2,DATEADD(dd,-(DAY(GETDATE())-1),GETDATE())),112) AS INT) --2 months ago --CAST(CONVERT(VARCHAR(6),DATEADD(mm,-1,GETDATE()),112) AS INT)

DELETE FROM [DataProduct].PropertyRentGrowthTrend
WHERE YearMonth = LEFT(@CurrYearCurrMonth,6)




CREATE TABLE #Dates
(YMDID INT,
MonthValue VARCHAR(20))

INSERT INTO #Dates
SELECT YMDID,  ROW_NUMBER() OVER (ORDER BY YMDID) AS MonthValue
FROM (
SELECT DISTINCT MonthStartYMDID AS YMDID
FROM dbautility.dimension.dates AS d
WHERE d.ymdid BETWEEN @PriorYearCurrMonth AND @CurrYearCurrMonth
) AS A

SELECT DISTINCT 
		dl.ListingID
       ,PropertyIDAG
       ,PropertyIDRent
       ,PropertyName
       ,PropertyZipCode
INTO    #SubjectProperty
FROM    Rentpath.Dimension.Listings AS dl



SELECT @currYearCurrMonth AS CurrYearMonth, ul.ListingID,ul.PropertyID AS AGPropertyID, d.ymdid, d.MonthValue
,ISNULL(MIN(CASE WHEN ul.PriceLow IS NOT NULL THEN ul.PriceLow ELSE NULL end),0) AS MinLowPrice
INTO #SubjectUnits
FROM #Dates AS d
LEFT JOIN ApartmentGuide.[Dimension].[UnitLayouts] AS ul
	ON d.ymdid BETWEEN DimStartYMDID AND ISNULL(DimEndYMDID,'29990101')	
	AND bedrooms = 1
GROUP BY ul.ListingID,d.ymdid,  ul.PropertyID , d.MonthValue




;
WITH NewLowPrice
AS (
SELECT LEFT(d.YMDID,6) AS YearMonth ,CAST(d.MonthValue AS VARCHAR(10)) AS MonthValue, su.ListingID, su.AGPropertyID, su.MinLowPrice --, su2.MinLowPrice
FROM #Dates AS d
LEFT JOIN #SubjectUnits AS su
	ON d.MonthValue = su.MonthValue
),
OldLowPrice
AS (
SELECT LEFT(d.YMDID,6) AS YearMonth ,CAST(d.MonthValue - 1 AS VARCHAR(10)) AS MonthValue, su2.ListingID, su2.AGPropertyID, su2.MinLowPrice  --, su2.MinLowPrice
FROM #Dates AS d
LEFT JOIN #SubjectUnits AS su2
	ON d.MonthValue = su2.MonthValue + 1
)

INSERT INTO DataProduct.PropertyRentGrowthTrend
SELECT LEFT(@CurrYearCurrMonth,6) as YearMonth, LEFT(d.YMDID,6) AS GrowthYearMonth ,'Month '+CAST(d.MonthValue - 1 AS VARCHAR(10)) AS MonthValue, su.ListingID, su.AGPropertyID--, su.MinLowPrice AS NewMinLowPrice, su2.MinLowPrice
,(ISNULL(su1.MinLowPrice,0) - ISNULL(su2.MinLowPrice,0))/CASE WHEN (su2.MinLowPrice IS NULL OR su2.MinLowPrice = 0) AND su1.MinLowPrice IS NOT NULL THEN 100 
																	ELSE su2.MinLowPrice END AS MonthlyGrowth
,su.MinLowPrice

FROM #Dates AS d
LEFT JOIN #SubjectUnits AS su
	ON su.YMDID = d.YMDID
LEFT JOIN NewLowPrice AS su1
	ON d.MonthValue = su1.MonthValue
	AND su.ListingID = su1.ListingID
LEFT JOIN NewLowPrice AS su2
	ON d.MonthValue = su2.MonthValue + 1
	AND su.ListingID = su2.ListingID
WHERE d.MonthValue - 1 != 0 	



SET NOCOUNT OFF;




GO
/****** Object:  StoredProcedure [DataProduct].[rpt_UnitInfoMSALevel]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [DataProduct].[rpt_UnitInfoMSALevel]


/*******************************************************************************************
* Name:	[DataProduct].[rpt_UnitInfoMSALevel]
* ------------------------------------------------------------------------------------------
* Desc:	This provides MSA Level data at the Unit Level 
* ------------------------------------------------------------------------------------------
* Test:	EXEC [DataProduct].[rpt_UnitInfoMSALevel]
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist: 01	12/16/2015		Shetal Gandhi		No ticket; Created for the Urgent Data Product Project
********************************************************************************************/
AS
SET NOCOUNT ON;


DECLARE @CurrYearCurrMonth INT ,
		@PriorYearCurrMonth INT,
		@CurrYearLastMonth INT

SET @CurrYearCurrMonth = CAST(CONVERT(VARCHAR(8),DATEADD(mm,-1,DATEADD(dd,-(DAY(GETDATE())-1),GETDATE())),112) AS INT)  -- 1st of Last Month
SET @PriorYearCurrMonth = CAST(CONVERT(VARCHAR(8),DATEADD(yyyy,-1,DATEADD(mm,-1,DATEADD(dd,-(DAY(GETDATE())-1),GETDATE()))),112) AS INT) -- 1st of Last Month, 1 year ago
SET @CurrYearLastMonth = CAST(CONVERT(VARCHAR(8),DATEADD(mm,-2,DATEADD(dd,-(DAY(GETDATE())-1),GETDATE())),112) AS INT) --2 months ago --CAST(CONVERT(VARCHAR(6),DATEADD(mm,-1,GETDATE()),112) AS INT)




BEGIN TRY
    DROP TABLE #MarketProperties
END TRY
BEGIN CATCH 
END CATCH

BEGIN TRY
	DROP TABLE #Dates
END TRY
BEGIN CATCH 
END CATCH


BEGIN TRY
	DROP TABLE #MarketUnits
END TRY
BEGIN CATCH 
END CATCH

DELETE FROM [DataProduct].[UnitBedLevelMSAInfo]
WHERE YearMonth = LEFT(@CurrYearCurrMonth,6)


CREATE TABLE #Dates
(YMDID INT)

INSERT INTO #Dates
SELECT ymdid
FROM dbautility.dimension.dates AS d
WHERE YMDID BETWEEN @PriorYearCurrMonth AND @CurrYearCurrMonth


select DISTINCT 
		dl.ListingID
       ,dl.PropertyIDAG
       ,dl.PropertyIDRent
       ,dl.PropertyName
       ,dl.PropertyZipCode
       ,zm.MSACode
into #MarketProperties
from Rentpath.Dimension.Listings AS dl
LEFT JOIN    DBAUtility.dbo.ZipMSA AS zm
        ON dl.PropertyZipCode = zm.ZipCode
WHERE (dl.StatusIDAG = 1 OR dl.StatusIDRent = 1)

CREATE NONCLUSTERED INDEX idx_tempMarketProperties_ListingID
ON #MarketProperties ([ListingID])


	SELECT d.YMDID, MSACode
	--,CASE WHEN Bedrooms >= 4 THEN '4+' ELSE CAST(Bedrooms AS VARCHAR(10)) END AS Bedrooms  
	,MIN(ul.PriceLow) AS MinLowPrice, COUNT(DISTINCT ul.ID) AS UnitCount, AVG(ul.SqFtLow) AS Sqft
	INTO #MarketUnits
	FROM #Dates AS d
	LEFT JOIN ApartmentGuide.[Dimension].[UnitLayouts] AS ul
		ON d.ymdid BETWEEN DimStartYMDID AND ISNULL(DimEndYMDID,'29990101')	
	JOIN #MarketProperties AS mp
			ON mp.ListingID = ul.ListingID
	where bedrooms = 1
	and d.ymdid IN (@PriorYearCurrMonth , @CurrYearCurrMonth, @CurrYearLastMonth)
	GROUP BY d.YMDID, msacode
	
INSERT INTO [DataProduct].[UnitBedLevelMSAInfo]
SELECT  LEFT(@CurrYearCurrMonth,6) AS YearMonth
, su.MSACode
, MinLowPrice AS Level
, ISNULL((MinLowPrice - PYMinLowPrice) / NULLIF(PYMinLowPrice,0),0) AS AnnualGrowth-- AS  PriorYearRent
, UnitCount AS UnitCount
, SQft		AS SQft
, ISNULL(MinLowPrice / NULLIF(SQft,0),0) AS RentPerSqft
, ISNULL((MinLowPrice - CYLMMinLowPrice) / NULLIF(CYLMMinLowPrice,0),0) AS LastMonthGrowth
FROM #MarketUnits AS su
LEFT JOIN (SELECT MSACode,MinLowPrice AS PYMinLowPrice
		   FROM #MarketUnits
		   WHERE YMDID = @PriorYearCurrMonth ) AS py
 ON su.MSACode = py.MSACode
 LEFT JOIN (SELECT MSACode, MinLowPrice AS CYLMMinLowPrice
		   FROM #MarketUnits
		   WHERE YMDID = @CurrYearLastMonth ) AS cylm
 ON  su.MSACode = cylm.MSACode
WHERE ymdid = @CurrYearCurrMonth
		





SET NOCOUNT OFF;


GO
/****** Object:  StoredProcedure [DataProduct].[rpt_UnitInfoPropertyLevel]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [DataProduct].[rpt_UnitInfoPropertyLevel] 

/*******************************************************************************************
* Name:	DataProduct.[rpt_UnitInfoPropertyLevel]
* ------------------------------------------------------------------------------------------
* Desc:	This provides PropertyInfo at the Unit Level for Each property
* ------------------------------------------------------------------------------------------
* Test:	EXEC DataProduct.[rpt_UnitInfoPropertyLevel]  
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist: 01	12/16/2015		Shetal Gandhi		No ticket; Created for the Urgent Data Product Project
********************************************************************************************/
AS
SET NOCOUNT ON;


--DECLARE 
--    @AGPropertyID INT = 6867
	


BEGIN TRY
    DROP TABLE #SubjectProperty
END TRY
BEGIN CATCH 
END CATCH


BEGIN TRY
	DROP TABLE #SubjectUnits
END TRY
BEGIN CATCH 
END CATCH

BEGIN TRY
	DROP TABLE #Dates
END TRY
BEGIN CATCH 
END CATCH



DECLARE @CurrYearCurrMonth INT ,
		@PriorYearCurrMonth INT,
		@CurrYearLastMonth INT

--SET @CurrYearCurrMonth = CAST(CONVERT(VARCHAR(6),GETDATE(),112) AS INT)
--SET @PriorYearCurrMonth = CAST(CONVERT(VARCHAR(6),DATEADD(yyyy,-1,GETDATE()),112) AS INT)
--SET @CurrYearLastMonth = CAST(CONVERT(VARCHAR(6),DATEADD(mm,-1,GETDATE()),112) AS INT)

SET @CurrYearCurrMonth = CAST(CONVERT(VARCHAR(8),DATEADD(mm,-1,DATEADD(dd,-(DAY(GETDATE())-1),GETDATE())),112) AS INT)  
SET @PriorYearCurrMonth = CAST(CONVERT(VARCHAR(8),DATEADD(yyyy,-1,DATEADD(mm,-1,DATEADD(dd,-(DAY(GETDATE())-1),GETDATE()))),112) AS INT) -- 1st of Last Month, 1 year ago
SET @CurrYearLastMonth = CAST(CONVERT(VARCHAR(8),DATEADD(mm,-2,DATEADD(dd,-(DAY(GETDATE())-1),GETDATE())),112) AS INT) --2 months ago --CAST(CONVERT(VARCHAR(6),DATEADD(mm,-1,GETDATE()),112) AS INT)

DELETE FROM [DataProduct].[UnitBedLevelPropertyInfo]
WHERE YearMonth = LEFT(@CurrYearCurrMonth,6)

CREATE TABLE #Dates
(YMDID INT)

INSERT INTO #Dates
SELECT ymdid
FROM dbautility.dimension.dates AS d
WHERE d.ymdid BETWEEN @PriorYearCurrMonth AND @CurrYearCurrMonth


SELECT DISTINCT 
		dl.ListingID
       ,PropertyIDAG
       ,PropertyIDRent
       ,PropertyName
       ,PropertyZipCode
       ,zm.MSACode
       ,zmsa.MSAName
       ,zmsa.MSAType
INTO    #SubjectProperty
FROM    Rentpath.Dimension.Listings AS dl
JOIN    DBAUtility.dbo.ZipMSA AS zm
        ON dl.PropertyZipCode = zm.ZipCode
JOIN    DBAUtility.dbo.ZipMSALookup AS zmsa
		on zmsa.MSACode = zm.MSACode
--where (dl.StatusIDAG = 1 OR dl.StatusIDRent = 1)


SELECT ul.ListingID,ul.PropertyID AS AGPropertyID, d.ymdid
,CASE WHEN Bedrooms >= 4 THEN '4+' ELSE CAST(Bedrooms AS VARCHAR(10)) END AS Bedrooms  
,MIN(CASE WHEN ul.PriceLow IS NOT NULL THEN ul.PriceLow ELSE NULL end) AS MinLowPrice
,COUNT(DISTINCT ul.ID) AS UnitCount
,AVG(CASE WHEN ul.SqFtLow IS NOT NULL THEN ul.SqFtLow  ELSE 0 end ) AS Sqft
INTO #SubjectUnits
FROM #Dates AS d
LEFT JOIN ApartmentGuide.[Dimension].[UnitLayouts] AS ul
	ON d.ymdid BETWEEN DimStartYMDID AND ISNULL(DimEndYMDID,'29990101')	
--JOIN #SubjectProperty AS lm
--		ON lm.ListingID = ul.ListingID
--WHERE d.YMDID BETWEEN DimStartYMDID AND ISNULL(DimEndYMDID,'29990101')
WHERE d.ymdid IN (@PriorYearCurrMonth , @CurrYearCurrMonth, @CurrYearLastMonth)
GROUP BY ul.ListingID,d.ymdid,  ul.PropertyID , CASE WHEN Bedrooms >= 4 THEN '4+' ELSE CAST(Bedrooms AS VARCHAR(10)) END 

BEGIN TRY
DROP TABLE #FinalData
END TRY
BEGIN CATCH 
END CATCH


SELECT  su.AGPropertyID
, su.Bedrooms
, MinLowPrice AS [Level$]
, (MinLowPrice - PYMinLowPrice) / NULLIF(PYMinLowPrice,0) AS [%AnnualGrowth]-- AS  PriorYearRent
, UnitCount AS UnitCount
, SQft		AS SQft
, MinLowPrice / NULLIF(SQft,0) AS [Rent/SF]
, UnitCount / NULLIF(CAST(TotalUnits AS FLOAT),0) AS [%TotalUnits]
, (MinLowPrice - CYLMMinLowPrice) / CYLMMinLowPrice AS [%LastMonthGrowth]-- AS  PriorYearRent
INTO #FinalData
FROM #SubjectUnits AS su
LEFT JOIN (SELECT ListingID,Bedrooms, MinLowPrice AS PYMinLowPrice
		   FROM #SubjectUnits
		   WHERE ymdid = @PriorYearCurrMonth ) AS py
		ON su.ListingID = py.ListingID
		AND su.Bedrooms = py.bedrooms
LEFT JOIN (SELECT ListingID,SUM(UnitCount) AS TotalUnits
		   FROM #SubjectUnits
		   WHERE ymdid = @CurrYearCurrMonth 
		   GROUP BY ListingID) AS a
		ON su.ListingID = a.ListingID
LEFT JOIN (SELECT ListingID,Bedrooms, MinLowPrice AS CYLMMinLowPrice
		   FROM #SubjectUnits
		   WHERE ymdid = @CurrYearLastMonth ) AS cylm
		ON su.ListingID = cylm.ListingID
		AND su.Bedrooms = cylm.bedrooms
WHERE ymdid = @CurrYearCurrMonth

--DROP TABLE Rentpath.DataProduct.UnitBedLevelPropertyInfo		
INSERT INTO Rentpath.DataProduct.UnitBedLevelPropertyInfo
SELECT  LEFT(@CurrYearCurrMonth,6) AS YearMonth
		,AGPropertyID
	   ,MAX(case when Bedrooms = '0' then [Level$] ELSE NULL end			) AS StudioBedAvgRent
       ,MAX(case when Bedrooms = '0' then [%AnnualGrowth] ELSE NULL end		) AS StudioBedAnnualGrowth
       ,MAX(case when Bedrooms = '0' then [UnitCount] ELSE NULL END			) AS StudioBedUnitCount
       ,MAX(case when Bedrooms = '0' then [Sqft] ELSE NULL END				) AS StudioBedSqft
	   ,MAX(case when Bedrooms = '0' then [Rent/SF] ELSE NULL END			) AS StudioBedRentSqft
       ,MAX(case when Bedrooms = '0' then [%TotalUnits] ELSE NULL END		) AS StudioBedTotalUnits
       ,MAX(case when Bedrooms = '0' then [%LastMonthGrowth] ELSE NULL END	) AS StudioBedLastMonthGrowth
	   ,MAX(case when Bedrooms = '1' then [Level$] ELSE NULL end			) AS OneBedAvgRent
       ,MAX(case when Bedrooms = '1' then [%AnnualGrowth] ELSE NULL end		) AS OneBedAnnualGrowth
       ,MAX(case when Bedrooms = '1' then [UnitCount] ELSE NULL END			) AS OneBedUnitCount
       ,MAX(case when Bedrooms = '1' then [Sqft] ELSE NULL END				) AS OneBedSqft
	   ,MAX(case when Bedrooms = '1' then [Rent/SF] ELSE NULL END			) AS OneBedRentSqft
       ,MAX(case when Bedrooms = '1' then [%TotalUnits] ELSE NULL END		) AS OneBedTotalUnits
       ,MAX(case when Bedrooms = '1' then [%LastMonthGrowth] ELSE NULL END	) AS OneBedLastMonthGrowth
	   ,MAX(case when Bedrooms = '2' then [Level$] ELSE NULL end			) AS TwoBedAvgRent
       ,MAX(case when Bedrooms = '2' then [%AnnualGrowth] ELSE NULL end		) AS TwoBedAnnualGrowth
       ,MAX(case when Bedrooms = '2' then [UnitCount] ELSE NULL END			) AS TwoBedUnitCount
       ,MAX(case when Bedrooms = '2' then [Sqft] ELSE NULL END				) AS TwoBedSqft
	   ,MAX(case when Bedrooms = '2' then [Rent/SF] ELSE NULL END			) AS TwoBedRentSqft
       ,MAX(case when Bedrooms = '2' then [%TotalUnits] ELSE NULL END		) AS TwoBedTotalUnits
       ,MAX(case when Bedrooms = '2' then [%LastMonthGrowth] ELSE NULL END	) AS TwoBedLastMonthGrowth
	   ,MAX(case when Bedrooms = '3' then [Level$] ELSE NULL end			) AS ThreeBedAvgRent
       ,MAX(case when Bedrooms = '3' then [%AnnualGrowth] ELSE NULL end		) AS ThreeBedAnnualGrowth
       ,MAX(case when Bedrooms = '3' then [UnitCount] ELSE NULL END			) AS ThreeBedUnitCount
       ,MAX(case when Bedrooms = '3' then [Sqft] ELSE NULL END				) AS ThreeBedSqft
	   ,MAX(case when Bedrooms = '3' then [Rent/SF] ELSE NULL END			) AS ThreeBedRentSqft
       ,MAX(case when Bedrooms = '3' then [%TotalUnits] ELSE NULL END		) AS ThreeBedTotalUnits
       ,MAX(case when Bedrooms = '3' then [%LastMonthGrowth] ELSE NULL END	) AS ThreeBedLastMonthGrowth
	   ,MAX(case when Bedrooms = '4+' then [Level$] ELSE NULL end			) AS FourPlusBedAvgRent
       ,MAX(case when Bedrooms = '4+' then [%AnnualGrowth] ELSE NULL end	) AS FourPlusBedAnnualGrowth
       ,MAX(case when Bedrooms = '4+' then [UnitCount] ELSE NULL END		) AS FourPlusBedUnitCount
       ,MAX(case when Bedrooms = '4+' then [Sqft] ELSE NULL END				) AS FourPlusBedSqft
	   ,MAX(case when Bedrooms = '4+' then [Rent/SF] ELSE NULL END			) AS FourPlusBedRentSqft
       ,MAX(case when Bedrooms = '4+' then [%TotalUnits] ELSE NULL END		) AS FourPlusBedTotalUnits
       ,MAX(case when Bedrooms = '4+' then [%LastMonthGrowth] ELSE NULL END	) AS FourPlusBedLastMonthGrowth
--INTO Rentpath.DataProduct.UnitBedLevelPropertyInfo
FROM    #FinalData

GROUP BY AGPropertyID


SET NOCOUNT OFF;


GO
/****** Object:  StoredProcedure [dbo].[CallID_PhoneLeadDetails]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






/*--######################################################################################
*
* Name:	dbo.CallID_PhoneLeadDetails
*
* Desc:	Input for Phone Lead Details
*
* Test:	EXEC dbo.CallID_PhoneLeadDetails '47ad9beb5c3c1cf085fd73b4fc8dc395'
*
* Hist:	01	05/05/2017	Kimberley Morrow		Case# 01468091 - - Initial Version 
--#######################################################################################*/
CREATE PROCEDURE [dbo].[CallID_PhoneLeadDetails] (@CallID VARCHAR(50))
AS
BEGIN

    SET NOCOUNT ON;
	
	/*
    DECLARE @CallID    VARCHAR(50)
	SET @CallID  = '47ad9beb5c3c1cf085fd73b4fc8dc395'
	--SELECT * FROM RentPath.mart.PhoneLeads
	*/
	

    SELECT  Website
           ,CallId
           ,CallerPhoneNumber
           ,CallStartDateTime
    FROM    RentPath.Mart.PhoneLeads
    WHERE   CallId = @CallID;



			


    SET NOCOUNT OFF;


END;








GO
/****** Object:  StoredProcedure [dbo].[Dashboard_Check_Valid_Axio_For_User]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








/*--######################################################################################
*
* Name:	[dbo].[Dashboard_Check_Valid_Axio_For_User]
*
* Desc:	Find what Axio reporting is allowed for that user
*
* Test:	EXEC dbo.Dashboard_Check_Valid_Axio_For_User 'cb2d1aaf-609b-4514-8440-15cc53525638', '57620', 'M2551'
*       EXEC dbo.Dashboard_Check_Valid_Axio_For_User '1A0D6CD1-1C7B-4588-A45A-85EF9654285C', NULL, 'M291'
* Hist:	01	05/25/2017	    Kimberley Morrow	Case 01480140 - Initial Version 
--#######################################################################################*/
CREATE PROCEDURE [dbo].[Dashboard_Check_Valid_Axio_For_User]
(@userguid	UNIQUEIDENTIFIER = NULL
,@projectid	VARCHAR(128) = NULL
,@marketid VARCHAR(128) = NULL)
AS 
BEGIN

	SET NOCOUNT ON;

	 /*
	DECLARE @userguid uniqueidentifier
	DECLARE @axioid varchar(128)
	SET @userguid = '1A0D6CD1-1C7B-4588-A45A-85EF9654285C'
	SET @projectid = '13577'
	SET @marketid = 'M2233'
	--SELECT * FROM Dimension.vw_DSUM_User WITH (NOLOCK)
	*/




	BEGIN TRY
		DROP TABLE #tmpaxiolist
	END TRY
	BEGIN CATCH
	END CATCH

	CREATE TABLE #tmpaxiolist
	(UserGUID	UNIQUEIDENTIFIER
	,AGPropertyID	INT
	,RentPropertyID	INT
	,PropertyName	VARCHAR(2000)
	,PropertyCity	VARCHAR(2000)
	,PropertyState	VARCHAR(100)
	,PropertyZip	INT
	,AGStatus		INT
	,RentStatus		INT
	,TotalUserCanSee	INT
	,ProjectID		VARCHAR(128)
	,MarketID		VARCHAR(128)
	,AxioID			VARCHAR(128)
	,AxioActive		INT
	)
	--get list of allowed AxioID values for the user on this subscription
	INSERT INTO 
	#tmpaxiolist
	EXEC Reports.rpt_AxioDisplay @userguid,100000,NULL




	IF EXISTS(SELECT ProjectID, MarketID FROM #tmpaxiolist WHERE ProjectID = @projectid OR MarketID = @marketid)
		SELECT CONVERT(INT,1) AS IsValidForUser
	ELSE
		SELECT CONVERT(INT,0) AS InvalidForUser		
					
					
					
					


	SET NOCOUNT OFF;


END;










GO
/****** Object:  StoredProcedure [dbo].[Dashboard_Check_Valid_Property_For_User]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





/*--######################################################################################
*
* Name:	[dbo].[Dashboard_Check_Valid_Property_For_User]
*
* Desc:	Find whether the property is allowed for that user
*
* Test:	EXEC dbo.Dashboard_Check_Valid_Property_For_User '915A8EF8-8061-2147-8838-587C644403D7',40024
*       EXEC dbo.Dashboard_Check_Valid_Property_For_User 'cfbd8602-a992-467f-934d-6389ddbf1ac3',88118
* Hist:	01	03/24/2015	Bob Langley		Ticket 18155 - Initial Version 
* Hist: 02	12/15/2015		Kimberley Morrow	Ticket 21652 - Add flags for Axio Data Product
* Hist: 03	01/14/2016		Kimberley Morrow	Ticket 21858 - Add flags for Axio Data Product
* Hist: 04	05/18/2016		Kimberley Morrow	Ticket 23085 - Add flags for Axio Market
--#######################################################################################*/
CREATE PROCEDURE [dbo].[Dashboard_Check_Valid_Property_For_User]
(@userguid	uniqueidentifier = NULL
,@propertyid	int = NULL)
AS 
BEGIN

	SET NOCOUNT ON;

	/* Testing 
	DECLARE @userguid uniqueidentifier
	DECLARE @propertyid int
	SET @userguid = 'cfbd8602-a992-467f-934d-6389ddbf1ac3'
	SET @propertyid = 88118
	--SELECT * FROM Dimension.vw_DSUM_User WITH (NOLOCK)
	*/




	BEGIN TRY
		DROP TABLE #tmppropertylist
	END TRY
	BEGIN CATCH
	END CATCH

	CREATE TABLE #tmppropertylist
	(UserGUID	uniqueidentifier
	,AGPropertyID	int
	,RentPropertyID	int
	,PropertyName	varchar(2000)
	,PropertyCity	varchar(2000)
	,PropertyState	varchar(100)
	,PropertyZip	int
	,AGStatus		int
	,RentStatus		int
	,TotalUserCanSee	int
	,ProjectID		varchar(128)
	,MarketID		varchar(128)
	,AxioActive		int
	)
	--get list of allowed PropertyID values for the user on this subscription
	INSERT INTO 
	#tmppropertylist
	EXEC Reports.rpt_PropertyDisplay @userguid,100000,NULL

	--SELECT * FROM #tmppropertylist


	if exists(SELECT AGPropertyID FROM #tmppropertylist WHERE AGPropertyID = @propertyid)
		SELECT CONVERT(int,1) AS IsValidForUser
	else
		SELECT CONVERT(int,0) AS IsValidForUser		
					
					
					
					


	SET NOCOUNT OFF;


END;







GO
/****** Object:  StoredProcedure [dbo].[Dashboard_Create_Daily_Email_Subscriptions_List]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



















CREATE PROCEDURE [dbo].[Dashboard_Create_Daily_Email_Subscriptions_List]
AS 
/*--######################################################################################
*
* Name:	[dbo].[Dashboard_Create_Daily_Email_Subscriptions_List]
*
* Desc:	Get the information for the daily email subscription list
*
* Test:	EXEC dbo.Dashboard_Create_Daily_Email_Subscriptions_List
*
*	SELECT * FROM dbo.Dashboard_Daily_Email_Subscriptions_List WITH (NOLOCK)
*	SELECT * FROM dbo.DashboardSubscriptions
*
* Hist:	01	05/04/2015	Bob Langley			Ticket 18155 - Initial Version 
* Hist: 02	05/18/2015	Bob Langley			Changed (until the front end can change) to not send email subscriptions (Report = 1 or 2) to users who are admins and PropertyID=0 
*											and fixed issue where was only sending ones with multiple email addresses
* Hist: 03	09/16/2015	Shetal Gandhi		Ticket 20421 - Modified to use the New Rentpath tables instead of the AG Combined views
* Hist: 04	01/20/2016	Bob Langley			Ticket 21874 - Changed to allow email address size of 2000 (was 200), to allow for multiple email addresses
* Hist: 05	01/21/2016	Kimberley Morrow	Ticket 21858 - Add flags for Axio Data Product
* Hist: 06	04/19/2016	Brian Trembley		Ticket 22605 - Add Axio Data Product (insights)  (and for real this time, not like step 5)
* Hist: 07	04/21/2016	Brian Trembley		Ticket 22826 - Add create date to URL
* Hist: 08  05/02/2016  Kimberley Morrow	Ticket 22826 - fixed Insight unauth subscription link 'InsightReports'
* Hist: 09	05/05/2016	Bob Langley			Ticket 22826 - Changed to not reset @subscriptionid and @creator in the cursor loop.  Taking way too much time.
* Hist: 10  05/17/2016  Richard Chen		Ticket 22991 - Monthly Insight subscription sent out on the 20th.
* Hist: 11  05/18/2016  Kimberley Morrow	Ticket 23085 - Added Axio MarketID
* Hist: 12  06/14/2016  Kimberley Morrow	Ticket 23085 - Change communityid to accountid
* Hist: 13	11/17/2016	Colleen Rocks		SFDC Case 01340204 - Monthly Insight should send on the 20th unless that falls on a Friday/Saturday
* Hist: 14	11/21/2016	Colleen Rocks		SFDC Case 01344682 - comment out email alerts for subscriptions with no properties		
* Hist: 15  01/05/2017  Richard Chen        SFDC Case 01344682 - uncomment email alert. Conolidate into 1 failed alert
                                            Delete no associated properties subscription.
* Hist: 16	02/06/2017	Kimberley Morrow	SFDC Case 01389004 - removed email alerts for subscriptions with no properties	
* Hist: 17	06/12/2017	Kimberley Morrow	No Case - Changed Subscription url strings to https from http
--#######################################################################################*/
BEGIN

    SET NOCOUNT ON;

    DECLARE @rundate DATETIME
    DECLARE @userid INT
    DECLARE @dow INT
    DECLARE @subscriptionid INT
    DECLARE @propertyid INT
    DECLARE @description VARCHAR(1000)
    DECLARE @report INT
    DECLARE @to VARCHAR(2000)
    DECLARE @creator UNIQUEIDENTIFIER
    DECLARE @dowtouse INT
    DECLARE @domtouse INT
	DECLARE @dtouseforaxio DATE			
    DECLARE @propid INT
    DECLARE @HeadlineLeads VARCHAR(2000)
    DECLARE @HeadlinePageViews VARCHAR(2000)
	DECLARE @HeadlineInsight VARCHAR(2000)
    DECLARE @SubHeading VARCHAR(2000)
    DECLARE @urlleadsag VARCHAR(2000)
    DECLARE @urlleadsrent VARCHAR(2000)
    DECLARE @urlpageviewsag VARCHAR(2000)
    DECLARE @urlpageviewsrent VARCHAR(2000)
	DECLARE @urlinsightAG VARCHAR(2000)
	DECLARE @urlinsightRent VARCHAR(2000)
    DECLARE @dbname VARCHAR(300)


	--Declares for the email variables
    DECLARE @servername VARCHAR(200)
    DECLARE @msgbody VARCHAR(8000)
    DECLARE @msgsubject VARCHAR(8000)
    DECLARE @RecipientsText VARCHAR(8000)
    DECLARE @ErrorMessage VARCHAR(4000)

    SET @dbname = CONVERT(VARCHAR(300),DB_NAME())


	--DECLARE @ymdid int
    BEGIN TRY
        DROP TABLE #tmpemail
    END TRY
    BEGIN CATCH
    END CATCH

    BEGIN TRY
        DROP TABLE #tmpfinalresultset
    END TRY
    BEGIN CATCH
    END CATCH

    CREATE TABLE #tmpemail (
        RecID INT IDENTITY
       ,SubscriptionID INT
       ,[Description] VARCHAR(1000)
       ,Email VARCHAR(2000)
       ,PropertyID INT
       ,Report INT)



	/* ========================================================================= */
	--User settable variables
    SET @dowtouse = 2				--1 = Sunday, etc.
    SET @domtouse = 2				--day of month to run monthly subscriptions (actual day, like 5th, 23rd, 24th, etc.)
	/* ========================================================================= */
    BEGIN TRY
        DROP TABLE #tmpmasterlist
    END TRY
    BEGIN CATCH
    END CATCH


    TRUNCATE TABLE dbo.Dashboard_Daily_Email_Subscriptions_List

	
	;

        SELECT  ListingID
               ,dlr.PropertyIDAG  AS AGPropertyID
               , dlr.PropertyIDRent AS RentPropertyID
               --,rdl.PropertyID AS RentComPropertyID
               ,dlr.PropertyZipCode AS ZipCode		--(CASE WHEN dlag.ZipCode > dlr.ZipCode THEN dlag.ZipCode ELSE dlr.ZipCode END) AS ZipCode
               ,dlr.MgtCoIDAG AS AGMgtCoID
               ,dlr.MgtCoIDRent AS RentMgtCoID
               ,ISNULL(dlr.StatusIDAG,0)  AS AGStatusID
               ,ISNULL(dlr.StatusIDRent,0) AS RentStatusID
        INTO    #tmpmasterlist
        FROM Rentpath.Dimension.Listings AS dlr
        ORDER BY ListingID





    SET @rundate = GETDATE()
    SET @dow = CONVERT(INT,DATEPART(dw,@rundate))						--currently, 1 = Sunday

	/*When the 20th of the month falls on a Friday or Saturday, send Axio on the following Sunday; otherwise send it on the 20th*/
	SET @dtouseforaxio = CASE WHEN DATEPART(WEEKDAY,DATEFROMPARTS(YEAR(@rundate),MONTH(@rundate),20)) = 6 THEN DATEADD(DAY,2,DATEFROMPARTS(YEAR(@rundate),MONTH(@rundate),20))
			WHEN DATEPART(WEEKDAY,DATEFROMPARTS(YEAR(@rundate),MONTH(@rundate),20)) = 7 THEN DATEADD(DAY,1,DATEFROMPARTS(YEAR(@rundate),MONTH(@rundate),20))
			ELSE DATEFROMPARTS(YEAR(@rundate),MONTH(@rundate),20) END

	--SELECT @rundate, @dtouseforaxio
	--SET @ymdid = CONVERT(int, Convert(varchar(10),@rundate,112))

	--PRINT '@dow = ' + CONVERT(varchar(30),@dow)
	--PRINT '@ymdid = ' + CONVERT(varchar(30),@ymdid)




	--Find the subscriptions that go out today for FTP
    DECLARE subscriptioncursor CURSOR
    FOR
    SELECT  s.SubscriptionID
           ,s.PropertyID
           ,s.[Description]
           ,s.Report
           ,s.[TO]
           ,s.Creator
    FROM    dbo.DashboardSubscriptions s WITH (NOLOCK)
    LEFT OUTER JOIN Dimension.vw_DSUM_User u WITH (NOLOCK)
            ON u.UserGUID = s.Creator
    LEFT OUTER JOIN Dimension.vw_DSUM_UserRole ur WITH (NOLOCK)
            ON ur.UserID = u.UserID
    WHERE   s.Report in (1,2,4)
            AND ((s.Frequency = 1)										-- daily and is today
                 OR (s.Frequency = 2
                     AND @dow = @dowtouse)				-- weekly and is today
                 OR (s.Frequency = 3 AND report <> 4   --Monthly None Insight still run on @domtouse
                     AND DAY(@rundate) = @domtouse)
				 OR (s.Frequency = 3 AND report = 4     -- Monthly Insight report run on 20th if not on a Friday or Sunday
                     AND CONVERT(int, Convert(varchar(10),@rundate,112)) = CONVERT(int, Convert(varchar(10),@dtouseforaxio,112)))	--compare the dates as integers, no time so in same format
				 --OR (s.Frequency = 3 AND report =4     -- Monthly Insight report run on 20th
                 --    AND DAY(@rundate) = 20)
				)	-- monthly and is today			(day is second day of the month)
            AND (NOT (s.PropertyID = 0
                      AND (ur.RoleID NOT IN (6,7,14))))			--and not (propertyid = 0 and is an admin)					added 05/18/2015 - don't send to propid 0 and is an admin


	/*
	Report 
	1 = Leads
	2 = Page Views
	3 = Advanced
	4 = Insight

	Frequency
	1 = Daily
	2 = Weekly
	3 = Monthly
	*/


    OPEN subscriptioncursor

	-- Loop through all the files for the database  
    FETCH NEXT FROM subscriptioncursor INTO @subscriptionid,@propertyid,@description,@report,@to,@creator

    WHILE @@FETCH_STATUS = 0 
        BEGIN  
		

				--get needed information about the subscription info, the user, and his allowed properties
            --05/05/2016  Ticket 22826  Bob commented this out. see history statement above
            --SET @subscriptionid = @subscriptionid		-- set this from the looping of the subscriptions to see if this subscription goes out
            --SET @creator = (
            --                SELECT  Creator
            --                FROM    dbo.DashboardSubscriptions
            --                WHERE   SubscriptionID = @subscriptionid
            --               )		--look up the owner's information from the DashboardSubscriptions table
            SET @userid = (
                           SELECT   UserID
                           FROM     Dimension.vw_DSUM_User
                           WHERE    UserGUID = @creator
                          )  -- using the owner's information, get their user id.  This is used in another SPROC to get their allowed PropertyID list

				--Diag
				--PRINT '@creator = ' + CONVERT(varchar(100),@creator)
				--PRINT '@userid = ' + CONVERT(varchar(30),@userid)


            BEGIN TRY
                DROP TABLE #tmppropertylist
            END TRY
            BEGIN CATCH
            END CATCH

          CREATE TABLE #tmppropertylist (
                UserGUID UNIQUEIDENTIFIER
               ,AGPropertyID INT
               ,RentPropertyID INT
               ,PropertyName VARCHAR(2000)
               ,PropertyCity VARCHAR(2000)
               ,PropertyState VARCHAR(100)
               ,PropertyZip INT
               ,AGStatus INT
               ,RentStatus INT
               ,TotalUserCanSee INT
			   ,ProjectID	nvarchar(128)
			   ,MarketID	nvarchar(128)
			   ,AxioActive	int)

				--get list of allowed PropertyID values for the user on this subscription
            INSERT  INTO #tmppropertylist
                    EXEC Reports.rpt_PropertyDisplay 
                        @creator
                       ,300000
                       ,NULL			--creator is the @userguid

				--if specific one, delete all the ones that are not that specific one.  If that one is not in his list, then he doesn't get ANY.
            IF @propertyid <> 0 
                DELETE  FROM #tmppropertylist
                WHERE   AGPropertyID <> @propertyid
						
				

				--deletes subscription if turns out to be empty list of Properties
            IF (
                SELECT  COUNT(*)
                FROM    #tmppropertylist
               ) = 0 
                BEGIN

                    SET @msgbody = isnull(@msgbody,'') 
					+ 'SubscriptionID ' + CONVERT(VARCHAR(30),@subscriptionid) 
					+' PropertyID '+ convert(varchar(30),@propertyid)
					+' UserGUID "'+convert(varchar(64), @creator)+'"'
					+' UserID "' +convert(varchar(30), @userid)+'"'
					+' Description "'+@description+'"'
					+' Email "'+@to +'" has no associated properties.'+ CHAR(13) + CHAR(10)+ CHAR(13) + CHAR(10)

					BEGIN TRY
					      EXEC RENTPATH.Reports.rpt_Delete_Subscription @subscriptionid,@creator
					  END TRY
					BEGIN CATCH
					  END CATCH


                END

				/* ================================================================================================================================= */

		
				-- Now loop through the properties and do something with the resultset
            DECLARE propertycursor CURSOR
            FOR
            SELECT  AGPropertyID
            FROM    #tmppropertylist
            WHERE   AGPropertyID IS NOT NULL			--diag



            OPEN propertycursor

				-- Loop through all the files for the database  
            FETCH NEXT FROM propertycursor INTO @propid

            WHILE @@FETCH_STATUS = 0 
                BEGIN  
                    INSERT  INTO #tmpemail
                            (SubscriptionID
                            ,[Description]
                            ,Email
                            ,PropertyID
                            ,Report)
                            SELECT  CONVERT(VARCHAR(30),@subscriptionid) AS SubscriptionID
                                   ,@description AS Description
                                   ,@to AS Email
                                   ,@propid AS PropertyID
                                   ,@report AS Report



                    FETCH NEXT FROM propertycursor INTO @propid
                END 

            CLOSE propertycursor
            DEALLOCATE propertycursor


				--Get the next subscriptionid
            FETCH NEXT FROM subscriptioncursor INTO @subscriptionid,@propertyid,@description,@report,@to,@creator
        END 

    CLOSE subscriptioncursor
    DEALLOCATE subscriptioncursor




    IF @dbname = 'RentPath_DEV' 
        BEGIN
            SET @urlleadsag = 'https://dashboard.CI.apartmentguide.com/Home/LeadDetailsUnAuth/'
            SET @urlleadsrent = 'https://dashboard.CI.apartmentguide.com/Home/LeadDetailsUnAuth/'
            SET @urlpageviewsag = 'https://dashboard.CI.rent.com/Home/PageViewDetailsUnAuth/'
            SET @urlpageviewsrent = 'https://dashboard.CI.rent.com/Home/PageViewDetailsUnAuth/'
            SET @urlinsightAG  = 'https://dashboard.CI.apartmentguide.com/DataProfile/InsightReportsUnAuth/'
            SET @urlinsightRent = 'https://dashboard.CI.rent.com/DataProfile/InsightReportsUnAuth/'
        END

    IF @dbname = 'RentPath_QA' 
        BEGIN
            SET @urlleadsag = 'https://dashboard.QA.apartmentguide.com/Home/LeadDetailsUnAuth/'
            SET @urlleadsrent = 'https://dashboard.QA.apartmentguide.com/Home/LeadDetailsUnAuth/'
            SET @urlpageviewsag = 'https://dashboard.QA.rent.com/Home/PageViewDetailsUnAuth/'
            SET @urlpageviewsrent = 'https://dashboard.QA.rent.com/Home/PageViewDetailsUnAuth/'
            SET @urlinsightAG  = 'https://dashboard.QA.apartmentguide.com/DataProfile/InsightReportsUnAuth/'
            SET @urlinsightRent = 'https://dashboard.QA.rent.com/DataProfile/InsightReportsUnAuth/'
        END
		
    IF @dbname = 'RentPath' 
        BEGIN
            SET @urlleadsag = 'https://dashboard.apartmentguide.com/Home/LeadDetailsUnAuth/'
            SET @urlleadsrent = 'https://dashboard.apartmentguide.com/Home/LeadDetailsUnAuth/'
            SET @urlpageviewsag = 'https://dashboard.rent.com/Home/PageViewDetailsUnAuth/'
            SET @urlpageviewsrent = 'https://dashboard.rent.com/Home/PageViewDetailsUnAuth/'
            SET @urlinsightAG  = 'https://dashboard.apartmentguide.com/DataProfile/InsightReportsUnAuth/'
            SET @urlinsightRent = 'https://dashboard.rent.com/DataProfile/InsightReportsUnAuth/'
        END


    SET @HeadlineLeads = 'MyRentPath Leads Report'
    SET @HeadlinePageViews = 'MyRentPath Page Views Report'
    SET @HeadlineInsight = 'MyRentPath Insight Report'
    SET @SubHeading = ''

    BEGIN TRY
        DROP TABLE #tmpalmostfinal
    END TRY
    BEGIN CATCH
    END CATCH

	-- Encrypted date, uses TRIPLE DES algorithm with a 128-bit key
	DECLARE @EncryptedDate varbinary(1000)
	SELECT @EncryptedDate =  ENCRYPTBYPASSPHRASE('L*bgbn8!9w&ng', CONVERT(varchar(10),getdate(),101))

    SELECT  e.*
           ,(CASE WHEN Report = 1
                       AND (ml.AGStatusID = 1) THEN @urlleadsAG
                  WHEN Report = 1
                       AND (ml.RentStatusID = 1) THEN @urlleadsRent
                  WHEN Report = 2
                       AND (ml.AGStatusID = 1) THEN @urlpageviewsAG
                  WHEN Report = 2
                       AND (ml.RentStatusID = 1) THEN @urlpageviewsRent
                  WHEN Report = 4
                       AND (ml.AGStatusID = 1) THEN @urlinsightAG  
                  WHEN Report = 4
                       AND (ml.RentStatusID = 1) THEN @urlinsightRent
                  ELSE NULL
             END) + dl.SFPropertyAcctID + '/' AS URL -- + CONVERT(VARCHAR,@EncryptedDate,2) + '/'  -- add this back in here when ready for encrypted date
           ,(CASE WHEN Report = 1 THEN @HeadlineLeads
                  WHEN Report = 2 THEN @HeadlinePageViews
                  WHEN Report = 4 THEN @HeadlineInsight
                  ELSE ''
             END) AS Headline
           ,dl.PropertyName
    INTO    #tmpalmostfinal
    FROM    #tmpemail e
    LEFT OUTER JOIN RentPath.Dimension.Listings dl WITH (NOLOCK)
            ON dl.PropertyIDAG = e.PropertyID
    LEFT OUTER JOIN #tmpmasterlist ml
            ON ml.AGPropertyID = e.PropertyID
			
	--SELECT * FROM #tmpalmostfinal	
				--Now do the joins to get the final list of information to send as the resultset


	--Do the ones that have multiple email addresses
    INSERT  INTO dbo.Dashboard_Daily_Email_Subscriptions_List
            (Email
            ,SubjectLine
            ,Headline
            ,SubHeading
            ,PropertyName
            ,URL)
            SELECT  '"' + Params.Measure + '"' AS Email
                   ,'"' + [Description] + '"' AS SubjectLine
                   ,'"' + Headline + '"' AS Headline
                   ,'"' + @SubHeading + '"' AS SubHeading
                   ,'"' + PropertyName + '"' AS PropertyName
                   ,'"' + URL + '"' AS URL
            FROM    #tmpalmostfinal cte
            CROSS APPLY Dbautility.dbo.fn_Split(CAST(CONVERT(VARBINARY(MAX),cte.Email) AS VARCHAR(MAX)),(CASE WHEN PATINDEX('%;%',cte.Email) > 0 THEN ';'
                                                                                                              WHEN PATINDEX('%,%',cte.Email) > 0 THEN ','
                                                                                                         END)) AS Params
            WHERE   (URL IS NOT NULL)
                    AND (PATINDEX('%;%',cte.Email) > 0
                         OR PATINDEX('%,%',cte.Email) > 0)
            ORDER BY RecID
                   ,SubscriptionID
                   ,PropertyID

	
	--Do the ones that have single email addresses
    INSERT  INTO dbo.Dashboard_Daily_Email_Subscriptions_List
            (Email
            ,SubjectLine
            ,Headline
            ,SubHeading
            ,PropertyName
            ,URL)
            SELECT  '"' + cte.Email + '"' AS Email
                   ,'"' + [Description] + '"' AS SubjectLine
                   ,'"' + Headline + '"' AS Headline
                   ,'"' + @SubHeading + '"' AS SubHeading
                   ,'"' + PropertyName + '"' AS PropertyName
                   ,'"' + URL + '"' AS URL
            FROM    #tmpalmostfinal cte
            WHERE   (URL IS NOT NULL)
                    AND (PATINDEX('%;%',cte.Email) = 0
                         AND PATINDEX('%,%',cte.Email) = 0)
            ORDER BY RecID
                   ,SubscriptionID
                   ,PropertyID
	--SELECT 	Email, SubjectLine, Headline, SubHeading, PropertyName, URL
	--FROM dbo.Dashboard_Daily_Email_Subscriptions_List
	--ORDER BY RecID


    SET NOCOUNT OFF;


END;






















GO
/****** Object:  StoredProcedure [dbo].[Dashboard_Get_Resultset_For_Advanced_Subcription]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







/*--######################################################################################
*
* Name:	[dbo].[Dashboard_Get_Resultset_For_Advanced_Subscription]
*
* Desc:	Return a resultset for valid property
*
* Test:	
	EXEC dbo.Dashboard_Get_Resultset_For_Advanced_Subcription 18190,100058367
	EXEC dbo.Dashboard_Get_Resultset_For_Advanced_Subcription_BOB 9,92485
 Test:	EXEC dbo.Dashboard_Get_Resultset_For_Advanced_Subcription 4,92485
 SELECT * FROM dbo.DashboardSubscriptions
 SELECT * FROM dbo.AdvancedSubscriptionDataColumns WHERE IsPeriodAccum = 1

EXEC dbo.Dashboard_Get_Resultset_For_Advanced_Subcription 4,0


BEGIN TRANSACTION
UPDATE dbo.DashboardSubscriptions
SET DisplayColumns = DisplayColumns + ',TotalLeads,VideoClicks'
WHERE SubscriptionID = 4
COMMIT TRANSACTION


* SELECT * FROM dbo.DashboardSubscriptions
* Hist:	01	03/23/2015	Bob Langley		Ticket 18155 - Initial Version 
* Hist: 02	01/21/2016	Kimberley Morrow	Ticket 21858 - Add flags for Axio Data Product
* Hist: 03	05/18/2016	Kimberley Morrow	Ticket 23085 - Add flag for Axio MarketID
* Hist: 04	08/25/2016	Bob Langley			Ticket 24008 - changed @sqlcmd to nvarchar(max) and associated execute call (to allow for longer strings)
* Hist: 05	09/14/2016	Bob Langley			TIcket 24185 - fixed INSERT for @propertyid <> 0
--#######################################################################################*/
CREATE PROCEDURE [dbo].[Dashboard_Get_Resultset_For_Advanced_Subcription]
(@subscriptionid	int = NULL
,@propertyid	int = NULL)
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
    SET NOCOUNT ON;

	/* Testing 
	DECLARE @subscriptionid int
	DECLARE @propertyid int
	SET @subscriptionid = 3
	SET @propertyid = 3439	
	*/
	
	DECLARE
		@ErrorMessage					NVARCHAR(4000),
		@ErrorNumber					INT,
		@ErrorSeverity					INT,
		@ErrorState						INT,
		@ErrorLine						INT,
		@ErrorProcedure					NVARCHAR(200)

	DECLARE @codesection	varchar(2000)

	DECLARE @collist nvarchar(max)
	DECLARE @sqlcmd nvarchar(max)
	DECLARE @frequency	int
	
	/*
	Frequency
	1 = Daily
	2 = Weekly
	3 = Monthly	
	*/
	--SELECT SubscriptionID, DisplayColumns FROM dbo.DashboardSubscriptions WHERE SubscriptionID = 9

	DECLARE @userid int
	DECLARE @creator uniqueidentifier

	BEGIN TRY

		SELECT @collist = (SELECT DisplayColumns FROM dbo.DashboardSubscriptions WITH (NOLOCK) WHERE SubscriptionID = @subscriptionid)
		SELECT @frequency = (SELECT Frequency FROM dbo.DashboardSubscriptions WITH (NOLOCK) WHERE SubscriptionID = @subscriptionid)

		SET @creator = (SELECT Creator FROM dbo.DashboardSubscriptions WITH (NOLOCK) WHERE SubscriptionID = @subscriptionid)		--look up the owner's information from the DashboardSubscriptions table
		SET @userid = (SELECT UserID FROM Dimension.vw_DSUM_User WITH (NOLOCK) WHERE UserGUID = @creator)  -- using the owner's information, get their user id.  This is used in another SPROC to get their allowed PropertyID list

		PRINT '@creator = ' + CONVERT(varchar(100),@creator)
		PRINT '@userid = ' + CONVERT(varchar(30),@userid)


		BEGIN TRY
			DROP TABLE #tmppropertylist
		END TRY
		BEGIN CATCH
		END CATCH

		CREATE TABLE #tmppropertylist
		(UserGUID	uniqueidentifier
		,AGPropertyID	int
		,RentPropertyID	int
		,PropertyName	varchar(2000)
		,PropertyCity	varchar(2000)
		,PropertyState	varchar(100)
		,PropertyZip	int
		,AGStatus		int
		,RentStatus		int
		,TotalUserCanSee	int
		,ProjectID		varchar(128)
		,MarketID		varchar(128)
		,AxioActive		int
		)

		SET @codesection = 'get list of allowed PropertyID values for the user on this subscription'
		
		--get list of allowed PropertyID values for the user on this subscription
		if @propertyid = 0
			BEGIN
				INSERT INTO 
				#tmppropertylist
				EXEC Reports.rpt_PropertyDisplay @creator,100000,NULL			--creator is the @userguid
			END
		else
			BEGIN
				INSERT INTO 
				#tmppropertylist
				VALUES(NULL,@propertyid,0,'','','',0,0,0,0,NULL,NULL,0)
			END





		SET @codesection = 'create the dynamic SQL and run it to get resultset'



		--reset the column list to accomodate the weekly or daily values if that is the frequency
		if @frequency = 1 or @frequency = 2
			BEGIN
				BEGIN TRY
					DROP TABLE #tmpcolumns
				END TRY
				BEGIN CATCH
				END CATCH
				
				SELECT LTRIM(RTRIM(Params.measure)) AS ColumnName
				  INTO   #tmpcolumns
				  FROM   Dbautility.dbo.fn_Split(@collist,',')		AS Params
			



				UPDATE #tmpcolumns
				SET ColumnName = 		(CASE WHEN ColumnName IN (SELECT FriendlyColumnName FROM dbo.AdvancedSubscriptionDataColumns WHERE IsPeriodAccum = 1
													) THEN ColumnName + (CASE WHEN @frequency = 1 THEN 'daily' ELSE 'weekly' END) + ' AS ' + ColumnName
										ELSE ColumnName
										END)
			

						--rebuild column list with the new values in the temp table
						SET @collist= CONVERT(varchar(4000),STUFF(
											(
												SELECT  ',' + CONVERT(varchar(4000),dl3.ColumnName)
												FROM #tmpcolumns dl3 WITH (NOLOCK)
												FOR XML PATH(''), type
											).value('.','varchar(4000)'),1,1,''
										)) --AS ColumnNames




			END




	/*
	Frequency
	1 = Daily
	2 = Weekly
	3 = Monthly	
	*/


		SET @sqlcmd = 'SELECT ' + @collist + ' FROM Staging.DashboardAdvancedSubscriptionMainData WITH (NOLOCK)' + ' WHERE AGPropertyID IN (SELECT AGPropertyID FROM #tmppropertylist)'
		PRINT @sqlcmd

		EXECUTE sp_executesql   
		@sqlcmd

	END TRY
	BEGIN CATCH
		SELECT 
			@ErrorMessage		= ERROR_MESSAGE(),
			@ErrorNumber		= ERROR_NUMBER(),
			@ErrorSeverity		= ERROR_SEVERITY(),
			@ErrorState			= ERROR_STATE(),
			@ErrorLine			= ERROR_LINE(),
			@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');

		SET @ErrorMessage = 'Attempting to send back resultset for advanced subscription ID ' + CONVERT(varchar(30),@subscriptionid) + '. Error in code section - ' + @codesection + '   Error - ' + @ErrorMessage




		raiserror(@ErrorMessage,16,1) with log;

		RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	
	END CATCH


	SET NOCOUNT OFF;
END;










GO
/****** Object:  StoredProcedure [dbo].[Dashboard_Set_Advanced_Subscription_Main_Data]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO












/*--######################################################################################
*
* Name:	[dbo].[Dashboard_Set_Advanced_Subscription_Main_Data]
*
* Desc:	Creates a table (drops and re-creates) that is used for the main data for the Advanced Subscription FTP resultset
*
* Test:	EXEC dbo.Dashboard_Set_Advanced_Subscription_Main_Data
* SELECT * FROM Staging.DashboardAdvancedSubscriptionMainData WITH (NOLOCK)
*
* Hist:	01	04/29/2015	Bob Langley		Ticket 18155 - Initial Version 
* Hist: 02	06/09/2015	Bob Langley		Ticket 19612 - Changed to do daily, weekly and monthly versions of the date values to use the appropriate value according to the Frequency. And fixed spelling of ActiveAmenities.
* Hist: 03	07/02/2015	Bob Langley		Ticket XXXXX - Changed to load Combined Dimension Listings to a temp table so can eliminate duplicate records (so process will continue running)
* Hist: 04	08/06/2015	Bob Langlely	Ticket 20231 - Add new columns AGDesktopPhoneNumber, AGMobilePhoneNumber, AGDestinationNumber, AGLeadEmailRecipient, RentDesktopPhoneNumber, RentMobilePhoneNumber, RentDestinationNumber, RentLeadEmailRecipient, AGPackageType, RentPackageType
* Hist: 05	08/24/2015	Shetal Gandhi	Ticket 20421 - Modified to use the New Rentpath tables instead of the AG Combined views
* Hist: 06	10/01/2015	Bob Langley		Ticket 20986 - Modified to print english words for the coded value for placement tiers for AG and Rent, and to add new Product and cost values to invoice data table (For AG, Rent and Combo).
* Hist: 07	06/14/2016	Kimberley Morrow Ticket 23280 - Change communityid to accountid
* Hist: 08	11/10/2016  Bob Langley     Ticket 24695 - add Ext_PropertyID column from Rentpath.Dimension.Listings
--#######################################################################################*/
CREATE PROCEDURE [dbo].[Dashboard_Set_Advanced_Subscription_Main_Data]
AS
BEGIN

    SET NOCOUNT ON;
		SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
   DECLARE @TrackDate DATETIME
       ,@LengthInSeconds INT
       ,@DatabaseName VARCHAR(128)
                
    SET @TrackDate = GETDATE()
    SET @LengthInSeconds = 0
    SET @DatabaseName = DB_NAME()        
		
    EXEC DBAUtility.dbo.pr_Logging_StoredProcsNoTemp 
        @DatabaseName = @DatabaseName
       , -- varchar(128)
        @ProcName = 'dbo.Dashboard_Set_Advanced_Subscription_Main_Data'
       , -- varchar(128)
        @StepName = 'Execute Procedure'
       , -- varchar(128)
        @VariableStates = ''
       , -- varchar(500)
        @LengthInSeconds = @LengthInSeconds
       , -- int
        @Comments = 'Execute Procedure, RptProd Tables'; -- varchar(500)

	DECLARE
		@ErrorMessage					NVARCHAR(4000),
		@ErrorNumber					INT,
		@ErrorSeverity					INT,
		@ErrorState						INT,
		@ErrorLine						INT,
		@ErrorProcedure					NVARCHAR(200)

	DECLARE @codesection	varchar(2000)

	DECLARE @curryearmonth	int

	DECLARE @urlleadsag	varchar(2000)
	DECLARE @urlleadsrent	varchar(2000)
	DECLARE @urlpageviewsag	varchar(2000)
	DECLARE @urlpageviewsrent	varchar(2000)
	DECLARE @dbname varchar(300)
	SET @dbname = CONVERT(Varchar(300),DB_NAME())
	/* ======================================================================================== */
	--monthly dates
	DECLARE @startYMDID int
	DECLARE @endYMDID int
	DECLARE @datetouse datetime

	SET @datetouse = GETDATE()					--CAST(CONVERT(VARCHAR(8),DATEADD(m,DATEDIFF(m,0,GETDATE()),0),112) AS datetime)		--first of month for testing
	SET @startYMDID = CAST(CONVERT(VARCHAR(8),DATEADD(m,-1,DATEADD(m,DATEDIFF(m,0,@datetouse),0)),112) AS INT)
	SET @endYMDID = CAST(CONVERT(VARCHAR(8),DATEADD(d,-1,DATEADD(m,1,DATEADD(m,-1,DATEADD(m,DATEDIFF(m,0,@datetouse),0)))),112) AS INT)

	SET @curryearmonth = CONVERT(int,CONVERT(int, Convert(varchar(10),GETDATE(),112)) * .01)		--year month as of today


	PRINT '@startYMDID = ' + CONVERT(varchar(30),@startYMDID)
	PRINT '@endYMDID = ' + CONVERT(varchar(30),@endYMDID)
	PRINT '@curryearmonth = ' + CONVERT(varchar(30),@curryearmonth)

	--Weekly dates
	DECLARE @startYMDIDweekly	int
	DECLARE @endYMDIDweekly		int

	DECLARE @dayofweek int
	DECLARE @offset int
	SET @dayofweek = DATEPART(dw,@datetouse)
	SET @endYMDIDweekly = CONVERT(int, Convert(varchar(10),DATEADD(dd,@dayofweek * (-1),@datetouse),112))
	SET @startYMDIDweekly = CONVERT(int, Convert(varchar(10),DATEADD(dd,-6,CONVERT(datetime,CONVERT(varchar(8),@endYMDIDweekly))),112))



	--daily dates (yesterday)
	DECLARE @startYMDIDdaily	int
	DECLARE @endYMDIDdaily		int

	SET @startYMDIDdaily = CONVERT(int, Convert(varchar(10),DATEADD(dd,-1,@datetouse),112))
	SET @endYMDIDdaily = CONVERT(int, Convert(varchar(10),DATEADD(dd,-1,@datetouse),112))

	--SELECT @datetouse AS DateToUse
	--SELECT @startYMDIDdaily AS StartDaily
	--SELECT @endYMDIDdaily AS EndDaily
	--SELECT @startYMDIDweekly AS StartWeekly
	--SELECT @endYMDIDweekly AS EndWeekly
	--SELECT @startYMDID AS StartMonthly
	--SELECT @endYMDID AS EndMonthly
	/* ======================================================================================== */
	--BEGIN TRY
	--	DROP TABLE #tmpmasterlisting
	--END TRY
	--BEGIN CATCH
	--END CATCH
	
	BEGIN TRY
		DROP TABLE #tmpmasterlist
	END TRY
	BEGIN CATCH
	END CATCH

	BEGIN TRY
		DROP TABLE #tmpml
	END TRY
	BEGIN CATCH
	END CATCH
	
	BEGIN TRY
		DROP TABLE #tmpagrml
	END TRY
	BEGIN CATCH
	END CATCH	
	
	BEGIN TRY
		DROP TABLE #tmpagrmlweekly
	END TRY
	BEGIN CATCH
	END CATCH

	BEGIN TRY
		DROP TABLE #tmpagrmldaily
	END TRY
	BEGIN CATCH
	END CATCH


	BEGIN TRY
		DROP TABLE #tmpcr3
	END TRY
	BEGIN CATCH
	END CATCH	
	
	BEGIN TRY
		DROP TABLE #tmpagrdl
	END TRY
	BEGIN CATCH
	END CATCH	
	
	BEGIN TRY
		DROP TABLE #tmpagrdlagr
	END TRY
	BEGIN CATCH
	END CATCH
	
	BEGIN TRY
		DROP TABLE #tmpagrdlnosum
	END TRY
	BEGIN CATCH
	END CATCH
	
	BEGIN TRY
		DROP TABLE #tmpurl
	END TRY
	BEGIN CATCH
	END CATCH
		
	BEGIN TRY
		DROP TABLE #tmpmisc
	END TRY
	BEGIN CATCH
	END CATCH
	
	BEGIN TRY
		DROP TABLE #tmpfinalresult
	END TRY
	BEGIN CATCH
	END CATCH

	BEGIN TRY
		DROP TABLE #tmpcombdimlistings
	END TRY
	BEGIN CATCH
	END CATCH

	
	BEGIN TRY
		SET @codesection = 'Get the master list of listings'
		


		--Get unified data from ApartmentGuide.Dimension.Listings
		--;WITH cte AS
		--(
		--	SELECT DISTINCT ListingID FROM #tmpcombdimlistings dl WITH (NOLOCK)
		--)
			SELECT dl.ListingID
			, PropertyIDAG	AS AGPropertyID	--AGPropertyID on the AG website line
			, dl.PropertyIDRent AS RentPropertyID
			, ISNULL(dl.PropertyZipCode,0) AS ZipCode		--(CASE WHEN dlag.ZipCode > dlr.ZipCode THEN dlag.ZipCode ELSE dlr.ZipCode END) AS ZipCode
			, dl.MgtCoIDAG AS AGMgtCoID
			, dl.MgtCoIDRent AS RentMgtCoID
			, ISNULL(dl.StatusIDAG,0) AS AGStatusID
			, ISNULL(dl.StatusIDRent,0) AS RentStatusID
			INTO #tmpmasterlist
			FROM Rentpath.Dimension.Listings AS dl
			ORDER BY dl.ListingID

		ALTER TABLE #tmpmasterlist ADD CONSTRAINT PK_tmpmasterlist_4419111_ListingID PRIMARY KEY CLUSTERED (ListingID);
		CREATE NONCLUSTERED INDEX NI_tmpmasterlist_4419111_AGPropertyID ON #tmpmasterlist(AGPropertyID);





		SET @codesection = 'Get the AG Mart.Listings information'
		
		--Get the AG Mart.Listings information
		SELECT cte.ListingID
		, SUM(ISNULL(CONVERT(int,ml.ClicksReserveNow),0)) AS ReserveNowClicks
		, SUM(ISNULL(CONVERT(int,ml.ViewsListingPageSites),0)) AS AGSitesPageViews
		INTO #tmpml
		FROM #tmpmasterlist cte
		LEFT OUTER JOIN Rentpath.Mart.Listings ml WITH (NOLOCK)
			ON ml.ListingID = cte.ListingID 
			AND (ml.StatusIDAG = 1  OR ml.StatusIDRent = 1)
			AND ml.YMDID BETWEEN @startYMDID AND @endYMDID
		GROUP BY 
		cte.ListingID

		ALTER TABLE #tmpml ADD CONSTRAINT PK_Main_Data_4419111_tmpml_ListingID PRIMARY KEY CLUSTERED (ListingID);


		SET @codesection = 'Get the Mart.Listings information'

		--Get the Mart Listings information MONTHLY
		SELECT cte.ListingID
		, SUM(ISNULL(CONVERT(int,agrml.[PhoneLeads]),0)) AS TotalPhoneLeads
		, SUM(ISNULL(CONVERT(int,agrml.[AllLeads]),0)) AS TotalLeads
		, SUM(ISNULL(CONVERT(int,agrml.[EmailLeads]),0)) AS TotalEmailLeads
		, SUM(ISNULL(CONVERT(int,agrml.[UniqueVisits]),0)) AS UniqueDetailVisits
		, SUM(ISNULL(CONVERT(int,agrml.[UniqueVisitsMobile]),0)) AS MobileDetailUniqueVisits
		, SUM(ISNULL(CONVERT(int,agrml.[ViewsListingPageWeb]),0)) AS DetailPageViews
		, SUM(ISNULL(CONVERT(int,agrml.[ViewsListingPageMobile]),0)) AS MobileDetailPageViews
		--, SUM(ISNULL(CONVERT(int,agrml.ClicksSpotlightListing),0)) AS SpotlightClicks
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksCommunityVideoAG]),0)) AS VideoClicks
		--, SUM(ISNULL(CONVERT(int,agrml.ClicksSpotlightCommunityVideo),0)) AS SpotlightVideoClicks
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksWebURL]),0)) AS PropertyWebLinkClicks
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksMgtCoURLAG]),0)) + SUM(ISNULL(CONVERT(int,agrml.[ClicksMgtCoURLRent]),0)) AS MgtCoWebLinkClicks
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksMap]),0)) AS PropertyMapClicks
		--, SUM(ISNULL(CONVERT(int,agrml.ClicksMapDirections),0)) AS MapDirectionClicks
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksPhotos]),0)) AS PhotoClicks
		--, SUM(ISNULL(CONVERT(int,agrml.ClicksSpotlightPhotos),0)) AS SpotlightPhotoClicks
		--, SUM(ISNULL(CONVERT(int,agrml.ClicksSpotlightPhotoPopup),0)) AS SpotlightPhotoPopupClicks
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksFloorplan]),0)) AS FloorplanClicks
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksHDPanoTour]),0)) AS PanoramicToursClicks
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksHDVideo]),0)) AS HDVideosClicks
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksHDPhoto]),0)) AS HDPhotosClicks
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksMgtCoPeelAd]),0)) AS MgtCoPeelAdClicks
		, SUM(ISNULL(CONVERT(int,agrml.[SRPListingImpr]),0)) AS SearchResultsImpressions
		--, SUM(ISNULL(CONVERT(int,agrml.ImprFrontCover),0)) AS DetailDiamondMaxImpressions
		, SUM(ISNULL(CONVERT(int,agrml.[SRPUniqueVisit]),0)) AS DetailVisitCountImpressions
		INTO #tmpagrml
		FROM #tmpmasterlist cte
		LEFT OUTER JOIN Rentpath.Mart.Listings agrml WITH (NOLOCK)
			ON agrml.ListingID = cte.ListingID 
			AND (agrml.StatusIDAG = 1  OR agrml.StatusIDRent = 1)
			AND agrml.YMDID BETWEEN @startYMDID AND @endYMDID
		GROUP BY  cte.ListingID

		ALTER TABLE #tmpagrml ADD CONSTRAINT PK_Main_Data_4419111_tmpagrml_ListingID PRIMARY KEY CLUSTERED (ListingID);


		--Get the Mart.Listings information	- WEEKLY
		SELECT cte.ListingID
		, SUM(ISNULL(CONVERT(int,agrml.[PhoneLeads]),0)) AS TotalPhoneLeadsweekly
		, SUM(ISNULL(CONVERT(int,agrml.[AllLeads]),0)) AS TotalLeadsweekly
		, SUM(ISNULL(CONVERT(int,agrml.[EmailLeads]),0)) AS TotalEmailLeadsweekly
		, SUM(ISNULL(CONVERT(int,agrml.[UniqueVisits]),0)) AS UniqueDetailVisitsweekly
		, SUM(ISNULL(CONVERT(int,agrml.[UniqueVisitsMobile]),0)) AS MobileDetailUniqueVisitsweekly
		, SUM(ISNULL(CONVERT(int,agrml.[ViewsListingPageWeb]),0)) AS DetailPageViewsweekly
		, SUM(ISNULL(CONVERT(int,agrml.[ViewsListingPageMobile]),0)) AS MobileDetailPageViewsweekly
		--, SUM(ISNULL(CONVERT(int,agrml.ClicksSpotlightListing),0)) AS SpotlightClicksweekly
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksCommunityVideoAG]),0)) AS VideoClicksweekly
		--, SUM(ISNULL(CONVERT(int,agrml.ClicksSpotlightCommunityVideo),0)) AS SpotlightVideoClicksweekly
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksWebURL]),0)) AS PropertyWebLinkClicksweekly
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksMgtCoURLAG]),0)) + SUM(ISNULL(CONVERT(int,agrml.[ClicksMgtCoURLRent]),0)) AS MgtCoWebLinkClicksweekly
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksMap]),0)) AS PropertyMapClicksweekly
		--, SUM(ISNULL(CONVERT(int,agrml.ClicksMapDirections),0)) AS MapDirectionClicksweekly
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksPhotos]),0)) AS PhotoClicksweekly
		--, SUM(ISNULL(CONVERT(int,agrml.ClicksSpotlightPhotos),0)) AS SpotlightPhotoClicksweekly
		--, SUM(ISNULL(CONVERT(int,agrml.ClicksSpotlightPhotoPopup),0)) AS SpotlightPhotoPopupClicksweekly
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksFloorplan]),0)) AS FloorplanClicksweekly
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksHDPanoTour]),0)) AS PanoramicToursClicksweekly
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksHDVideo]),0)) AS HDVideosClicksweekly
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksHDPhoto]),0)) AS HDPhotosClicksweekly
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksMgtCoPeelAd]),0)) AS MgtCoPeelAdClicksweekly
		, SUM(ISNULL(CONVERT(int,agrml.[SRPListingImpr]),0)) AS SearchResultsImpressionsweekly
		--, SUM(ISNULL(CONVERT(int,agrml.ImprFrontCover),0)) AS DetailDiamondMaxImpressionsweekly
		, SUM(ISNULL(CONVERT(int,agrml.[SRPUniqueVisit]),0)) AS DetailVisitCountImpressionsweekly
		INTO #tmpagrmlweekly
		FROM #tmpmasterlist cte
		LEFT OUTER JOIN Rentpath.Mart.Listings agrml WITH (NOLOCK)
			ON agrml.ListingID = cte.ListingID 
			AND (agrml.StatusIDAG = 1 OR agrml.StatusIDRent = 1) 
			AND agrml.YMDID BETWEEN @startYMDIDweekly AND @endYMDIDweekly
		GROUP BY 
		cte.ListingID

		ALTER TABLE #tmpagrmlweekly ADD CONSTRAINT PK_Main_Data_4419111_tmpagrmlweekly_ListingID PRIMARY KEY CLUSTERED (ListingID);


		--Get the Mart.Listings information - DAILY
		SELECT cte.ListingID
		, SUM(ISNULL(CONVERT(int,agrml.[PhoneLeads]),0)) AS TotalPhoneLeadsdaily
		, SUM(ISNULL(CONVERT(int,agrml.[AllLeads]),0)) AS TotalLeadsdaily
		, SUM(ISNULL(CONVERT(int,agrml.[EmailLeads]),0)) AS TotalEmailLeadsdaily
		, SUM(ISNULL(CONVERT(int,agrml.[UniqueVisits]),0)) AS UniqueDetailVisitsdaily
		, SUM(ISNULL(CONVERT(int,agrml.[UniqueVisitsMobile]),0)) AS MobileDetailUniqueVisitsdaily
		, SUM(ISNULL(CONVERT(int,agrml.[ViewsListingPageWeb]),0)) AS DetailPageViewsdaily
		, SUM(ISNULL(CONVERT(int,agrml.[ViewsListingPageMobile]),0)) AS MobileDetailPageViewsdaily
		--, SUM(ISNULL(CONVERT(int,agrml.ClicksSpotlightListing),0)) AS SpotlightClicksdaily
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksCommunityVideoAG]),0)) AS VideoClicksdaily
		--, SUM(ISNULL(CONVERT(int,agrml.ClicksSpotlightCommunityVideo),0)) AS SpotlightVideoClicksdaily
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksWebURL]),0)) AS PropertyWebLinkClicksdaily
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksMgtCoURLAG]),0)) + SUM(ISNULL(CONVERT(int,agrml.[ClicksMgtCoURLRent]),0)) AS MgtCoWebLinkClicksdaily
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksMap]),0)) AS PropertyMapClicksdaily
		--, SUM(ISNULL(CONVERT(int,agrml.ClicksMapDirections),0)) AS MapDirectionClicksdaily
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksPhotos]),0)) AS PhotoClicksdaily
		--, SUM(ISNULL(CONVERT(int,agrml.ClicksSpotlightPhotos),0)) AS SpotlightPhotoClicksdaily
		--, SUM(ISNULL(CONVERT(int,agrml.ClicksSpotlightPhotoPopup),0)) AS SpotlightPhotoPopupClicksdaily
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksFloorplan]),0)) AS FloorplanClicksdaily
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksHDPanoTour]),0)) AS PanoramicToursClicksdaily
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksHDVideo]),0)) AS HDVideosClicksdaily
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksHDPhoto]),0)) AS HDPhotosClicksdaily
		, SUM(ISNULL(CONVERT(int,agrml.[ClicksMgtCoPeelAd]),0)) AS MgtCoPeelAdClicksdaily
		, SUM(ISNULL(CONVERT(int,agrml.[SRPListingImpr]),0)) AS SearchResultsImpressionsdaily
		--, SUM(ISNULL(CONVERT(int,agrml.ImprFrontCover),0)) AS DetailDiamondMaxImpressionsdaily
		, SUM(ISNULL(CONVERT(int,agrml.[SRPUniqueVisit]),0)) AS DetailVisitCountImpressionsdaily
		INTO #tmpagrmldaily
		FROM #tmpmasterlist cte
		LEFT OUTER JOIN Rentpath.Mart.Listings AS  agrml WITH (NOLOCK)
			ON agrml.ListingID = cte.ListingID 
			AND (agrml.StatusIDAG = 1 OR agrml.StatusIDRent = 1) 
			AND agrml.YMDID BETWEEN @startYMDIDdaily AND @endYMDIDdaily
		GROUP BY 
		cte.ListingID

		ALTER TABLE #tmpagrmldaily ADD CONSTRAINT PK_Main_Data_4419111_tmpagrmldaily_ListingID PRIMARY KEY CLUSTERED (ListingID);











		SET @codesection = 'Get the CR3 information'

		--Get the CR3 information
		SELECT
			cte.ListingID
			, MAX(ISNULL(CONVERT(int,cr3.NumCertRatingsReviews),0)) AS NumberofCertifiedReview
		INTO #tmpcr3
		FROM #tmpmasterlist cte
		LEFT OUTER JOIN Staging.DashboardCR3Info cr3 WITH (NOLOCK)
			ON cr3.ListingID = cte.ListingID
		GROUP BY 
		cte.ListingID

		ALTER TABLE #tmpcr3 ADD CONSTRAINT PK_Main_Data_4419111_tmpcr3_ListingID PRIMARY KEY CLUSTERED (ListingID);

		SET @codesection = 'Get the Dimension.Listings information'

		--Get the Dimension.Listings information
		SELECT
		cte.ListingID AS ListingID
		, MAX(ISNULL(CONVERT(int,agrdl.[LowPrice]),0)) AS LowRentalRate
		, MAX(ISNULL(CONVERT(int,agrdl.[HighPrice]),0)) AS HighRentalRate
		, MAX(ISNULL(CONVERT(int,agrdl.[ActiveCoupon]),0)) AS ActiveCoupononSite
		, MAX(agrdl.[WebCouponExpirationDate]) AS CouponExpirationDate
		, MAX(agrdl.[WebCouponStartDate]) AS CouponStartDate
		, MAX(ISNULL(CONVERT(int,agrdl.[ActiveHDFloorplans]),0)) AS ActiveHDFloorplans
		, MAX(ISNULL(CONVERT(int,agrdl.[ActiveHDPhotos]),0)) AS ActiveHDPhotos
		, MAX(ISNULL(CONVERT(int,agrdl.[ActivePhotos]),0)) AS ActivePhotos
		, MAX(ISNULL(CONVERT(int,agrdl.[ActiveAmenities]),0)) AS ActiveAmenities
		, MAX(ISNULL(CONVERT(int,agrdl.[ActiveFloorplans]),0)) AS ActiveFloorplans
		, MAX(ISNULL(CONVERT(varchar(300),agrdl.[ExternalID]),'')) AS ExternalPropertyID
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellHDPhoto]),0)) AS HDPhoto
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellHDVideo]),0)) AS HDVideo
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellHighlighted]),0)) AS Highlighted
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellMobileDiamond]),0)) AS MobileDiamond
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellMobileSpotlight]),0)) AS MobileSpotLight
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellPayPerLead]),0)) AS PayPerLead
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellPayPerLease]),0)) AS PayPerLease
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellCarouselRentals]),0)) AS RentalsCarousel
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellListingRentals]),0)) AS RentalsListing
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellSpotlightRentals]),0)) AS RentalsSpotlight
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellStandardListingRentals]),0)) AS RentalsStandard
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellStandardPlusListingRentals]),0)) AS RentalsStandardPlu
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellSponsoredApartment]),0)) AS SponsoredApartment
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellSpotlightAG]),0)) AS SpotLight
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellMgmtPeelAd]),0)) AS ManagementPeelAd
		, MAX(ISNULL(CONVERT(int,agrdl.[CallRecordingOptOut]),0)) AS CallRecording
		--, MAX(ISNULL(CONVERT(int,agrdl.UpsellPropCommunityVideo),0)) AS CommunityVideo
		--, MAX(ISNULL(CONVERT(int,agrdl.UpsellPropDynamicLeadForm),0)) AS DynamicLeadForm
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellFeaturedCommunityAG]),0)) AS GoldFeaturedCommunity
		--, MAX(ISNULL(CONVERT(int,agrdl.UpsellPropFeaturedCommunityPlatinum),0)) AS PlatinumFeaturedCommunity
		--, MAX(ISNULL(CONVERT(int,agrdl.UpsellPropFeaturedCommunitySilver),0)) AS SilverFeaturedCommunity
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellMobileDeal]),0)) AS MobileDeal
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellPhotoUpgrade]),0)) AS PhotoUpgrade
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellPremiumUpgrade]),0)) AS PremiumUpgrade
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellFeaturedListingRentals]),0)) AS RentalsFeatured
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellPremierListingRentals]),0)) AS RentalsPremier
		--, MAX(ISNULL(CONVERT(int,agrdl.UpsellPropRepMon),0)) AS ReputationMonitor
		--, MAX(ISNULL(CONVERT(int,agrdl.UpsellPropSocialMediaMan),0)) AS SocialMediaManager
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellFeaturedCommunityRent]),0)) AS RentFeaturedPlacement
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellPrecisionTargetedEmailRent]),0)) AS RentPTE
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellVIPPlacementRent]),0)) AS RentVIPPlacement
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellLinked3DFloorplan]),0)) AS Linked3DFloorplans
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellLinkedRoomPlanner]),0)) AS LinkedRoomPlanner
		, MAX(ISNULL(CONVERT(int,agrdl.PropertyTotalUnits),0)) AS TotalUnits
		, MAX(ISNULL(CONVERT(int,agrdl.ShowOfficeHours),0)) AS ShowsOfficeHours
		, MAX(ISNULL(CONVERT(int,agrdl.ShowPricing),0)) AS ShowsPricing
		, MAX(ISNULL(CONVERT(int,agrdl.Whisper),0)) AS Whisper
		--, MAX(ISNULL(CONVERT(int,agrdl.UpsellList30SecondVideo),0)) AS [30SecondVideoUpsell]
		, MAX(ISNULL(CONVERT(int,agrdl.[Upsell3DFloorplan]),0)) AS [3DFloorplanUpsell]
		--, MAX(ISNULL(CONVERT(int,agrdl.UpsellList60SecondVideo),0)) AS [60SecondVideoUpsell]
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellAGSites]),0)) AS AGSitesUpsell
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellCarousel]),0)) AS CommunityCarousel
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellCoupon]),0)) AS Coupon
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellDiamondCity]),0)) AS DiamondCity
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellDiamondMax]),0)) AS DiamondMax
		, MAX(ISNULL(CONVERT(int,agrdl.[UpsellDiamondMetro]),0)) AS DiamondMetro
		--, MAX(ISNULL(CONVERT(int,agrdl.UpsellListEZPay),0)) AS EasyPay
		--, MAX(ISNULL(CONVERT(int,agrdl.UpsellListFloorplanUpgrade),0)) AS FloorplanUpgrade
		, MAX(CONVERT(int,0))  AS CategoryBadge													--MAX(ISNULL(CONVERT(int,agrdl.Badgeupsellfor7upsells),0))
		, MAX(WebTollFreeAG) AS AGDesktopPhoneNumber
		, MAX(MobileTollFreeAG) AS AGMobilePhoneNumber
		, MAX(WebMobileTargetAG) AS AGDestinationNumber
		, MAX(LeadEmailWithTypeAG) AS AGLeadEmailRecipient
		, MAX(WebTollFreeRent) AS RentDesktopPhoneNumber
		, MAX(MobileTollFreeRent) AS RentMobilePhoneNumber
		, MAX(WebTargetRent) AS RentDestinationNumber
		, MAX(LeadEmailWithTypeRent) AS RentLeadEmailRecipient
		INTO #tmpagrdl
		FROM #tmpmasterlist cte
		LEFT OUTER JOIN  Rentpath.Dimension.Listings AS agrdl
			ON agrdl.ListingID = cte.ListingID
		GROUP BY 
		cte.ListingID

		ALTER TABLE #tmpagrdl ADD CONSTRAINT PK_Main_Data_4419111_tmpagrdl_ListingID PRIMARY KEY CLUSTERED (ListingID);


		SET @codesection = 'Get the AG and Rent Dimension info'


  
  		--Get the AG and Rent Dimension info
		SELECT
		cte.ListingID
		, ISNULL(CONVERT(int,agrdl.PropertyIDAG),0) AS AGPropertyID
		, ISNULL(CONVERT(int,agrdl.PropertyIDRent),0) AS RentPropertyID
		, ISNULL(CONVERT(int,agrdl.InternetProductPoints + agrdl.LegacyLoyaltyPoints + agrdl.ContractLoyaltyPoints + agrdl.MobilePoints),0)  AS TotalPoints		--which one?  AG or RENT or both
		, (CASE WHEN agrdl.PlacementTierAG = 5 THEN CONVERT(varchar(20),'Diamond')
				WHEN agrdl.PlacementTierAG = 10 THEN CONVERT(varchar(20),'Platinum')
				WHEN agrdl.PlacementTierAG = 20 THEN CONVERT(varchar(20),'Gold')
				WHEN agrdl.PlacementTierAG = 30 THEN CONVERT(varchar(20),'Silver')
				ELSE CONVERT(varchar(20),'') END)  AS AGPlacementTier
		, (CASE WHEN agrdl.PlacementTierRent = 5 THEN CONVERT(varchar(20),'Diamond')
				WHEN agrdl.PlacementTierRent = 10 THEN CONVERT(varchar(20),'Platinum')
				WHEN agrdl.PlacementTierRent = 20 THEN CONVERT(varchar(20),'Gold')
				WHEN agrdl.PlacementTierRent = 30 THEN CONVERT(varchar(20),'Silver')
				ELSE CONVERT(varchar(20),'') END)   AS RentPlacementTier
		, ISNULL(CONVERT(varchar(300),agrdl.MgtCoNameAG),'')  AS AGMgtCoName
		, ISNULL(CONVERT(varchar(300),agrdl.MgtCoNameRent),'')  AS RentMgtCoName
		, ISNULL(CONVERT(varchar(300),CASE WHEN agrdl.PropertyName IS NULL THEN agrdl.PropertyName ELSE agrdl.PropertyName END),'') AS PropertyName
		, ISNULL(CONVERT(varchar(300),CASE WHEN agrdl.PropertyName IS NULL THEN agrdl.PropertyAddress ELSE agrdl.PropertyAddress END),'') AS PropertyAddress
		, ISNULL(CONVERT(varchar(300),CASE WHEN agrdl.PropertyName IS NULL THEN agrdl.PropertyCity ELSE agrdl.PropertyCity END),'') AS PropertyCity
		, ISNULL(CONVERT(varchar(300),CASE WHEN agrdl.PropertyName IS NULL THEN agrdl.PropertyState ELSE agrdl.PropertyState END),'') AS PropertyState
		, ISNULL(CONVERT(int,CASE WHEN agrdl.PropertyName IS NULL THEN agrdl.PropertyZipCode ELSE agrdl.PropertyZipCode END),0) AS PropertyZipCode
		, ISNULL(CONVERT(int,agrdl.CR3AvgOverallRatingAG),0)  AS AGAvgOverallRatings
		, ISNULL(CONVERT(int,agrdl.CR3AvgOverallRatingRent),0) AS RentAvgOverallRatings
		, ISNULL(CONVERT(int,agrdl.UpsellHDPanoTour),0)  AS AGHDPanoTours				--AG specific
		, ISNULL(CONVERT(int,agrdl.StatusIDAG),0)  AS AGStatusID							--over the time period with MAX() (in Mart.CombinedListings) or snapshot in Dimension.CombinedListings
		, ISNULL(CONVERT(int,agrdl.StatusIDRent),0)  AS RentStatusID						--over the time period with MAX() (in Mart.CombinedListings) or snapshot in Dimension.CombinedListings
		INTO #tmpagrdlagr
		FROM #tmpmasterlist cte
		LEFT OUTER JOIN Rentpath.Dimension.Listings AS agrdl
			ON agrdl.ListingID = cte.ListingID 
	
		ALTER TABLE #tmpagrdlagr ADD CONSTRAINT PK_Main_Data_4419111_tmpagrdlagr_ListingID PRIMARY KEY CLUSTERED (ListingID);


		SET @codesection = 'Get the dimension info that does not need summing'

		--Get the dimension info that does not need summing
		SELECT
		cte.ListingID
		--, ISNULL(CONVERT(int,agrdl.UpsellMetroFeaturedListingRent),0) AS RentMetroFeaturedListing			--Rent specific?????
		, ISNULL(CONVERT(int,agrdl.UpsellSpotlightRent),0) AS RentSpotlight						--Rent specific?????
		, ISNULL(CONVERT(int,agrdl.UpsellSubscriptionModelRent),0) AS RentSubscription			--Rent specific?????
		, ISNULL(CONVERT(varchar(300),agrdl.WebCouponText),'') AS CouponText
		INTO #tmpagrdlnosum
		FROM #tmpmasterlist cte
		LEFT OUTER JOIN Rentpath.Dimension.Listings AS agrdl
			ON agrdl.ListingID = cte.ListingID 
	 

		ALTER TABLE #tmpagrdlnosum ADD CONSTRAINT PK_Main_Data_4419111_tmpagrdlnosum_ListingID PRIMARY KEY CLUSTERED (ListingID);

		SET @codesection = 'Get URL information'

		--Get URL information
		SELECT cte.ListingID
		, ISNULL(CONVERT(varchar(300),urlag.PropertyURL),'')  AS AGPropertyURL
		, ISNULL(CONVERT(varchar(300),urlr.PropertyURL),'')  AS RentPropertyURL
		INTO #tmpurl
		FROM #tmpmasterlist cte
		LEFT OUTER JOIN Staging.DashboardURLInfo urlag WITH (NOLOCK)
			ON urlag.ListingID = cte.ListingID AND urlag.Website = 'AG'
		LEFT OUTER JOIN Staging.DashboardURLInfo urlr WITH (NOLOCK)
			ON urlr.ListingID = cte.ListingID AND urlr.Website = 'Rent'
	
		ALTER TABLE #tmpurl ADD CONSTRAINT PK_Main_Data_4419111_tmpurl_ListingID PRIMARY KEY CLUSTERED (ListingID);

		DECLARE @ymdid int
		SET @ymdid = (SELECT TOP 1 agrdl.YMDID FROM Rentpath.Dimension.Listings agrdl WITH (NOLOCK))

		SET @codesection = 'Get the rest of the information'


		if @dbname = 'RentPath'
			BEGIN
				SET @urlleadsag = 'http://dashboard.apartmentguide.com/Home/LeadDetailsUnAuth/'
				SET @urlleadsrent = 'http://dashboard.apartmentguide.com/Home/LeadDetailsUnAuth/'
				SET @urlpageviewsag = 'http://dashboard.rent.com/Home/PageViewDetailsUnAuth/'
				SET @urlpageviewsrent = 'http://dashboard.rent.com/Home/PageViewDetailsUnAuth/'
			END


		if @dbname = 'RentPath_QA'
			BEGIN
				SET @urlleadsag = 'http://dashboard.qa.apartmentguide.com/Home/LeadDetailsUnAuth/'
				SET @urlleadsrent = 'http://dashboard.qa.apartmentguide.com/Home/LeadDetailsUnAuth/'
				SET @urlpageviewsag = 'http://dashboard.qa.rent.com/Home/PageViewDetailsUnAuth/'
				SET @urlpageviewsrent = 'http://dashboard.qa.rent.com/Home/PageViewDetailsUnAuth/'
			END

		if @dbname = 'RentPath_DEV'
			BEGIN
				SET @urlleadsag = 'http://dashboard.ci.apartmentguide.com/Home/LeadDetailsUnAuth/'
				SET @urlleadsrent = 'http://dashboard.ci.apartmentguide.com/Home/LeadDetailsUnAuth/'
				SET @urlpageviewsag = 'http://dashboard.ci.rent.com/Home/PageViewDetailsUnAuth/'
				SET @urlpageviewsrent = 'http://dashboard.ci.rent.com/Home/PageViewDetailsUnAuth/'
			END


		--Get the rest of the information
		SELECT
		@endYMDID AS YearMonthDay
		,@endYMDIDWeekly AS YearMonthDayweekly
		,@endYMDIDDaily AS YearMonthDaydaily
		, CONVERT(int,SUBSTRING(CONVERT(varchar(8),@endYMDID),5,4) + SUBSTRING(CONVERT(varchar(8),@endYMDID),1,4)) AS MonthDayYear
		, CONVERT(int,SUBSTRING(CONVERT(varchar(8),@endYMDIDWeekly),5,4) + SUBSTRING(CONVERT(varchar(8),@endYMDIDWeekly),1,4)) AS MonthDayYearweekly
		, CONVERT(int,SUBSTRING(CONVERT(varchar(8),@endYMDIDDaily),5,4) + SUBSTRING(CONVERT(varchar(8),@endYMDIDDaily),1,4)) AS MonthDayYeardaily
		, CONVERT(int,@endYMDID * .01) AS YearMonth
		, CONVERT(int,@endYMDIDWeekly * .01) AS YearMonthweekly
		, CONVERT(int,@endYMDIDDaily * .01) AS YearMonthdaily
		, ISNULL(CONVERT(int,cte.ListingID),0) AS ListingID
		, ISNULL(CONVERT(varchar(300),dl.UpsellAGSitesCustomURL),'') AS AGSitesURL
		, ISNULL(CONVERT(varchar(300),cbsa.cbsaname),'') AS CBSAName
		, ISNULL(inv.InvAmt,CONVERT(decimal(17,2),0)) AS CurrentMonthlySpend
		, ISNULL(inv.AGPackageType,'') AS AGPackageType
		, ISNULL(inv.RentPackageType,'') AS RentPackageType
		, ISNULL(inv.AGProductDescription,CONVERT(varchar(8000),'')) AS AGProductDescription
		, ISNULL(inv.AGMonthlySpend,CONVERT(decimal(17,2),0)) AS AGMonthlySpend
		, ISNULL(inv.RentProductDescription,CONVERT(varchar(8000),'')) AS RentProductDescription
		, ISNULL(inv.RentMonthlySpend,CONVERT(decimal(17,2),0)) AS RentMonthlySpend
		, ISNULL(inv.ComboProductDescription,CONVERT(varchar(8000),'')) AS ComboProductDescription
		, ISNULL(inv.ComboProductMonthlySpend,CONVERT(decimal(17,2),0)) AS ComboProductMonthlySpend
		, (CASE 
			WHEN (cte.AGStatusID = 1) THEN @urlleadsAG + rpdl.SFPropertyAcctID					--default to the AG one
			WHEN (cte.RentStatusID = 1) THEN @urlleadsRent + rpdl.SFPropertyAcctID
			ELSE NULL
			END)  AS ReportURLLeads
		, (CASE 
			WHEN (cte.AGStatusID = 1) THEN @urlpageviewsAG + rpdl.SFPropertyAcctID				--Default to the AG one
			WHEN (cte.RentStatusID = 1) THEN @urlpageviewsRent + rpdl.SFPropertyAcctID
			ELSE NULL
			END)  AS ReportURLPageViews
		, CONVERT(int,av.AVGCBSALowRentalRate) AS AVGCBSALowRentalRate						--ISNULL(CONVERT(int,av.AVGCBSAEntryPriceLow),0)
		, CONVERT(int,av.AVGCBSAHighRentalRate)  AS AVGCBSAHighRentalRate						--ISNULL(CONVERT(int,av.AVGCBSAEntryPriceHigh),0)
		, CONVERT(int,av.AVGZipLowRentalRate) AS AVGZipLowRentalRate							--	ISNULL(CONVERT(int,av.AVGZipEntryPriceLow),0)
		, CONVERT(int,av.AVGZipHighRentalRate)  AS AVGZipHighRentalRate						--ISNULL(CONVERT(int,av.AVGZipEntryPriceHigh),0)
		, CONVERT(int,av.AVGCityLowRentalRate)  AS AVGCityLowRentalRate						--ISNULL(CONVERT(varchar(300),av.AVGCityEntryPriceLow),'')
		, CONVERT(int,av.AVGCityHighRentalRate) AS AVGCityHighRentalRate						 --ISNULL(CONVERT(varchar(300),av.AVGCityEntryPriceHigh),'')
		, mc.MobileCouponExpirationDate  AS MobileCouponExpirationDate					--NEEDS ALIAS.MobileCouponExpirationDate
		, mc.MobileCouponStartDate  AS MobileCouponStartDate						--NEEDS ALIAS.MobileCouponStartDate
		, CONVERT(varchar(2000),mc.MobileCouponText)  AS MobileCouponText							--ISNULL(CONVERT(int,NEEDS ALIAS.MobileCouponText),0)
		, CONVERT(int,ISNULL(cml.[MediaCenter],0)) AS MediaCenter																--MAX(ISNULL(CONVERT(int,agrdl.UpsellMediaCenter),0))
		, CONVERT(int,ISNULL(cml.CorporateBadge,0)) AS CorporateBadge
		, CONVERT(int,ISNULL(cml.CollegeBadge,0)) AS CollegeBadge
		, CONVERT(int,ISNULL(cml.MilitaryBadge,0)) AS MilitaryBadge
		, CONVERT(int,ISNULL(cml.SeniorBadge,0)) AS SeniorBadge
		, CONVERT(int,ISNULL(cml.LuxuryBadge,0)) AS LuxuryBadge
		, ISNULL(CONVERT(varchar(50),rpdl.ext_propertyid),'') AS ExternalReferenceID
		INTO #tmpmisc
		FROM #tmpmasterlist cte
		LEFT OUTER JOIN Rentpath.Dimension.Listings dl WITH (NOLOCK)
			ON dl.ListingID = cte.ListingID
		LEFT OUTER JOIN #tmpagrdlagr agrdlagr
			ON agrdlagr.ListingID = cte.ListingID
		LEFT OUTER JOIN DBAUtility.dbo.ZipCBSA cbsa WITH (NOLOCK)
			ON cbsa.ZIPCode = agrdlagr.PropertyZipCode
		LEFT OUTER JOIN Staging.DashboardInvInfo inv WITH (NOLOCK)
			ON inv.ListingID = cte.ListingID
		LEFT OUTER JOIN Staging.DashboardAVGInfo av WITH (NOLOCK)
			ON av.ListingID = cte.ListingID
		LEFT OUTER JOIN Staging.DashboardMobileCouponInfo mc WITH (NOLOCK)
			ON mc.ListingID = cte.ListingID
		LEFT OUTER JOIN (				--Rentpath.Mart.Listings cml WITH (NOLOCK)
				SELECT ct.ListingID
				, MAX(CONVERT(int,ISNULL(ct.[UpsellMediaCenter],0))) AS MediaCenter
				, MAX(CONVERT(int,ISNULL(ct.BadgeCorporate,0))) AS CorporateBadge
				, MAX(CONVERT(int,ISNULL(ct.BadgeCorporate,0))) AS CollegeBadge
				, MAX(CONVERT(int,ISNULL(ct.BadgeMilitary,0))) AS MilitaryBadge
				, MAX(CONVERT(int,ISNULL(ct.BadgeSenior,0))) AS SeniorBadge
				, MAX(CONVERT(int,ISNULL(ct.BadgeLuxury,0))) AS LuxuryBadge
				FROM RentPath.Mart.Listings ct WITH (NOLOCK)
				JOIN #tmpmasterlist tml ON tml.ListingID = ct.ListingID
				WHERE ct.YearMonth = @curryearmonth
				GROUP BY ct.ListingID
			) AS cml
			ON cml.ListingID = cte.ListingID --AND cml.YearMonth = @curryearmonth
		LEFT OUTER JOIN RentPath.Dimension.Listings rpdl WITH (NOLOCK)
			ON rpdl.PropertyIDAG = cte.AGPropertyID


		ALTER TABLE #tmpmisc ADD CONSTRAINT PK_Main_Data_4419111_tmpmisc_ListingID PRIMARY KEY CLUSTERED (ListingID);

		SET @codesection = 'now get the final list'

		--now get the final list
		SELECT
		cte.ListingID
		, ml.ReserveNowClicks
		, ml.AGSitesPageViews

		, agrml.TotalPhoneLeads
		, agrml.TotalLeads
		, agrml.TotalEmailLeads
		, agrml.UniqueDetailVisits
		, agrml.MobileDetailUniqueVisits
		, agrml.DetailPageViews
		, agrml.MobileDetailPageViews
		--, agrml.SpotlightClicks
		, agrml.VideoClicks
		--, agrml.SpotlightVideoClicks
		, agrml.PropertyWebLinkClicks
		, agrml.MgtCoWebLinkClicks
		, agrml.PropertyMapClicks
		--, agrml.MapDirectionClicks
		, agrml.PhotoClicks
		--, agrml.SpotlightPhotoClicks
		--, agrml.SpotlightPhotoPopupClicks
		, agrml.FloorplanClicks
		, agrml.PanoramicToursClicks
		, agrml.HDVideosClicks
		, agrml.HDPhotosClicks
		, agrml.MgtCoPeelAdClicks
		, agrml.SearchResultsImpressions
		--, agrml.DetailDiamondMaxImpressions
		, agrml.DetailVisitCountImpressions

		--weekly
		, agrmlweekly.TotalPhoneLeadsweekly
		, agrmlweekly.TotalLeadsweekly
		, agrmlweekly.TotalEmailLeadsweekly
		, agrmlweekly.UniqueDetailVisitsweekly
		, agrmlweekly.MobileDetailUniqueVisitsweekly
		, agrmlweekly.DetailPageViewsweekly
		, agrmlweekly.MobileDetailPageViewsweekly
		--, agrmlweekly.SpotlightClicksweekly
		, agrmlweekly.VideoClicksweekly
		--, agrmlweekly.SpotlightVideoClicksweekly
		, agrmlweekly.PropertyWebLinkClicksweekly
		, agrmlweekly.MgtCoWebLinkClicksweekly
		, agrmlweekly.PropertyMapClicksweekly
		--, agrmlweekly.MapDirectionClicksweekly
		, agrmlweekly.PhotoClicksweekly
		--, agrmlweekly.SpotlightPhotoClicksweekly
		--, agrmlweekly.SpotlightPhotoPopupClicksweekly
		, agrmlweekly.FloorplanClicksweekly
		, agrmlweekly.PanoramicToursClicksweekly
		, agrmlweekly.HDVideosClicksweekly
		, agrmlweekly.HDPhotosClicksweekly
		, agrmlweekly.MgtCoPeelAdClicksweekly
		, agrmlweekly.SearchResultsImpressionsweekly
		--, agrmlweekly.DetailDiamondMaxImpressionsweekly
		, agrmlweekly.DetailVisitCountImpressionsweekly

		--daily
		, agrmldaily.TotalPhoneLeadsdaily
		, agrmldaily.TotalLeadsdaily
		, agrmldaily.TotalEmailLeadsdaily
		, agrmldaily.UniqueDetailVisitsdaily
		, agrmldaily.MobileDetailUniqueVisitsdaily
		, agrmldaily.DetailPageViewsdaily
		, agrmldaily.MobileDetailPageViewsdaily
		--, agrmldaily.SpotlightClicksdaily
		, agrmldaily.VideoClicksdaily
		--, agrmldaily.SpotlightVideoClicksdaily
		, agrmldaily.PropertyWebLinkClicksdaily
		, agrmldaily.MgtCoWebLinkClicksdaily
		, agrmldaily.PropertyMapClicksdaily
		--, agrmldaily.MapDirectionClicksdaily
		, agrmldaily.PhotoClicksdaily
		--, agrmldaily.SpotlightPhotoClicksdaily
		--, agrmldaily.SpotlightPhotoPopupClicksdaily
		, agrmldaily.FloorplanClicksdaily
		, agrmldaily.PanoramicToursClicksdaily
		, agrmldaily.HDVideosClicksdaily
		, agrmldaily.HDPhotosClicksdaily
		, agrmldaily.MgtCoPeelAdClicksdaily
		, agrmldaily.SearchResultsImpressionsdaily
		--, agrmldaily.DetailDiamondMaxImpressionsdaily
		, agrmldaily.DetailVisitCountImpressionsdaily


		, cr3.NumberofCertifiedReview

		, agrdl.LowRentalRate
		, agrdl.HighRentalRate
		, agrdl.ActiveCoupononSite
		, agrdl.CouponExpirationDate
		, agrdl.CouponStartDate
		, agrdl.ActiveHDFloorplans
		, agrdl.ActiveHDPhotos
		, agrdl.ActivePhotos
		, agrdl.ActiveAmenities
		, agrdl.ActiveFloorplans
		, agrdl.ExternalPropertyID
		, agrdl.HDPhoto
		, agrdl.HDVideo
		, agrdl.Highlighted
		, agrdl.MobileDiamond
		, agrdl.MobileSpotLight
		, agrdl.PayPerLead
		, agrdl.PayPerLease
		, agrdl.RentalsCarousel
		, agrdl.RentalsListing
		, agrdl.RentalsSpotlight
		, agrdl.RentalsStandard
		, agrdl.RentalsStandardPlu
		, agrdl.SponsoredApartment
		, agrdl.SpotLight
		, agrdl.ManagementPeelAd
		, agrdl.CallRecording
		--, agrdl.CommunityVideo
		--, agrdl.DynamicLeadForm
		, agrdl.GoldFeaturedCommunity
		--, agrdl.PlatinumFeaturedCommunity
		--, agrdl.SilverFeaturedCommunity
		, agrdl.MobileDeal
		, agrdl.PhotoUpgrade
		, agrdl.PremiumUpgrade
		, agrdl.RentalsFeatured
		, agrdl.RentalsPremier
		--, agrdl.ReputationMonitor
		--, agrdl.SocialMediaManager
		, agrdl.RentFeaturedPlacement
		, agrdl.RentPTE
		, agrdl.RentVIPPlacement
		, agrdl.Linked3DFloorplans
		, agrdl.LinkedRoomPlanner
		, agrdl.TotalUnits
		, agrdl.ShowsOfficeHours
		, agrdl.ShowsPricing
		, agrdl.Whisper
		--, agrdl.[30SecondVideoUpsell]
		, agrdl.[3DFloorplanUpsell]
		--, agrdl.[60SecondVideoUpsell]
		, agrdl.AGSitesUpsell
		, agrdl.CommunityCarousel
		, agrdl.Coupon
		, agrdl.DiamondCity
		, agrdl.DiamondMax
		, agrdl.DiamondMetro
		--, agrdl.EasyPay
		--, agrdl.FloorplanUpgrade
		, agrdl.CategoryBadge
		, agrdl.AGDesktopPhoneNumber
		, agrdl.AGMobilePhoneNumber
		, agrdl.AGDestinationNumber
		, agrdl.AGLeadEmailRecipient
		, agrdl.RentDesktopPhoneNumber
		, agrdl.RentMobilePhoneNumber
		, agrdl.RentDestinationNumber
		, agrdl.RentLeadEmailRecipient

		, agrdlagr.AGPropertyID
		, agrdlagr.RentPropertyID
		, agrdlagr.TotalPoints
		, agrdlagr.AGPlacementTier
		, agrdlagr.RentPlacementTier
		, agrdlagr.AGMgtCoName
		, agrdlagr.RentMgtCoName
		, agrdlagr.PropertyName
		, agrdlagr.PropertyAddress
		, agrdlagr.PropertyCity
		, agrdlagr.PropertyState
		, agrdlagr.PropertyZipCode
		, agrdlagr.AGAvgOverallRatings
		, agrdlagr.RentAvgOverallRatings
		, agrdlagr.AGHDPanoTours
		, agrdlagr.AGStatusID
		, agrdlagr.RentStatusID

		--, agrdlnosum.RentMetroFeaturedListing
		, agrdlnosum.RentSpotlight
		, agrdlnosum.RentSubscription
		, agrdlnosum.CouponText

		, url.AGPropertyURL
		, url.RentPropertyURL

		, misc.YearMonthDay
		, misc.YearMonthDayweekly
		, misc.YearMonthDaydaily
		, misc.MonthDayYear
		, misc.MonthDayYearweekly
		, misc.MonthDayYeardaily
		, misc.YearMonth
		, misc.YearMonthweekly
		, misc.YearMonthdaily
		, misc.AGSitesURL
		, misc.CBSAName
		, misc.CurrentMonthlySpend
		, CONVERT(varchar(300),misc.AGPackageType) AS AGPackageType
		, CONVERT(varchar(300),misc.RentPackageType) AS RentPackageType
		, misc.AGProductDescription
		, misc.AGMonthlySpend
		, misc.RentProductDescription
		, misc.RentMonthlySpend
		, misc.ComboProductDescription
		, misc.ComboProductMonthlySpend
		, misc.ReportURLLeads
		, misc.ReportURLPageViews
		, misc.AVGCBSALowRentalRate
		, misc.AVGCBSAHighRentalRate
		, misc.AVGZipLowRentalRate
		, misc.AVGZipHighRentalRate
		, misc.AVGCityLowRentalRate
		, misc.AVGCityHighRentalRate
		, misc.MobileCouponExpirationDate
		, misc.MobileCouponStartDate
		, misc.MobileCouponText
		, misc.MediaCenter
		, misc.CorporateBadge
		, misc.CollegeBadge
		, misc.MilitaryBadge
		, misc.SeniorBadge
		, misc.LuxuryBadge
		, misc.ExternalReferenceID
		INTO #tmpfinalresult
		FROM #tmpmasterlist cte
		LEFT OUTER JOIN #tmpml ml
			ON ml.ListingID = cte.ListingID
		LEFT OUTER JOIN #tmpagrml agrml
			ON agrml.ListingID = cte.ListingID
		LEFT OUTER JOIN #tmpagrmlweekly agrmlweekly
			ON agrmlweekly.ListingID = cte.ListingID
		LEFT OUTER JOIN #tmpagrmldaily agrmldaily
			ON agrmldaily.ListingID = cte.ListingID
		LEFT OUTER JOIN #tmpcr3 cr3
			ON cr3.ListingID = cte.ListingID
		LEFT OUTER JOIN #tmpagrdl agrdl
			ON agrdl.ListingID = cte.ListingID
		LEFT OUTER JOIN #tmpagrdlagr  agrdlagr
			ON agrdlagr.ListingID = cte.ListingID
		LEFT OUTER JOIN #tmpagrdlnosum  agrdlnosum
			ON agrdlnosum.ListingID = cte.ListingID
		LEFT OUTER JOIN #tmpurl url
			ON url.ListingID = cte.ListingID
		LEFT OUTER JOIN #tmpmisc misc
			ON misc.ListingID = cte.ListingID
		ORDER BY cte.ListingID

		--SELECT * FROM #tmpfinalresult


		SET @codesection = 'Drop and recreate the main data table and put data there'

		--Drop and recreate the main data table and put data there
		BEGIN TRY
			DROP TABLE Staging.DashboardAdvancedSubscriptionMainData
		END TRY
		BEGIN CATCH
		END CATCH

		SELECT * INTO Staging.DashboardAdvancedSubscriptionMainData FROM #tmpfinalresult

		ALTER TABLE Staging.DashboardAdvancedSubscriptionMainData ADD CONSTRAINT PK_DashboardAdvancedSubscriptionMainData_4419111_ListingID PRIMARY KEY CLUSTERED (ListingID);
		CREATE NONCLUSTERED INDEX NI_DashboardAdvancedSubscriptionMainData_4419111_on_AGPropertyID ON Staging.DashboardAdvancedSubscriptionMainData(AGPropertyID);
		CREATE NONCLUSTERED INDEX NI_DashboardAdvancedSubscriptionMainData_4419111_on_RentPropertyID ON Staging.DashboardAdvancedSubscriptionMainData(RentPropertyID);
	
		
	--SELECT * FROM Staging.DashboardAdvancedSubscriptionMainData

	END TRY
	BEGIN CATCH
		SELECT 
			@ErrorMessage		= ERROR_MESSAGE(),
			@ErrorNumber		= ERROR_NUMBER(),
			@ErrorSeverity		= ERROR_SEVERITY(),
			@ErrorState			= ERROR_STATE(),
			@ErrorLine			= ERROR_LINE(),
			@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');

		SET @ErrorMessage = 'Attempting to load Advanced Subscriptions Main Data Table. Error in code seciton - ' + @codesection + '   Error - ' + @ErrorMessage

		raiserror(@ErrorMessage,16,1) with log;

		RETURN 		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	
	END CATCH





END


















GO
/****** Object:  StoredProcedure [dbo].[Dashboard_Set_Daily_Advanced_Subscription_Advanced_Report_Details]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/*--######################################################################################
*
* Name:	[dbo].[Dashboard_Set_Daily_Advanced_Subscription_Advanced_Report_Details]
*
* Desc:	Set the daily subscription information in table for Advanced Report Subscriptions
*
* Test:	EXEC dbo.Dashboard_Set_Daily_Advanced_Subscription_Advanced_Report_Details
SELECT * FROM dbo.DashboardDailyAdvancedReportSubscriptionDetails

SELECT * FROM dbo.DashboardSubscriptions
SELECT * FROM dbo.DashboardSubscriptions WITH (NOLOCK) WHERE SubscriptionID IN (SELECT SubscriptionID FROM dbo.DashboardDailyAdvancedReportSubscriptionDetails WITH (NOLOCK))
SELECT * FROM dbo.DashboardDailyAdvancedReportSubscriptionDetails


SELECT * FROM dbo.DashboardDailySubscriptionDetails
* Hist:	01	06/20/2015	Bob Langley		Ticket 18155 - Initial Version 
* Hist: 03	06/24/2015	Bob Langley		Ticket 19743, Story 96653792 - For release 1.6, Changed to add back in the check for Report = 3 (Advanced) for record selection from dbo.DashboardSubscriptions
										and add the columns AdvancedMethod and EmailAddress to the table for use in the SSIS package (to tell how to send the information, either FTP or email the file).  Also added PropertyName and Frequency fields.
* Hist: 04	09/16/2015	Shetal Gandhi	Ticket 20421 - Modified to use the New Rentpath tables instead of the AG Combined views
--#######################################################################################*/
CREATE PROCEDURE [dbo].[Dashboard_Set_Daily_Advanced_Subscription_Advanced_Report_Details]
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
    SET NOCOUNT ON;
	SET NOCOUNT ON;


	DECLARE @rundate	datetime
	DECLARE @userid int
	DECLARE @creator uniqueidentifier
	DECLARE @subscriptionid int
	DECLARE @dow int
	DECLARE @sid int
	DECLARE @propid int
	DECLARE @dowtouse	int
	DECLARE @domtouse	int		
	DECLARE @ymdid int

	DECLARE @PropertyID	int
	DECLARE @Server	varchar(200)
	DECLARE @Port		varchar(20)
	DECLARE @Login	varchar(100)
	DECLARE @Password	varchar(100)
	DECLARE @advancedreporttype	int
	DECLARE @AdvancedMethod	int
	DECLARE @EmailAddress	varchar(2000)		-- can have multiple addresses with delimiter (allow for comma and semi-colon)

	DECLARE @Frequency int
	DECLARE @PropertyName varchar(100)
	
	/* ========================================================================= */
	--User settable variables
	SET @dowtouse = 2				--1 = Sunday, etc.
	SET @domtouse = 2				--day of month to run monthly subscriptions (actual day, like 5th, 23rd, 24th, etc.)
	/* ========================================================================= */



	SET @rundate = GETDATE()
	SET @dow = CONVERT(int,	DATEPART(dw,@rundate))						--currently, 1 = Sunday
	SET @ymdid = CONVERT(int, Convert(varchar(10),@rundate,112))

	--PRINT '@dow = ' + CONVERT(varchar(30),@dow)
	PRINT '@ymdid = ' + CONVERT(varchar(30),@ymdid)

	DELETE FROM dbo.DashboardDailyAdvancedReportSubscriptionDetails
	--WHERE YMDID = @ymdid


	--Find the subscriptions that go out today for FTP
	DECLARE subscriptioncursor CURSOR FOR  
	   SELECT SubscriptionID, PropertyID, [Server], [Port], [Login], [Password], AdvancedReportType, AdvancedMethod, [TO], Frequency
	   FROM dbo.DashboardSubscriptions
	   WHERE Report = 3
	   AND AdvancedReportType IN (2,3)
	   AND ((Frequency = 1)										-- daily and is today
			OR (Frequency = 2 AND @dow = @dowtouse)				-- weekly and is today
			OR (Frequency = 3 AND DAY(@rundate) = @domtouse))	-- monthly and is today			(day is second day of the month)




	OPEN subscriptioncursor

	-- Loop through all the files for the database  
	FETCH NEXT FROM subscriptioncursor INTO @sid, @PropertyID, @Server, @Port, @Login, @Password, @advancedreporttype, @AdvancedMethod, @EmailAddress, @Frequency

		WHILE @@FETCH_STATUS = 0  
			BEGIN  
		
				SET @PropertyName = CASE WHEN @PropertyID = 0 THEN 'All'
							ELSE (SELECT TOP 1 l.PropertyName FROM Rentpath.Dimension.Listings l WITH (NOLOCK) WHERE  l.PropertyIDAG = @PropertyID AND l.PropertyName IS NOT NULL)
							END


				INSERT INTO dbo.DashboardDailyAdvancedReportSubscriptionDetails
				VALUES(@ymdid, @sid, @PropertyID, @Server, @Port, @Login, @Password, @advancedreporttype, @AdvancedMethod, @EmailAddress, @PropertyName, @Frequency)




				--Get the next subscriptionid
				FETCH NEXT FROM subscriptioncursor INTO @sid, @PropertyID, @Server, @Port, @Login, @Password, @advancedreporttype, @AdvancedMethod, @EmailAddress, @Frequency
			END 

	CLOSE subscriptioncursor
	DEALLOCATE subscriptioncursor


	SET NOCOUNT OFF;


END;




GO
/****** Object:  StoredProcedure [dbo].[Dashboard_Set_Daily_Advanced_Subscription_Details]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





/*--######################################################################################
*
* Name:	[dbo].[Dashboard_Set_Daily_Advanced_Subscription_Details]
*
* Desc:	Set the daily subscription information in table
*
* Test:	EXEC dbo.Dashboard_Set_Daily_Advanced_Subscription_Details
SELECT * FROM dbo.DashboardSubscriptions
SELECT * FROM dbo.DashboardDailySubscriptionDetails ORDER BY SubscriptionID, PropertyID
SELECT * FROM dbo.DashboardSubscriptions WITH (NOLOCK) WHERE SubscriptionID IN (SELECT SubscriptionID FROM dbo.DashboardDailySubscriptionDetails WITH (NOLOCK))
*
* Hist:	01	03/24/2015	Bob Langley		Ticket 18155 - Initial Version 
* Hist: 02	06/11/2015	Bob Langley		Changed to do a row in the table for each subscription (was breaking out 0 PropertyID subscriptions to put a line per propertyID).  This allows it to do all properties in one FTP file.
* Hist: 03	06/24/2015	Bob Langley		Ticket 19743, Story 96653792 - For release 1.6, changed to add the new columns AdvancedMehtod and EmailAddress for sending by either email or FTP (was just FTP).  Also added PropertyName and Frequency fields.
* Hist: 04	09/16/2015	Shetal Gandhi	Ticket 20421 - Modified to use the New Rentpath tables instead of the AG Combined views
* Hist: 05	08/24/2016	Bob Langley		Ticket 24008 - Modified to reset the logic of those going to SSIS package table, was only checking that the email address not blank.  This cut out those FTP subs where it was blank.
--#######################################################################################*/
CREATE PROCEDURE [dbo].[Dashboard_Set_Daily_Advanced_Subscription_Details]
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
    SET NOCOUNT ON;
	SET NOCOUNT ON;


	DECLARE @rundate	datetime
	DECLARE @userid int
	DECLARE @creator uniqueidentifier
	DECLARE @subscriptionid int
	DECLARE @dow int
	DECLARE @sid int
	DECLARE @propid int
	DECLARE @dowtouse	int
	DECLARE @domtouse	int		
	DECLARE @ymdid int

	DECLARE @PropertyID	int
	DECLARE @Server	varchar(200)
	DECLARE @Port		varchar(20)
	DECLARE @Login	varchar(100)
	DECLARE @Password	varchar(100)
	DECLARE @DisplayColumns varchar(4000)
	DECLARE @AdvancedMethod	int
	DECLARE @EmailAddress	varchar(2000)		-- can have multiple addresses with delimiter (allow for comma and semi-colon)
	DECLARE @Frequency int
	DECLARE @PropertyName varchar(100)

	/* ========================================================================= */
	--User settable variables
	SET @dowtouse = 2				--1 = Sunday, etc.
	SET @domtouse = 2				--day of month to run monthly subscriptions (actual day, like 5th, 23rd, 24th, etc.)
	/* ========================================================================= */



	SET @rundate = GETDATE()
	SET @dow = CONVERT(int,	DATEPART(dw,@rundate))						--currently, 1 = Sunday
	SET @ymdid = CONVERT(int, Convert(varchar(10),@rundate,112))

	--PRINT '@dow = ' + CONVERT(varchar(30),@dow)
	--PRINT '@ymdid = ' + CONVERT(varchar(30),@ymdid)


	DELETE FROM dbo.DashboardDailySubscriptionDetails			--Delete all records (only want today's information in it



	--Find the subscriptions that go out today for FTP
	DECLARE subscriptioncursor CURSOR FOR  
	   SELECT SubscriptionID, PropertyID, [Server], [Port], [Login], [Password], DisplayColumns, AdvancedMethod, [TO], Frequency
	   FROM dbo.DashboardSubscriptions
	   WHERE Report = 3								-- Advanced Subscription
	   AND AdvancedReportType = 1					-- Custom (data extract from MainData, i.e., not EmailLeadsDetail or PhoneLeadsDetail extract)
	   AND ((Frequency = 1)										-- daily and is today
			OR (Frequency = 2 AND @dow = @dowtouse)				-- weekly and is today
			OR (Frequency = 3 AND DAY(@rundate) = @domtouse))	-- monthly and is today			(day is second day of the month)
		AND ((AdvancedMethod = 2 AND ISNULL([TO],'') <> '')		--something in the TO column for email address, and FTP connection info for FTP
				OR
			  (AdvancedMethod = 1 AND ISNULL([Server],'') <> '' AND ISNULL([Port],'') <> '' AND ISNULL([Login],'') <> '' AND ISNULL([Password],'') <> ''))



	OPEN subscriptioncursor

	-- Loop through all the files for the database  
	FETCH NEXT FROM subscriptioncursor INTO @sid, @PropertyID, @Server, @Port, @Login, @Password, @DisplayColumns, @AdvancedMethod, @EmailAddress, @Frequency

		WHILE @@FETCH_STATUS = 0  
			BEGIN  
		

				--get needed information about the subscription info, the user, and his allowed properties
				SET @subscriptionid = @sid		-- set this from the looping of the subscriptions to see if this subscription goes out
				SET @creator = (SELECT Creator FROM dbo.DashboardSubscriptions WHERE SubscriptionID = @subscriptionid)		--look up the owner's information from the DashboardSubscriptions table
				SET @userid = (SELECT UserID FROM Dimension.vw_DSUM_User WHERE UserGUID = @creator)  -- using the owner's information, get their user id.  This is used in another SPROC to get their allowed PropertyID list

				SET @PropertyName = CASE WHEN @PropertyID = 0 THEN 'All'
							ELSE (SELECT TOP 1 l.PropertyName FROM Rentpath.Dimension.Listings l WITH (NOLOCK) WHERE  l.PropertyIDAG = @PropertyID AND l.PropertyName IS NOT NULL)
							END

			
				/* ================================================================================================================================= */
				INSERT INTO dbo.DashboardDailySubscriptionDetails
				VALUES(@ymdid, @sid, @PropertyID, @Server, @Port, @Login, @Password, @DisplayColumns, @AdvancedMethod, @EmailAddress, @PropertyName, @Frequency)

				/* ================================================================================================================================= */


				--Get the next subscriptionid
				FETCH NEXT FROM subscriptioncursor INTO @sid, @PropertyID, @Server, @Port, @Login, @Password, @DisplayColumns, @AdvancedMethod, @EmailAddress, @Frequency
			END 

	CLOSE subscriptioncursor
	DEALLOCATE subscriptioncursor

	
	SET NOCOUNT OFF;


END;







GO
/****** Object:  StoredProcedure [dbo].[pr_ProcessRDTManagementXML]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/*************************************************
* HIST 01: 07/15/2015	Julie DiPietro		Initial Version
* HIST 01: 06/02/2016	Clinton Woody		fix duplicate leads/data when rerunnnig the RDT Process Ticket # 23179
*				instead of deleting records already processed delete them from the staging table.
*				of you need to reprocess the day because of bad data then you must delete the records from the rdtmanagementreport table as well
*				as from the fact.thirdpartyleads table in apartment guide for that day
*   Takes 3rd party supplied XML Document and updates Reporting Table (RentPath.dbo.RDTManagementReport)

EXEC [dbo].[pr_ProcessRDTManagementXML] 

select * from RentPath.dbo.RDTManagementReport
where listingid is null
*************************************************/

CREATE PROCEDURE [dbo].[pr_ProcessRDTManagementXML] 

AS 
BEGIN
    
    SET NOCOUNT ON
    DECLARE @ymdid INT
       ,@RDTcode VARCHAR(8)
	   ,@dateofdata INT
	 

    BEGIN TRY
        DROP TABLE #tmpListings;
    END TRY
    BEGIN CATCH
    END CATCH

    BEGIN TRY
        DROP TABLE #tmpRDT;
    END TRY
    BEGIN CATCH
    END CATCH
   

    SELECT  PropertyIDAG
		   ,PropertyIDRent
           ,listingid
		   ,ListingPricingSource
           ,externalid
		   ,ListingType
		   ,StatusIDAG
		   ,StatusIDRent
    INTO    #tmpListings
    FROM    (
             SELECT PropertyIDAG
				   ,PropertyIDRent
                   ,listingid
				   ,ListingPricingSource
                   ,externalid
				   ,ListingType
				   ,StatusIDAG
				   ,StatusIDRent
				   ,ROW_NUMBER() OVER (PARTITION BY PropertyIDAG,listingid,ListingPricingSource,externalid ORDER BY StatusIDAG DESC, ListingType ASC) AS rownum
             FROM   RentPath.Dimension.Listings
             WHERE ListingPricingSource LIKE 'RDT%'
            ) vw
    WHERE   vw.rownum = 1;


    DELETE  FROM RentPath.Staging.RDTProperty
    WHERE   ISNUMERIC(propertyid) = 0


	IF EXISTS ( SELECT  name
                FROM    RentPath.sys.objects
                WHERE   name = 'RDTDate'
				AND type = 'U') 


        BEGIN
            SELECT  --sdd.dateofdata
			        ISNULL(CAST(CONVERT(VARCHAR(8),CAST(sdd.DateOfData AS DATETIME),112) AS INT), 0) AS dateofdata
                   ,sdd.RDTid AS RDTCode
                   ,ISNULL(CAST(CONVERT(VARCHAR(8),CAST(srl.datetime AS DATETIME),112) AS INT),sdd.ymdid) AS Ymdid--sam.YMDID  
                   ,srm.name AS ManagementName
                   ,srm.propertycount AS ManagementProperties
                   ,srp.ExternalID
                   ,CAST(srp.PropertyID AS BIGINT) AS PropertyId
                   ,0 AS Listingid  --tl.listingid
                   ,srp.Name AS PropertyName
                   ,srp.UniqueSessions
                   ,srp.pageviews
                   ,srl.leadid
                   ,srl.customerid
                   ,srl.UnitNumber
                   ,srl.FirstName
                   ,srl.LastName
                   ,srl.AddressAll
                   ,srl.Address1
                   ,srl.Address2
                   ,srl.city
                   ,srl.State
                   ,srl.postalcode
                   ,srl.email
                   ,srl.phone
                   ,srl.screeningresponse
                   ,srl.datetime AS leaddatetime
                   ,srl.estimatedmovedate
                   ,LEFT(srl.message,255) AS message
                   ,srl.visitedproperty
                   ,srld.screened
                   ,srld.Unscreened
                   --,'APTG' AS LeadSource 
				   ,CASE WHEN srp.website = 'AG' THEN 'APTG' ELSE 'Rent' END AS LeadSource
				   ,srp.website
            INTO    #tmpRDT
            FROM    RentPath.Staging.RDTManagement srm
            JOIN    RentPath.Staging.RDTProperty srp
                    ON srp.management_id = srm.management_id
            --LEFT OUTER JOIN #tmpListings tl
            --        ON tl.externalid = CAST(srp.ExternalID AS VARCHAR(20))
            LEFT OUTER JOIN RentPath.Staging.RDTLeadData srld
                    ON srp.PropertyLoadid = srld.PropertyLoadid
            LEFT OUTER JOIN RentPath.Staging.RDTLead srl
                    ON srl.leaddata_id = srld.leaddata_id
            CROSS JOIN RentPath.Staging.RDTDate sdd
            ORDER BY srm.Management_ID
                   ,srp.propertyid


            SET @ymdid = (
                          SELECT    ymdid
                          FROM      RentPath.Staging.RDTDate
                         )
            SET @RDTcode = (
                            SELECT  RDTid
                            FROM    RentPath.Staging.RDTDate
                           )
			SET @dateofdata = (
                            SELECT  ISNULL(CAST(CONVERT(VARCHAR(8),CAST(DateOfData AS DATETIME),112) AS INT), 0) 
                            FROM    RentPath.Staging.RDTDate
                           )

            UPDATE  srp
            SET     listingid = tl.listingid
            FROM    #tmpRDT srp
            JOIN    #tmpListings tl
                    ON tl.externalid = CAST(srp.ExternalID AS VARCHAR(20))
		    WHERE   tl.StatusIDAG = 1
					OR tl.StatusIDRent = 1;

            UPDATE  srp
            SET     listingid = tl.listingid
            FROM    #tmpRDT srp
            JOIN    #tmpListings tl
                    ON tl.externalid = CAST(srp.ExternalID AS VARCHAR(20))
                       AND srp.listingid = 0;

-- Use this delete in case the third party feeds lead table already got populated by previous run.
-- 23179
            DELETE  FROM tl
            FROM    #tmpRDT tl
            JOIN RentPath.dbo.RDTManagementReport rd
                    ON rd.ymdid = tl.ymdid
                       AND rd.listingid = tl.listingid
                       AND rd.leadid = tl.leadid
					   AND rd.email=tl.Email;
		
		 --   DELETE
			--FROM  RentPath.dbo.RDTManagementReport
			--WHERE  ymdid = @ymdid 

		 --   DELETE
			--FROM  RentPath.dbo.RDTManagementReport
			--WHERE  dateofdata = @dateofdata
			
			  
            INSERT  INTO RentPath.dbo.RDTManagementReport
                    (dateofdata
                    ,RDTcode
                    ,ymdid
                    ,ManagementName
                    ,ManagementProperties
                    ,ExternalID
                    ,PropertyID 
                    ,listingid
                    ,PropertyName
                    ,UniqueSessions
                    ,pageviews
                    ,leadid
                    ,customerid
                    ,UnitNumber
                    ,FirstName
                    ,LastName
                    ,AddressAll
                    ,Address1
                    ,Address2
                    ,city
                    ,State
                    ,postalcode
                    ,email
                    ,phone
                    ,screeningresponse
                    ,leaddatetime
                    ,estimatedmovedate
                    ,message
                    ,visitedproperty
                    ,screened
                    ,Unscreened
                    ,LeadSource
					,website)
                    SELECT  dateofdata
                           ,RDTcode
                           ,ymdid
                           ,ManagementName
                           ,ManagementProperties
                           ,ExternalID
                           ,PropertyID 
                           ,listingid
                           ,PropertyName
                           ,UniqueSessions
                           ,pageviews
                           ,leadid
                           ,customerid
                           ,UnitNumber
                           ,FirstName
                           ,LastName
                           ,AddressAll
                           ,Address1
                           ,Address2
                           ,city
                           ,State
                           ,postalcode
                           ,email
                           ,phone
                           ,screeningresponse
                           ,leaddatetime
                           ,estimatedmovedate
                           ,message
                           ,visitedproperty
                           ,screened
                           ,Unscreened
                           ,LeadSource
						   ,website
                    FROM    #tmpRDT
                    WHERE   listingid IS NOT NULL;

                END
        END












GO
/****** Object:  StoredProcedure [dbo].[pr_ZutronIncrementalUpdate]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[pr_ZutronIncrementalUpdate]
AS 
/*************************************************************************************
*
* Name:	[dbo].[pr_ZutronIncrementalUpdate]
*
* Desc:	
*
* Test:	
EXEC dbo.[pr_ZutronIncrementalUpdate] 

*
* Notes:
*
* Hist:	01	02/13/2015	Richard Chen		Initial Version - Ticket 
* Hist: 02	09/20/2016	Colleen Rocks		Ticket 23755; updates made
*************************************************************************************/
BEGIN

    SET NOCOUNT ON;
	
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    DECLARE @TrackDate DATETIME
       ,@LengthInSeconds INT
       ,@DatabaseName VARCHAR(128)
       ,@LocalYMDID INT
                
    SET @TrackDate = GETDATE()
    SET @LengthInSeconds = 0
    SET @DatabaseName = DB_NAME()        
    SET @LocalYMDID = (
                       SELECT TOP 1
                                YMDID
                       FROM     Staging.ZutronSitesVisited
                       ORDER BY YMDID DESC
                      )
	
    PRINT @LocalYMDID	
    EXEC DBAUtility.dbo.pr_Logging_StoredProcsNoTemp
        @DatabaseName = @DatabaseName
       , -- varchar(128)
        @ProcName = 'Mart.pr_ZutronIncrementalUpdate'
       , -- varchar(128)
        @StepName = 'Execute Procedure'
       , -- varchar(128)
        @VariableStates = ''
       , -- varchar(500)
        @LengthInSeconds = @LengthInSeconds
       , -- int
        @Comments = 'Execute Procedure'; -- varchar(500)

	/* Testing 
	DECLARE @datetorun int
	SET @datetorun = NULL--20150306
	*/

	---------------------------------------------------
	--Declare and set variables
	---------------------------------------------------
    --DECLARE @ErrorMessage NVARCHAR(4000)
    --   ,@ErrorNumber INT
    --   ,@ErrorSeverity INT
    --   ,@ErrorState INT
    --   ,@ErrorLine INT
    --   ,@ErrorProcedure NVARCHAR(200)


    DELETE  FROM Mart.ZutronSitesVisited
    WHERE   YMDID = @LocalYMDID
	
    DELETE  FROM Mart.ZutronRentPathUzidEvents
    WHERE   YMDID = @LocalYMDID

    DELETE  FROM Mart.zutronRentPath
    WHERE   YMDID = @LocalYMDID	


    INSERT  INTO Mart.ZutronSitesVisited
            (YMDID
            ,UZID
            ,WebsiteDomain
            ,WebsitePath
            ,EventDate)
            SELECT  YMDID
                    ,UZID
                    ,WebsiteDomain
                    ,WebsitePath
                    ,EventDate
            FROM    Staging.ZutronSitesVisited
            WHERE   YMDID = @LocalYMDID


    INSERT  INTO Mart.ZutronRentPathUzidEvents
            SELECT  zr.*
            FROM    Staging.ZutronRentPathUzidEvents AS zr
            INNER JOIN (
                        SELECT  UZID
                               ,YMDID
                               ,ProfileKey
                        FROM    Staging.ZutronRentPathUzidEvents
                        GROUP BY UZID
                               ,YMDID
                               ,ProfileKey
                        EXCEPT
                        SELECT  UZID
                               ,YMDID
                               ,ProfileKey
                        FROM    Mart.ZutronRentPathUzidEvents
                        GROUP BY UZID
                               ,YMDID
                               ,ProfileKey
                       ) AS v
                    ON zr.UZID = v.UZID
                       AND zr.YMDID = v.YMDID
                       AND zr.ProfileKey = v.ProfileKey
                       AND v.YMDID >= CAST(CONVERT(VARCHAR(8),GETDATE() - 8,112) AS INT)

    INSERT  INTO Mart.zutronRentPath
            SELECT  zr.*
            FROM    Staging.zutronRentPath zr
            JOIN    (
                     SELECT UZID
                           ,YMDID
                           ,Profilekey
                     FROM   Staging.zutronRentPath
                     GROUP BY UZID
                           ,YMDID
                           ,Profilekey
                     EXCEPT
                     SELECT UZID
                           ,YMDID
                           ,Profilekey
                     FROM   Mart.zutronRentPath
                     GROUP BY UZID
                           ,YMDID
                           ,Profilekey
                    ) v
                    ON zr.UZID = v.UZID
                       AND zr.YMDID = v.YMDID
                       AND zr.Profilekey = v.Profilekey
                       AND v.YMDID >= CAST(CONVERT(VARCHAR(8),GETDATE() - 8,112) AS INT)


/*
	--INSERT into  mart.zutronRentpathEvent SELECT * FROM staging.zutronRentPathEvent WHERE ymdid=@localYMDID
	INSERT INTO  mart.zutronRentpathEvent 
	SELECT zre.*
	  FROM staging.zutronRentPathEvent zre
		   JOIN 
		   (SELECT uzid,ymdid,parseid,listingid FROM staging.zutronRentPathEvent GROUP BY uzid,ymdid,parseid,listingid
		    EXCEPT
		    SELECT uzid,ymdid,parseid,listingid FROM mart.zutronRentPathEvent GROUP BY uzid,ymdid,parseid,listingid) v
		   ON zre.uzid=v.uzid AND zre.ymdid=v.ymdid AND zre.parseid=v.parseid AND zre.listingid=v.listingid
   */     

    SET NOCOUNT OFF;
END








GO
/****** Object:  StoredProcedure [dbo].[rpt_Get_Messages]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*--######################################################################################
*
* Name:	dbo.rpt_Get_Messages
*
* Desc:  Get Dashboard messages which are currrently valid
*
* Test:	EXEC dbo.rpt_Get_Messages
*
*
* Hist:	01	10/16/2015	Brian Trembley		Ticket 20932 - Initial Version 
*		02	10/20/2015	Bob Langley			Ticket 20932 - modified to only return the top 1 record, sorted by enddate
--#######################################################################################*/
CREATE procedure [dbo].[rpt_Get_Messages] AS
SELECT TOP 1 MessageID,
		StartDate,
		EndDate,
		[Title],
		[Message]
FROM dbo.DashboardMessages
WHERE getdate() BETWEEN StartDate AND EndDate
ORDER BY EndDate



GO
/****** Object:  StoredProcedure [dbo].[TableauConversionMarting]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[TableauConversionMarting]
(
@startymdid int
,@endymdid int
)
/******************************************************************************************
*
* Name:	RentPath.dbo.TableauConversionMarting
*			FOR WAREHOUSECLU01 server
*
* Desc:	Marts the Tableau_conversion AND tableau_email_conversion tables
*			Uses StartYMDID and EndYMDID values, defaulting to yesterday for both if NULL
*
* Test:	EXEC RentPath.dbo.TableauConversionMarting NULL,NULL
* Test:	EXEC RentPath.dbo.TableauConversionMarting 20160519,20160524
*
* SELECT MAX(YMDID) AS MaxDate FROM RentPath.dbo.[Tableau_conversion] WITH (NOLOCK)
* SELECT MAX(YMDID) AS MaxDate FROM RentPath.dbo.[Tableau_email_conversion] WITH (NOLOCK)
*
* SELECT TOP 10000 * FROM RentPath.dbo.[Tableau_conversion] WITH (NOLOCK) WHERE YMDID = 20160522
* SELECT TOP 10000 * FROM RentPath.dbo.[Tableau_email_conversion] WITH (NOLOCK) WHERE YMDID = 20160522
*
* Hist:	01	03/31/2016	Bob Langley			Ticket 22490 - Initial Version
******************************************************************************************/
AS
/*
tableau_leads2
tableau_visits
Tableau_leads_stage					-- uses tableau_leads2
Tableau_visits_stage				-- uses tableau_visits
tableau_email_conversion			--After deleting for input period, Insert to existing from tableau_visits AND tableau_leads2
Tableau_conversion					--After deleting for input period, Insert to existing from tableau_visits_stage AND tableau_leads_stage
*/
BEGIN
	SET NOCOUNT ON;

	DECLARE
		@ErrorMessage					NVARCHAR(4000),
		@ErrorNumber					INT,
		@ErrorSeverity					INT,
		@ErrorState						INT,
		@ErrorLine						INT,
		@ErrorProcedure					NVARCHAR(200)


	 /* Testing 
	DECLARE @startymdid int		--will be parameters for SPROC
	DECLARE @endymdid int

	SET @startymdid = 20160525
	SET @endymdid = 20160529
	*/

		--diag
		PRINT 'Starting process  ' + '   ' + CONVERT(varchar(200),GETDATE(),101) + '  ' + CONVERT(varchar(200),GETDATE(),108)

	DECLARE @startymd	datetime
	DECLARE @endymd		datetime


	if @startymdid IS NULL
		SET @startymdid = CONVERT(int, Convert(varchar(10),DATEADD(dd,-4,GETDATE()),112))				--default is 4 days ago

	if @endymdid IS NULL
		SET @endymdid = CONVERT(int, Convert(varchar(10),DATEADD(dd,-1,GETDATE()),112))				--default is yesterday



	SET @startymd = CONVERT(datetime,CONVERT(varchar(30),@startymdid))						--Set to whatever day is input
	SET @endymd = DATEADD(dd,1,CONVERT(datetime,CONVERT(varchar(30),@endymdid)))			--Set to one day after input value because need to do < 1 day later when using actual date

	PRINT '@startymdid = ' + CONVERT(varchar(30),@startymdid)
	PRINT '@endymdid = ' + CONVERT(varchar(30),@endymdid)
	PRINT '@startymd = ' + CONVERT(varchar(30),@startymd)
	PRINT '@endymd = ' + CONVERT(varchar(30),@endymd)

	BEGIN TRY

		BEGIN TRY
			DROP TABLE #tmppagecontent
		END TRY
		BEGIN CATCH
		END CATCH

		--Instead of pagecontent
		;WITH cte AS
		(SELECT ContentGroupKey FROM Warehouse.conformed.contentgroup WITH (NOLOCK)
		UNION
		SELECT PageContentKey AS ContentGroupKey FROM Warehouse.conformed.pagecontent WITH (NOLOCK)
		)
		SELECT cte.ContentGroupKey 
		, COALESCE(CASE WHEN cg.ContentGroupMeasure = 'No Group' THEN NULL ELSE cg.ContentGroupMeasure END,CASE WHEN pc.ContentGroupMeasure = 'No Group' THEN NULL ELSE pc.ContentGroupMeasure END) AS ContentGroupMeasure
		, COALESCE(CASE WHEN cg.ContentGroupMeasure = 'No Group' THEN NULL ELSE cg.ContentGroupName END,CASE WHEN pc.ContentGroupMeasure = 'No Group' THEN NULL ELSE pc.ContentGroupName END) AS ContentGroupName		--use same logic, so values go together.
		INTO #tmppagecontent
		FROM cte
		LEFT OUTER JOIN Warehouse.conformed.contentgroup cg WITH (NOLOCK)
			ON cg.ContentGroupKey = cte.ContentGroupKey
		LEFT OUTER JOIN Warehouse.conformed.pagecontent pc WITH (NOLOCK)
			ON pc.PageContentKey = cte.ContentGroupKey
		--SELECT TOP 1000 * FROM #tmppagecontent
		
		CREATE CLUSTERED INDEX CI_TmpTable_on_ContentGroupKey ON #tmppagecontent(ContentGroupKey) 

		--diag
		PRINT 'Created #tmppagecontent' + '   ' + CONVERT(varchar(200),GETDATE(),101) + '  ' + CONVERT(varchar(200),GETDATE(),108)

		BEGIN TRY
			DROP TABLE #tmpfactleads
		END TRY
		BEGIN CATCH
		END CATCH

		SELECT *
		INTO #tmpfactleads
		FROM Warehouse.Fact.LeadForTableauConversion fl WITH (NOLOCK)
		WHERE fl.leaddatekey >= @startymdid AND fl.leaddatekey < @endymdid
			--AND mel.Source IN ('AG', 'AGMOBILE')
			and fl.LeadSourceKey in (15,32,69,73,133,136,138,139,140,193,198,215)

		CREATE CLUSTERED INDEX CI_tmpfactleads_on_ContentGroupKey ON #tmpfactleads(LeadKey) 
		CREATE NONCLUSTERED INDEX NI_tmpfactleads_on_ProfileKey ON #tmpfactleads(ProfileKey) 
		CREATE NONCLUSTERED INDEX NI_tmpfactleads_on_adlistingkey ON #tmpfactleads(adlistingkey) 
		CREATE NONCLUSTERED INDEX NI_tmpfactleads_on_UserAgentKey ON #tmpfactleads(UserAgentKey) 
		CREATE NONCLUSTERED INDEX NI_tmpfactleads_on_LeadContentKey ON #tmpfactleads(LeadContentKey) 
		CREATE NONCLUSTERED INDEX NI_tmpfactleads_on_TrafficSourceKey ON #tmpfactleads(TrafficSourceKey) 
		CREATE NONCLUSTERED INDEX NI_tmpfactleads_on_LeadBusinessKey ON #tmpfactleads(LeadBusinessKey) 


		--diag
		PRINT 'Created #tmpfactleads' + '   ' + CONVERT(varchar(200),GETDATE(),101) + '  ' + CONVERT(varchar(200),GETDATE(),108)





		BEGIN TRY
			drop table #tmptableau_leads2						--Warehouse.dbo.tableau_leads2
		END TRY
		BEGIN CATCH
		END CATCH


		SELECT pr.profilename
			, fl.LeadDateKey
			, cast (cast (fl.LeadDateKey as varchar(8)) as datetime) as LeadDate
			, al.propertycbsaname
			, ts.trafficsourcename
			, case when fl.trafficsourcekey in (1,5,6,7) then 'All Campaign'
					when fl.trafficsourcekey in (2,3,4) then 'Organic'
					when fl.leadsourcekey in (139,140,198,215) then 'All Campaign'
				else 'Organic' 
				end as visittype
			, ua.Browser
			, ua.Device_Type
			, case when LEFT(fl.LeadSourceBusinessKey,5) = 'phone' then fl.LeadMediumDesc
					when ua.device_type = 'Tablet' then 'Desktop' else ua.device_type
				end as desk_mobile
			, case p.ContentGroupMeasure when 'detail' then 'pdp'	--contentgroupmeasure		was p.pagename
					when 'details' then 'pdp'
					when 'Homepage' then 'home'
					when 'map' then 'srp_map'
					when 'search_mgtco' then 'srp_mgt'
					when 'myplaces' then 'my_places'
					when 'inactive' then 'pdp'
					when 'deals' then 'srp'
				else (case when p.ContentGroupMeasure like 'search%' then 'srp' else p.ContentGroupMeasure end)
				end as EntryPage
			, case mel.pagetype when 'tab_detail' then 'pdp'
					when 'search' then 'srp'
					when 'map_search' then 'srp_map'
					when 'mgtco_search' then 'srp_mgt'
					when 'myplaces' then 'my_places'
				else (case when mel.pagetype is null and fl.profilekey = 51 then 'pdp' else mel.pagetype end)
				end as LeadPage
			, count(distinct case when LEFT(fl.LeadSourceBusinessKey,5) = 'email' then fl.leadbusinesskey else 'Other' end) AS email_lead_count
			, count(distinct case when LEFT(fl.LeadSourceBusinessKey,5) = 'phone' then fl.leadbusinesskey else 'Other' end) AS phone_lead_count
		INTO #tmptableau_leads2
		FROM #tmpfactleads fl WITH (NOLOCK)							--View - Warehouse.Fact.LeadForTableauConversion     Table - Was Warehouse.Fact.Lead, but view does not have adlistingkey, and this does not have UserAgentKey
		inner join Warehouse.conformed.profile pr WITH (NOLOCK)
			on pr.profilekey = fl.profilekey
		inner join Warehouse.conformed.adlisting al WITH (NOLOCK)
			on fl.adlistingkey = al.adlistingkey
		inner JOIN Warehouse.Dimension.UserAgent ua WITH (NOLOCK)
			ON ua.UserAgentKey = fl.UserAgentKey
		inner join	#tmppagecontent p							--Warehouse.conformed.page p  --Content group name page_content
			on fl.LeadContentKey = p.contentgroupkey				--was fl.entrypagekey
		join Warehouse.conformed.trafficsource ts WITH (NOLOCK)
			on fl.trafficsourcekey = ts.trafficsourcekey
		left outer JOIN RentPath.Mart.EmailLeads mel WITH (NOLOCK)						--was RentPath.dbo.MartEmails
			ON fl.LeadBusinessKey = CAST(mel.LeadID AS VARCHAR(20))
		--WHERE fl.leaddatekey >= @startymdid AND fl.leaddatekey < @endymdid
		--	--AND mel.Source IN ('AG', 'AGMOBILE')
		--	and fl.LeadSourceKey in (15,32,69,73,133,136,138,139,140,193,198,215)
		group by pr.profilename
			, fl.LeadDateKey
			, cast (cast (fl.LeadDateKey as varchar(8)) as datetime)
			, al.propertycbsaname
			, ts.trafficsourcename
			, case when fl.trafficsourcekey in (1,5,6,7) then 'All Campaign'
					when fl.trafficsourcekey in (2,3,4) then 'Organic'
					when fl.leadsourcekey in (139,140,198,215) then 'All Campaign'
				else 'Organic' end
			, ua.Browser
			, ua.Device_Type
			, case when LEFT(fl.LeadSourceBusinessKey,5) = 'phone' then fl.LeadMediumDesc
				when ua.device_type = 'Tablet' then 'Desktop' else ua.device_type end
			, case p.ContentGroupMeasure when 'detail' then 'pdp'
					when 'details' then 'pdp'
					when 'Homepage' then 'home'
					when 'map' then 'srp_map'
					when 'search_mgtco' then 'srp_mgt'
					when 'myplaces' then 'my_places'
					when 'inactive' then 'pdp'
					when 'deals' then 'srp'
				else (case when p.ContentGroupMeasure like 'search%' then 'srp' else p.ContentGroupMeasure end)
				end
			, case mel.pagetype when 'tab_detail' then 'pdp'
					when 'search' then 'srp'
					when 'map_search' then 'srp_map'
					when 'mgtco_search' then 'srp_mgt'
					when 'myplaces' then 'my_places'
				else (case when mel.pagetype is null and fl.profilekey = 51 then 'pdp' else mel.pagetype end)
				end		--SELECT TOP 10000 * FROM Warehouse.dbo.Tableau_leads2

		--diag
		PRINT 'Created #tmptableau_leads2' + '   ' + CONVERT(varchar(200),GETDATE(),101) + '  ' + CONVERT(varchar(200),GETDATE(),108)

		BEGIN TRY
			drop table #tmptableauvisits		--Warehouse.dbo.tableau_visits
		END TRY
		BEGIN CATCH
		END CATCH

		SELECT pr.profilename
			, cast (cast (ve.VisitDateKey as varchar(8)) as datetime) as visitdate
			, cbsaname
			, case when ve.trafficsourcekey in (1,5,6,7) then 'All Campaign'
				else 'Organic'
				end as visittype
			, ts.trafficsourcename
			, ua.Browser
			, ua.Device_Type
			, case when ua.device_type = 'Tablet' then 'Desktop' else ua.device_type end as desk_mobile
			, case pc.ContentGroupName when 'detail' then 'pdp'
					when 'details' then 'pdp'
					when 'Homepage' then 'home'
					when 'map' then 'srp_map'
					when 'search_mgtco' then 'srp_mgt'
					when 'myplaces' then 'my_places'
					when 'inactive' then 'pdp'
					when 'deals' then 'srp'
				else (case when pc.ContentGroupName like 'search%' then 'srp' else ISNULL(pc.ContentGroupName,'Other') end)
				end as EntryPage
			, SUM(ve.LeadCount) AS LeadTagCount
			, SUM(ve.PhoneCount) AS PhoneTagCount
			, count(distinct ve.visitkey) as VisitCount
		INTO #tmptableauvisits
		FROM Warehouse.fact.VisitEvent as ve WITH (NOLOCK)
		join Warehouse.conformed.location l WITH (NOLOCK)
			on ve.entrylocationkey = l.locationkey
		inner join Warehouse.conformed.profile pr WITH (NOLOCK)
			on pr.profilekey = ve.profilekey
		join Warehouse.conformed.trafficsource ts WITH (NOLOCK)
			on ve.trafficsourcekey = ts.trafficsourcekey
		JOIN Warehouse.Dimension.UserAgent ua WITH (NOLOCK)
			ON ua.UserAgentKey = ve.UserAgentKey
		JOIN #tmppagecontent pc																--Warehouse.Conformed.PageContent_replicated pc
			ON ve.EntryPageContentKey = pc.contentgroupkey
		where ve.ProfileKey in (1,51)
			and ve.VisitDateKey >= @startymdid AND ve.VisitDateKey < @endymdid
		group by pr.profilename
			, cast (cast (ve.VisitDateKey as varchar(8)) as datetime)
			, cbsaname
			, case when ve.trafficsourcekey in (1,5,6,7) then 'All Campaign' else 'Organic' end
			, ts.trafficsourcename
			, ua.Browser
			, ua.Device_Type
			, case when ua.device_type = 'Tablet' then 'Desktop' else ua.device_type end
			, case pc.ContentGroupName when 'detail' then 'pdp'
							when 'details' then 'pdp'
							when 'Homepage' then 'home'
							when 'map' then 'srp_map'
							when 'search_mgtco' then 'srp_mgt'
							when 'myplaces' then 'my_places'
							when 'inactive' then 'pdp'
							when 'deals' then 'srp'
				else (case when pc.ContentGroupName like 'search%' then 'srp' else ISNULL(pc.ContentGroupName,'Other') end)
				end


		--diag
		PRINT 'Created #tmptableauvisits' + '   ' + CONVERT(varchar(200),GETDATE(),101) + '  ' + CONVERT(varchar(200),GETDATE(),108)


		/* ========================================================================== */
		--Get a test version of table to show the VisitEventKey and possibly other info for Franklin to trace the data back to find out why it is OTHER for EntryPage (would have been null)
		/*
		BEGIN TRY
			DROP TABLE #tmptableauvisitstest
		END TRY
		BEGIN CATCH
		END CATCH

		SELECT pr.profilename
			, ve.VisitEventKey
			, cast (cast (ve.VisitDateKey as varchar(8)) as datetime) as visitdate
			, cbsaname
			, case when ve.trafficsourcekey in (1,5,6,7) then 'All Campaign'
				else 'Organic'
				end as visittype
			, ts.trafficsourcename
			, ua.Browser
			, ua.Device_Type
			, case when ua.device_type = 'Tablet' then 'Desktop' else ua.device_type end as desk_mobile
			, case pc.ContentGroupName when 'detail' then 'pdp'
					when 'details' then 'pdp'
					when 'Homepage' then 'home'
					when 'map' then 'srp_map'
					when 'search_mgtco' then 'srp_mgt'
					when 'myplaces' then 'my_places'
					when 'inactive' then 'pdp'
					when 'deals' then 'srp'
				else (case when pc.ContentGroupName like 'search%' then 'srp' else ISNULL(pc.ContentGroupName,'Other') end)
				end as EntryPage
			, pc.ContentGroupName
			--, SUM(ve.LeadCount) AS LeadTagCount
			--, SUM(ve.PhoneCount) AS PhoneTagCount
			--, count(distinct ve.visitkey) as VisitCount
		INTO #tmptableauvisitstest
		FROM Warehouse.fact.VisitEvent as ve WITH (NOLOCK)
		join Warehouse.conformed.location l WITH (NOLOCK)
			on ve.entrylocationkey = l.locationkey
		inner join Warehouse.conformed.profile pr WITH (NOLOCK)
			on pr.profilekey = ve.profilekey
		join Warehouse.conformed.trafficsource ts WITH (NOLOCK)
			on ve.trafficsourcekey = ts.trafficsourcekey
		JOIN Warehouse.Dimension.UserAgent ua WITH (NOLOCK)
			ON ua.UserAgentKey = ve.UserAgentKey
		JOIN #tmppagecontent pc																--Warehouse.Conformed.PageContent_replicated pc
			ON ve.EntryPageContentKey = pc.contentgroupkey
		where ve.ProfileKey in (1,51)
			and ve.VisitDateKey >= @startymdid AND ve.VisitDateKey < @endymdid
		*/
		--SELECT * FROM #tmptableauvisitstest WHERE EntryPage = 'Other'
		/* ========================================================================== */





		BEGIN TRY
			drop table #tmpleadsstage						--.dbo.[Tableau_leads_stage]
		END TRY
		BEGIN CATCH
		END CATCH

		select
			v.profilename
			, v.leaddate as ymd
			, v.propertycbsaname as cbsaname
			, v.visittype
			, v.desk_mobile
			, sum(v.email_lead_count) as email_lead_count
			, sum(v.phone_lead_count) as phone_lead_count
		INTO #tmpleadsstage
		from #tmptableau_leads2	v				--Warehouse.dbo.tableau_leads2 v
		group by v.profilename
			, v.leaddate
			, v.propertycbsaname
			, v.visittype
			, v.desk_mobile

		--diag
		PRINT 'Created #tmpleadsstage' + '   ' + CONVERT(varchar(200),GETDATE(),101) + '  ' + CONVERT(varchar(200),GETDATE(),108)


		BEGIN TRY
			drop table	#tmpvisitsstage							--Warehouse.dbo.[Tableau_visits_stage]
		END TRY
		BEGIN CATCH
		END CATCH

		select
			v.profilename
			, v.visitdate as ymd
			, v.cbsaname as cbsaname
			, v.visittype
			, v.desk_mobile
			, sum(v.leadtagcount) as leadtagcount
			, sum(v.phonetagcount) as phonetagcount
			, sum(v.visitcount) as visitcount
		INTO #tmpvisitsstage
		from #tmptableauvisits v							--Warehouse.dbo.tableau_visits v
		group by v.profilename
			, v.visitdate
			, v.cbsaname
			, v.visittype
			, v.desk_mobile

		--diag
		PRINT 'Created #tmpvisitsstage' + '   ' + CONVERT(varchar(200),GETDATE(),101) + '  ' + CONVERT(varchar(200),GETDATE(),108)
		--SELECT * FROM #tmpvisitsstage
	


		BEGIN TRY
			drop table #tmpemailconversion						--[Tableau_email_conversion]
		END TRY
		BEGIN CATCH
		END CATCH

		select
			case when v.profilename = 'Apartmentguide' then 'AG' else 'AG MDOT' end as profilename
			, CONVERT(int, Convert(varchar(10),v.visitdate,112)) AS ymdid
			, v.visitdate as ymd
			, v.cbsaname
			, v.trafficsourcename
			, v.visittype
			, v.browser
			, v.device_type
			, v.desk_mobile
			, v.entrypage
			, v.leadtagcount
			, v.phonetagcount
			, v.visitcount
			, sum(isnull(l.email_lead_count,0)) as email_lead_count
		INTO #tmpemailconversion
		from #tmptableauvisits v
		left outer join #tmptableau_leads2 l	--Warehouse.dbo.tableau_leads2 l
			on v.profilename = l.profilename
				and v.visitdate = l.leaddate
				and v.cbsaname = l.propertycbsaname
				and v.trafficsourcename = l.trafficsourcename
				and v.browser = l.browser
				and v.device_type = l.device_type
				and v.entrypage = l.entrypage
				and l.email_lead_count > 0
		group by
			v.profilename
			, v.visitdate
			, v.cbsaname
			, v.trafficsourcename
			, v.visittype
			, v.browser
			, v.device_type
			, v.desk_mobile
			, v.entrypage
			, v.leadtagcount
			, v.phonetagcount
			, v.visitcount

		--diag
		PRINT 'Created #tmpemailconversion' + '   ' + CONVERT(varchar(200),GETDATE(),101) + '  ' + CONVERT(varchar(200),GETDATE(),108)

		
		--Delete records from table within the input time frame - allows back marting
		BEGIN TRANSACTION
			delete from RentPath.dbo.[Tableau_email_conversion]
			where ymd >= @startymd and ymd < @endymd
	
			INSERT INTO RentPath.dbo.[Tableau_email_conversion]
			SELECT * FROM #tmpemailconversion
		COMMIT TRANSACTION
		
		--diag
		PRINT 'Updated Tableau_email_conversion table with #tmpemailconversion' + '   ' + CONVERT(varchar(200),GETDATE(),101) + '  ' + CONVERT(varchar(200),GETDATE(),108)


		BEGIN TRY
			DROP TABLE #tmptableauconversion
		END TRY
		BEGIN CATCH
		END CATCH



		select
			case when v.profilename = 'Apartmentguide' then 'AG' else 'AG MDOT' end as profilename
			, CONVERT(int, Convert(varchar(10),v.ymd,112)) AS ymdid
			, v.ymd
			, v.cbsaname
			, v.visittype
			, v.desk_mobile
			, v.leadtagcount
			, v.phonetagcount
			, v.visitcount
			, l.email_lead_count
			, l.phone_lead_count
		INTO #tmptableauconversion
		from #tmpvisitsstage v
		left outer join #tmpleadsstage l
			on v.profilename = l.profilename
				and v.ymd = l.ymd
				and v.cbsaname = l.cbsaname
				and v.visittype = l.visittype
				and v.desk_mobile = l.desk_mobile
	
		--diag
		PRINT 'Created #tmptableauconversion' + '   ' + CONVERT(varchar(200),GETDATE(),101) + '  ' + CONVERT(varchar(200),GETDATE(),108)

		
		--Delete records from table within the input time frame - allows back marting
		BEGIN TRANSACTION
			delete from RentPath.dbo.[Tableau_conversion]
			where ymd >= @startymd and ymd < @endymd
	
			INSERT INTO RentPath.dbo.[Tableau_conversion]
			SELECT * FROM #tmptableauconversion
		COMMIT TRANSACTION
		
		--diag
		PRINT 'Updated Tableau_conversion table with #tmptableauconversion' + '   ' + CONVERT(varchar(200),GETDATE(),101) + '  ' + CONVERT(varchar(200),GETDATE(),108)


		--SELECT * FROM #tmpemailconversion ORDER BY YMDID DESC--WHERE entrypage = 'Other'
		--SELECT * FROM #tmptableauconversion	ORDER BY YMDID DESC


		--SELECT * FROM RentPath.dbo.[Tableau_conversion] WHERE YMDID BETWEEN 20160322 AND 20160411 ORDER BY YMDID DESC
		--SELECT * FROM RentPath.dbo.[Tableau_email_conversion] WHERE YMDID BETWEEN 20160322 AND 20160411 ORDER BY YMDID DESC
		--SELECT YMDID, COUNT(*) AS RecCt FROM RentPath.dbo.[Tableau_conversion] GROUP BY YMDID ORDER BY YMDID DESC
		--SELECT YMDID, COUNT(*) AS RecCt FROM RentPath.dbo.[Tableau_email_conversion] GROUP BY YMDID ORDER BY YMDID DESC


	END TRY
	BEGIN CATCH
		SELECT 
			@ErrorMessage		= ERROR_MESSAGE(),
			@ErrorNumber		= ERROR_NUMBER(),
			@ErrorSeverity		= ERROR_SEVERITY(),
			@ErrorState			= ERROR_STATE(),
			@ErrorLine			= ERROR_LINE(),
			@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');
		
		SET @ErrorMessage = 'Attempting to load tableau_conversion and tableau_email_conversion tables in SPROC RentPath.dbo.TableauConversionMarting.   Error - ' + @ErrorMessage


		if @@trancount > 0
			ROLLBACK TRANSACTION


		raiserror(@ErrorMessage,16,1) with log;

		RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	END CATCH	


	SET NOCOUNT OFF;
END



GO
/****** Object:  StoredProcedure [Dimension].[pr_ListingsReplaceFromAPS]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Dimension].[pr_ListingsReplaceFromAPS]
/*******************************************************************************************
* Name:	Dimension.pr_ListingsReplaceFromAPS
* ------------------------------------------------------------------------------------------
* Desc:	Procedure to distribute APS dim listings data to AG, Rentcom and RentPath
* ------------------------------------------------------------------------------------------
* Test:	exec Dimension.pr_ListingsReplaceFromAPS
* ------------------------------------------------------------------------------------------
* Hist:	01	06/20/2016		dwert				Original version for APS deployment
* Hist: 02	06/30/2016		dwert				Ticket 23439, On the APS side, SFCommunityID source was changed to a column that had NULL
*												values.  RentPath doesn't allow NULLs.  Added ISNULL to make the value '' in both account and community.
* Hist: 03	07/03/2016		dwert				Ticket 23479, add logging, put each truncate/insert into its own transaction
* Hist: 04	08/08/2016		Brian Trembley		Ticket 23056, 23629 adding new columns
* Hist: 05	10/12/2016		Colleen Rocks		Ticket 23976; add listingsource to RentPath.Dimension.Listings
* Hist: 06	11/09/2016		dwert				Ticket 24694, add Ext_PropertyID to dim.listings
* Hist: 07	12/27/2016		Colleen Rocks		Cases 01349556, 01343903 & 01350562; added upsellpropinternetbanner, UpsellPropDynamicLeadForm, upselllistnewconstr, 
*												upselllistremodeled, availabilityurl to RentPath.Dimension.Listings
********************************************************************************************/


AS
SET NOCOUNT ON
	----------------------------------------
	-- Logging Variable
	----------------------------------------
    DECLARE @TrackDate DATETIME
       ,@LengthInSeconds INT
       ,@DatabaseName VARCHAR(128)
       ,@ProcedureName VARCHAR(128)
       ,@FailedSteps INT
       ,@Comments VARCHAR(500)
                
    SET @TrackDate = GETDATE()
    SET @DatabaseName = DB_NAME()        
    SET @ProcedureName = 'Dimension.pr_ListingsReplaceFromAPS'
    SET @FailedSteps = 0

    SET @LengthInSeconds = DATEDIFF(ss,@TrackDate,GETDATE())
    EXEC DBAUtility.dbo.pr_Logging_StoredProcs 
        @DatabaseName = @DatabaseName
       ,@ProcName = @ProcedureName
       ,@StepName = 'Start Procedure'
       ,@VariableStates = ''
       ,@LengthInSeconds = @LengthInSeconds
       ,@Comments = 'Start Procedure - load to AG.dimension.listings'

    SET @TrackDate = GETDATE()

	BEGIN TRY
	BEGIN TRAN
		TRUNCATE TABLE ApartmentGuide.Dimension.Listings
 
		INSERT INTO ApartmentGuide.Dimension.Listings (
			  YMDID
			   ,PropertyID
			   ,ListingID
			   ,ListingTypeID
			   ,ListingType
			   ,ListingTypeShort
			   ,ExternalID
			   ,ExternalPriceCode
			   ,ListingDetailsSource
			   ,MgtCoID
			   ,MgtCoName
			   ,PropertyName
			   ,PropertyAddress
			   ,StatusID
			   ,PropertyCity
			   ,PropertyState
			   ,ZipCode
			   ,MetroName
			   ,SectionName
			   ,SubSectionName
			   ,PropertyTotalUnits
			   ,TotalPhotos
			   ,ActivePhotos
			   ,TotalFloorPlans
			   ,ActiveFloorPlans
			   ,TotalAmenities
			   ,ActiveAmenities
			   ,ActiveHDPhotos
			   ,ActiveHDFloorPlans
			   ,ShowOfficeHours
			   ,ListingDescriptionLength
			   ,ShowPricing
			   ,CalculatedPrice
			   ,UpsellListHighlighted
			   ,UpsellListCoupon
			   ,UpsellPropEmercial
			   ,UpsellPropCommunityVideo
			   ,UpsellPropFeaturedCommunityPlatinum
			   ,UpsellPropFeaturedCommunityGold
			   ,UpsellPropFeaturedCommunitySilver
			   ,UpsellPropVirtualBrochure
			   ,UpsellListCorporateListing
			   ,UpsellListCollegeListing
			   ,UpsellListMilitaryListing
			   ,UpsellListApartmentListing
			   ,UpsellPropPhotoUpgrade
			   ,UpsellMgmtManagementCoLogoDisplay
			   ,UpsellListSeniorListing
			   ,UpsellPropPropertyLogoDisplay
			   ,UpsellPropPremiumUpgrade
			   ,UpsellPropVideoSpokesModel
			   ,UpsellPropFrontPage
			   ,UpsellPropSpanish
			   ,UpsellPropCallRecording
			   ,UpsellPropFormToPhone
			   ,UpsellPropRentalsPremier
			   ,UpsellPropRentalsFeatured
			   ,UpsellListRentalsListing
			   ,UpsellListFloorplanUpgrade
			   ,UpsellListPayPerLead
			   ,UpsellListRentalsSpotlightAd
			   ,UpsellListSpotLight
			   ,UpsellListPayPerLease
			   ,UpsellListDiamondMetro
			   ,UpsellListDiamondCity
			   ,UpsellListDiamondMax
			   ,UpsellListRentalsStandard
			   ,UpsellListCommunityCarousel
			   ,UpsellList30SecondVideo
			   ,UpsellList60SecondVideo
			   ,UpsellListRentalsCarousel
			   ,UpsellListRentalsStandardPlus
			   ,UpsellListMobileSpotLight
			   ,UpsellPropMobileDeal
			   ,UpsellPropDynamicLeadForm
			   ,UpsellListIncomeRestricted
			   ,UpsellListPetFriendly
			   ,UpsellListLuxuryCommunity
			   ,UpsellPropRepMon
			   ,UpsellPropSocialMediaMan
			   ,UpsellListMobileDiamond
			   ,UpsellListEZPay
			   ,UpsellMgmtPeelAd
			   ,UpsellListSponsoredApartment
			   ,UpsellListHDPanoTours
			   ,UpsellListHDVideo
			   ,UpsellListHDPhoto
			   ,UpsellList3DFloorPlan
			   ,CommunityVideoURLFulfilled
			   ,HDActiveFloorPlansFulfilled
			   ,HDActivePhotosFulfilled
			   ,HDTourURLFulfilled
			   ,HDVideoURLFulfilled
			   ,LinkedFloorPlanFulfilled
			   ,VirtualTourFulfilled
			   ,Linked3DFloorPlanFulfilled
			   ,LinkedRoomPlannerFulfilled
			   ,MobileDealFulfilled
			   ,UpsellListAGSites
			   ,UpsellMediaCenter
			   ,UpsellListPayPerLeaseALM
			   ,UpsellFutureUse04
			   ,CR3AvgOverallRating
			   ,IsSEM
			   ,IsOverThreshold
			   ,IsRentalPropToBeDeleted
			   ,CallTrackingInBook
			   ,CallTrackingInBookStartDate
			   ,CouponActiveOnSite
			   ,CouponStartDate
			   ,CouponExpirationDate
			   ,CouponText
			   ,VerizonFIOS
			   ,ATTUverse
			   ,DIRECTV
			   ,BrightHouse
			   ,Charter
			   ,XfinitySP
			   ,XfinityDP
			   ,XfinityTP
			   ,TimeWarner
			   ,Ranking
			   ,NumericRank
			   ,WebTollFree
			   ,WebTarget
			   ,RentalsTollFree
			   ,RentalsTarget
			   ,ASGTollFree
			   ,ASGTarget
			   ,AGCTollFree
			   ,AGCTarget
			   ,ContactPhone
			   ,LocalTestNumber
			   ,LeadFax
			   ,UnusedLeadEmail
			   ,PropertyURL
			   ,AGSitesURL
			   ,PhoneLeadRecapEmail
			   ,LeadEmailWithType
			   ,VanityURL
			   ,PlacementTier
			   ,PrintProductPoints
			   ,InternetProductPoints
			   ,LegacyLoyaltyPoints
			   ,ContractLoyaltyPoints
			   ,MobilePoints
			   ,LastUpdateYMDID
			   ,LastUpdateDateTime
			   ,GeoLong
			   ,GeoLat
			   ,GeogPoint
			   ,Whisper
			   ,LowPrice
			   ,HighPrice
			   ,LinkedFloorPlan
			   ,Linked3DFloorPlan
			   ,LinkedRoomPlanner
			   ,RPLRANK
		)
		SELECT  YMDID
			   ,PropertyID
			   ,ListingID
			   ,ListingTypeID
			   ,ListingType
			   ,ListingTypeShort
			   ,ExternalID
			   ,ExternalPriceCode
			   ,ListingDetailsSource
			   ,MgtCoID
			   ,MgtCoName
			   ,PropertyName
			   ,PropertyAddress
			   ,StatusID
			   ,PropertyCity
			   ,PropertyState
			   ,ZipCode
			   ,MetroName
			   ,SectionName
			   ,SubSectionName
			   ,PropertyTotalUnits
			   ,TotalPhotos
			   ,ActivePhotos
			   ,TotalFloorPlans
			   ,ActiveFloorplans
			   ,TotalAmenities
			   ,ActiveAmenities
			   ,ActiveHDPhotos
			   ,ActiveHDFloorplans
			   ,ShowOfficeHours
			   ,ListingDescriptionLength
			   ,ShowPricing
			   ,CalculatedPrice
			   ,UpsellListHighlighted
			   ,UpsellListCoupon
			   ,UpsellPropEmercial
			   ,UpsellPropCommunityVideo
			   ,UpsellPropFeaturedCommunityPlatinum
			   ,UpsellPropFeaturedCommunityGold
			   ,UpsellPropFeaturedCommunitySilver
			   ,UpsellPropVirtualBrochure
			   ,UpsellListCorporateListing
			   ,UpsellListCollegeListing
			   ,UpsellListMilitaryListing
			   ,UpsellListApartmentListing
			   ,UpsellPropPhotoUpgrade
			   ,UpsellMgmtManagementCoLogoDisplay
			   ,UpsellListSeniorListing
			   ,UpsellPropPropertyLogoDisplay
			   ,UpsellPropPremiumUpgrade
			   ,UpsellPropVideoSpokesModel
			   ,UpsellPropFrontPage
			   ,UpsellPropSpanish
			   ,UpsellPropCallRecording
			   ,UpsellPropFormToPhone
			   ,UpsellPropRentalsPremier
			   ,UpsellPropRentalsFeatured
			   ,UpsellListRentalsListing
			   ,UpsellListFloorplanUpgrade
			   ,UpsellListPayPerLead
			   ,UpsellListRentalsSpotlightAd
			   ,UpsellListSpotLight
			   ,UpsellListPayPerLease
			   ,UpsellListDiamondMetro
			   ,UpsellListDiamondCity
			   ,UpsellListDiamondMax
			   ,UpsellListRentalsStandard
			   ,UpsellListCommunityCarousel
			   ,UpsellList30SecondVideo
			   ,UpsellList60SecondVideo
			   ,UpsellListRentalsCarousel
			   ,UpsellListRentalsStandardPlus
			   ,UpsellListMobileSpotLight
			   ,UpsellPropMobileDeal
			   ,UpsellPropDynamicLeadForm
			   ,UpsellListIncomeRestricted
			   ,UpsellListPetFriendly
			   ,UpsellListLuxuryCommunity
			   ,UpsellPropRepMon
			   ,UpsellPropSocialMediaMan
			   ,UpsellListMobileDiamond
			   ,UpsellListEZPay
			   ,UpsellMgmtPeelAd
			   ,UpsellListSponsoredApartment
			   ,UpsellListHDPanoTours
			   ,UpsellListHDVideo
			   ,UpsellListHDPhoto
			   ,UpsellList3DFloorPlan
			   ,CommunityVideoURLFulfilled
			   ,HDActiveFloorplansFulfilled
			   ,HDActivePhotosFulfilled
			   ,HDTourURLFulfilled
			   ,HDVideoURLFulfilled
			   ,LinkedFloorplanFulfilled
			   ,VirtualTourFulfilled
			   ,Linked3DFloorplanFulfilled
			   ,LinkedRoomPlannerFulfilled
			   ,MobileDealFulfilled
			   ,UpsellListAGSites
			   ,UpsellMediaCenter
			   ,UpsellListPayPerLeaseALM
			   ,UpsellFutureUse04
			   ,CR3AvgOverallRating
			   ,IsSEM
			   ,IsOverThreshold
			   ,IsRentalPropToBeDeleted
			   ,CallTrackingInBook
			   ,CallTrackingInBookStartDate
			   ,CouponActiveOnSite
			   ,CouponStartDate
			   ,CouponExpirationDate
			   ,CouponText
			   ,VerizonFIOS
			   ,ATTUverse
			   ,DIRECTV
			   ,Brighthouse
			   ,Charter
			   ,XfinitySP
			   ,XfinityDP
			   ,XfinityTP
			   ,TimeWarner
			   ,Ranking
			   ,NumericRank
			   ,WebTollFree
			   ,WebTarget
			   ,RentalsTollFree
			   ,RentalsTarget
			   ,ASGTollFree
			   ,ASGTarget
			   ,AGCTollFree
			   ,AGCTarget
			   ,ContactPhone
			   ,LocalTestNumber
			   ,LeadFax
			   ,UnusedLeadEmail
			   ,PropertyURL
			   ,AGSitesURL
			   ,PhoneLeadRecapEmail
			   ,LeadEmailWithType
			   ,VanityURL
			   ,PlacementTier
			   ,PrintProductPoints
			   ,InternetProductPoints
			   ,LegacyLoyaltyPoints
			   ,ContractLoyaltyPoints
			   ,MobilePoints
			   ,LastUpdateYMDID
			   ,LastUpdateDateTime
			   ,GeoLong
			   ,GeoLat
			   ,GeogPoint
			   ,Whisper
			   ,LowPrice
			   ,HighPrice
			   ,LinkedFloorplan
			   ,Linked3DFloorplan
			   ,LinkedRoomPlanner
			   ,RPLRANK
		FROM dbo.vw_APSDimListingsForAG;

		SET @LengthInSeconds = DATEDIFF(ss,@TrackDate,GETDATE())
		EXEC DBAUtility.dbo.pr_Logging_StoredProcs 
					@DatabaseName       = @DatabaseName, -- varchar(128)
					@ProcName           = @ProcedureName, -- varchar(128)
					@StepName           = 'Load AG', -- varchar(128)
					@VariableStates     = '', -- varchar(500)
					@LengthInSeconds    = @LengthInSeconds, -- int
					@Comments           = 'Commit to AG.dimension.listings succeeded' -- varchar(500)
		SET @TrackDate = GETDATE()
		
		COMMIT;
	 END TRY
	 BEGIN CATCH
		ROLLBACK;
		
		SET @LengthInSeconds = DATEDIFF(ss,@TrackDate,GETDATE())
		SELECT @Comments = 'Load to AG.dimension.listings failed with message ' + LEFT(ERROR_MESSAGE(),450)

		EXEC DBAUtility.dbo.pr_Logging_StoredProcs 
					@DatabaseName       = @DatabaseName, -- varchar(128)
					@ProcName           = @ProcedureName, -- varchar(128)
					@StepName           = 'Load AG', -- varchar(128)
					@VariableStates     = '', -- varchar(500)
					@LengthInSeconds    = @LengthInSeconds, -- int
					@Comments           = @Comments -- varchar(500)
		SET @TrackDate = GETDATE()
		SET @FailedSteps = @FailedSteps + 1
	 END CATCH

	 begin TRY
	 begin TRAN
			TRUNCATE TABLE RentCom.Dimension.Listings

			INSERT INTO RentCom.Dimension.Listings (
					YMDID
				   ,RentPropertyID
				   ,PropertyID
				   ,ListingID
				   ,ListingTypeID
				   ,ListingType
				   ,ListingTypeShort
				   ,RentStatusID
				   ,ExternalID
				   ,ExternalPriceCode
				   ,ListingDetailsSource
				   ,RentMgtCoID
				   ,MgtCoName
				   ,RentCompanyID
				   ,PropertyName
				   ,PropertyAddress
				   ,PropertyCity
				   ,PropertyState
				   ,PropertyZip
				   ,MetroName
				   ,SectionName
				   ,SubSectionName
				   ,PropertyTotalUnits
				   ,TotalPhotos
				   ,ActivePhotos
				   ,TotalFloorPlans
				   ,ActiveFloorPlans
				   ,TotalAmenities
				   ,ActiveAmenities
				   ,ActiveHDPhotos
				   ,ActiveHDFloorPlans
				   ,ShowPricing
				   ,ShowOfficeHours
				   ,ListingDescriptionLength
				   ,UpsellListCoupon
				   ,UpsellPropCallRecording
				   ,UpsellRentListing
				   ,UpsellRentRewardCard
				   ,UpsellRentFeaturedPlacement
				   ,UpsellRentPTE
				   ,UpsellRentVIPPlacement
				   ,UpsellRentNoVacancy
				   ,UpsellRentMetroFL
				   ,UpsellRentSpotlight
				   ,UpsellRentSubscriptionModel
				   ,UpsellListPayPerLeaseALM
				   ,FutureUpsell04
				   ,FutureUpsell05
				   ,CR3AvgOverallRating
				   ,HDActiveFloorPlansFulfilled
				   ,HDActivePhotosFulfilled
				   ,LinkedFloorPlanFulfilled
				   ,Linked3DFloorPlanFulfilled
				   ,LinkedRoomPlannerFulfilled
				   ,MobileDealFulfilled
				   ,CouponActiveOnSite
				   ,CouponStartDate
				   ,CouponExpirationDate
				   ,CouponText
				   ,RentInternetTollFree
				   ,RentInternetTarget
				   ,RentMobileTollFree
				   ,RentMobileTarget
				   ,ContactPhone
				   ,PropertyURL
				   ,RentLeadFax
				   ,RentLeadEmail
				   ,RentLeadEmailWithType
				   ,VanityURL
				   ,LastUpdateYMDID
				   ,DateModified
				   ,GeoLong
				   ,GeoLat
				   ,Whisper
				   ,LinkedFloorPlan
				   ,Linked3DFloorPlan
				   ,LinkedRoomPlanner
				   ,LowPrice
				   ,HighPrice
				   ,CalculatedPrice
			)
			SELECT  YMDID
				   ,RentPropertyID
				   ,PropertyID
				   ,ListingID
				   ,ListingTypeID
				   ,ListingType
				   ,ListingTypeShort
				   ,RentStatusID
				   ,ExternalID
				   ,ExternalPriceCode
				   ,ListingDetailsSource
				   ,RentMgtCoID
				   ,MgtCoName
				   ,RentCompanyID
				   ,PropertyName
				   ,PropertyAddress
				   ,PropertyCity
				   ,PropertyState
				   ,PropertyZip
				   ,MetroName
				   ,SectionName
				   ,SubSectionName
				   ,PropertyTotalUnits
				   ,TotalPhotos
				   ,ActivePhotos
				   ,TotalFloorPlans
				   ,ActiveFloorPlans
				   ,TotalAmenities
				   ,ActiveAmenities
				   ,ActiveHDPhotos
				   ,ActiveHDFloorPlans
				   ,ShowPricing
				   ,ShowOfficeHours
				   ,ListingDescriptionLength
				   ,UpsellListCoupon
				   ,UpsellPropCallRecording
				   ,UpsellRentListing
				   ,UpsellRentRewardCard
				   ,UpsellRentFeaturedPlacement
				   ,UpsellRentPTE
				   ,UpsellRentVIPPlacement
				   ,UpsellRentNoVacancy
				   ,UpsellRentMetroFL
				   ,UpsellRentSpotlight
				   ,UpsellRentSubscriptionModel
				   ,UpsellListPayPerLeaseALM
				   ,FutureUpsell04
				   ,FutureUpsell05
				   ,CR3AvgOverallRating
				   ,HDActiveFloorPlansFulfilled
				   ,HDActivePhotosFulfilled
				   ,LinkedFloorPlanFulfilled
				   ,Linked3DFloorPlanFulfilled
				   ,LinkedRoomPlannerFulfilled
				   ,MobileDealFulfilled
				   ,CouponActiveOnSite
				   ,CouponStartDate
				   ,CouponExpirationDate
				   ,CouponText
				   ,RentInternetTollFree
				   ,RentInternetTarget
				   ,RentMobileTollFree
				   ,RentMobileTarget
				   ,ContactPhone
				   ,PropertyURL
				   ,RentLeadFax
				   ,RentLeadEmail
				   ,RentLeadEmailWithType
				   ,VanityURL
				   ,LastUpdateYMDID
				   ,DateModified
				   ,GeoLong
				   ,GeoLat
				   ,Whisper
				   ,LinkedFloorPlan
				   ,Linked3DFloorPlan
				   ,LinkedRoomPlanner
				   ,LowPrice
				   ,HighPrice
				   ,CalculatedPrice
			FROM dbo.vw_APSDimListingsForRentcom

		COMMIT

		SET @LengthInSeconds = DATEDIFF(ss,@TrackDate,GETDATE())
		EXEC DBAUtility.dbo.pr_Logging_StoredProcs 
					@DatabaseName       = @DatabaseName, -- varchar(128)
					@ProcName           = @ProcedureName, -- varchar(128)
					@StepName           = 'Load Rentcom', -- varchar(128)
					@VariableStates     = '', -- varchar(500)
					@LengthInSeconds    = @LengthInSeconds, -- int
					@Comments           = 'Commit to Rentcom.dimension.listings succeeded' -- varchar(500)
		SET @TrackDate = GETDATE()
	 END TRY
	 BEGIN CATCH
		ROLLBACK	
		
		SET @LengthInSeconds = DATEDIFF(ss,@TrackDate,GETDATE())
		SELECT @Comments = 'Load to Rentcom.dimension.listings failed with message ' + LEFT(ERROR_MESSAGE(),450)

		EXEC DBAUtility.dbo.pr_Logging_StoredProcs 
					@DatabaseName       = @DatabaseName, -- varchar(128)
					@ProcName           = @ProcedureName, -- varchar(128)
					@StepName           = 'Load Rentcom', -- varchar(128)
					@VariableStates     = '', -- varchar(500)
					@LengthInSeconds    = @LengthInSeconds, -- int
					@Comments           = @Comments -- varchar(500)
		SET @TrackDate = GETDATE()
		SET @FailedSteps = @FailedSteps + 2
	 END CATCH

	 BEGIN TRY
	 begin TRAN
		TRUNCATE TABLE RentPath.Dimension.Listings

		INSERT INTO RentPath.Dimension.Listings (
				YMDID
			   ,ListingID
			   ,PropertyIDAG
			   ,StatusIDAG
			   ,PropertyIDRent
			   ,StatusIDRent
			   ,ListingSource
			   ,BillingIDAG
			   ,BillingIDRent
			   ,SFDCCommunityID
			   ,SFPropertyAcctID
			   ,Ext_PropertyID
			   ,ListingType
			   ,PropertyName
			   ,PropertyAddress
			   ,PropertyCity
			   ,PropertyState
			   ,PropertyZipCode
			   ,CBSACode
			   ,CBSAName
			   ,GeoLat
			   ,GeoLong
			   ,PropertyContactPhone
			   ,MarketCD
			   ,MarketName
			   ,MgtCoIDAG
			   ,MgtCoNameAG
			   ,MgtCoIDRent
			   ,MgtCoNameRent
			   ,CompanyIDRent
			   ,IsSEM
			   ,IsSmallProperty
			   ,PropertyTotalUnits
			   ,ShowPricing
			   ,LowPrice
			   ,HighPrice
			   ,WebMobileTargetAG
			   ,WebTollFreeAG
			   ,MobileTollFreeAG
			   ,WebTargetRent
			   ,WebTollFreeRent
			   ,MobileTargetRent
			   ,MobileTollFreeRent
			   ,WebTargetRentals
			   ,WebTollFreeRentals
			   ,CallRecordingOptOut
			   ,Whisper
			   ,LeadEmailAG
			   ,LeadEmailRent
			   ,LeadEmailWithTypeAG
			   ,LeadEmailWithTypeRent
			   ,PhoneLeadRecapEmail
			   ,LeadFaxAG
			   ,LeadFaxRent
			   ,ListingDescriptionLength
			   ,VanityURL
			   ,PropertyURL
			   ,TotalAmenities
			   ,ActiveAmenities
			   ,ActiveCoupon
			   ,WebCouponStartDate
			   ,WebCouponExpirationDate
			   ,WebCouponText
			   ,MobileCouponStartDate
			   ,MobileCouponExpirationDate
			   ,MobileCouponText
			   ,ActiveFloorplans
			   ,ActiveLowResFloorplans
			   ,ActiveHDFloorplans
			   ,ActivePhotos
			   ,ActiveLowResPhotos
			   ,ActiveHDPhotos
			   ,ExternalID
			   ,ListingPricingSource
			   ,ListingDetailsSource
			   ,HasAvailabilityURL
			   ,AvailabilityURL
			   ,Charter
			   ,DIRECTV
			   ,HasCR3
			   ,CR3AvgOverallRatingAG
			   ,CR3AvgOverallRatingRent
			   ,ShowOfficeHours
			   ,PlacementTierAG
			   ,PlacementTierRent
			   ,ContractLoyaltyPoints
			   ,InternetProductPoints
			   ,LegacyLoyaltyPoints
			   ,MobilePoints
			   ,PrintProductPoints
			   ,Ranking
			   ,RPLRank
			   ,BadgeCollege
			   ,BadgeCorporate
			   ,BadgeIncomeRestricted
			   ,BadgeLuxury
			   ,BadgeMilitary
			   ,BadgePetFriendly
			   ,BadgeSenior
			   ,BadgeGolf
			   ,BadgeWaterfront
			   ,BadgeFurnished
			   ,BadgeNewConstruction
			   ,BadgeRemodeled
			   ,DefaultBadge
			   ,Upsell3DFloorplan
			   ,UpsellAGSites
			   ,UpsellAGSitesCustomURL
			   ,UpsellCarousel
			   ,UpsellCarouselRentals
			   ,UpsellCommunityVideoURLFulfilled
			   ,UpsellCoupon
			   ,UpsellDiamondCity
			   ,UpsellDiamondMax
			   ,UpsellDiamondMetro
			   ,UpsellDynamicLeadForm
			   ,UpsellEmercial
			   ,UpsellFeaturedCommunityAG
			   ,UpsellFeaturedCommunityRent
			   ,UpsellFeaturedListingRentals
			   ,UpsellHDActiveFloorplansFulfilled
			   ,UpsellHDActivePhotosFulfilled
			   ,UpsellHDPanoTour
			   ,UpsellHDPanoTourFulfilled
			   ,UpsellHDPhoto
			   ,UpsellHDVideo
			   ,UpsellHDVideoFulfilled
			   ,UpsellHighlighted
			   ,UpsellLinked3DFloorplan
			   ,UpsellLinked3DFloorplanFulfilled
			   ,UpsellLinkedFloorplan
			   ,UpsellLinkedFloorplanFulfilled
			   ,UpsellLinkedLowResFloorplan
			   ,UpsellLinkedLowResFloorplanFulfilled
			   ,UpsellLinkedHDFloorplan
			   ,UpsellLinkedHDFloorplanFulfilled
			   ,UpsellLinkedRoomPlanner
			   ,UpsellLinkedRoomPlannerFulfilled
			   ,UpsellListingRent
			   ,UpsellListingRentals
			   ,UpsellMediaCenter
			   ,UpsellMgmtPeelAd
			   ,UpsellMobileDeal
			   ,UpsellMobileDealFulfilled
			   ,UpsellMobileDiamond
			   ,UpsellMobileSpotlight
			   ,UpsellNoVacancyRent
			   ,UpsellPayPerLead
			   ,UpsellPayPerLease
			   ,UpsellPayPerLeaseALM
			   ,UpsellPhotoUpgrade
			   ,UpsellPrecisionTargetedEmailRent
			   ,UpsellPremierListingRentals
			   ,UpsellPremiumUpgrade
			   ,UpsellPropInternetBanner 
			   ,UpsellRewardCardRent
			   ,UpsellSponsoredApartment
			   ,UpsellSpotlightAG
			   ,UpsellSpotlightRent
			   ,UpsellSpotlightRentals
			   ,UpsellStandardListingRentals
			   ,UpsellStandardPlusListingRentals
			   ,UpsellSubscriptionModelRent
			   ,UpsellVideoSpokesmodel
			   ,UpsellVIPPlacementRent
			   ,UpsellVirtualBrochure
			   ,UpsellVirtualTourFulfilled
			   ,UpsellFuture2
			   ,UpsellFuture3
			   ,UpsellFuture4
			   ,UpsellFuture5
			   ,UpsellFuture6
			   ,UpsellFuture7
			   ,UpsellFuture8
			   ,UpsellFuture9
			   ,GeoPoint
			   ,LastUpdateYMDID
		)
		SELECT  YMDID
			   ,ListingID
			   ,PropertyIDAG
			   ,StatusIDAG
			   ,PropertyIDRent
			   ,StatusIDRent
			   ,ListingSource
			   ,BillingIDAG
			   ,BillingIDRent
			   ,ISNULL(SFDCCommunityID,'') AS SFDCCommunityID
			   ,ISNULL(SFPropertyAcctID,'') AS SFPropertyAcctID
			   ,Ext_PropertyID
			   ,ListingType
			   ,PropertyName
			   ,PropertyAddress
			   ,PropertyCity
			   ,PropertyState
			   ,PropertyZipCode
			   ,CBSACode
			   ,CBSAName
			   ,GeoLat
			   ,GeoLong
			   ,PropertyContactPhone
			   ,MarketCD
			   ,MarketName
			   ,MgtCoIDAG
			   ,MgtCoNameAG
			   ,MgtCoIDRent
			   ,MgtCoNameRent
			   ,CompanyIDRent
			   ,IsSEM
			   ,IsSmallProperty
			   ,PropertyTotalUnits
			   ,ShowPricing
			   ,LowPrice
			   ,HighPrice
			   ,WebMobileTargetAG
			   ,WebTollFreeAG
			   ,MobileTollFreeAG
			   ,WebTargetRent
			   ,WebTollFreeRent
			   ,MobileTargetRent
			   ,MobileTollFreeRent
			   ,WebTargetRentals
			   ,WebTollFreeRentals
			   ,CallRecordingOptOut
			   ,Whisper
			   ,LeadEmailAG
			   ,LeadEmailRent
			   ,LeadEmailWithTypeAG
			   ,LeadEmailWithTypeRent
			   ,PhoneLeadRecapEmail
			   ,LeadFaxAG
			   ,LeadFaxRent
			   ,ListingDescriptionLength
			   ,VanityURL
			   ,PropertyURL
			   ,TotalAmenities
			   ,ActiveAmenities
			   ,ActiveCoupon
			   ,WebCouponStartDate
			   ,WebCouponExpirationDate
			   ,WebCouponText
			   ,MobileCouponStartDate
			   ,MobileCouponExpirationDate
			   ,MobileCouponText
			   ,ActiveFloorplans
			   ,ActiveLowResFloorplans
			   ,ActiveHDFloorplans
			   ,ActivePhotos
			   ,ActiveLowResPhotos
			   ,ActiveHDPhotos
			   ,ExternalID
			   ,ListingPricingSource
			   ,ListingDetailsSource
			   ,HasAvailabilityURL
			   ,AvailabilityURL
			   ,Charter
			   ,DIRECTV
			   ,HasCR3
			   ,CR3AvgOverallRatingAG
			   ,CR3AvgOverallRatingRent
			   ,ShowOfficeHours
			   ,PlacementTierAG
			   ,PlacementTierRent
			   ,ContractLoyaltyPoints
			   ,InternetProductPoints
			   ,LegacyLoyaltyPoints
			   ,MobilePoints
			   ,PrintProductPoints
			   ,Ranking
			   ,RPLRank
			   ,BadgeCollege
			   ,BadgeCorporate
			   ,BadgeIncomeRestricted
			   ,BadgeLuxury
			   ,BadgeMilitary
			   ,BadgePetFriendly
			   ,BadgeSenior
			   ,BadgeGolf
			   ,BadgeWaterfront
			   ,BadgeFurnished
			   ,BadgeNewConstruction
			   ,BadgeRemodeled
			   ,DefaultBadge
			   ,Upsell3DFloorplan
			   ,UpsellAGSites
			   ,UpsellAGSitesCustomURL
			   ,UpsellCarousel
			   ,UpsellCarouselRentals
			   ,UpsellCommunityVideoURLFulfilled
			   ,UpsellCoupon
			   ,UpsellDiamondCity
			   ,UpsellDiamondMax
			   ,UpsellDiamondMetro
			   ,UpsellDynamicLeadForm
			   ,UpsellEmercial
			   ,UpsellFeaturedCommunityAG
			   ,UpsellFeaturedCommunityRent
			   ,UpsellFeaturedListingRentals
			   ,UpsellHDActiveFloorplansFulfilled
			   ,UpsellHDActivePhotosFulfilled
			   ,UpsellHDPanoTour
			   ,UpsellHDPanoTourFulfilled
			   ,UpsellHDPhoto
			   ,UpsellHDVideo
			   ,UpsellHDVideoFulfilled
			   ,UpsellHighlighted
			   ,UpsellLinked3DFloorplan
			   ,UpsellLinked3DFloorplanFulfilled
			   ,UpsellLinkedFloorplan
			   ,UpsellLinkedFloorplanFulfilled
			   ,UpsellLinkedLowResFloorplan
			   ,UpsellLinkedLowResFloorplanFulfilled
			   ,UpsellLinkedHDFloorplan
			   ,UpsellLinkedHDFloorplanFulfilled
			   ,UpsellLinkedRoomPlanner
			   ,UpsellLinkedRoomPlannerFulfilled
			   ,UpsellListingRent
			   ,UpsellListingRentals
			   ,UpsellMediaCenter
			   ,UpsellMgmtPeelAd
			   ,UpsellMobileDeal
			   ,UpsellMobileDealFulfilled
			   ,UpsellMobileDiamond
			   ,UpsellMobileSpotlight
			   ,UpsellNoVacancyRent
			   ,UpsellPayPerLead
			   ,UpsellPayPerLease
			   ,UpsellPayPerLeaseALM
			   ,UpsellPhotoUpgrade
			   ,UpsellPrecisionTargetedEmailRent
			   ,UpsellPremierListingRentals
			   ,UpsellPremiumUpgrade
			   ,UpsellPropInternetBanner 
			   ,UpsellRewardCardRent
			   ,UpsellSponsoredApartment
			   ,UpsellSpotlightAG
			   ,UpsellSpotlightRent
			   ,UpsellSpotlightRentals
			   ,UpsellStandardListingRentals
			   ,UpsellStandardPlusListingRentals
			   ,UpsellSubscriptionModelRent
			   ,UpsellVideoSpokesmodel
			   ,UpsellVIPPlacementRent
			   ,UpsellVirtualBrochure
			   ,UpsellVirtualTourFulfilled
			   ,UpsellFuture2
			   ,UpsellFuture3
			   ,UpsellFuture4
			   ,UpsellFuture5
			   ,UpsellFuture6
			   ,UpsellFuture7
			   ,UpsellFuture8
			   ,UpsellFuture9
			   ,GeoPoint
			   ,LastUpdateYMDID
		FROM dbo.vw_APSDimListingsForRentPath

		COMMIT

		SET @LengthInSeconds = DATEDIFF(ss,@TrackDate,GETDATE())
		EXEC DBAUtility.dbo.pr_Logging_StoredProcs 
					@DatabaseName       = @DatabaseName, -- varchar(128)
					@ProcName           = @ProcedureName, -- varchar(128)
					@StepName           = 'Load RentPath', -- varchar(128)
					@VariableStates     = '', -- varchar(500)
					@LengthInSeconds    = @LengthInSeconds, -- int
					@Comments           = 'Commit to RentPath.dimension.listings succeeded' -- varchar(500)
		SET @TrackDate = GETDATE()
	 END TRY
	 BEGIN CATCH
		ROLLBACK	
		
		SET @LengthInSeconds = DATEDIFF(ss,@TrackDate,GETDATE())
		SELECT @Comments = 'Load to RentPath.dimension.listings failed with message ' + LEFT(ERROR_MESSAGE(),450)

		EXEC DBAUtility.dbo.pr_Logging_StoredProcs 
					@DatabaseName       = @DatabaseName, -- varchar(128)
					@ProcName           = @ProcedureName, -- varchar(128)
					@StepName           = 'Load RentPath', -- varchar(128)
					@VariableStates     = '', -- varchar(500)
					@LengthInSeconds    = @LengthInSeconds, -- int
					@Comments           = @Comments -- varchar(500)
		SET @TrackDate = GETDATE()
		SET @FailedSteps = @FailedSteps + 5
	 END CATCH

	 IF @FailedSteps = 0 --everything worked
	 BEGIN
		SET @LengthInSeconds = DATEDIFF(ss,@TrackDate,GETDATE())
		EXEC DBAUtility.dbo.pr_Logging_StoredProcs 
					@DatabaseName       = @DatabaseName, -- varchar(128)
					@ProcName           = @ProcedureName, -- varchar(128)
					@StepName           = 'Load RentPath', -- varchar(128)
					@VariableStates     = '', -- varchar(500)
					@LengthInSeconds    = @LengthInSeconds, -- int
					@Comments           = 'Data load to RentPath.dimension.listings succeeded' -- varchar(500)
	END

	 IF @FailedSteps = 1 --AG failed
	 BEGIN
		RAISERROR('Repopulation of AG dim listings failed, rolled back.',16,1) WITH LOG;
	END

	 IF @FailedSteps = 2 --Rentcom failed
	 BEGIN
		RAISERROR('Repopulation of Rentcom dim listings failed, rolled back.',16,1) WITH LOG;
	END

	 IF @FailedSteps = 3  --AG and Rentcom failed
	 BEGIN
		RAISERROR('Repopulation of AG and Rentcom dim listings failed, rolled back.',16,1) WITH LOG;
	END

	 IF @FailedSteps = 5  --RentPath failed
	 BEGIN
		RAISERROR('Repopulation of RentPath dim listings failed, rolled back.',16,1) WITH LOG;
	END

	 IF @FailedSteps = 7  --Rentcom and RentPath failed
	 BEGIN
		RAISERROR('Repopulation of Rentcom and RentPath dim listings failed, rolled back.',16,1) WITH LOG;
	END

	 IF @FailedSteps = 8  --All three failed
	 BEGIN
		RAISERROR('Repopulation of dim listings failed, all databases rolled back.',16,1) WITH LOG;
	END









GO
/****** Object:  StoredProcedure [Dimension].[pr_LocatorListingsReplaceFromAPS]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Dimension].[pr_LocatorListingsReplaceFromAPS]
/*************************************************************************************************
*
* Name:	Dimension.pr_LocatorListingsReplaceFromAPS
*
* Desc:	This replaces the data in ApartmentGuide and RentPath database from APS
*
* Test:	EXEC Dimension.pr_LocatorListingsReplaceFromAPS
*
* Note:
*
* Hist:	01	08/08/2016		Sarah Mims			Initial Version. Ticket # 23637.
* Hist:	02	03/02/2017		Sarah Mims			SFDC Case # 01340195 Put this into production so 
*												changed the name from ApartmentGuide.Dimension.LocatorListings
*												to ApartmentGuide.Dimension.TPLListings
**************************************************************************************************/
AS

BEGIN

SET NOCOUNT ON

		----------------------------------
		--Declare and Set Logging Variables
		----------------------------------
		 DECLARE @TrackDate DATETIME 
				,@LocalYMDID INT 
				,@LengthInSeconds INT 
				,@DatabaseName VARCHAR(128) 
				,@ProcedureName VARCHAR(128) 

		SET	@TrackDate = GETDATE();
		SET	@LocalYMDID  =  CAST(CONVERT(VARCHAR(8),GETDATE(),112) AS INT)
		SET @LengthInSeconds = 0;
		SET @DatabaseName = DB_NAME()  ;      
		SET @ProcedureName = 'Dimension.pr_LocatorListingsReplaceFromAPS';	

		----------------------------------
		--Start Logging
		----------------------------------	
		SET @LengthInSeconds = DATEDIFF(ss, @TrackDate,GETDATE())            
		EXEC DBAUtility.dbo.pr_Logging_StoredProcs @DatabaseName = @DatabaseName,
			@ProcName = @ProcedureName,
			@StepName = '1 - Start Procedure: Dimension.pr_LocatorListingsReplaceFromAPS',
			@VariableStates = @LocalYMDID,
			@LengthInSeconds = @LengthInSeconds,
			@Comments = 'Start Procedure';
		SET @TrackDate = GETDATE();


	-----------------------
	--Truncate RentPath Locator Listings
	-----------------------
	TRUNCATE TABLE RentPath.Dimension.LocatorListings

		----------------------------------
		--Log the truncation
		----------------------------------	
		SET @LengthInSeconds = DATEDIFF(ss, @TrackDate,GETDATE())            
		EXEC DBAUtility.dbo.pr_Logging_StoredProcs @DatabaseName = @DatabaseName,
			@ProcName = @ProcedureName,
			@StepName = '2 - Truncate RentPath.Dimension.LocatorListings',
			@VariableStates = @LocalYMDID,
			@LengthInSeconds = @LengthInSeconds,
			@Comments = '';
		SET @TrackDate = GETDATE();

	-----------------------
	--Insert the data
	-----------------------
	INSERT INTO RentPath.Dimension.LocatorListings
	SELECT  YMDID
		   ,ListingID
		   ,StatusID
		   ,StatusIDAG
		   ,StatusIDRent
		   ,StatusIDRentalHouses
		   ,StatusIDRentals
		   ,DataSource
		   ,PropertyName
		   ,Address
		   ,City
		   ,State
		   ,Zip
		   ,Latitude
		   ,Longitude
		   ,MarketCD
		   ,MarketName
		   ,Phone
		   ,Email
		   ,LowPrice
		   ,HighPrice
		   ,MinBedrooms
		   ,MaxBedrooms
		   ,ShowOfficeHours
		   ,ActivePhotos
		   ,ActiveFloorPlans
		   ,ActiveAmenities
	FROM RentPath.Staging.LocatorListings

		----------------------------------
		--Log the insert
		----------------------------------	
		SET @LengthInSeconds = DATEDIFF(ss, @TrackDate,GETDATE())            
		EXEC DBAUtility.dbo.pr_Logging_StoredProcs @DatabaseName = @DatabaseName,
			@ProcName = @ProcedureName,
			@StepName = '3 - Insert the daily data into RentPath.Dimension.LocatorListings',
			@VariableStates = @LocalYMDID,
			@LengthInSeconds = @LengthInSeconds,
			@Comments = '';
		SET @TrackDate = GETDATE();


	-----------------------
	--Truncate AG Locator Listings
	-----------------------
	TRUNCATE TABLE ApartmentGuide.Dimension.TPLListings

		----------------------------------
		--Log the truncation
		----------------------------------	
		SET @LengthInSeconds = DATEDIFF(ss, @TrackDate,GETDATE())            
		EXEC DBAUtility.dbo.pr_Logging_StoredProcs @DatabaseName = @DatabaseName,
			@ProcName = @ProcedureName,
			@StepName = '4 - Truncate ApartmentGuide.Dimension.TPLListings',
			@VariableStates = @LocalYMDID,
			@LengthInSeconds = @LengthInSeconds,
			@Comments = '';
		SET @TrackDate = GETDATE();

	-----------------------
	--Insert the data
	-----------------------
	INSERT INTO ApartmentGuide.Dimension.TPLListings
			(LISTINGID
			,PROPERTYNAME
			,ADDRESS
			,CITY
			,STATE
			,ZIP
			,PHONE
			,PRICELOW
			,PRICEHIGH
			,MINBEDROOMS
			,MAXBEDROOMS
			,EMAIL
			,StatusID
			,DataSource
			,MarketCd
			,OnAPTGStatus
			,OnRentalsStatus
			,OnRentalHousesStatus)
	SELECT  ListingID
		   ,PropertyName
		   ,Address
		   ,City
		   ,State
		   ,Zip
		   ,Phone
		   ,LowPrice				AS PriceLow
		   ,HighPrice				AS PriceHigh
		   ,MinBedrooms
		   ,MaxBedrooms
		   ,Email
		   ,StatusID
		   ,DataSource
		   ,MarketCD
		   ,StatusIDAG				AS OnAPTGStatus
		   ,StatusIDRentals			AS OnRentalsStatus
		   ,StatusIDRentalHouses	AS OnRentalHousesStatus
	FROM RentPath.Staging.LocatorListings AS ll

		----------------------------------
		--Log the insert
		----------------------------------	
		SET @LengthInSeconds = DATEDIFF(ss, @TrackDate,GETDATE())            
		EXEC DBAUtility.dbo.pr_Logging_StoredProcs @DatabaseName = @DatabaseName,
			@ProcName = @ProcedureName,
			@StepName = '5 - Insert the daily data into ApartmentGuide.Dimension.TPLListings',
			@VariableStates = @LocalYMDID,
			@LengthInSeconds = @LengthInSeconds,
			@Comments = 'End Procedure';
		SET @TrackDate = GETDATE();

SET NOCOUNT OFF
END




GO
/****** Object:  StoredProcedure [Dimension].[pr_SmallPropertyListings]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/***************************************************************************************************************
*
* Name:	[Dimension].[pr_SmallPropertyListings]
*
* Desc:	This SPROC pulls down the data for Rentals/Lovely Syndication to AG and Rent as well as Rent Small Property listings.
*
* Test:	EXEC Dimension.pr_SmallPropertyListings
*		SELECT * FROM RentPath.Dimension.SmallPropertyListings
*
* Notes: Most of this code was taken from Staging.pr_SmallPropertyListings
*
* Hist:	01	05/18/2015	Sarah Mims		Initial Version - Ticket 19300
* Hist:	02	06/24/2015	Clinton Woody	Check For Duplicate Listings Ticket 19867
* Hist: 03	06/29/2015	Sarah Mims		Changed from TRUNCATE to MERGE and as a result removed all error tracking
*										because this procedure is getting too complicated for what it is
* Hist: 04	08/19/2015	Sarah Mims		Ticket # 20448 - added in RentalHouses Listings syndicated to Rent
* Hist: 05  02/25/2016  Richard Chen    Fix job error on charindex  Ticket 22234
* Hist: 06  05/19/2016  Richard Chen    Fix job error Ticket 23096.  Datatype missmatched 
                                        on listingpricelow and listingPricehigh FROM Properties.endeca_lovely_rent_view 
										in the union statement.  Solution is to explictly using to_number to fix datatype
***************************************************************************************************************/
CREATE PROCEDURE [Dimension].[pr_SmallPropertyListings]
AS 
BEGIN

    SET NOCOUNT ON;
                
------------------------------------------------------
--Declare and set variables
------------------------------------------------------
DECLARE @sqlcmd2 NVARCHAR(4000)

  ------------------------------------------------------------
   	-- Drop all temporary working tables
   ------------------------------------------------------------

    BEGIN TRY
        DROP TABLE #tmpworkingtable
    END TRY
    BEGIN CATCH
    END CATCH

    BEGIN TRY
        DROP TABLE #tmprentalproperties
    END TRY
    BEGIN CATCH
    END CATCH

    BEGIN TRY
        DROP TABLE #tmplovelyproperties
    END TRY
    BEGIN CATCH
    END CATCH
  
    BEGIN TRY
        DROP TABLE #RentSmallProp
    END TRY
    BEGIN CATCH
    END CATCH    

    BEGIN TRY
        DROP TABLE #FinalWorkingTable
    END TRY
    BEGIN CATCH
    END CATCH    

	------------------------------------------------------------
	--Create temp tables
	------------------------------------------------------------
    CREATE TABLE #tmplovelyproperties (
        ListingID VARCHAR(30)
       ,ListingIDAlt INT
       ,PropertyIDAG INT
       ,PropertyIDRent INT
       ,PropertyName VARCHAR(300)
       ,PropertyAddress VARCHAR(300)
       ,PropertyCity VARCHAR(300)
       ,PropertyState VARCHAR(20)
       ,ZipCode VARCHAR(10)
       ,CBSACode VARCHAR(50)
       ,CBSAName VARCHAR(200)
       ,GeoLat DECIMAL(10,4)
       ,GeoLong DECIMAL(10,4)
       ,ShowPricing TINYINT
       ,PriceLow INT
       ,PriceHigh INT
       ,MgtCoID VARCHAR(15)
       ,MgtCoName VARCHAR(80)
       ,WebTollFree VARCHAR(20)
       ,MobileTollFree VARCHAR(20)
       ,ActiveAmenities INT
       ,ActiveFloorPlans INT
       ,ActivePhotos INT
       ,PropertyTotalUnits INT
       ,LastUpdateYMDID INT
       ,OnAG INT
       ,OnRent INT
	   ,TPLSource VARCHAR(25))

    CREATE TABLE #tmprentalproperties (
        ListingID VARCHAR(30)
       ,ListingIDAlt INT
       ,PropertyIDAG INT
       ,PropertyIDRent INT
       ,PropertyName VARCHAR(300)
       ,PropertyAddress VARCHAR(300)
       ,PropertyCity VARCHAR(300)
       ,PropertyState VARCHAR(20)
       ,ZipCode VARCHAR(10)
       ,CBSACode VARCHAR(50)
       ,CBSAName VARCHAR(200)
       ,GeoLat DECIMAL(10,4)
       ,GeoLong DECIMAL(10,4)
       ,ShowPricing TINYINT
       ,PriceLow INT
       ,PriceHigh INT
       ,MgtCoID VARCHAR(15)
       ,MgtCoName VARCHAR(80)
       ,WebTollFree VARCHAR(20)
       ,MobileTollFree VARCHAR(20)
       ,ActiveAmenities INT
       ,ActiveFloorPlans INT
       ,ActivePhotos INT
       ,PropertyTotalUnits INT
       ,LastUpdateYMDID INT
       ,OnAG INT
       ,OnRent INT
	   ,TPLSource VARCHAR(25))
       

    CREATE TABLE #RentSmallProp (
        ListingID VARCHAR(30)
       ,ListingIDAlt INT
       ,PropertyIDAG INT
       ,PropertyIDRent INT
       ,PropertyName VARCHAR(300)
       ,PropertyAddress VARCHAR(300)
       ,PropertyCity VARCHAR(300)
       ,PropertyState VARCHAR(20)
       ,ZipCode VARCHAR(10)
       ,CBSACode VARCHAR(50)
       ,CBSAName VARCHAR(200)
       ,GeoLat DECIMAL(10,4)
       ,GeoLong DECIMAL(10,4)
       ,ShowPricing TINYINT
       ,PriceLow INT
       ,PriceHigh INT
       ,MgtCoID VARCHAR(15)
       ,MgtCoName VARCHAR(80)
       ,WebTollFree VARCHAR(20)
       ,MobileTollFree VARCHAR(20)
       ,ActiveAmenities INT
       ,ActiveFloorPlans INT
       ,ActivePhotos INT
       ,PropertyTotalUnits INT
       ,LastUpdateYMDID INT
       ,OnAG INT
       ,OnRent INT
	   ,TPLSource VARCHAR(25))


    CREATE TABLE #tmpworkingtable (
        YMDID INT NOT NULL
       ,DisplayListingID VARCHAR(30) NOT NULL
       ,ListingID INT NOT NULL
       ,PropertyIDAG INT NOT NULL
       ,PropertyIDRent INT NOT NULL
       ,StatusIDAG INT NOT NULL
       ,StatusIDRent INT NOT NULL
       ,IsRentals TINYINT NULL
       ,IsRentalHouses TINYINT NULL     
       ,IsLovely TINYINT NULL
       ,IsRentSmallProp TINYINT NULL
       ,PropertyName VARCHAR(100) NOT NULL
       ,PropertyAddress VARCHAR(100) NOT NULL
       ,PropertyCity VARCHAR(40) NOT NULL
                                 DEFAULT ''
       ,PropertyState VARCHAR(2) NOT NULL
                                 DEFAULT ''
       ,ZipCode VARCHAR(10) NOT NULL
                            DEFAULT ''
       ,CBSACode VARCHAR(50) NOT NULL
                             DEFAULT '00000'
       ,CBSAName VARCHAR(200) NOT NULL
                              DEFAULT 'none'
       ,GeoLong DECIMAL(10,4) NULL
       ,GeoLat DECIMAL(10,4) NULL
       ,MgtCoID VARCHAR(15) NOT NULL
                            DEFAULT ''
       ,MgtCoName VARCHAR(80) NOT NULL
                              DEFAULT ''
       ,ShowPricing TINYINT NULL
                            DEFAULT 0
       ,LowPrice INT NOT NULL
                     DEFAULT 0
       ,HighPrice INT NOT NULL
                      DEFAULT 0
       ,WebTollFree VARCHAR(20) NOT NULL
                                DEFAULT ''
       ,MobileTollFree VARCHAR(20) NOT NULL
                                   DEFAULT ''
       ,ActiveAmenities INT NOT NULL
                            DEFAULT 0
       ,ActiveFloorPlans INT NOT NULL
                             DEFAULT 0
       ,ActivePhotos INT NOT NULL
                         DEFAULT 0
       ,PropertyTotalUnits INT NOT NULL
                               DEFAULT 0
       ,LastUpdateYMDID INT NOT NULL
	   --,TPLSource VARCHAR(25) NOT NULL
	   )

	-------------------------------------------------------------------------
	--Build the temp table for Rentals Syndicated Listings
	-------------------------------------------------------------------------	
    SET @sqlcmd2 = '	
	SELECT LISTINGID										AS ListingID
		,CONVERT(int,DBAUtility.dbo.fnDigitOnly(LISTINGID))	AS ListingIDAlt		
		,CONVERT(int,DBAUtility.dbo.fnDigitOnly(PROPERTYID))AS PropertyIDAG
		,CONVERT(int,DBAUtility.dbo.fnDigitOnly(PROPERTYID))AS PropertyIDRent
		,PROPERTYNAME		AS PropertyName
		,ADDRESSLINE1		AS PropertyAddress
		,PROPERTYCITY		AS PropertyCity
		,PROPERTYSTATE		AS PropertyState
		,PROPERTYZIP		AS ZipCode
		,cbsacode			AS CBSACode
		,CBSAName			AS CBSAName
		,LATITUDE			AS GeoLat
		,LONGITUDE			AS GeoLong
		,CASE WHEN CHARINDEX(cast(ListingPriceLow as varchar(20)),''9999'') 
		+ CHARINDEX(cast(ListingPriceHigh  as varchar(20)),''9999'') < 2 
			THEN 1 ELSE 0 
			END				AS ShowPricing
		,LISTINGPRICELOW	AS ListingPriceLow
		,LISTINGPRICEHIGH	AS ListingPriceHigh
		,ISNULL(MgtCoID,'''') AS MgtCoID
		,MgtCoName
		,WebTollFree
		,MobileTollFree
		,CAST(ActiveAptAmenities AS INT) + CAST(ActiveMustHaveAmenities AS INT) + CAST(ActiveCommunityAmenities AS INT) AS ActiveAmenities
		,CAST(ActiveFloorPlans AS INT) AS ActiveFloorPlans
		,CAST(ActivePhotos AS INT) AS ActivePhotos
		,0					AS PropertyTotalUnits
		,CAST(CONVERT(VARCHAR(8),CAST(LastUpdate AS DATETIME),112) AS INT)		AS LastUpdateYMDID
		,OnAG
		,OnRent	 
		,TPLSource
		FROM OPENQUERY(ORACLEAPTG,''SELECT  X.ListingID
		,X.PropertyID
		,X.PropertyName
		,X.AddressLine1
		,X.PropertyCity
		,X.PropertyState
		,X.PropertyZip
		,X.Latitude
		,X.Longitude
		,X.CBSACode
		,X.CBSAName
		,X.MgtCoID
		,X.MgtCoName
		,X.TPLSource
		,X.WebTollFree
		,X.MobileTollFree
		,X.LastUpdate
		,MAX(X.ListingPriceLow)		AS ListingPriceLow
		,MAX(X.ListingPriceHigh)	AS ListingPriceHigh
		,MAX(X.OnAG)				AS OnAG
		,MAX(X.OnRent)				AS OnRent
		,NVL(MAX(REGEXP_COUNT(REPLACE(X.APARTMENTAMENITIES,''''^'''',''''-''''),''''-'''',1) + 1),0) AS ActiveAptAmenities
		,NVL(MAX(REGEXP_COUNT(REPLACE(X.MUSTHAVEAMENITIES,''''^'''',''''-''''),''''-'''',1) + 1),0)	 AS ActiveMustHaveAmenities
		,NVL(MAX(REGEXP_COUNT(REPLACE(X.COMMUNITYAMENITIES,''''^'''',''''-''''),''''-'''',1) + 1),0) AS ActiveCommunityAmenities
		,MAX(X.NumFloorPlans) AS ActiveFloorPlans
		,MAX(X.NumPhotos) AS ActivePhotos
FROM    (
			SELECT a.LISTINGID
				,a.PROPERTYID
				,a.LISTINGPRICELOW
				,a.LISTINGPRICEHIGH
				,a.PROPERTYNAME
				,a.ADDRESSLINE1
				,a.PROPERTYCITY
				,a.PROPERTYSTATE
				,a.PROPERTYZIP
				,a.LATITUDE
				,a.LONGITUDE
				,c.cbsacode
				,c.CBSAName
				,a.MgtCoID
				,a.MgtCoName
				,a.WebTollFree
				,a.MDotTollFree AS MobileTollFree
				,a.TPLSource
				,NVL(CASE WHEN b.Source = ''''RENTALS''''
								AND b.OnAG = 1 THEN 1
					END,0) AS OnAG
				,1 AS OnRent
				,a.APARTMENTAMENITIES
				,a.MUSTHAVEAMENITIES
				,a.COMMUNITYAMENITIES
				,a.NumFloorPlans
				,a.NumPhotos
				,a.LastUpdate
			FROM   Properties.endeca_rentals_rent_view a
			LEFT OUTER JOIN Common.zip_cbsa c
				ON a.propertyzip = c.zipcode
			LEFT OUTER JOIN properties.smallprop_cbsa b
				ON b.cbsacode = c.cbsacode
		) x
GROUP BY X.ListingID
		,X.PropertyID
		,X.PropertyName
		,X.AddressLine1
		,X.PropertyCity
		,X.PropertyState
		,X.PropertyZip
		,X.Latitude
		,X.Longitude
		,X.CBSACode
		,X.CBSAName
		,X.MgtCoID
		,X.MgtCoName
		,X.TPLSource
		,X.WebTollFree
		,X.MobileTollFree
		,X.LastUpdate
		''
) AS o'
									

	PRINT @sqlcmd2
	
    INSERT  INTO #tmprentalproperties
            EXEC sp_executesql 
                @sqlcmd2;
		
	----------------------------------------------------------
	--Build the temp table for Lovely Syndicated Listings
	----------------------------------------------------------	
    SET @sqlcmd2 = 'SELECT LISTINGID AS ListingID
							,CONVERT(int,DBAUtility.dbo.fnDigitOnly(LISTINGID))		AS ListingIDAlt
							,CONVERT(int,DBAUtility.dbo.fnDigitOnly(PROPERTYID))	AS PropertyIDAG
							,CONVERT(int,DBAUtility.dbo.fnDigitOnly(PROPERTYID))	AS PropertyIDRent
							,PROPERTYNAME											AS PropertyName
							,ADDRESSLINE1											AS PropertyAddress
							,PROPERTYCITY											AS PropertyCity
							,PROPERTYSTATE											AS PropertyState
							,PROPERTYZIP											AS ZipCode
							,CBSACode
							,CBSAName
							,LATITUDE												AS GeoLat
							,LONGITUDE												AS GeoLong
							,CASE WHEN CHARINDEX(cast(ListingPriceLow as varchar(20)),''9999'') + CHARINDEX(cast(ListingPriceHigh as varchar(20)),''9999'') < 2 THEN 1 ELSE 0 END	AS ShowPricing
							,LISTINGPRICELOW										AS PriceLow
							,LISTINGPRICEHIGH										AS PriceHigh
							,'''' AS MgtCoID
							,'''' AS MgtCoName
							,WebTollFree
							,MobileTollFree
							,CAST(ActiveAptAmenities AS INT) + CAST(ActiveCommunityAmenities AS INT) AS ActiveAmenities
							,ActiveFloorPlans
							,ActivePhotos
							,0	AS PropertyTotalUnits
							,CAST(CONVERT(VARCHAR(8),CAST(LastUpdate AS DATETIME),112) AS INT)	AS LastUpdateYMDID
							,OnAG
							,OnRent
							,TPLSource
FROM OPENQUERY(ORACLEAPTG,''SELECT lv.ListingID
,lv.PropertyID
,lv.Endeca_ID
,lv.PropertyName
,lv.AddressLine1 
,lv.PropertyCity
,lv.PropertyState
,lv.PropertyZip
,lv.Latitude
,lv.Longitude
,lv.CBSACode
,lv.CBSAName	
,lv.LastUpdate
,lv.WebTollFree
,lv.MdotTollFree AS MobileTollFree	
,lv.TPLSource					
,MAX(lv.OnAG)																AS OnAG
,MAX(lv.OnRent)																AS OnRent
,MAX(lv.ListingPriceLow)													AS ListingPriceLow
,MAX(lv.ListingPriceHigh)													AS ListingPriceHigh
,NVL(MAX(REGEXP_COUNT(REPLACE(lv.APARTMENTAMENITIES,''''^'''',''''-''''),''''-'''',1) + 1),0)	AS ActiveAptAmenities
,NVL(MAX(REGEXP_COUNT(REPLACE(lv.COMMUNITYAMENITIES,''''^'''',''''-''''),''''-'''',1) + 1),0)	AS ActiveCommunityAmenities
,MAX(lv.NumFloorPlans)														AS ActiveFloorPlans
,MAX(lv.NumPhotos)															AS ActivePhotos
FROM
	(
	SELECT  UPPER(LISTINGID)        AS ListingID
			,UPPER(PROPERTYID)       AS PropertyID
			,UPPER(ENDECA_ID)        AS Endeca_ID
			,PROPERTYNAME
			,ADDRESSLINE1
			,PROPERTYCITY
			,PROPERTYSTATE
			,PROPERTYZIP
			,LATITUDE
			,LONGITUDE
			,LISTINGPRICELOW
			,LISTINGPRICEHIGH
			,APARTMENTAMENITIES
			,COMMUNITYAMENITIES
			,NumFloorPlans
			,NumPhotos
			,LastUpdate
			,WebTollFree
			,MdotTollFree
			,c.CBSACode
			,c.CBSAName
			,1 AS OnAG
			,0 AS OnRent
			,TPLSource
	FROM Properties.endeca_lovely_view a
	LEFT OUTER JOIN Common.zip_cbsa c
			ON a.propertyzip = c.zipcode

	UNION ALL

	SELECT  UPPER(LISTINGID)        AS ListingID
			,UPPER(PROPERTYID)       AS PropertyID
			,UPPER(ENDECA_ID)        AS Endeca_ID
			,PROPERTYNAME
			,ADDRESSLINE1
			,PROPERTYCITY
			,PROPERTYSTATE
			,PROPERTYZIP
			,LATITUDE
			,LONGITUDE
			,to_number(LISTINGPRICELOW)
			,to_number(LISTINGPRICEHIGH)
			,APARTMENTAMENITIES
			,COMMUNITYAMENITIES
			,NumFloorPlans
			,NumPhotos
			,LastUpdate
			,WebTollFree
			,MDotTollFree
			,c.CBSACode
			,c.CBSAName
			,0 AS OnAG
			,1 AS OnRent
			,TPLSource
	FROM Properties.endeca_lovely_rent_view a
	LEFT OUTER JOIN Common.zip_cbsa c
			ON a.propertyzip = c.zipcode
	) lv
GROUP BY lv.ListingID
,lv.PropertyID
,lv.Endeca_ID
,lv.PropertyName
,lv.AddressLine1
,lv.PropertyCity
,lv.PropertyState
,lv.PropertyZip
,lv.Latitude
,lv.Longitude
,lv.CBSACode
,lv.CBSAName
,lv.LastUpdate
,lv.WebTollFree
,lv.MDotTollFree
,lv.TPLSource''
			)'

	PRINT @sqlcmd2
	
    INSERT  INTO #tmplovelyproperties
            EXEC sp_executesql 
                @sqlcmd2;	

	----------------------------------------------------------
	--Build the temp table for Rent Small Property Listings
	----------------------------------------------------------
    SET @sqlcmd2 = 'SELECT LISTINGID AS ListingID
							,ListingID				AS ListingIDAlt
							,PropertyIDAG
							,PropertyIDRent
							,PROPERTYNAME			AS PropertyName
							,PropertyAddress		
							,PROPERTYCITY			AS PropertyCity
							,PROPERTYSTATE			AS PropertyState
							,ZipCode
							,CBSACode
							,CBSAName
							,GeoLat
							,GeoLong
							,CASE WHEN CHARINDEX(CAST(ListingPriceLow  as varchar(20)),''9999'') + CHARINDEX(cast(ListingPriceHigh as varchar(20)),''9999'') < 2 THEN 1 ELSE 0 END	AS ShowPricing
							,ListingPriceLow		AS PriceLow
							,ListingPriceHigh		AS PriceHigh
							,MgtCoID
							,MgtCoName
							,WebTollFree
							,MobileTollFree
							,ActiveAmenities
							,ActiveFloorPlans
							,ActivePhotos
							,PropertyTotalUnits
							,CAST(CONVERT(VARCHAR(8),CAST(LastUpdate AS DATETIME),112) AS INT)	AS LastUpdateYMDID
							,0 AS OnAG
							,1 AS OnRent
							,TPLSource
FROM OPENQUERY(ORACLEAPTG,''		
SELECT  X.*
,NVL(X.ActiveAptAmenities,0) + NVL(X.ActiveMustHaveAmenities,0) + NVL(X.ActiveCommunityAmenities,0)	AS ActiveAmenities
FROM    
(
SELECT pt.ListingID
	,pt.PropertyID			AS PropertyIDAG
	,pt.PropertyID			AS PropertyIDRent
	,PropertyName
	,AddressLine1			AS PropertyAddress
	,PropertyCity
	,PropertyState
	,PropertyZip			AS ZipCode
	,c.CBSACode
	,c.CBSAName
	,TPLSource
	,Latitude				AS GeoLat
	,Longitude				AS GeoLong
	,MgtCoID				AS MgtCoID
	,MgtCoName				AS MgtCoName
	,LASTUPDATE
	,WebTollFree			AS WebTollFree
	,MDOTTOLLFREE			AS MobileTollFree
	,MAX(TotalUnits)		AS PropertyTotalUnits
	,MAX(ListingPriceLow)	AS ListingPriceLow
	,MAX(ListingPriceHigh)	AS ListingPriceHigh
	,MAX(REGEXP_COUNT(REPLACE(APARTMENTAMENITIES,''''^'''',''''-''''),''''-'''',1) + 1)	AS ActiveAptAmenities
	,MAX(REGEXP_COUNT(REPLACE(MUSTHAVEAMENITIES,''''^'''',''''-''''),''''-'''',1) + 1)	AS ActiveMustHaveAmenities
	,MAX(REGEXP_COUNT(REPLACE(COMMUNITYAMENITIES,''''^'''',''''-''''),''''-'''',1) + 1)	AS ActiveCommunityAmenities
	,MAX(NUMFLOORPLANS)														AS ActiveFloorPlans
	,MAX(NUMPHOTOS)															AS ActivePhotos
FROM   Properties.Rent_PLT_FINAL pt
INNER JOIN Common.Zip_CBSA c
	ON pt.PropertyZip = c.ZipCode
GROUP BY pt.ListingID
	,pt.PropertyID			
	,pt.PropertyID			
	,PropertyName
	,AddressLine1			
	,PropertyCity
	,PropertyState
	,PropertyZip			
	,c.CBSACode
	,c.CBSAName
	,TPLSource
	,Latitude				
	,Longitude				
	,MgtCoID				
	,MgtCoName				
	,LASTUPDATE
	,WebTollFree			
	,MDOTTOLLFREE			
) X''
) AS o'
		PRINT @sqlcmd2
    INSERT  INTO #RentSmallProp
            EXEC sp_executesql 
                @sqlcmd2;	

	-----------------------------------------------------------------------------------
	--Insert the records from Rentals, Lovely and Rentcom to the working table
	-----------------------------------------------------------------------------------
	
    INSERT  INTO #tmpworkingtable
            SELECT  CAST(CONVERT(VARCHAR(8),GETDATE(),112) AS INT) AS YMDID
                   ,rp.ListingID AS DisplayListingID
                   ,rp.ListingIDAlt AS ListingID
                   ,rp.PropertyIDAG
                   ,rp.PropertyIDRent
                   ,ISNULL(rp.OnAG,0) AS StatusIDAG
                   ,ISNULL(rp.OnRent,0) AS StatusIDRent
                   ,CASE WHEN rp.TPLSource = 'Rentals' THEN 1 ELSE 0 END		AS IsRentals
				   ,CASE WHEN rp.TPLSource = 'RENTALHOUSES' THEN 1 ELSE 0 END	AS IsRentalHouses
                   ,0 AS IsLovely
                   ,0 AS IsRentSmallProp
                   ,ISNULL(rp.PropertyName,'No Property Name') AS PropertyName
                   ,ISNULL(rp.PropertyAddress,'') AS PropertyAddress
                   ,ISNULL(rp.PropertyCity,'') AS PropertyCity
                   ,ISNULL(rp.PropertyState,'') AS PropertyState
                   ,ISNULL(rp.ZipCode,'') AS ZipCode
                   ,ISNULL(rp.CBSACode,'00000') AS CBSACode
                   ,ISNULL(rp.CBSAName,'none') AS CBSAName
                   ,rp.GeoLong AS GeoLong
                   ,rp.GeoLat AS GeoLat
                   ,ISNULL(rp.MgtCoID,'') AS MgtCoID
                   ,ISNULL(rp.MgtCoName,'') AS MgtCoName
                   ,rp.ShowPricing
                   ,(CASE WHEN (rp.PriceLow IS NOT NULL)
                               AND (rp.PriceLow > 50) THEN rp.PriceLow
                          ELSE 0
                     END) AS LowPrice
                   ,(CASE WHEN (rp.PriceHigh IS NOT NULL)
                               AND (rp.PriceHigh > 50) THEN rp.PriceHigh
                          ELSE 0
                     END) AS HighPrice
                   ,ISNULL(rp.WebTollFree,'') AS WebTollFree
                   ,ISNULL(rp.MobileTollFree,'') AS MobileTollFree
                   ,ISNULL(rp.ActiveAmenities,0) AS ActiveAmenities
                   ,ISNULL(rp.ActiveFloorPlans,0) AS ActiveFloorPlans
                   ,ISNULL(rp.ActivePhotos,0) AS ActivePhotos
                   ,ISNULL(rp.PropertyTotalUnits,0) AS PropertyTotalUnits
                   ,rp.LastUpdateYMDID
            FROM    #tmprentalproperties AS rp
            LEFT OUTER JOIN Rentals.Dimension.Listings dl WITH (NOLOCK)
                    ON dl.ListingNumber = rp.ListingIDAlt
                    AND dl.SiteID = CASE WHEN rp.TPLSource = 'Rentals' THEN 1 
										 WHEN rp.TPLSource = 'RentalHouses' THEN 2
											END
            WHERE   1 = (CASE WHEN dl.ListingStatus = 'Active' THEN 1
                              ELSE 0
                         END)			--only want active properties
	----------------------------------------------------------------------------------------
	--insert the Lovely records into the working table
	----------------------------------------------------------------------------------------	
    INSERT  INTO #tmpworkingtable
            SELECT  CAST(CONVERT(VARCHAR(8),GETDATE(),112) AS INT) AS YMDID
                   ,lp.ListingID AS DisplayListingID
                   ,lp.ListingIDAlt AS ListingID
                   ,lp.PropertyIDAG
                   ,lp.PropertyIDRent
                   ,ISNULL(lp.OnAG,0) AS StatusIDAG
                   ,ISNULL(lp.OnRent,0) AS StatusIDRent
                   ,0 AS IsRentals
				   ,0 AS IsRentalHouses
                   ,1 AS IsLovely
                   ,0 AS IsRentSmallProp
                   ,ISNULL(lp.PropertyName,'No Property Name') AS PropertyName
                   ,ISNULL(lp.PropertyAddress,'') AS PropertyAddress
                   ,ISNULL(lp.PropertyCity,'') AS PropertyCity
                   ,ISNULL(lp.PropertyState,'') AS PropertyState
                   ,ISNULL(lp.ZipCode,'') AS ZipCode
                   ,ISNULL(lp.CBSACode,'00000') AS CBSACode
                   ,ISNULL(lp.CBSAName,'one') AS CBSAName
                   ,lp.GeoLong AS GeoLong
                   ,lp.GeoLat AS GeoLat
                   ,ISNULL(lp.MgtCoID,'') AS MgtCoID
                   ,ISNULL(lp.MgtCoName,'') AS MgtCoName
                   ,lp.ShowPricing
                   ,lp.PriceLow AS LowPrice
                   ,lp.PriceHigh AS HighPrice
                   ,ISNULL(lp.WebTollFree,'') AS WebTollFree
                   ,ISNULL(lp.MobileTollFree,'') AS MobileTollFree
                   ,ISNULL(lp.ActiveAmenities,0) AS ActiveAmenities
                   ,ISNULL(lp.ActiveFloorPlans,0) AS ActiveFloorPlans
                   ,ISNULL(lp.ActivePhotos,0) AS ActivePhotos
                   ,ISNULL(lp.PropertyTotalUnits,0) AS PropertyTotalUnits
                   ,lp.LastUpdateYMDID
            FROM    #tmplovelyproperties lp;
	----------------------------------------------------------------------------------------
	--Insert the Rentcom Small Property records into the working table
	----------------------------------------------------------------------------------------
	   INSERT  INTO #tmpworkingtable
            SELECT  CAST(CONVERT(VARCHAR(8),GETDATE(),112) AS INT) AS YMDID
                   ,lp.ListingID AS DisplayListingID
                   ,lp.ListingID
                   ,lp.PropertyIDAG
                   ,lp.PropertyIDRent
                   ,ISNULL(lp.OnAG,0) AS StatusIDAG
                   ,ISNULL(lp.OnRent,0) AS StatusIDRent
                   ,0 AS IsRentals
				   ,0 AS IsRentalHouses
                   ,0 AS IsLovely
                   ,1 AS IsRentSmallProp
                   ,ISNULL(lp.PropertyName,'No Property Name') AS PropertyName
                   ,ISNULL(lp.PropertyAddress,'') AS PropertyAddress
                   ,ISNULL(lp.PropertyCity,'') AS PropertyCity
                   ,ISNULL(lp.PropertyState,'') AS PropertyState
                   ,ISNULL(lp.ZipCode,'') AS ZipCode
                   ,ISNULL(lp.CBSACode,'00000') AS CBCACode
                   ,ISNULL(lp.CBSAName,'none') AS CBSAName
                   ,lp.GeoLong AS GeoLong
                   ,lp.GeoLat AS GeoLat
                   ,ISNULL(lp.MgtCoID,'') AS MgtCoID
                   ,ISNULL(lp.MgtCoName,'') AS MgtCoName
                   ,lp.ShowPricing
                   ,lp.PriceLow AS LowPrice
                   ,lp.PriceHigh AS HighPrice
                   ,ISNULL(lp.WebTollFree,'') AS WebTollFree
                   ,ISNULL(lp.MobileTollFree,'') AS MobileTollFree
                   ,ISNULL(lp.ActiveAmenities,0) AS ActiveAmenities
                   ,ISNULL(lp.ActiveFloorPlans,0) AS ActiveFloorPlans
                   ,ISNULL(lp.ActivePhotos,0) AS ActivePhotos
                   ,ISNULL(lp.PropertyTotalUnits,0) AS PropertyTotalUnits
                   ,lp.LastUpdateYMDID
            FROM    #RentSmallProp lp;

	--------------------------------------------------------------------
	--Grab one record per DisplayListingID
	--------------------------------------------------------------------   
SELECT YMDID
,DisplayListingID
,ListingID
,PropertyIDAG
,PropertyIDRent
,StatusIDAG
,StatusIDRent
,IsRentals
,IsRentalHouses
,IsLovely
,IsRentSmallProp
,PropertyName
,PropertyAddress
,PropertyCity
,PropertyState
,ZipCode
,CBSACode
,CBSAName
,GeoLong
,GeoLat
,MgtCoID
,MgtCoName
,ShowPricing
,LowPrice
,HighPrice
,WebTollFree
,MobileTollFree
,ActiveAmenities
,ActiveFloorPlans
,ActivePhotos
,PropertyTotalUnits
,LastUpdateYMDID	
,CAST(NULL AS GEOGRAPHY)															AS GeogPoint
,ROW_NUMBER()OVER(PARTITION BY X.DisplayListingID ORDER BY LastUpdateYMDID DESC)	AS RowNumber
INTO #FinalWorkingTable
FROM 	
		(		
		SELECT  YMDID
			   ,DisplayListingID
			   ,ListingID
			   ,PropertyIDAG
			   ,PropertyIDRent
			   ,MAX(StatusIDAG)			AS StatusIDAG
			   ,MAX(StatusIDRent)		AS StatusIDRent
			   ,MAX(IsRentals)			AS IsRentals
			   ,MAX(IsRentalHouses)		AS IsRentalHouses
			   ,MAX(IsLovely)			AS IsLovely
			   ,MAX(IsRentSmallProp)	AS IsRentSmallProp
			   ,PropertyName
			   ,PropertyAddress
			   ,PropertyCity
			   ,PropertyState
			   ,ZipCode
			   ,CBSACode
			   ,CBSAName
			   ,GeoLong
			   ,GeoLat
			   ,MgtCoID
			   ,MgtCoName
			   ,ShowPricing
			   ,LowPrice
			   ,HighPrice
			   ,WebTollFree
			   ,MobileTollFree
			   ,ActiveAmenities
			   ,ActiveFloorPlans
			   ,ActivePhotos
			   ,PropertyTotalUnits
			   ,LastUpdateYMDID	   		   
		FROM    #tmpworkingtable
		GROUP BY YMDID
			   ,DisplayListingID
			   ,ListingID
			   ,PropertyIDAG
			   ,PropertyIDRent
			   ,PropertyName
			   ,PropertyAddress
			   ,PropertyCity
			   ,PropertyState
			   ,ZipCode
			   ,CBSACode
			   ,CBSAName
			   ,GeoLong
			   ,GeoLat
			   ,MgtCoID
			   ,MgtCoName
			   ,ShowPricing
			   ,LowPrice
			   ,HighPrice
			   ,WebTollFree
			   ,MobileTollFree
			   ,ActiveAmenities
			   ,ActiveFloorPlans
			   ,ActivePhotos
			   ,PropertyTotalUnits
			   ,LastUpdateYMDID
		) AS X


	--------------------------------------------------------------------
	--Update GeogPoint
	--------------------------------------------------------------------  
	
	BEGIN TRY
        UPDATE  #FinalWorkingTable
        SET     GeogPoint = (CASE WHEN ((GeoLong IS NOT NULL)
                                        AND (GeoLat IS NOT NULL)) THEN GEOGRAPHY::Point(GeoLat,GeoLong,4326)
                                  ELSE NULL
                             END);

    END TRY
    BEGIN CATCH
    END CATCH     
	----------------------------------------------------------------------------------------------
	--Now MERGE in new records and update existing records
	----------------------------------------------------------------------------------------------
	MERGE INTO Rentpath.Dimension.SmallPropertyListings AS tgt

	USING
		(
		SELECT YMDID
		,DisplayListingID
		,ListingID
		,PropertyIDAG
		,PropertyIDRent
		,StatusIDAG
		,StatusIDRent
		,IsRentals
		,IsRentalHouses
		,IsLovely
		,IsRentSmallProp
		,PropertyName
		,PropertyAddress
		,PropertyCity
		,PropertyState
		,ZipCode
		,CBSACode
		,CBSAName
		,GeoLong
		,GeoLat
		,MgtCoID
		,MgtCoName
		,ShowPricing
		,LowPrice
		,HighPrice
		,WebTollFree
		,MobileTollFree
		,ActiveAmenities
		,ActiveFloorPlans
		,ActivePhotos
		,PropertyTotalUnits
		,LastUpdateYMDID
		,GeogPoint
		,GETDATE() AS DateModified
		FROM #FinalWorkingTable AS fwt
		WHERE RowNumber = 1
		) AS src
	ON tgt.DisplayListingID = src.DisplayListingID
	AND tgt.ListingID = src.ListingID

WHEN MATCHED AND (tgt.YMDID <> src.YMDID
					OR tgt.PropertyIDAG <> src.PropertyIDAG
					OR tgt.PropertyIDRent <> src.PropertyIDRent
					OR tgt.StatusIDAG <> src.StatusIDAG
					OR tgt.StatusIDRent <> src.StatusIDRent
					OR tgt.IsRentals <> src.IsRentals
					OR tgt.IsRentalHouses <> src.IsRentalHouses
					OR tgt.IsLovely <> src.IsLovely
					OR tgt.IsRentSmallProp <> src.IsRentSmallProp
					OR tgt.PropertyName <> src.PropertyName
					OR tgt.PropertyCity <> src.PropertyCity
					OR tgt.PropertyState <> src.PropertyState
					OR tgt.ZipCode <> src.ZipCode
					OR tgt.CBSACode <> src.CBSACode
					OR tgt.CBSAName <> src.CBSAName
					OR tgt.GeoLat <> src.GeoLat
					OR tgt.GeoLong <> src.GeoLong
					--OR tgt.GeogPoint <> src.GeogPoint
					OR tgt.MgtCoID <> src.MgtCoID
					OR tgt.MgtCoName <> src.MgtCoName
					OR tgt.ShowPricing <> src.ShowPricing
					OR tgt.LowPrice <> src.LowPrice
					OR tgt.HighPrice <> src.HighPrice
					OR tgt.WebTollFree <> src.WebTollFree
					OR tgt.MobileTollFree <> src.MobileTollFree
					OR tgt.ActiveAmenities <> src.ActiveAmenities
					OR tgt.ActiveFloorPlans <> src.ActiveFloorPlans
					OR tgt.ActivePhotos <> src.ActivePhotos
					OR tgt.PropertyTotalUnits <> src.PropertyTotalUnits
					OR tgt.LastUpdateYMDID <> src.LastUpdateYMDID
					)
THEN UPDATE
		SET	tgt.YMDID = src.YMDID
			,tgt.PropertyIDAG = src.PropertyIDAG
			,tgt.PropertyIDRent = src.PropertyIDRent
			,tgt.StatusIDAG = src.StatusIDAG
			,tgt.StatusIDRent = src.StatusIDRent
			,tgt.IsRentals = src.IsRentals
			,tgt.IsRentalHouses = src.IsRentalHouses
			,tgt.IsLovely = src.IsLovely
			,tgt.IsRentSmallProp = src.IsRentSmallProp
			,tgt.PropertyName = src.PropertyName
			,tgt.PropertyCity = src.PropertyCity
			,tgt.PropertyState = src.PropertyState
			,tgt.ZipCode = src.ZipCode
			,tgt.CBSACode = src.CBSACode
			,tgt.CBSAName = src.CBSAName
			,tgt.GeoLat = src.GeoLat
			,tgt.GeoLong = src.GeoLong
			,tgt.GeogPoint = src.GeogPoint
			,tgt.MgtCoID = src.MgtCoID
			,tgt.MgtCoName = src.MgtCoName
			,tgt.ShowPricing = src.ShowPricing
			,tgt.LowPrice = src.LowPrice
			,tgt.HighPrice = src.HighPrice
			,tgt.WebTollFree = src.WebTollFree
			,tgt.MobileTollFree = src.MobileTollFree
			,tgt.ActiveAmenities = src.ActiveAmenities
			,tgt.ActiveFloorPlans = src.ActiveFloorPlans
			,tgt.ActivePhotos = src.ActivePhotos
			,tgt.PropertyTotalUnits = src.PropertyTotalUnits
			,tgt.LastUpdateYMDID = src.LastUpdateYMDID
			,tgt.DateModified = src.DateModified
					
--When there is not a record in the Target table but there is one in the Source table
	WHEN NOT MATCHED BY TARGET 
		THEN INSERT  (YMDID
					,DisplayListingID
					,ListingID
					,PropertyIDAG
					,PropertyIDRent
					,StatusIDAG
					,StatusIDRent
					,IsRentals
					,IsRentalHouses
					,IsLovely
					,IsRentSmallProp
					,PropertyName
					,PropertyAddress
					,PropertyCity
					,PropertyState
					,ZipCode
					,CBSACode
					,CBSAName
					,GeoLat
					,GeoLong
					,GeogPoint
					,MgtCoID
					,MgtCoName
					,ShowPricing
					,LowPrice
					,HighPrice
					,WebTollFree
					,MobileTollFree
					,ActiveAmenities
					,ActiveFloorPlans
					,ActivePhotos
					,PropertyTotalUnits
					,LastUpdateYMDID
					,DateModified)		
			VALUES
					(src.YMDID
					,src.DisplayListingID
					,src.ListingID
					,src.PropertyIDAG
					,src.PropertyIDRent
					,src.StatusIDAG
					,src.StatusIDRent
					,src.IsRentals
					,src.IsRentalHouses
					,src.IsLovely
					,src.IsRentSmallProp
					,src.PropertyName
					,src.PropertyAddress
					,src.PropertyCity
					,src.PropertyState
					,src.ZipCode
					,src.CBSACode
					,src.CBSAName
					,src.GeoLat
					,src.GeoLong
					,src.GeogPoint
					,src.MgtCoID
					,src.MgtCoName
					,src.ShowPricing
					,src.LowPrice
					,src.HighPrice
					,src.WebTollFree
					,src.MobileTollFree
					,src.ActiveAmenities
					,src.ActiveFloorPlans
					,src.ActivePhotos
					,src.PropertyTotalUnits
					,src.LastUpdateYMDID
					,src.DateModified)	

--When there is a record in the Target table but no longer one in the Source table
	WHEN NOT MATCHED BY SOURCE 
		THEN UPDATE
		  SET		tgt.StatusIDAG = 0
				   ,tgt.StatusIDRent = 0
				   ,tgt.YMDID = CAST(CONVERT(VARCHAR(8),GETDATE(),112) AS INT)
				   ,tgt.DateModified = GETDATE();                    
                          	
    SET NOCOUNT OFF;


END;







GO
/****** Object:  StoredProcedure [Dimension].[pr_Website_Domains_Visited]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/*--######################################################################################
*
* Name:	[Dimension].[pr_Website_Domains_Visited]
*
* Desc:	This updates the Dimension table with any new records, or any previous records that have changed
*   These tables hold the domains visited information by universal ZID that is currently held in Zutron.  They are pulled
*	from MySQL tables.
*
* Test:	EXEC Dimension.pr_Website_Domains_Visited
*
* Hist:	01	02/09/2016	Bob Langley		Initial Version 
--#######################################################################################*/
CREATE PROCEDURE [Dimension].[pr_Website_Domains_Visited]
AS 
BEGIN

    SET NOCOUNT ON;

	DECLARE
		@ErrorMessage					NVARCHAR(4000),
		@ErrorNumber					INT,
		@ErrorSeverity					INT,
		@ErrorState						INT,
		@ErrorLine						INT,
		@ErrorProcedure					NVARCHAR(200)

	DECLARE @codesection	varchar(2000)

	/* ===================================================================================================================== */
	SET @codesection = 'Start Processing'
	if EXISTS (SELECT NULL FROM RentPath.Staging.Website_Domains_Visited)
		BEGIN
			BEGIN TRY
				BEGIN TRANSACTION
					PRINT 'In transaction'

					SET @codesection = 'Insert to final table'
					--SELECT id, universal_zid_id AS uzid, address AS domainvisited, created_at, updated_at FROM access_logs

					--update the ones that changed (assume change, since not new)
					UPDATE a
					SET a.uzid = b.uzid
					, a.domainvisited = b.domainvisited
					, a.created_at = b.created_at
					, a.updated_at = b.updated_at
					FROM RentPath.Dimension.Website_Domains_Visited a
					JOIN RentPath.Staging.Website_Domains_Visited b WITH (NOLOCK)
						ON b.id = a.id


					--INSERT new ones
					INSERT INTO RentPath.Dimension.Website_Domains_Visited
					SELECT a.id, a.uzid, a.domainvisited, a.created_at, a.updated_at
					FROM RentPath.Staging.Website_Domains_Visited a WITH (NOLOCK)
					WHERE a.id NOT IN (SELECT id FROM RentPath.Dimension.Website_Domains_Visited WITH (NOLOCK))
					ORDER BY a.id

				COMMIT TRANSACTION

				SET @codesection = 'Committed transaction of writing to final table'

			END TRY
			BEGIN CATCH
				SELECT 
					@ErrorMessage		= ERROR_MESSAGE(),
					@ErrorNumber		= ERROR_NUMBER(),
					@ErrorSeverity		= ERROR_SEVERITY(),
					@ErrorState			= ERROR_STATE(),
					@ErrorLine			= ERROR_LINE(),
					@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');
		
				SET @ErrorMessage = 'Attempting to load Zutron Website Domain Visited table. Error in code section - ' + @codesection + '   Error - ' + @ErrorMessage


				if @@trancount > 0
					ROLLBACK TRANSACTION


				raiserror(@ErrorMessage,16,1) with log;

				RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	
			END CATCH
		END
	/* ===================================================================================================================== */


	SET @codesection = 'Finished Processing'



	SET NOCOUNT OFF;
END;




GO
/****** Object:  StoredProcedure [Dimension].[pr_Website_Login_Accounts]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/*--######################################################################################
*
* Name:	[Dimension].[pr_Website_Login_Accounts]
*
* Desc:	This updates the Dimension table with any new records, or any previous records that have changed
*   These tables hold the website login information that is currently held in Zutron.  They are pulled
*	from MySQL tables.
*
* Test:	EXEC Dimension.pr_Website_Login_Accounts
*
* Hist:	01	12/03/2015	Bob Langley		Initial Version 
--#######################################################################################*/
CREATE PROCEDURE [Dimension].[pr_Website_Login_Accounts]
AS 
BEGIN

    SET NOCOUNT ON;

	DECLARE
		@ErrorMessage					NVARCHAR(4000),
		@ErrorNumber					INT,
		@ErrorSeverity					INT,
		@ErrorState						INT,
		@ErrorLine						INT,
		@ErrorProcedure					NVARCHAR(200)

	DECLARE @codesection	varchar(2000)

	/* ===================================================================================================================== */
	SET @codesection = 'Start Processing'
	if EXISTS (SELECT NULL FROM RentPath.Staging.Website_Login_Accounts)
		BEGIN
			BEGIN TRY
				BEGIN TRANSACTION
					PRINT 'In transaction'

					SET @codesection = 'Insert to final table'


					--update the ones that changed
					UPDATE a
					SET a.email = b.email
					, a.first_name = b.first_name
					, a.last_name = b.last_name
					, a.uuid = b.uuid
					, a.created_at = b.created_at
					, a.updated_at = b.updated_at
					,a.realm = b.realm
					, a.source = b.source
					FROM RentPath.Dimension.Website_Login_Accounts a
					JOIN RentPath.Staging.Website_Login_Accounts b WITH (NOLOCK)
						ON b.id = a.id


					--INSERT new ones
					INSERT INTO RentPath.Dimension.Website_Login_Accounts
					SELECT a.id, a.email, a.first_name, a.last_name, a.uuid, a.created_at, a.updated_at, a.realm, a.[source]
					FROM RentPath.Staging.Website_Login_Accounts a WITH (NOLOCK)
					WHERE a.id NOT IN (SELECT id FROM RentPath.Dimension.Website_Login_Accounts WITH (NOLOCK))


				COMMIT TRANSACTION

				SET @codesection = 'Committed transaction of writing to final table'

			END TRY
			BEGIN CATCH
				SELECT 
					@ErrorMessage		= ERROR_MESSAGE(),
					@ErrorNumber		= ERROR_NUMBER(),
					@ErrorSeverity		= ERROR_SEVERITY(),
					@ErrorState			= ERROR_STATE(),
					@ErrorLine			= ERROR_LINE(),
					@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');
		
				SET @ErrorMessage = 'Attempting to load Zutron Website Login Accounts table. Error in code seciton - ' + @codesection + '   Error - ' + @ErrorMessage


				if @@trancount > 0
					ROLLBACK TRANSACTION


				raiserror(@ErrorMessage,16,1) with log;

				RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	
			END CATCH
		END
	/* ===================================================================================================================== */


	SET @codesection = 'Finished Processing'



	SET NOCOUNT OFF;
END;




GO
/****** Object:  StoredProcedure [Fact].[pr_ProcessLovelySyndicationEmailsFromOracle]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


 CREATE PROCEDURE [Fact].[pr_ProcessLovelySyndicationEmailsFromOracle]
(@YMD DATE = NULL)
/*************************************************************************************************
*
* Name:	er
*
* Desc:	This pulls over the Lovely syndication email leads from CENTROID
*
* Test:	EXEC Fact.pr_ProcessLovelySyndicationEmailsFromOracle
*
* Note:  
*
* Hist:	01	06/30/2015		Sarah Mims			Initial Version. Ticket #19924.
* Hist: 02  08/12/2015		Shetal Gandhi		Ticket 20296 - Added Device, PageType and Context to table
* Hist: 03	07/15/2016		Don Wert			Ticket 23599 - expand Zutron_user_id/personalization_id to 255 characters
**************************************************************************************************/
AS

SET NOCOUNT ON
-------------------------------------------------------------------------------------------------
--Declare variables
-------------------------------------------------------------------------------------------------
DECLARE @SQL VARCHAR(8000)
--,@YMD DATE
-------------------------------------------------------------------------------------------------
--Default to 12 days ago
-------------------------------------------------------------------------------------------------
IF @YMD IS NULL 
    BEGIN
        SET @YMD = CAST(GETDATE()-12 AS DATE)
    END

BEGIN TRY
	DROP TABLE #LovelyEmailLoader
END TRY

BEGIN CATCH
END CATCH

-------------------------------------------------------------------------------------------------
--Grab data for the last 12 days using dynamic SQL because we are using OPENROWSET.
-------------------------------------------------------------------------------------------------
SET @SQL = 
'SELECT OPI.LISTING_ID											AS DISPLAYLISTINGID
	, CONVERT(int,DBAUtility.dbo.fnDigitOnly(LISTING_ID))		AS LISTINGID
	, CAST(CONVERT(VARCHAR(10),CAST(OPI.WHEN_ENTERED AS DATE),112) AS INT) AS YMDID
	, OPI.WHEN_ENTERED											AS WHENENTERED
	, OPI.ID													AS LEADID
	, OPI.LEAD_TYPE_ID											AS LEADTYPEID
	, OPI.COPYSTATUS											AS STATUS
	, ISNULL(OPI.EMAIL,'''')									AS EMAIL
	, ISNULL(OPI.FIRST_NAME,'''')								AS FIRSTNAME
	, ISNULL(OPI.LAST_NAME,'''')								AS LASTNAME
	, OPI.ADDRESS												AS ADDRESS1
	, OPI.CITY													AS CITY
	, OPI.STATE													AS STATE
	, OPI.ZIP													AS ZIP
	, OPI.PHONE													AS DAYPHONE
	, OPI.MOVE_DATE												AS MOVEMONTH
	, OPI.BEDS													AS BEDROOMS
	, OPI.BATHS													AS BATHROOMS
	, OPI.COMMENTS												AS COMMENTS
	, OPI.WEBSITE												AS SOURCE
	, OPI.ZUTRON_USER_ID										AS PERSONALIZATIONID
	, OPI.CAMPAIGN_ID											AS CAMPAIGNID
	, OPI.EF_ID													AS EF_ID
	, OPI.EV_TRANS_ID											AS EV_TRANS_ID
	, OPI.SESSION_ID											AS SESSIONID
	, OPI.REASON_FOR_MOVE										AS REASONFORMOVE
	, OPI.PRICE_RANGE											AS PRICERANGE
	, DEVICE AS DEVICE
	, PAGETYPE 
	, CONTEXT
	FROM OPENQUERY([ORACLECENTROID],''
	SELECT
	ID AS ID
	, OPT_IN_BROCHURE AS OPT_IN_BROCHURE
	, OPT_IN_NEWSLETTER AS OPT_IN_NEWSLETTER
	, LEAD_TYPE_ID AS LEAD_TYPE_ID
	, UPPER(LISTING_ID) AS LISTING_ID
	, SESSION_ID AS SESSION_ID
	, ENDECA_ID AS ENDECA_ID
	, ENTITY_ID AS ENTITY_ID
	, ENTITY_TYPE_ID AS ENTITY_TYPE_ID
	, WEBSITE AS WEBSITE
	, ADDRESS AS ADDRESS
	, CITY AS CITY
	, TRIM(PHONE) AS PHONE
	, TRIM(EMAIL) AS EMAIL
	, TRIM(FIRST_NAME) AS FIRST_NAME
	, TRIM(LAST_NAME) AS LAST_NAME
	, MOVE_DATE AS MOVE_DATE
	, STATE AS STATE
	, STATUS AS STATUS
	, ZIP AS ZIP
	, TRIM(MESSAGE) AS COMMENTS
	, MARKET_CODE AS MARKET_CODE
	, DATASOURCE AS DATASOURCE
	, CREATED_AT AS CREATED_AT
	, UPDATED_AT AS UPDATED_AT
	, TO_CHAR(FROM_TZ(TO_TIMESTAMP(SUBSTR(CREATED_AT, 1, 19),''''YYYY-MM-DD HH24:MI:SS''''), ''''UTC'''') AT TIME ZONE ''''US/Eastern'''', ''''YYYY-MM-DD HH24:MI:SS'''') AS WHEN_ENTERED
	, ZUTRON_USER_ID AS ZUTRON_USER_ID
	, CAMPAIGN_ID AS CAMPAIGN_ID
	, EF_ID AS EF_ID
	, EV_TRANS_ID AS EV_TRANS_ID
	, PROPERTY_TYPE AS PROPERTY_TYPE
	, VACANT_STATUS AS VACANT_STATUS
	, IP_ADDRESS AS IP_ADDRESS
	, BEDS AS BEDS
	, BATHS AS BATHS
	, SEARCH_STATE AS SEARCH_STATE
	, SEARCH_CITY AS SEARCH_CITY
	, SEARCH_ZIP AS SEARCH_ZIP
	, PRICE_RANGE AS PRICE_RANGE
	, REASON_FOR_MOVE AS REASON_FOR_MOVE
	, MQ_ROUTING AS MQ_ROUTING
	, COPYSTATUS AS COPYSTATUS
	, LEADORIGIN AS LEADORIGIN
	, PREFERREDCONTACTMETHOD AS PREFERREDCONTACTMETHOD
	, DEVICE AS DEVICE
	, PAGETYPE 
	, CONTEXT
	FROM COMMON.MQ_ALLLEADS
	WHERE UPPER(LISTING_ID) LIKE ''''LV%''''
	AND UPDATED_AT >= TRUNC(TO_DATE(''''' + CONVERT(VARCHAR(200),@YMD,101) + ''''',''''MM/DD/YYYY''''))
	AND COPYSTATUS = 1
	'') OPI'
	
-------------------------------------------------------------------------------------------------
--Create a temp table to hold the data we just pulled from Oracle.
-------------------------------------------------------------------------------------------------
CREATE TABLE #LovelyEmailLoader
(
	[DisplayListingID][VARCHAR](30) NOT NULL,
	[ListingID] [INT] NOT NULL,
	[YMDID] [INT] NOT NULL,
	[WhenEntered] [datetime] NOT NULL,
	[LeadID][INT] NOT NULL,
	[LeadTypeID] [INT] NOT NULL,
	[Status] [INT] NULL,
	[Email] [varchar](255) NOT NULL,
	[FirstName] [varchar](100) NOT NULL,
	[LastName] [varchar](100) NOT NULL,
	[Address1] [varchar](80) NULL,
	[City] [varchar](40) NULL,
	[State] [varchar](20) NULL,
	[Zip] [varchar](20) NULL,
	[DayPhone] [varchar](30) NULL,
	[MoveMonth] [varchar](15) NULL,
	[Bedrooms] [varchar](50) NULL,
	[Bathrooms] [varchar](3) NULL,
	[Comments] [varchar](2500) NULL,
	[Source] [varchar](25) NULL,
	[PersonalizationID] [varchar](255) NULL,
	[CampaignID] [varchar](20) NULL,
	[EF_ID] [varchar](255) NULL,
	[EV_TRANS_ID] [varchar](255) NULL,
	[SessionID] [varchar](255) NULL,
	[reasonformove] [varchar](255) NULL,
	[pricerange] [varchar](255)NULL,
	[Device] [varchar](255)NULL,
	[PageType]   [varchar](255)NULL,
	[Context] [varchar](255)NULL
)

INSERT INTO #LovelyEmailLoader
EXEC (@SQL)
  
-------------------------------------------------------------------------------------------------
--Update/Insert Email records from the past 12 days.
-------------------------------------------------------------------------------------------------  
MERGE INTO RentPath.Fact.EmailsLovelySyndication AS tgt

USING   
(
SELECT  DisplayListingID
       ,ListingID
       ,YMDID
       ,WhenEntered
       ,LeadID
       ,LeadTypeID
       ,Status
       ,Email
       ,FirstName
       ,LastName
       ,Address1
       ,City
       ,State
       ,Zip
       ,DayPhone
       ,MoveMonth
       ,Bedrooms
       ,Bathrooms
       ,Comments
       ,Source
       ,PersonalizationID
       ,CampaignID
       ,EF_ID
       ,EV_TRANS_ID
       ,SessionID
       ,reasonformove
       ,pricerange
	   ,Device
	   ,PageType
	   ,Context
FROM #LovelyEmailLoader 
) AS src
	ON tgt.LeadID = src.LeadID
	AND tgt.YMDID = src.YMDID
	
WHEN MATCHED AND

	(tgt.DisplayListingID <> src.DisplayListingID
       OR tgt.ListingID <> src.ListingID
       OR tgt.Status <> src.Status
       OR tgt.Email <> src.Email
       OR tgt.FirstName <> src.FirstName
       OR tgt.LastName <> src.LastName
       OR tgt.Address1 <> src.Address1
       OR tgt.City <> src.City
       OR tgt.State <> src.State
       OR tgt.Zip <> src.Zip
       OR tgt.DayPhone <> src.DayPhone
       OR tgt.MoveMonth <> src.MoveMonth
       OR tgt.Bedrooms <> src.Bedrooms
       OR tgt.Comments <> src.Comments
       OR tgt.Source <> src.Source
	   OR tgt.Device <> src.Device
	   OR tgt.PageType <> src.PageType
	   OR tgt.Context <> src.Context
	)

THEN UPDATE SET
	tgt.DisplayListingID = src.DisplayListingID
       ,tgt.ListingID = src.ListingID
       ,tgt.Status = src.Status
       ,tgt.Email = src.Email
       ,tgt.FirstName = src.FirstName
       ,tgt.LastName = src.LastName
       ,tgt.Address1 = src.Address1
       ,tgt.City = src.City
       ,tgt.State = src.State
       ,tgt.Zip = src.Zip
       ,tgt.DayPhone = src.DayPhone
       ,tgt.MoveMonth = src.MoveMonth
       ,tgt.Bedrooms = src.Bedrooms
       ,tgt.Comments = src.Comments
       ,tgt.Source = src.Source
	   ,tgt.Device = src.Device
	   ,tgt.PageType = src.PageType
	   ,tgt.Context = src.Context
					 
WHEN NOT MATCHED
THEN INSERT
		(
		DisplayListingID
       ,ListingID
       ,YMDID
       ,WhenEntered
       ,LeadID
       ,LeadTypeID
       ,Status
       ,Email
       ,FirstName
       ,LastName
       ,Address1
       ,City
       ,State
       ,Zip
       ,DayPhone
       ,MoveMonth
       ,Bedrooms
       ,Bathrooms
       ,Comments
       ,Source
       ,PersonalizationID
       ,CampaignID
       ,EF_ID
       ,EV_TRANS_ID
       ,SessionID
       ,reasonformove
       ,pricerange
	   ,Device
	   ,PageType
	   ,Context
		)


VALUES
		(
		src.DisplayListingID
       ,src.ListingID
       ,src.YMDID
       ,src.WhenEntered
       ,src.LeadID
       ,src.LeadTypeID
       ,src.Status
       ,src.Email
       ,src.FirstName
       ,src.LastName
       ,src.Address1
       ,src.City
       ,src.State
       ,src.Zip
       ,src.DayPhone
       ,src.MoveMonth
       ,src.Bedrooms
       ,src.Bathrooms
       ,src.Comments
       ,src.Source
       ,src.PersonalizationID
       ,src.CampaignID
       ,src.EF_ID
       ,src.EV_TRANS_ID
       ,src.SessionID
       ,src.reasonformove
       ,src.pricerange
	   ,src.Device
	   ,src.PageType
	   ,src.Context
		);
  
SET NOCOUNT OFF



GO
/****** Object:  StoredProcedure [Mart].[export_vlistings]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Mart].[export_vlistings] 
 @ymdid int = null
as
/*******************************************************************************************
* Name:	mart.[export_vlistings] 
* ------------------------------------------------------------------------------------------
* Desc:	
* ------------------------------------------------------------------------------------------
* Test:	EXEC mart.[export_vlistings] 
* ------------------------------------------------------------------------------------------
* Notes: Exporting mart listings and additional data for client health dashboard project
* ------------------------------------------------------------------------------------------
* Hist:	01	04/22/2017		Jonathon Williams		Initial Version
********************************************************************************************/

set @ymdid = isnull(@ymdid, convert(varchar(8),dateadd(d,-1,getdate()),112));
print @ymdid

IF OBJECT_ID('tempdb..#martlistings') IS NOT NULL DROP TABLE #martlistings
IF OBJECT_ID('tempdb..#csl') IS NOT NULL DROP TABLE #csl
IF OBJECT_ID('tempdb..#cr3') IS NOT NULL DROP TABLE #cr3

DELETE FROM mart.exportVListings
WHERE YMDID = @ymdid

SELECT *
into #martlistings
FROM RentPath.Mart.Listings
WHERE ymdid = @ymdid
;
--print '0'
create clustered index cix_martlistingsYmdidListingid on #martlistings(ymdid, listingid);
--print '1'
create nonclustered index nix_martlistingsymdid on #martlistings(ymdid) INCLUDE ([ListingID],[StatusIDAG],[StatusIDRent],[ClicksLeadSubmissionAG],[ClicksLeadSubmissionRent],[ClicksMapAG],[ClicksMapRent],[ClicksMgtCoURLAG],[ClicksMgtCoURLRent],[ClicksPhotosAG],[ClicksPhotosRent],[ClicksSRPListingCheckAvailAG],[ClicksSRPListingCheckAvailRent],[ClicksWebURLAG],[ClicksWebURLRent],[ViewsListingPageAGSites],[ViewsListingPageMobileAG],[ViewsListingPageWebAG],[ViewsListingPageWebRent],[SRPListingImprAG],[SRPListingImprRent],[SRPUniqueVisitAG],[SRPUniqueVisitRent],[ClicksPhotos],[ClicksMap],[ClicksWebURL],[ClicksSRPListingCheckAvail],[SRPListingImpr],[SRPUniqueVisit],[ViewsListingPageWeb],[ViewsListingPageMobile],[ConnectedCalls],[ConnectedCallsAG],[ConnectedCallsRent],[DesktopConnectedCalls],[DesktopConnectedCallsAG],[DesktopConnectedCallsRent],[MobileConnectedCalls],[MobileConnectedCallsAG],[MobileConnectedCallsRent],[MissedCalls],[MissedCallsAG],[MissedCallsRent],[DesktopMissedCalls],[DesktopMissedCallsAG],[DesktopMissedCallsRent],[MobileMissedCalls],[MobileMissedCallsAG],[MobileMissedCallsRent],[PhoneLeads],[PhoneLeadsAG],[PhoneLeadsRent],[DesktopPhoneLeads],[DesktopPhoneLeadsAG],[DesktopPhoneLeadsRent],[MobilePhoneLeads],[MobilePhoneLeadsAG],[MobilePhoneLeadsRent],[EmailLeads],[EmailLeadsAG],[EmailLeadsRent],[DesktopEmailLeads],[DesktopEmailLeadsAG],[DesktopEmailLeadsRent],[MobileEmailLeads],[MobileEmailLeadsAG],[MobileEmailLeadsRent],[AllLeads])
;
--print '2'
SELECT YMDID, LISTINGID, Count(Distinct City) Cities, Count(Distinct State) States
			,AVG([AG]) AS AGPage
			,AVG([AG2]) AS AGPosition
			,AVG([AG Mobile]) AS AGMobilePage
			,AVG([AG Mobile2]) AS AGMobilePosition
			,AVG([RENT]) AS RentPage
			,AVG([RENT2]) AS RentPosition
INTO #csl
FROM   (
		SELECT YMDID, csl.City
			,UPPER(cm.STATEABBR) AS [State]
			,csl.ListingID
			,csl.Sources
			,CONCAT(csl.Sources,'2') AS Sources2
			,csl.Page
			,csl.Position
		FROM   RentPath.Fact.CityStateListings AS csl (nolock)
		LEFT OUTER JOIN DBAUtility.dbo.CityMapping AS cm  (nolock)
			ON UPPER(REPLACE(csl.City,'-',' ')) = UPPER(cm.ACTUAL_CITY_NAME)
				AND UPPER(REPLACE(csl.[State],'-',' ')) = UPPER(cm.STATENAME)
		WHERE ymdid = @ymdid
		) AS SourceTable PIVOT ( AVG(Page) FOR Sources IN ([AG],[AG Mobile],[RENT]) ) AS PivotTable1 PIVOT
			( AVG(Position) FOR Sources2 IN ([AG2],[AG Mobile2],[RENT2]) ) AS PivotTable2
GROUP BY YMDID
	,ListingID 
;
--print '3'
CREATE CLUSTERED INDEX CIX_CSL_LISTINGID_YMDID ON #CSL (YMDID, LISTINGID)
;
SELECT p.PropertyName
	,p.SalesforceCommunityID-- Property Account ID
	,SUM(cr.ReviewCount) AS NumReviews
INTO #CR3
FROM CR3.Fact.CR3Reviews AS cr
INNER JOIN CR3.Conformed.Property AS p
	ON cr.PropertyKey = p.PropertyKey
WHERE cr.[LivePublishedDateKey] <= @ymdid
GROUP BY p.PropertyName
	,p.SalesforceCommunityID
;
--print '4'
CREATE CLUSTERED INDEX CIX_CR3_SalesForceCommunityID ON #CR3 (SalesforceCommunityID)
;


WITH p as (SELECT cli.Advertiser__c					
		,p.Product_Bucket__c					
		,p.Name AS PackageName					
		,cli.Monthly_Price_with_All_Discounts__c AS PackageSpend					
		,fli.StartDate__c AS StartDate
		,CAST(CONVERT(VARCHAR(8),DATEFROMPARTS(YEAR(fli.StartDate__c),MONTH(fli.StartDate__c),'01'),112) AS INT) AS StartYMDID					
		,CAST(CONVERT(VARCHAR(8),EOMONTH(fli.EndDate__c),112) AS INT) AS EndYMDID					
	FROM   SalesForce.dbo.Contract_Line_Item__c AS cli
	INNER JOIN SalesForce.dbo.Product2 AS p					
		ON cli.Product__c = p.Id					
	INNER JOIN SalesForce.dbo.Fulfillment_Line_Item__c AS fli					
		ON cli.Id = fli.Contract_Line_Item__c					
	WHERE  cli.Product_Bucket__c = 'Core' 
		--AND convert(datetime,convert(varchar(8),@ymdid)) between dateadd(m,datediff(m,0,fli.StartDate__c),0) and EOMONTH(fli.EndDate__c)
		AND @ymdid between CAST(CONVERT(VARCHAR(8),DATEFROMPARTS(YEAR(fli.StartDate__c),MONTH(fli.StartDate__c),'01'),112) AS INT) AND CAST(CONVERT(VARCHAR(8),EOMONTH(fli.EndDate__c),112) AS INT)
)
insert INTO mart.exportVListings
([LISTINGID]
      ,[YMDID]
      ,[Year]
      ,[Quarter]
      ,[MonthNum]
      ,[MonthName]
      ,[CalendarMonthDesc]
      ,[YearMonth]
      ,[WeekOfYear]
      ,[DayOfWeek]
      ,[WeekStartingDate]
      ,[WeekEndingDate]
      ,[LastMonthStartDate]
      ,[MonthEndDate]
      ,[ActiveonAG]
      ,[ActiveonRent]
      ,[PropertyName]
      ,[PropertyAddress]
      ,[PropertyCity]
      ,[PropertyState]
      ,[PropertyZipCode]
      ,[CBSACode]
      ,[CBSAName]
      ,[GeoLat]
      ,[GeoLong]
      ,[MarketCode]
      ,[MarketName]
      ,[ManagementCompanyID]
      ,[ManagementCompany]
      ,[PackageName]
      ,[PackageSpend]
      ,[SFDCMarket]
      ,[SFDCDistrict]
      ,[SFDCRegion]
      ,[SFDCTerritory]
      ,[ActiveAmenities]
      ,[ActiveCoupon]
      ,[ActiveFloorplans]
      ,[ActiveHDFloorplans]
      ,[ActiveHDPhotos]
      ,[ActiveLowResFloorplans]
      ,[ActiveLowResPhotos]
      ,[ActivePhotos]
      ,[WebCouponStartDate]
      ,[WebCouponExpirationDate]
      ,[WebCouponText]
      ,[MobileCouponStartDate]
      ,[MobileCouponExpirationDate]
      ,[MobileCouponText]
      ,[SRPImpressionsAG]
      ,[SRPImpressionsRent]
      ,[SRPImpressions]
      ,[SRPUniqueVisitsAG]
      ,[SRPUniqueVistsRent]
      ,[SearchResultsUniqueVisits]
      ,[WebPageViewsAG]
      ,[WebPageViewsRent]
      ,[MobilePageViewsAG]
      ,[PageViewsAGSites]
      ,[PageViews]
      ,[ConnectedCalls]
      ,[ConnectedCallsAG]
      ,[ConnectedCallsRent]
      ,[DesktopConnectedCalls]
      ,[DesktopConnectedCallsAG]
      ,[DesktopConnectedCallsRent]
      ,[MobileConnectedCalls]
      ,[MobileConnectedCallsAG]
      ,[MobileConnectedCallsRent]
      ,[MissedCalls]
      ,[MissedCallsAG]
      ,[MissedCallsRent]
      ,[DesktopMissedCalls]
      ,[DesktopMissedCallsAG]
      ,[DesktopMissedCallsRent]
      ,[MobileMissedCalls]
      ,[MobileMissedCallsAG]
      ,[MobileMissedCallsRent]
      ,[PhoneLeads]
      ,[PhoneLeadsAG]
      ,[PhoneLeadsRent]
      ,[DesktopPhoneLeads]
      ,[DesktopPhoneLeadsAG]
      ,[DesktopPhoneLeadsRent]
      ,[MobilePhoneLeads]
      ,[MobilePhoneLeadsAG]
      ,[MobilePhoneLeadsRent]
      ,[EmailLeads]
      ,[EmailLeadsAG]
      ,[EmailLeadsRent]
      ,[DesktopEmailLeads]
      ,[DesktopEmailLeadsAG]
      ,[DesktopEmailLeadsRent]
      ,[MobileEmailLeads]
      ,[MobileEmailLeadsAG]
      ,[MobileEmailLeadsRent]
      ,[AllLeads]
      ,[MapClicksAG]
      ,[MapClicksRent]
      ,[MapClicks]
      ,[MgtCoURLClicksAG]
      ,[MgtCoURLClicksRent]
      ,[PropertyURLClicksAG]
      ,[PropertyURLClicksRent]
      ,[PropertyURLClicks]
      ,[ClicksLeadSubmissionAG]
      ,[ClicksLeadSubmissionRent]
      ,[ClicksSRPListingCheckAvailAG]
      ,[ClicksSRPListingCheckAvailRent]
      ,[ClicksSRPListingCheckAvail]
      ,[ClicksPhotos]
      ,[ClicksPhotosAG]
      ,[ClicksPhotosRent]
      ,[SRPCityCount]
      ,[CRPStateCount]
      ,[AverageAGPage]
      ,[AverageAGPosition]
      ,[AverageAGMobilePage]
      ,[AverageAGMobilePosition]
      ,[AverageRentPage]
      ,[AverageRentPosition]
      ,[NumReviews]
      ,[HasCR3]
      ,[CR3AvgOverallRatingAG]
      ,[CR3AvgOverallRatingRent])
SELECT 
L.LISTINGID LISTINGID
,ml.YMDID			
,dates.Year
,dates.Quarter
,dates.MonthNum
,dates.MonthName
,dates.CalendarMonthDesc
,dates.YearMonth
,dates.WeekOfYear
,dates.DayOfWeek
,dates.WeekStartingDate
,dates.WeekEndingDate
,dates.LastMonthStartDate
,dates.MonthEndDate
,ml.StatusIDAG AS ActiveonAG				
,ml.StatusIDRent AS ActiveonRent				
,l.PropertyName
,cast(l.PropertyAddress as nvarchar(40)) PropertyAddress
,l.PropertyCity
,l.PropertyState
,l.PropertyZipCode
,l.CBSACode
,l.CBSAName
,l.GeoLat
,l.GeoLong
,l.MarketCd MarketCode
,l.MarketName
,l.MgtCoIDAG ManagementCompanyID
,l.MgtCoNameAG  ManagementCompany
,p.PackageName				
,p.PackageSpend		
,u.AG_Sales_Market__c AS SFDCMarket
,u.AG_Sales_District__c AS SFDCDistrict
,u.AG_Sales_Region__c AS SFDCRegion
,u.AG_Sales_Territory__c AS SFDCTerritory
,l.ActiveAmenities
,l.ActiveCoupon
,l.ActiveFloorplans
,l.ActiveHDFloorplans
,l.ActiveHDPhotos
,l.ActiveLowResFloorplans
,l.ActiveLowResPhotos
,l.ActivePhotos
,l.WebCouponStartDate
,l.WebCouponExpirationDate
,QUOTENAME(REPLACE(l.WebCouponText,'"',''), CHAR(34)) WebCouponText 
,l.MobileCouponStartDate
,l.MobileCouponExpirationDate
,QUOTENAME(REPLACE(l.MobileCouponText,'"',''), CHAR(34)) MobileCouponText
,ml.SRPListingImprAG AS SRPImpressionsAG					
,ml.SRPListingImprRent AS SRPImpressionsRent					
,ml.SRPListingImpr AS SRPImpressions					
,ml.SRPUniqueVisitAG AS SRPUniqueVisitsAG					
,ml.SRPUniqueVisitRent AS SRPUniqueVistsRent					
,ml.SRPUniqueVisit AS SearchResultsUniqueVisits					
,ml.ViewsListingPageWebAG AS WebPageViewsAG					
,ml.ViewsListingPageWebRent AS WebPageViewsRent					
,ml.ViewsListingPageMobileAG AS MobilePageViewsAG							
,ml.ViewsListingPageAGSites AS PageViewsAGSites					
,ml.ViewsListingPageWeb + ml.ViewsListingPageMobile AS PageViews					
,ml.ConnectedCalls					
,ml.ConnectedCallsAG					
,ml.ConnectedCallsRent					
,ml.DesktopConnectedCalls					
,ml.DesktopConnectedCallsAG					
,ml.DesktopConnectedCallsRent					
,ml.MobileConnectedCalls					
,ml.MobileConnectedCallsAG					
,ml.MobileConnectedCallsRent					
,ml.MissedCalls					
,ml.MissedCallsAG					
,ml.MissedCallsRent					
,ml.DesktopMissedCalls					
,ml.DesktopMissedCallsAG					
,ml.DesktopMissedCallsRent					
,ml.MobileMissedCalls					
,ml.MobileMissedCallsAG					
,ml.MobileMissedCallsRent					
,ml.PhoneLeads					
,ml.PhoneLeadsAG					
,ml.PhoneLeadsRent					
,ml.DesktopPhoneLeads					
,ml.DesktopPhoneLeadsAG					
,ml.DesktopPhoneLeadsRent					
,ml.MobilePhoneLeads					
,ml.MobilePhoneLeadsAG					
,ml.MobilePhoneLeadsRent					
,ml.EmailLeads					
,ml.EmailLeadsAG					
,ml.EmailLeadsRent					
,ml.DesktopEmailLeads					
,ml.DesktopEmailLeadsAG					
,ml.DesktopEmailLeadsRent					
,ml.MobileEmailLeads					
,ml.MobileEmailLeadsAG					
,ml.MobileEmailLeadsRent					
,ml.AllLeads					
,ml.ClicksMapAG AS MapClicksAG					
,ml.ClicksMapRent AS MapClicksRent					
,ml.ClicksMap AS MapClicks					
,ml.ClicksMgtCoURLAG AS MgtCoURLClicksAG					
,ml.ClicksMgtCoURLRent AS MgtCoURLClicksRent					
,ml.ClicksWebURLAG AS PropertyURLClicksAG					
,ml.ClicksWebURLRent AS PropertyURLClicksRent					
,ml.ClicksWebURL AS PropertyURLClicks	
,ClicksLeadSubmissionAG
,ClicksLeadSubmissionRent
,ClicksSRPListingCheckAvailAG
,ClicksSRPListingCheckAvailRent
,ClicksSRPListingCheckAvail
,ClicksPhotos
,ClicksPhotosAG
,ClicksPhotosRent
,csl.Cities SRPCityCount
,csl.States CRPStateCount
,AGPage AverageAGPage
,AGPosition AverageAGPosition
,AGMobilePage AverageAGMobilePage
,AGMobilePosition AverageAGMobilePosition
,RentPage AverageRentPage
,RentPosition AverageRentPosition
,NumReviews
,l.[HasCR3]
,l.[CR3AvgOverallRatingAG]
,l.[CR3AvgOverallRatingRent]

FROM #martlistings AS ml 
INNER JOIN  RentPath.Dimension.Listings AS l 
	ON l.ListingID = ml.ListingID
INNER JOIN DBAUtility.dimension.dates dates 
	ON ml.ymdid = dates.YMDID
LEFT OUTER JOIN p
	ON l.SFPropertyAcctID = p.Advertiser__c	AND ml.YMDID BETWEEN p.StartYMDID and p.EndYMDID
LEFT JOIN #csl csl
	ON ML.YMDID = csl.ymdid AND CONVERT(VARCHAR(30),ml.listingid) = csl.listingid
LEFT JOIN SalesForce.dbo.Account AS a
	ON A.ID = l.SFPropertyAcctID
LEFT JOIN SalesForce.dbo.User2 AS u
	ON a.OwnerId = u.Id
LEFT JOIN #CR3 CR 
	ON a.id = cr.SalesforceCommunityID
WHERE   (ml.StatusIDAG = 1 OR ml.StatusIDRent = 1)
	and ml.ymdid = @ymdid


GO
/****** Object:  StoredProcedure [Mart].[pr_AGListingsFromAPS]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Mart].[pr_AGListingsFromAPS]
/*************************************************************************************************
*
* Name:	Mart.pr_AGListingsFromAPS
*
* Desc:	This replaces the mart listings data in AG
*
* Test:	EXEC Mart.pr_AGListingsFromAPS
*
* Note: Keeping AG, Rentcom and RenPath as separate procedures so that they aren't dependent on successful completion of each other
* 
* Hist:	01	10/31/2016		Sarah Mims			Initial Version. Ticket # 24020.
* Hist:	02	02/07/2017		Sarah Mims			Case # 01340196 - productionizing this procedure by changing names where necessary
* Hist: 03	02/14/2017		Colleen Rocks		Case # 01340217; replaced futureconnectedcalls3 and futuremissedcalls3 with dripconnected and dripmissed
**************************************************************************************************/
AS

BEGIN

SET NOCOUNT ON

			-----------------------------
			--Declare error handling variables
			-----------------------------
			DECLARE
				@ErrorMessage					NVARCHAR(4000)
				,@ErrorSeverity					INT
				,@ErrorState					INT
				
		----------------------------------
		--Declare and Set Logging Variables
		----------------------------------
		 DECLARE @TrackDate DATETIME 
				,@LocalYMDID INT 
				,@LengthInSeconds INT 
				,@DatabaseName VARCHAR(128) 
				,@ProcedureName VARCHAR(128) 
				,@CommentLine VARCHAR(500)
				,@BeginYMDID INT
				,@EndYMDID INT              


		SET	@TrackDate = GETDATE();
		SET	@LocalYMDID  =  CAST(CONVERT(VARCHAR(8),GETDATE(),112) AS INT)
		SET @LengthInSeconds = 0;
		SET @DatabaseName = DB_NAME()  ;      
		SET @ProcedureName = 'Mart.pr_AGListingsFromAPS';	


		----------------------------------
		--Start Logging
		----------------------------------	
		SET @LengthInSeconds = DATEDIFF(ss, @TrackDate,GETDATE())            
		EXEC DBAUtility.dbo.pr_Logging_StoredProcs @DatabaseName = @DatabaseName,
			@ProcName = @ProcedureName,
			@StepName = '1 - Start Procedure: Mart.pr_AGListingsFromAPS',
			@VariableStates = @LocalYMDID,
			@LengthInSeconds = @LengthInSeconds,
			@Comments = 'Start Procedure';
		SET @TrackDate = GETDATE();



---------------------------------
--Do the actual work now: 
--1) Delete the date range from Mart.Listings
--2) Insert the date range from the APS Staging Table
---------------------------------
BEGIN TRY
		IF EXISTS(SELECT DISTINCT YMDID FROM RentPath.Staging.MartListingsFromAPS)
			BEGIN
				BEGIN TRANSACTION
  
						-------------------------------------------------------
						--Delete the data from Mart Listings for the date range   
						-------------------------------------------------------						           
						DELETE FROM ApartmentGuide.Mart.Listings
					
						WHERE YMDID IN (SELECT DISTINCT YMDID FROM RentPath.Staging.MartListingsFromAPS)  
						
						SET @BeginYMDID = (SELECT MIN(YMDID) FROM RentPath.Staging.MartListingsFromAPS)   
						SET @EndYMDID = (SELECT MAX(YMDID) FROM RentPath.Staging.MartListingsFromAPS)     

								----------------------------------
								--Log the deletion
								----------------------------------	
								SET @LengthInSeconds = DATEDIFF(ss, @TrackDate,GETDATE())      
								SET @CommentLine = 'Data deleted from AG Mart listings:  from '+CAST(@BeginYMDID AS VARCHAR)+' to ' +CAST(@EndYMDID AS VARCHAR)+''
								EXEC DBAUtility.dbo.pr_Logging_StoredProcs @DatabaseName = @DatabaseName,
									@ProcName = @ProcedureName,
									@StepName = '2 - Delete data from AG Mart Listings for the date range',
									@VariableStates = @LocalYMDID,
									@LengthInSeconds = @LengthInSeconds,
									@Comments = @CommentLine;
								SET @TrackDate = GETDATE();


						-------------------------------------------------------
						--Insert the data for the date range into AG Mart Listings
						-------------------------------------------------------	
						INSERT INTO ApartmentGuide.Mart.Listings

						SELECT ISNULL([YMDID] ,0)									AS [YMDID]
						, ISNULL([YearMonth] ,0)									AS [YearMonth]
						, ISNULL([ListingID] ,0)									AS [ListingID]
						, ISNULL([PropertyIDAG] ,0)									AS [PropertyID]
						, [ListingType]  COLLATE SQL_Latin1_General_CP1_CI_AS		AS [ListingType]
						, [ListingTypeShort]  COLLATE SQL_Latin1_General_CP1_CI_AS	AS [ListingTypeShort]
						, [ExternalID]  COLLATE SQL_Latin1_General_CP1_CI_AS		AS [ExternalID]
						, [ExternalPriceCode]  COLLATE SQL_Latin1_General_CP1_CI_AS AS [ExternalPriceCode]
						, ISNULL([StatusIDAG] ,0)									AS [ListingStatusID]
						, ISNULL([TotalPhotos] ,0)									AS [TotalPhotos]
						, ISNULL([ActivePhotos] ,0)									AS [ActivePhotos]
						, ISNULL([TotalFloorPlans] ,0)								AS [TotalFloorPlans]
						, ISNULL([ActiveFloorplans] ,0)								AS [ActiveFloorplans]
						, ISNULL([TotalAmenities] ,0)								AS [TotalAmenities]
						, ISNULL([ActiveAmenities] ,0)								AS [ActiveAmenities]
						, ISNULL([ActiveHDPhotos] ,0)								AS [ActiveHDPhotos]
						, ISNULL([ActiveHDFloorPlans] ,0)							AS [ActiveHDFloorPlans]
						, ISNULL([ShowPricing] ,0)									AS [ShowPricing]
						, ISNULL([ShowOfficeHours] ,0)								AS [ShowOfficeHours]
						, ISNULL([ListingDescriptionLength] ,0)						AS [ListingDescriptionLength]
						, ISNULL([UpsellHighlighted] ,0)							AS [UpsellListHighlighted]
						, ISNULL([UpsellCoupon] ,0)									AS [UpsellListCoupon]
						, ISNULL([UpsellEmercial] ,0)								AS [UpsellPropEmercial]
						, ISNULL([UpsellCommunityVideo] ,0)							AS [UpsellPropCommunityVideo]
						, ISNULL([UpsellFeaturedCommunityPlatinum] ,0)				AS [UpsellPropFeaturedCommunityPlatinum]
						, ISNULL([UpsellFeaturedCommunityGold] ,0)					AS [UpsellPropFeaturedCommunityGold]
						, ISNULL([UpsellFeaturedCommunitySilver] ,0)				AS [UpsellPropFeaturedCommunitySilver]
						, ISNULL([UpsellVirtualBrochure] ,0)						AS [UpsellPropVirtualBrochure]
						, ISNULL([BadgeCorporate] ,0)								AS [UpsellListCorporateListing]
						, ISNULL([BadgeCollege] ,0)									AS [UpsellListCollegeListing]
						, ISNULL([BadgeMilitary] ,0)								AS [UpsellListMilitaryListing]
						, ISNULL([UpsellApartmentListing] ,0)						AS [UpsellListApartmentListing]
						, ISNULL([UpsellPhotoUpgrade] ,0)							AS [UpsellPropPhotoUpgrade]
						, ISNULL([UpsellMgmtManagementCoLogoDisplay] ,0)			AS [UpsellMgmtManagementCoLogoDisplay]
						, ISNULL([BadgeSenior] ,0)									AS [UpsellListSeniorListing]
						, ISNULL([UpsellPropertyLogo] ,0)							AS [UpsellPropPropertyLogoDisplay]
						, ISNULL([UpsellPremiumUpgrade] ,0)							AS [UpsellPropPremiumUpgrade]
						, ISNULL([UpsellVideoSpokesmodel] ,0)						AS [UpsellPropVideoSpokesModel]
						, ISNULL([UpsellFrontPage] ,0)								AS [UpsellPropFrontPage]
						, ISNULL([UpsellSpanish] ,0)								AS [UpsellPropSpanish]
						, ISNULL([UpsellCallRecording] ,0)							AS [UpsellPropCallRecording]
						, ISNULL([UpsellFormToPhone] ,0)							AS [UpsellPropFormToPhone]
						, ISNULL([UpsellPremierListingRentals] ,0)					AS [UpsellPropRentalsPremier]
						, ISNULL([UpsellFeaturedListingRentals] ,0)					AS [UpsellPropRentalsFeatured]
						, ISNULL([UpsellListingRentals] ,0)							AS [UpsellListRentalsListing]
						, ISNULL([UpsellFloorPlanUpgrade] ,0)						AS [UpsellListFloorPlanUpgrade]
						, ISNULL([UpsellPayPerLead] ,0)								AS [UpsellListPayPerLead]
						, ISNULL([UpsellSpotlightRentals] ,0)						AS [UpsellListRentalsSpotlightAd]
						, ISNULL([UpsellSpotlightAG] ,0)							AS [UpsellListSpotLight]
						, ISNULL([UpsellPayPerLease] ,0)							AS [UpsellListPayPerLease]
						, ISNULL([UpsellDiamondMetro] ,0)							AS [UpsellListDiamondMetro]
						, ISNULL([UpsellDiamondCity] ,0)							AS [UpsellListDiamondCity]
						, ISNULL([UpsellDiamondMax] ,0)								AS [UpsellListDiamondMax]
						, ISNULL([UpsellStandardListingRentals] ,0)					AS [UpsellListRentalsStandard]
						, ISNULL([UpsellCarousel] ,0)								AS [UpsellListCommunityCarousel]
						, ISNULL([Upsell30SecondVideo] ,0)							AS [UpsellList30SecondVideo]
						, ISNULL([Upsell60SecondVideo] ,0)							AS [UpsellList60SecondVideo]
						, ISNULL([UpsellCarouselRentals] ,0)						AS [UpsellListRentalsCarousel]
						, ISNULL([UpsellStandardPlusListingRentals] ,0)				AS [UpsellListRentalsStandardPlus]
						, ISNULL([UpsellMobileSpotlight] ,0)						AS [UpsellListMobileSpotLight]
						, ISNULL([UpsellMobileDeal] ,0)								AS [UpsellPropMobileDeal]
						, ISNULL([UpsellDynamicLeadForm] ,0)						AS [UpsellPropDynamicLeadForm]
						, ISNULL([BadgeIncomeRestricted] ,0)						AS [UpsellListIncomeRestricted]
						, ISNULL([BadgePetFriendly] ,0)								AS [UpsellListPetFriendly]
						, ISNULL([BadgeLuxury] ,0)									AS [UpsellListLuxuryCommunity]
						, ISNULL([UpsellRepMon] ,0)									AS [UpsellPropRepMon]
						, ISNULL([UpsellSocialMediaMan] ,0)							AS [UpsellPropSocialMediaMan]
						, ISNULL([UpsellMobileDiamond] ,0)							AS [UpsellListMobileDiamond]
						, ISNULL([UpsellEZPay] ,0)									AS [UpsellListEZPay]
						, ISNULL([UpsellMgmtPeelAd] ,0)								AS [UpsellMgmtPeelAd]
						, ISNULL([UpsellSponsoredApartment] ,0)						AS [UpsellListSponsoredApartment]
						, ISNULL([UpsellHDPanoTour] ,0)								AS [UpsellListHDPanoTours]
						, ISNULL([UpsellHDVideo] ,0)								AS [UpsellListHDVideo]
						, ISNULL([UpsellHDPhoto] ,0)								AS [UpsellListHDPhoto]
						, ISNULL([Upsell3DFloorplan] ,0)							AS [UpsellList3DFloorPlan]
						, ISNULL([UpsellAGSites] ,0)								AS [UpsellListAGSites]
						, ISNULL([UpsellMediaCenter] ,0)							AS [UpsellMediaCenter]
						, ISNULL([UpsellPayPerLeaseALM] ,0)							AS [UpsellListPayPerLeaseALM]
						, CONVERT(int,0)											AS FutureUpsell04
						, [CR3AvgOverallRatingAG]									AS [CR3AvgOverallRating]
						, ISNULL([UpsellCommunityVideoURLFulfilled] ,0)				AS [CommunityVideoURLFulfilled]
						, ISNULL([UpsellHDActiveFloorplansFulfilled] ,0)			AS [HDActiveFloorPlansFulfilled]
						, ISNULL([UpsellHDActivePhotosFulfilled] ,0)				AS [HDActivePhotosFulfilled]
						, ISNULL([UpsellHDPanoTourFulfilled] ,0)					AS [HDTourURLFulfilled]
						, ISNULL([UpsellHDVideoFulfilled] ,0)						AS [HDVideoURLFulfilled]
						, ISNULL([UpsellLinkedFloorplanFulfilled] ,0)				AS [LinkedFloorPlanFulfilled]
						, ISNULL([UpsellVirtualTourFulfilled] ,0)					AS [VirtualTourFulfilled]
						, ISNULL([UpsellLinked3DFloorplanFulfilled] ,0)				AS [Linked3DFloorPlanFulfilled]
						, ISNULL([UpsellLinkedRoomPlannerFulfilled] ,0)				AS [LinkedRoomPlannerFulfilled]
						, ISNULL([UpsellMobileDealFulfilled] ,0)					AS [MobileDealFulfilled]
						, ISNULL([LowPrice] ,0)										AS [LowPrice]
						, ISNULL([HighPrice] ,0)									AS [HighPrice]
						, ISNULL([IsSEM] ,0)										AS [IsSEM]
						, ISNULL([IsOverThreshold] ,0)								AS [IsOverThreshold]
						, ISNULL([IsRentalProp] ,0)									AS [IsRentalPropToBeDELETED]
						, ISNULL([CallTrackingInBook] ,0)							AS [CallTrackingInBook]
						, ISNULL([ActiveCoupon] ,0)									AS [CouponActiveOnSite]
						, ISNULL([VerizonFIOS] ,0)									AS [VerizonFIOS]
						, ISNULL([ATTUverse] ,0)									AS [ATTUverse]
						, ISNULL([DIRECTV] ,0)										AS [DIRECTV]
						, ISNULL([BrightHouse] ,0)									AS [BrightHouse]
						, ISNULL([Charter] ,0)										AS [Charter]
						, ISNULL([XfinitySP] ,0)									AS [XfinitySP]
						, ISNULL([XfinityDP] ,0)									AS [XfinityDP]
						, ISNULL([XfinityTP] ,0)									AS [XfinityTP]
						, ISNULL([TimeWarner] ,0)									AS [TimeWarner]
						, [Ranking]  COLLATE SQL_Latin1_General_CP1_CI_AS			AS [Ranking]
						, [NumericRank]												AS [NumericRank]
						, ISNULL([UniqueVisitsAG] ,0)								AS [UniqueVisits]
						, ISNULL([UniqueVisitsMobileAG] ,0)							AS [UniqueVisits_Mobile]
						, CONVERT(int,0)											AS UniqueVisits_ForFutureUse1
						, CONVERT(int,0)											AS UniqueVisits_ForFutureUse2
						, CONVERT(int,0)											AS UniqueVisits_ForFutureUse3
						, CONVERT(int,0)											AS UniqueVisits_ForFutureUse4
						, ISNULL([UniqueVisitsAGSites] ,0)							AS [UniqueVisits_Sites]
						, ISNULL([ViewsListingPage] ,0)								AS [ViewsListingPage]
						, ISNULL([ViewsListingPage_Mobile] ,0)						AS [ViewsListingPage_Mobile]
						, CONVERT(int,0)											AS ViewsListingPage_ForFutureUse1
						, CONVERT(int,0)											AS ViewsListingPage_ForFutureUse2
						, CONVERT(int,0)											AS ViewsListingPage_ForFutureUse3
						, CONVERT(int,0)											AS ViewsListingPage_ForFutureUse4
						, ISNULL([ViewsListingPage_Sites] ,0)						AS [ViewsListingPage_Sites]
						, CONVERT(int,0)											AS ViewsEmercial
						, ISNULL([ViewsVirtualBrochure] ,0)							AS [ViewsVirtualBrochure]
						, CONVERT(int,0)											AS ClicksSpotlightListing
						, ISNULL([ClicksCommunityVideoAG] ,0)						AS [ClicksCommunityVideo]
						, CONVERT(int,0)											AS ClicksSpotlightCommunityVideo
						, ISNULL([ClicksWebURLAG] ,0)								AS [ClicksListingWebLink]
						, ISNULL([ClicksMgtCoURLAG] ,0)								AS [ClicksMgtCoWebLink]
						, ISNULL([ClicksMapAG] ,0)									AS [ClicksListingMap]
						, CONVERT(int,0)											AS ClicksOnlineAppt
						, CONVERT(int,0)											AS ClicksOnlineApptSubmit
						, CONVERT(int,0)											AS ClicksOnlineAppl
						, CONVERT(int,0)											AS ClicksOnlineApplSubmit
						, CONVERT(int,0)											AS ClicksOnlineApptCR
						, CONVERT(int,0)											AS ClicksOnlineApplCR
						, CONVERT(int,0)											AS ClicksPrintableGuide
						, CONVERT(int,0)											AS ClicksWeCanCallYou
						, CONVERT(int,0)											AS ClicksMapDirections
						, ISNULL([ClicksLeadSubmissionAG] ,0)						AS [ClicksLeadSubmission]
						, CONVERT(int,0)											AS ClicksSpotlightLeadSubmission
						, ISNULL([ClicksPhotosAG] ,0)								AS [ClicksPhotos]
						, CONVERT(int,0)											AS ClicksSpotlightPhotos
						, CONVERT(int,0)											AS ClicksSpotlightPhotoPopup
						, ISNULL([ClicksFloorplanAG] ,0)							AS [ClicksFloorPlans]
						, ISNULL([ClicksCheckYourCredit] ,0)						AS [ClicksCheckYourCredit]
						, CONVERT(int,0)											AS ClicksWebBuilderLink
						, ISNULL([ClicksFeaturedMgtCo] ,0)							AS [ClicksFeaturedMgtCo]
						, CONVERT(int,0)											AS ClicksFrontPagePropLead
						, CONVERT(int,0)											AS ClicksLuxurySlideshow
						, ISNULL([ClicksHDPanoTourAG] ,0)							AS [ClicksPanoramicTours]
						, ISNULL([ClicksHDVideoAG] ,0)								AS [ClicksHDVideos]
						, ISNULL([ClicksHDPhotoAG] ,0)								AS [ClicksHDPhotos]
						, ISNULL([ClicksMgtCoPeelAdAG] ,0)							AS [ClicksMgmtCoPeelAd]
						, ISNULL([ClicksReserveNowAG] ,0)							AS [ClicksReserveNow]
						, CONVERT(int,0)											AS Future5Clicks
						, CONVERT(int,0)											AS Future6Clicks
						, CONVERT(int,0)											AS Future7Clicks
						, CONVERT(int,0)											AS Future8Clicks
						, CONVERT(int,0)											AS Future9Clicks
						, CONVERT(int,0)											AS Future0Clicks
						, ISNULL([SRPListingImprAG] ,0)								AS [ImprSearchResults]
						, ISNULL([SRPListingImprRent] ,0)							AS [ImprSearchResults_Rent]
						, CONVERT(int,0)											AS ImprFrontCover
						, ISNULL([SRPUniqueVisitAG] ,0)								AS [ImprVisitCount]
						, CONVERT(int,0)											AS TextMsgWeb
						, CONVERT(int,0)											AS TextMsgMobile
						, ISNULL([CheckListingAvail] ,0)							AS [CheckListingAvail]
						, CONVERT(int,0)											AS ClicksSpotlightListingAvail
						, CONVERT(int,0)											AS ClicksVirtualTourListingAvail
						, ISNULL([AGCPrintConnectedCalls] ,0)						AS [AGCPrintConnectedCalls]
						, ISNULL([AGCPrintMissedCalls] ,0)							AS [AGCPrintMissedCalls]
						, ISNULL([ASGPrintConnectedCalls] ,0)						AS [ASGPrintConnectedCalls]
						, ISNULL([ASGPrintMissedCalls] ,0)							AS [ASGPrintMissedCalls]
						, ISNULL([WebConnectedCalls] ,0)							AS [WebConnectedCalls]
						, ISNULL([WebMissedCalls] ,0)								AS [WebMissedCalls]
						, ISNULL([RentalsConnectedCalls] ,0)						AS [RentalsConnectedCalls]
						, ISNULL([RentalsMissedCalls] ,0)							AS [RentalsMissedCalls]
						, ISNULL([CTCConnectedCalls] ,0)							AS [CTCConnectedCalls]
						, ISNULL([CTCMissedCalls] ,0)								AS [CTCMissedCalls]
						, ISNULL([PaidSPConnectedCalls] ,0)							AS [PaidSPConnectedCalls]
						, ISNULL([PaidSPMissedCalls] ,0)							AS [PaidSPMissedCalls]
						, ISNULL([CombinedFeedsConnectedCalls] ,0)					AS [CombinedFeedsConnectedCalls]
						, ISNULL([CombinedFeedsMissedCalls] ,0)						AS [CombinedFeedsMissedCalls]
						, ISNULL([GoogleConnectedCalls] ,0)							AS [GoogleConnectedCalls]
						, ISNULL([GoogleMissedCalls] ,0)							AS [GoogleMissedCalls]
						, ISNULL([PPCConnectedCalls] ,0)							AS [PPCConnectedCalls]
						, ISNULL([PPCMissedCalls] ,0)								AS [PPCMissedCalls]
						, ISNULL([LuxuryConnectedCalls] ,0)							AS [LuxuryConnectedCalls]
						, ISNULL([LuxuryMissedCalls] ,0)							AS [LuxuryMissedCalls]
						, ISNULL([MarchexConnectedCalls] ,0)						AS [MarchexConnectedCalls]
						, ISNULL([MarchexMissedCalls] ,0)							AS [MarchexMissedCalls]
						, ISNULL([CraigsListConnectedCalls] ,0)						AS [CraigsListConnectedCalls]
						, ISNULL([CraigsListMissedCalls] ,0)						AS [CraigsListMissedCalls]
						, ISNULL([WebLocalTrackingNumberConnectedCalls] ,0)			AS [WebLocalTrackingNumberConnectedCalls]
						, ISNULL([WebLocalTrackingNumberMissedCalls] ,0)			AS [WebLocalTrackingNumberMissedCalls]
						, ISNULL([RentalsLocalConnectedCalls] ,0)					AS [RentalsLocalConnectedCalls]
						, ISNULL([RentalsLocalMissedCalls] ,0)						AS [RentalsLocalMissedCalls]
						, ISNULL([VideoConnectedCalls] ,0)							AS [VideoConnectedCalls]
						, ISNULL([VideoMissedCalls] ,0)								AS [VideoMissedCalls]
						, ISNULL([SEMConnectedCalls] ,0)							AS [SEMConnectedCalls]
						, ISNULL([SEMMissedCalls] ,0)								AS [SEMMissedCalls]
						, ISNULL([TruliaConnectedCalls] ,0)							AS [TruliaConnectedCalls]
						, ISNULL([TruliaMissedCalls] ,0)							AS [TruliaMissedCalls]
						, ISNULL([RentConnectedCallsAG] ,0)							AS [RentConnectedCalls]
						, ISNULL([RentMissedCallsAG] ,0)							AS [RentMissedCalls]
						, ISNULL([RentOneWebConnectedCallsAG] ,0)					AS [RentOneWebConnectedCalls]
						, ISNULL([RentOneWebMissedCallsAG] ,0)						AS [RentOneWebMissedCalls]
						, ISNULL([RentMobileConnectedCallsAG] ,0)					AS [RentMobileConnectedCalls]
						, ISNULL([RentMobileMissedCallsAG] ,0)						AS [RentMobileMissedCalls]
						, ISNULL([RentAltRegConnectedCallsAG] ,0)					AS [RentAltRegConnectedCalls]
						, ISNULL([RentAltRegMissedCallsAG] ,0)						AS [RentAltRegMissedCalls]
						, ISNULL([LeadMailConnectedCalls] ,0)						AS [LeadMailConnectedCalls]
						, ISNULL([LeadMailMissedCalls] ,0)							AS [LeadMailMissedCalls]
						, ISNULL([SMSConnectedCalls] ,0)							AS [SMSConnectedCalls]
						, ISNULL([SMSMissedCalls] ,0)								AS [SMSMissedCalls]
						, ISNULL([MobileSEMConnectedCalls] ,0)						AS [MobileSEMConnectedCalls]
						, ISNULL([MobileSEMMissedCalls] ,0)							AS [MobileSEMMissedCalls]
						, ISNULL([DripConnectedCalls] ,0)							AS DripConnectedCalls
						, ISNULL([DripMissedCalls] ,0)								AS DripMissedCalls
						, CONVERT(int,0)											AS FutureConnectedCalls04
						, CONVERT(int,0)											AS FutureMissedCalls04
						, ISNULL([SitesConnectedCalls] ,0)							AS [SitesConnectedCalls]
						, ISNULL([SitesMissedCalls] ,0)								AS [SitesMissedCalls]
						, CONVERT(int,0)											AS FutureConnectedCalls07
						, CONVERT(int,0)											AS FutureMissedCalls07
						, CONVERT(int,0)											AS FutureConnectedCalls08
						, CONVERT(int,0)											AS FutureMissedCalls08
						, CONVERT(int,0)											AS FutureConnectedCalls09
						, CONVERT(int,0)											AS FutureMissedCalls09
						, CONVERT(int,0)											AS FutureConnectedCalls10
						, CONVERT(int,0)											AS FutureMissedCalls10
						, ISNULL([AGEmailLeads] ,0)									AS [AGEmailLeads]
						, ISNULL([MetroEmailLeads] ,0)								AS [MetroEmailLeads]
						, ISNULL([NeighborhoodEmailLeads] ,0)						AS [NeighborhoodEmailLeads]
						, ISNULL([AIMCOEmailLeads] ,0)								AS [AIMCOEmailLeads]
						, ISNULL([RentalsEmailLeads] ,0)							AS [RentalsEmailLeads]
						, ISNULL([RentRentarEmailLeads] ,0)							AS [RentRentarEmailLeads]
						, ISNULL([RentalHousesEmailLeads] ,0)						AS [RentalHousesEmailLeads]
						, ISNULL([iPhoneEmailLeadsAG] ,0)							AS [iPhoneEmailLeads]
						, ISNULL([OodleEmailLeads] ,0)								AS [OodleEmailLeads]
						, [AndroidEmailLeadsAG]										AS [AndroidEmailLeads]
						, ISNULL([HotpadsEmailLeads] ,0)							AS [HotpadsEmailLeads]
						, ISNULL([LuxuryEmailLeads] ,0)								AS [LuxuryEmailLeads]
						, ISNULL([CondoEmailLeads] ,0)								AS [CondoEmailLeads]
						, ISNULL([iPadEmailLeadsAG] ,0)								AS [iPadEmailLeads]
						, ISNULL([TruliaEmailLeadsAG] ,0)							AS [TruliaEmailLeads]
						, ISNULL([ZillowEmailLeads] ,0)								AS [ZillowEmailLeads]
						, ISNULL([VerticalBrandsEmailLeads] ,0)						AS [VerticalBrandsEmailLeads]
						, ISNULL([RDTFeedLeadsAG] ,0)								AS [RDTFeedLeads]
						, ISNULL([PropSolutionsFeedLeads] ,0)						AS [PropSolutionsFeedLeads]
						, ISNULL([YieldFeedLeads] ,0)								AS [YieldFeedLeads]
						, ISNULL([EREIFeedLeads] ,0)								AS [EREIFeedLeads]
						, ISNULL([YardiRCFeedLeads] ,0)								AS [YardiRCFeedLeads]
						, CONVERT(int,0)											AS Future1FeedLeads
						, CONVERT(int,0)											AS Future2FeedLeads
						, CONVERT(int,0)											AS Future3FeedLeads
						, CONVERT(int,0)											AS Future4FeedLeads
						, CONVERT(int,0)											AS Future5FeedLeads
						, ISNULL([AGMobileEmailLeads] ,0)							AS [AGMobileEmailLeads]
						, ISNULL([RentalsMobileEmailLeads] ,0)						AS [RentalsMobileEmailLeads]
						, ISNULL([RentalsAndroidEmailLeads] ,0)						AS [RentalsAndroidEmailLeads]
						, ISNULL([RentalsIPhoneEmailLeads] ,0)						AS [RentalsIPhoneEmailLeads]
						, ISNULL([VastEmailLeads] ,0)								AS [VastEmailLeads]
						, ISNULL([CampusHomesOnlineEmailLeads] ,0)					AS [CampusHomesOnlineEmailLeads]
						, ISNULL([AGTabletEmailLeads] ,0)							AS [AGTabletEmailLeads]
						, ISNULL([AGKindleEmailLeads] ,0)							AS [AGKindleEmailLeads]
						, ISNULL([RentEmailLeadsAG] ,0)								AS [RentEmailLeads]
						, ISNULL([LovelyEmailLeads] ,0)								AS [LovelyEmailLeads]
						, ISNULL([SitesEmailLeads] ,0)								AS [SitesEmailLeads]
						, ISNULL([RentAndroidEmailLeads] ,0)						AS [RentAndroidEmailLeads]
						, ISNULL([RentiPadEmailLeads] ,0)							AS [RentiPadEmailLeads]
						, ISNULL([RentiPhoneEmailLeads] ,0)							AS [RentiPhoneEmailLeads]
						, CONVERT(int,0)											AS Future7EmailLeads
						, CONVERT(int,0)											AS Future8EmailLeads
						, CONVERT(int,0)											AS Future9EmailLeads
						, CONVERT(int,0)											AS Future0EmailLeads
						, ISNULL([PlacementTierAG] ,0)								AS [PlacementTier]
						, ISNULL([PrintProductPoints] ,0)							AS [PrintProductPoints]
						, ISNULL([InternetProductPoints] ,0)						AS [InternetProductPoints]
						, ISNULL([LegacyLoyaltyPoints] ,0)							AS [LegacyLoyaltyPoints]
						, ISNULL([ContractLoyaltyPoints] ,0)						AS [ContractLoyaltyPoints]
						, ISNULL([MobilePoints] ,0)									AS [MobilePoints]
						, CONVERT(int,0)											AS Future1Points
						, CONVERT(int,0)											AS Future2Points
						, ISNULL([LastUpdateYMDID] ,0)								AS [LastUpdateYMDID]
						, ISNULL([UpsellLinkedFloorplan] ,0)						AS [LinkedFloorPlan]
						, ISNULL([UpsellLinked3DFloorplan] ,0)						AS [Linked3DFloorPlan]
						, ISNULL([UpsellLinkedRoomPlanner] ,0)						AS [LinkedRoomPlanner]
						, [RPLRANK]													AS [RPLRANK]
					FROM RentPath.Staging.MartListingsFromAPS  
					
			COMMIT TRANSACTION
  

								----------------------------------
								--Log the insertion
								----------------------------------	
								SET @LengthInSeconds = DATEDIFF(ss, @TrackDate,GETDATE())      
								EXEC DBAUtility.dbo.pr_Logging_StoredProcs @DatabaseName = @DatabaseName,
									@ProcName = @ProcedureName,
									@StepName = '3 - Insert data into AG Mart Listings for the date range',
									@VariableStates = @LocalYMDID,
									@LengthInSeconds = @LengthInSeconds,
									@Comments = 'The transaction of inserting the data has been committed';
								SET @TrackDate = GETDATE();
            
			END					                   
	      
END TRY

	BEGIN CATCH
		SET @ErrorMessage		= ERROR_MESSAGE()
		SET @ErrorSeverity		= ERROR_SEVERITY()
		SET @ErrorState			= ERROR_STATE()

		SET @ErrorMessage = 'Error occured in Mart.pr_AGListingsFromAPS procedure. Error - ' + @ErrorMessage

			----------------------------------
			--Log the error
			----------------------------------	
			SET @LengthInSeconds = DATEDIFF(ss, @TrackDate,GETDATE())            
			EXEC DBAUtility.dbo.pr_Logging_StoredProcs @DatabaseName = @DatabaseName,
				@ProcName = @ProcedureName,
				@StepName = 'Error occured in Mart.pr_AGListingsFromAPS procedure.',
				@VariableStates = @LocalYMDID,
				@LengthInSeconds = @LengthInSeconds,
				@Comments = @ErrorMessage;
			SET @TrackDate = GETDATE();
		

		IF @@trancount > 0
			ROLLBACK TRANSACTION


		RAISERROR (@ErrorMessage, -- Message text.
		@ErrorSeverity, -- Severity.
		@ErrorState -- State.
		) WITH LOG;

		RETURN 0		-- Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	
	END CATCH

SET NOCOUNT OFF

END



GO
/****** Object:  StoredProcedure [Mart].[pr_Backfill_MartListings]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Mart].[pr_Backfill_MartListings] (
@YMDID AS INT = NULL
)
/*******************************************************************************************
* Name:	pr_Backfill_MartListings
* ------------------------------------------------------------------------------------------
* Desc:	This marts the Teaxlium tags daily
* ------------------------------------------------------------------------------------------
* Test:	EXEC Mart.[pr_Backfill_MartListings] 20150501
* ------------------------------------------------------------------------------------------
* Note on Profiles:
* ProfileKey	ProfileName
* 84			APTGTeaxlium
* 85			ApartmentGuideMDot Teaxlium
* 86			RentTeaxlium
* 87			RentMDot Teaxlium
* 72			AG Sites
* ------------------------------------------------------------------------------------------
* Hist:	01	04/27/2015	Marting Team	Initial Version
*
********************************************************************************************/
AS 

BEGIN
	SET NOCOUNT ON;

	/*test
	DECLARE @YMDID INT
	SET @YMDID = 20150506
	*/

	IF @YMDID IS NULL
     return

	INSERT INTO Staging.MartLog
			(YMDID,Step,EndTime)
	VALUES  (@YMDID, -- YMDID - int
				'Mart.pr_Backfill_MartListings'   -- Step - varchar(1000)
				,GETDATE()
				)

    DELETE FROM mart.listings WHERE ymdid=@ymdid
	INSERT INTO [Mart].[Listings]
	(ListingID, YMDID, YearMonth, PropertyIDAG, StatusIDAG, PropertyIDRent, StatusIDRent, ListingType, IsSEM, ShowPricing, LowPrice, HighPrice, CallRecordingOptOut, TotalAmenities, ActiveAmenities, ActiveCoupon, ActiveFloorplans, ActiveHDFloorplans, ActiveHDPhotos, ActivePhotos, ExternalID, ListingPricingSource, Charter, DIRECTV, CR3AvgOverallRatingAG, CR3AvgOverallRatingRent, ShowOfficeHours, PlacementTierAG, PlacementTierRent, ContractLoyaltyPoints, InternetProductPoints, LegacyLoyaltyPoints, MobilePoints, PrintProductPoints, Ranking, RPLRank, BadgeCollege, BadgeCorporate, BadgeIncomeRestricted, BadgeLuxury, BadgeMilitary, BadgePetFriendly, BadgeSenior, Upsell3DFloorplan, UpsellAGSites,  UpsellCarousel, UpsellCarouselRentals, UpsellCommunityVideoURLFulfilled, UpsellCoupon, UpsellDiamondCity, UpsellDiamondMax, UpsellDiamondMetro, UpsellEmercial, UpsellFeaturedCommunityAG, UpsellFeaturedCommunityRent, UpsellFeaturedListingRentals, UpsellHDActiveFloorplansFulfilled, UpsellHDActivePhotosFulfilled, UpsellHDPanoTour, UpsellHDPanoTourFulfilled, UpsellHDPhoto, UpsellHDVideo, UpsellHDVideoFulfilled, UpsellHighlighted, UpsellLinked3DFloorplan, UpsellLinked3DFloorplanFulfilled, UpsellLinkedFloorplan, UpsellLinkedFloorplanFulfilled, UpsellLinkedRoomPlanner, UpsellLinkedRoomPlannerFulfilled, UpsellListingRent, UpsellListingRentals, UpsellMediaCenter, UpsellMgmtPeelAd, UpsellMobileDeal, UpsellMobileDealFulfilled, UpsellMobileDiamond, UpsellMobileSpotlight, UpsellNoVacancyRent, UpsellPayPerLead, UpsellPayPerLease, UpsellPhotoUpgrade, UpsellPrecisionTargetedEmailRent, UpsellPremierListingRentals, UpsellPremiumUpgrade, UpsellRewardCardRent, UpsellSponsoredApartment, UpsellSpotlightAG, UpsellSpotlightRent, UpsellSpotlightRentals, UpsellStandardListingRentals, UpsellStandardPlusListingRentals, UpsellSubscriptionModelRent, UpsellVideoSpokesmodel, UpsellVIPPlacementRent, UpsellVirtualBrochure, UpsellVirtualTourFulfilled, ClicksCommunityVideoAG, ClicksDiamondMaxPhotoAG, ClicksDiamondMaxCheckAvailAG, ClicksFloorplanAG, ClicksFloorplanRent, ClicksHDFloorplanAG, ClicksHDFloorplanRent, ClicksPhotosAG, ClicksPhotosRent, ClicksHDPhotoAG, ClicksHDPhotoRent, ClicksHDVideoAG, ClicksHDVideoRent, ClicksHDPanoTourAG, ClicksHDPanoTourRent, ClicksMapAG, ClicksMapRent, ClicksWebURLAG, ClicksWebURLRent, ClicksMgtCoURLAG, ClicksMgtCoURLRent, ClicksMgtCoPeelAdAG, ClicksMgtCoPeelAdRent, ClicksReserveNowAG, ClicksReserveNowRent, ClicksFeaturedCommunityAG, ClicksFeaturedCommunityRent, ClicksFeatCommCheckAvailAG, ClicksFeatCommCheckAvailRent, ClicksSRPListingCheckAvailAG, ClicksSRPListingCheckAvailRent, ClicksCR3AG, ClicksCR3Rent, ClicksSpotlightRentSpecialsAG, ClicksSpotlightRentSpecialsRent, ClicksSpotlightReserveNowAG, SRPListingImprAG, SRPListingImprRent, SRPUniqueVisitAG, SRPUniqueVisitRent, UniqueVisitsAG, UniqueVisitsRent, UniqueVisitsMobileAG, UniqueVisitsMobileRent, UniqueVisitsAGSites, ViewsListingPageWebAG, ViewsListingPageWebRent, ViewsListingPageMobileAG, ViewsListingPageMobileRent, ViewsListingPageAGSites, PhoneLeadsAG, PhoneLeadsRent, EmailLeadsAG, EmailLeadsRent)
        SELECT 
	ListingID=ISNULL(a.listingid, r.listingid)
	, YMDID= @ymdid
	, YearMonth=LEFT (@ymdid,6)
	, PropertyIDAG=a.PropertyID
	, StatusIDAG= ISNULL(a.listingStatusID,0)
	, PropertyIDRent=r.RentPropertyID
	, StatusIDRent=ISNULL(r.RentStatusID,0)
	, ListingType=ISNULL(a.listingType, r.ListingType)
	
	, IsSEM=ISNULL(a.isSEM, 0)
	, ShowPricing=ISNULL(a.showPricing, r.showPricing)
	, LowPrice=ISNULL(a.lowPrice, r.lowPrice)
	, HighPrice=ISNULL(a.HighPrice, r.highprice)
	, CallRecordingOptOut=CASE WHEN ISNULL(a.UpsellPropCallRecording,r.UpsellPropCallRecording) = 0 THEN 1
	                           ELSE 0 end
	, TotalAmenities=ISNULL(a.totalAmenities, r.totalAmenities)
	, ActiveAmenities=ISNULL(a.ActiveAmenities, r.ActiveAmenities)
	, ActiveCoupon= ISNULL(a.CouponActiveOnSite,r.CouponActiveOnSite)
	, ActiveFloorplans=ISNULL(a.ActiveFloorPlans,r.ActiveFloorPlans)
	, ActiveHDFloorplans=ISNULL(a.ActiveHDFloorPlans,r.ActiveHDFloorPlans)
	, ActiveHDPhotos=ISNULL(a.ActiveHDPhotos, r.ActiveHDPhotos)
	, ActivePhotos=ISNULL(a.ActivePhotos,r.ActivePhotos)
	, ExternalID=ISNULL(a.ExternalID, r.ExternalID)
	, ListingPricingSource=ISNULL(a.ExternalPriceCode,r.ExternalPriceCode)
	, Charter=ISNULL(a.Charter,0)
	, DIRECTV=ISNULL(a.DIRECTV,0)
	, CR3AvgOverallRatingAG=ISNULL(a.CR3AvgOverallRating,0)
	, CR3AvgOverallRatingRent=ISNULL(r.CR3AvgOverallRating,0)
	, ShowOfficeHours=ISNULL(a.ShowOfficeHours,r.ShowOfficeHours)
	, PlacementTierAG=ISNULL(a.PlacementTier,0)
	, PlacementTierRent=0
	, ContractLoyaltyPoints=ISNULL(a.contractLoyaltyPoints,0)
	, InternetProductPoints=ISNULL(a.InternetProductPoints,0)
	, LegacyLoyaltyPoints=ISNULL(a.LegacyLoyaltyPoints,0)
	, MobilePoints=ISNULL(a.MobilePoints,0)
	, PrintProductPoints=ISNULL(a.PrintProductPoints,0)
	, Ranking=ISNULL(a.Ranking,0)
	, RPLRank=ISNULL(a.RPLRank,0)
	, BadgeCollege=ISNULL(a.UpsellListCollegeListing,0)
	, BadgeCorporate=ISNULL(a.UpsellListCorporateListing,0)
	, BadgeIncomeRestricted=ISNULL(a.UpsellListIncomeRestricted,0)
	, BadgeLuxury=ISNULL(a.UpsellListLuxuryCommunity,0)
	, BadgeMilitary=ISNULL(a.UpsellListMilitaryListing,0)
	, BadgePetFriendly=ISNULL(a.UpsellListPetFriendly,0)
	, BadgeSenior=ISNULL(a.UpsellListSeniorListing,0)
	, Upsell3DFloorplan=ISNULL(a.UpsellList3DFloorPlan,0)
	, UpsellAGSites=ISNULL(a.UpsellListAGSites,0)

	, UpsellCarousel=ISNULL(a.UpsellListCommunityCarousel,0)
	, UpsellCarouselRentals=ISNULL(a.UpsellListRentalsCarousel,0)
	, UpsellCommunityVideoURLFulfilled=ISNULL(a.CommunityVideoURLFulfilled,0)
	, UpsellCoupon=ISNULL(a.UpsellListCoupon,r.UpsellListCoupon)
	, UpsellDiamondCity=ISNULL(a.UpsellListDiamondCity,0)
	, UpsellDiamondMax=ISNULL(a.UpsellListDiamondMax,0)
	, UpsellDiamondMetro=ISNULL(a.UpsellListDiamondMetro,0)
	, UpsellEmercial=ISNULL(a.UpsellPropEmercial,0)
	, UpsellFeaturedCommunityAG=CASE WHEN a.UpsellPropFeaturedCommunityPlatinum=1 OR a.UpsellPropFeaturedCommunityGold=1
	                                     OR a.UpsellPropFeaturedCommunitySilver=1 THEN 1
									 ELSE 
									     0 
									 end

	, UpsellFeaturedCommunityRent=ISNULL(r.UpsellRentMetroFL,0)
	, UpsellFeaturedListingRentals=ISNULL(a.UpsellPropRentalsFeatured,0)
	, UpsellHDActiveFloorplansFulfilled=ISNULL(a.HDActiveFloorPlansFulfilled,r.HDActiveFloorPlansFulfilled)
	, UpsellHDActivePhotosFulfilled=ISNULL(a.HDActivePhotosFulfilled,r.HDActivePhotosFulfilled)
	, UpsellHDPanoTour=ISNULL(a.UpsellListHDPanoTours,0)
	, UpsellHDPanoTourFulfilled=ISNULL(a.HDTourURLFulfilled,0)
	, UpsellHDPhoto=ISNULL(a.UpsellListHDPhoto,0)
	, UpsellHDVideo=ISNULL(a.UpsellListHDVideo,0)
	, UpsellHDVideoFulfilled=ISNULL(a.HDVideoURLFulfilled,0)
	, UpsellHighlighted=ISNULL(a.UpsellListHighlighted,0)
	, UpsellLinked3DFloorplan=ISNULL(a.Linked3DFloorPlan,r.Linked3DFloorPlan)
	, UpsellLinked3DFloorplanFulfilled=ISNULL(a.Linked3DFloorPlanFulfilled,r.Linked3DFloorPlanFulfilled)
	, UpsellLinkedFloorplan=ISNULL(a.LinkedFloorPlan,r.LinkedFloorPlan)
	, UpsellLinkedFloorplanFulfilled=ISNULL(a.LinkedFloorPlanFulfilled,r.LinkedFloorPlanFulfilled)
	, UpsellLinkedRoomPlanner=ISNULL(a.LinkedRoomPlanner,r.LinkedRoomPlanner)
	, UpsellLinkedRoomPlannerFulfilled=ISNULL(a.LinkedRoomPlannerFulfilled,r.LinkedRoomPlannerFulfilled)
	, UpsellListingRent=ISNULL(r.UpsellRentListing,0)
	, UpsellListingRentals=ISNULL(a.UpsellListRentalsListing,0)
	, UpsellMediaCenter=ISNULL(a.UpsellMediaCenter,0)
	--, UpsellMetroFeaturedListingRent=ISNULL(r.UpsellRentMetroFL,0)
	, UpsellMgmtPeelAd=ISNULL(a.UpsellMgmtPeelAd,0)
	, UpsellMobileDeal=ISNULL(a.UpsellPropMobileDeal,0)
	, UpsellMobileDealFulfilled=ISNULL(a.MobileDealFulfilled,r.MobileDealFulfilled)
	, UpsellMobileDiamond=ISNULL(a.UpsellListMobileDiamond,0)
	, UpsellMobileSpotlight=ISNULL(a.UpsellListMobileSpotLight,0)
	, UpsellNoVacancyRent=ISNULL(r.UpsellRentNoVacancy,0)
	, UpsellPayPerLead=ISNULL(a.UpsellListPayPerLead,0)
	, UpsellPayPerLease=ISNULL(a.UpsellListPayPerLease,0)
	, UpsellPhotoUpgrade=ISNULL(a.UpsellPropPhotoUpgrade,0)
	, UpsellPrecisionTargetedEmailRent=ISNULL(r.UpsellRentPTE,0)
	, UpsellPremierListingRentals=ISNULL(a.UpsellPropRentalsPremier,0)
	, UpsellPremiumUpgrade=ISNULL(a.UpsellPropPremiumUpgrade,0)
	, UpsellRewardCardRent=ISNULL(r.UpsellRentRewardCard,0)
	, UpsellSponsoredApartment=ISNULL(a.UpsellListSponsoredApartment,0)
	, UpsellSpotlightAG=ISNULL(a.UpsellListSpotLight,0)
	, UpsellSpotlightRent=ISNULL(r.UpsellRentSpotlight,0)
	, UpsellSpotlightRentals=ISNULL(a.UpsellListRentalsSpotlightAd,0)
	, UpsellStandardListingRentals=ISNULL(a.UpsellListRentalsStandard,0)
	, UpsellStandardPlusListingRentals=ISNULL(a.UpsellListRentalsStandardPlus,0)
	, UpsellSubscriptionModelRent=ISNULL(r.UpsellRentSubscriptionModel,0)
	, UpsellVideoSpokesmodel=ISNULL(a.UpsellPropVideoSpokesModel,0)
	, UpsellVIPPlacementRent=ISNULL(r.UpsellRentVIPPlacement,0)
	, UpsellVirtualBrochure=ISNULL(a.UpsellPropVirtualBrochure,0)
	, UpsellVirtualTourFulfilled=ISNULL(a.VirtualTourFulfilled,0)
	, ClicksCommunityVideoAG=ISNULL(ClicksCommunityVideo,0)
	, ClicksDiamondMaxPhotoAG=0
	, ClicksDiamondMaxCheckAvailAG=0
	, ClicksFloorplanAG=ISNULL(a.ClicksFloorPlans,0)
	, ClicksFloorplanRent=0
	, ClicksHDFloorplanAG=0
	, ClicksHDFloorplanRent=0
	, ClicksPhotosAG=ISNULL(a.ClicksPhotos,0)
	, ClicksPhotosRent=0
	, ClicksHDPhotoAG=ISNULL(a.ClicksHDPhotos,0)
	, ClicksHDPhotoRent=0
	, ClicksHDVideoAG=ISNULL(a.ClicksHDVideos,0)
	, ClicksHDVideoRent=0
	, ClicksHDPanoTourAG=ISNULL(a.ClicksPanoramicTours,0)
	, ClicksHDPanoTourRent=0
	, ClicksMapAG=ISNULL(a.ClicksListingMap,0)
	, ClicksMapRent=ISNULL(r.MapClicks,0)
	, ClicksWebURLAG=ISNULL(a.ClicksListingWebLink,0)
	, ClicksWebURLRent=0
	, ClicksMgtCoURLAG=0
	, ClicksMgtCoURLRent=9
	, ClicksMgtCoPeelAdAG=ISNULL(a.ClicksMgmtCoPeelAd,0)
	, ClicksMgtCoPeelAdRent=0
	, ClicksReserveNowAG=ISNULL(a.ClicksReserveNow,0)
	, ClicksReserveNowRent=0
	, ClicksFeaturedCommunityAG=0
	, ClicksFeaturedCommunityRent=0
	, ClicksFeatCommCheckAvailAG=0
	, ClicksFeatCommCheckAvailRent=0
	, ClicksSRPListingCheckAvailAG=0
	, ClicksSRPListingCheckAvailRent=0
	, ClicksCR3AG=0
	, ClicksCR3Rent=0
	, ClicksSpotlightRentSpecialsAG=0
	, ClicksSpotlightRentSpecialsRent=0
	, ClicksSpotlightReserveNowAG=0
	, SRPListingImprAG=ISNULL(a.ImprSearchResults,0)
	, SRPListingImprRent=ISNULL(r.ImprSearchResults,0)
	, SRPUniqueVisitAG=ISNULL(a.ImprVisitCount,0)
	, SRPUniqueVisitRent=0
	, UniqueVisitsAG=ISNULL(a.UniqueVisits,0)
	, UniqueVisitsRent=ISNULL(r.UniqueVisits,0)
	, UniqueVisitsMobileAG=ISNULL(a.UniqueVisits_Mobile,0)
	, UniqueVisitsMobileRent=0
	, UniqueVisitsAGSites=ISNULL(a.UniqueVisits_Sites,0)
	, ViewsListingPageWebAG=ISNULL(a.ViewsListingPage,0)
	, ViewsListingPageWebRent=0
	, ViewsListingPageMobileAG=ISNULL(a.ViewsListingPage_Mobile,0)
	, ViewsListingPageMobileRent=0
	, ViewsListingPageAGSites=ISNULL(a.ViewsListingPage_Sites,0)
	, PhoneLeadsAG=ISNULL(a.[AGCPrintConnectedCalls]+a.[ASGPrintConnectedCalls]+a.[WebConnectedCalls]+a.[RentalsConnectedCalls]+a.[CTCConnectedCalls]+a.[PaidSPConnectedCalls]+a.[CombinedFeedsConnectedCalls]+a.[GoogleConnectedCalls]+a.[PPCConnectedCalls]+a.[LuxuryConnectedCalls]+a.[WebLocalTrackingNumberConnectedCalls]+a.[RentalsLocalConnectedCalls]+a.[VideoConnectedCalls]+a.[SEMConnectedCalls]+a.[TruliaConnectedCalls]+a.[RentConnectedCalls]+a.[RentOneWebConnectedCalls]+a.[RentMobileConnectedCalls]+a.[RentAltRegConnectedCalls]+a.[LeadMailConnectedCalls]+a.[SitesConnectedCalls]+a.[SMSConnectedCalls]+a.[MobileSEMConnectedCalls]+a.[MarchexConnectedCalls],0)
	, PhoneLeadsRent=ISNULL(r.[RentConnectedCalls]+r.[RentAltRegConnectedCalls]+r.[RentOneWebConnectedCalls]+r.[RentMobileConnectedCalls]+r.[RentSEMConnectedCalls]+r.[RentMobileSEMConnectedCalls],0)
	, EmailLeadsAG=ISNULL(a.[RentRentarEmailLeads]+a.[AIMCOEmailLeads]+a.[iPhoneEmailLeads]+a.[OodleEmailLeads]+a.[AndroidEmailLeads]+a.[HotpadsEmailLeads]+a.[LuxuryEmailLeads]+a.[CondoEmailLeads]+a.[iPadEmailLeads]+a.[TruliaEmailLeads]+a.[ZillowEmailLeads]+a.[VerticalBrandsEmailLeads]+a.[AGEmailLeads]+a.[MetroEmailLeads]+a.[NeighborhoodEmailLeads]+a.[RentalsEmailLeads]+a.[RentalHousesEmailLeads]+a.[RDTFeedLeads]+a.[PropSolutionsFeedLeads]+a.[YieldFeedLeads]+a.[EREIFeedLeads]+a.[YardiRCFeedLeads]+a.[AGMobileEmailLeads]+a.[AGTabletEmailLeads]+a.[AGKindleEmailLeads]+a.[RentalsMobileEmailLeads]+a.[RentalsAndroidEmailLeads]+a.[RentalsIPhoneEmailLeads]+a.[VastEmailLeads]+a.[CampusHomesOnlineEmailLeads]+a.[RentAndroidEmailLeads]+a.[RentiPadEmailLeads]+a.[RentiPhoneEmailLeads]+a.[RentEmailLeads]+a.[LovelyEmailLeads]+a.[SitesEmailLeads]
	,0)
	, EmailLeadsRent=ISNULL(r.[RentEmailLeads]+r.[TruliaEmailLeads]+r.[AndroidEmailLeads]+r.[iPadEmailLeads]+r.[iPhoneEmailLeads],0)
	FROM (SELECT * FROM apartmentguide.mart.Listings a WITH (nolock) WHERE ymdid=@ymdid) a
	FULL OUTER JOIN (SELECT * FROM rentcom.mart.listings r WITH (nolock) WHERE ymdid=@ymdid) r
	on  a.listingid =r.listingid


	SET NOCOUNT OFF;
END

/*
EXEC Mart.[pr_Backfill_MartListings] 20140101
EXEC Mart.[pr_Backfill_MartListings] 20140102
EXEC Mart.[pr_Backfill_MartListings] 20140103
EXEC Mart.[pr_Backfill_MartListings] 20140104
EXEC Mart.[pr_Backfill_MartListings] 20140105
EXEC Mart.[pr_Backfill_MartListings] 20140106
EXEC Mart.[pr_Backfill_MartListings] 20140107
EXEC Mart.[pr_Backfill_MartListings] 20140108
EXEC Mart.[pr_Backfill_MartListings] 20140109
EXEC Mart.[pr_Backfill_MartListings] 20140110
EXEC Mart.[pr_Backfill_MartListings] 20140111
EXEC Mart.[pr_Backfill_MartListings] 20140112
EXEC Mart.[pr_Backfill_MartListings] 20140113
EXEC Mart.[pr_Backfill_MartListings] 20140114
EXEC Mart.[pr_Backfill_MartListings] 20140115
EXEC Mart.[pr_Backfill_MartListings] 20140116
EXEC Mart.[pr_Backfill_MartListings] 20140117
EXEC Mart.[pr_Backfill_MartListings] 20140118
EXEC Mart.[pr_Backfill_MartListings] 20140119
EXEC Mart.[pr_Backfill_MartListings] 20140120
EXEC Mart.[pr_Backfill_MartListings] 20140121
EXEC Mart.[pr_Backfill_MartListings] 20140122
EXEC Mart.[pr_Backfill_MartListings] 20140123
EXEC Mart.[pr_Backfill_MartListings] 20140124
EXEC Mart.[pr_Backfill_MartListings] 20140125
EXEC Mart.[pr_Backfill_MartListings] 20140126
EXEC Mart.[pr_Backfill_MartListings] 20140127
EXEC Mart.[pr_Backfill_MartListings] 20140128
EXEC Mart.[pr_Backfill_MartListings] 20140129
EXEC Mart.[pr_Backfill_MartListings] 20140130
EXEC Mart.[pr_Backfill_MartListings] 20140131
EXEC Mart.[pr_Backfill_MartListings] 20140201
EXEC Mart.[pr_Backfill_MartListings] 20140202
EXEC Mart.[pr_Backfill_MartListings] 20140203
EXEC Mart.[pr_Backfill_MartListings] 20140204
EXEC Mart.[pr_Backfill_MartListings] 20140205
EXEC Mart.[pr_Backfill_MartListings] 20140206
EXEC Mart.[pr_Backfill_MartListings] 20140207
EXEC Mart.[pr_Backfill_MartListings] 20140208
EXEC Mart.[pr_Backfill_MartListings] 20140209
EXEC Mart.[pr_Backfill_MartListings] 20140210
EXEC Mart.[pr_Backfill_MartListings] 20140211
EXEC Mart.[pr_Backfill_MartListings] 20140212
EXEC Mart.[pr_Backfill_MartListings] 20140213
EXEC Mart.[pr_Backfill_MartListings] 20140214
EXEC Mart.[pr_Backfill_MartListings] 20140215
EXEC Mart.[pr_Backfill_MartListings] 20140216
EXEC Mart.[pr_Backfill_MartListings] 20140217
EXEC Mart.[pr_Backfill_MartListings] 20140218
EXEC Mart.[pr_Backfill_MartListings] 20140219
EXEC Mart.[pr_Backfill_MartListings] 20140220
EXEC Mart.[pr_Backfill_MartListings] 20140221
EXEC Mart.[pr_Backfill_MartListings] 20140222
EXEC Mart.[pr_Backfill_MartListings] 20140223
EXEC Mart.[pr_Backfill_MartListings] 20140224
EXEC Mart.[pr_Backfill_MartListings] 20140225
EXEC Mart.[pr_Backfill_MartListings] 20140226
EXEC Mart.[pr_Backfill_MartListings] 20140227
EXEC Mart.[pr_Backfill_MartListings] 20140228
EXEC Mart.[pr_Backfill_MartListings] 20140301
EXEC Mart.[pr_Backfill_MartListings] 20140302
EXEC Mart.[pr_Backfill_MartListings] 20140303
EXEC Mart.[pr_Backfill_MartListings] 20140304
EXEC Mart.[pr_Backfill_MartListings] 20140305
EXEC Mart.[pr_Backfill_MartListings] 20140306
EXEC Mart.[pr_Backfill_MartListings] 20140307
EXEC Mart.[pr_Backfill_MartListings] 20140308
EXEC Mart.[pr_Backfill_MartListings] 20140309
EXEC Mart.[pr_Backfill_MartListings] 20140310
EXEC Mart.[pr_Backfill_MartListings] 20140311
EXEC Mart.[pr_Backfill_MartListings] 20140312
EXEC Mart.[pr_Backfill_MartListings] 20140313
EXEC Mart.[pr_Backfill_MartListings] 20140314
EXEC Mart.[pr_Backfill_MartListings] 20140315
EXEC Mart.[pr_Backfill_MartListings] 20140316
EXEC Mart.[pr_Backfill_MartListings] 20140317
EXEC Mart.[pr_Backfill_MartListings] 20140318
EXEC Mart.[pr_Backfill_MartListings] 20140319
EXEC Mart.[pr_Backfill_MartListings] 20140320
EXEC Mart.[pr_Backfill_MartListings] 20140321
EXEC Mart.[pr_Backfill_MartListings] 20140322
EXEC Mart.[pr_Backfill_MartListings] 20140323
EXEC Mart.[pr_Backfill_MartListings] 20140324
EXEC Mart.[pr_Backfill_MartListings] 20140325
EXEC Mart.[pr_Backfill_MartListings] 20140326
EXEC Mart.[pr_Backfill_MartListings] 20140327
EXEC Mart.[pr_Backfill_MartListings] 20140328
EXEC Mart.[pr_Backfill_MartListings] 20140329
EXEC Mart.[pr_Backfill_MartListings] 20140330
EXEC Mart.[pr_Backfill_MartListings] 20140331
EXEC Mart.[pr_Backfill_MartListings] 20140401
EXEC Mart.[pr_Backfill_MartListings] 20140402
EXEC Mart.[pr_Backfill_MartListings] 20140403
EXEC Mart.[pr_Backfill_MartListings] 20140404
EXEC Mart.[pr_Backfill_MartListings] 20140405
EXEC Mart.[pr_Backfill_MartListings] 20140406
EXEC Mart.[pr_Backfill_MartListings] 20140407
EXEC Mart.[pr_Backfill_MartListings] 20140408
EXEC Mart.[pr_Backfill_MartListings] 20140409
EXEC Mart.[pr_Backfill_MartListings] 20140410
EXEC Mart.[pr_Backfill_MartListings] 20140411
EXEC Mart.[pr_Backfill_MartListings] 20140412
EXEC Mart.[pr_Backfill_MartListings] 20140413
EXEC Mart.[pr_Backfill_MartListings] 20140414
EXEC Mart.[pr_Backfill_MartListings] 20140415
EXEC Mart.[pr_Backfill_MartListings] 20140416
EXEC Mart.[pr_Backfill_MartListings] 20140417
EXEC Mart.[pr_Backfill_MartListings] 20140418
EXEC Mart.[pr_Backfill_MartListings] 20140419
EXEC Mart.[pr_Backfill_MartListings] 20140420
EXEC Mart.[pr_Backfill_MartListings] 20140421
EXEC Mart.[pr_Backfill_MartListings] 20140422
EXEC Mart.[pr_Backfill_MartListings] 20140423
EXEC Mart.[pr_Backfill_MartListings] 20140424
EXEC Mart.[pr_Backfill_MartListings] 20140425
EXEC Mart.[pr_Backfill_MartListings] 20140426
EXEC Mart.[pr_Backfill_MartListings] 20140427
EXEC Mart.[pr_Backfill_MartListings] 20140428
EXEC Mart.[pr_Backfill_MartListings] 20140429
EXEC Mart.[pr_Backfill_MartListings] 20140430
EXEC Mart.[pr_Backfill_MartListings] 20140501
EXEC Mart.[pr_Backfill_MartListings] 20140502
EXEC Mart.[pr_Backfill_MartListings] 20140503
EXEC Mart.[pr_Backfill_MartListings] 20140504
EXEC Mart.[pr_Backfill_MartListings] 20140505
EXEC Mart.[pr_Backfill_MartListings] 20140506
EXEC Mart.[pr_Backfill_MartListings] 20140507
EXEC Mart.[pr_Backfill_MartListings] 20140508
EXEC Mart.[pr_Backfill_MartListings] 20140509
EXEC Mart.[pr_Backfill_MartListings] 20140510
EXEC Mart.[pr_Backfill_MartListings] 20140511
EXEC Mart.[pr_Backfill_MartListings] 20140512
EXEC Mart.[pr_Backfill_MartListings] 20140513
EXEC Mart.[pr_Backfill_MartListings] 20140514
EXEC Mart.[pr_Backfill_MartListings] 20140515
EXEC Mart.[pr_Backfill_MartListings] 20140516
EXEC Mart.[pr_Backfill_MartListings] 20140517
EXEC Mart.[pr_Backfill_MartListings] 20140518
EXEC Mart.[pr_Backfill_MartListings] 20140519
EXEC Mart.[pr_Backfill_MartListings] 20140520
EXEC Mart.[pr_Backfill_MartListings] 20140521
EXEC Mart.[pr_Backfill_MartListings] 20140522
EXEC Mart.[pr_Backfill_MartListings] 20140523
EXEC Mart.[pr_Backfill_MartListings] 20140524
EXEC Mart.[pr_Backfill_MartListings] 20140525
EXEC Mart.[pr_Backfill_MartListings] 20140526
EXEC Mart.[pr_Backfill_MartListings] 20140527
EXEC Mart.[pr_Backfill_MartListings] 20140528
EXEC Mart.[pr_Backfill_MartListings] 20140529
EXEC Mart.[pr_Backfill_MartListings] 20140530
EXEC Mart.[pr_Backfill_MartListings] 20140531
EXEC Mart.[pr_Backfill_MartListings] 20140601
EXEC Mart.[pr_Backfill_MartListings] 20140602
EXEC Mart.[pr_Backfill_MartListings] 20140603
EXEC Mart.[pr_Backfill_MartListings] 20140604
EXEC Mart.[pr_Backfill_MartListings] 20140605
EXEC Mart.[pr_Backfill_MartListings] 20140606
EXEC Mart.[pr_Backfill_MartListings] 20140607
EXEC Mart.[pr_Backfill_MartListings] 20140608
EXEC Mart.[pr_Backfill_MartListings] 20140609
EXEC Mart.[pr_Backfill_MartListings] 20140610
EXEC Mart.[pr_Backfill_MartListings] 20140611
EXEC Mart.[pr_Backfill_MartListings] 20140612
EXEC Mart.[pr_Backfill_MartListings] 20140613
EXEC Mart.[pr_Backfill_MartListings] 20140614
EXEC Mart.[pr_Backfill_MartListings] 20140615
EXEC Mart.[pr_Backfill_MartListings] 20140616
EXEC Mart.[pr_Backfill_MartListings] 20140617
EXEC Mart.[pr_Backfill_MartListings] 20140618
EXEC Mart.[pr_Backfill_MartListings] 20140619
EXEC Mart.[pr_Backfill_MartListings] 20140620
EXEC Mart.[pr_Backfill_MartListings] 20140621
EXEC Mart.[pr_Backfill_MartListings] 20140622
EXEC Mart.[pr_Backfill_MartListings] 20140623
EXEC Mart.[pr_Backfill_MartListings] 20140624
EXEC Mart.[pr_Backfill_MartListings] 20140625
EXEC Mart.[pr_Backfill_MartListings] 20140626
EXEC Mart.[pr_Backfill_MartListings] 20140627
EXEC Mart.[pr_Backfill_MartListings] 20140628
EXEC Mart.[pr_Backfill_MartListings] 20140629
EXEC Mart.[pr_Backfill_MartListings] 20140630
EXEC Mart.[pr_Backfill_MartListings] 20140701
EXEC Mart.[pr_Backfill_MartListings] 20140702
EXEC Mart.[pr_Backfill_MartListings] 20140703
EXEC Mart.[pr_Backfill_MartListings] 20140704
EXEC Mart.[pr_Backfill_MartListings] 20140705
EXEC Mart.[pr_Backfill_MartListings] 20140706
EXEC Mart.[pr_Backfill_MartListings] 20140707
EXEC Mart.[pr_Backfill_MartListings] 20140708
EXEC Mart.[pr_Backfill_MartListings] 20140709
EXEC Mart.[pr_Backfill_MartListings] 20140710
EXEC Mart.[pr_Backfill_MartListings] 20140711
EXEC Mart.[pr_Backfill_MartListings] 20140712
EXEC Mart.[pr_Backfill_MartListings] 20140713
EXEC Mart.[pr_Backfill_MartListings] 20140714
EXEC Mart.[pr_Backfill_MartListings] 20140715
EXEC Mart.[pr_Backfill_MartListings] 20140716
EXEC Mart.[pr_Backfill_MartListings] 20140717
EXEC Mart.[pr_Backfill_MartListings] 20140718
EXEC Mart.[pr_Backfill_MartListings] 20140719
EXEC Mart.[pr_Backfill_MartListings] 20140720
EXEC Mart.[pr_Backfill_MartListings] 20140721
EXEC Mart.[pr_Backfill_MartListings] 20140722
EXEC Mart.[pr_Backfill_MartListings] 20140723
EXEC Mart.[pr_Backfill_MartListings] 20140724
EXEC Mart.[pr_Backfill_MartListings] 20140725
EXEC Mart.[pr_Backfill_MartListings] 20140726
EXEC Mart.[pr_Backfill_MartListings] 20140727
EXEC Mart.[pr_Backfill_MartListings] 20140728
EXEC Mart.[pr_Backfill_MartListings] 20140729
EXEC Mart.[pr_Backfill_MartListings] 20140730
EXEC Mart.[pr_Backfill_MartListings] 20140731
EXEC Mart.[pr_Backfill_MartListings] 20140801
EXEC Mart.[pr_Backfill_MartListings] 20140802
EXEC Mart.[pr_Backfill_MartListings] 20140803
EXEC Mart.[pr_Backfill_MartListings] 20140804
EXEC Mart.[pr_Backfill_MartListings] 20140805
EXEC Mart.[pr_Backfill_MartListings] 20140806
EXEC Mart.[pr_Backfill_MartListings] 20140807
EXEC Mart.[pr_Backfill_MartListings] 20140808
EXEC Mart.[pr_Backfill_MartListings] 20140809
EXEC Mart.[pr_Backfill_MartListings] 20140810
EXEC Mart.[pr_Backfill_MartListings] 20140811
EXEC Mart.[pr_Backfill_MartListings] 20140812
EXEC Mart.[pr_Backfill_MartListings] 20140813
EXEC Mart.[pr_Backfill_MartListings] 20140814
EXEC Mart.[pr_Backfill_MartListings] 20140815
EXEC Mart.[pr_Backfill_MartListings] 20140816
EXEC Mart.[pr_Backfill_MartListings] 20140817
EXEC Mart.[pr_Backfill_MartListings] 20140818
EXEC Mart.[pr_Backfill_MartListings] 20140819
EXEC Mart.[pr_Backfill_MartListings] 20140820
EXEC Mart.[pr_Backfill_MartListings] 20140821
EXEC Mart.[pr_Backfill_MartListings] 20140822
EXEC Mart.[pr_Backfill_MartListings] 20140823
EXEC Mart.[pr_Backfill_MartListings] 20140824
EXEC Mart.[pr_Backfill_MartListings] 20140825
EXEC Mart.[pr_Backfill_MartListings] 20140826
EXEC Mart.[pr_Backfill_MartListings] 20140827
EXEC Mart.[pr_Backfill_MartListings] 20140828
EXEC Mart.[pr_Backfill_MartListings] 20140829
EXEC Mart.[pr_Backfill_MartListings] 20140830
EXEC Mart.[pr_Backfill_MartListings] 20140831
EXEC Mart.[pr_Backfill_MartListings] 20140901
EXEC Mart.[pr_Backfill_MartListings] 20140902
EXEC Mart.[pr_Backfill_MartListings] 20140903
EXEC Mart.[pr_Backfill_MartListings] 20140904
EXEC Mart.[pr_Backfill_MartListings] 20140905
EXEC Mart.[pr_Backfill_MartListings] 20140906
EXEC Mart.[pr_Backfill_MartListings] 20140907
EXEC Mart.[pr_Backfill_MartListings] 20140908
EXEC Mart.[pr_Backfill_MartListings] 20140909
EXEC Mart.[pr_Backfill_MartListings] 20140910
EXEC Mart.[pr_Backfill_MartListings] 20140911
EXEC Mart.[pr_Backfill_MartListings] 20140912
EXEC Mart.[pr_Backfill_MartListings] 20140913
EXEC Mart.[pr_Backfill_MartListings] 20140914
EXEC Mart.[pr_Backfill_MartListings] 20140915
EXEC Mart.[pr_Backfill_MartListings] 20140916
EXEC Mart.[pr_Backfill_MartListings] 20140917
EXEC Mart.[pr_Backfill_MartListings] 20140918
EXEC Mart.[pr_Backfill_MartListings] 20140919
EXEC Mart.[pr_Backfill_MartListings] 20140920
EXEC Mart.[pr_Backfill_MartListings] 20140921
EXEC Mart.[pr_Backfill_MartListings] 20140922
EXEC Mart.[pr_Backfill_MartListings] 20140923
EXEC Mart.[pr_Backfill_MartListings] 20140924
EXEC Mart.[pr_Backfill_MartListings] 20140925
EXEC Mart.[pr_Backfill_MartListings] 20140926
EXEC Mart.[pr_Backfill_MartListings] 20140927
EXEC Mart.[pr_Backfill_MartListings] 20140928
EXEC Mart.[pr_Backfill_MartListings] 20140929
EXEC Mart.[pr_Backfill_MartListings] 20140930
EXEC Mart.[pr_Backfill_MartListings] 20141001
EXEC Mart.[pr_Backfill_MartListings] 20141002
EXEC Mart.[pr_Backfill_MartListings] 20141003
EXEC Mart.[pr_Backfill_MartListings] 20141004
EXEC Mart.[pr_Backfill_MartListings] 20141005
EXEC Mart.[pr_Backfill_MartListings] 20141006
EXEC Mart.[pr_Backfill_MartListings] 20141007
EXEC Mart.[pr_Backfill_MartListings] 20141008
EXEC Mart.[pr_Backfill_MartListings] 20141009
EXEC Mart.[pr_Backfill_MartListings] 20141010
EXEC Mart.[pr_Backfill_MartListings] 20141011
EXEC Mart.[pr_Backfill_MartListings] 20141012
EXEC Mart.[pr_Backfill_MartListings] 20141013
EXEC Mart.[pr_Backfill_MartListings] 20141014
EXEC Mart.[pr_Backfill_MartListings] 20141015
EXEC Mart.[pr_Backfill_MartListings] 20141016
EXEC Mart.[pr_Backfill_MartListings] 20141017
EXEC Mart.[pr_Backfill_MartListings] 20141018
EXEC Mart.[pr_Backfill_MartListings] 20141019
EXEC Mart.[pr_Backfill_MartListings] 20141020
EXEC Mart.[pr_Backfill_MartListings] 20141021
EXEC Mart.[pr_Backfill_MartListings] 20141022
EXEC Mart.[pr_Backfill_MartListings] 20141023
EXEC Mart.[pr_Backfill_MartListings] 20141024
EXEC Mart.[pr_Backfill_MartListings] 20141025
EXEC Mart.[pr_Backfill_MartListings] 20141026
EXEC Mart.[pr_Backfill_MartListings] 20141027
EXEC Mart.[pr_Backfill_MartListings] 20141028
EXEC Mart.[pr_Backfill_MartListings] 20141029
EXEC Mart.[pr_Backfill_MartListings] 20141030
EXEC Mart.[pr_Backfill_MartListings] 20141031
EXEC Mart.[pr_Backfill_MartListings] 20141101
EXEC Mart.[pr_Backfill_MartListings] 20141102
EXEC Mart.[pr_Backfill_MartListings] 20141103
EXEC Mart.[pr_Backfill_MartListings] 20141104
EXEC Mart.[pr_Backfill_MartListings] 20141105
EXEC Mart.[pr_Backfill_MartListings] 20141106
EXEC Mart.[pr_Backfill_MartListings] 20141107
EXEC Mart.[pr_Backfill_MartListings] 20141108
EXEC Mart.[pr_Backfill_MartListings] 20141109
EXEC Mart.[pr_Backfill_MartListings] 20141110
EXEC Mart.[pr_Backfill_MartListings] 20141111
EXEC Mart.[pr_Backfill_MartListings] 20141112
EXEC Mart.[pr_Backfill_MartListings] 20141113
EXEC Mart.[pr_Backfill_MartListings] 20141114
EXEC Mart.[pr_Backfill_MartListings] 20141115
EXEC Mart.[pr_Backfill_MartListings] 20141116
EXEC Mart.[pr_Backfill_MartListings] 20141117
EXEC Mart.[pr_Backfill_MartListings] 20141118
EXEC Mart.[pr_Backfill_MartListings] 20141119
EXEC Mart.[pr_Backfill_MartListings] 20141120
EXEC Mart.[pr_Backfill_MartListings] 20141121
EXEC Mart.[pr_Backfill_MartListings] 20141122
EXEC Mart.[pr_Backfill_MartListings] 20141123
EXEC Mart.[pr_Backfill_MartListings] 20141124
EXEC Mart.[pr_Backfill_MartListings] 20141125
EXEC Mart.[pr_Backfill_MartListings] 20141126
EXEC Mart.[pr_Backfill_MartListings] 20141127
EXEC Mart.[pr_Backfill_MartListings] 20141128
EXEC Mart.[pr_Backfill_MartListings] 20141129
EXEC Mart.[pr_Backfill_MartListings] 20141130
EXEC Mart.[pr_Backfill_MartListings] 20141201
EXEC Mart.[pr_Backfill_MartListings] 20141202
EXEC Mart.[pr_Backfill_MartListings] 20141203
EXEC Mart.[pr_Backfill_MartListings] 20141204
EXEC Mart.[pr_Backfill_MartListings] 20141205
EXEC Mart.[pr_Backfill_MartListings] 20141206
EXEC Mart.[pr_Backfill_MartListings] 20141207
EXEC Mart.[pr_Backfill_MartListings] 20141208
EXEC Mart.[pr_Backfill_MartListings] 20141209
EXEC Mart.[pr_Backfill_MartListings] 20141210
EXEC Mart.[pr_Backfill_MartListings] 20141211
EXEC Mart.[pr_Backfill_MartListings] 20141212
EXEC Mart.[pr_Backfill_MartListings] 20141213
EXEC Mart.[pr_Backfill_MartListings] 20141214
EXEC Mart.[pr_Backfill_MartListings] 20141215
EXEC Mart.[pr_Backfill_MartListings] 20141216
EXEC Mart.[pr_Backfill_MartListings] 20141217
EXEC Mart.[pr_Backfill_MartListings] 20141218
EXEC Mart.[pr_Backfill_MartListings] 20141219
EXEC Mart.[pr_Backfill_MartListings] 20141220
EXEC Mart.[pr_Backfill_MartListings] 20141221
EXEC Mart.[pr_Backfill_MartListings] 20141222
EXEC Mart.[pr_Backfill_MartListings] 20141223
EXEC Mart.[pr_Backfill_MartListings] 20141224
EXEC Mart.[pr_Backfill_MartListings] 20141225
EXEC Mart.[pr_Backfill_MartListings] 20141226
EXEC Mart.[pr_Backfill_MartListings] 20141227
EXEC Mart.[pr_Backfill_MartListings] 20141228
EXEC Mart.[pr_Backfill_MartListings] 20141229
EXEC Mart.[pr_Backfill_MartListings] 20141230
EXEC Mart.[pr_Backfill_MartListings] 20141231
EXEC Mart.[pr_Backfill_MartListings] 20150101
EXEC Mart.[pr_Backfill_MartListings] 20150102
EXEC Mart.[pr_Backfill_MartListings] 20150103
EXEC Mart.[pr_Backfill_MartListings] 20150104
EXEC Mart.[pr_Backfill_MartListings] 20150105
EXEC Mart.[pr_Backfill_MartListings] 20150106
EXEC Mart.[pr_Backfill_MartListings] 20150107
EXEC Mart.[pr_Backfill_MartListings] 20150108
EXEC Mart.[pr_Backfill_MartListings] 20150109
EXEC Mart.[pr_Backfill_MartListings] 20150110
EXEC Mart.[pr_Backfill_MartListings] 20150111
EXEC Mart.[pr_Backfill_MartListings] 20150112
EXEC Mart.[pr_Backfill_MartListings] 20150113
EXEC Mart.[pr_Backfill_MartListings] 20150114
EXEC Mart.[pr_Backfill_MartListings] 20150115
EXEC Mart.[pr_Backfill_MartListings] 20150116
EXEC Mart.[pr_Backfill_MartListings] 20150117
EXEC Mart.[pr_Backfill_MartListings] 20150118
EXEC Mart.[pr_Backfill_MartListings] 20150119
EXEC Mart.[pr_Backfill_MartListings] 20150120
EXEC Mart.[pr_Backfill_MartListings] 20150121
EXEC Mart.[pr_Backfill_MartListings] 20150122
EXEC Mart.[pr_Backfill_MartListings] 20150123
EXEC Mart.[pr_Backfill_MartListings] 20150124
EXEC Mart.[pr_Backfill_MartListings] 20150125
EXEC Mart.[pr_Backfill_MartListings] 20150126
EXEC Mart.[pr_Backfill_MartListings] 20150127
EXEC Mart.[pr_Backfill_MartListings] 20150128
EXEC Mart.[pr_Backfill_MartListings] 20150129
EXEC Mart.[pr_Backfill_MartListings] 20150130
EXEC Mart.[pr_Backfill_MartListings] 20150131
EXEC Mart.[pr_Backfill_MartListings] 20150201
EXEC Mart.[pr_Backfill_MartListings] 20150202
EXEC Mart.[pr_Backfill_MartListings] 20150203
EXEC Mart.[pr_Backfill_MartListings] 20150204
EXEC Mart.[pr_Backfill_MartListings] 20150205
EXEC Mart.[pr_Backfill_MartListings] 20150206
EXEC Mart.[pr_Backfill_MartListings] 20150207
EXEC Mart.[pr_Backfill_MartListings] 20150208
EXEC Mart.[pr_Backfill_MartListings] 20150209
EXEC Mart.[pr_Backfill_MartListings] 20150210
EXEC Mart.[pr_Backfill_MartListings] 20150211
EXEC Mart.[pr_Backfill_MartListings] 20150212
EXEC Mart.[pr_Backfill_MartListings] 20150213
EXEC Mart.[pr_Backfill_MartListings] 20150214
EXEC Mart.[pr_Backfill_MartListings] 20150215
EXEC Mart.[pr_Backfill_MartListings] 20150216
EXEC Mart.[pr_Backfill_MartListings] 20150217
EXEC Mart.[pr_Backfill_MartListings] 20150218
EXEC Mart.[pr_Backfill_MartListings] 20150219
EXEC Mart.[pr_Backfill_MartListings] 20150220
EXEC Mart.[pr_Backfill_MartListings] 20150221
EXEC Mart.[pr_Backfill_MartListings] 20150222
EXEC Mart.[pr_Backfill_MartListings] 20150223
EXEC Mart.[pr_Backfill_MartListings] 20150224
EXEC Mart.[pr_Backfill_MartListings] 20150225
EXEC Mart.[pr_Backfill_MartListings] 20150226
EXEC Mart.[pr_Backfill_MartListings] 20150227
EXEC Mart.[pr_Backfill_MartListings] 20150228
EXEC Mart.[pr_Backfill_MartListings] 20150301
EXEC Mart.[pr_Backfill_MartListings] 20150302
EXEC Mart.[pr_Backfill_MartListings] 20150303
EXEC Mart.[pr_Backfill_MartListings] 20150304
EXEC Mart.[pr_Backfill_MartListings] 20150305
EXEC Mart.[pr_Backfill_MartListings] 20150306
EXEC Mart.[pr_Backfill_MartListings] 20150307
EXEC Mart.[pr_Backfill_MartListings] 20150308
EXEC Mart.[pr_Backfill_MartListings] 20150309
EXEC Mart.[pr_Backfill_MartListings] 20150310
EXEC Mart.[pr_Backfill_MartListings] 20150311
EXEC Mart.[pr_Backfill_MartListings] 20150312
EXEC Mart.[pr_Backfill_MartListings] 20150313
EXEC Mart.[pr_Backfill_MartListings] 20150314
EXEC Mart.[pr_Backfill_MartListings] 20150315
EXEC Mart.[pr_Backfill_MartListings] 20150316
EXEC Mart.[pr_Backfill_MartListings] 20150317
EXEC Mart.[pr_Backfill_MartListings] 20150318
EXEC Mart.[pr_Backfill_MartListings] 20150319
EXEC Mart.[pr_Backfill_MartListings] 20150320
EXEC Mart.[pr_Backfill_MartListings] 20150321
EXEC Mart.[pr_Backfill_MartListings] 20150322
EXEC Mart.[pr_Backfill_MartListings] 20150323
EXEC Mart.[pr_Backfill_MartListings] 20150324
EXEC Mart.[pr_Backfill_MartListings] 20150325
EXEC Mart.[pr_Backfill_MartListings] 20150326
EXEC Mart.[pr_Backfill_MartListings] 20150327
EXEC Mart.[pr_Backfill_MartListings] 20150328
EXEC Mart.[pr_Backfill_MartListings] 20150329
EXEC Mart.[pr_Backfill_MartListings] 20150330
EXEC Mart.[pr_Backfill_MartListings] 20150331
EXEC Mart.[pr_Backfill_MartListings] 20150401
EXEC Mart.[pr_Backfill_MartListings] 20150402
EXEC Mart.[pr_Backfill_MartListings] 20150403
EXEC Mart.[pr_Backfill_MartListings] 20150404
EXEC Mart.[pr_Backfill_MartListings] 20150405
EXEC Mart.[pr_Backfill_MartListings] 20150406
EXEC Mart.[pr_Backfill_MartListings] 20150407
EXEC Mart.[pr_Backfill_MartListings] 20150408
EXEC Mart.[pr_Backfill_MartListings] 20150409
EXEC Mart.[pr_Backfill_MartListings] 20150410
EXEC Mart.[pr_Backfill_MartListings] 20150411
EXEC Mart.[pr_Backfill_MartListings] 20150412
EXEC Mart.[pr_Backfill_MartListings] 20150413
EXEC Mart.[pr_Backfill_MartListings] 20150414
EXEC Mart.[pr_Backfill_MartListings] 20150415
EXEC Mart.[pr_Backfill_MartListings] 20150416
EXEC Mart.[pr_Backfill_MartListings] 20150417
EXEC Mart.[pr_Backfill_MartListings] 20150418
EXEC Mart.[pr_Backfill_MartListings] 20150419
EXEC Mart.[pr_Backfill_MartListings] 20150420
EXEC Mart.[pr_Backfill_MartListings] 20150421
EXEC Mart.[pr_Backfill_MartListings] 20150422
EXEC Mart.[pr_Backfill_MartListings] 20150423
EXEC Mart.[pr_Backfill_MartListings] 20150424
EXEC Mart.[pr_Backfill_MartListings] 20150425
EXEC Mart.[pr_Backfill_MartListings] 20150426
EXEC Mart.[pr_Backfill_MartListings] 20150427
EXEC Mart.[pr_Backfill_MartListings] 20150428
EXEC Mart.[pr_Backfill_MartListings] 20150429
EXEC Mart.[pr_Backfill_MartListings] 20150430
*/









GO
/****** Object:  StoredProcedure [Mart].[pr_DiakritInvoice]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Mart].[pr_DiakritInvoice] AS
/*******************************************************************************************
* Name:	mart.pr_DiakritInvoice
* ------------------------------------------------------------------------------------------
* Desc:	This inserts Diakrit Invoice Data into a mart for match to salesforce data for auditing report
* ------------------------------------------------------------------------------------------
* Test:	EXEC mart.pr_DiakritInvoice
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist: 01	02/10/2017		Jonathon Williams		Case 01385097 - Diakrit Invoice Tie Up
********************************************************************************************/
BEGIN

DECLARE @YMDID INT = CONVERT(VARCHAR(10), GETDATE(), 112)

--DELETE FROM [Mart].[DiakritInvoices]
--WHERE YMDID = @YMDID


INSERT INTO [Mart].[DiakritInvoices]
	([YMDID]
	,[OrderType]
	,[OrderID]
	,[IntegrationNumber]
	,[OrderDate]
	,[DeliveryDate]
	,[ApartmentNumber]
	,[OrderName]
	,[Ordered]
	,[AdditionalFlCharged]
	,[Charged]
	,[PricePerUnitUSD]
	,[AmountUSD]
	,[CorrectionRounds]
	,[TemplateChanges])
SELECT @YMDID YMDID
	,'2D' OrderType	
	,[OrderID]
	,[IntergrationNumber]
	,[OrderDate]
	,[DeliveryDate]
	,[ApartmentNumber]
	,[OrderName]
	,[2DOrdered]
	,[AdditionalFlCharged]
	,[2DCharged]
	,[PricePerUnitUSD]
	,[AmountUSD]
	,null
	,null 
FROM [Staging].[Diakrit_2D]


INSERT INTO [Mart].[DiakritInvoices]
	([YMDID]
	,[OrderType]
	,[OrderID]
	,[IntegrationNumber]
	,[OrderDate]
	,[DeliveryDate]
	,[ApartmentNumber]
	,[OrderName]
	,[Ordered]
	,[AdditionalFlCharged]
	,[Charged]
	,[PricePerUnitUSD]
	,[AmountUSD]
	,[CorrectionRounds]
	,[TemplateChanges])
SELECT @YMDID YMDID
	,'2D3D' OrderType	
	,[OrderID]
	,[IntergrationNumber]
	,[OrderDate]
	,[DeliveryDate]
	,[ApartmentNumber]
	,[OrderName]
	,[2d3DOrdered]
	,[AdditionalFlCharged]
	,[2d3DCharged]
	,[PricePerUnitUSD]
	,[AmountUSD]
	,null
	,null 
FROM [Staging].[Diakrit_2D3D]


INSERT INTO [Mart].[DiakritInvoices]
	([YMDID]
	,[OrderType]
	,[OrderID]
	,[IntegrationNumber]
	,[OrderDate]
	,[DeliveryDate]
	,[ApartmentNumber]
	,[OrderName]
	,[Ordered]
	,[AdditionalFlCharged]
	,[Charged]
	,[PricePerUnitUSD]
	,[AmountUSD]
	,[CorrectionRounds]
	,[TemplateChanges])
SELECT @YMDID YMDID
	,'3DS' OrderType	
	,[OrderID]
	,[IntergrationNumber]
	,[OrderDate]
	,[DeliveryDate]
	,[ApartmentNumber]
	,[OrderName]
	,[3DOrdered]
	,[AdditionalFlCharged]
	,[3DCharged]
	,[PricePerUnitUSD]
	,[AmountUSD]
	,null
	,null 
FROM [Staging].[Diakrit_3DS]


INSERT INTO [Mart].[DiakritInvoices]
	([YMDID]
	,[OrderType]
	,[OrderID]
	,[IntegrationNumber]
	,[OrderDate]
	,[DeliveryDate]
	,[ApartmentNumber]
	,[OrderName]
	,[Ordered]
	,[AdditionalFlCharged]
	,[Charged]
	,[PricePerUnitUSD]
	,[AmountUSD]
	,[CorrectionRounds]
	,[TemplateChanges])
SELECT @YMDID YMDID
	,'2DCorrections' OrderType	
	,[OrderID]
	,[IntergrationNumber]
	,[OrderDate]
	,[DeliveryDate]
	,[ApartmentNumber]
	,[OrderName]
	,NULL
	,NULL
	,NULL
	,[PricePerUnitUSD]
	,[AmountUSD]
	,2DCorrectionRounds
	,null 
FROM [Staging].[Diakrit_2DCorrections]

INSERT INTO [Mart].[DiakritInvoices]
	([YMDID]
	,[OrderType]
	,[OrderID]
	,[IntegrationNumber]
	,[OrderDate]
	,[DeliveryDate]
	,[ApartmentNumber]
	,[OrderName]
	,[Ordered]
	,[AdditionalFlCharged]
	,[Charged]
	,[PricePerUnitUSD]
	,[AmountUSD]
	,[CorrectionRounds]
	,[TemplateChanges])
SELECT @YMDID YMDID
	,'3DCorrections' OrderType	
	,[OrderID]
	,[IntergrationNumber]
	,[OrderDate]
	,[DeliveryDate]
	,[ApartmentNumber]
	,[OrderName]
	,NULL
	,NULL
	,NULL
	,[PricePerUnitUSD]
	,[AmountUSD]
	,3DCorrectionRounds
	,null 
FROM [Staging].[Diakrit_3DCorrections]


INSERT INTO [Mart].[DiakritInvoices]
	([YMDID]
	,[OrderType]
	,[OrderID]
	,[IntegrationNumber]
	,[OrderDate]
	,[DeliveryDate]
	,[ApartmentNumber]
	,[OrderName]
	,[Ordered]
	,[AdditionalFlCharged]
	,[Charged]
	,[PricePerUnitUSD]
	,[AmountUSD]
	,[CorrectionRounds]
	,[TemplateChanges])
SELECT @YMDID YMDID
	,'TemplateChanges' OrderType	
	,[OrderID]
	,[IntergrationNumber]
	,[OrderDate]
	,[DeliveryDate]
	,[ApartmentNumber]
	,[OrderName]
	,NULL
	,NULL
	,NULL
	,[PricePerUnitUSD]
	,[AmountUSD]
	,null
	,TemplateChanges
FROM [Staging].[Diakrit_TemplateChange]

END

GO
/****** Object:  StoredProcedure [Mart].[pr_Listings]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Mart].[pr_Listings] ( @YMDID AS INT = NULL )
/*******************************************************************************************
* Name:	Mart.pr_Listings
* ------------------------------------------------------------------------------------------
* Desc:	This marts the Tealium tags daily
* ------------------------------------------------------------------------------------------
* Test:	EXEC Mart.pr_Listings 20160522
* ------------------------------------------------------------------------------------------
* Note on Profiles:
* ProfileKey	SubProfileKey	ProfileName
* 84			1				APTGTealium
* 84			2				ApartmentGuideMDot Tealium
* 86			1				RentTealium
* 86			2				RentMDot Tealium
* 72							AG Sites
* ------------------------------------------------------------------------------------------
* Hist:	01	04/27/2015	Marting Team	Initial Version
* Hist:	02	05/15/2015	Colleen Rocks	Added filter callstatus=1 to phone leads pull
* Hist: 03	05/29/2015	Colleen Rocks	Lead counts weren't matching old marting; updated the 
										staging.events left join to join on dl.listingid=si.listingid
										instead of tl.listingid=si.listingid because it was nulling
										any values for listings not in the staging.tealium table
* Hist: 04	06/01/2015	Don Wert		Filter Craigslist calls out of what is pulled from ApartmentGuide.Fact.AGRentPhoneLeads
* Hist: 05	06/03/2015	Don Wert		Removed ClicksHDPhoto as a column in the final insert based on changed to the clickeventsmap.
* Hist:	06	06/05/2015	Don Wert		Updated queries that pull from clickeventsmap to get only rows where ismarted=1 so we don't process
*										anything that's for the cube only.
* Hist: 07	6/9/2015	Don Wert		The query that updates email leads should look for records >= today - 8, not = today - 8.  Also, roll
*										up the leads by YMDID and listingID so that there is only one record per listing.  The original code
*										resulted in NULL values that caused the total leads numbers to be too low
* Hist: 08  08/11/2015  Richard Chen    Ticket 20325, Correct PDP Pageview section.  use tag pdp_listing_id or listingid
* Hist: 09	08/17/2015	Colleen Rocks	Ticket 20399, corrected lead counts; made updates to leads to pull leads from new RentPath.Mart.EmailLeads
*										and RentPath.Mart.PhoneLeads views as well as accounted for rentals listing leads being counted as AG;
*										added HasCR3, MissedCallsAG and MissedCallsRent
* Hist: 10	08/20/2015	Colleen Rocks	Ticket 20210; add UpsellPayPerLeaseALM
* Hist: 11	10/19/2015	Colleen Rocks	Ticket 21096; no longer need to hardcode ClicksHDFloorPlan or ClicksHDPhoto to 0; verified still unable to distinguish
*										between clicksweburl and clicksmgtcourl
* Hist: 12	10/29/2015	Colleen Rocks	Ticket 21096; update clickevent count portion of code
* Hist	13	03/09/2016	Sarah Mims		Ticket # 22367 Changed the RAISE ERROR for the non matching YMDID from 10 to 16 so it jumps out of
*										the procedure and provides us with an error
* Hist	14	03/21/2016	Bob Langley		Ticket 22510 Changed Sunday catch-up section to use all status values (was only doing Status = 1 in WHERE clause).This was causing overwrites for records that had at least one connected call.
* Hist	15	04/27/2016	Clinton Woody	Ticket 22859 -- mart clicksMgtCoURL pdp and ClicksWevURL pdp. These clickevent are in the dimension.ClickEventsMap table
* Hist	16	05/03/2016	Don Wert		Ticket 22938 - clicksMgtCoURL and clicksMgtCoPeelAd are reversed between the INSERT and the SELECT.  Correct that.
* Hist	17	05/23/2016	Don Wert		Ticket 23122 - change the code that populates Staging.listingArray so that a semi-colon is replaced by a comma, which will be the standard going forward.
* Hist	18	05/24/2016	Don Wert		Ticket 23137 - update the Full Outer Join to staging.phoneleads to use a derived table from phoneleads that creates one record per listingid so as to prevent double-counting data.
* Hist	19	06/21/2016	Bob Langley		Ticket 23334 - Changed to use Mart.Listings_Legacy instead of Mart.Listings.  Sending all new info to _Legacy table for safekeeping for now.
********************************************************************************************/
AS
    BEGIN
        SET NOCOUNT ON;

/*test
DECLARE @YMDID INT
SET @YMDID = 20150506
*/

------------------------------------------
/*Set variables*/ 
------------------------------------------
        IF @YMDID IS NULL
            SET @YMDID = CAST(CONVERT(VARCHAR(8), GETDATE() - 1, 112) AS INT);

------------------------------------------
/*Throughout the procedure, we log when completed 
successfully so if a failure occurs, we know at what point*/ 
------------------------------------------
        INSERT  INTO Staging.MartLog
                ( YMDID ,
                  Step ,
                  EndTime
                )
        VALUES  ( @YMDID , -- YMDID - int
                  'Mart.pr_Listings started'  -- Step - varchar(1000)
                  ,
                  GETDATE()
                );

------------------------------------------
/*Ensure the date in TealiumParsedPivot matches the date 
being processed for Mart.Listings*/ 
------------------------------------------
        IF ( SELECT TOP 1
                    ymdid
             FROM   Staging.TealiumParsedPivot
           ) = @YMDID
            BEGIN 
------------------------------------------
/*Delete for passed-in date, in case this is a rerun*/ 
------------------------------------------
                DELETE  FROM Mart.Listings_Legacy
                WHERE   YMDID = @YMDID;

                INSERT  INTO Staging.MartLog
                        ( YMDID ,
                          Step ,
                          EndTime
                        )
                VALUES  ( @YMDID , -- YMDID - int
                          'Deleted records for the specified YMDID'  -- Step - varchar(1000)
                          ,
                          GETDATE()
                        );

------------------------------------------
/*Drop tables*/ 
------------------------------------------
                IF ( SELECT OBJECT_ID(N'RentPath.Staging.Impressions')
                   ) IS NOT NULL
                    DROP TABLE RentPath.Staging.Impressions;
                IF ( SELECT OBJECT_ID(N'RentPath.Staging.listingArray')
                   ) IS NOT NULL
                    DROP TABLE RentPath.Staging.listingArray;
                IF ( SELECT OBJECT_ID(N'RentPath.Staging.PhoneLeads')
                   ) IS NOT NULL
                    DROP TABLE RentPath.Staging.PhoneLeads;
                IF ( SELECT OBJECT_ID(N'RentPath.Staging.EmailLeads')
                   ) IS NOT NULL
                    DROP TABLE RentPath.Staging.EmailLeads;
                IF ( SELECT OBJECT_ID(N'RentPath.Staging.PageViews')
                   ) IS NOT NULL
                    DROP TABLE RentPath.Staging.PageViews;
                IF ( SELECT OBJECT_ID(N'RentPath.Staging.Events')
                   ) IS NOT NULL
                    DROP TABLE RentPath.Staging.[Events];

                INSERT  INTO Staging.MartLog
                        ( YMDID ,
                          Step ,
                          EndTime
                        )
                VALUES  ( @YMDID , -- YMDID - int
                          'Dropped staging tables'  -- Step - varchar(1000)
                          ,
                          GETDATE()
                        );

------------------------------------------
/*Create & populate table for listing array, which is used to 
calculate impression and visit counts*/ 
------------------------------------------
                CREATE TABLE Staging.listingArray
                    (
                      Listingid INT NULL ,
                      visit VARCHAR(7000) NULL ,
                      profileid INT NULL ,
                      [EVENT] VARCHAR(21) NULL
                    );

                INSERT  INTO Staging.listingArray
                        ( Listingid ,
                          visit ,
                          profileid ,
                          EVENT
                        )
                        SELECT  COALESCE(dl.ListingID, a.Listingid) AS listingid ,
                                a.visit ,
                                a.profileid ,
                                a.[EVENT]
                        FROM    ( SELECT    s.Measure AS Listingid ,
                                            tpp.visit ,
                                            tpp.profileid ,
                                            'SearchPageImpressions' AS [EVENT]
                                  FROM      Staging.TealiumParsedPivot tpp
                                            CROSS APPLY DBAUtility.dbo.fn_Split(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(listing_array,
                                                              ' ', ''), 
															  '<', ''), 
															  '>', ''),
                                                              '&lt;', ''),
                                                              '&gt;', ''),
															  ';', ','),',')
                                            AS s
                                  WHERE     tpp.[page] = 'srp'
                                            AND tpp.subprofileid <> 99
                                ) AS a
                                LEFT JOIN RentPath.Dimension.Listings_Legacy dl ON a.Listingid = dl.PropertyIDRent
                                                              AND a.profileid IN (
                                                              86, 87 )
                        WHERE   a.Listingid NOT LIKE '%[^0-9]%';
                
				CREATE NONCLUSTERED INDEX idx_LA_LID_Profile
                ON Staging.listingArray(Listingid,profileid);

                INSERT  INTO Staging.MartLog
                        ( YMDID ,
                          Step ,
                          EndTime
                        )
                VALUES  ( @YMDID , -- YMDID - int
                          'Created and populated staging.listingArray'  -- Step - varchar(1000)
                          ,
                          GETDATE()
                        );

------------------------------------------
/*Create & populate table for impression and visit counts*/ 
------------------------------------------
                CREATE TABLE Staging.Impressions
                    (
                      listingid INT ,
                      profileid INT ,
                      SRPListingImpr INT ,
                      SRPUniqueVisit INT
                    );

                INSERT  INTO Staging.Impressions
                        ( listingid ,
                          profileid ,
                          SRPListingImpr ,
                          SRPUniqueVisit
                        )
                        SELECT  CAST(a.ListingID AS INT) AS ListingID ,
                                a.profileid AS ProfileID ,
                                COUNT(1) AS SRPListingImpr ,
                                COUNT(DISTINCT visit) AS SRPUniqueVisit
                        FROM    ( SELECT    la.Listingid AS ListingID ,
                                            la.visit ,
                                            la.profileid ,
                                            la.[EVENT]
                                  FROM      Staging.listingArray la
                                ) a
                        GROUP BY a.ListingID ,
                                a.profileid;

                CREATE NONCLUSTERED INDEX idx_Impr_LID_Profile
                ON Staging.Impressions(listingid,profileid)
                INCLUDE(SRPListingImpr);

                INSERT  INTO Staging.MartLog
                        ( YMDID ,
                          Step ,
                          EndTime
                        )
                VALUES  ( @YMDID , -- YMDID - int
                          'Created and populated staging.Impressions'  -- Step - varchar(1000)
                          ,
                          GETDATE()
                        );

--#######################################################################################################################
-- Hist: 09	08/13/2015	Colleen Rocks	Ticket 20399, corrected lead counts; added update for phone leads and accounted for rentals leads
--#######################################################################################################################
			------------------------------------------
			/*Create & populate table for phone lead counts*/ 
			------------------------------------------
                CREATE TABLE Staging.PhoneLeads
                    (
                      listingid INT ,
                      profileid INT ,
                      callstatus INT ,
                      PhoneLeads INT
                    );
					
                INSERT  INTO Staging.PhoneLeads
                        ( listingid ,
                          profileid ,
                          callstatus ,
                          PhoneLeads
                        )
                        SELECT  pl.ListingID ,
                                CASE WHEN pl.Website = 'AG'
                                          AND l.ListingType <> 'Rentals Listing'
                                     THEN 84
                                     WHEN pl.Website = 'AG'
                                          AND l.ListingType IS NULL THEN 84
                                     WHEN pl.Website = 'Rent' THEN 86
                                END AS ProfileID ,
                                pl.CallStatus ,
                                COUNT(1) AS EventCount
                        FROM    RentPath.Mart.PhoneLeads AS pl --added this left join so we could ensure leads for rentals props are not being counted as AG leads
                                LEFT OUTER JOIN RentPath.Dimension.Listings_Legacy AS l ON pl.ListingID = l.ListingID
                        WHERE   pl.YMDID = @YMDID
			                --AND pl.CallStatus = 1 
                                AND pl.CallType <> 'CRAIGSLIST'
                                AND CASE WHEN pl.Website = 'AG'
                                              AND l.ListingType <> 'Rentals Listing'
                                         THEN 84
                                         WHEN pl.Website = 'AG'
                                              AND l.ListingType IS NULL
                                         THEN 84
                                         WHEN pl.Website = 'Rent' THEN 86
                                    END IN ( 84, 86 )
                        GROUP BY pl.ListingID ,
                                CASE WHEN pl.Website = 'AG'
                                          AND l.ListingType <> 'Rentals Listing'
                                     THEN 84
                                     WHEN pl.Website = 'AG'
                                          AND l.ListingType IS NULL THEN 84
                                     WHEN pl.Website = 'Rent' THEN 86
                                END ,
                                pl.CallStatus;
			
                CREATE NONCLUSTERED INDEX idx_Phone_LID_Profile
                ON Staging.PhoneLeads(listingid,profileid)
                INCLUDE(PhoneLeads);

                INSERT  INTO Staging.MartLog
                        ( YMDID ,
                          Step ,
                          EndTime
                        )
                VALUES  ( @YMDID , -- YMDID - int
                          'Created and populated staging.PhoneLeads'  -- Step - varchar(1000)
                          ,
                          GETDATE()
                        );

------------------------------------------
/*Create & populate table for email lead counts*/ 
------------------------------------------
                CREATE TABLE Staging.EmailLeads
                    (
                      listingid INT ,
                      profileid INT ,
                      EmailLeads INT
                    );

                INSERT  INTO Staging.EmailLeads
                        ( listingid ,
                          profileid ,
                          EmailLeads
                        )
                        SELECT  el.ListingID ,
                                CASE WHEN el.Website = 'AG'
                                          AND l.ListingType <> 'Rentals Listing'
                                     THEN 84
                                     WHEN el.Website = 'AG'
                                          AND l.ListingType IS NULL THEN 84
                                     WHEN el.Website = 'Rent' THEN 86
                                END AS ProfileID ,
                                COUNT(1) AS EventCount
                        FROM    RentPath.Mart.EmailLeads AS el --added this left join so we could ensure leads for rentals props are not being counted as AG leads
                                LEFT OUTER JOIN RentPath.Dimension.Listings_Legacy AS l ON el.ListingID = l.ListingID
                        WHERE   el.YMDID = @YMDID
                                AND el.[Status] = 1
                                AND CASE WHEN el.Website = 'AG'
                                              AND l.ListingType <> 'Rentals Listing'
                                         THEN 84
                                         WHEN el.Website = 'AG'
                                              AND l.ListingType IS NULL
                                         THEN 84
                                         WHEN el.Website = 'Rent' THEN 86
                                    END IN ( 84, 86 )
                        GROUP BY el.ListingID ,
                                CASE WHEN el.Website = 'AG'
                                          AND l.ListingType <> 'Rentals Listing'
                                     THEN 84
                                     WHEN el.Website = 'AG'
                                          AND l.ListingType IS NULL THEN 84
                                     WHEN el.Website = 'Rent' THEN 86
                                END;

                CREATE NONCLUSTERED INDEX idx_Email_LID_Profile
                ON Staging.EmailLeads(listingid,profileid)
                INCLUDE(EmailLeads);

                INSERT  INTO Staging.MartLog
                        ( YMDID ,
                          Step ,
                          EndTime
                        )
                VALUES  ( @YMDID , -- YMDID - int
                          'Created and populated staging.EmailLeads'  -- Step - varchar(1000)
                          ,
                          GETDATE()
                        );

------------------------------------------
/*Create & populate table for pageviews*/ 
------------------------------------------
                CREATE TABLE Staging.PageViews
                    (
                      listingid INT ,
                      profileid INT ,
                      WebVisit INT ,
                      MobileVisit INT ,
                      WebPageview INT ,
                      MobilePageView INT
                    );

--#######################################################################################################################
-- Hist: 08  08/11/2015  Richard Chen    Ticket 20325, Correct PDP Pageview section.  use tag pdp_listing_id or listingid
--#######################################################################################################################
                INSERT  INTO Staging.PageViews
                        ( listingid ,
                          profileid ,
                          WebVisit ,
                          MobileVisit ,
                          WebPageview ,
                          MobilePageView
                        )
                        SELECT  CASE WHEN tpp.profileid IN ( 86, 87 )
                                     THEN rdl.ListingID
                                     ELSE CAST(tpp.listingid AS INT)
                                END AS listingid ,
                                CAST(tpp.profileid AS INT) AS profileid ,
                                COUNT(DISTINCT CASE WHEN tpp.subprofileid = 1
                                                    THEN tpp.visit
                                               END) AS WebVisitCount ,
                                COUNT(DISTINCT CASE WHEN tpp.subprofileid = 2
                                                    THEN tpp.visit
                                               END) AS MobileVisitCount ,
                                SUM(CASE WHEN tpp.subprofileid = 1 THEN 1
                                         ELSE 0
                                    END) AS WebPageViewCount ,
                                SUM(CASE WHEN tpp.subprofileid = 2 THEN 1
                                         ELSE 0
                                    END) AS MobilePageViewCount
                        FROM    Staging.TealiumParsedPivot tpp
                                LEFT OUTER JOIN Dimension.Listings_Legacy rdl ON CAST(tpp.listingid AS INT) = rdl.PropertyIDRent
                                                              AND tpp.profileid IN (
                                                              86, 87 )
                        WHERE   tpp.action = 'pageview'
                                AND tpp.[page] = 'pdp'
                                AND tpp.listingid NOT LIKE '%[^0-9]%'
                                AND subprofileid <> 99
                        GROUP BY CASE WHEN tpp.profileid IN ( 86, 87 )
                                      THEN rdl.ListingID
                                      ELSE CAST(tpp.listingid AS INT)
                                 END ,
                                tpp.profileid;

                CREATE NONCLUSTERED INDEX idx_Pageviews_LID_Profile
                ON Staging.PageViews(listingid,profileid)
                INCLUDE(WebVisit
                ,MobileVisit
                ,WebPageview
                ,MobilePageView);

                INSERT  INTO Staging.MartLog
                        ( YMDID ,
                          Step ,
                          EndTime
                        )
                VALUES  ( @YMDID , -- YMDID - int
                          'Created and populated staging.PageViews'  -- Step - varchar(1000)
                          ,
                          GETDATE()
                        );

------------------------------------------
/*Create & populate table that combines all the above collected counts*/ 
------------------------------------------
                CREATE TABLE Staging.Events
                    (
                      listingid INT ,
                      profileid INT ,
                      SRPListingImpr INT ,
                      SRPUniqueVisit INT ,
                      PhoneLeads INT ,
                      MissedCalls INT ,
                      EmailLeads INT ,
                      PDPUniqueVisitWeb INT ,
                      PDPUniqueVisitMobile INT ,
                      PDPPageViewWeb INT ,
                      PDPPageViewMobile INT
                    );

                INSERT  INTO Staging.Events
                        ( listingid ,
                          profileid ,
                          SRPListingImpr ,
                          SRPUniqueVisit ,
                          PhoneLeads ,
                          MissedCalls ,
                          EmailLeads ,
                          PDPUniqueVisitWeb ,
                          PDPUniqueVisitMobile ,
                          PDPPageViewWeb ,
                          PDPPageViewMobile
                        )
                        SELECT  Listingid
                               ,profileid
                               ,SUM(SRPListingImpr) AS SRPListingImpr
                               ,SUM(SRPUniqueVisit) AS SRPUniqueVisit
                               ,SUM(PhoneLeads) AS PhoneLeads
                               ,SUM(MissedCalls) AS MissedCalls
                               ,SUM(EmailLeads) AS EmailLeads
                               ,SUM(PDPUniqueVisitWeb) AS PDPUniqueVisitWeb
                               ,SUM(PDPUniqueVisitMobile) AS PDPUniqueVisitMobile
                               ,SUM(PDPPageViewWeb) AS PDPPageViewWeb
                               ,SUM(PDPPageViewMobile) AS PDPPageViewMobile
                        FROM    (
                                 SELECT COALESCE(si.listingid,pl.listingid,el.listingid,pv.listingid) AS Listingid
                                       ,COALESCE(si.profileid,pl.profileid,el.profileid,pv.profileid) AS profileid
                                       ,ISNULL(si.SRPListingImpr,0) AS SRPListingImpr
                                       ,ISNULL(si.SRPUniqueVisit,0) AS SRPUniqueVisit
                                       ,ISNULL(pl.PhoneLeadsConnected,0) AS PhoneLeads
                                       ,ISNULL(pl.PhoneLeadsMissed,0) AS MissedCalls
                                       ,ISNULL(el.EmailLeads,0) AS EmailLeads
                                       ,ISNULL(pv.WebVisit,0) AS PDPUniqueVisitWeb
                                       ,ISNULL(pv.MobileVisit,0) AS PDPUniqueVisitMobile
                                       ,ISNULL(pv.WebPageview,0) AS PDPPageViewWeb
                                       ,ISNULL(pv.MobilePageView,0) AS PDPPageViewMobile
                                 FROM   Staging.Impressions si 
								 --FULL OUTER JOIN Staging.PhoneLeads pl ON si.listingid = pl.listingid
                                            --                  AND si.profileid = pl.profileid
                                 FULL OUTER JOIN (
                                                  SELECT    ListingID
                                                           ,profileid
                                                           ,SUM(CASE WHEN callstatus = 1 THEN PhoneLeads
                                                                     ELSE 0
                                                                END) AS PhoneLeadsConnected
                                                           ,SUM(CASE WHEN callstatus IN (2,3) THEN PhoneLeads
                                                                     ELSE 0
                                                                END) AS PhoneLeadsMissed
                                                  FROM      Staging.PhoneLeads
                                                  GROUP BY  ListingID
                                                           ,profileid
                                                 ) AS pl
                                            ON si.listingid = pl.listingid
                                               AND si.profileid = pl.profileid
                                 FULL OUTER JOIN Staging.EmailLeads el
                                        ON si.listingid = el.listingid
                                           AND si.profileid = el.profileid
                                 FULL OUTER JOIN Staging.PageViews pv
                                        ON si.listingid = pv.listingid
                                           AND si.profileid = pv.profileid
                                ) AS ev
                        GROUP BY Listingid
                               ,profileid;

                CREATE NONCLUSTERED INDEX idx_Events_LID_Profile
                ON Staging.Events(listingid,profileid);

                INSERT  INTO Staging.MartLog
                        ( YMDID ,
                          Step ,
                          EndTime
                        )
                VALUES  ( @YMDID , -- YMDID - int
                          'Created and populated staging.Events'  -- Step - varchar(1000)
                          ,
                          GETDATE()
                        );

------------------------------------------
/*Declare & set variables in order to create a staging.tealium table 
that aggregates clicks based on whatever the current columns of
diension.clickeventsmap are*/ 
------------------------------------------
                DECLARE @sql AS VARCHAR(MAX);
                DECLARE @pivot_list AS VARCHAR(MAX);
	-- Leave NULL for COALESCE technique
                DECLARE @select_list AS VARCHAR(MAX);
	-- Leave NULL for COALESCE technique
                DECLARE @table_columns AS VARCHAR(MAX);
                DECLARE @table_create AS VARCHAR(MAX);

                SELECT  @pivot_list = COALESCE(@pivot_list + ', ', '') + '['
                        + PIVOT_CODE + ']' ,
                        @select_list = COALESCE(@select_list + ', ', '')
                        + 'ISNULL([' + PIVOT_CODE + '], 0) AS [' + PIVOT_CODE
                        + ']' ,
                        @table_columns = COALESCE(@table_columns + ', ', '')
                        + ( PIVOT_CODE + ' INT' )
                FROM    ( SELECT DISTINCT
                                    [clickevent] AS PIVOT_CODE
                          FROM      Dimension.ClickEventsMap
                          WHERE     [clickevent] IS NOT NULL
                                    AND ismarted = 1
                        ) AS PIVOT_CODES;

                SET @pivot_list = @pivot_list;
                SET @select_list = @select_list;
                SET @table_columns = 'listingid INT, profileid INT, '
                    + @table_columns;
                SET @table_create = 'create table RentPath.Staging.Tealium('
                    + @table_columns + ');';

------------------------------------------
/*Drop table*/ 
------------------------------------------
                IF ( SELECT OBJECT_ID(N'RentPath.Staging.Tealium')
                   ) IS NOT NULL
                    DROP TABLE RentPath.Staging.Tealium;

------------------------------------------
/*Create table based on current columns in Staging.Tealium*/ 
------------------------------------------
                EXEC (@table_create);

------------------------------------------
/*Use dynamic sql to populate a second temp table.  Using dynamic SQL here allows the code to adapt to a changing
list of columns as new tags are added.  When new tags are to be marted the only manual changes that need to be made are
to add the new column(s) to the table and updating the INSERT...SELECT code at the bottom of the procedure.  New tags
that are marted to an existing column will require no change to code.*/ 
------------------------------------------
		--Code used up until 10/28/2015--
      --      SET @sql = 'insert into RentPath.Staging.Tealium (' + REPLACE(@table_columns,' INT','') + ')
						--SELECT cast(listingid as Int), profileid, ' + @select_list + '
						--FROM (
						--	SELECT  CASE WHEN tpp.profileid IN (86,87) THEN
						--					rdl.listingid      
						--					ELSE cast(REPLACE(tpp.listingid,''LV'','''') as int) 
						--					END    as listingid
						--			,tpp.profileid
						--			,clm.[ClickEvent] AS Event
						--			,ISNULL(COUNT(1),0) AS EventCount
						--	FROM Dimension.ClickEventsMap clm
						--	JOIN Staging.TealiumParsedPivot tpp
						--		ON clm.action = tpp.action
						--		AND clm.page_sub = isnull(tpp.page_sub,'''')
						--		AND clm.position = isnull(tpp.position,'''')
						--		AND clm.page = tpp.[page]
						--		and clm.selection = isnull(tpp.selection,'''')
						--		and clm.ismarted = 1
						--		and tpp.listingid NOT LIKE ''%[^0-9]%''
						--	LEFT JOIN Dimension.Listings_Legacy rdl
						--		ON CAST(REPLACE(tpp.listingid,''LV'','''') AS INT)=rdl.propertyIDrent AND tpp.profileid IN (86,87)
						--		AND tpp.listingid NOT LIKE ''%[^0-9]%''
						--	WHERE tpp.subprofileid <> 99
						--	GROUP BY tpp.listingid, rdl.listingid
						--	,tpp.profileid
						--	,clm.[ClickEvent]
						--) p
						--PIVOT (
						--	SUM([EventCount])
						--	FOR Event IN (
						--   		' + @pivot_list + '
						--	)
						--) AS pvt
						--'

                SET @sql = 'INSERT INTO RentPath.Staging.Tealium ('
                    + REPLACE(@table_columns, ' INT', '') + ')
						SELECT CAST(listingid AS INT), profileid, '
                    + @select_list
                    + '
						FROM (
							SELECT  CASE WHEN tpp.profileid IN (86,87) THEN rdl.listingid      
											ELSE tpp.listingid END AS listingid
									,tpp.profileid
									,clm.[ClickEvent] AS Event
									,ISNULL(COUNT(1),0) AS EventCount
							FROM Staging.TealiumParsedPivot AS tpp
							JOIN Dimension.ClickEventsMap AS clm
								ON clm.action = tpp.action
								AND ISNULL(clm.page_sub,'''') = ISNULL(tpp.page_sub,'''')
								AND ISNULL(clm.position,'''') = ISNULL(tpp.position,'''')
								AND clm.page = tpp.[page]
								AND ISNULL(clm.selection,'''') = ISNULL(tpp.selection,'''')
								AND tpp.subprofileid <> 99
								AND tpp.listingid NOT LIKE ''%[^0-9]%''
							LEFT JOIN Dimension.Listings_Legacy AS rdl
								ON tpp.profileid IN (86,87)
								AND tpp.listingid = rdl.PropertyIDRent
								AND tpp.listingid NOT LIKE ''%[^0-9]%''
							WHERE clm.ismarted = 1
							GROUP BY CASE WHEN tpp.profileid IN (86,87) THEN rdl.listingid      
									ELSE tpp.listingid END
								,tpp.profileid
								,clm.[ClickEvent]
						) p
						PIVOT (
							SUM([EventCount])
							FOR Event IN (
						   		' + @pivot_list + '
							)
						) AS pvt
						';
                EXEC (@sql);

                INSERT  INTO Staging.MartLog
                        ( YMDID ,
                          Step ,
                          EndTime
                        )
                VALUES  ( @YMDID -- YMDID - int
                          ,
                          'Created and populated staging.Tealium, starting insert'  -- Step - varchar(1000)
                          ,
                          GETDATE()
                        );

------------------------------------------
/*Insert into Mart.Listings_Legacy*/ 
------------------------------------------
                INSERT  INTO Mart.Listings_Legacy
                        ( YMDID ,
                          YearMonth ,
                          ListingID ,
                          PropertyIDAG ,
                          StatusIDAG ,
                          PropertyIDRent ,
                          StatusIDRent ,
                          ListingType ,
                          IsSEM ,
                          ShowPricing ,
                          LowPrice ,
                          HighPrice ,
                          CallRecordingOptOut ,
                          TotalAmenities ,
                          ActiveAmenities ,
                          ActiveCoupon ,
                          ActiveFloorplans ,
                          ActiveHDFloorplans ,
                          ActiveHDPhotos ,
                          ActivePhotos ,
                          ExternalID ,
                          ListingPricingSource ,
                          Charter ,
                          DIRECTV ,
                          HasCR3 ,
                          CR3AvgOverallRatingAG ,
                          CR3AvgOverallRatingRent ,
                          ShowOfficeHours ,
                          PlacementTierAG ,
                          PlacementTierRent ,
                          ContractLoyaltyPoints ,
                          InternetProductPoints ,
                          LegacyLoyaltyPoints ,
                          MobilePoints ,
                          PrintProductPoints ,
                          Ranking ,
                          RPLRank ,
                          BadgeCollege ,
                          BadgeCorporate ,
                          BadgeIncomeRestricted ,
                          BadgeLuxury ,
                          BadgeMilitary ,
                          BadgePetFriendly ,
                          BadgeSenior ,
                          Upsell3DFloorplan ,
                          UpsellAGSites ,
                          UpsellCarousel ,
                          UpsellCarouselRentals ,
                          UpsellCommunityVideoURLFulfilled ,
                          UpsellCoupon ,
                          UpsellDiamondCity ,
                          UpsellDiamondMax ,
                          UpsellDiamondMetro ,
                          UpsellEmercial ,
                          UpsellFeaturedCommunityAG ,
                          UpsellFeaturedCommunityRent ,
                          UpsellFeaturedListingRentals ,
                          UpsellHDActiveFloorplansFulfilled ,
                          UpsellHDActivePhotosFulfilled ,
                          UpsellHDPanoTour ,
                          UpsellHDPanoTourFulfilled ,
                          UpsellHDPhoto ,
                          UpsellHDVideo ,
                          UpsellHDVideoFulfilled ,
                          UpsellHighlighted ,
                          UpsellLinked3DFloorplan ,
                          UpsellLinked3DFloorplanFulfilled ,
                          UpsellLinkedFloorplan ,
                          UpsellLinkedFloorplanFulfilled ,
                          UpsellLinkedRoomPlanner ,
                          UpsellLinkedRoomPlannerFulfilled ,
                          UpsellListingRent ,
                          UpsellListingRentals ,
                          UpsellMediaCenter ,
                          UpsellMgmtPeelAd ,
                          UpsellMobileDeal ,
                          UpsellMobileDealFulfilled ,
                          UpsellMobileDiamond ,
                          UpsellMobileSpotlight ,
                          UpsellNoVacancyRent ,
                          UpsellPayPerLead ,
                          UpsellPayPerLease ,
                          UpsellPhotoUpgrade ,
                          UpsellPrecisionTargetedEmailRent ,
                          UpsellPremierListingRentals ,
                          UpsellPremiumUpgrade ,
                          UpsellRewardCardRent ,
                          UpsellSponsoredApartment ,
                          UpsellSpotlightAG ,
                          UpsellSpotlightRent ,
                          UpsellSpotlightRentals ,
                          UpsellStandardListingRentals ,
                          UpsellStandardPlusListingRentals ,
                          UpsellSubscriptionModelRent ,
                          UpsellVideoSpokesmodel ,
                          UpsellVIPPlacementRent ,
                          UpsellVirtualBrochure ,
                          UpsellVirtualTourFulfilled ,
                          UpsellPayPerLeaseALM ,
                          ClicksCommunityVideoAG ,
                          ClicksDiamondMaxPhotoAG ,
                          ClicksDiamondMaxCheckAvailAG ,
                          ClicksFloorplanAG ,
                          ClicksFloorplanRent ,
                          ClicksHDFloorplanAG ,
                          ClicksHDFloorplanRent ,
                          ClicksPhotosAG ,
                          ClicksPhotosRent ,
                          ClicksHDPhotoAG ,
                          ClicksHDPhotoRent ,
                          ClicksHDVideoAG ,
                          ClicksHDVideoRent ,
                          ClicksHDPanoTourAG ,
                          ClicksHDPanoTourRent ,
                          ClicksMapAG ,
                          ClicksMapRent ,
                          ClicksWebURLAG ,
                          ClicksWebURLRent ,
                          ClicksMgtCoPeelAdAG ,
                          ClicksMgtCoPeelAdRent ,
                          ClicksMgtCoURLAG ,
                          ClicksMgtCoURLRent ,
                          ClicksReserveNowAG ,
                          ClicksReserveNowRent ,
                          ClicksFeaturedCommunityAG ,
                          ClicksFeaturedCommunityRent ,
                          ClicksFeatCommCheckAvailAG ,
                          ClicksFeatCommCheckAvailRent ,
                          ClicksSRPListingCheckAvailAG ,
                          ClicksSRPListingCheckAvailRent ,
                          ClicksCR3AG ,
                          ClicksCR3Rent ,
                          ClicksSpotlightRentSpecialsAG ,
                          ClicksSpotlightRentSpecialsRent ,
                          ClicksSpotlightReserveNowAG ,
                          SRPListingImprAG ,
                          SRPListingImprRent ,
                          SRPUniqueVisitAG ,
                          SRPUniqueVisitRent ,
                          UniqueVisitsAG ,
                          UniqueVisitsRent ,
                          UniqueVisitsMobileAG ,
                          UniqueVisitsMobileRent ,
                          UniqueVisitsAGSites ,
                          ViewsListingPageWebAG ,
                          ViewsListingPageWebRent ,
                          ViewsListingPageMobileAG ,
                          ViewsListingPageMobileRent ,
                          ViewsListingPageAGSites ,
                          PhoneLeadsAG ,
                          PhoneLeadsRent ,
                          MissedCallsAG ,
                          MissedCallsRent ,
                          EmailLeadsAG ,
                          EmailLeadsRent
                        )
                        SELECT  @YMDID AS YMDID ,
                                CAST(LEFT(@YMDID, 6) AS INT) AS YearMonth ,
                                dl.ListingID ,
                                dl.PropertyIDAG ,
                                dl.StatusIDAG ,
                                dl.PropertyIDRent ,
                                dl.StatusIDRent ,
                                dl.ListingType ,
                                dl.IsSEM ,
                                dl.ShowPricing ,
                                dl.LowPrice ,
                                dl.HighPrice ,
                                dl.CallRecordingOptOut ,
                                dl.TotalAmenities ,
                                dl.ActiveAmenities ,
                                dl.ActiveCoupon ,
                                dl.ActiveFloorplans ,
                                dl.ActiveHDFloorplans ,
                                dl.ActiveHDPhotos ,
                                dl.ActivePhotos ,
                                dl.ExternalID ,
                                dl.ListingPricingSource ,
                                dl.Charter ,
                                dl.DIRECTV ,
                                dl.HasCR3 ,
                                dl.CR3AvgOverallRatingAG ,
                                dl.CR3AvgOverallRatingRent ,
                                dl.ShowOfficeHours ,
                                dl.PlacementTierAG ,
                                dl.PlacementTierRent ,
                                dl.ContractLoyaltyPoints ,
                                dl.InternetProductPoints ,
                                dl.LegacyLoyaltyPoints ,
                                dl.MobilePoints ,
                                dl.PrintProductPoints ,
                                dl.Ranking ,
                                dl.RPLRank ,
                                dl.BadgeCollege ,
                                dl.BadgeCorporate ,
                                dl.BadgeIncomeRestricted ,
                                dl.BadgeLuxury ,
                                dl.BadgeMilitary ,
                                dl.BadgePetFriendly ,
                                dl.BadgeSenior ,
                                dl.Upsell3DFloorplan ,
                                dl.UpsellAGSites ,
                                dl.UpsellCarousel ,
                                dl.UpsellCarouselRentals ,
                                dl.UpsellCommunityVideoURLFulfilled ,
                                dl.UpsellCoupon ,
                                dl.UpsellDiamondCity ,
                                dl.UpsellDiamondMax ,
                                dl.UpsellDiamondMetro ,
                                dl.UpsellEmercial ,
                                dl.UpsellFeaturedCommunityAG ,
                                dl.UpsellFeaturedCommunityRent ,
                                dl.UpsellFeaturedListingRentals ,
                                dl.UpsellHDActiveFloorplansFulfilled ,
                                dl.UpsellHDActivePhotosFulfilled ,
                                dl.UpsellHDPanoTour ,
                                dl.UpsellHDPanoTourFulfilled ,
                                dl.UpsellHDPhoto ,
                                dl.UpsellHDVideo ,
                                dl.UpsellHDVideoFulfilled ,
                                dl.UpsellHighlighted ,
                                dl.UpsellLinked3DFloorplan ,
                                dl.UpsellLinked3DFloorplanFulfilled ,
                                dl.UpsellLinkedFloorplan ,
                                dl.UpsellLinkedFloorplanFulfilled ,
                                dl.UpsellLinkedRoomPlanner ,
                                dl.UpsellLinkedRoomPlannerFulfilled ,
                                dl.UpsellListingRent ,
                                dl.UpsellListingRentals ,
                                ISNULL(dl.UpsellMediaCenter, 0) AS UpsellMediaCenter ,
                                dl.UpsellMgmtPeelAd ,
                                dl.UpsellMobileDeal ,
                                dl.UpsellMobileDealFulfilled ,
                                dl.UpsellMobileDiamond ,
                                dl.UpsellMobileSpotlight ,
                                dl.UpsellNoVacancyRent ,
                                dl.UpsellPayPerLead ,
                                dl.UpsellPayPerLease ,
                                dl.UpsellPhotoUpgrade ,
                                dl.UpsellPrecisionTargetedEmailRent ,
                                dl.UpsellPremierListingRentals ,
                                dl.UpsellPremiumUpgrade ,
                                dl.UpsellRewardCardRent ,
                                dl.UpsellSponsoredApartment ,
                                dl.UpsellSpotlightAG ,
                                dl.UpsellSpotlightRent ,
                                dl.UpsellSpotlightRentals ,
                                dl.UpsellStandardListingRentals ,
                                dl.UpsellStandardPlusListingRentals ,
                                dl.UpsellSubscriptionModelRent ,
                                dl.UpsellVideoSpokesmodel ,
                                dl.UpsellVIPPlacementRent ,
                                dl.UpsellVirtualBrochure ,
                                dl.UpsellVirtualTourFulfilled ,
                                dl.UpsellPayPerLeaseALM ,
                                ISNULL(tl.ClicksCommunityVideoAG, 0) AS ClicksCommunityVideoAG ,
                                ISNULL(tl.ClicksDiamondMaxPhotoAG, 0) AS ClicksDiamondMaxPhotoAG ,
                                ISNULL(tl.ClicksDiamondMaxCheckAvailAG, 0) AS ClicksDiamondMaxCheckAvailAG ,
                                ISNULL(tl.ClicksFloorPlanAG, 0) AS ClicksFloorplanAG ,
                                ISNULL(tl.ClicksFloorPlanRent, 0) AS ClicksFloorplanRent ,
                                ISNULL(tl.ClicksHDFloorplanAG, 0) AS ClicksHDFloorplanAG ,
                                ISNULL(tl.ClicksHDFloorplanRent, 0) AS ClicksHDFloorplanRent ,
                                ISNULL(tl.ClicksPhotosAG, 0) AS ClicksPhotosAG ,
                                ISNULL(tl.ClicksPhotosRent, 0) AS ClicksPhotosRent ,
                                ISNULL(tl.ClicksHDPhotoAG, 0) AS ClicksHDPhotoAG ,
                                ISNULL(tl.ClicksHDPhotoRent, 0) AS ClicksHDPhotoRent ,
                                ISNULL(tl.ClicksHDVideoAG, 0) AS ClicksHDVideoAG ,
                                ISNULL(tl.ClicksHDVideoRent, 0) AS ClicksHDVideoRent ,
                                ISNULL(tl.ClicksHDPanoTourAG, 0) AS ClicksHDPanoTourAG ,
                                ISNULL(tl.ClicksHDPanoTourRent, 0) AS ClicksHDPanoTourRent ,
                                ISNULL(tl.ClicksMapAG, 0) AS ClicksMapAG ,
                                ISNULL(tl.ClicksMapRent, 0) AS ClicksMapRent,
				--Per Tealium team, can't distinguish between listing and mgt co web link clicks at this time 20150427
				-- fixed this mow as they are mapped in the dimension table and firing accurately
                                ISNULL(tl.ClicksWebURLAG, 0) AS ClicksWebURLAG ,
                                ISNULL(tl.ClicksWebURLRent, 0) AS ClicksWebURLRent ,
                                ISNULL(tl.ClicksMgtCoPeelAdAG, 0) AS ClicksMgtCoPeelAdAG ,
                                ISNULL(tl.ClicksMgtCoPeelAdRent, 0) AS ClicksMgtCoPeelAdRent ,
                                ISNULL(tl.ClicksMgtCoURLAG, 0) AS ClicksMgtCoURLAG ,
                                ISNULL(tl.ClicksMgtCoURLRent, 0) AS ClicksMgtCoURLRent ,
                                ISNULL(tl.ClicksReserveNowAG, 0) AS ClicksReserveNowAG ,
                                ISNULL(tl.ClicksReserveNowRent, 0) AS ClicksReserveNowRent ,
                                ISNULL(tl.ClicksFeaturedCommunityAG, 0) AS ClicksFeaturedCommunityAG ,
                                ISNULL(tl.ClicksFeaturedCommunityRent, 0) AS ClicksFeaturedCommunityRent ,
                                ISNULL(tl.ClicksFeatCommCheckAvailAG, 0) AS ClicksFeatCommCheckAvailAG ,
                                ISNULL(tl.ClicksFeatCommCheckAvailRent, 0) AS ClicksFeatCommCheckAvailRent ,
                                ISNULL(tl.ClicksSRPListingCheckAvailAG, 0) AS ClicksSRPListingCheckAvailAG ,
                                ISNULL(tl.ClicksSRPListingCheckAvailRent, 0) AS ClicksSRPListingCheckAvailRent ,
                                ISNULL(tl.ClicksCR3AG, 0) AS ClicksCR3AG ,
                                ISNULL(tl.ClicksCR3Rent, 0) AS ClicksCR3Rent ,
                                ISNULL(tl.ClicksSpotlightRentSpecialsAG, 0) AS ClicksSpotlightRentSpecialsAG ,
                                ISNULL(tl.ClicksSpotlightRentSpecialsRent, 0) AS ClicksSpotlightRentSpecialsRent ,
                                ISNULL(tl.ClicksSpotlightReserveNowAG, 0) AS ClicksSpotlightReserveNowAG ,
                                ISNULL(si.SRPListingImprAG, 0) AS SRPListingImprAG ,
                                ISNULL(si.SRPListingImprRent, 0) AS SRPListingImprRent ,
                                ISNULL(si.SRPUniqueVisitAG, 0) AS SRPUniqueVisitAG ,
                                ISNULL(si.SRPUniqueVisitRent, 0) AS SRPUniqueVisitRent ,
                                ISNULL(si.PDPUniqueVisitWebAG, 0) AS UniqueVisitsAG ,
                                ISNULL(si.PDPUniqueVisitWebRent, 0) AS UniqueVisitsRent ,
                                ISNULL(si.PDPUniqueVisitMobileAG, 0) AS UniqueVisitsMobileAG ,
                                ISNULL(si.PDPUniqueVisitMobileRent, 0) AS UniqueVisitsMobileRent ,
                                0 AS UniqueVisitsAGSites ,
                                ISNULL(si.PDPPageViewWebAG, 0) AS ViewsListingPageWebAG ,
                                ISNULL(si.PDPPageViewWebRent, 0) AS ViewsListingPageWebRent ,
                                ISNULL(si.PDPPageViewMobileAG, 0) AS ViewsListingPageMobileAG ,
                                ISNULL(si.PDPPageViewMobileRent, 0) AS ViewsListingPageMobileRent ,
                                ISNULL(si.PDPPageViewAGSites, 0) AS ViewsListingPageAGSites ,
                                ISNULL(si.PhoneLeadsAG, 0) AS PhoneLeadsAG ,
                                ISNULL(si.PhoneLeadsRent, 0) AS PhoneLeadsRent ,
                                ISNULL(si.MissedCallsAG, 0) AS MissedCallsAG ,
                                ISNULL(si.MissedCallsRent, 0) AS MissedCallsRent ,
                                ISNULL(si.EmailLeadsAG, 0) AS EmailLeadsAG ,
                                ISNULL(si.EmailLeadsRent, 0) AS EmailLeadsRent
                        FROM    Dimension.Listings_Legacy dl
                                LEFT JOIN ( SELECT  listingid ,
                                                    SUM(CASE WHEN profileid = 84
                                                             THEN ClicksCommunityVideo
                                                             ELSE 0
                                                        END) AS ClicksCommunityVideoAG ,
                                                    SUM(CASE WHEN profileid = 84
                                                             THEN ClicksDiamondMaxPhoto
                                                             ELSE 0
                                                        END) AS ClicksDiamondMaxPhotoAG ,
                                                    SUM(CASE WHEN profileid = 84
                                                             THEN ClicksDiamondMaxCheckAvail
                                                             ELSE 0
                                                        END) AS ClicksDiamondMaxCheckAvailAG ,
                                                    SUM(CASE WHEN profileid = 84
                                                             THEN ClicksFloorplan
                                                             ELSE 0
                                                        END) AS ClicksFloorPlanAG ,
                                                    SUM(CASE WHEN profileid = 86
                                                             THEN ClicksFloorplan
                                                             ELSE 0
                                                        END) AS ClicksFloorPlanRent ,
                                                    SUM(CASE WHEN profileid = 84
                                                             THEN ClicksHDFloorplan
                                                             ELSE 0
                                                        END) AS ClicksHDFloorplanAG ,
                                                    SUM(CASE WHEN profileid = 86
                                                             THEN ClicksHDFloorplan
                                                             ELSE 0
                                                        END) AS ClicksHDFloorplanRent ,
                                                    SUM(CASE WHEN profileid = 84
                                                             THEN ClicksPhotos
                                                             ELSE 0
                                                        END) AS ClicksPhotosAG ,
                                                    SUM(CASE WHEN profileid = 86
                                                             THEN ClicksPhotos
                                                             ELSE 0
                                                        END) AS ClicksPhotosRent ,
                                                    SUM(CASE WHEN profileid = 84
                                                             THEN ClicksHDPhoto
                                                             ELSE 0
                                                        END) AS ClicksHDPhotoAG ,
                                                    SUM(CASE WHEN profileid = 86
                                                             THEN ClicksHDPhoto
                                                             ELSE 0
                                                        END) AS ClicksHDPhotoRent ,
                                                    SUM(CASE WHEN profileid = 84
                                                             THEN ClicksHDVideo
                                                             ELSE 0
                                                        END) AS ClicksHDVideoAG ,
                                                    SUM(CASE WHEN profileid = 86
                                                             THEN ClicksHDVideo
                                                             ELSE 0
                                                        END) AS ClicksHDVideoRent ,
                                                    SUM(CASE WHEN profileid = 84
                                                             THEN ClicksHDPanoTour
                                                             ELSE 0
                                                        END) AS ClicksHDPanoTourAG ,
                                                    SUM(CASE WHEN profileid = 86
                                                             THEN ClicksHDPanoTour
                                                             ELSE 0
                                                        END) AS ClicksHDPanoTourRent ,
                                                    SUM(CASE WHEN profileid = 84
                                                             THEN ClicksMap
                                                             ELSE 0
                                                        END) AS ClicksMapAG ,
                                                    SUM(CASE WHEN profileid = 86
                                                             THEN ClicksMap
                                                             ELSE 0
                                                        END) AS ClicksMapRent ,
                                                    SUM(CASE WHEN profileid = 84
                                                             THEN ClicksMgtCoPeelAd
                                                             ELSE 0
                                                        END) AS ClicksMgtCoPeelAdAG ,
                                                    SUM(CASE WHEN profileid = 86
                                                             THEN ClicksMgtCoPeelAd
                                                             ELSE 0
                                                        END) AS ClicksMgtCoPeelAdRent ,
                                                    SUM(CASE WHEN profileid = 84
                                                             THEN ClicksReserveNow
                                                             ELSE 0
                                                        END) AS ClicksReserveNowAG ,
                                                    SUM(CASE WHEN profileid = 86
                                                             THEN ClicksReserveNow
                                                             ELSE 0
                                                        END) AS ClicksReserveNowRent ,
                                                    SUM(CASE WHEN profileid = 84
                                                             THEN ClicksFeaturedCommunity
                                                             ELSE 0
                                                        END) AS ClicksFeaturedCommunityAG ,
                                                    SUM(CASE WHEN profileid = 86
                                                             THEN ClicksFeaturedCommunity
                                                             ELSE 0
                                                        END) AS ClicksFeaturedCommunityRent ,
                                                    SUM(CASE WHEN profileid = 84
                                                             THEN ClicksFeatCommCheckAvail
                                                             ELSE 0
                                                        END) AS ClicksFeatCommCheckAvailAG ,
                                                    SUM(CASE WHEN profileid = 86
                                                             THEN ClicksFeatCommCheckAvail
                                                             ELSE 0
                                                        END) AS ClicksFeatCommCheckAvailRent ,
                                                    SUM(CASE WHEN profileid = 84
                                                             THEN ClicksSRPListingCheckAvail
                                                             ELSE 0
                                                        END) AS ClicksSRPListingCheckAvailAG ,
                                                    SUM(CASE WHEN profileid = 86
                                                             THEN ClicksSRPListingCheckAvail
                                                             ELSE 0
                                                        END) AS ClicksSRPListingCheckAvailRent ,
                                                    SUM(CASE WHEN profileid = 84
                                                             THEN ClicksCR3
                                                             ELSE 0
                                                        END) AS ClicksCR3AG ,
                                                    SUM(CASE WHEN profileid = 86
                                                             THEN ClicksCR3
                                                             ELSE 0
                                                        END) AS ClicksCR3Rent ,
                                                    SUM(CASE WHEN profileid = 84
                                                             THEN ClicksSpotlightRentSpecials
                                                             ELSE 0
                                                        END) AS ClicksSpotlightRentSpecialsAG ,
                                                    SUM(CASE WHEN profileid = 86
                                                             THEN ClicksSpotlightRentSpecials
                                                             ELSE 0
                                                        END) AS ClicksSpotlightRentSpecialsRent ,
                                                    SUM(CASE WHEN profileid = 84
                                                             THEN ClicksSpotlightReserveNow
                                                             ELSE 0
                                                        END) AS ClicksSpotlightReserveNowAG ,
                                                    SUM(CASE WHEN profileid = 84
                                                             THEN ClicksWebURL
                                                             ELSE 0
                                                        END) AS ClicksWebURLAG ,
                                                    SUM(CASE WHEN profileid = 84
                                                             THEN ClicksMgtCoURL
                                                             ELSE 0
                                                        END) AS ClicksMgtCoURLAG ,
                                                    SUM(CASE WHEN profileid = 86
                                                             THEN ClicksWebURL
                                                             ELSE 0
                                                        END) AS ClicksWebURLRent ,
                                                    SUM(CASE WHEN profileid = 86
                                                             THEN ClicksMgtCoURL
                                                             ELSE 0
                                                        END) AS ClicksMgtCoURLRent
                                            FROM    Staging.Tealium
                                            GROUP BY listingid
                                          ) tl ON dl.ListingID = tl.ListingID
                                LEFT JOIN ( SELECT  listingid ,
                                                    SUM(CASE WHEN profileid = 84
                                                             THEN SRPListingImpr
                                                             ELSE 0
                                                        END) AS SRPListingImprAG ,
                                                    SUM(CASE WHEN profileid = 86
                                                             THEN SRPListingImpr
                                                             ELSE 0
                                                        END) AS SRPListingImprRent ,
                                                    SUM(CASE WHEN profileid = 84
                                                             THEN SRPUniqueVisit
                                                             ELSE 0
                                                        END) AS SRPUniqueVisitAG ,
                                                    SUM(CASE WHEN profileid = 86
                                                             THEN SRPUniqueVisit
                                                             ELSE 0
                                                        END) AS SRPUniqueVisitRent ,
                                                    SUM(CASE WHEN profileid = 84
                                                             THEN PhoneLeads
                                                             ELSE 0
                                                        END) AS PhoneLeadsAG ,
                                                    SUM(CASE WHEN profileid = 86
                                                             THEN PhoneLeads
                                                             ELSE 0
                                                        END) AS PhoneLeadsRent ,
                                                    SUM(CASE WHEN profileid = 84
                                                             THEN MissedCalls
                                                             ELSE 0
                                                        END) AS MissedCallsAG ,
                                                    SUM(CASE WHEN profileid = 86
                                                             THEN MissedCalls
                                                             ELSE 0
                                                        END) AS MissedCallsRent ,
                                                    SUM(CASE WHEN profileid = 84
                                                             THEN EmailLeads
                                                             ELSE 0
                                                        END) AS EmailLeadsAG ,
                                                    SUM(CASE WHEN profileid = 86
                                                             THEN EmailLeads
                                                             ELSE 0
                                                        END) AS EmailLeadsRent ,
                                                    SUM(CASE WHEN profileid = 84
                                                             THEN PDPPageViewWeb
                                                             ELSE 0
                                                        END) AS PDPPageViewWebAG ,
                                                    SUM(CASE WHEN profileid = 84
                                                             THEN PDPPageViewMobile
                                                             ELSE 0
                                                        END) AS PDPPageViewMobileAG ,
                                                    SUM(CASE WHEN profileid = 86
                                                             THEN PDPPageViewWeb
                                                             ELSE 0
                                                        END) AS PDPPageViewWebRent ,
                                                    SUM(CASE WHEN profileid = 86
                                                             THEN PDPPageViewMobile
                                                             ELSE 0
                                                        END) AS PDPPageViewMobileRent ,
                                                    0 AS PDPPageViewAGSites ,
                                                    SUM(CASE WHEN profileid = 84
                                                             THEN PDPUniqueVisitWeb
                                                             ELSE 0
                                                        END) AS PDPUniqueVisitWebAG ,
                                                    SUM(CASE WHEN profileid = 84
                                                             THEN PDPUniqueVisitMobile
                                                             ELSE 0
                                                        END) AS PDPUniqueVisitMobileAG ,
                                                    SUM(CASE WHEN profileid = 86
                                                             THEN PDPUniqueVisitWeb
                                                             ELSE 0
                                                        END) AS PDPUniqueVisitWebRent ,
                                                    SUM(CASE WHEN profileid = 86
                                                             THEN PDPUniqueVisitMobile
                                                             ELSE 0
                                                        END) AS PDPUniqueVisitMobileRent
                                            FROM    Staging.Events
                                            GROUP BY listingid
                                          ) si ON dl.ListingID = si.ListingID
                        ORDER BY dl.ListingID;

                INSERT  INTO Staging.MartLog
                        ( YMDID ,
                          Step ,
                          EndTime
                        )
                VALUES  ( @YMDID , -- YMDID - int
                          'Insert complete'  -- Step - varchar(1000)
                          ,
                          GETDATE()
                        );

------------------------------------------
/*Lookback at email leads for the last 7 days and update
any count that may have changed due to a status change on
the email lead itself*/ 
------------------------------------------
                UPDATE  ml
                SET     EmailLeadsAG = eup.EmailLeadsAG ,
                        EmailLeadsRent = eup.EmailLeadsRent
                FROM    Mart.Listings_Legacy ml
                        JOIN ( SELECT   ml.YMDID ,
                                        ml.ListingID ,
                                        EmailLeadsAG = ISNULL(SUM(CASE
                                                              WHEN wfl.ProfileID = 84
                                                              THEN wfl.EventCount
                                                              END), 0) ,
                                        EmailLeadsRent = ISNULL(SUM(CASE
                                                              WHEN wfl.ProfileID = 86
                                                              THEN wfl.EventCount
                                                              END), 0)
                               FROM     Mart.Listings_Legacy ml
                                        JOIN ( SELECT   el.YMDID ,
                                                        el.ListingID ,
                                                        CASE WHEN el.Website = 'AG'
                                                              AND l.ListingType <> 'Rentals Listing'
                                                             THEN 84
                                                             WHEN el.Website = 'AG'
                                                              AND l.ListingType IS NULL
                                                             THEN 84
                                                             WHEN el.Website = 'Rent'
                                                             THEN 86
                                                        END AS ProfileID ,
                                                        COUNT(1) AS EventCount
                                               FROM     ApartmentGuide.Fact.AGRentWebFormLeads
                                                        AS el --added this left join so we could ensure leads for rentals props are not being counted as AG leads
                                                        LEFT OUTER JOIN RentPath.Dimension.Listings_Legacy
                                                        AS l ON el.ListingID = l.ListingID
                                               WHERE    el.YMDID >= CAST(CONVERT(VARCHAR(8), GETDATE()
                                                        - 8, 112) AS INT)
                                                        AND el.[Status] = 1
                                                        AND CASE
                                                              WHEN el.Website = 'AG'
                                                              AND l.ListingType <> 'Rentals Listing'
                                                              THEN 84
                                                              WHEN el.Website = 'AG'
                                                              AND l.ListingType IS NULL
                                                              THEN 84
                                                              WHEN el.Website = 'Rent'
                                                              THEN 86
                                                            END IN ( 84, 86 )
                                               GROUP BY el.YMDID ,
                                                        el.ListingID ,
                                                        CASE WHEN el.Website = 'AG'
                                                              AND l.ListingType <> 'Rentals Listing'
                                                             THEN 84
                                                             WHEN el.Website = 'AG'
                                                              AND l.ListingType IS NULL
                                                             THEN 84
                                                             WHEN el.Website = 'Rent'
                                                             THEN 86
                                                        END
                                             ) wfl ON ml.YMDID = wfl.YMDID
                                                      AND ml.ListingID = wfl.ListingID
                               GROUP BY ml.YMDID ,
                                        ml.ListingID
                             ) eup ON ml.ListingID = eup.ListingID
                                      AND ml.YMDID = eup.YMDID;

                INSERT  INTO Staging.MartLog
                        ( YMDID ,
                          Step ,
                          EndTime
                        )
                VALUES  ( @YMDID , -- YMDID - int
                          'Seven-day email leads lookback complete'  -- Step - varchar(1000)
                          ,
                          GETDATE()
                        );

--#######################################################################################################################
-- Hist: 09	08/13/2015	Colleen Rocks	Ticket 20399, corrected lead counts; added update for phone leads
--#######################################################################################################################

------------------------------------------
/*Once a week, Lookback at phone leads for 
the last 7 days and update any count that 
may have changed due to a delay in receiving 
the lead days after the call was made*/ 
------------------------------------------
                IF ( SELECT TOP 1
                            DayName
                     FROM   DBAUtility.Dimension.Dates
                     WHERE  YMDDate = CAST(GETDATE() AS DATE)
                   ) = 'Sunday'
                    BEGIN
						
                        SELECT  y.ListingID ,
                                y.YMDID
                           --,SUM(CASE WHEN y.ProfileID = 84 THEN ISNULL(y.EventCount,0)
                           --     END) AS PhoneLeadsAG
                           --,SUM(CASE WHEN y.ProfileID = 86 THEN ISNULL(y.EventCount,0)
                           --     END) AS PhoneLeadsRent
                                ,
                                SUM(CASE WHEN y.ProfileID = 84
                                              AND y.CallStatus = 1
                                         THEN ISNULL(y.EventCount, 0)
                                    END) AS PhoneLeadsAG ,
                                SUM(CASE WHEN y.ProfileID = 86
                                              AND y.CallStatus = 1
                                         THEN ISNULL(y.EventCount, 0)
                                    END) AS PhoneLeadsRent ,
                                SUM(CASE WHEN y.ProfileID = 84
                                              AND y.CallStatus IN ( 2, 3 )
                                         THEN ISNULL(y.EventCount, 0)
                                    END) AS MissedCallsAG ,
                                SUM(CASE WHEN y.ProfileID = 86
                                              AND y.CallStatus IN ( 2, 3 )
                                         THEN ISNULL(y.EventCount, 0)
                                    END) AS MissedCallsRent
                        INTO    #tmpCallsUpdate
                        FROM    ( SELECT    pl.YMDID ,
                                            pl.ListingID AS ListingID ,
                                            CASE WHEN pl.Website = 'AG'
                                                      AND l.ListingType <> 'Rentals Listing'
                                                 THEN 84
                                                 WHEN pl.Website = 'AG'
                                                      AND l.ListingType IS NULL
                                                 THEN 84
                                                 WHEN pl.Website = 'Rent'
                                                 THEN 86
                                            END AS ProfileID ,
                                            pl.CallStatus ,
                                            COUNT(1) AS EventCount
                                  FROM      RentPath.Mart.PhoneLeads AS pl
                                            LEFT OUTER JOIN RentPath.Dimension.Listings_Legacy
                                            AS l ON pl.ListingID = l.ListingID
                                  WHERE     pl.YMDID BETWEEN CAST(CONVERT(VARCHAR(8), GETDATE()
                                                             - 8, 112) AS INT)
                                                     AND     CAST(CONVERT(VARCHAR(8), GETDATE()
                                                             - 2, 112) AS INT)
                                            AND pl.CallType <> 'CRAIGSLIST'
                                            AND CASE WHEN pl.Website = 'AG'
                                                          AND l.ListingType <> 'Rentals Listing'
                                                     THEN 84
                                                     WHEN pl.Website = 'AG'
                                                          AND l.ListingType IS NULL
                                                     THEN 84
                                                     WHEN pl.Website = 'Rent'
                                                     THEN 86
                                                END IN ( 84, 86 )
                                  GROUP BY  pl.YMDID ,
                                            pl.ListingID ,
                                            CASE WHEN pl.Website = 'AG'
                                                      AND l.ListingType <> 'Rentals Listing'
                                                 THEN 84
                                                 WHEN pl.Website = 'AG'
                                                      AND l.ListingType IS NULL
                                                 THEN 84
                                                 WHEN pl.Website = 'Rent'
                                                 THEN 86
                                            END ,
                                            pl.CallStatus
                                ) AS y
                        GROUP BY y.ListingID ,
                                y.YMDID;


                        UPDATE  ml
                        SET     ml.PhoneLeadsAG = CAST(ISNULL(c.PhoneLeadsAG,
                                                              0) AS INT) ,
                                ml.PhoneLeadsRent = CAST(ISNULL(c.PhoneLeadsRent,
                                                              0) AS INT) ,
                                ml.MissedCallsAG = CAST(ISNULL(c.MissedCallsAG,
                                                              0) AS INT) ,
                                ml.MissedCallsRent = CAST(ISNULL(c.MissedCallsRent,
                                                              0) AS INT)
                        FROM    Mart.Listings_Legacy ml
                                JOIN #tmpCallsUpdate AS c ON ml.ListingID = c.ListingID
                                                             AND ml.YMDID = c.YMDID;

                        INSERT  INTO Staging.MartLog
                                ( YMDID ,
                                  Step ,
                                  EndTime
                                )
                        VALUES  ( @YMDID , -- YMDID - int
                                  'Update to PhoneLeads Complete'  -- Step - varchar(1000)
                                  ,
                                  GETDATE()
                                );

                    END;

                INSERT  INTO Staging.MartLog
                        ( YMDID ,
                          Step ,
                          EndTime
                        )
                VALUES  ( @YMDID , -- YMDID - int
                          'Mart.Listings complete'  -- Step - varchar(1000)
                          ,
                          GETDATE()
                        );

            END;

        ELSE

------------------------------------------
/*If the date in TealiumParsedPivot does not match the date 
being processed for Mart.Listings throw an error*/ 
------------------------------------------
            BEGIN
                INSERT  INTO Staging.MartLog
                        ( YMDID ,
                          Step ,
                          EndTime
                        )
                VALUES  ( @YMDID , -- YMDID - int
                          'TealiumParsedPivot YMDID does not match marting YMDID.'  -- Step - varchar(1000)
                          ,
                          GETDATE()
                        );
		
                DECLARE @StringVariable NVARCHAR(100);
                SET @StringVariable = N'TealiumParsedPivot YMDID does not match marting YMDID.';

                RAISERROR (@StringVariable, -- Message text.
		   16, -- Severity,
		   1 -- State,
			);
                RETURN 0; 

            END;
    
        SET NOCOUNT OFF;

    END;
































GO
/****** Object:  StoredProcedure [Mart].[pr_ListingsCombinedAGRent]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





/*--######################################################################################
*
* Name:	[Mart].[pr_ListingsCombinedAGRent]
*
* Desc:  Run for prev month if running for 1st through 7th day of new month.  For
*		current month, run for 1st through input date, and write one record per listing
*		if active in the period being run for
*
*
* Test:	EXEC Mart.pr_ListingsCombinedAGRent NULL
* Test:	EXEC Mart.pr_ListingsCombinedAGRent '02/01/2015'			--makes it do full lookback month (since is the first), and only up to given date in this month
*
*
*
* Hist:	01	02/02/2015	Bob Langley		Initial Version  - Ticket 18155
*		02	04/21/2015	Brian Trembley	Ticket 19081, added UpsellMediaCenter
*		03	05/06/2015	Bob Langley		changed to make sure correct data was saved (tightened up) (changed where unified data was created and used, and what records to write out).
*		04	05/29/2015	Sarah Mims		Ticket # 19610 - removed all references to "future" columns
--#######################################################################################*/
CREATE PROCEDURE [Mart].[pr_ListingsCombinedAGRent]
(@datetorun	datetime = NULL)
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
    SET NOCOUNT ON;

	/* =============================================================== */
	/* Testing 
	DECLARE @datetorun datetime
	SET @datetorun = CONVERT(datetime,'01/01/2015')
	*/
	/* =============================================================== */



	DECLARE
		@ErrorMessage					NVARCHAR(4000),
		@ErrorNumber					INT,
		@ErrorSeverity					INT,
		@ErrorState						INT,
		@ErrorLine						INT,
		@ErrorProcedure					NVARCHAR(200)


	DECLARE @StartYMDDate DATETIME = NULL
	DECLARE @EndYMDDate DATETIME = NULL
	DECLARE @PrevStartYMDDate DATETIME = NULL
	DECLARE @PrevEndYMDDate DATETIME = NULL

    DECLARE @StartYMDID INT
    DECLARE @EndYMDID INT	
    DECLARE @PrevStartYMDID INT
    DECLARE @PrevEndYMDID INT	


	DECLARE @yearmonth int
	DECLARE @prevyearmonth int
		
	DECLARE @rundateYMDID int
	DECLARE @rundate datetime
	SET @rundateYMDID = CONVERT(int, Convert(varchar(10),GETDATE(),112))
	SET @rundate = GETDATE()



	
	
	SET @StartYMDDate = 
	ISNULL(
		(SELECT MonthStartDate FROM DBAUtility.Dimension.Dates WHERE YMDDate = CONVERT(datetime, Convert(varchar(10),@datetorun,101))),
		(SELECT MonthStartDate FROM DBAUtility.Dimension.Dates WHERE YMDID = CONVERT(int, Convert(varchar(10),DATEADD(dd,-1,GETDATE()),112)) )
	)	--default to yesterday if null
	
	SET @EndYMDDate = ISNULL(@datetorun,DATEADD(dd,-1,GETDATE()))	--find the ending date (if null, use yesterday, otherwise use the date given)

	SET @StartYMDID = CONVERT(int, Convert(varchar(10),@StartYMDDate,112))
	SET @EndYMDID = CONVERT(int, Convert(varchar(10),@EndYMDDate,112))
	
	SET @yearmonth = CONVERT(int,@StartYMDID * .01)

	--Find previous period dates
	if day(@EndYMDDate) >= 1 AND day(@EndYMDDate) <= 7 
		BEGIN
			SET @PrevStartYMDDate = (SELECT MonthStartDate FROM DBAUtility.Dimension.Dates WHERE YMDDate = DATEADD(dd,-1,@StartYMDDate))
			SET @PrevEndYMDDate = (SELECT MonthEndDate FROM DBAUtility.Dimension.Dates WHERE YMDDate = DATEADD(dd,-1,@StartYMDDate))

			SET @PrevStartYMDID = CONVERT(int, Convert(varchar(10),@PrevStartYMDDate,112))
			SET @PrevEndYMDID = CONVERT(int, Convert(varchar(10),@PrevEndYMDDate,112))
	
			SET @prevyearmonth = CONVERT(int,@PrevStartYMDID * .01)
		END
	else
		BEGIN
			SET @PrevStartYMDDate = NULL
			SET @PrevEndYMDDate = NULL

			SET @PrevStartYMDID = NULL
			SET @PrevEndYMDID = NULL
	
			SET @prevyearmonth = NULL

			PRINT 'All previous date values have been set to NULL.'
		END

	--print the dates so that the user can confirm the start and end dates used for this run
	PRINT '@StartYMDDate = ' + CONVERT(varchar(30),@StartYMDDate,109)
	PRINT '@EndYMDDate = ' + CONVERT(varchar(30),@EndYMDDate,109)
	PRINT '@StartYMDID = ' + CONVERT(varchar(30),@StartYMDID)
	PRINT '@EndYMDID = ' + CONVERT(varchar(30),@EndYMDID)
	PRINT '@yearmonth = ' + CONVERT(varchar(30),@yearmonth)
	PRINT ' '
	PRINT '@PrevStartYMDDate = ' + CONVERT(varchar(30),@PrevStartYMDDate,109)
	PRINT '@PrevEndYMDDate = ' + CONVERT(varchar(30),@PrevEndYMDDate,109)
	PRINT '@PrevStartYMDID = ' + CONVERT(varchar(30),@PrevStartYMDID)
	PRINT '@PrevEndYMDID = ' + CONVERT(varchar(30),@PrevEndYMDID)
	PRINT '@prevyearmonth = ' + CONVERT(varchar(30),@prevyearmonth)
	PRINT ' '
	PRINT '@rundate = ' + CONVERT(varchar(30),@rundate,109)

	/* ============================================================================================================================================= */
	
	-- drop temp tables to use
	
	BEGIN TRY
		DROP TABLE #finalresultsetcurr
	END TRY
	BEGIN CATCH
	END CATCH

	BEGIN TRY
		DROP TABLE #finalresultsetprev
	END TRY
	BEGIN CATCH
	END CATCH
	

	BEGIN TRY
		DROP TABLE #tmpmasterlist
	END TRY
	BEGIN CATCH
	END CATCH
	
	/* ============================================================================================================================================= */

	--Main Area
	BEGIN TRY

		/* ================================================================================================================================================================== */
			--Get unified data from ApartmentGuide.Dimension.AGRentCombinedDimensionListings
	


		;WITH cte AS
		(
			SELECT DISTINCT ListingID FROM ApartmentGuide.Dimension.AGRentCombinedDimensionListings dl WITH (NOLOCK)
		)
			SELECT cte.ListingID, ISNULL(dlag.AGPropertyID,dlr.AGPropertyID) AS AGPropertyID, rdl.PropertyID AS RentComPropertyID, dlr.RentPropertyID
			, ISNULL(dlag.ZipCode,dlr.ZipCode) AS ZipCode		--(CASE WHEN dlag.ZipCode > dlr.ZipCode THEN dlag.ZipCode ELSE dlr.ZipCode END) AS ZipCode
			, dlag.MgtCoID AS AGMgtCoID, dlr.MgtCoID AS RentMgtCoID, ISNULL(dlag.StatusID,0) AS AGStatusID, ISNULL(dlr.StatusID,0) AS RentStatusID
			INTO #tmpmasterlist
			FROM cte
			LEFT OUTER JOIN ApartmentGuide.Dimension.AGRentCombinedDimensionListings dlag WITH (NOLOCK)
				ON dlag.ListingID = cte.ListingID AND dlag.Website = 'AG'
			LEFT OUTER JOIN ApartmentGuide.Dimension.AGRentCombinedDimensionListings dlr WITH (NOLOCK)
				ON dlr.ListingID = cte.ListingID AND dlr.Website = 'Rent'
			LEFT OUTER JOIN RentCom.Dimension.Listings rdl WITH (NOLOCK)
				ON rdl.ListingID = cte.ListingID
			ORDER BY cte.ListingID

		--ALTER TABLE #tmpmasterlist ADD CONSTRAINT PK_15223_tmpmasterlist PRIMARY KEY CLUSTERED (ListingID);

		--SELECT * FROM #tmpmasterlist WHERE ListingID = 100013883 ORDER BY ListingID
		/* ================================================================================================================================================================== */

		-- Get Current information
		SELECT
		COALESCE(ag.YearMonth,r.YearMonth) AS YearMonth					--COALESCE(ag.YearMonth,r.YearMonth)
		, dl.ListingID AS ListingID
		, MAX(ISNULL(dl.AGPropertyID,0)) AS AG_PropertyID
		, MAX(ISNULL(dl.RentPropertyID,0)) AS R_RentPropertyID
		, MAX(ISNULL(dl.RentComPropertyID,0)) AS R_PropertyID
		, MAX(ISNULL(ag.ListingType,'')) AS AG_ListingType
		, MAX(ISNULL(r.ListingTypeID,0)) AS R_ListingTypeID
		, MAX(ISNULL(r.ListingType,'')) AS R_ListingType
		, MAX(ISNULL(ag.ListingTypeShort,'')) AS AG_ListingTypeShort
		, MAX(ISNULL(r.ListingTypeShort,'')) AS R_ListingTypeShort
		, MAX(ISNULL(ag.ExternalID,'')) AS AG_ExternalID
		, MAX(ISNULL(r.ExternalID,'')) AS R_ExternalID
		, MAX(ISNULL(ag.ExternalPriceCode,'')) AS AG_ExternalPriceCode
		, MAX(ISNULL(r.ExternalPriceCode,'')) AS R_ExternalPriceCode
		, MAX(ISNULL(ag.ListingStatusID,0)) AS AG_ListingStatusID
		, MAX(ISNULL(r.RentStatusID,0)) AS R_ListingStatusID
		, MAX(ISNULL(ag.TotalPhotos,0)) AS AG_TotalPhotos
		, MAX(ISNULL(r.TotalPhotos,0)) AS R_TotalPhotos
		, MAX(ISNULL(ag.ActivePhotos,0)) AS AG_ActivePhotos
		, MAX(ISNULL(r.ActivePhotos,0)) AS R_ActivePhotos
		, MAX(ISNULL(ag.TotalFloorPlans,0)) AS AG_TotalFloorPlans
		, MAX(ISNULL(r.TotalFloorPlans,0)) AS R_TotalFloorPlans
		, MAX(ISNULL(ag.ActiveFloorPlans,0)) AS AG_ActiveFloorPlans
		, MAX(ISNULL(r.ActiveFloorPlans,0)) AS R_ActiveFloorPlans
		, MAX(ISNULL(ag.TotalAmenities,0)) AS AG_TotalAmenities
		, MAX(ISNULL(r.TotalAmenities,0)) AS R_TotalAmenities
		, MAX(ISNULL(ag.ActiveAmenities,0)) AS AG_ActiveAmenities
		, MAX(ISNULL(r.ActiveAmenities,0)) AS R_ActiveAmenities
		, MAX(ISNULL(ag.ActiveHDPhotos,0)) AS AG_ActiveHDPhotos
		, MAX(ISNULL(r.ActiveHDPhotos,0)) AS R_ActiveHDPhotos
		, MAX(ISNULL(ag.ActiveHDFloorPlans,0)) AS AG_ActiveHDFloorPlans
		, MAX(ISNULL(r.ActiveHDFloorPlans,0)) AS R_ActiveHDFloorPlans
		, MAX(ISNULL(ag.ShowPricing,0)) AS AG_ShowPricing
		, MAX(ISNULL(r.ShowPricing,0)) AS R_ShowPricing
		, MAX(ISNULL(ag.ShowOfficeHours,0)) AS AG_ShowOfficeHours
		, MAX(ISNULL(r.ShowOfficeHours,0)) AS R_ShowOfficeHours
		, MAX(ISNULL(ag.ListingDescriptionLength,0)) AS AG_ListingDescriptionLength
		, MAX(ISNULL(r.ListingDescriptionLength,0)) AS R_ListingDescriptionLength
		, MAX(ISNULL(ag.UpsellListHighlighted,0)) AS AG_UpsellListHighlighted
		, MAX(ISNULL(ag.UpsellListCoupon,0)) AS AG_UpsellListCoupon
		, MAX(ISNULL(r.UpsellListCoupon,0)) AS R_UpsellListCoupon
		, MAX(ISNULL(ag.UpsellPropEmercial,0)) AS AG_UpsellPropEmercial
		, MAX(ISNULL(ag.UpsellPropCommunityVideo,0)) AS AG_UpsellPropCommunityVideo
		, MAX(ISNULL(ag.UpsellPropFeaturedCommunityPlatinum,0)) AS AG_UpsellPropFeaturedCommunityPlatinum
		, MAX(ISNULL(ag.UpsellPropFeaturedCommunityGold,0)) AS AG_UpsellPropFeaturedCommunityGold
		, MAX(ISNULL(ag.UpsellPropFeaturedCommunitySilver,0)) AS AG_UpsellPropFeaturedCommunitySilver
		, MAX(ISNULL(ag.UpsellPropVirtualBrochure,0)) AS AG_UpsellPropVirtualBrochure
		, MAX(ISNULL(ag.UpsellListCorporateListing,0)) AS AG_UpsellListCorporateListing
		, MAX(ISNULL(ag.UpsellListCollegeListing,0)) AS AG_UpsellListCollegeListing
		, MAX(ISNULL(ag.UpsellListMilitaryListing,0)) AS AG_UpsellListMilitaryListing
		, MAX(ISNULL(ag.UpsellListApartmentListing,0)) AS AG_UpsellListApartmentListing
		, MAX(ISNULL(ag.UpsellPropPhotoUpgrade,0)) AS AG_UpsellPropPhotoUpgrade
		, MAX(ISNULL(ag.UpsellMgmtManagementCoLogoDisplay,0)) AS AG_UpsellMgmtManagementCoLogoDisplay
		, MAX(ISNULL(ag.UpsellListSeniorListing,0)) AS AG_UpsellListSeniorListing
		, MAX(ISNULL(ag.UpsellPropPropertyLogoDisplay,0)) AS AG_UpsellPropPropertyLogoDisplay
		, MAX(ISNULL(ag.UpsellPropPremiumUpgrade,0)) AS AG_UpsellPropPremiumUpgrade
		, MAX(ISNULL(ag.UpsellPropVideoSpokesModel,0)) AS AG_UpsellPropVideoSpokesModel
		, MAX(ISNULL(ag.UpsellPropFrontPage,0)) AS AG_UpsellPropFrontPage
		, MAX(ISNULL(ag.UpsellPropSpanish,0)) AS AG_UpsellPropSpanish
		, MAX(ISNULL(ag.UpsellPropCallRecording,0)) AS AG_UpsellPropCallRecording
		, MAX(ISNULL(r.UpsellPropCallRecording,0)) AS R_UpsellPropCallRecording
		, MAX(ISNULL(ag.UpsellPropFormToPhone,0)) AS AG_UpsellPropFormToPhone
		, MAX(ISNULL(ag.UpsellPropRentalsPremier,0)) AS AG_UpsellPropRentalsPremier
		, MAX(ISNULL(ag.UpsellPropRentalsFeatured,0)) AS AG_UpsellPropRentalsFeatured
		, MAX(ISNULL(ag.UpsellListRentalsListing,0)) AS AG_UpsellListRentalsListing
		, MAX(ISNULL(ag.UpsellListFloorPlanUpgrade,0)) AS AG_UpsellListFloorPlanUpgrade
		, MAX(ISNULL(ag.UpsellListPayPerLead,0)) AS AG_UpsellListPayPerLead
		, MAX(ISNULL(ag.UpsellListRentalsSpotlightAd,0)) AS AG_UpsellListRentalsSpotlightAd
		, MAX(ISNULL(ag.UpsellListSpotLight,0)) AS AG_UpsellListSpotLight
		, MAX(ISNULL(ag.UpsellListPayPerLease,0)) AS AG_UpsellListPayPerLease
		, MAX(ISNULL(ag.UpsellListDiamondMetro,0)) AS AG_UpsellListDiamondMetro
		, MAX(ISNULL(ag.UpsellListDiamondCity,0)) AS AG_UpsellListDiamondCity
		, MAX(ISNULL(ag.UpsellListDiamondMax,0)) AS AG_UpsellListDiamondMax
		, MAX(ISNULL(ag.UpsellListRentalsStandard,0)) AS AG_UpsellListRentalsStandard
		, MAX(ISNULL(ag.UpsellListCommunityCarousel,0)) AS AG_UpsellListCommunityCarousel
		, MAX(ISNULL(ag.UpsellList30SecondVideo,0)) AS AG_UpsellList30SecondVideo
		, MAX(ISNULL(ag.UpsellList60SecondVideo,0)) AS AG_UpsellList60SecondVideo
		, MAX(ISNULL(ag.UpsellListRentalsCarousel,0)) AS AG_UpsellListRentalsCarousel
		, MAX(ISNULL(ag.UpsellListRentalsStandardPlus,0)) AS AG_UpsellListRentalsStandardPlus
		, MAX(ISNULL(ag.UpsellListMobileSpotLight,0)) AS AG_UpsellListMobileSpotLight
		, MAX(ISNULL(ag.UpsellPropMobileDeal,0)) AS AG_UpsellPropMobileDeal
		, MAX(ISNULL(ag.UpsellPropDynamicLeadForm,0)) AS AG_UpsellPropDynamicLeadForm
		, MAX(ISNULL(ag.UpsellListIncomeRestricted,0)) AS AG_UpsellListIncomeRestricted
		, MAX(ISNULL(ag.UpsellListPetFriendly,0)) AS AG_UpsellListPetFriendly
		, MAX(ISNULL(ag.UpsellListLuxuryCommunity,0)) AS AG_UpsellListLuxuryCommunity
		, MAX(ISNULL(ag.UpsellPropRepMon,0)) AS AG_UpsellPropRepMon
		, MAX(ISNULL(ag.UpsellPropSocialMediaMan,0)) AS AG_UpsellPropSocialMediaMan
		, MAX(ISNULL(ag.UpsellListMobileDiamond,0)) AS AG_UpsellListMobileDiamond
		, MAX(ISNULL(ag.UpsellListEZPay,0)) AS AG_UpsellListEZPay
		, MAX(ISNULL(ag.UpsellMgmtPeelAd,0)) AS AG_UpsellMgmtPeelAd
		, MAX(ISNULL(ag.UpsellListSponsoredApartment,0)) AS AG_UpsellListSponsoredApartment
		, MAX(ISNULL(ag.UpsellListHDPanoTours,0)) AS AG_UpsellListHDPanoTours
		, MAX(ISNULL(ag.UpsellListHDVideo,0)) AS AG_UpsellListHDVideo
		, MAX(ISNULL(ag.UpsellListHDPhoto,0)) AS AG_UpsellListHDPhoto
		, MAX(ISNULL(ag.UpsellList3DFloorPlan,0)) AS AG_UpsellList3DFloorPlan
		, MAX(ISNULL(ag.UpsellListAGSites,0)) AS AG_UpsellListAGSites
		, MAX(ISNULL(ag.UpsellMediaCenter,0)) AS AG_UpsellMediaCenter
		, MAX(ISNULL(ag.CR3AvgOverallRating,0)) AS AG_CR3AvgOverallRating
		, MAX(ISNULL(r.CR3AvgOverallRating,0)) AS R_CR3AvgOverallRating
		, MAX(ISNULL(ag.CommunityVideoURLFulfilled,0)) AS AG_CommunityVideoURLFulfilled
		, MAX(ISNULL(ag.HDActiveFloorPlansFulfilled,0)) AS AG_HDActiveFloorPlansFulfilled
		, MAX(ISNULL(r.HDActiveFloorPlansFulfilled,0)) AS R_HDActiveFloorPlansFulfilled
		, MAX(ISNULL(ag.HDActivePhotosFulfilled,0)) AS AG_HDActivePhotosFulfilled
		, MAX(ISNULL(r.HDActivePhotosFulfilled,0)) AS R_HDActivePhotosFulfilled
		, MAX(ISNULL(ag.HDTourURLFulfilled,0)) AS AG_HDTourURLFulfilled
		, MAX(ISNULL(ag.HDVideoURLFulfilled,0)) AS AG_HDVideoURLFulfilled
		, MAX(ISNULL(ag.LinkedFloorPlanFulfilled,0)) AS AG_LinkedFloorPlanFulfilled
		, MAX(ISNULL(r.LinkedFloorPlanFulfilled,0)) AS R_LinkedFloorPlanFulfilled
		, MAX(ISNULL(ag.VirtualTourFulfilled,0)) AS AG_VirtualTourFulfilled
		, MAX(ISNULL(ag.Linked3DFloorPlanFulfilled,0)) AS AG_Linked3DFloorPlanFulfilled
		, MAX(ISNULL(r.Linked3DFloorPlanFulfilled,0)) AS R_Linked3DFloorPlanFulfilled
		, MAX(ISNULL(ag.LinkedRoomPlannerFulfilled,0)) AS AG_LinkedRoomPlannerFulfilled
		, MAX(ISNULL(r.LinkedRoomPlannerFulfilled,0)) AS R_LinkedRoomPlannerFulfilled
		, MAX(ISNULL(ag.MobileDealFulfilled,0)) AS AG_MobileDealFulfilled
		, MAX(ISNULL(r.MobileDealFulfilled,0)) AS R_MobileDealFulfilled
		, MAX(ISNULL(ag.LowPrice,0)) AS AG_LowPrice
		, MAX(ISNULL(r.LowPrice,0)) AS R_LowPrice
		, MAX(ISNULL(ag.HighPrice,0)) AS AG_HighPrice
		, MAX(ISNULL(r.HighPrice,0)) AS R_HighPrice
		, MAX(ISNULL(ag.IsSEM,0)) AS AG_IsSEM
		, MAX(ISNULL(ag.IsOverThreshold,0)) AS AG_IsOverThreshold
		, MAX(ISNULL(ag.IsRentalPropToBeDELETED,0)) AS AG_IsRentalPropToBeDELETED
		, MAX(ISNULL(ag.CallTrackingInBook,0)) AS AG_CallTrackingInBook
		, MAX(ISNULL(ag.CouponActiveOnSite,0)) AS AG_CouponActiveOnSite
		, MAX(ISNULL(r.CouponActiveOnSite,0)) AS R_CouponActiveOnSite
		, MAX(ISNULL(ag.VerizonFIOS,0)) AS AG_VerizonFIOS
		, MAX(ISNULL(ag.ATTUverse,0)) AS AG_ATTUverse
		, MAX(ISNULL(ag.DIRECTV,0)) AS AG_DIRECTV
		, MAX(ISNULL(ag.BrightHouse,0)) AS AG_BrightHouse
		, MAX(ISNULL(ag.Charter,0)) AS AG_Charter
		, MAX(ISNULL(ag.XfinitySP,0)) AS AG_XfinitySP
		, MAX(ISNULL(ag.XfinityDP,0)) AS AG_XfinityDP
		, MAX(ISNULL(ag.XfinityTP,0)) AS AG_XfinityTP
		, MAX(ISNULL(ag.TimeWarner,0)) AS AG_TimeWarner
		, MAX(ISNULL(ag.Ranking,0)) AS AG_Ranking
		, MAX(ISNULL(ag.NumericRank,0)) AS AG_NumericRank
		, SUM(ISNULL(ag.UniqueVisits,0)) AS AG_UniqueVisits
		, SUM(ISNULL(r.UniqueVisits,0)) AS R_UniqueVisits
		, SUM(ISNULL(ag.UniqueVisits_Mobile,0)) AS AG_UniqueVisits_Mobile
		, SUM(ISNULL(ag.UniqueVisits_Sites,0)) AS AG_UniqueVisits_Sites
		, SUM(ISNULL(ag.ViewsListingPage,0)) AS AG_ViewsListingPage
		, SUM(ISNULL(ag.ViewsListingPage_Mobile,0)) AS AG_ViewsListingPage_Mobile
		, SUM(ISNULL(ag.ViewsListingPage_Sites,0)) AS AG_ViewsListingPage_Sites
		, SUM(ISNULL(ag.ViewsEmercial,0)) AS AG_ViewsEmercial
		, SUM(ISNULL(ag.ViewsVirtualBrochure,0)) AS AG_ViewsVirtualBrochure
		, SUM(ISNULL(ag.ClicksSpotlightListing,0)) AS AG_ClicksSpotlightListing
		, SUM(ISNULL(ag.ClicksCommunityVideo,0)) AS AG_ClicksCommunityVideo
		, SUM(ISNULL(ag.ClicksSpotlightCommunityVideo,0)) AS AG_ClicksSpotlightCommunityVideo
		, SUM(ISNULL(ag.ClicksListingWebLink,0)) AS AG_ClicksListingWebLink
		, SUM(ISNULL(ag.ClicksMgtCoWebLink,0)) AS AG_ClicksMgtCoWebLink
		, SUM(ISNULL(r.ClicksMgtCoWebLink,0)) AS R_ClicksMgtCoWebLink
		, SUM(ISNULL(ag.ClicksListingMap,0)) AS AG_ClicksListingMap
		, SUM(ISNULL(ag.ClicksOnlineAppt,0)) AS AG_ClicksOnlineAppt
		, SUM(ISNULL(ag.ClicksOnlineApptSubmit,0)) AS AG_ClicksOnlineApptSubmit
		, SUM(ISNULL(ag.ClicksOnlineAppl,0)) AS AG_ClicksOnlineAppl
		, SUM(ISNULL(ag.ClicksOnlineApplSubmit,0)) AS AG_ClicksOnlineApplSubmit
		, SUM(ISNULL(ag.ClicksOnlineApptCR,0)) AS AG_ClicksOnlineApptCR
		, SUM(ISNULL(ag.ClicksOnlineApplCR,0)) AS AG_ClicksOnlineApplCR
		, SUM(ISNULL(ag.ClicksPrintableGuide,0)) AS AG_ClicksPrintableGuide
		, SUM(ISNULL(ag.ClicksWeCanCallYou,0)) AS AG_ClicksWeCanCallYou
		, SUM(ISNULL(ag.ClicksMapDirections,0)) AS AG_ClicksMapDirections
		, SUM(ISNULL(ag.ClicksLeadSubmission,0)) AS AG_ClicksLeadSubmission
		, SUM(ISNULL(ag.ClicksSpotlightLeadSubmission,0)) AS AG_ClicksSpotlightLeadSubmission
		, SUM(ISNULL(ag.ClicksPhotos,0)) AS AG_ClicksPhotos
		, SUM(ISNULL(ag.ClicksSpotlightPhotos,0)) AS AG_ClicksSpotlightPhotos
		, SUM(ISNULL(ag.ClicksSpotlightPhotoPopup,0)) AS AG_ClicksSpotlightPhotoPopup
		, SUM(ISNULL(ag.ClicksFloorPlans,0)) AS AG_ClicksFloorPlans
		, SUM(ISNULL(ag.ClicksCheckYourCredit,0)) AS AG_ClicksCheckYourCredit
		, SUM(ISNULL(ag.ClicksWebBuilderLink,0)) AS AG_ClicksWebBuilderLink
		, SUM(ISNULL(ag.ClicksFeaturedMgtCo,0)) AS AG_ClicksFeaturedMgtCo
		, SUM(ISNULL(ag.ClicksFrontPagePropLead,0)) AS AG_ClicksFrontPagePropLead
		, SUM(ISNULL(ag.ClicksLuxurySlideshow,0)) AS AG_ClicksLuxurySlideshow
		, SUM(ISNULL(ag.ClicksPanoramicTours,0)) AS AG_ClicksPanoramicTours
		, SUM(ISNULL(ag.ClicksHDVideos,0)) AS AG_ClicksHDVideos
		, SUM(ISNULL(ag.ClicksHDPhotos,0)) AS AG_ClicksHDPhotos
		, SUM(ISNULL(ag.ClicksMgmtCoPeelAd,0)) AS AG_ClicksMgmtCoPeelAd
		, SUM(ISNULL(ag.ClicksReserveNow,0)) AS AG_ClicksReserveNow
		, SUM(ISNULL(ag.ImprSearchResults,0)) AS AG_ImprSearchResults
		, SUM(ISNULL(r.ImprSearchResults,0)) AS R_ImprSearchResults
		, SUM(ISNULL(ag.ImprSearchResults_Rent,0)) AS AG_ImprSearchResults_Rent
		, SUM(ISNULL(ag.ImprFrontCover,0)) AS AG_ImprFrontCover
		, SUM(ISNULL(ag.ImprVisitCount,0)) AS AG_ImprVisitCount
		, SUM(ISNULL(ag.TextMsgWeb,0)) AS AG_TextMsgWeb
		, SUM(ISNULL(ag.TextMsgMobile,0)) AS AG_TextMsgMobile
		, MAX(ISNULL(ag.CheckListingAvail,0)) AS AG_CheckListingAvail
		, SUM(ISNULL(ag.ClicksSpotlightListingAvail,0)) AS AG_ClicksSpotlightListingAvail
		, SUM(ISNULL(ag.ClicksVirtualTourListingAvail,0)) AS AG_ClicksVirtualTourListingAvail
		, SUM(ISNULL(ag.AGCPrintConnectedCalls,0)) AS AG_AGCPrintConnectedCalls
		, SUM(ISNULL(ag.AGCPrintMissedCalls,0)) AS AG_AGCPrintMissedCalls
		, SUM(ISNULL(ag.ASGPrintConnectedCalls,0)) AS AG_ASGPrintConnectedCalls
		, SUM(ISNULL(ag.ASGPrintMissedCalls,0)) AS AG_ASGPrintMissedCalls
		, SUM(ISNULL(ag.WebConnectedCalls,0)) AS AG_WebConnectedCalls
		, SUM(ISNULL(ag.WebMissedCalls,0)) AS AG_WebMissedCalls
		, SUM(ISNULL(ag.RentalsConnectedCalls,0)) AS AG_RentalsConnectedCalls
		, SUM(ISNULL(ag.RentalsMissedCalls,0)) AS AG_RentalsMissedCalls
		, SUM(ISNULL(ag.CTCConnectedCalls,0)) AS AG_CTCConnectedCalls
		, SUM(ISNULL(ag.CTCMissedCalls,0)) AS AG_CTCMissedCalls
		, SUM(ISNULL(ag.PaidSPConnectedCalls,0)) AS AG_PaidSPConnectedCalls
		, SUM(ISNULL(ag.PaidSPMissedCalls,0)) AS AG_PaidSPMissedCalls
		, SUM(ISNULL(ag.CombinedFeedsConnectedCalls,0)) AS AG_CombinedFeedsConnectedCalls
		, SUM(ISNULL(ag.CombinedFeedsMissedCalls,0)) AS AG_CombinedFeedsMissedCalls
		, SUM(ISNULL(ag.GoogleConnectedCalls,0)) AS AG_GoogleConnectedCalls
		, SUM(ISNULL(ag.GoogleMissedCalls,0)) AS AG_GoogleMissedCalls
		, SUM(ISNULL(ag.PPCConnectedCalls,0)) AS AG_PPCConnectedCalls
		, SUM(ISNULL(ag.PPCMissedCalls,0)) AS AG_PPCMissedCalls
		, SUM(ISNULL(ag.LuxuryConnectedCalls,0)) AS AG_LuxuryConnectedCalls
		, SUM(ISNULL(ag.LuxuryMissedCalls,0)) AS AG_LuxuryMissedCalls
		, SUM(ISNULL(ag.MarchexConnectedCalls,0)) AS AG_MarchexConnectedCalls
		, SUM(ISNULL(ag.MarchexMissedCalls,0)) AS AG_MarchexMissedCalls
		, SUM(ISNULL(ag.CraigsListConnectedCalls,0)) AS AG_CraigsListConnectedCalls
		, SUM(ISNULL(ag.CraigsListMissedCalls,0)) AS AG_CraigsListMissedCalls
		, SUM(ISNULL(ag.WebLocalTrackingNumberConnectedCalls,0)) AS AG_WebLocalTrackingNumberConnectedCalls
		, SUM(ISNULL(ag.WebLocalTrackingNumberMissedCalls,0)) AS AG_WebLocalTrackingNumberMissedCalls
		, SUM(ISNULL(ag.RentalsLocalConnectedCalls,0)) AS AG_RentalsLocalConnectedCalls
		, SUM(ISNULL(ag.RentalsLocalMissedCalls,0)) AS AG_RentalsLocalMissedCalls
		, SUM(ISNULL(ag.VideoConnectedCalls,0)) AS AG_VideoConnectedCalls
		, SUM(ISNULL(ag.VideoMissedCalls,0)) AS AG_VideoMissedCalls
		, SUM(ISNULL(ag.SEMConnectedCalls,0)) AS AG_SEMConnectedCalls
		, SUM(ISNULL(ag.SEMMissedCalls,0)) AS AG_SEMMissedCalls
		, SUM(ISNULL(ag.TruliaConnectedCalls,0)) AS AG_TruliaConnectedCalls
		, SUM(ISNULL(ag.TruliaMissedCalls,0)) AS AG_TruliaMissedCalls
		, SUM(ISNULL(ag.RentConnectedCalls,0)) AS AG_RentConnectedCalls
		, SUM(ISNULL(r.RentConnectedCalls,0)) AS R_RentConnectedCalls
		, SUM(ISNULL(ag.RentMissedCalls,0)) AS AG_RentMissedCalls
		, SUM(ISNULL(r.RentMissedCalls,0)) AS R_RentMissedCalls
		, SUM(ISNULL(ag.RentOneWebConnectedCalls,0)) AS AG_RentOneWebConnectedCalls
		, SUM(ISNULL(r.RentOneWebConnectedCalls,0)) AS R_RentOneWebConnectedCalls
		, SUM(ISNULL(ag.RentOneWebMissedCalls,0)) AS AG_RentOneWebMissedCalls
		, SUM(ISNULL(r.RentOneWebMissedCalls,0)) AS R_RentOneWebMissedCalls
		, SUM(ISNULL(ag.RentMobileConnectedCalls,0)) AS AG_RentMobileConnectedCalls
		, SUM(ISNULL(r.RentMobileConnectedCalls,0)) AS R_RentMobileConnectedCalls
		, SUM(ISNULL(ag.RentMobileMissedCalls,0)) AS AG_RentMobileMissedCalls
		, SUM(ISNULL(r.RentMobileMissedCalls,0)) AS R_RentMobileMissedCalls
		, SUM(ISNULL(ag.RentAltRegConnectedCalls,0)) AS AG_RentAltRegConnectedCalls
		, SUM(ISNULL(r.RentAltRegConnectedCalls,0)) AS R_RentAltRegConnectedCalls
		, SUM(ISNULL(ag.RentAltRegMissedCalls,0)) AS AG_RentAltRegMissedCalls
		, SUM(ISNULL(r.RentAltRegMissedCalls,0)) AS R_RentAltRegMissedCalls
		, SUM(ISNULL(ag.LeadMailConnectedCalls,0)) AS AG_LeadMailConnectedCalls
		, SUM(ISNULL(ag.LeadMailMissedCalls,0)) AS AG_LeadMailMissedCalls
		, SUM(ISNULL(ag.SMSConnectedCalls,0)) AS AG_SMSConnectedCalls
		, SUM(ISNULL(ag.SMSMissedCalls,0)) AS AG_SMSMissedCalls
		, SUM(ISNULL(ag.MobileSEMConnectedCalls,0)) AS AG_MobileSEMConnectedCalls
		, SUM(ISNULL(ag.MobileSEMMissedCalls,0)) AS AG_MobileSEMMissedCalls
		, SUM(ISNULL(ag.SitesConnectedCalls,0)) AS AG_SitesConnectedCalls
		, SUM(ISNULL(ag.SitesMissedCalls,0)) AS AG_SitesMissedCalls
		, SUM(ISNULL(ag.AGEmailLeads,0)) AS AG_AGEmailLeads
		, SUM(ISNULL(ag.MetroEmailLeads,0)) AS AG_MetroEmailLeads
		, SUM(ISNULL(ag.NeighborhoodEmailLeads,0)) AS AG_NeighborhoodEmailLeads
		, SUM(ISNULL(ag.AIMCOEmailLeads,0)) AS AG_AIMCOEmailLeads
		, SUM(ISNULL(ag.RentalsEmailLeads,0)) AS AG_RentalsEmailLeads
		, SUM(ISNULL(ag.RentRentarEmailLeads,0)) AS AG_RentRentarEmailLeads
		, SUM(ISNULL(ag.RentalHousesEmailLeads,0)) AS AG_RentalHousesEmailLeads
		, SUM(ISNULL(ag.iPhoneEmailLeads,0)) AS AG_iPhoneEmailLeads
		, SUM(ISNULL(ag.OodleEmailLeads,0)) AS AG_OodleEmailLeads
		, SUM(ISNULL(ag.AndroidEmailLeads,0)) AS AG_AndroidEmailLeads
		, SUM(ISNULL(ag.HotpadsEmailLeads,0)) AS AG_HotpadsEmailLeads
		, SUM(ISNULL(ag.LuxuryEmailLeads,0)) AS AG_LuxuryEmailLeads
		, SUM(ISNULL(ag.CondoEmailLeads,0)) AS AG_CondoEmailLeads
		, SUM(ISNULL(ag.iPadEmailLeads,0)) AS AG_iPadEmailLeads
		, SUM(ISNULL(ag.TruliaEmailLeads,0)) AS AG_TruliaEmailLeads
		, SUM(ISNULL(r.TruliaEmailLeads,0)) AS R_TruliaEmailLeads
		, SUM(ISNULL(ag.ZillowEmailLeads,0)) AS AG_ZillowEmailLeads
		, SUM(ISNULL(ag.VerticalBrandsEmailLeads,0)) AS AG_VerticalBrandsEmailLeads
		, SUM(ISNULL(ag.RDTFeedLeads,0)) AS AG_RDTFeedLeads
		, SUM(ISNULL(ag.PropSolutionsFeedLeads,0)) AS AG_PropSolutionsFeedLeads
		, SUM(ISNULL(ag.YieldFeedLeads,0)) AS AG_YieldFeedLeads
		, SUM(ISNULL(ag.EREIFeedLeads,0)) AS AG_EREIFeedLeads
		, SUM(ISNULL(ag.YardiRCFeedLeads,0)) AS AG_YardiRCFeedLeads
		, SUM(ISNULL(ag.AGMobileEmailLeads,0)) AS AG_AGMobileEmailLeads
		, SUM(ISNULL(ag.RentalsMobileEmailLeads,0)) AS AG_RentalsMobileEmailLeads
		, SUM(ISNULL(ag.RentalsAndroidEmailLeads,0)) AS AG_RentalsAndroidEmailLeads
		, SUM(ISNULL(ag.RentalsIPhoneEmailLeads,0)) AS AG_RentalsIPhoneEmailLeads
		, SUM(ISNULL(ag.VastEmailLeads,0)) AS AG_VastEmailLeads
		, SUM(ISNULL(ag.CampusHomesOnlineEmailLeads,0)) AS AG_CampusHomesOnlineEmailLeads
		, SUM(ISNULL(ag.AGTabletEmailLeads,0)) AS AG_AGTabletEmailLeads
		, SUM(ISNULL(ag.AGKindleEmailLeads,0)) AS AG_AGKindleEmailLeads
		, SUM(ISNULL(ag.RentEmailLeads,0)) AS AG_RentEmailLeads
		, SUM(ISNULL(r.RentEmailLeads,0)) AS R_RentEmailLeads
		, SUM(ISNULL(ag.LovelyEmailLeads,0)) AS AG_LovelyEmailLeads
		, SUM(ISNULL(ag.SitesEmailLeads,0)) AS AG_SitesEmailLeads
		, MAX(ISNULL(ag.PlacementTier,0)) AS AG_PlacementTier
		, MAX(ISNULL(ag.PrintProductPoints,0)) AS AG_PrintProductPoints
		, MAX(ISNULL(ag.InternetProductPoints,0)) AS AG_InternetProductPoints
		, MAX(ISNULL(ag.LegacyLoyaltyPoints,0)) AS AG_LegacyLoyaltyPoints
		, MAX(ISNULL(ag.ContractLoyaltyPoints,0)) AS AG_ContractLoyaltyPoints
		, MAX(ISNULL(ag.MobilePoints,0)) AS AG_MobilePoints
		, MAX(ISNULL(ag.LastUpdateYMDID,0)) AS AG_LastUpdateYMDID
		, MAX(ISNULL(r.LastUpdateYMDID,0)) AS R_LastUpdateYMDID
		, MAX(ISNULL(ag.LinkedFloorPlan,0)) AS AG_LinkedFloorPlan
		, MAX(ISNULL(r.LinkedFloorPlan,0)) AS R_LinkedFloorPlan
		, MAX(ISNULL(ag.Linked3DFloorPlan,0)) AS AG_Linked3DFloorPlan
		, MAX(ISNULL(r.Linked3DFloorPlan,0)) AS R_Linked3DFloorPlan
		, MAX(ISNULL(ag.LinkedRoomPlanner,0)) AS AG_LinkedRoomPlanner
		, MAX(ISNULL(r.LinkedRoomPlanner,0)) AS R_LinkedRoomPlanner
		, MAX(ISNULL(ag.RPLRANK,0)) AS AG_RPLRANK
		, MAX(ISNULL(ag.UpsellListBold,0)) AS AG_UpsellListBold
		, MAX(ISNULL(ag.UpsellListFrontCover,0)) AS AG_UpsellListFrontCover
		, MAX(ISNULL(ag.UpsellPropPhotoFeature,0)) AS AG_UpsellPropPhotoFeature
		, MAX(ISNULL(ag.UpsellMgmtManagementCoLogo,0)) AS AG_UpsellMgmtManagementCoLogo
		, MAX(ISNULL(ag.UpsellPropPropertyLogo,0)) AS AG_UpsellPropPropertyLogo
		, MAX(ISNULL(ag.UpsellPropPremiumPackage,0)) AS AG_UpsellPropPremiumPackage
		, MAX(ISNULL(ag.UpsellListFloorplanPkg,0)) AS AG_UpsellListFloorplanPkg
		, SUM(ISNULL(ag.InternetPhoneLeads,0)) AS AG_InternetPhoneLeads
		, SUM(ISNULL(r.InternetPhoneLeads,0)) AS R_InternetPhoneLeads
		, SUM(ISNULL(ag.InternetPhoneLeads_NoMobile,0)) AS AG_InternetPhoneLeads_NoMobile
		, SUM(ISNULL(r.InternetPhoneLeads_NoMobile,0)) AS R_InternetPhoneLeads_NoMobile
		, SUM(ISNULL(ag.DigitalPhoneLeads,0)) AS AG_DigitalPhoneLeads
		, SUM(ISNULL(r.DigitalPhoneLeads,0)) AS R_DigitalPhoneLeads
		, SUM(ISNULL(ag.EmailLeads,0)) AS AG_EmailLeads
		, SUM(ISNULL(ag.InternetEmailLeads_NoMobile,0)) AS AG_InternetEmailLeads_NoMobile
		, SUM(ISNULL(r.InternetEmailLeads_NoMobile,0)) AS R_InternetEmailLeads_NoMobile
		, SUM(ISNULL(ag.DigitalEmailLeads,0)) AS AG_DigitalEmailLeads
		, SUM(ISNULL(r.DigitalEmailLeads,0)) AS R_DigitalEmailLeads
		, SUM(ISNULL(ag.AGCMissedCalls,0)) AS AG_AGCMissedCalls
		, SUM(ISNULL(ag.ASGMissedCalls,0)) AS AG_ASGMissedCalls
		, SUM(ISNULL(ag.AGCAllLeads,0)) AS AG_AGCAllLeads
		, SUM(ISNULL(ag.ASGAllLeads,0)) AS AG_ASGAllLeads
		, SUM(ISNULL(ag.AllMissedCalls,0)) AS AG_AllMissedCalls
		, SUM(ISNULL(r.AllMissedCalls,0)) AS R_AllMissedCalls
		, SUM(ISNULL(ag.AllConnectedCalls,0)) AS AG_AllConnectedCalls
		, SUM(ISNULL(r.AllConnectedCalls,0)) AS R_AllConnectedCalls
		, SUM(ISNULL(ag.AllLeads,0)) AS AG_AllLeads
		, SUM(ISNULL(r.AllLeads,0)) AS R_AllLeads
		, SUM(ISNULL(ag.AllInternetLeads_NoMobile,0)) AS AG_AllInternetLeads_NoMobile
		, SUM(ISNULL(r.AllInternetLeads_NoMobile,0)) AS R_AllInternetLeads_NoMobile
		, SUM(ISNULL(ag.AllDigitalLeads,0)) AS AG_AllDigitalLeads
		, SUM(ISNULL(r.AllDigitalLeads,0)) AS R_AllDigitalLeads
		, SUM(ISNULL(ag.ThirdPartyFeedLeads,0)) AS AG_ThirdPartyFeedLeads
		, SUM(ISNULL(ag.WebsiteCalls,0)) AS AG_WebsiteCalls
		, SUM(ISNULL(r.WebsiteCalls,0)) AS R_WebsiteCalls
		, SUM(ISNULL(ag.WebsiteEmails,0)) AS AG_WebsiteEmails
		, SUM(ISNULL(r.WebsiteEmails,0)) AS R_WebsiteEmails
		, SUM(ISNULL(ag.WebsiteLeads_Rentals,0)) AS AG_WebsiteLeads_Rentals
		, SUM(ISNULL(ag.MobileEmails,0)) AS AG_MobileEmails
		, SUM(ISNULL(r.MobileEmails,0)) AS R_MobileEmails
		, SUM(ISNULL(ag.MobileCalls,0)) AS AG_MobileCalls
		, SUM(ISNULL(r.MobileCalls,0)) AS R_MobileCalls
		, SUM(ISNULL(ag.MobileLeads_AG,0)) AS AG_MobileLeads_AG
		, SUM(ISNULL(ag.MobileLeads_Rentals,0)) AS AG_MobileLeads_Rentals
		, SUM(ISNULL(ag.MobileAllLeads,0)) AS AG_MobileAllLeads
		, SUM(ISNULL(r.MobileAllLeads,0)) AS R_MobileAllLeads
		, SUM(ISNULL(ag.AllRentLeads,0)) AS AG_AllRentLeads
		, SUM(ISNULL(ag.AllRentCalls,0)) AS AG_AllRentCalls
		, SUM(ISNULL(ag.MRSyndicationEmailLeads,0)) AS AG_MRSyndicationEmailLeads
		, SUM(ISNULL(ag.MRAGEmailLeads,0)) AS AG_MRAGEmailLeads
		, SUM(ISNULL(ag.MRAGWebPhoneLeads,0)) AS AG_MRAGWebPhoneLeads
		, SUM(ISNULL(ag.MRAppsEmailLeads,0)) AS AG_MRAppsEmailLeads
		, SUM(ISNULL(ag.MRPhoneCalls,0)) AS AG_MRPhoneCalls
		, MAX(ISNULL(r.InvoicedLeases,0)) AS R_InvoicedLeases
		, MAX(ISNULL(r.LeaseMgtCoID,0)) AS R_LeaseMgtCoID
		, SUM(ISNULL(r.MapClicks,0)) AS R_MapClicks
		, MAX(ISNULL(r.UpsellRentFeaturedPlacement,0)) AS R_UpsellRentFeaturedPlacement
		, MAX(ISNULL(r.UpsellRentListing,0)) AS R_UpsellRentListing
		, MAX(ISNULL(r.UpsellRentMetroFL,0)) AS R_UpsellRentMetroFL
		, MAX(ISNULL(r.UpsellRentNoVacancy,0)) AS R_UpsellRentNoVacancy
		, MAX(ISNULL(r.UpsellRentPTE,0)) AS R_UpsellRentPTE
		, MAX(ISNULL(r.UpsellRentRewardCard,0)) AS R_UpsellRentRewardCard
		, MAX(ISNULL(r.UpsellRentSubscriptionModel,0)) AS R_UpsellRentSubscriptionModel
		, MAX(ISNULL(r.UpsellRentVIPPlacement,0)) AS R_UpsellRentVIPPlacement
		INTO #finalresultsetcurr
		FROM #tmpmasterlist dl
		CROSS APPLY (SELECT YMDID FROM DBAUtility.Dimension.Dates dd WITH (NOLOCK) WHERE dd.YearMonth = @yearmonth) AS a
		LEFT OUTER JOIN ApartmentGuide.Mart.Listings ag WITH (NOLOCK)
			ON ag.ListingID = dl.ListingID AND ag.PropertyID = dl.AGPropertyID AND ag.YMDID = a.YMDID
		LEFT OUTER JOIN RentCom.Mart.Listings r WITH (NOLOCK)
			ON r.ListingID = dl.ListingID  AND r.PropertyID = dl.RentComPropertyID AND r.YMDID = a.YMDID
		WHERE COALESCE(ag.YearMonth,r.YearMonth) IS NOT NULL
		GROUP BY COALESCE(ag.YearMonth,r.YearMonth), dl.ListingID




		-- Get Previous information if chosen to do so
		if @PrevStartYMDID IS NOT NULL
			BEGIN
				SELECT
				COALESCE(ag.YearMonth,r.YearMonth)  AS YearMonth			--COALESCE(ag.YearMonth,r.YearMonth)
				, dl.ListingID AS ListingID
				, MAX(ISNULL(dl.AGPropertyID,0)) AS AG_PropertyID
				, MAX(ISNULL(dl.RentPropertyID,0)) AS R_RentPropertyID
				, MAX(ISNULL(dl.RentComPropertyID,0)) AS R_PropertyID
				, MAX(ISNULL(ag.ListingType,'')) AS AG_ListingType
				, MAX(ISNULL(r.ListingTypeID,0)) AS R_ListingTypeID
				, MAX(ISNULL(r.ListingType,'')) AS R_ListingType
				, MAX(ISNULL(ag.ListingTypeShort,'')) AS AG_ListingTypeShort
				, MAX(ISNULL(r.ListingTypeShort,'')) AS R_ListingTypeShort
				, MAX(ISNULL(ag.ExternalID,'')) AS AG_ExternalID
				, MAX(ISNULL(r.ExternalID,'')) AS R_ExternalID
				, MAX(ISNULL(ag.ExternalPriceCode,'')) AS AG_ExternalPriceCode
				, MAX(ISNULL(r.ExternalPriceCode,'')) AS R_ExternalPriceCode
				, MAX(ISNULL(ag.ListingStatusID,0)) AS AG_ListingStatusID
				, MAX(ISNULL(r.RentStatusID,0)) AS R_ListingStatusID
				, MAX(ISNULL(ag.TotalPhotos,0)) AS AG_TotalPhotos
				, MAX(ISNULL(r.TotalPhotos,0)) AS R_TotalPhotos
				, MAX(ISNULL(ag.ActivePhotos,0)) AS AG_ActivePhotos
				, MAX(ISNULL(r.ActivePhotos,0)) AS R_ActivePhotos
				, MAX(ISNULL(ag.TotalFloorPlans,0)) AS AG_TotalFloorPlans
				, MAX(ISNULL(r.TotalFloorPlans,0)) AS R_TotalFloorPlans
				, MAX(ISNULL(ag.ActiveFloorPlans,0)) AS AG_ActiveFloorPlans
				, MAX(ISNULL(r.ActiveFloorPlans,0)) AS R_ActiveFloorPlans
				, MAX(ISNULL(ag.TotalAmenities,0)) AS AG_TotalAmenities
				, MAX(ISNULL(r.TotalAmenities,0)) AS R_TotalAmenities
				, MAX(ISNULL(ag.ActiveAmenities,0)) AS AG_ActiveAmenities
				, MAX(ISNULL(r.ActiveAmenities,0)) AS R_ActiveAmenities
				, MAX(ISNULL(ag.ActiveHDPhotos,0)) AS AG_ActiveHDPhotos
				, MAX(ISNULL(r.ActiveHDPhotos,0)) AS R_ActiveHDPhotos
				, MAX(ISNULL(ag.ActiveHDFloorPlans,0)) AS AG_ActiveHDFloorPlans
				, MAX(ISNULL(r.ActiveHDFloorPlans,0)) AS R_ActiveHDFloorPlans
				, MAX(ISNULL(ag.ShowPricing,0)) AS AG_ShowPricing
				, MAX(ISNULL(r.ShowPricing,0)) AS R_ShowPricing
				, MAX(ISNULL(ag.ShowOfficeHours,0)) AS AG_ShowOfficeHours
				, MAX(ISNULL(r.ShowOfficeHours,0)) AS R_ShowOfficeHours
				, MAX(ISNULL(ag.ListingDescriptionLength,0)) AS AG_ListingDescriptionLength
				, MAX(ISNULL(r.ListingDescriptionLength,0)) AS R_ListingDescriptionLength
				, MAX(ISNULL(ag.UpsellListHighlighted,0)) AS AG_UpsellListHighlighted
				, MAX(ISNULL(ag.UpsellListCoupon,0)) AS AG_UpsellListCoupon
				, MAX(ISNULL(r.UpsellListCoupon,0)) AS R_UpsellListCoupon
				, MAX(ISNULL(ag.UpsellPropEmercial,0)) AS AG_UpsellPropEmercial
				, MAX(ISNULL(ag.UpsellPropCommunityVideo,0)) AS AG_UpsellPropCommunityVideo
				, MAX(ISNULL(ag.UpsellPropFeaturedCommunityPlatinum,0)) AS AG_UpsellPropFeaturedCommunityPlatinum
				, MAX(ISNULL(ag.UpsellPropFeaturedCommunityGold,0)) AS AG_UpsellPropFeaturedCommunityGold
				, MAX(ISNULL(ag.UpsellPropFeaturedCommunitySilver,0)) AS AG_UpsellPropFeaturedCommunitySilver
				, MAX(ISNULL(ag.UpsellPropVirtualBrochure,0)) AS AG_UpsellPropVirtualBrochure
				, MAX(ISNULL(ag.UpsellListCorporateListing,0)) AS AG_UpsellListCorporateListing
				, MAX(ISNULL(ag.UpsellListCollegeListing,0)) AS AG_UpsellListCollegeListing
				, MAX(ISNULL(ag.UpsellListMilitaryListing,0)) AS AG_UpsellListMilitaryListing
				, MAX(ISNULL(ag.UpsellListApartmentListing,0)) AS AG_UpsellListApartmentListing
				, MAX(ISNULL(ag.UpsellPropPhotoUpgrade,0)) AS AG_UpsellPropPhotoUpgrade
				, MAX(ISNULL(ag.UpsellMgmtManagementCoLogoDisplay,0)) AS AG_UpsellMgmtManagementCoLogoDisplay
				, MAX(ISNULL(ag.UpsellListSeniorListing,0)) AS AG_UpsellListSeniorListing
				, MAX(ISNULL(ag.UpsellPropPropertyLogoDisplay,0)) AS AG_UpsellPropPropertyLogoDisplay
				, MAX(ISNULL(ag.UpsellPropPremiumUpgrade,0)) AS AG_UpsellPropPremiumUpgrade
				, MAX(ISNULL(ag.UpsellPropVideoSpokesModel,0)) AS AG_UpsellPropVideoSpokesModel
				, MAX(ISNULL(ag.UpsellPropFrontPage,0)) AS AG_UpsellPropFrontPage
				, MAX(ISNULL(ag.UpsellPropSpanish,0)) AS AG_UpsellPropSpanish
				, MAX(ISNULL(ag.UpsellPropCallRecording,0)) AS AG_UpsellPropCallRecording
				, MAX(ISNULL(r.UpsellPropCallRecording,0)) AS R_UpsellPropCallRecording
				, MAX(ISNULL(ag.UpsellPropFormToPhone,0)) AS AG_UpsellPropFormToPhone
				, MAX(ISNULL(ag.UpsellPropRentalsPremier,0)) AS AG_UpsellPropRentalsPremier
				, MAX(ISNULL(ag.UpsellPropRentalsFeatured,0)) AS AG_UpsellPropRentalsFeatured
				, MAX(ISNULL(ag.UpsellListRentalsListing,0)) AS AG_UpsellListRentalsListing
				, MAX(ISNULL(ag.UpsellListFloorPlanUpgrade,0)) AS AG_UpsellListFloorPlanUpgrade
				, MAX(ISNULL(ag.UpsellListPayPerLead,0)) AS AG_UpsellListPayPerLead
				, MAX(ISNULL(ag.UpsellListRentalsSpotlightAd,0)) AS AG_UpsellListRentalsSpotlightAd
				, MAX(ISNULL(ag.UpsellListSpotLight,0)) AS AG_UpsellListSpotLight
				, MAX(ISNULL(ag.UpsellListPayPerLease,0)) AS AG_UpsellListPayPerLease
				, MAX(ISNULL(ag.UpsellListDiamondMetro,0)) AS AG_UpsellListDiamondMetro
				, MAX(ISNULL(ag.UpsellListDiamondCity,0)) AS AG_UpsellListDiamondCity
				, MAX(ISNULL(ag.UpsellListDiamondMax,0)) AS AG_UpsellListDiamondMax
				, MAX(ISNULL(ag.UpsellListRentalsStandard,0)) AS AG_UpsellListRentalsStandard
				, MAX(ISNULL(ag.UpsellListCommunityCarousel,0)) AS AG_UpsellListCommunityCarousel
				, MAX(ISNULL(ag.UpsellList30SecondVideo,0)) AS AG_UpsellList30SecondVideo
				, MAX(ISNULL(ag.UpsellList60SecondVideo,0)) AS AG_UpsellList60SecondVideo
				, MAX(ISNULL(ag.UpsellListRentalsCarousel,0)) AS AG_UpsellListRentalsCarousel
				, MAX(ISNULL(ag.UpsellListRentalsStandardPlus,0)) AS AG_UpsellListRentalsStandardPlus
				, MAX(ISNULL(ag.UpsellListMobileSpotLight,0)) AS AG_UpsellListMobileSpotLight
				, MAX(ISNULL(ag.UpsellPropMobileDeal,0)) AS AG_UpsellPropMobileDeal
				, MAX(ISNULL(ag.UpsellPropDynamicLeadForm,0)) AS AG_UpsellPropDynamicLeadForm
				, MAX(ISNULL(ag.UpsellListIncomeRestricted,0)) AS AG_UpsellListIncomeRestricted
				, MAX(ISNULL(ag.UpsellListPetFriendly,0)) AS AG_UpsellListPetFriendly
				, MAX(ISNULL(ag.UpsellListLuxuryCommunity,0)) AS AG_UpsellListLuxuryCommunity
				, MAX(ISNULL(ag.UpsellPropRepMon,0)) AS AG_UpsellPropRepMon
				, MAX(ISNULL(ag.UpsellPropSocialMediaMan,0)) AS AG_UpsellPropSocialMediaMan
				, MAX(ISNULL(ag.UpsellListMobileDiamond,0)) AS AG_UpsellListMobileDiamond
				, MAX(ISNULL(ag.UpsellListEZPay,0)) AS AG_UpsellListEZPay
				, MAX(ISNULL(ag.UpsellMgmtPeelAd,0)) AS AG_UpsellMgmtPeelAd
				, MAX(ISNULL(ag.UpsellListSponsoredApartment,0)) AS AG_UpsellListSponsoredApartment
				, MAX(ISNULL(ag.UpsellListHDPanoTours,0)) AS AG_UpsellListHDPanoTours
				, MAX(ISNULL(ag.UpsellListHDVideo,0)) AS AG_UpsellListHDVideo
				, MAX(ISNULL(ag.UpsellListHDPhoto,0)) AS AG_UpsellListHDPhoto
				, MAX(ISNULL(ag.UpsellList3DFloorPlan,0)) AS AG_UpsellList3DFloorPlan
				, MAX(ISNULL(ag.UpsellListAGSites,0)) AS AG_UpsellListAGSites
				, MAX(ISNULL(ag.UpsellMediaCenter,0)) AS AG_UpsellMediaCenter
				, MAX(ISNULL(ag.CR3AvgOverallRating,0)) AS AG_CR3AvgOverallRating
				, MAX(ISNULL(r.CR3AvgOverallRating,0)) AS R_CR3AvgOverallRating
				, MAX(ISNULL(ag.CommunityVideoURLFulfilled,0)) AS AG_CommunityVideoURLFulfilled
				, MAX(ISNULL(ag.HDActiveFloorPlansFulfilled,0)) AS AG_HDActiveFloorPlansFulfilled
				, MAX(ISNULL(r.HDActiveFloorPlansFulfilled,0)) AS R_HDActiveFloorPlansFulfilled
				, MAX(ISNULL(ag.HDActivePhotosFulfilled,0)) AS AG_HDActivePhotosFulfilled
				, MAX(ISNULL(r.HDActivePhotosFulfilled,0)) AS R_HDActivePhotosFulfilled
				, MAX(ISNULL(ag.HDTourURLFulfilled,0)) AS AG_HDTourURLFulfilled
				, MAX(ISNULL(ag.HDVideoURLFulfilled,0)) AS AG_HDVideoURLFulfilled
				, MAX(ISNULL(ag.LinkedFloorPlanFulfilled,0)) AS AG_LinkedFloorPlanFulfilled
				, MAX(ISNULL(r.LinkedFloorPlanFulfilled,0)) AS R_LinkedFloorPlanFulfilled
				, MAX(ISNULL(ag.VirtualTourFulfilled,0)) AS AG_VirtualTourFulfilled
				, MAX(ISNULL(ag.Linked3DFloorPlanFulfilled,0)) AS AG_Linked3DFloorPlanFulfilled
				, MAX(ISNULL(r.Linked3DFloorPlanFulfilled,0)) AS R_Linked3DFloorPlanFulfilled
				, MAX(ISNULL(ag.LinkedRoomPlannerFulfilled,0)) AS AG_LinkedRoomPlannerFulfilled
				, MAX(ISNULL(r.LinkedRoomPlannerFulfilled,0)) AS R_LinkedRoomPlannerFulfilled
				, MAX(ISNULL(ag.MobileDealFulfilled,0)) AS AG_MobileDealFulfilled
				, MAX(ISNULL(r.MobileDealFulfilled,0)) AS R_MobileDealFulfilled
				, MAX(ISNULL(ag.LowPrice,0)) AS AG_LowPrice
				, MAX(ISNULL(r.LowPrice,0)) AS R_LowPrice
				, MAX(ISNULL(ag.HighPrice,0)) AS AG_HighPrice
				, MAX(ISNULL(r.HighPrice,0)) AS R_HighPrice
				, MAX(ISNULL(ag.IsSEM,0)) AS AG_IsSEM
				, MAX(ISNULL(ag.IsOverThreshold,0)) AS AG_IsOverThreshold
				, MAX(ISNULL(ag.IsRentalPropToBeDELETED,0)) AS AG_IsRentalPropToBeDELETED
				, MAX(ISNULL(ag.CallTrackingInBook,0)) AS AG_CallTrackingInBook
				, MAX(ISNULL(ag.CouponActiveOnSite,0)) AS AG_CouponActiveOnSite
				, MAX(ISNULL(r.CouponActiveOnSite,0)) AS R_CouponActiveOnSite
				, MAX(ISNULL(ag.VerizonFIOS,0)) AS AG_VerizonFIOS
				, MAX(ISNULL(ag.ATTUverse,0)) AS AG_ATTUverse
				, MAX(ISNULL(ag.DIRECTV,0)) AS AG_DIRECTV
				, MAX(ISNULL(ag.BrightHouse,0)) AS AG_BrightHouse
				, MAX(ISNULL(ag.Charter,0)) AS AG_Charter
				, MAX(ISNULL(ag.XfinitySP,0)) AS AG_XfinitySP
				, MAX(ISNULL(ag.XfinityDP,0)) AS AG_XfinityDP
				, MAX(ISNULL(ag.XfinityTP,0)) AS AG_XfinityTP
				, MAX(ISNULL(ag.TimeWarner,0)) AS AG_TimeWarner
				, MAX(ISNULL(ag.Ranking,0)) AS AG_Ranking
				, MAX(ISNULL(ag.NumericRank,0)) AS AG_NumericRank
				, SUM(ISNULL(ag.UniqueVisits,0)) AS AG_UniqueVisits
				, SUM(ISNULL(r.UniqueVisits,0)) AS R_UniqueVisits
				, SUM(ISNULL(ag.UniqueVisits_Mobile,0)) AS AG_UniqueVisits_Mobile
				, SUM(ISNULL(ag.UniqueVisits_Sites,0)) AS AG_UniqueVisits_Sites
				, SUM(ISNULL(ag.ViewsListingPage,0)) AS AG_ViewsListingPage
				, SUM(ISNULL(ag.ViewsListingPage_Mobile,0)) AS AG_ViewsListingPage_Mobile
				, SUM(ISNULL(ag.ViewsListingPage_Sites,0)) AS AG_ViewsListingPage_Sites
				, SUM(ISNULL(ag.ViewsEmercial,0)) AS AG_ViewsEmercial
				, SUM(ISNULL(ag.ViewsVirtualBrochure,0)) AS AG_ViewsVirtualBrochure
				, SUM(ISNULL(ag.ClicksSpotlightListing,0)) AS AG_ClicksSpotlightListing
				, SUM(ISNULL(ag.ClicksCommunityVideo,0)) AS AG_ClicksCommunityVideo
				, SUM(ISNULL(ag.ClicksSpotlightCommunityVideo,0)) AS AG_ClicksSpotlightCommunityVideo
				, SUM(ISNULL(ag.ClicksListingWebLink,0)) AS AG_ClicksListingWebLink
				, SUM(ISNULL(ag.ClicksMgtCoWebLink,0)) AS AG_ClicksMgtCoWebLink
				, SUM(ISNULL(r.ClicksMgtCoWebLink,0)) AS R_ClicksMgtCoWebLink
				, SUM(ISNULL(ag.ClicksListingMap,0)) AS AG_ClicksListingMap
				, SUM(ISNULL(ag.ClicksOnlineAppt,0)) AS AG_ClicksOnlineAppt
				, SUM(ISNULL(ag.ClicksOnlineApptSubmit,0)) AS AG_ClicksOnlineApptSubmit
				, SUM(ISNULL(ag.ClicksOnlineAppl,0)) AS AG_ClicksOnlineAppl
				, SUM(ISNULL(ag.ClicksOnlineApplSubmit,0)) AS AG_ClicksOnlineApplSubmit
				, SUM(ISNULL(ag.ClicksOnlineApptCR,0)) AS AG_ClicksOnlineApptCR
				, SUM(ISNULL(ag.ClicksOnlineApplCR,0)) AS AG_ClicksOnlineApplCR
				, SUM(ISNULL(ag.ClicksPrintableGuide,0)) AS AG_ClicksPrintableGuide
				, SUM(ISNULL(ag.ClicksWeCanCallYou,0)) AS AG_ClicksWeCanCallYou
				, SUM(ISNULL(ag.ClicksMapDirections,0)) AS AG_ClicksMapDirections
				, SUM(ISNULL(ag.ClicksLeadSubmission,0)) AS AG_ClicksLeadSubmission
				, SUM(ISNULL(ag.ClicksSpotlightLeadSubmission,0)) AS AG_ClicksSpotlightLeadSubmission
				, SUM(ISNULL(ag.ClicksPhotos,0)) AS AG_ClicksPhotos
				, SUM(ISNULL(ag.ClicksSpotlightPhotos,0)) AS AG_ClicksSpotlightPhotos
				, SUM(ISNULL(ag.ClicksSpotlightPhotoPopup,0)) AS AG_ClicksSpotlightPhotoPopup
				, SUM(ISNULL(ag.ClicksFloorPlans,0)) AS AG_ClicksFloorPlans
				, SUM(ISNULL(ag.ClicksCheckYourCredit,0)) AS AG_ClicksCheckYourCredit
				, SUM(ISNULL(ag.ClicksWebBuilderLink,0)) AS AG_ClicksWebBuilderLink
				, SUM(ISNULL(ag.ClicksFeaturedMgtCo,0)) AS AG_ClicksFeaturedMgtCo
				, SUM(ISNULL(ag.ClicksFrontPagePropLead,0)) AS AG_ClicksFrontPagePropLead
				, SUM(ISNULL(ag.ClicksLuxurySlideshow,0)) AS AG_ClicksLuxurySlideshow
				, SUM(ISNULL(ag.ClicksPanoramicTours,0)) AS AG_ClicksPanoramicTours
				, SUM(ISNULL(ag.ClicksHDVideos,0)) AS AG_ClicksHDVideos
				, SUM(ISNULL(ag.ClicksHDPhotos,0)) AS AG_ClicksHDPhotos
				, SUM(ISNULL(ag.ClicksMgmtCoPeelAd,0)) AS AG_ClicksMgmtCoPeelAd
				, SUM(ISNULL(ag.ClicksReserveNow,0)) AS AG_ClicksReserveNow
				, SUM(ISNULL(ag.ImprSearchResults,0)) AS AG_ImprSearchResults
				, SUM(ISNULL(r.ImprSearchResults,0)) AS R_ImprSearchResults
				, SUM(ISNULL(ag.ImprSearchResults_Rent,0)) AS AG_ImprSearchResults_Rent
				, SUM(ISNULL(ag.ImprFrontCover,0)) AS AG_ImprFrontCover
				, SUM(ISNULL(ag.ImprVisitCount,0)) AS AG_ImprVisitCount
				, SUM(ISNULL(ag.TextMsgWeb,0)) AS AG_TextMsgWeb
				, SUM(ISNULL(ag.TextMsgMobile,0)) AS AG_TextMsgMobile
				, MAX(ISNULL(ag.CheckListingAvail,0)) AS AG_CheckListingAvail
				, SUM(ISNULL(ag.ClicksSpotlightListingAvail,0)) AS AG_ClicksSpotlightListingAvail
				, SUM(ISNULL(ag.ClicksVirtualTourListingAvail,0)) AS AG_ClicksVirtualTourListingAvail
				, SUM(ISNULL(ag.AGCPrintConnectedCalls,0)) AS AG_AGCPrintConnectedCalls
				, SUM(ISNULL(ag.AGCPrintMissedCalls,0)) AS AG_AGCPrintMissedCalls
				, SUM(ISNULL(ag.ASGPrintConnectedCalls,0)) AS AG_ASGPrintConnectedCalls
				, SUM(ISNULL(ag.ASGPrintMissedCalls,0)) AS AG_ASGPrintMissedCalls
				, SUM(ISNULL(ag.WebConnectedCalls,0)) AS AG_WebConnectedCalls
				, SUM(ISNULL(ag.WebMissedCalls,0)) AS AG_WebMissedCalls
				, SUM(ISNULL(ag.RentalsConnectedCalls,0)) AS AG_RentalsConnectedCalls
				, SUM(ISNULL(ag.RentalsMissedCalls,0)) AS AG_RentalsMissedCalls
				, SUM(ISNULL(ag.CTCConnectedCalls,0)) AS AG_CTCConnectedCalls
				, SUM(ISNULL(ag.CTCMissedCalls,0)) AS AG_CTCMissedCalls
				, SUM(ISNULL(ag.PaidSPConnectedCalls,0)) AS AG_PaidSPConnectedCalls
				, SUM(ISNULL(ag.PaidSPMissedCalls,0)) AS AG_PaidSPMissedCalls
				, SUM(ISNULL(ag.CombinedFeedsConnectedCalls,0)) AS AG_CombinedFeedsConnectedCalls
				, SUM(ISNULL(ag.CombinedFeedsMissedCalls,0)) AS AG_CombinedFeedsMissedCalls
				, SUM(ISNULL(ag.GoogleConnectedCalls,0)) AS AG_GoogleConnectedCalls
				, SUM(ISNULL(ag.GoogleMissedCalls,0)) AS AG_GoogleMissedCalls
				, SUM(ISNULL(ag.PPCConnectedCalls,0)) AS AG_PPCConnectedCalls
				, SUM(ISNULL(ag.PPCMissedCalls,0)) AS AG_PPCMissedCalls
				, SUM(ISNULL(ag.LuxuryConnectedCalls,0)) AS AG_LuxuryConnectedCalls
				, SUM(ISNULL(ag.LuxuryMissedCalls,0)) AS AG_LuxuryMissedCalls
				, SUM(ISNULL(ag.MarchexConnectedCalls,0)) AS AG_MarchexConnectedCalls
				, SUM(ISNULL(ag.MarchexMissedCalls,0)) AS AG_MarchexMissedCalls
				, SUM(ISNULL(ag.CraigsListConnectedCalls,0)) AS AG_CraigsListConnectedCalls
				, SUM(ISNULL(ag.CraigsListMissedCalls,0)) AS AG_CraigsListMissedCalls
				, SUM(ISNULL(ag.WebLocalTrackingNumberConnectedCalls,0)) AS AG_WebLocalTrackingNumberConnectedCalls
				, SUM(ISNULL(ag.WebLocalTrackingNumberMissedCalls,0)) AS AG_WebLocalTrackingNumberMissedCalls
				, SUM(ISNULL(ag.RentalsLocalConnectedCalls,0)) AS AG_RentalsLocalConnectedCalls
				, SUM(ISNULL(ag.RentalsLocalMissedCalls,0)) AS AG_RentalsLocalMissedCalls
				, SUM(ISNULL(ag.VideoConnectedCalls,0)) AS AG_VideoConnectedCalls
				, SUM(ISNULL(ag.VideoMissedCalls,0)) AS AG_VideoMissedCalls
				, SUM(ISNULL(ag.SEMConnectedCalls,0)) AS AG_SEMConnectedCalls
				, SUM(ISNULL(ag.SEMMissedCalls,0)) AS AG_SEMMissedCalls
				, SUM(ISNULL(ag.TruliaConnectedCalls,0)) AS AG_TruliaConnectedCalls
				, SUM(ISNULL(ag.TruliaMissedCalls,0)) AS AG_TruliaMissedCalls
				, SUM(ISNULL(ag.RentConnectedCalls,0)) AS AG_RentConnectedCalls
				, SUM(ISNULL(r.RentConnectedCalls,0)) AS R_RentConnectedCalls
				, SUM(ISNULL(ag.RentMissedCalls,0)) AS AG_RentMissedCalls
				, SUM(ISNULL(r.RentMissedCalls,0)) AS R_RentMissedCalls
				, SUM(ISNULL(ag.RentOneWebConnectedCalls,0)) AS AG_RentOneWebConnectedCalls
				, SUM(ISNULL(r.RentOneWebConnectedCalls,0)) AS R_RentOneWebConnectedCalls
				, SUM(ISNULL(ag.RentOneWebMissedCalls,0)) AS AG_RentOneWebMissedCalls
				, SUM(ISNULL(r.RentOneWebMissedCalls,0)) AS R_RentOneWebMissedCalls
				, SUM(ISNULL(ag.RentMobileConnectedCalls,0)) AS AG_RentMobileConnectedCalls
				, SUM(ISNULL(r.RentMobileConnectedCalls,0)) AS R_RentMobileConnectedCalls
				, SUM(ISNULL(ag.RentMobileMissedCalls,0)) AS AG_RentMobileMissedCalls
				, SUM(ISNULL(r.RentMobileMissedCalls,0)) AS R_RentMobileMissedCalls
				, SUM(ISNULL(ag.RentAltRegConnectedCalls,0)) AS AG_RentAltRegConnectedCalls
				, SUM(ISNULL(r.RentAltRegConnectedCalls,0)) AS R_RentAltRegConnectedCalls
				, SUM(ISNULL(ag.RentAltRegMissedCalls,0)) AS AG_RentAltRegMissedCalls
				, SUM(ISNULL(r.RentAltRegMissedCalls,0)) AS R_RentAltRegMissedCalls
				, SUM(ISNULL(ag.LeadMailConnectedCalls,0)) AS AG_LeadMailConnectedCalls
				, SUM(ISNULL(ag.LeadMailMissedCalls,0)) AS AG_LeadMailMissedCalls
				, SUM(ISNULL(ag.SMSConnectedCalls,0)) AS AG_SMSConnectedCalls
				, SUM(ISNULL(ag.SMSMissedCalls,0)) AS AG_SMSMissedCalls
				, SUM(ISNULL(ag.MobileSEMConnectedCalls,0)) AS AG_MobileSEMConnectedCalls
				, SUM(ISNULL(ag.MobileSEMMissedCalls,0)) AS AG_MobileSEMMissedCalls
				, SUM(ISNULL(ag.SitesConnectedCalls,0)) AS AG_SitesConnectedCalls
				, SUM(ISNULL(ag.SitesMissedCalls,0)) AS AG_SitesMissedCalls
				, SUM(ISNULL(ag.AGEmailLeads,0)) AS AG_AGEmailLeads
				, SUM(ISNULL(ag.MetroEmailLeads,0)) AS AG_MetroEmailLeads
				, SUM(ISNULL(ag.NeighborhoodEmailLeads,0)) AS AG_NeighborhoodEmailLeads
				, SUM(ISNULL(ag.AIMCOEmailLeads,0)) AS AG_AIMCOEmailLeads
				, SUM(ISNULL(ag.RentalsEmailLeads,0)) AS AG_RentalsEmailLeads
				, SUM(ISNULL(ag.RentRentarEmailLeads,0)) AS AG_RentRentarEmailLeads
				, SUM(ISNULL(ag.RentalHousesEmailLeads,0)) AS AG_RentalHousesEmailLeads
				, SUM(ISNULL(ag.iPhoneEmailLeads,0)) AS AG_iPhoneEmailLeads
				, SUM(ISNULL(ag.OodleEmailLeads,0)) AS AG_OodleEmailLeads
				, SUM(ISNULL(ag.AndroidEmailLeads,0)) AS AG_AndroidEmailLeads
				, SUM(ISNULL(ag.HotpadsEmailLeads,0)) AS AG_HotpadsEmailLeads
				, SUM(ISNULL(ag.LuxuryEmailLeads,0)) AS AG_LuxuryEmailLeads
				, SUM(ISNULL(ag.CondoEmailLeads,0)) AS AG_CondoEmailLeads
				, SUM(ISNULL(ag.iPadEmailLeads,0)) AS AG_iPadEmailLeads
				, SUM(ISNULL(ag.TruliaEmailLeads,0)) AS AG_TruliaEmailLeads
				, SUM(ISNULL(r.TruliaEmailLeads,0)) AS R_TruliaEmailLeads
				, SUM(ISNULL(ag.ZillowEmailLeads,0)) AS AG_ZillowEmailLeads
				, SUM(ISNULL(ag.VerticalBrandsEmailLeads,0)) AS AG_VerticalBrandsEmailLeads
				, SUM(ISNULL(ag.RDTFeedLeads,0)) AS AG_RDTFeedLeads
				, SUM(ISNULL(ag.PropSolutionsFeedLeads,0)) AS AG_PropSolutionsFeedLeads
				, SUM(ISNULL(ag.YieldFeedLeads,0)) AS AG_YieldFeedLeads
				, SUM(ISNULL(ag.EREIFeedLeads,0)) AS AG_EREIFeedLeads
				, SUM(ISNULL(ag.YardiRCFeedLeads,0)) AS AG_YardiRCFeedLeads
				, SUM(ISNULL(ag.AGMobileEmailLeads,0)) AS AG_AGMobileEmailLeads
				, SUM(ISNULL(ag.RentalsMobileEmailLeads,0)) AS AG_RentalsMobileEmailLeads
				, SUM(ISNULL(ag.RentalsAndroidEmailLeads,0)) AS AG_RentalsAndroidEmailLeads
				, SUM(ISNULL(ag.RentalsIPhoneEmailLeads,0)) AS AG_RentalsIPhoneEmailLeads
				, SUM(ISNULL(ag.VastEmailLeads,0)) AS AG_VastEmailLeads
				, SUM(ISNULL(ag.CampusHomesOnlineEmailLeads,0)) AS AG_CampusHomesOnlineEmailLeads
				, SUM(ISNULL(ag.AGTabletEmailLeads,0)) AS AG_AGTabletEmailLeads
				, SUM(ISNULL(ag.AGKindleEmailLeads,0)) AS AG_AGKindleEmailLeads
				, SUM(ISNULL(ag.RentEmailLeads,0)) AS AG_RentEmailLeads
				, SUM(ISNULL(r.RentEmailLeads,0)) AS R_RentEmailLeads
				, SUM(ISNULL(ag.LovelyEmailLeads,0)) AS AG_LovelyEmailLeads
				, SUM(ISNULL(ag.SitesEmailLeads,0)) AS AG_SitesEmailLeads
				, MAX(ISNULL(ag.PlacementTier,0)) AS AG_PlacementTier
				, MAX(ISNULL(ag.PrintProductPoints,0)) AS AG_PrintProductPoints
				, MAX(ISNULL(ag.InternetProductPoints,0)) AS AG_InternetProductPoints
				, MAX(ISNULL(ag.LegacyLoyaltyPoints,0)) AS AG_LegacyLoyaltyPoints
				, MAX(ISNULL(ag.ContractLoyaltyPoints,0)) AS AG_ContractLoyaltyPoints
				, MAX(ISNULL(ag.MobilePoints,0)) AS AG_MobilePoints
				, MAX(ISNULL(ag.LastUpdateYMDID,0)) AS AG_LastUpdateYMDID
				, MAX(ISNULL(r.LastUpdateYMDID,0)) AS R_LastUpdateYMDID
				, MAX(ISNULL(ag.LinkedFloorPlan,0)) AS AG_LinkedFloorPlan
				, MAX(ISNULL(r.LinkedFloorPlan,0)) AS R_LinkedFloorPlan
				, MAX(ISNULL(ag.Linked3DFloorPlan,0)) AS AG_Linked3DFloorPlan
				, MAX(ISNULL(r.Linked3DFloorPlan,0)) AS R_Linked3DFloorPlan
				, MAX(ISNULL(ag.LinkedRoomPlanner,0)) AS AG_LinkedRoomPlanner
				, MAX(ISNULL(r.LinkedRoomPlanner,0)) AS R_LinkedRoomPlanner
				, MAX(ISNULL(ag.RPLRANK,0)) AS AG_RPLRANK
				, MAX(ISNULL(ag.UpsellListBold,0)) AS AG_UpsellListBold
				, MAX(ISNULL(ag.UpsellListFrontCover,0)) AS AG_UpsellListFrontCover
				, MAX(ISNULL(ag.UpsellPropPhotoFeature,0)) AS AG_UpsellPropPhotoFeature
				, MAX(ISNULL(ag.UpsellMgmtManagementCoLogo,0)) AS AG_UpsellMgmtManagementCoLogo
				, MAX(ISNULL(ag.UpsellPropPropertyLogo,0)) AS AG_UpsellPropPropertyLogo
				, MAX(ISNULL(ag.UpsellPropPremiumPackage,0)) AS AG_UpsellPropPremiumPackage
				, MAX(ISNULL(ag.UpsellListFloorplanPkg,0)) AS AG_UpsellListFloorplanPkg
				, SUM(ISNULL(ag.InternetPhoneLeads,0)) AS AG_InternetPhoneLeads
				, SUM(ISNULL(r.InternetPhoneLeads,0)) AS R_InternetPhoneLeads
				, SUM(ISNULL(ag.InternetPhoneLeads_NoMobile,0)) AS AG_InternetPhoneLeads_NoMobile
				, SUM(ISNULL(r.InternetPhoneLeads_NoMobile,0)) AS R_InternetPhoneLeads_NoMobile
				, SUM(ISNULL(ag.DigitalPhoneLeads,0)) AS AG_DigitalPhoneLeads
				, SUM(ISNULL(r.DigitalPhoneLeads,0)) AS R_DigitalPhoneLeads
				, SUM(ISNULL(ag.EmailLeads,0)) AS AG_EmailLeads
				, SUM(ISNULL(ag.InternetEmailLeads_NoMobile,0)) AS AG_InternetEmailLeads_NoMobile
				, SUM(ISNULL(r.InternetEmailLeads_NoMobile,0)) AS R_InternetEmailLeads_NoMobile
				, SUM(ISNULL(ag.DigitalEmailLeads,0)) AS AG_DigitalEmailLeads
				, SUM(ISNULL(r.DigitalEmailLeads,0)) AS R_DigitalEmailLeads
				, SUM(ISNULL(ag.AGCMissedCalls,0)) AS AG_AGCMissedCalls
				, SUM(ISNULL(ag.ASGMissedCalls,0)) AS AG_ASGMissedCalls
				, SUM(ISNULL(ag.AGCAllLeads,0)) AS AG_AGCAllLeads
				, SUM(ISNULL(ag.ASGAllLeads,0)) AS AG_ASGAllLeads
				, SUM(ISNULL(ag.AllMissedCalls,0)) AS AG_AllMissedCalls
				, SUM(ISNULL(r.AllMissedCalls,0)) AS R_AllMissedCalls
				, SUM(ISNULL(ag.AllConnectedCalls,0)) AS AG_AllConnectedCalls
				, SUM(ISNULL(r.AllConnectedCalls,0)) AS R_AllConnectedCalls
				, SUM(ISNULL(ag.AllLeads,0)) AS AG_AllLeads
				, SUM(ISNULL(r.AllLeads,0)) AS R_AllLeads
				, SUM(ISNULL(ag.AllInternetLeads_NoMobile,0)) AS AG_AllInternetLeads_NoMobile
				, SUM(ISNULL(r.AllInternetLeads_NoMobile,0)) AS R_AllInternetLeads_NoMobile
				, SUM(ISNULL(ag.AllDigitalLeads,0)) AS AG_AllDigitalLeads
				, SUM(ISNULL(r.AllDigitalLeads,0)) AS R_AllDigitalLeads
				, SUM(ISNULL(ag.ThirdPartyFeedLeads,0)) AS AG_ThirdPartyFeedLeads
				, SUM(ISNULL(ag.WebsiteCalls,0)) AS AG_WebsiteCalls
				, SUM(ISNULL(r.WebsiteCalls,0)) AS R_WebsiteCalls
				, SUM(ISNULL(ag.WebsiteEmails,0)) AS AG_WebsiteEmails
				, SUM(ISNULL(r.WebsiteEmails,0)) AS R_WebsiteEmails
				, SUM(ISNULL(ag.WebsiteLeads_Rentals,0)) AS AG_WebsiteLeads_Rentals
				, SUM(ISNULL(ag.MobileEmails,0)) AS AG_MobileEmails
				, SUM(ISNULL(r.MobileEmails,0)) AS R_MobileEmails
				, SUM(ISNULL(ag.MobileCalls,0)) AS AG_MobileCalls
				, SUM(ISNULL(r.MobileCalls,0)) AS R_MobileCalls
				, SUM(ISNULL(ag.MobileLeads_AG,0)) AS AG_MobileLeads_AG
				, SUM(ISNULL(ag.MobileLeads_Rentals,0)) AS AG_MobileLeads_Rentals
				, SUM(ISNULL(ag.MobileAllLeads,0)) AS AG_MobileAllLeads
				, SUM(ISNULL(r.MobileAllLeads,0)) AS R_MobileAllLeads
				, SUM(ISNULL(ag.AllRentLeads,0)) AS AG_AllRentLeads
				, SUM(ISNULL(ag.AllRentCalls,0)) AS AG_AllRentCalls
				, SUM(ISNULL(ag.MRSyndicationEmailLeads,0)) AS AG_MRSyndicationEmailLeads
				, SUM(ISNULL(ag.MRAGEmailLeads,0)) AS AG_MRAGEmailLeads
				, SUM(ISNULL(ag.MRAGWebPhoneLeads,0)) AS AG_MRAGWebPhoneLeads
				, SUM(ISNULL(ag.MRAppsEmailLeads,0)) AS AG_MRAppsEmailLeads
				, SUM(ISNULL(ag.MRPhoneCalls,0)) AS AG_MRPhoneCalls
				, MAX(ISNULL(r.InvoicedLeases,0)) AS R_InvoicedLeases
				, MAX(ISNULL(r.LeaseMgtCoID,0)) AS R_LeaseMgtCoID
				, SUM(ISNULL(r.MapClicks,0)) AS R_MapClicks
				, MAX(ISNULL(r.UpsellRentFeaturedPlacement,0)) AS R_UpsellRentFeaturedPlacement
				, MAX(ISNULL(r.UpsellRentListing,0)) AS R_UpsellRentListing
				, MAX(ISNULL(r.UpsellRentMetroFL,0)) AS R_UpsellRentMetroFL
				, MAX(ISNULL(r.UpsellRentNoVacancy,0)) AS R_UpsellRentNoVacancy
				, MAX(ISNULL(r.UpsellRentPTE,0)) AS R_UpsellRentPTE
				, MAX(ISNULL(r.UpsellRentRewardCard,0)) AS R_UpsellRentRewardCard
				, MAX(ISNULL(r.UpsellRentSubscriptionModel,0)) AS R_UpsellRentSubscriptionModel
				, MAX(ISNULL(r.UpsellRentVIPPlacement,0)) AS R_UpsellRentVIPPlacement
				INTO #finalresultsetprev
				FROM #tmpmasterlist dl
				CROSS APPLY (SELECT YMDID FROM DBAUtility.Dimension.Dates dd WITH (NOLOCK) WHERE dd.YearMonth = @prevyearmonth) AS a
				LEFT OUTER JOIN ApartmentGuide.Mart.Listings ag WITH (NOLOCK)
					ON ag.ListingID = dl.ListingID AND ag.YMDID = a.YMDID
				LEFT OUTER JOIN RentCom.Mart.Listings r WITH (NOLOCK)
					ON r.ListingID = dl.ListingID AND r.YMDID = a.YMDID
				WHERE COALESCE(ag.YearMonth,r.YearMonth) IS NOT NULL
				GROUP BY COALESCE(ag.YearMonth,r.YearMonth), dl.ListingID	




			

			END


	END TRY
	BEGIN CATCH
		SELECT 
			@ErrorMessage		= ERROR_MESSAGE(),
			@ErrorNumber		= ERROR_NUMBER(),
			@ErrorSeverity		= ERROR_SEVERITY(),
			@ErrorState			= ERROR_STATE(),
			@ErrorLine			= ERROR_LINE(),
			@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');
		
		SET @ErrorMessage = 'Attempting to create temp table with data - ' + @ErrorMessage

		raiserror(@ErrorMessage,16,1) with log;

		RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.

	END CATCH





	--Now mart them
	
	BEGIN TRY
		if EXISTS (SELECT ListingID FROM #finalresultsetcurr WHERE YearMonth = @yearmonth)
			BEGIN
				BEGIN TRANSACTION
					-- Mart marting
					DELETE FROM Mart.ListingsCombinedAGRent
					WHERE YearMonth = @yearmonth
			
					INSERT INTO Mart.ListingsCombinedAGRent
					SELECT YearMonth
					, ListingID
					, AG_PropertyID
					, R_RentPropertyID
					, R_PropertyID
					, AG_ListingType
					, R_ListingTypeID
					, R_ListingType
					, AG_ListingTypeShort
					, R_ListingTypeShort
					, AG_ExternalID
					, R_ExternalID
					, AG_ExternalPriceCode
					, R_ExternalPriceCode
					, AG_ListingStatusID
					, R_ListingStatusID
					, CONVERT(datetime, CONVERT(varchar(10),@EndYMDDate,112)) AS ThruDate
					, @rundate AS LastUpdate
					, AG_TotalPhotos
					, R_TotalPhotos
					, AG_ActivePhotos
					, R_ActivePhotos
					, AG_TotalFloorPlans
					, R_TotalFloorPlans
					, AG_ActiveFloorPlans
					, R_ActiveFloorPlans
					, AG_TotalAmenities
					, R_TotalAmenities
					, AG_ActiveAmenities
					, R_ActiveAmenities
					, AG_ActiveHDPhotos
					, R_ActiveHDPhotos
					, AG_ActiveHDFloorPlans
					, R_ActiveHDFloorPlans
					, AG_ShowPricing
					, R_ShowPricing
					, AG_ShowOfficeHours
					, R_ShowOfficeHours
					, AG_ListingDescriptionLength
					, R_ListingDescriptionLength
					, AG_UpsellListHighlighted
					, AG_UpsellListCoupon
					, R_UpsellListCoupon
					, AG_UpsellPropEmercial
					, AG_UpsellPropCommunityVideo
					, AG_UpsellPropFeaturedCommunityPlatinum
					, AG_UpsellPropFeaturedCommunityGold
					, AG_UpsellPropFeaturedCommunitySilver
					, AG_UpsellPropVirtualBrochure
					, AG_UpsellListCorporateListing
					, AG_UpsellListCollegeListing
					, AG_UpsellListMilitaryListing
					, AG_UpsellListApartmentListing
					, AG_UpsellPropPhotoUpgrade
					, AG_UpsellMgmtManagementCoLogoDisplay
					, AG_UpsellListSeniorListing
					, AG_UpsellPropPropertyLogoDisplay
					, AG_UpsellPropPremiumUpgrade
					, AG_UpsellPropVideoSpokesModel
					, AG_UpsellPropFrontPage
					, AG_UpsellPropSpanish
					, AG_UpsellPropCallRecording
					, R_UpsellPropCallRecording
					, AG_UpsellPropFormToPhone
					, AG_UpsellPropRentalsPremier
					, AG_UpsellPropRentalsFeatured
					, AG_UpsellListRentalsListing
					, AG_UpsellListFloorPlanUpgrade
					, AG_UpsellListPayPerLead
					, AG_UpsellListRentalsSpotlightAd
					, AG_UpsellListSpotLight
					, AG_UpsellListPayPerLease
					, AG_UpsellListDiamondMetro
					, AG_UpsellListDiamondCity
					, AG_UpsellListDiamondMax
					, AG_UpsellListRentalsStandard
					, AG_UpsellListCommunityCarousel
					, AG_UpsellList30SecondVideo
					, AG_UpsellList60SecondVideo
					, AG_UpsellListRentalsCarousel
					, AG_UpsellListRentalsStandardPlus
					, AG_UpsellListMobileSpotLight
					, AG_UpsellPropMobileDeal
					, AG_UpsellPropDynamicLeadForm
					, AG_UpsellListIncomeRestricted
					, AG_UpsellListPetFriendly
					, AG_UpsellListLuxuryCommunity
					, AG_UpsellPropRepMon
					, AG_UpsellPropSocialMediaMan
					, AG_UpsellListMobileDiamond
					, AG_UpsellListEZPay
					, AG_UpsellMgmtPeelAd
					, AG_UpsellListSponsoredApartment
					, AG_UpsellListHDPanoTours
					, AG_UpsellListHDVideo
					, AG_UpsellListHDPhoto
					, AG_UpsellList3DFloorPlan
					, AG_UpsellListAGSites
					, AG_UpsellMediaCenter
					, AG_CR3AvgOverallRating
					, R_CR3AvgOverallRating
					, AG_CommunityVideoURLFulfilled
					, AG_HDActiveFloorPlansFulfilled
					, R_HDActiveFloorPlansFulfilled
					, AG_HDActivePhotosFulfilled
					, R_HDActivePhotosFulfilled
					, AG_HDTourURLFulfilled
					, AG_HDVideoURLFulfilled
					, AG_LinkedFloorPlanFulfilled
					, R_LinkedFloorPlanFulfilled
					, AG_VirtualTourFulfilled
					, AG_Linked3DFloorPlanFulfilled
					, R_Linked3DFloorPlanFulfilled
					, AG_LinkedRoomPlannerFulfilled
					, R_LinkedRoomPlannerFulfilled
					, AG_MobileDealFulfilled
					, R_MobileDealFulfilled
					, AG_LowPrice
					, R_LowPrice
					, AG_HighPrice
					, R_HighPrice
					, AG_IsSEM
					, AG_IsOverThreshold
					, AG_IsRentalPropToBeDELETED
					, AG_CallTrackingInBook
					, AG_CouponActiveOnSite
					, R_CouponActiveOnSite
					, AG_VerizonFIOS
					, AG_ATTUverse
					, AG_DIRECTV
					, AG_BrightHouse
					, AG_Charter
					, AG_XfinitySP
					, AG_XfinityDP
					, AG_XfinityTP
					, AG_TimeWarner
					, AG_Ranking
					, AG_NumericRank
					, AG_UniqueVisits
					, R_UniqueVisits
					, AG_UniqueVisits_Mobile
					, AG_UniqueVisits_Sites
					, AG_ViewsListingPage
					, AG_ViewsListingPage_Mobile
					, AG_ViewsListingPage_Sites
					, AG_ViewsEmercial
					, AG_ViewsVirtualBrochure
					, AG_ClicksSpotlightListing
					, AG_ClicksCommunityVideo
					, AG_ClicksSpotlightCommunityVideo
					, AG_ClicksListingWebLink
					, AG_ClicksMgtCoWebLink
					, R_ClicksMgtCoWebLink
					, AG_ClicksListingMap
					, AG_ClicksOnlineAppt
					, AG_ClicksOnlineApptSubmit
					, AG_ClicksOnlineAppl
					, AG_ClicksOnlineApplSubmit
					, AG_ClicksOnlineApptCR
					, AG_ClicksOnlineApplCR
					, AG_ClicksPrintableGuide
					, AG_ClicksWeCanCallYou
					, AG_ClicksMapDirections
					, AG_ClicksLeadSubmission
					, AG_ClicksSpotlightLeadSubmission
					, AG_ClicksPhotos
					, AG_ClicksSpotlightPhotos
					, AG_ClicksSpotlightPhotoPopup
					, AG_ClicksFloorPlans
					, AG_ClicksCheckYourCredit
					, AG_ClicksWebBuilderLink
					, AG_ClicksFeaturedMgtCo
					, AG_ClicksFrontPagePropLead
					, AG_ClicksLuxurySlideshow
					, AG_ClicksPanoramicTours
					, AG_ClicksHDVideos
					, AG_ClicksHDPhotos
					, AG_ClicksMgmtCoPeelAd
					, AG_ClicksReserveNow
					, AG_ImprSearchResults
					, R_ImprSearchResults
					, AG_ImprSearchResults_Rent
					, AG_ImprFrontCover
					, AG_ImprVisitCount
					, AG_TextMsgWeb
					, AG_TextMsgMobile
					, AG_CheckListingAvail
					, AG_ClicksSpotlightListingAvail
					, AG_ClicksVirtualTourListingAvail
					, AG_AGCPrintConnectedCalls
					, AG_AGCPrintMissedCalls
					, AG_ASGPrintConnectedCalls
					, AG_ASGPrintMissedCalls
					, AG_WebConnectedCalls
					, AG_WebMissedCalls
					, AG_RentalsConnectedCalls
					, AG_RentalsMissedCalls
					, AG_CTCConnectedCalls
					, AG_CTCMissedCalls
					, AG_PaidSPConnectedCalls
					, AG_PaidSPMissedCalls
					, AG_CombinedFeedsConnectedCalls
					, AG_CombinedFeedsMissedCalls
					, AG_GoogleConnectedCalls
					, AG_GoogleMissedCalls
					, AG_PPCConnectedCalls
					, AG_PPCMissedCalls
					, AG_LuxuryConnectedCalls
					, AG_LuxuryMissedCalls
					, AG_MarchexConnectedCalls
					, AG_MarchexMissedCalls
					, AG_CraigsListConnectedCalls
					, AG_CraigsListMissedCalls
					, AG_WebLocalTrackingNumberConnectedCalls
					, AG_WebLocalTrackingNumberMissedCalls
					, AG_RentalsLocalConnectedCalls
					, AG_RentalsLocalMissedCalls
					, AG_VideoConnectedCalls
					, AG_VideoMissedCalls
					, AG_SEMConnectedCalls
					, AG_SEMMissedCalls
					, AG_TruliaConnectedCalls
					, AG_TruliaMissedCalls
					, AG_RentConnectedCalls
					, R_RentConnectedCalls
					, AG_RentMissedCalls
					, R_RentMissedCalls
					, AG_RentOneWebConnectedCalls
					, R_RentOneWebConnectedCalls
					, AG_RentOneWebMissedCalls
					, R_RentOneWebMissedCalls
					, AG_RentMobileConnectedCalls
					, R_RentMobileConnectedCalls
					, AG_RentMobileMissedCalls
					, R_RentMobileMissedCalls
					, AG_RentAltRegConnectedCalls
					, R_RentAltRegConnectedCalls
					, AG_RentAltRegMissedCalls
					, R_RentAltRegMissedCalls
					, AG_LeadMailConnectedCalls
					, AG_LeadMailMissedCalls
					, AG_SMSConnectedCalls
					, AG_SMSMissedCalls
					, AG_MobileSEMConnectedCalls
					, AG_MobileSEMMissedCalls
					, AG_SitesConnectedCalls
					, AG_SitesMissedCalls
					, AG_AGEmailLeads
					, AG_MetroEmailLeads
					, AG_NeighborhoodEmailLeads
					, AG_AIMCOEmailLeads
					, AG_RentalsEmailLeads
					, AG_RentRentarEmailLeads
					, AG_RentalHousesEmailLeads
					, AG_iPhoneEmailLeads
					, AG_OodleEmailLeads
					, AG_AndroidEmailLeads
					, AG_HotpadsEmailLeads
					, AG_LuxuryEmailLeads
					, AG_CondoEmailLeads
					, AG_iPadEmailLeads
					, AG_TruliaEmailLeads
					, R_TruliaEmailLeads
					, AG_ZillowEmailLeads
					, AG_VerticalBrandsEmailLeads
					, AG_RDTFeedLeads
					, AG_PropSolutionsFeedLeads
					, AG_YieldFeedLeads
					, AG_EREIFeedLeads
					, AG_YardiRCFeedLeads
					, AG_AGMobileEmailLeads
					, AG_RentalsMobileEmailLeads
					, AG_RentalsAndroidEmailLeads
					, AG_RentalsIPhoneEmailLeads
					, AG_VastEmailLeads
					, AG_CampusHomesOnlineEmailLeads
					, AG_AGTabletEmailLeads
					, AG_AGKindleEmailLeads
					, AG_RentEmailLeads
					, R_RentEmailLeads
					, AG_LovelyEmailLeads
					, AG_SitesEmailLeads
					, AG_PlacementTier
					, AG_PrintProductPoints
					, AG_InternetProductPoints
					, AG_LegacyLoyaltyPoints
					, AG_ContractLoyaltyPoints
					, AG_MobilePoints
					, AG_LastUpdateYMDID
					, R_LastUpdateYMDID
					, AG_LinkedFloorPlan
					, R_LinkedFloorPlan
					, AG_Linked3DFloorPlan
					, R_Linked3DFloorPlan
					, AG_LinkedRoomPlanner
					, R_LinkedRoomPlanner
					, AG_RPLRANK
					, AG_UpsellListBold
					, AG_UpsellListFrontCover
					, AG_UpsellPropPhotoFeature
					, AG_UpsellMgmtManagementCoLogo
					, AG_UpsellPropPropertyLogo
					, AG_UpsellPropPremiumPackage
					, AG_UpsellListFloorplanPkg
					, AG_InternetPhoneLeads
					, R_InternetPhoneLeads
					, AG_InternetPhoneLeads_NoMobile
					, R_InternetPhoneLeads_NoMobile
					, AG_DigitalPhoneLeads
					, R_DigitalPhoneLeads
					, AG_EmailLeads
					, AG_InternetEmailLeads_NoMobile
					, R_InternetEmailLeads_NoMobile
					, AG_DigitalEmailLeads
					, R_DigitalEmailLeads
					, AG_AGCMissedCalls
					, AG_ASGMissedCalls
					, AG_AGCAllLeads
					, AG_ASGAllLeads
					, AG_AllMissedCalls
					, R_AllMissedCalls
					, AG_AllConnectedCalls
					, R_AllConnectedCalls
					, AG_AllLeads
					, R_AllLeads
					, AG_AllInternetLeads_NoMobile
					, R_AllInternetLeads_NoMobile
					, AG_AllDigitalLeads
					, R_AllDigitalLeads
					, AG_ThirdPartyFeedLeads
					, AG_WebsiteCalls
					, R_WebsiteCalls
					, AG_WebsiteEmails
					, R_WebsiteEmails
					, AG_WebsiteLeads_Rentals
					, AG_MobileEmails
					, R_MobileEmails
					, AG_MobileCalls
					, R_MobileCalls
					, AG_MobileLeads_AG
					, AG_MobileLeads_Rentals
					, AG_MobileAllLeads
					, R_MobileAllLeads
					, AG_AllRentLeads
					, AG_AllRentCalls
					, AG_MRSyndicationEmailLeads
					, AG_MRAGEmailLeads
					, AG_MRAGWebPhoneLeads
					, AG_MRAppsEmailLeads
					, AG_MRPhoneCalls
					, R_InvoicedLeases
					, R_LeaseMgtCoID
					, R_MapClicks
					, R_UpsellRentFeaturedPlacement
					, R_UpsellRentListing
					, R_UpsellRentMetroFL
					, R_UpsellRentNoVacancy
					, R_UpsellRentPTE
					, R_UpsellRentRewardCard
					, R_UpsellRentSubscriptionModel
					, R_UpsellRentVIPPlacement
					FROM #finalresultsetcurr ft
					WHERE YearMonth = @yearmonth
					--AND (AG_ListingStatusID = 1 OR R_ListingStatusID = 1)
					ORDER BY ft.ListingID

	
				COMMIT TRANSACTION
			END

		--Mart Previous info
		
		if @PrevStartYMDID IS NOT NULL
			BEGIN	
				if EXISTS (SELECT ListingID FROM #finalresultsetprev WHERE YearMonth = @prevyearmonth)
					BEGIN
						BEGIN TRANSACTION
							-- Mart marting
							DELETE FROM Mart.ListingsCombinedAGRent
							WHERE YearMonth = @prevyearmonth
			
							INSERT INTO Mart.ListingsCombinedAGRent
							SELECT YearMonth
							, ListingID
							, AG_PropertyID
							, R_RentPropertyID
							, R_PropertyID
							, AG_ListingType
							, R_ListingTypeID
							, R_ListingType
							, AG_ListingTypeShort
							, R_ListingTypeShort
							, AG_ExternalID
							, R_ExternalID
							, AG_ExternalPriceCode
							, R_ExternalPriceCode
							, AG_ListingStatusID
							, R_ListingStatusID
							, CONVERT(datetime, CONVERT(varchar(10),@PrevEndYMDDate,112)) AS ThruDate
							, @rundate AS LastUpdate
							, AG_TotalPhotos
							, R_TotalPhotos
							, AG_ActivePhotos
							, R_ActivePhotos
							, AG_TotalFloorPlans
							, R_TotalFloorPlans
							, AG_ActiveFloorPlans
							, R_ActiveFloorPlans
							, AG_TotalAmenities
							, R_TotalAmenities
							, AG_ActiveAmenities
							, R_ActiveAmenities
							, AG_ActiveHDPhotos
							, R_ActiveHDPhotos
							, AG_ActiveHDFloorPlans
							, R_ActiveHDFloorPlans
							, AG_ShowPricing
							, R_ShowPricing
							, AG_ShowOfficeHours
							, R_ShowOfficeHours
							, AG_ListingDescriptionLength
							, R_ListingDescriptionLength
							, AG_UpsellListHighlighted
							, AG_UpsellListCoupon
							, R_UpsellListCoupon
							, AG_UpsellPropEmercial
							, AG_UpsellPropCommunityVideo
							, AG_UpsellPropFeaturedCommunityPlatinum
							, AG_UpsellPropFeaturedCommunityGold
							, AG_UpsellPropFeaturedCommunitySilver
							, AG_UpsellPropVirtualBrochure
							, AG_UpsellListCorporateListing
							, AG_UpsellListCollegeListing
							, AG_UpsellListMilitaryListing
							, AG_UpsellListApartmentListing
							, AG_UpsellPropPhotoUpgrade
							, AG_UpsellMgmtManagementCoLogoDisplay
							, AG_UpsellListSeniorListing
							, AG_UpsellPropPropertyLogoDisplay
							, AG_UpsellPropPremiumUpgrade
							, AG_UpsellPropVideoSpokesModel
							, AG_UpsellPropFrontPage
							, AG_UpsellPropSpanish
							, AG_UpsellPropCallRecording
							, R_UpsellPropCallRecording
							, AG_UpsellPropFormToPhone
							, AG_UpsellPropRentalsPremier
							, AG_UpsellPropRentalsFeatured
							, AG_UpsellListRentalsListing
							, AG_UpsellListFloorPlanUpgrade
							, AG_UpsellListPayPerLead
							, AG_UpsellListRentalsSpotlightAd
							, AG_UpsellListSpotLight
							, AG_UpsellListPayPerLease
							, AG_UpsellListDiamondMetro
							, AG_UpsellListDiamondCity
							, AG_UpsellListDiamondMax
							, AG_UpsellListRentalsStandard
							, AG_UpsellListCommunityCarousel
							, AG_UpsellList30SecondVideo
							, AG_UpsellList60SecondVideo
							, AG_UpsellListRentalsCarousel
							, AG_UpsellListRentalsStandardPlus
							, AG_UpsellListMobileSpotLight
							, AG_UpsellPropMobileDeal
							, AG_UpsellPropDynamicLeadForm
							, AG_UpsellListIncomeRestricted
							, AG_UpsellListPetFriendly
							, AG_UpsellListLuxuryCommunity
							, AG_UpsellPropRepMon
							, AG_UpsellPropSocialMediaMan
							, AG_UpsellListMobileDiamond
							, AG_UpsellListEZPay
							, AG_UpsellMgmtPeelAd
							, AG_UpsellListSponsoredApartment
							, AG_UpsellListHDPanoTours
							, AG_UpsellListHDVideo
							, AG_UpsellListHDPhoto
							, AG_UpsellList3DFloorPlan
							, AG_UpsellListAGSites
							, AG_UpsellMediaCenter
							, AG_CR3AvgOverallRating
							, R_CR3AvgOverallRating
							, AG_CommunityVideoURLFulfilled
							, AG_HDActiveFloorPlansFulfilled
							, R_HDActiveFloorPlansFulfilled
							, AG_HDActivePhotosFulfilled
							, R_HDActivePhotosFulfilled
							, AG_HDTourURLFulfilled
							, AG_HDVideoURLFulfilled
							, AG_LinkedFloorPlanFulfilled
							, R_LinkedFloorPlanFulfilled
							, AG_VirtualTourFulfilled
							, AG_Linked3DFloorPlanFulfilled
							, R_Linked3DFloorPlanFulfilled
							, AG_LinkedRoomPlannerFulfilled
							, R_LinkedRoomPlannerFulfilled
							, AG_MobileDealFulfilled
							, R_MobileDealFulfilled
							, AG_LowPrice
							, R_LowPrice
							, AG_HighPrice
							, R_HighPrice
							, AG_IsSEM
							, AG_IsOverThreshold
							, AG_IsRentalPropToBeDELETED
							, AG_CallTrackingInBook
							, AG_CouponActiveOnSite
							, R_CouponActiveOnSite
							, AG_VerizonFIOS
							, AG_ATTUverse
							, AG_DIRECTV
							, AG_BrightHouse
							, AG_Charter
							, AG_XfinitySP
							, AG_XfinityDP
							, AG_XfinityTP
							, AG_TimeWarner
							, AG_Ranking
							, AG_NumericRank
							, AG_UniqueVisits
							, R_UniqueVisits
							, AG_UniqueVisits_Mobile
							, AG_UniqueVisits_Sites
							, AG_ViewsListingPage
							, AG_ViewsListingPage_Mobile
							, AG_ViewsListingPage_Sites
							, AG_ViewsEmercial
							, AG_ViewsVirtualBrochure
							, AG_ClicksSpotlightListing
							, AG_ClicksCommunityVideo
							, AG_ClicksSpotlightCommunityVideo
							, AG_ClicksListingWebLink
							, AG_ClicksMgtCoWebLink
							, R_ClicksMgtCoWebLink
							, AG_ClicksListingMap
							, AG_ClicksOnlineAppt
							, AG_ClicksOnlineApptSubmit
							, AG_ClicksOnlineAppl
							, AG_ClicksOnlineApplSubmit
							, AG_ClicksOnlineApptCR
							, AG_ClicksOnlineApplCR
							, AG_ClicksPrintableGuide
							, AG_ClicksWeCanCallYou
							, AG_ClicksMapDirections
							, AG_ClicksLeadSubmission
							, AG_ClicksSpotlightLeadSubmission
							, AG_ClicksPhotos
							, AG_ClicksSpotlightPhotos
							, AG_ClicksSpotlightPhotoPopup
							, AG_ClicksFloorPlans
							, AG_ClicksCheckYourCredit
							, AG_ClicksWebBuilderLink
							, AG_ClicksFeaturedMgtCo
							, AG_ClicksFrontPagePropLead
							, AG_ClicksLuxurySlideshow
							, AG_ClicksPanoramicTours
							, AG_ClicksHDVideos
							, AG_ClicksHDPhotos
							, AG_ClicksMgmtCoPeelAd
							, AG_ClicksReserveNow
							, AG_ImprSearchResults
							, R_ImprSearchResults
							, AG_ImprSearchResults_Rent
							, AG_ImprFrontCover
							, AG_ImprVisitCount
							, AG_TextMsgWeb
							, AG_TextMsgMobile
							, AG_CheckListingAvail
							, AG_ClicksSpotlightListingAvail
							, AG_ClicksVirtualTourListingAvail
							, AG_AGCPrintConnectedCalls
							, AG_AGCPrintMissedCalls
							, AG_ASGPrintConnectedCalls
							, AG_ASGPrintMissedCalls
							, AG_WebConnectedCalls
							, AG_WebMissedCalls
							, AG_RentalsConnectedCalls
							, AG_RentalsMissedCalls
							, AG_CTCConnectedCalls
							, AG_CTCMissedCalls
							, AG_PaidSPConnectedCalls
							, AG_PaidSPMissedCalls
							, AG_CombinedFeedsConnectedCalls
							, AG_CombinedFeedsMissedCalls
							, AG_GoogleConnectedCalls
							, AG_GoogleMissedCalls
							, AG_PPCConnectedCalls
							, AG_PPCMissedCalls
							, AG_LuxuryConnectedCalls
							, AG_LuxuryMissedCalls
							, AG_MarchexConnectedCalls
							, AG_MarchexMissedCalls
							, AG_CraigsListConnectedCalls
							, AG_CraigsListMissedCalls
							, AG_WebLocalTrackingNumberConnectedCalls
							, AG_WebLocalTrackingNumberMissedCalls
							, AG_RentalsLocalConnectedCalls
							, AG_RentalsLocalMissedCalls
							, AG_VideoConnectedCalls
							, AG_VideoMissedCalls
							, AG_SEMConnectedCalls
							, AG_SEMMissedCalls
							, AG_TruliaConnectedCalls
							, AG_TruliaMissedCalls
							, AG_RentConnectedCalls
							, R_RentConnectedCalls
							, AG_RentMissedCalls
							, R_RentMissedCalls
							, AG_RentOneWebConnectedCalls
							, R_RentOneWebConnectedCalls
							, AG_RentOneWebMissedCalls
							, R_RentOneWebMissedCalls
							, AG_RentMobileConnectedCalls
							, R_RentMobileConnectedCalls
							, AG_RentMobileMissedCalls
							, R_RentMobileMissedCalls
							, AG_RentAltRegConnectedCalls
							, R_RentAltRegConnectedCalls
							, AG_RentAltRegMissedCalls
							, R_RentAltRegMissedCalls
							, AG_LeadMailConnectedCalls
							, AG_LeadMailMissedCalls
							, AG_SMSConnectedCalls
							, AG_SMSMissedCalls
							, AG_MobileSEMConnectedCalls
							, AG_MobileSEMMissedCalls
							, AG_SitesConnectedCalls
							, AG_SitesMissedCalls
							, AG_AGEmailLeads
							, AG_MetroEmailLeads
							, AG_NeighborhoodEmailLeads
							, AG_AIMCOEmailLeads
							, AG_RentalsEmailLeads
							, AG_RentRentarEmailLeads
							, AG_RentalHousesEmailLeads
							, AG_iPhoneEmailLeads
							, AG_OodleEmailLeads
							, AG_AndroidEmailLeads
							, AG_HotpadsEmailLeads
							, AG_LuxuryEmailLeads
							, AG_CondoEmailLeads
							, AG_iPadEmailLeads
							, AG_TruliaEmailLeads
							, R_TruliaEmailLeads
							, AG_ZillowEmailLeads
							, AG_VerticalBrandsEmailLeads
							, AG_RDTFeedLeads
							, AG_PropSolutionsFeedLeads
							, AG_YieldFeedLeads
							, AG_EREIFeedLeads
							, AG_YardiRCFeedLeads
							, AG_AGMobileEmailLeads
							, AG_RentalsMobileEmailLeads
							, AG_RentalsAndroidEmailLeads
							, AG_RentalsIPhoneEmailLeads
							, AG_VastEmailLeads
							, AG_CampusHomesOnlineEmailLeads
							, AG_AGTabletEmailLeads
							, AG_AGKindleEmailLeads
							, AG_RentEmailLeads
							, R_RentEmailLeads
							, AG_LovelyEmailLeads
							, AG_SitesEmailLeads
							, AG_PlacementTier
							, AG_PrintProductPoints
							, AG_InternetProductPoints
							, AG_LegacyLoyaltyPoints
							, AG_ContractLoyaltyPoints
							, AG_MobilePoints
							, AG_LastUpdateYMDID
							, R_LastUpdateYMDID
							, AG_LinkedFloorPlan
							, R_LinkedFloorPlan
							, AG_Linked3DFloorPlan
							, R_Linked3DFloorPlan
							, AG_LinkedRoomPlanner
							, R_LinkedRoomPlanner
							, AG_RPLRANK
							, AG_UpsellListBold
							, AG_UpsellListFrontCover
							, AG_UpsellPropPhotoFeature
							, AG_UpsellMgmtManagementCoLogo
							, AG_UpsellPropPropertyLogo
							, AG_UpsellPropPremiumPackage
							, AG_UpsellListFloorplanPkg
							, AG_InternetPhoneLeads
							, R_InternetPhoneLeads
							, AG_InternetPhoneLeads_NoMobile
							, R_InternetPhoneLeads_NoMobile
							, AG_DigitalPhoneLeads
							, R_DigitalPhoneLeads
							, AG_EmailLeads
							, AG_InternetEmailLeads_NoMobile
							, R_InternetEmailLeads_NoMobile
							, AG_DigitalEmailLeads
							, R_DigitalEmailLeads
							, AG_AGCMissedCalls
							, AG_ASGMissedCalls
							, AG_AGCAllLeads
							, AG_ASGAllLeads
							, AG_AllMissedCalls
							, R_AllMissedCalls
							, AG_AllConnectedCalls
							, R_AllConnectedCalls
							, AG_AllLeads
							, R_AllLeads
							, AG_AllInternetLeads_NoMobile
							, R_AllInternetLeads_NoMobile
							, AG_AllDigitalLeads
							, R_AllDigitalLeads
							, AG_ThirdPartyFeedLeads
							, AG_WebsiteCalls
							, R_WebsiteCalls
							, AG_WebsiteEmails
							, R_WebsiteEmails
							, AG_WebsiteLeads_Rentals
							, AG_MobileEmails
							, R_MobileEmails
							, AG_MobileCalls
							, R_MobileCalls
							, AG_MobileLeads_AG
							, AG_MobileLeads_Rentals
							, AG_MobileAllLeads
							, R_MobileAllLeads
							, AG_AllRentLeads
							, AG_AllRentCalls
							, AG_MRSyndicationEmailLeads
							, AG_MRAGEmailLeads
							, AG_MRAGWebPhoneLeads
							, AG_MRAppsEmailLeads
							, AG_MRPhoneCalls
							, R_InvoicedLeases
							, R_LeaseMgtCoID
							, R_MapClicks
							, R_UpsellRentFeaturedPlacement
							, R_UpsellRentListing
							, R_UpsellRentMetroFL
							, R_UpsellRentNoVacancy
							, R_UpsellRentPTE
							, R_UpsellRentRewardCard
							, R_UpsellRentSubscriptionModel
							, R_UpsellRentVIPPlacement
							FROM #finalresultsetprev ft
							WHERE YearMonth = @prevyearmonth
							--AND (AG_ListingStatusID = 1 OR R_ListingStatusID = 1)
							ORDER BY ft.ListingID

	
						COMMIT TRANSACTION
					END
			END
	END TRY
	BEGIN CATCH
		SELECT 
			@ErrorMessage		= ERROR_MESSAGE(),
			@ErrorNumber		= ERROR_NUMBER(),
			@ErrorSeverity		= ERROR_SEVERITY(),
			@ErrorState			= ERROR_STATE(),
			@ErrorLine			= ERROR_LINE(),
			@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');

		if @@trancount > 0
			ROLLBACK TRANSACTION
		
		SET @ErrorMessage = 'Attempting to mart the data - ' + @ErrorMessage

		raiserror(@ErrorMessage,16,1) with log;

		RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	END CATCH
	
	SET NOCOUNT OFF ;
END


/*  Check the numbers
SELECT * FROM #finalresultsetcurr WHERE ListingID = 100013883
SELECT * FROM #finalresultsetprev WHERE ListingID = 100013883

184317

SELECT SUM(AllLeads) FROM RentCOm.Mart.Listings WITH (NOLOCK) WHERE YMDID BETWEEN 20150401 AND 20150430 AND ListingID = 100013883


SELECT ListingID, COUNT(ListingID) FROM #finalresultsetcurr GROUP BY ListingID HAVING COUNT(ListingID) > 1

SELECT * FROM #finalresultsetcurr WHERE ListingID = 100013883
SELECT * FROM #tmpmasterlist WHERE ListingID = 100023389

SELECT * FROM #finalresultsetcurr WHERE ListingID = 100009669 
SELECT * FROM #tmpmasterlist WHERE AGPropertyID = 100040285


SELECT * FROM ApartmentGuide.Mart.Listings ag WITH (NOLOCK) WHERE YearMonth = 201501 AND ListingID = 100009669
SELECT * FROM RentCom.Mart.Listings r WITH (NOLOCK) WHERE YearMonth = 201501 AND ListingID = 100009669
SELECT * FROM #tmpmasterlist WHERE ListingID = 100009669








			
*/



--GO






GO
/****** Object:  StoredProcedure [Mart].[pr_LocatorListings]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Mart].[pr_LocatorListings]
/*************************************************************************************************
*
* Name:	Mart.pr_LocatorListings
*
* Desc:	This replaces the mart listings data in RentPath.Mart.LocatorListings and ApartmentGuide.Mart.TPLListings 
*		for the date range in the staging table from APS
*
* Test:	EXEC Mart.pr_LocatorListings
*
* Note: 
* 
* Hist:	01	10/31/2016		Sarah Mims			Initial Version. Ticket # 24020.
* Hist:	02	03/02/2017		Sarah Mims			SFDC Case # 01340195 Added push to ApartmentGuide.Mart.TPLListings
**************************************************************************************************/
AS

BEGIN

SET NOCOUNT ON

			-----------------------------
			--Declare error handling variables
			-----------------------------
			DECLARE
				@ErrorMessage					NVARCHAR(4000)
				,@ErrorSeverity					INT
				,@ErrorState					INT
				
		----------------------------------
		--Declare and Set Logging Variables
		----------------------------------
		 DECLARE @TrackDate DATETIME 
				,@LocalYMDID INT 
				,@LengthInSeconds INT 
				,@DatabaseName VARCHAR(128) 
				,@ProcedureName VARCHAR(128) 
				,@CommentLine VARCHAR(500)
				,@BeginYMDID INT
				,@EndYMDID INT              


		SET	@TrackDate = GETDATE();
		SET	@LocalYMDID  =  CAST(CONVERT(VARCHAR(8),GETDATE(),112) AS INT)
		SET @LengthInSeconds = 0;
		SET @DatabaseName = DB_NAME()  ;      
		SET @ProcedureName = 'Mart.pr_LocatorListings';	

		----------------------------------
		--Start Logging
		----------------------------------	
		SET @LengthInSeconds = DATEDIFF(ss, @TrackDate,GETDATE())            
		EXEC DBAUtility.dbo.pr_Logging_StoredProcs @DatabaseName = @DatabaseName,
			@ProcName = @ProcedureName,
			@StepName = '1 - Start Procedure: Mart.pr_LocatorListings',
			@VariableStates = @LocalYMDID,
			@LengthInSeconds = @LengthInSeconds,
			@Comments = 'Start Procedure';
		SET @TrackDate = GETDATE();

---------------------------------
--Do the actual work now: 
--1) Delete the date range from Mart.LocatorListings
--2) Insert the date range from the APS Staging Table
---------------------------------
BEGIN TRY
		IF EXISTS(SELECT DISTINCT YMDID FROM RentPath.Staging.MartLocatorListings)
			BEGIN
				BEGIN TRANSACTION
  
						-------------------------------------------------------
						--Delete the data from Mart Listings for the date range   
						-------------------------------------------------------						           
						DELETE FROM RentPath.Mart.LocatorListings
						WHERE YMDID IN (SELECT DISTINCT YMDID FROM RentPath.Staging.MartLocatorListings)  
						
						SET @BeginYMDID = (SELECT MIN(YMDID) FROM RentPath.Staging.MartLocatorListings)   
						SET @EndYMDID = (SELECT MAX(YMDID) FROM RentPath.Staging.MartLocatorListings)                 

								----------------------------------
								--Log the deletion
								----------------------------------	
								SET @LengthInSeconds = DATEDIFF(ss, @TrackDate,GETDATE())      
								SET @CommentLine = 'Data deleted from RentPath Mart Locator Listings:  from '+CAST(@BeginYMDID AS VARCHAR)+' to ' +CAST(@EndYMDID AS VARCHAR)+''
								EXEC DBAUtility.dbo.pr_Logging_StoredProcs @DatabaseName = @DatabaseName,
									@ProcName = @ProcedureName,
									@StepName = '2 - Delete data from RentPath Mart Locator Listings for the date range',
									@VariableStates = @LocalYMDID,
									@LengthInSeconds = @LengthInSeconds,
									@Comments = @CommentLine;
								SET @TrackDate = GETDATE();


						-------------------------------------------------------
						--Insert the data for the date range into Mart Locator Listings
						-------------------------------------------------------	
						INSERT INTO RentPath.Mart.LocatorListings	
						SELECT *	
						FROM RentPath.Staging.MartLocatorListings

								----------------------------------
								--Log the insertion
								----------------------------------	
								SET @LengthInSeconds = DATEDIFF(ss, @TrackDate,GETDATE())      
								EXEC DBAUtility.dbo.pr_Logging_StoredProcs @DatabaseName = @DatabaseName,
									@ProcName = @ProcedureName,
									@StepName = '3 - Insert data into RentPath Mart Locator Listings for the date range',
									@VariableStates = @LocalYMDID,
									@LengthInSeconds = @LengthInSeconds,
									@Comments = 'The transaction of inserting the data has been committed';
								SET @TrackDate = GETDATE();


						-------------------------------------------------------
						--Delete the data from ApartmentGuide Mart TPLListings for the date range   
						-------------------------------------------------------						           
						DELETE FROM ApartmentGuide.Mart.TPLListings
						WHERE YMDID IN (SELECT DISTINCT YMDID FROM RentPath.Staging.MartLocatorListings)  
						
						SET @BeginYMDID = (SELECT MIN(YMDID) FROM RentPath.Staging.MartLocatorListings)   
						SET @EndYMDID = (SELECT MAX(YMDID) FROM RentPath.Staging.MartLocatorListings)     

								----------------------------------
								--Log the deletion
								----------------------------------	
								SET @LengthInSeconds = DATEDIFF(ss, @TrackDate,GETDATE())      
								SET @CommentLine = 'Data deleted from ApartmentGuide Mart TPLListings:  from '+CAST(@BeginYMDID AS VARCHAR)+' to ' +CAST(@EndYMDID AS VARCHAR)+''
								EXEC DBAUtility.dbo.pr_Logging_StoredProcs @DatabaseName = @DatabaseName,
									@ProcName = @ProcedureName,
									@StepName = '4 - Delete data from ApartmentGuide Mart TPLListings for the date range',
									@VariableStates = @LocalYMDID,
									@LengthInSeconds = @LengthInSeconds,
									@Comments = @CommentLine;
								SET @TrackDate = GETDATE();


						-------------------------------------------------------
						--Insert the data for the date range into Mart TPLListings
						-------------------------------------------------------	
						INSERT INTO ApartmentGuide.Mart.TPLListings
						SELECT YMDID							AS YMDID
						,ListingID								AS LISTINGID
						,NULL									AS PROPERTYNAME
						,NULL									AS ADDRESS
						,NULL									AS CITY
						,NULL									AS STATE
						,NULL									AS ZIP
						,NULL									AS PHONE
						,LowPrice								AS PRICELOW
						,HighPrice								AS PRICEHIGH
						,MinBedrooms							AS MINBEDROOMS
						,MaxBedrooms							AS MAXBEDROOMS
						,NULL									AS EMAIL
						,StatusID								AS StatusID
						,StatusIDAG								AS OnAPTGStatus
						,StatusIDRentals						AS OnRentalsStatus
						,StatusIDRentalHouses					AS OnRentalHousesStatus
						,DataSource								AS DataSource
						,NULL									AS MarketCd
						,WebConnectedCalls						AS WebConnectedCalls
						,WebMissedCalls							AS WebMissedCalls
						,0										AS CTCConnectedCalls
						,0										AS CTCMissedCalls
						,RentalsConnectedCalls					AS RentalsConnectedCalls
						,RentalsMissedCalls						AS RentalsMissedCalls
						,0										AS PaidSPConnectedCalls
						,0										AS PaidSPMissedCalls
						,0										AS CombinedFeedsConnectedCalls
						,0										AS CombinedFeedsMissedCalls
						,0										AS GoogleConnectedCalls
						,0										AS GoogleMissedCalls
						,0										AS PPCConnectedCalls
						,0										AS PPCMissedCalls
						,0										AS LuxuryConnectedCalls
						,0										AS LuxuryMissedCalls
						,SEMConnectedCalls						AS SEMConnectedCalls
						,SEMMissedCalls							AS SEMMissedCalls
						,MobileSEMConnectedCalls				AS MobileSEMConnectedCalls
						,MobileSEMMissedCalls					AS MobileSEMMissedCalls
						,TruliaConnectedCalls					AS TruliaConnectedCalls
						,TruliaMissedCalls						AS TruliaMissedCalls
						,RentOneWebConnectedCalls				AS RentOneWebConnectedCalls
						,RentOneWebMissedCalls					AS RentOneWebMissedCalls
						,0										AS LeadMailConnectedCalls
						,0										AS LeadMailMissedCalls
						,WebLocalTrackingNumberConnectedCalls	AS WebLocalTrackingNumberConnectedCalls
						,WebLocalTrackingNumberMissedCalls		AS WebLocalTrackingNumberMissedCalls
						,0										AS SitesConnectedCalls
						,0										AS SitesMissedCalls
						,0										AS SMSConnectedCalls
						,0										AS SMSMissedCalls
						,0										AS FutureConnectedCalls1
						,0										AS FutureMissedCalls1
						,0										AS FutureConnectedCalls2
						,0										AS FutureMissedCalls2
						,0										AS FutureConnectedCalls3
						,0										AS FutureMissedCalls3
						,0										AS FutureConnectedCalls4
						,0										AS FutureMissedCalls4
						,0										AS FutureConnectedCalls5
						,0										AS FutureMissedCalls5
						,AGEmailLeads							AS AGEmailLeads
						,AGEmailLeadsAdditional					AS AGEmailLeadsAdditional
						,MetroEmailLeads						AS MetroEmailLeads
						,MetroEmailLeadsAdditional				AS MetroEmailLeadsAdditional
						,NeighborhoodEmailLeads					AS NeighborhoodEmailLeads
						,NeighborhoodEmailLeadsAdditional		AS NeighborhoodEmailLeadsAdditional
						,0										AS AIMCOEmailLeads
						,0										AS AIMCOEmailLeadsAdditional
						,RentalsEmailLeads						AS RentalsEmailLeads
						,RentalsEmailLeadsAdditional			AS RentalsEmailLeadsAdditional
						,0										AS RentRentarEmailLeads
						,0										AS RentRentarEmailLeadsAdditional
						,RentalHousesEmailLeads					AS RentalHousesEmailLeads
						,RentalHousesEmailLeadsAdditional		AS RentalHousesEmailLeadsAdditional
						,AGiPhoneEmailLeads						AS iPhoneEmailLeads
						,AGiPhoneEmailLeadsAdditional			AS iPhoneEmailLeadsAdditional
						,0										AS OodleEmailLeads
						,0										AS OodleEmailLeadsAdditional
						,AGAndroidEmailLeads					AS AndroidEmailLeads
						,AGAndroidEmailLeadsAdditional			AS AndroidEmailLeadsAdditional
						,0										AS HotPadsEmailLeads
						,0										AS HotPadsEmailLeadsAdditional
						,0										AS LuxuryEmailLeads
						,0										AS LuxuryEmailLeadsAdditional
						,AGiPadEmailLeads						AS iPadEmailLeads
						,AGiPadEmailLeadsAdditional				AS iPadEmailLeadsAdditional
						,TruliaEmailLeads						AS TruliaEmailLeads
						,TruliaEmailLeadsAdditional				AS TruliaEmailLeadsAdditional
						,0										AS VerticalBrandsEmailLeads
						,0										AS VerticalBrandsEmailLeadsAdditional
						,AGMobileEmailLeads						AS AGMobileEmailLeads
						,AGMobileEmailLeadsAdditional			AS AGMobileEmailLeadsAdditional
						,RentalsMobileEmailLeads				AS RentalsMobileEmailLeads
						,RentalsMobileEmailLeadsAdditional		AS RentalsMobileEmailLeadsAdditional
						,RentalsAndroidEmailLeads				AS RentalsAndroidEmailLeads
						,RentalsAndroidEmailLeadsAdditional		AS RentalsAndroidEmailLeadsAdditional
						,RentalsIPhoneEmailLeads				AS RentalsIPhoneEmailLeads
						,RentalsIPhoneEmailLeadsAdditional		AS RentalsIPhoneEmailLeadsAdditional
						,AGTabletEmailLeads						AS AGTabletEmailLeads
						,AGTabletEmailLeadsAdditional			AS AGTabletEmailLeadsAdditional
						,AGKindleEmailLeads						AS AGKindleEmailLeads
						,AGKindleEmailLeadsAdditional			AS AGKindleEmailLeadsAdditional
						,0										AS FutureEmailLeads2
						,0										AS FutureEmailLeads3
						,0										AS FutureEmailLeads4
						,0										AS FutureEmailLeads5
						,UniqueVisitsWebAG						AS AGUniqueVisits
						,SRPListingImprAG						AS AGImprSearchResults
						,0										AS AGImprFrontCover
						,SRPUniqueVisitsAG						AS AGImprVisitCount
						,UniqueVisitsWebRentals					AS RntUniqueVisits
						,SRPListingImprRentals					AS RntImprSearchResults
						,0										AS RntImprFrontCover
						,SRPUniqueVisitsRentals					AS RntImprVisitCount
						,0										AS SitesUniqueVisits
						,0										AS SitesVisitCount
						FROM RentPath.Staging.MartLocatorListings
											
			COMMIT TRANSACTION    
								----------------------------------
								--Log the insertion
								----------------------------------	
								SET @LengthInSeconds = DATEDIFF(ss, @TrackDate,GETDATE())      
								EXEC DBAUtility.dbo.pr_Logging_StoredProcs @DatabaseName = @DatabaseName,
									@ProcName = @ProcedureName,
									@StepName = '5 - Insert data into ApartmentGuide Mart TPLListings for the date range',
									@VariableStates = @LocalYMDID,
									@LengthInSeconds = @LengthInSeconds,
									@Comments = 'The transaction of inserting the data has been committed';
								SET @TrackDate = GETDATE();
            
			END																																												                   	      
END TRY

	BEGIN CATCH
		SET @ErrorMessage		= ERROR_MESSAGE()
		SET @ErrorSeverity		= ERROR_SEVERITY()
		SET @ErrorState			= ERROR_STATE()

		SET @ErrorMessage = 'Error occured in Mart.pr_LocatorListingsFromAPS procedure. Error - ' + @ErrorMessage

			----------------------------------
			--Log the error
			----------------------------------	
			SET @LengthInSeconds = DATEDIFF(ss, @TrackDate,GETDATE())            
			EXEC DBAUtility.dbo.pr_Logging_StoredProcs @DatabaseName = @DatabaseName,
				@ProcName = @ProcedureName,
				@StepName = 'Error occured in Mart.pr_LocatorListings procedure.',
				@VariableStates = @LocalYMDID,
				@LengthInSeconds = @LengthInSeconds,
				@Comments = @ErrorMessage;
			SET @TrackDate = GETDATE();
		

		IF @@trancount > 0
			ROLLBACK TRANSACTION


		RAISERROR (@ErrorMessage, -- Message text.
		@ErrorSeverity, -- Severity.
		@ErrorState -- State.
		) WITH LOG;

		RETURN 0		-- Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	
	END CATCH
			            															

SET NOCOUNT OFF

END

GO
/****** Object:  StoredProcedure [Mart].[pr_missing_MartListings]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Mart].[pr_missing_MartListings] (
@YMDID AS INT = NULL
)
/*******************************************************************************************
* Name:	[pr_missing_MartListings]
* ------------------------------------------------------------------------------------------
* Desc:	This marts the Teaxlium tags daily
* ------------------------------------------------------------------------------------------
* Test:	EXEC Mart.[pr_missing_MartListings] 20150515
* ------------------------------------------------------------------------------------------
* Note on Profiles:
* ------------------------------------------------------------------------------------------
*Hist:   08/07/2015    Richard       ticket 19816, recover missing listings
********************************************************************************************/
AS 

BEGIN
	SET NOCOUNT ON;

	/*test
	DECLARE @YMDID INT
	SET @YMDID = 20150506
	*/


	INSERT INTO [Mart].[Listings]
	(ListingID, YMDID, YearMonth, PropertyIDAG, StatusIDAG, PropertyIDRent, StatusIDRent, ListingType, IsSEM, ShowPricing, LowPrice, HighPrice, CallRecordingOptOut, TotalAmenities, ActiveAmenities, ActiveCoupon, ActiveFloorplans, ActiveHDFloorplans, ActiveHDPhotos, ActivePhotos, ExternalID, ListingPricingSource, Charter, DIRECTV, CR3AvgOverallRatingAG, CR3AvgOverallRatingRent, ShowOfficeHours, PlacementTierAG, PlacementTierRent, ContractLoyaltyPoints, InternetProductPoints, LegacyLoyaltyPoints, MobilePoints, PrintProductPoints, Ranking, RPLRank, BadgeCollege, BadgeCorporate, BadgeIncomeRestricted, BadgeLuxury, BadgeMilitary, BadgePetFriendly, BadgeSenior, Upsell3DFloorplan, UpsellAGSites,  UpsellCarousel, UpsellCarouselRentals, UpsellCommunityVideoURLFulfilled, UpsellCoupon, UpsellDiamondCity, UpsellDiamondMax, UpsellDiamondMetro, UpsellEmercial, UpsellFeaturedCommunityAG, UpsellFeaturedCommunityRent, UpsellFeaturedListingRentals, UpsellHDActiveFloorplansFulfilled, UpsellHDActivePhotosFulfilled, UpsellHDPanoTour, UpsellHDPanoTourFulfilled, UpsellHDPhoto, UpsellHDVideo, UpsellHDVideoFulfilled, UpsellHighlighted, UpsellLinked3DFloorplan, UpsellLinked3DFloorplanFulfilled, UpsellLinkedFloorplan, UpsellLinkedFloorplanFulfilled, UpsellLinkedRoomPlanner, UpsellLinkedRoomPlannerFulfilled, UpsellListingRent, UpsellListingRentals, UpsellMediaCenter, UpsellMgmtPeelAd, UpsellMobileDeal, UpsellMobileDealFulfilled, UpsellMobileDiamond, UpsellMobileSpotlight, UpsellNoVacancyRent, UpsellPayPerLead, UpsellPayPerLease, UpsellPhotoUpgrade, UpsellPrecisionTargetedEmailRent, UpsellPremierListingRentals, UpsellPremiumUpgrade, UpsellRewardCardRent, UpsellSponsoredApartment, UpsellSpotlightAG, UpsellSpotlightRent, UpsellSpotlightRentals, UpsellStandardListingRentals, UpsellStandardPlusListingRentals, UpsellSubscriptionModelRent, UpsellVideoSpokesmodel, UpsellVIPPlacementRent, UpsellVirtualBrochure, UpsellVirtualTourFulfilled, ClicksCommunityVideoAG, ClicksDiamondMaxPhotoAG, ClicksDiamondMaxCheckAvailAG, ClicksFloorplanAG, ClicksFloorplanRent, ClicksHDFloorplanAG, ClicksHDFloorplanRent, ClicksPhotosAG, ClicksPhotosRent, ClicksHDPhotoAG, ClicksHDPhotoRent, ClicksHDVideoAG, ClicksHDVideoRent, ClicksHDPanoTourAG, ClicksHDPanoTourRent, ClicksMapAG, ClicksMapRent, ClicksWebURLAG, ClicksWebURLRent, ClicksMgtCoURLAG, ClicksMgtCoURLRent, ClicksMgtCoPeelAdAG, ClicksMgtCoPeelAdRent, ClicksReserveNowAG, ClicksReserveNowRent, ClicksFeaturedCommunityAG, ClicksFeaturedCommunityRent, ClicksFeatCommCheckAvailAG, ClicksFeatCommCheckAvailRent, ClicksSRPListingCheckAvailAG, ClicksSRPListingCheckAvailRent, ClicksCR3AG, ClicksCR3Rent, ClicksSpotlightRentSpecialsAG, ClicksSpotlightRentSpecialsRent, ClicksSpotlightReserveNowAG, SRPListingImprAG, SRPListingImprRent, SRPUniqueVisitAG, SRPUniqueVisitRent, UniqueVisitsAG, UniqueVisitsRent, UniqueVisitsMobileAG, UniqueVisitsMobileRent, UniqueVisitsAGSites, ViewsListingPageWebAG, ViewsListingPageWebRent, ViewsListingPageMobileAG, ViewsListingPageMobileRent, ViewsListingPageAGSites, PhoneLeadsAG, PhoneLeadsRent, EmailLeadsAG, EmailLeadsRent)
    SELECT v.*
	from
	(
	SELECT 
	ListingID=ISNULL(a.listingid, r.listingid)
	, YMDID= @ymdid
	, YearMonth=LEFT (@ymdid,6)
	, PropertyIDAG=a.PropertyID
	, StatusIDAG= ISNULL(a.listingStatusID,0)
	, PropertyIDRent=r.RentPropertyID
	, StatusIDRent=ISNULL(r.RentStatusID,0)
	, ListingType=ISNULL(a.listingType, r.ListingType)
	
	, IsSEM=ISNULL(a.isSEM, 0)
	, ShowPricing=ISNULL(a.showPricing, r.showPricing)
	, LowPrice=ISNULL(a.lowPrice, r.lowPrice)
	, HighPrice=ISNULL(a.HighPrice, r.highprice)
	, CallRecordingOptOut=CASE WHEN ISNULL(a.UpsellPropCallRecording,r.UpsellPropCallRecording) = 0 THEN 1
	                           ELSE 0 end
	, TotalAmenities=ISNULL(a.totalAmenities, r.totalAmenities)
	, ActiveAmenities=ISNULL(a.ActiveAmenities, r.ActiveAmenities)
	, ActiveCoupon= ISNULL(a.CouponActiveOnSite,r.CouponActiveOnSite)
	, ActiveFloorplans=ISNULL(a.ActiveFloorPlans,r.ActiveFloorPlans)
	, ActiveHDFloorplans=ISNULL(a.ActiveHDFloorPlans,r.ActiveHDFloorPlans)
	, ActiveHDPhotos=ISNULL(a.ActiveHDPhotos, r.ActiveHDPhotos)
	, ActivePhotos=ISNULL(a.ActivePhotos,r.ActivePhotos)
	, ExternalID=ISNULL(a.ExternalID, r.ExternalID)
	, ListingPricingSource=ISNULL(a.ExternalPriceCode,r.ExternalPriceCode)
	, Charter=ISNULL(a.Charter,0)
	, DIRECTV=ISNULL(a.DIRECTV,0)
	, CR3AvgOverallRatingAG=ISNULL(a.CR3AvgOverallRating,0)
	, CR3AvgOverallRatingRent=ISNULL(r.CR3AvgOverallRating,0)
	, ShowOfficeHours=ISNULL(a.ShowOfficeHours,r.ShowOfficeHours)
	, PlacementTierAG=ISNULL(a.PlacementTier,0)
	, PlacementTierRent=0
	, ContractLoyaltyPoints=ISNULL(a.contractLoyaltyPoints,0)
	, InternetProductPoints=ISNULL(a.InternetProductPoints,0)
	, LegacyLoyaltyPoints=ISNULL(a.LegacyLoyaltyPoints,0)
	, MobilePoints=ISNULL(a.MobilePoints,0)
	, PrintProductPoints=ISNULL(a.PrintProductPoints,0)
	, Ranking=ISNULL(a.Ranking,0)
	, RPLRank=ISNULL(a.RPLRank,0)
	, BadgeCollege=ISNULL(a.UpsellListCollegeListing,0)
	, BadgeCorporate=ISNULL(a.UpsellListCorporateListing,0)
	, BadgeIncomeRestricted=ISNULL(a.UpsellListIncomeRestricted,0)
	, BadgeLuxury=ISNULL(a.UpsellListLuxuryCommunity,0)
	, BadgeMilitary=ISNULL(a.UpsellListMilitaryListing,0)
	, BadgePetFriendly=ISNULL(a.UpsellListPetFriendly,0)
	, BadgeSenior=ISNULL(a.UpsellListSeniorListing,0)
	, Upsell3DFloorplan=ISNULL(a.UpsellList3DFloorPlan,0)
	, UpsellAGSites=ISNULL(a.UpsellListAGSites,0)

	, UpsellCarousel=ISNULL(a.UpsellListCommunityCarousel,0)
	, UpsellCarouselRentals=ISNULL(a.UpsellListRentalsCarousel,0)
	, UpsellCommunityVideoURLFulfilled=ISNULL(a.CommunityVideoURLFulfilled,0)
	, UpsellCoupon=ISNULL(a.UpsellListCoupon,r.UpsellListCoupon)
	, UpsellDiamondCity=ISNULL(a.UpsellListDiamondCity,0)
	, UpsellDiamondMax=ISNULL(a.UpsellListDiamondMax,0)
	, UpsellDiamondMetro=ISNULL(a.UpsellListDiamondMetro,0)
	, UpsellEmercial=ISNULL(a.UpsellPropEmercial,0)
	, UpsellFeaturedCommunityAG=CASE WHEN a.UpsellPropFeaturedCommunityPlatinum=1 OR a.UpsellPropFeaturedCommunityGold=1
	                                     OR a.UpsellPropFeaturedCommunitySilver=1 THEN 1
									 ELSE 
									     0 
									 end

	, UpsellFeaturedCommunityRent=ISNULL(r.UpsellRentMetroFL,0)
	, UpsellFeaturedListingRentals=ISNULL(a.UpsellPropRentalsFeatured,0)
	, UpsellHDActiveFloorplansFulfilled=ISNULL(a.HDActiveFloorPlansFulfilled,r.HDActiveFloorPlansFulfilled)
	, UpsellHDActivePhotosFulfilled=ISNULL(a.HDActivePhotosFulfilled,r.HDActivePhotosFulfilled)
	, UpsellHDPanoTour=ISNULL(a.UpsellListHDPanoTours,0)
	, UpsellHDPanoTourFulfilled=ISNULL(a.HDTourURLFulfilled,0)
	, UpsellHDPhoto=ISNULL(a.UpsellListHDPhoto,0)
	, UpsellHDVideo=ISNULL(a.UpsellListHDVideo,0)
	, UpsellHDVideoFulfilled=ISNULL(a.HDVideoURLFulfilled,0)
	, UpsellHighlighted=ISNULL(a.UpsellListHighlighted,0)
	, UpsellLinked3DFloorplan=ISNULL(a.Linked3DFloorPlan,r.Linked3DFloorPlan)
	, UpsellLinked3DFloorplanFulfilled=ISNULL(a.Linked3DFloorPlanFulfilled,r.Linked3DFloorPlanFulfilled)
	, UpsellLinkedFloorplan=ISNULL(a.LinkedFloorPlan,r.LinkedFloorPlan)
	, UpsellLinkedFloorplanFulfilled=ISNULL(a.LinkedFloorPlanFulfilled,r.LinkedFloorPlanFulfilled)
	, UpsellLinkedRoomPlanner=ISNULL(a.LinkedRoomPlanner,r.LinkedRoomPlanner)
	, UpsellLinkedRoomPlannerFulfilled=ISNULL(a.LinkedRoomPlannerFulfilled,r.LinkedRoomPlannerFulfilled)
	, UpsellListingRent=ISNULL(r.UpsellRentListing,0)
	, UpsellListingRentals=ISNULL(a.UpsellListRentalsListing,0)
	, UpsellMediaCenter=ISNULL(a.UpsellMediaCenter,0)
	--, UpsellMetroFeaturedListingRent=ISNULL(r.UpsellRentMetroFL,0)
	, UpsellMgmtPeelAd=ISNULL(a.UpsellMgmtPeelAd,0)
	, UpsellMobileDeal=ISNULL(a.UpsellPropMobileDeal,0)
	, UpsellMobileDealFulfilled=ISNULL(a.MobileDealFulfilled,r.MobileDealFulfilled)
	, UpsellMobileDiamond=ISNULL(a.UpsellListMobileDiamond,0)
	, UpsellMobileSpotlight=ISNULL(a.UpsellListMobileSpotLight,0)
	, UpsellNoVacancyRent=ISNULL(r.UpsellRentNoVacancy,0)
	, UpsellPayPerLead=ISNULL(a.UpsellListPayPerLead,0)
	, UpsellPayPerLease=ISNULL(a.UpsellListPayPerLease,0)
	, UpsellPhotoUpgrade=ISNULL(a.UpsellPropPhotoUpgrade,0)
	, UpsellPrecisionTargetedEmailRent=ISNULL(r.UpsellRentPTE,0)
	, UpsellPremierListingRentals=ISNULL(a.UpsellPropRentalsPremier,0)
	, UpsellPremiumUpgrade=ISNULL(a.UpsellPropPremiumUpgrade,0)
	, UpsellRewardCardRent=ISNULL(r.UpsellRentRewardCard,0)
	, UpsellSponsoredApartment=ISNULL(a.UpsellListSponsoredApartment,0)
	, UpsellSpotlightAG=ISNULL(a.UpsellListSpotLight,0)
	, UpsellSpotlightRent=ISNULL(r.UpsellRentSpotlight,0)
	, UpsellSpotlightRentals=ISNULL(a.UpsellListRentalsSpotlightAd,0)
	, UpsellStandardListingRentals=ISNULL(a.UpsellListRentalsStandard,0)
	, UpsellStandardPlusListingRentals=ISNULL(a.UpsellListRentalsStandardPlus,0)
	, UpsellSubscriptionModelRent=ISNULL(r.UpsellRentSubscriptionModel,0)
	, UpsellVideoSpokesmodel=ISNULL(a.UpsellPropVideoSpokesModel,0)
	, UpsellVIPPlacementRent=ISNULL(r.UpsellRentVIPPlacement,0)
	, UpsellVirtualBrochure=ISNULL(a.UpsellPropVirtualBrochure,0)
	, UpsellVirtualTourFulfilled=ISNULL(a.VirtualTourFulfilled,0)
	, ClicksCommunityVideoAG=ISNULL(ClicksCommunityVideo,0)
	, ClicksDiamondMaxPhotoAG=0
	, ClicksDiamondMaxCheckAvailAG=0
	, ClicksFloorplanAG=ISNULL(a.ClicksFloorPlans,0)
	, ClicksFloorplanRent=0
	, ClicksHDFloorplanAG=0
	, ClicksHDFloorplanRent=0
	, ClicksPhotosAG=ISNULL(a.ClicksPhotos,0)
	, ClicksPhotosRent=0
	, ClicksHDPhotoAG=ISNULL(a.ClicksHDPhotos,0)
	, ClicksHDPhotoRent=0
	, ClicksHDVideoAG=ISNULL(a.ClicksHDVideos,0)
	, ClicksHDVideoRent=0
	, ClicksHDPanoTourAG=ISNULL(a.ClicksPanoramicTours,0)
	, ClicksHDPanoTourRent=0
	, ClicksMapAG=ISNULL(a.ClicksListingMap,0)
	, ClicksMapRent=ISNULL(r.MapClicks,0)
	, ClicksWebURLAG=ISNULL(a.ClicksListingWebLink,0)
	, ClicksWebURLRent=0
	, ClicksMgtCoURLAG=0
	, ClicksMgtCoURLRent=9
	, ClicksMgtCoPeelAdAG=ISNULL(a.ClicksMgmtCoPeelAd,0)
	, ClicksMgtCoPeelAdRent=0
	, ClicksReserveNowAG=ISNULL(a.ClicksReserveNow,0)
	, ClicksReserveNowRent=0
	, ClicksFeaturedCommunityAG=0
	, ClicksFeaturedCommunityRent=0
	, ClicksFeatCommCheckAvailAG=0
	, ClicksFeatCommCheckAvailRent=0
	, ClicksSRPListingCheckAvailAG=0
	, ClicksSRPListingCheckAvailRent=0
	, ClicksCR3AG=0
	, ClicksCR3Rent=0
	, ClicksSpotlightRentSpecialsAG=0
	, ClicksSpotlightRentSpecialsRent=0
	, ClicksSpotlightReserveNowAG=0
	, SRPListingImprAG=ISNULL(a.ImprSearchResults,0)
	, SRPListingImprRent=ISNULL(r.ImprSearchResults,0)
	, SRPUniqueVisitAG=ISNULL(a.ImprVisitCount,0)
	, SRPUniqueVisitRent=0
	, UniqueVisitsAG=ISNULL(a.UniqueVisits,0)
	, UniqueVisitsRent=0
	, UniqueVisitsMobileAG=ISNULL(a.UniqueVisits_Mobile,0)
	, UniqueVisitsMobileRent=0
	, UniqueVisitsAGSites=ISNULL(a.UniqueVisits_Sites,0)
	, ViewsListingPageWebAG=ISNULL(a.ViewsListingPage,0)
	, ViewsListingPageWebRent=0
	, ViewsListingPageMobileAG=ISNULL(a.ViewsListingPage_Mobile,0)
	, ViewsListingPageMobileRent=0
	, ViewsListingPageAGSites=ISNULL(a.ViewsListingPage_Sites,0)
	, PhoneLeadsAG=ISNULL(a.AllConnectedCalls,0)
	, PhoneLeadsRent=ISNULL(r.AllConnectedCalls,0)
	, EmailLeadsAG=ISNULL(a.EmailLeads,0)
	, EmailLeadsRent=ISNULL(r.DigitalEmailLeads,0)
	FROM 
	(SELECT *  FROM apartmentguide.mart.Listings a WITH (nolock) WHERE ymdid=@ymdid) a
	    FULL OUTER JOIN (SELECT * FROM rentcom.mart.listings r WITH (nolock) WHERE ymdid=@ymdid) r
	     on  a.listingid =r.listingid
     ) v 
	JOIN (SELECT DISTINCT ymdid, listingid
            FROM  (SELECT ymdid, listingid FROM apartmentguide.[Mart].[AGRentCombinedMartListings] WHERE ymdid=@ymdid
                    except
                    SELECT ymdid,listingid FROM rentpath.mart.listings WHERE ymdid=@ymdid
                  ) v0
          ) s 
	 ON v.ymdid=s.ymdid AND v.listingid=s.listingid

	SET NOCOUNT OFF;
END




/*
begin transaction richard
delete  rml 
from rentpath.mart.listings rml
join (SELECT DISTINCT ymdid, listingid
            FROM  (SELECT ymdid, listingid FROM apartmentguide.[Mart].[AGRentCombinedMartListings] WHERE ymdid=20150515
                    except
                    SELECT ymdid,listingid FROM rentpath.mart.listings WHERE ymdid=20150515
                  ) v0
      ) sml 
on rml.ymdid=sml.ymdid 
and rml.listingid=sml.listingid 

commit transaction richard


EXEC Mart.[pr_missing_MartListings] 20150515
EXEC Mart.[pr_missing_MartListings] 20150516
EXEC Mart.[pr_missing_MartListings] 20150517
EXEC Mart.[pr_missing_MartListings] 20150518
EXEC Mart.[pr_missing_MartListings] 20150519
EXEC Mart.[pr_missing_MartListings] 20150520
EXEC Mart.[pr_missing_MartListings] 20150521
EXEC Mart.[pr_missing_MartListings] 20150522
EXEC Mart.[pr_missing_MartListings] 20150523
EXEC Mart.[pr_missing_MartListings] 20150524
EXEC Mart.[pr_missing_MartListings] 20150525
EXEC Mart.[pr_missing_MartListings] 20150526
EXEC Mart.[pr_missing_MartListings] 20150527
EXEC Mart.[pr_missing_MartListings] 20150528
EXEC Mart.[pr_missing_MartListings] 20150529
EXEC Mart.[pr_missing_MartListings] 20150530
EXEC Mart.[pr_missing_MartListings] 20150531
EXEC Mart.[pr_missing_MartListings] 20150601
EXEC Mart.[pr_missing_MartListings] 20150602
*/









GO
/****** Object:  StoredProcedure [Mart].[pr_ModifyMartComputedColumns]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Mart].[pr_ModifyMartComputedColumns]
AS
/**************************************************************************************************
* Name:	Mart.pr_ModifyMartComputedColumns
* Desc:	Drops the computed columns in mart.Listings and recreates them with updated definitions
* -----------------------------------------------------------------------------------------
* Note: You *MUST* change and compile these column definitions before running this script or 
*       there wont be a change in the data that comprises the computed columns
*		
*		Each computation has a header since there are soooo many. Just do a CTRL F to find 
*		an existing computation more easily.
* -----------------------------------------------------------------------------------------
* Test:	EXEC RentPath.Mart.pr_ModifyMartComputedColumns
* -----------------------------------------------------------------------------------------
* Hist:	01	10/26/2016	Bob Langley			Ticket 24212 - Initial Version
* Hist:	02	11/03/2016	Sarah Mims			Ticket # 24335 - added all "additional" computed columns
* Hist: 03	02/07/2017	Sarah Mims			Case # 01340196 - productionizing this procedure by changing names where necessary
* Hist:	04	02/09/2017	Sarah Mims			No case - removed PrintConnectedCalls from DesktopColumns
* Hist:	05	02/15/2017	Kimberley Morrow	Case # 01398129 - made sure that Craigslisting Connected and Missed calls are commented out from all computed columns 
* Hist:	06	03/15/2017	Sarah Mims			No case - removed MissedCalls from PhoneLeads columns
* Hist: 07	04/25/2017	Colleen Rocks		Case # 01436935; add thirdpartyfeedleads
* Hist: 08	07/31/2017	Colleen Rocks		Case 01522668; removed MissedCalls from AllLeads columns
* Hist: 09	08/21/2017	Kimberley Morrow	Added MissedCalls back to AllLeads columns
**************************************************************************************************/
SET NOCOUNT ON

-----------------------------
-- Drop index because it includes computed columns
-----------------------------

DROP INDEX idx_MartListings_ListingID_YearMonth ON RentPath.Mart.Listings

-----------------------------
-- Drop computed columns
-----------------------------
BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN ClicksDiamondMaxPhoto
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN ClicksDiamondMaxCheckAvail
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN ClicksFloorplan
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN ClicksHDFloorplan
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN ClicksPhotos
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN ClicksHDPhoto
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN ClicksHDVideo
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN ClicksHDPanoTour
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN ClicksMap
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN ClicksWebURL
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN ClicksMgtCoPeelAd
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN ClicksReserveNow
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN ClicksFeaturedCommunity
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN ClicksFeatCommCheckAvail
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN ClicksSRPListingCheckAvail
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN ClicksCR3
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN ClicksSpotlightRentSpecials
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN ClicksSpotlightReserveNow
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN SRPListingImpr
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN SRPUniqueVisit
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN UniqueVisits
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN UniqueVisitsMobile
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN UniqueVisitsSites
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN ViewsListingPageWeb
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN ViewsListingPageMobile
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN ViewsListingPageSites
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN ConnectedCalls
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN DesktopConnectedCalls
END TRY
BEGIN CATCH
END CATCH


BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN MobileConnectedCalls
END TRY
BEGIN CATCH
END CATCH


BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN ConnectedCallsAG
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN DesktopConnectedCallsAG
END TRY
BEGIN CATCH
END CATCH


BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN MobileConnectedCallsAG
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN ConnectedCallsRent
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN DesktopConnectedCallsRent
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN MobileConnectedCallsRent
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN MissedCalls
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN DesktopMissedCalls
END TRY
BEGIN CATCH
END CATCH


BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN MobileMissedCalls
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN MissedCallsAG
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN DesktopMissedCallsAG
END TRY
BEGIN CATCH
END CATCH


BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN MobileMissedCallsAG
END TRY
BEGIN CATCH
END CATCH


BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN MissedCallsRent
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN DesktopMissedCallsRent
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN MobileMissedCallsRent
END TRY
BEGIN CATCH
END CATCH


BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN PhoneLeads
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN DesktopPhoneLeads
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN MobilePhoneLeads
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN PhoneLeadsAG
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN DesktopPhoneLeadsAG
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN MobilePhoneLeadsAG
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN PhoneLeadsRent
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN DesktopPhoneLeadsRent
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN MobilePhoneLeadsRent
END TRY
BEGIN CATCH
END CATCH


BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN EmailLeads
END TRY
BEGIN CATCH
END CATCH


BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN DesktopEmailLeads
END TRY
BEGIN CATCH
END CATCH


BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN MobileEmailLeads
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN EmailLeadsAG
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN DesktopEmailLeadsAG
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN MobileEmailLeadsAG
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN EmailLeadsRent
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN DesktopEmailLeadsRent
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN MobileEmailLeadsRent
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN ThirdPartyFeedLeads
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN DesktopLeads
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN MobileLeads
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN AllLeads
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN AllLeadsAG
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY

	ALTER TABLE RentPath.Mart.Listings
	DROP COLUMN AllLeadsRent
END TRY
BEGIN CATCH
END CATCH

-------------------------------------------------------------
-- Add the computed columns back with new column definitions
-------------------------------------------------------------

-------------------
--ClicksDiamondMaxPhoto
-------------------
ALTER TABLE RentPath.Mart.Listings
ADD ClicksDiamondMaxPhoto AS 
ClicksDiamondMaxPhotoAG
+0

-------------------
--ClicksDiamondMaxCheckAvail
-------------------
ALTER TABLE RentPath.Mart.Listings
ADD ClicksDiamondMaxCheckAvail AS 
ClicksDiamondMaxCheckAvailAG
+0

-------------------
--ClicksFloorplan
-------------------
ALTER TABLE RentPath.Mart.Listings
ADD ClicksFloorplan AS 
ClicksFloorplanAG
+ClicksFloorplanRent

-------------------
--ClicksHDFloorplan
-------------------
ALTER TABLE RentPath.Mart.Listings
ADD ClicksHDFloorplan AS 
ClicksHDFloorplanAG
+ClicksHDFloorplanRent

-------------------
--ClicksPhotos
-------------------
ALTER TABLE RentPath.Mart.Listings
ADD ClicksPhotos AS 
ClicksPhotosAG
+ClicksPhotosRent

-------------------
--ClicksHDPhoto
-------------------
ALTER TABLE RentPath.Mart.Listings
ADD ClicksHDPhoto AS 
ClicksHDPhotoAG
+ClicksHDPhotoRent

-------------------
--ClicksHDVideo
-------------------
ALTER TABLE RentPath.Mart.Listings
ADD ClicksHDVideo AS 
ClicksHDVideoAG
+ClicksHDVideoRent

-------------------
--ClicksHDPanoTour
-------------------
ALTER TABLE RentPath.Mart.Listings
ADD ClicksHDPanoTour AS 
ClicksHDPanoTourAG
+ClicksHDPanoTourRent

-------------------
--ClicksMap
-------------------
ALTER TABLE RentPath.Mart.Listings
ADD ClicksMap AS 
ClicksMapAG
+ClicksMapRent

-------------------
--ClicksWebURL
-------------------
ALTER TABLE RentPath.Mart.Listings
ADD ClicksWebURL AS 
ClicksWebURLAG
+ClicksWebURLRent

-------------------
--ClicksMgtCoPeelAd
-------------------
ALTER TABLE RentPath.Mart.Listings
ADD ClicksMgtCoPeelAd AS 
ClicksMgtCoPeelAdAG
+ClicksMgtCoPeelAdRent


-------------------
--ClicksReserveNow
-------------------
ALTER TABLE RentPath.Mart.Listings
ADD ClicksReserveNow AS 
ClicksReserveNowAG
+ClicksReserveNowRent

-------------------
--ClicksFeaturedCommunity
-------------------
ALTER TABLE RentPath.Mart.Listings
ADD ClicksFeaturedCommunity AS 
ClicksFeaturedCommunityAG
+ClicksFeaturedCommunityRent

-------------------
--ClicksFeatCommCheckAvail
-------------------
ALTER TABLE RentPath.Mart.Listings
ADD ClicksFeatCommCheckAvail AS 
ClicksFeatCommCheckAvailAG
+ClicksFeatCommCheckAvailRent

-------------------
--ClicksSRPListingCheckAvail
-------------------
ALTER TABLE RentPath.Mart.Listings
ADD ClicksSRPListingCheckAvail AS 
ClicksSRPListingCheckAvailAG
+ClicksSRPListingCheckAvailRent

-------------------
--ClicksCR3
-------------------
ALTER TABLE RentPath.Mart.Listings
ADD ClicksCR3 AS 
ClicksCR3AG
+ClicksCR3Rent

-------------------
--ClicksSpotlightRentSpecials
-------------------
ALTER TABLE RentPath.Mart.Listings
ADD ClicksSpotlightRentSpecials AS 
ClicksSpotlightRentSpecialsAG
+ClicksSpotlightRentSpecialsRent

-------------------
--ClicksSpotlightReserveNow
-------------------
ALTER TABLE RentPath.Mart.Listings
ADD ClicksSpotlightReserveNow AS 
ClicksSpotlightReserveNowAG
+0

-------------------
--SRPListingImpr
-------------------
ALTER TABLE RentPath.Mart.Listings
ADD SRPListingImpr AS 
SRPListingImprAG
+SRPListingImprRent

-------------------
--SRPUniqueVisit
-------------------
ALTER TABLE RentPath.Mart.Listings
ADD SRPUniqueVisit AS 
SRPUniqueVisitAG
+SRPUniqueVisitRent

-------------------
--UniqueVisits
-------------------
ALTER TABLE RentPath.Mart.Listings
ADD UniqueVisits AS 
UniqueVisitsAG
+UniqueVisitsRent


-------------------
--UniqueVisitsMobile
-------------------
ALTER TABLE RentPath.Mart.Listings
ADD UniqueVisitsMobile AS 
UniqueVisitsMobileAG
+UniqueVisitsMobileRent

-------------------
--UniqueVisitsSites
-------------------
ALTER TABLE RentPath.Mart.Listings
ADD UniqueVisitsSites AS 
UniqueVisitsAGSites
+0

-------------------
--ViewsListingPageWeb
-------------------
ALTER TABLE RentPath.Mart.Listings
ADD ViewsListingPageWeb AS 
ViewsListingPageWebAG
+ViewsListingPageWebRent

-------------------
--ViewsListingPageMobile
-------------------
ALTER TABLE RentPath.Mart.Listings
ADD ViewsListingPageMobile AS 
ViewsListingPageMobileAG
+ViewsListingPageMobileRent

-------------------
--ViewsListingPageSites
-------------------
ALTER TABLE RentPath.Mart.Listings
ADD ViewsListingPageSites AS 
ViewsListingPageAGSites
+0

----------------------------
--ConnectedCalls
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD ConnectedCalls AS 
AGCPrintConnectedCalls
+ASGPrintConnectedCalls
+CombinedFeedsConnectedCalls
--+CraigsListConnectedCalls
+CTCConnectedCalls
+DripConnectedCalls
+GoogleConnectedCalls
+LeadMailConnectedCalls
+LuxuryConnectedCalls
+MarchexConnectedCalls
+MobileSEMConnectedCalls
+PaidSPConnectedCalls
+PPCConnectedCalls
+RentConnectedCallsAG
+RentConnectedCallsRent
+RentMobileConnectedCallsAG
+RentMobileConnectedCallsRent
+RentMobileSEMConnectedCalls
+RentOneWebConnectedCallsAG
+RentOneWebConnectedCallsRent
+RentSEMConnectedCalls
+SEMConnectedCalls
+SitesConnectedCalls
+SMSConnectedCalls
+TruliaConnectedCalls
+VideoConnectedCalls
+WebLocalTrackingNumberConnectedCalls
+WebConnectedCalls
+RentalsLocalConnectedCalls
+RentalsConnectedCalls
+RentAltRegConnectedCallsAG
+RentAltRegConnectedCallsRent

----------------------------
--ConnectedCallsAG
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD ConnectedCallsAG AS 
AGCPrintConnectedCalls
+ASGPrintConnectedCalls
+CombinedFeedsConnectedCalls
--+CraigsListConnectedCalls
+CTCConnectedCalls
+DripConnectedCalls
+GoogleConnectedCalls
+LeadMailConnectedCalls
+LuxuryConnectedCalls
+MarchexConnectedCalls
+MobileSEMConnectedCalls
+PaidSPConnectedCalls
+PPCConnectedCalls
+RentConnectedCallsAG
+RentMobileConnectedCallsAG
+RentOneWebConnectedCallsAG
+SEMConnectedCalls
+SitesConnectedCalls
+SMSConnectedCalls
+TruliaConnectedCalls
+VideoConnectedCalls
+WebLocalTrackingNumberConnectedCalls
+WebConnectedCalls
+RentalsLocalConnectedCalls
+RentalsConnectedCalls
+RentAltRegConnectedCallsAG

----------------------------
--ConnectedCallsRent
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD ConnectedCallsRent AS 
RentConnectedCallsRent
+RentMobileConnectedCallsRent
+RentMobileSEMConnectedCalls
+RentOneWebConnectedCallsRent
+RentSEMConnectedCalls
+RentAltRegConnectedCallsRent

----------------------------
--DesktopConnectedCalls
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD DesktopConnectedCalls AS 
--AGCPrintConnectedCalls
--+ASGPrintConnectedCalls
CombinedFeedsConnectedCalls
--+CraigsListConnectedCalls
+CTCConnectedCalls
+DripConnectedCalls
+GoogleConnectedCalls
+LeadMailConnectedCalls
+LuxuryConnectedCalls
+MarchexConnectedCalls
+PaidSPConnectedCalls
+PPCConnectedCalls
+RentConnectedCallsAG
+RentConnectedCallsRent
+RentOneWebConnectedCallsAG
+RentOneWebConnectedCallsRent
+RentSEMConnectedCalls
+SEMConnectedCalls
+SitesConnectedCalls
+SMSConnectedCalls
+TruliaConnectedCalls
+VideoConnectedCalls
+WebConnectedCalls
+RentalsLocalConnectedCalls
+RentalsConnectedCalls
+RentAltRegConnectedCallsAG
+RentAltRegConnectedCallsRent

----------------------------
--DesktopConnectedCallsAG
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD DesktopConnectedCallsAG AS
--AGCPrintConnectedCalls
--+ASGPrintConnectedCalls
CombinedFeedsConnectedCalls
--+CraigsListConnectedCalls
+CTCConnectedCalls
+DripConnectedCalls
+GoogleConnectedCalls
+LeadMailConnectedCalls
+LuxuryConnectedCalls
+MarchexConnectedCalls
+PaidSPConnectedCalls
+PPCConnectedCalls
+RentConnectedCallsAG
+RentOneWebConnectedCallsAG
+SEMConnectedCalls
+SitesConnectedCalls
+SMSConnectedCalls
+TruliaConnectedCalls
+VideoConnectedCalls
+WebConnectedCalls
+RentalsLocalConnectedCalls
+RentalsConnectedCalls
+RentAltRegConnectedCallsAG

----------------------------
--DesktopConnectedCallsRent
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD DesktopConnectedCallsRent AS
RentConnectedCallsRent
+RentOneWebConnectedCallsRent
+RentSEMConnectedCalls
+RentAltRegConnectedCallsRent

----------------------------
--MobileConnectedCalls
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD MobileConnectedCalls AS 
MobileSEMConnectedCalls
+RentMobileConnectedCallsAG
+RentMobileConnectedCallsRent
+RentMobileSEMConnectedCalls
+WebLocalTrackingNumberConnectedCalls--If we go back before 2014 in this table ever - we will need to note/adjust the change from Web to Mobile for this lead type (20110701) 

----------------------------
--MobileConnectedCallsAG
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD MobileConnectedCallsAG AS 
MobileSEMConnectedCalls
+RentMobileConnectedCallsAG
+WebLocalTrackingNumberConnectedCalls

----------------------------
--MobileConnectedCallsRent
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD MobileConnectedCallsRent AS 
RentMobileConnectedCallsRent
+RentMobileSEMConnectedCalls

----------------------------
--MissedCalls
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD MissedCalls AS 
AGCPrintMissedCalls
+ASGPrintMissedCalls
+CombinedFeedsMissedCalls
--+CraigsListMissedCalls
+CTCMissedCalls
+DripMissedCalls
+GoogleMissedCalls
+LeadMailMissedCalls
+LuxuryMissedCalls
+MarchexMissedCalls
+MobileSEMMissedCalls
+PaidSPMissedCalls
+PPCMissedCalls
+RentMissedCallsAG
+RentMissedCallsRent
+RentMobileMissedCallsAG
+RentMobileMissedCallsRent
+RentMobileSEMMissedCalls
+RentOneWebMissedCallsAG
+RentOneWebMissedCallsRent
+RentSEMMissedCalls
+SEMMissedCalls
+SitesMissedCalls
+SMSMissedCalls
+TruliaMissedCalls
+VideoMissedCalls
+WebLocalTrackingNumberMissedCalls
+WebMissedCalls
+RentalsLocalMissedCalls
+RentalsMissedCalls
+RentAltRegMissedCallsAG
+RentAltRegMissedCallsRent

----------------------------
--MissedCallsAG
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD MissedCallsAG AS 
AGCPrintMissedCalls
+ASGPrintMissedCalls
+CombinedFeedsMissedCalls
--+CraigsListMissedCalls
+CTCMissedCalls
+DripMissedCalls
+GoogleMissedCalls
+LeadMailMissedCalls
+LuxuryMissedCalls
+MarchexMissedCalls
+MobileSEMMissedCalls
+PaidSPMissedCalls
+PPCMissedCalls
+RentMissedCallsAG
+RentMobileMissedCallsAG
+RentOneWebMissedCallsAG
+SEMMissedCalls
+SitesMissedCalls
+SMSMissedCalls
+TruliaMissedCalls
+VideoMissedCalls
+WebLocalTrackingNumberMissedCalls
+WebMissedCalls
+RentalsLocalMissedCalls
+RentalsMissedCalls
+RentAltRegMissedCallsAG

----------------------------
--MissedCallsRent
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD MissedCallsRent AS 
RentMissedCallsRent
+RentMobileMissedCallsRent
+RentMobileSEMMissedCalls
+RentOneWebMissedCallsRent
+RentSEMMissedCalls
+RentAltRegMissedCallsRent


----------------------------
--DesktopMissedCalls
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD DesktopMissedCalls AS 
CombinedFeedsMissedCalls
--+CraigsListMissedCalls
+CTCMissedCalls
+DripMissedCalls
+GoogleMissedCalls
+LeadMailMissedCalls
+LuxuryMissedCalls
+MarchexMissedCalls
+PaidSPMissedCalls
+PPCMissedCalls
+RentMissedCallsAG
+RentMissedCallsRent
+RentOneWebMissedCallsAG
+RentOneWebMissedCallsRent
+RentSEMMissedCalls
+SEMMissedCalls
+SitesMissedCalls
+SMSMissedCalls
+TruliaMissedCalls
+VideoMissedCalls
+WebMissedCalls
+RentalsLocalMissedCalls
+RentalsMissedCalls
+RentAltRegMissedCallsAG
+RentAltRegMissedCallsRent

----------------------------
--DesktopMissedCallsAG
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD DesktopMissedCallsAG AS 
CombinedFeedsMissedCalls
--+CraigsListMissedCalls
+CTCMissedCalls
+DripMissedCalls
+GoogleMissedCalls
+LeadMailMissedCalls
+LuxuryMissedCalls
+MarchexMissedCalls
+PaidSPMissedCalls
+PPCMissedCalls
+RentMissedCallsAG
+RentOneWebMissedCallsAG
+SEMMissedCalls
+SitesMissedCalls
+SMSMissedCalls
+TruliaMissedCalls
+VideoMissedCalls
+WebMissedCalls
+RentalsLocalMissedCalls
+RentalsMissedCalls
+RentAltRegMissedCallsAG

----------------------------
--DesktopMissedCallsRent
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD DesktopMissedCallsRent AS 
RentMissedCallsRent
+RentOneWebMissedCallsRent
+RentSEMMissedCalls
+RentAltRegMissedCallsRent


----------------------------
--MobileMissedCalls
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD MobileMissedCalls AS
MobileSEMMissedCalls
+RentMobileMissedCallsAG
+RentMobileMissedCallsRent
+RentMobileSEMMissedCalls
+WebLocalTrackingNumberMissedCalls

----------------------------
--MobileMissedCallsAG
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD MobileMissedCallsAG AS
MobileSEMMissedCalls
+RentMobileMissedCallsAG
+WebLocalTrackingNumberMissedCalls

----------------------------
--MobileMissedCallsRent
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD MobileMissedCallsRent AS
RentMobileMissedCallsRent
+RentMobileSEMMissedCalls

----------------------------
--PhoneLeads
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD PhoneLeads AS 
AGCPrintConnectedCalls
+ASGPrintConnectedCalls
+CombinedFeedsConnectedCalls
--+CraigsListConnectedCalls
+CTCConnectedCalls
+DripConnectedCalls
+GoogleConnectedCalls
+LeadMailConnectedCalls
+LuxuryConnectedCalls
+MarchexConnectedCalls
+MobileSEMConnectedCalls
+PaidSPConnectedCalls
+PPCConnectedCalls
+RentConnectedCallsAG
+RentConnectedCallsRent
+RentMobileConnectedCallsAG
+RentMobileConnectedCallsRent
+RentMobileSEMConnectedCalls
+RentOneWebConnectedCallsAG
+RentOneWebConnectedCallsRent
+RentSEMConnectedCalls
+SEMConnectedCalls
+SitesConnectedCalls
+SMSConnectedCalls
+TruliaConnectedCalls
+VideoConnectedCalls
+WebLocalTrackingNumberConnectedCalls
+WebConnectedCalls
+RentalsLocalConnectedCalls
+RentalsConnectedCalls
+RentAltRegConnectedCallsAG
+RentAltRegConnectedCallsRent
--+AGCPrintMissedCalls
--+ASGPrintMissedCalls
--+CombinedFeedsMissedCalls
----+CraigsListMissedCalls
--+CTCMissedCalls
--+DripMissedCalls
--+GoogleMissedCalls
--+LeadMailMissedCalls
--+LuxuryMissedCalls
--+MarchexMissedCalls
--+MobileSEMMissedCalls
--+PaidSPMissedCalls
--+PPCMissedCalls
--+RentMissedCallsAG
--+RentMissedCallsRent
--+RentMobileMissedCallsAG
--+RentMobileMissedCallsRent
--+RentMobileSEMMissedCalls
--+RentOneWebMissedCallsAG
--+RentOneWebMissedCallsRent
--+RentSEMMissedCalls
--+SEMMissedCalls
--+SitesMissedCalls
--+SMSMissedCalls
--+TruliaMissedCalls
--+VideoMissedCalls
--+WebLocalTrackingNumberMissedCalls
--+WebMissedCalls
--+RentalsLocalMissedCalls
--+RentalsMissedCalls
--+RentAltRegMissedCallsAG
--+RentAltRegMissedCallsRent

----------------------------
--PhoneLeadsAG
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD PhoneLeadsAG AS 
AGCPrintConnectedCalls
+ASGPrintConnectedCalls
+CombinedFeedsConnectedCalls
--+CraigsListConnectedCalls
+CTCConnectedCalls
+DripConnectedCalls
+GoogleConnectedCalls
+LeadMailConnectedCalls
+LuxuryConnectedCalls
+MarchexConnectedCalls
+MobileSEMConnectedCalls
+PaidSPConnectedCalls
+PPCConnectedCalls
+RentConnectedCallsAG
+RentMobileConnectedCallsAG
+RentOneWebConnectedCallsAG
+SEMConnectedCalls
+SitesConnectedCalls
+SMSConnectedCalls
+TruliaConnectedCalls
+VideoConnectedCalls
+WebLocalTrackingNumberConnectedCalls
+WebConnectedCalls
+RentalsLocalConnectedCalls
+RentalsConnectedCalls
+RentAltRegConnectedCallsAG
--+AGCPrintMissedCalls
--+ASGPrintMissedCalls
--+CombinedFeedsMissedCalls
----+CraigsListMissedCalls
--+CTCMissedCalls
--+DripMissedCalls
--+GoogleMissedCalls
--+LeadMailMissedCalls
--+LuxuryMissedCalls
--+MarchexMissedCalls
--+MobileSEMMissedCalls
--+PaidSPMissedCalls
--+PPCMissedCalls
--+RentMissedCallsAG
--+RentMobileMissedCallsAG
--+RentOneWebMissedCallsAG
--+SEMMissedCalls
--+SitesMissedCalls
--+SMSMissedCalls
--+TruliaMissedCalls
--+VideoMissedCalls
--+WebLocalTrackingNumberMissedCalls
--+WebMissedCalls
--+RentalsLocalMissedCalls
--+RentalsMissedCalls
--+RentAltRegMissedCallsAG

----------------------------
--PhoneLeadsRent
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD PhoneLeadsRent AS 
RentConnectedCallsRent
+RentMobileConnectedCallsRent
+RentMobileSEMConnectedCalls
+RentOneWebConnectedCallsRent
+RentSEMConnectedCalls
+RentAltRegConnectedCallsRent
--+RentMissedCallsRent
--+RentMobileMissedCallsRent
--+RentMobileSEMMissedCalls
--+RentOneWebMissedCallsRent
--+RentSEMMissedCalls
--+RentAltRegMissedCallsRent

----------------------------
--DesktopPhoneLeads
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD DesktopPhoneLeads AS 
CombinedFeedsConnectedCalls
--+CraigsListConnectedCalls
+CTCConnectedCalls
+DripConnectedCalls
+GoogleConnectedCalls
+LeadMailConnectedCalls
+LuxuryConnectedCalls
+MarchexConnectedCalls
+PaidSPConnectedCalls
+PPCConnectedCalls
+RentConnectedCallsAG
+RentConnectedCallsRent
+RentOneWebConnectedCallsAG
+RentOneWebConnectedCallsRent
+RentSEMConnectedCalls
+SEMConnectedCalls
+SitesConnectedCalls
+SMSConnectedCalls
+TruliaConnectedCalls
+VideoConnectedCalls
+WebConnectedCalls
+RentalsLocalConnectedCalls
+RentalsConnectedCalls
+RentAltRegConnectedCallsAG
+RentAltRegConnectedCallsRent
--+CombinedFeedsMissedCalls
----+CraigsListMissedCalls
--+CTCMissedCalls
--+DripMissedCalls
--+GoogleMissedCalls
--+LeadMailMissedCalls
--+LuxuryMissedCalls
--+MarchexMissedCalls
--+PaidSPMissedCalls
--+PPCMissedCalls
--+RentMissedCallsAG
--+RentMissedCallsRent
--+RentOneWebMissedCallsAG
--+RentOneWebMissedCallsRent
--+RentSEMMissedCalls
--+SEMMissedCalls
--+SitesMissedCalls
--+SMSMissedCalls
--+TruliaMissedCalls
--+VideoMissedCalls
--+WebMissedCalls
--+RentalsLocalMissedCalls
--+RentalsMissedCalls
--+RentAltRegMissedCallsAG
--+RentAltRegMissedCallsRent

----------------------------
--DesktopPhoneLeadsAG
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD DesktopPhoneLeadsAG AS 
CombinedFeedsConnectedCalls
--+CraigsListConnectedCalls
+CTCConnectedCalls
+DripConnectedCalls
+GoogleConnectedCalls
+LeadMailConnectedCalls
+LuxuryConnectedCalls
+MarchexConnectedCalls
+PaidSPConnectedCalls
+PPCConnectedCalls
+RentConnectedCallsAG
+RentOneWebConnectedCallsAG
+SEMConnectedCalls
+SitesConnectedCalls
+SMSConnectedCalls
+TruliaConnectedCalls
+VideoConnectedCalls
+WebConnectedCalls
+RentalsLocalConnectedCalls
+RentalsConnectedCalls
+RentAltRegConnectedCallsAG
--+CombinedFeedsMissedCalls
----+CraigsListMissedCalls
--+CTCMissedCalls
--+DripMissedCalls
--+GoogleMissedCalls
--+LeadMailMissedCalls
--+LuxuryMissedCalls
--+MarchexMissedCalls
--+PaidSPMissedCalls
--+PPCMissedCalls
--+RentMissedCallsAG
--+RentOneWebMissedCallsAG
--+SEMMissedCalls
--+SitesMissedCalls
--+SMSMissedCalls
--+TruliaMissedCalls
--+VideoMissedCalls
--+WebMissedCalls
--+RentalsLocalMissedCalls
--+RentalsMissedCalls
--+RentAltRegMissedCallsAG

----------------------------
--DesktopPhoneLeadsRent
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD DesktopPhoneLeadsRent AS 
RentConnectedCallsRent
+RentOneWebConnectedCallsRent
+RentSEMConnectedCalls
+RentAltRegConnectedCallsRent
--+RentMissedCallsRent
--+RentOneWebMissedCallsRent
--+RentSEMMissedCalls
--+RentAltRegMissedCallsRent


----------------------------
--MobilePhoneLeads
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD MobilePhoneLeads AS 
MobileSEMConnectedCalls
+RentMobileConnectedCallsAG
+RentMobileConnectedCallsRent
+RentMobileSEMConnectedCalls
+WebLocalTrackingNumberConnectedCalls
--+MobileSEMMissedCalls
--+RentMobileMissedCallsAG
--+RentMobileMissedCallsRent
--+RentMobileSEMMissedCalls
--+WebLocalTrackingNumberMissedCalls

----------------------------
--MobilePhoneLeadsAG
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD MobilePhoneLeadsAG AS 
MobileSEMConnectedCalls
+RentMobileConnectedCallsAG
+WebLocalTrackingNumberConnectedCalls
--+MobileSEMMissedCalls
--+RentMobileMissedCallsAG
--+WebLocalTrackingNumberMissedCalls

----------------------------
--MobilePhoneLeadsRent
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD MobilePhoneLeadsRent AS 
RentMobileConnectedCallsRent
+RentMobileSEMConnectedCalls
--+RentMobileMissedCallsRent
--+RentMobileSEMMissedCalls


----------------------------
--EmailLeads
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD EmailLeads AS 
AGEmailLeads
+AGKindleEmailLeads
+AGMobileEmailLeads
+AGTabletEmailLeads
+AIMCOEmailLeads
+AndroidEmailLeadsAG
+AndroidEmailLeadsRent
+CampusHomesOnlineEmailLeads
+CondoEmailLeads
+EREIFeedLeads
+HotpadsEmailLeads
+iPadEmailLeadsAG
+iPadEmailLeadsRent
+iPhoneEmailLeadsAG
+iPhoneEmailLeadsRent
+LovelyEmailLeads
+LuxuryEmailLeads
+MetroEmailLeads
+NeighborhoodEmailLeads
+OodleEmailLeads
+PropSolutionsFeedLeads
+RDTFeedLeadsAG
+RDTFeedLeadsRent
+RentAndroidEmailLeads
+RentEmailLeadsAG
+RentEmailLeadsRent
+RentiPadEmailLeads
+RentiPhoneEmailLeads
+RentRentarEmailLeads
+SitesEmailLeads
+TruliaEmailLeadsAG
+TruliaEmailLeadsRent
+VastEmailLeads
+VerticalBrandsEmailLeads
+YardiRCFeedLeads
+YieldFeedLeads
+ZillowEmailLeads
+RentalHousesEmailLeads
+RentalsAndroidEmailLeads
+RentalsEmailLeads
+RentalsIPhoneEmailLeads
+RentalsMobileEmailLeads

----------------------------
--EmailLeadsAG
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD EmailLeadsAG AS 
AGEmailLeads
+AGKindleEmailLeads
+AGMobileEmailLeads
+AGTabletEmailLeads
+AIMCOEmailLeads
+AndroidEmailLeadsAG
+CampusHomesOnlineEmailLeads
+CondoEmailLeads
+EREIFeedLeads
+HotpadsEmailLeads
+iPadEmailLeadsAG
+iPhoneEmailLeadsAG
+LovelyEmailLeads
+LuxuryEmailLeads
+MetroEmailLeads
+NeighborhoodEmailLeads
+OodleEmailLeads
+PropSolutionsFeedLeads
+RDTFeedLeadsAG
+RentAndroidEmailLeads
+RentEmailLeadsAG
+RentRentarEmailLeads
+SitesEmailLeads
+TruliaEmailLeadsAG
+VastEmailLeads
+VerticalBrandsEmailLeads
+YardiRCFeedLeads
+YieldFeedLeads
+ZillowEmailLeads
+RentalHousesEmailLeads
+RentalsAndroidEmailLeads
+RentalsEmailLeads
+RentalsIPhoneEmailLeads
+RentalsMobileEmailLeads

----------------------------
--EmailLeadsRent
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD EmailLeadsRent AS 
AndroidEmailLeadsRent
+iPadEmailLeadsRent
+iPhoneEmailLeadsRent
+RDTFeedLeadsRent
+RentEmailLeadsRent
+RentiPadEmailLeads
+RentiPhoneEmailLeads
+TruliaEmailLeadsRent

----------------------------
--ThirdPartyFeedLeads
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD ThirdPartyFeedLeads AS
CombinedFeedsConnectedCalls
+CombinedFeedsMissedCalls
+EREIFeedLeads
+PropSolutionsFeedLeads
+RDTFeedLeadsAG
+RDTFeedLeadsRent
+YardiRCFeedLeads
+YieldFeedLeads

----------------------------
--DesktopEmaiLeads
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD DesktopEmailLeads AS 
AGEmailLeads
+AIMCOEmailLeads
+CampusHomesOnlineEmailLeads
+CondoEmailLeads
+EREIFeedLeads
+HotpadsEmailLeads
+LovelyEmailLeads
+LuxuryEmailLeads
+MetroEmailLeads
+NeighborhoodEmailLeads
+OodleEmailLeads
+PropSolutionsFeedLeads
+RDTFeedLeadsAG
+RDTFeedLeadsRent
+RentEmailLeadsAG
+RentEmailLeadsRent
+RentRentarEmailLeads
+SitesEmailLeads
+TruliaEmailLeadsAG
+TruliaEmailLeadsRent
+VastEmailLeads
+VerticalBrandsEmailLeads
+YardiRCFeedLeads
+YieldFeedLeads
+ZillowEmailLeads
+RentalHousesEmailLeads
+RentalsEmailLeads


----------------------------
--DesktopEmaiLeadsAG
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD DesktopEmailLeadsAG AS 
AGEmailLeads
+AIMCOEmailLeads
+CampusHomesOnlineEmailLeads
+CondoEmailLeads
+EREIFeedLeads
+HotpadsEmailLeads
+LovelyEmailLeads
+LuxuryEmailLeads
+MetroEmailLeads
+NeighborhoodEmailLeads
+OodleEmailLeads
+PropSolutionsFeedLeads
+RDTFeedLeadsAG
+RentEmailLeadsAG
+RentRentarEmailLeads
+SitesEmailLeads
+TruliaEmailLeadsAG
+VastEmailLeads
+VerticalBrandsEmailLeads
+YardiRCFeedLeads
+YieldFeedLeads
+ZillowEmailLeads
+RentalHousesEmailLeads
+RentalsEmailLeads

----------------------------
--DesktopEmaiLeadsRent
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD DesktopEmailLeadsRent AS 
RDTFeedLeadsRent
+RentEmailLeadsRent
+TruliaEmailLeadsRent

----------------------------
--MobileEmailLeads
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD MobileEmailLeads AS 
AGKindleEmailLeads
+AGMobileEmailLeads
+AGTabletEmailLeads
+AndroidEmailLeadsAG
+AndroidEmailLeadsRent
+iPadEmailLeadsAG
+iPadEmailLeadsRent
+iPhoneEmailLeadsAG
+iPhoneEmailLeadsRent
+RentAndroidEmailLeads
+RentiPadEmailLeads
+RentiPhoneEmailLeads
+RentalsAndroidEmailLeads
+RentalsIPhoneEmailLeads
+RentalsMobileEmailLeads

----------------------------
--MobileEmailLeadsAG
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD MobileEmailLeadsAG AS 
AGKindleEmailLeads
+AGMobileEmailLeads
+AGTabletEmailLeads
+AndroidEmailLeadsAG
+iPadEmailLeadsAG
+iPhoneEmailLeadsAG
+RentAndroidEmailLeads
+RentalsAndroidEmailLeads
+RentalsIPhoneEmailLeads
+RentalsMobileEmailLeads

----------------------------
--MobileEmailLeadsRent
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD MobileEmailLeadsRent AS
AndroidEmailLeadsRent
+iPadEmailLeadsRent
+iPhoneEmailLeadsRent
+RentiPadEmailLeads
+RentiPhoneEmailLeads

----------------------------
--AllLeads
----------------------------
ALTER TABLE RentPath.Mart.Listings
ADD AllLeads AS 
AGCPrintConnectedCalls
+AGCPrintMissedCalls
+ASGPrintConnectedCalls
+ASGPrintMissedCalls
+CombinedFeedsConnectedCalls
+CombinedFeedsMissedCalls
--+CraigsListConnectedCalls
--+CraigsListMissedCalls
+CTCConnectedCalls
+CTCMissedCalls
+DripConnectedCalls
+DripMissedCalls
+GoogleConnectedCalls
+GoogleMissedCalls
+LeadMailConnectedCalls
+LeadMailMissedCalls
+LuxuryConnectedCalls
+LuxuryMissedCalls
+MarchexConnectedCalls
+MarchexMissedCalls
+MobileSEMConnectedCalls
+MobileSEMMissedCalls
+PaidSPConnectedCalls
+PaidSPMissedCalls
+PPCConnectedCalls
+PPCMissedCalls
+RentConnectedCallsAG
+RentMissedCallsAG
+RentConnectedCallsRent
+RentMissedCallsRent
+RentMobileConnectedCallsAG
+RentMobileMissedCallsAG
+RentMobileConnectedCallsRent
+RentMobileMissedCallsRent
+RentMobileSEMConnectedCalls
+RentMobileSEMMissedCalls
+RentOneWebConnectedCallsAG
+RentOneWebMissedCallsAG
+RentOneWebConnectedCallsRent
+RentOneWebMissedCallsRent
+RentSEMConnectedCalls
+RentSEMMissedCalls
+SEMConnectedCalls
+SEMMissedCalls
+SitesConnectedCalls
+SitesMissedCalls
+SMSConnectedCalls
+SMSMissedCalls
+TruliaConnectedCalls
+TruliaMissedCalls
+VideoConnectedCalls
+VideoMissedCalls
+WebLocalTrackingNumberConnectedCalls
+WebLocalTrackingNumberMissedCalls
+WebConnectedCalls
+WebMissedCalls
+AGEmailLeads
+AGKindleEmailLeads
+AGMobileEmailLeads
+AGTabletEmailLeads
+AIMCOEmailLeads
+AndroidEmailLeadsAG
+AndroidEmailLeadsRent
+CampusHomesOnlineEmailLeads
+CondoEmailLeads
+EREIFeedLeads
+HotpadsEmailLeads
+iPadEmailLeadsAG
+iPadEmailLeadsRent
+iPhoneEmailLeadsAG
+iPhoneEmailLeadsRent
+LovelyEmailLeads
+LuxuryEmailLeads
+MetroEmailLeads
+NeighborhoodEmailLeads
+OodleEmailLeads
+PropSolutionsFeedLeads
+RDTFeedLeadsAG
+RDTFeedLeadsRent
+RentAndroidEmailLeads
+RentEmailLeadsAG
+RentEmailLeadsRent
+RentiPadEmailLeads
+RentiPhoneEmailLeads
+RentRentarEmailLeads
+SitesEmailLeads
+TruliaEmailLeadsAG
+TruliaEmailLeadsRent
+VastEmailLeads
+VerticalBrandsEmailLeads
+YardiRCFeedLeads
+YieldFeedLeads
+ZillowEmailLeads
+RentalHousesEmailLeads
+RentalsAndroidEmailLeads
+RentalsEmailLeads
+RentalsIPhoneEmailLeads
+RentalsMobileEmailLeads
+RentalsLocalConnectedCalls
+RentalsLocalMissedCalls
+RentalsConnectedCalls
+RentalsMissedCalls
+RentAltRegConnectedCallsAG
+RentAltRegMissedCallsAG
+RentAltRegConnectedCallsRent
+RentAltRegMissedCallsRent


-----------------------------
-- Recreate the index
-----------------------------

	CREATE NONCLUSTERED INDEX [idx_MartListings_ListingID_YearMonth] ON [Mart].[Listings]
	(
		[ListingID] ASC,
		[YearMonth] ASC
	)
	INCLUDE ( 	[PropertyIDAG],
		[StatusIDAG],
		[StatusIDRent],
		[ViewsListingPageWeb],
		[ViewsListingPageMobile],
		[AllLeads]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]








GO
/****** Object:  StoredProcedure [Mart].[pr_ModifyMartLocatorComputedColumns]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Mart].[pr_ModifyMartLocatorComputedColumns]
AS
/**************************************************************************************************
* Name:	Mart.pr_ModifyMartLocatorComputedColumns
* Desc:	Drops the computed columns in mart.Listings and recreates them with updated definitions
* -----------------------------------------------------------------------------------------
* Note: You *MUST* change and compile these column definitions before running this script or 
*       there wont be a change in the data that comprises the computed columns
*		
*		Each computation has a header since there are soooo many. Just do a CTRL F to find 
*		an existing computation more easily.
* -----------------------------------------------------------------------------------------
* Test:	EXEC RentPath.Mart.pr_ModifyMartLocatorComputedColumns
* -----------------------------------------------------------------------------------------
* Hist:	01	02/09/2017	Sarah Mims			Case # 01340195 - Initial version
**************************************************************************************************/
SET NOCOUNT ON

-----------------------------
-- Drop computed columns
-----------------------------
BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN ClicksDiamondMaxPhoto
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN ClicksDiamondMaxCheckAvail
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN ClicksFloorplan
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN ClicksHDFloorplan
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN ClicksPhotos
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN ClicksHDPhoto
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN ClicksHDVideo
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN ClicksHDPanoTour
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN ClicksMap
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN ClicksWebURL
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN ClicksMgtCoPeelAd
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN ClicksReserveNow
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN ClicksFeaturedCommunity
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN ClicksFeatCommCheckAvail
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN ClicksSRPListingCheckAvail
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN ClicksCR3
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN ClicksSpotlightRentSpecials
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN ClicksSpotlightReserveNow
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN SRPListingImpr
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN SRPUniqueVisit
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN UniqueVisits
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN UniqueVisitsMobile
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN UniqueVisitsSites
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN ViewsListingPageWeb
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN ViewsListingPageMobile
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN ViewsListingPageSites
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN ConnectedCalls
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN DesktopConnectedCalls
END TRY
BEGIN CATCH
END CATCH


BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN MobileConnectedCalls
END TRY
BEGIN CATCH
END CATCH


BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN ConnectedCallsAG
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN DesktopConnectedCallsAG
END TRY
BEGIN CATCH
END CATCH


BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN MobileConnectedCallsAG
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN ConnectedCallsRent
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN DesktopConnectedCallsRent
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN MobileConnectedCallsRent
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN MissedCalls
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN DesktopMissedCalls
END TRY
BEGIN CATCH
END CATCH


BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN MobileMissedCalls
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN MissedCallsAG
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN DesktopMissedCallsAG
END TRY
BEGIN CATCH
END CATCH


BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN MobileMissedCallsAG
END TRY
BEGIN CATCH
END CATCH


BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN MissedCallsRent
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN DesktopMissedCallsRent
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN MobileMissedCallsRent
END TRY
BEGIN CATCH
END CATCH


BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN PhoneLeads
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN DesktopPhoneLeads
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN MobilePhoneLeads
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN PhoneLeadsAG
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN DesktopPhoneLeadsAG
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN MobilePhoneLeadsAG
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN PhoneLeadsRent
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN DesktopPhoneLeadsRent
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN MobilePhoneLeadsRent
END TRY
BEGIN CATCH
END CATCH


BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN EmailLeads
END TRY
BEGIN CATCH
END CATCH


BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN DesktopEmailLeads
END TRY
BEGIN CATCH
END CATCH


BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN MobileEmailLeads
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN EmailLeadsAG
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN DesktopEmailLeadsAG
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN MobileEmailLeadsAG
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN EmailLeadsRent
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN DesktopEmailLeadsRent
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN MobileEmailLeadsRent
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN DesktopLeads
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN MobileLeads
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN AllLeads
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN AllLeadsAG
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN AllLeadsRent
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	ALTER TABLE RentPath.Mart.LocatorListings
	DROP COLUMN AdditionalEmailLeads
END TRY
BEGIN CATCH
END CATCH

-------------------------------------------------------------
-- Add the computed columns back with new column definitions
-------------------------------------------------------------

-------------------
--ClicksDiamondMaxPhoto
-------------------
ALTER TABLE RentPath.Mart.LocatorListings
ADD ClicksDiamondMaxPhoto AS 
ClicksDiamondMaxPhotoAG
+0

-------------------
--ClicksDiamondMaxCheckAvail
-------------------
ALTER TABLE RentPath.Mart.LocatorListings
ADD ClicksDiamondMaxCheckAvail AS 
ClicksDiamondMaxCheckAvailAG
+0

-------------------
--ClicksFloorplan
-------------------
ALTER TABLE RentPath.Mart.LocatorListings
ADD ClicksFloorplan AS 
ClicksFloorplanAG
+ClicksFloorplanRent

-------------------
--ClicksHDFloorplan
-------------------
ALTER TABLE RentPath.Mart.LocatorListings
ADD ClicksHDFloorplan AS 
ClicksHDFloorplanAG
+ClicksHDFloorplanRent

-------------------
--ClicksPhotos
-------------------
ALTER TABLE RentPath.Mart.LocatorListings
ADD ClicksPhotos AS 
ClicksPhotosAG
+ClicksPhotosRent

-------------------
--ClicksHDPhoto
-------------------
ALTER TABLE RentPath.Mart.LocatorListings
ADD ClicksHDPhoto AS 
ClicksHDPhotoAG
+ClicksHDPhotoRent

-------------------
--ClicksHDVideo
-------------------
ALTER TABLE RentPath.Mart.LocatorListings
ADD ClicksHDVideo AS 
ClicksHDVideoAG
+ClicksHDVideoRent

-------------------
--ClicksHDPanoTour
-------------------
ALTER TABLE RentPath.Mart.LocatorListings
ADD ClicksHDPanoTour AS 
ClicksHDPanoTourAG
+ClicksHDPanoTourRent

-------------------
--ClicksMap
-------------------
ALTER TABLE RentPath.Mart.LocatorListings
ADD ClicksMap AS 
ClicksMapAG
+ClicksMapRent

-------------------
--ClicksWebURL
-------------------
ALTER TABLE RentPath.Mart.LocatorListings
ADD ClicksWebURL AS 
ClicksWebURLAG
+ClicksWebURLRent

-------------------
--ClicksMgtCoPeelAd
-------------------
ALTER TABLE RentPath.Mart.LocatorListings
ADD ClicksMgtCoPeelAd AS 
ClicksMgtCoPeelAdAG
+ClicksMgtCoPeelAdRent


-------------------
--ClicksReserveNow
-------------------
ALTER TABLE RentPath.Mart.LocatorListings
ADD ClicksReserveNow AS 
ClicksReserveNowAG
+ClicksReserveNowRent

-------------------
--ClicksFeaturedCommunity
-------------------
ALTER TABLE RentPath.Mart.LocatorListings
ADD ClicksFeaturedCommunity AS 
ClicksFeaturedCommunityAG
+ClicksFeaturedCommunityRent

-------------------
--ClicksFeatCommCheckAvail
-------------------
ALTER TABLE RentPath.Mart.LocatorListings
ADD ClicksFeatCommCheckAvail AS 
ClicksFeatCommCheckAvailAG
+ClicksFeatCommCheckAvailRent

-------------------
--ClicksSRPListingCheckAvail
-------------------
ALTER TABLE RentPath.Mart.LocatorListings
ADD ClicksSRPListingCheckAvail AS 
ClicksSRPListingCheckAvailAG
+ClicksSRPListingCheckAvailRent

-------------------
--ClicksCR3
-------------------
ALTER TABLE RentPath.Mart.LocatorListings
ADD ClicksCR3 AS 
ClicksCR3AG
+ClicksCR3Rent

-------------------
--ClicksSpotlightRentSpecials
-------------------
ALTER TABLE RentPath.Mart.LocatorListings
ADD ClicksSpotlightRentSpecials AS 
ClicksSpotlightRentSpecialsAG
+ClicksSpotlightRentSpecialsRent

-------------------
--ClicksSpotlightReserveNow
-------------------
ALTER TABLE RentPath.Mart.LocatorListings
ADD ClicksSpotlightReserveNow AS 
ClicksSpotlightReserveNowAG
+0

-------------------
--SRPListingImpr
-------------------
ALTER TABLE RentPath.Mart.LocatorListings
ADD SRPListingImpr AS 
SRPListingImprAG
+SRPListingImprRent

-------------------
--SRPUniqueVisit
-------------------
ALTER TABLE RentPath.Mart.LocatorListings
ADD SRPUniqueVisit AS 
SRPUniqueVisitsAG
+SRPUniqueVisitsRent

-------------------
--UniqueVisits
-------------------
ALTER TABLE RentPath.Mart.LocatorListings
ADD UniqueVisits AS 
UniqueVisitsWebAG
+UniqueVisitsWebRent


-------------------
--UniqueVisitsMobile
-------------------
ALTER TABLE RentPath.Mart.LocatorListings
ADD UniqueVisitsMobile AS 
UniqueVisitsMobileAG
+UniqueVisitsMobileRent



GO
/****** Object:  StoredProcedure [Mart].[pr_ModifySmallPropMartListingLeadBuckets]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Mart].[pr_ModifySmallPropMartListingLeadBuckets]
AS
/******************************************************************************************
* Name:	Mart.pr_ModifySmallPropMartListingLeadBuckets
* Desc:	Drops the computed columns in mart.Listings and recreates them with updated definitions
* -----------------------------------------------------------------------------------------
* Note: You *MUST* change and compile these column definitions before running this script or 
*       there wont be a change in the data that comprises the computed columns
* -----------------------------------------------------------------------------------------
* Test:	EXEC RentPath.Mart.pr_ModifySmallPropMartListingLeadBuckets
* -----------------------------------------------------------------------------------------
* Hist:	01	12/01/2015	Sarah Mims		Initial Version. Ticket # 21466
***********************************************************************************************************************************************/
SET NOCOUNT ON

-------------------------------------------------------------
-- Drop computed columns
-------------------------------------------------------------
BEGIN TRY
    ALTER TABLE RentPath.Mart.SmallPropertyListings
    DROP COLUMN AGTotalEmailLeads
END TRY
BEGIN CATCH
END CATCH	 

BEGIN TRY
    ALTER TABLE RentPath.Mart.SmallPropertyListings
    DROP COLUMN RentTotalEmailLeads
END TRY
BEGIN CATCH
END CATCH	


-------------------------------------------------------------
-- Add the computed columns back with new column definitions
-------------------------------------------------------------
ALTER TABLE RentPath.Mart.SmallPropertyListings
ADD 

-------------------------------------
--AG Total Email Leads
-------------------------------------
AGTotalEmailLeads
AS 
EmailLeadsAG
+IphoneEmailLeadsAG
+IPadEmailLeadsAG
+AndroidEmailLeadsAG
+TabletEmailLeadsAG
+KindleEmailLeadsAG

-------------------------------------
--Rent Total Email Leads
-------------------------------------
,RentTotalEmailLeads
AS
EmailLeadsRent
+IphoneEmailLeadsRent
+IPadEmailLeadsRent
+AndroidEmailLeadsRent
+TabletEmailLeadsRent
+KindleEmailLeadsRent



	 




GO
/****** Object:  StoredProcedure [Mart].[pr_PhoneCallAppointmentSetPrediction]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*--######################################################################################
*
* Name:	[Mart].[pr_PhoneCallAppointmentSetPrediction]
*
* Desc:	This SPROC pulls down the data for Rentals/Lovely Syndication to AG.
*
* Test:	EXEC Mart.pr_PhoneCallAppointmentSetPrediction 20150810
*
* Hist:	01	01/05/2016	Bob Langley		Initial Version - Ticket 21667
--#######################################################################################*/
CREATE PROCEDURE [Mart].[pr_PhoneCallAppointmentSetPrediction]
(@datetorun	int = NULL)
AS 
BEGIN

    SET NOCOUNT ON;


	/* Testing 
	DECLARE @datetorun int
	SET @datetorun = NULL--20150211
	*/
	
		
	DECLARE
		@ErrorMessage					NVARCHAR(4000),
		@ErrorNumber					INT,
		@ErrorSeverity					INT,
		@ErrorState						INT,
		@ErrorLine						INT,
		@ErrorProcedure					NVARCHAR(200)
		
	DECLARE @codesection varchar(300)


	DECLARE @yearmonth int
	DECLARE @datetouse datetime
	DECLARE @datetouseymdid int
	DECLARE @periodbegymdid int
	DECLARE @periodendymdid int

	--Note:  input parameter @datetorun should be yesterday's date (only have data up through yesterday).  If null, will take today's date and subtract a day to get the run date to use.
	SET @datetouse = ISNULL(CONVERT(datetime,CONVERT(varchar(10),@datetorun)),CONVERT(datetime, Convert(varchar(10),DATEADD(dd,-1,GETDATE()),101)))		-- if null, set to yesterday
	SET @datetouseymdid = CONVERT(int, Convert(varchar(10),@datetouse,112))											-- Get the date as integer			
	

	
	PRINT '@datetouse = ' + CONVERT(varchar(30),@datetouse)
	PRINT '@datetouseymdid = ' + CONVERT(varchar(30),@datetouseymdid)
	PRINT ' '






	/* ===================================================================================================================== */
	--Now mart the data after deleting from current table if any records exist in the new data
	SET @codesection = 'Move the data to the live tables'


	BEGIN TRY
		
		if EXISTS(SELECT * FROM RentPath.Staging.PhoneCallAppointmentSetPrediction WHERE YMDID = @datetouseymdid)					--check to make sure new data exists before we get rid of old data
			BEGIN
				BEGIN TRANSACTION
					
					SET @codesection = 'Delete appropriate data from live table'
					--Delete appropriate data from the live table
					DELETE FROM RentPath.Mart.PhoneCallAppointmentSetPrediction
					WHERE YMDID = @datetouseymdid


					SET @codesection = 'Place the new data into the live table'
					--Now replace it with new data
					INSERT INTO RentPath.Mart.PhoneCallAppointmentSetPrediction
					SELECT *
					FROM RentPath.Staging.PhoneCallAppointmentSetPrediction
					WHERE YMDID = @datetouseymdid



				COMMIT TRANSACTION
			END


	END TRY
	BEGIN CATCH
		SELECT 
			@ErrorMessage		= ERROR_MESSAGE(),
			@ErrorNumber		= ERROR_NUMBER(),
			@ErrorSeverity		= ERROR_SEVERITY(),
			@ErrorState			= ERROR_STATE(),
			@ErrorLine			= ERROR_LINE(),
			@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');

		SET @ErrorMessage = 'Attempting to load RentPath.Mart.PhoneCallAppointmentSetPrediction table. Error in code seciton - ' + @codesection + '   Error - ' + @ErrorMessage

	

		if @@trancount > 0					--if a transaction was started (will = 0 if no transaction was started)
			ROLLBACK TRANSACTION


		raiserror(@ErrorMessage,16,1) with log;

		RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	
	END CATCH

	SET NOCOUNT OFF;
END;



GO
/****** Object:  StoredProcedure [Mart].[pr_ProcessLeadsFromAPS]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Mart].[pr_ProcessLeadsFromAPS] 

/*******************************************************************************************
* Name:	[Mart].[pr_ProcessLeadsFromAPS] 
* ------------------------------------------------------------------------------------------
* Desc:	Last 7 days of leads are loaded from APS into Staging. Last 2 days of phone numbers
* are loaded from APS into Staging. These are all then deleted from the production tables and
* re-inserted.
* ------------------------------------------------------------------------------------------
* Test:	EXEC [Mart].[pr_ProcessLeadsFromAPS] 
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist:	01	06/01/2016		Colleen Rocks		Initial version; APS project
* Hist: 02	06/22/2016		Colleen Rocks		Update to be mart instead of fact and remove _APS from table names
* Hist: 03	06/24/2016		Colleen Rocks		Remove duplicate phone numbers before inserting in case they aren't just from the past 2 days
* Hist:	04	06/29/2016		Brian Trembley		Added 4 new email lead fields, expanded "select *" to each field name to head off problems later
* Hist: 06	11/28/2016		Colleen Rocks		SFDC Case 01340213; added analyticsresult and analyticsmethod
* Hist: 07	02/08/2017		Kimbo Morrow		SFDC Case 01397668; Changed phone and email lead look back to 8 days
********************************************************************************************/
AS 
BEGIN
	SET NOCOUNT ON;

------------------------------------------
/*Delete PhoneLookUp and Repopulate*/
------------------------------------------
DELETE FROM ApartmentGuide.Dimension.PhoneLookup
WHERE CAST(CONVERT(VARCHAR(8),LastUpdateDate,112) AS INT) >= CAST(CONVERT(VARCHAR(8),GETDATE()-1,112) AS INT);

DELETE  FROM ApartmentGuide.Dimension.PhoneLookup
WHERE   PhoneNumber IN (SELECT DISTINCT
                                phonenumber
                        FROM    Staging.dbo.dimphonelookup_last2);

INSERT INTO ApartmentGuide.Dimension.PhoneLookup (
      [PhoneNumber]
      ,[PhoneType]
      ,[DID]
      ,[RecordType]
      ,[FirstDate]
      ,[LastDate]
      ,[TELCOName]
      ,[BusinessName]
      ,[FirstName]
      ,[MiddleInitial]
      ,[LastName]
      ,[PrimaryStreetNumber]
      ,[PrimaryPredirAbbrev]
      ,[PrimaryStreetName]
      ,[PrimaryStreetSuffix]
      ,[PrimaryPostdirAbbrev]
      ,[SecondaryUnitType]
      ,[SecondaryUnitNBR]
      ,[City]
      ,[StateCode]
      ,[Zip]
      ,[ZipExt]
      ,[DeliveryPointCode]
      ,[CarrierRoute]
      ,[CountyCode]
      ,[Zip4Type]
      ,[DeliveryPointValidation]
      ,[MailableFlag]
      ,[AddressValidationDate]
      ,[Country]
      ,[MCD]
      ,[DirectoryAssistance]
      ,[TelephoneConfidenceScore]
      ,[LastUpdateDate] )
SELECT 
      [PhoneNumber]
      ,[PhoneType]
      ,[DID]
      ,[RecordType]
      ,[FirstDate]
      ,[LastDate]
      ,[TELCOName]
      ,[BusinessName]
      ,[FirstName]
      ,[MiddleInitial]
      ,[LastName]
      ,[PrimaryStreetNumber]
      ,[PrimaryPredirAbbrev]
      ,[PrimaryStreetName]
      ,[PrimaryStreetSuffix]
      ,[PrimaryPostdirAbbrev]
      ,[SecondaryUnitType]
      ,[SecondaryUnitNBR]
      ,[City]
      ,[StateCode]
      ,[Zip]
      ,[ZipExt]
      ,[DeliveryPointCode]
      ,[CarrierRoute]
      ,[CountyCode]
      ,[Zip4Type]
      ,[DeliveryPointValidation]
      ,[MailableFlag]
      ,[AddressValidationDate]
      ,[Country]
      ,[MCD]
      ,[DirectoryAssistance]
      ,[TelephoneConfidenceScore]
      ,[LastUpdateDate]
FROM Staging.dbo.dimphonelookup_last2;

------------------------------------------
/*Delete RentPath Email Leads and Repopulate*/
------------------------------------------
DELETE FROM RentPath.Mart.EmailLeads
WHERE YMDID >= CAST(CONVERT(VARCHAR(8),GETDATE()-8,112) AS INT);

INSERT INTO RentPath.Mart.EmailLeads (
	Website
	,FeedLead
	,RentPropertyID
	,ListingID
	,YMDID
	,WhenEntered
	,LeadID
	,LeadTypeID
	,[Status]
	,Email
	,FirstName
	,LastName
	,Address1
	,Address2
	,City
	,[State]
	,Zip
	,DayPhone
	,NightPhone
	,FaxNumber
	,MoveMonth
	,Bedrooms
	,Bathrooms
	,Comments
	,LeaseTerms
	,LeadScore
	,Source
	,PersonalizationID
	,CampaignID
	,EF_ID
	,EV_TRANS_ID
	,SessionID
	,reasonformove
	,pricerange
	,BusinessModel
	,CompanyID
	,UpdateYMDID
	,Device
	,PageType
	,Context
	,Endeca_ID
	,UnitLayout_ID
	,UZID
	,SortOrder
	,Refinements
	,TVisit )
SELECT Website
	,FeedLead
	,RentPropertyID
	,ListingID
	,YMDID
	,WhenEntered
	,LeadID
	,LeadTypeID
	,[Status]
	,Email
	,FirstName
	,LastName
	,Address1
	,Address2
	,City
	,[State]
	,Zip
	,DayPhone
	,NightPhone
	,FaxNumber
	,MoveMonth
	,Bedrooms
	,Bathrooms
	,Comments
	,LeaseTerms
	,LeadScore
	,Source
	,PersonalizationID
	,CampaignID
	,EF_ID
	,EV_TRANS_ID
	,SessionID
	,reasonformove
	,pricerange
	,BusinessModel
	,CompanyID
	,UpdateYMDID
	,Device
	,PageType
	,Context
	,Endeca_ID
	,UnitLayout_ID
	,UZID
	,SortOrder
	,Refinements
	,TVisit
FROM Staging.Fact.emailleads_last7;

------------------------------------------
/*Delete RentPath Phone Leads and Repopulate*/
------------------------------------------
DELETE FROM RentPath.Mart.PhoneLeads
WHERE YMDID >= CAST(CONVERT(VARCHAR(8),GETDATE()-8,112) AS INT);

INSERT INTO RentPath.Mart.PhoneLeads (
	  [Website]
      ,[YMDID]
      ,[CallId]
      ,[ListingID]
      ,[RentPropertyID]
      ,[PropertyID]
      ,[CallerName]
      ,[CallerPhoneNumber]
      ,[PublishedPhoneNumber]
      ,[TargetPhoneNumber]
      ,[CallStartDateTime]
      ,[CallEndDateTime]
      ,[DurationInSeconds]
      ,[CallStatus]
      ,[CallSource]
      ,[CallType]
      ,[AudioURL]
      ,[CallLoadHour]
      ,[CallLoadYMDID]
      ,[CallEndHour]
      ,[DateAddedYMDID]
      ,[CallerLocation]
      ,[CallerIP]
      ,[CallerAddress]
      ,[CallerCity]
      ,[CallerState]
      ,[CallerZip]
      ,[LinkName]
      ,[LinkID]
      ,[Population]
      ,[AvgTravelTimeToWork]
      ,[MedianHouseholdIncome]
      ,[PerCapitaIncome]
      ,[MedianEarnings]
      ,[MedianContractRent]
      ,[MedianRentAsked]
      ,[MedianGrossRent]
      ,[MedianPriceAsked]
      ,[MedianRealEstateTaxes]
      ,[Households]
      ,[OwnerHouseholds]
      ,[RenterHouseholds]
      ,[CallerURL]
      ,[CallerTrimSilenceURL]
      ,[ReceiverURL]
      ,[ActualCallDuration]
      ,[CallerTrimBeginning]
      ,[TotalCallerTrimTalkTime]
      ,[EurekaID]
      ,[IsAbandoned]
      ,[TimePriorToCallerSpeaking]
      ,[MP3URL]
      ,[BusinessModel] 
	  ,[AnalyticsResult]
	  ,[AnalyticsMethod])
SELECT [Website]
      ,[YMDID]
      ,[CallId]
      ,[ListingID]
      ,[RentPropertyID]
      ,[PropertyID]
      ,[CallerName]
      ,[CallerPhoneNumber]
      ,[PublishedPhoneNumber]
      ,[TargetPhoneNumber]
      ,[CallStartDateTime]
      ,[CallEndDateTime]
      ,[DurationInSeconds]
      ,[CallStatus]
      ,[CallSource]
      ,[CallType]
      ,[AudioURL]
      ,[CallLoadHour]
      ,[CallLoadYMDID]
      ,[CallEndHour]
      ,[DateAddedYMDID]
      ,[CallerLocation]
      ,[CallerIP]
      ,[CallerAddress]
      ,[CallerCity]
      ,[CallerState]
      ,[CallerZip]
      ,[LinkName]
      ,[LinkID]
      ,[Population]
      ,[AvgTravelTimeToWork]
      ,[MedianHouseholdIncome]
      ,[PerCapitaIncome]
      ,[MedianEarnings]
      ,[MedianContractRent]
      ,[MedianRentAsked]
      ,[MedianGrossRent]
      ,[MedianPriceAsked]
      ,[MedianRealEstateTaxes]
      ,[Households]
      ,[OwnerHouseholds]
      ,[RenterHouseholds]
      ,[CallerURL]
      ,[CallerTrimSilenceURL]
      ,[ReceiverURL]
      ,[ActualCallDuration]
      ,[CallerTrimBeginning]
      ,[TotalCallerTrimTalkTime]
      ,[EurekaID]
      ,[IsAbandoned]
      ,[TimePriorToCallerSpeaking]
      ,[MP3URL]
      ,[BusinessModel]
	  ,[AnalyticsResult]
	  ,[AnalyticsMethod]
FROM Staging.Fact.phoneleads_last7;

------------------------------------------
/*Drop the Staging tables so they can be
recreated tomorrow*/
------------------------------------------
truncate TABLE Staging.dbo.dimphonelookup_last2;
truncate TABLE Staging.Fact.emailleads_last7; 
truncate TABLE Staging.Fact.phoneleads_last7;


	SET NOCOUNT OFF;
END 








GO
/****** Object:  StoredProcedure [Mart].[pr_Recover_ML_Lost_DimensionData]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Mart].[pr_Recover_ML_Lost_DimensionData] (
@YMDID AS INT = NULL
)
/*******************************************************************************************
* Name:	pr_Recover_ML_Lost_DimensionData
* ------------------------------------------------------------------------------------------
* Desc:	This recovers RentPath missing listings by using AG and RentCom marted tables
* ------------------------------------------------------------------------------------------
* Test:	EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150501
* ------------------------------------------------------------------------------------------
* Note on Profiles:
* ProfileKey	ProfileName
* 84			APTGTeaxlium
* 85			ApartmentGuideMDot Teaxlium
* 86			RentTeaxlium
* 87			RentMDot Teaxlium
* 72			AG Sites
* ------------------------------------------------------------------------------------------
* Hist:	01	08/06/2015		Richard		Initial Version
* Hist: 02	08/24/20215		Colleen		Added UpsellPayPerLeaseALM		
********************************************************************************************/
AS 

BEGIN
	SET NOCOUNT ON;

	/*test
	DECLARE @YMDID INT
	SET @YMDID = 20150506
	*/

	IF @YMDID IS NULL
     return


	 DELETE FROM mart.listingsRecover WHERE ymdid=@YMDID

	INSERT INTO [Mart].[ListingsRecover]
	(ListingID, YMDID, YearMonth, PropertyIDAG, StatusIDAG, PropertyIDRent, StatusIDRent, ListingType, IsSEM, ShowPricing, LowPrice, HighPrice, CallRecordingOptOut, TotalAmenities, ActiveAmenities, ActiveCoupon, ActiveFloorplans, ActiveHDFloorplans, ActiveHDPhotos, ActivePhotos, ExternalID, ListingPricingSource, Charter, DIRECTV, CR3AvgOverallRatingAG, CR3AvgOverallRatingRent, ShowOfficeHours, PlacementTierAG, PlacementTierRent, ContractLoyaltyPoints, InternetProductPoints, LegacyLoyaltyPoints, MobilePoints, PrintProductPoints, Ranking, RPLRank, BadgeCollege, BadgeCorporate, BadgeIncomeRestricted, BadgeLuxury, BadgeMilitary, BadgePetFriendly, BadgeSenior, Upsell3DFloorplan, UpsellAGSites,  UpsellCarousel, UpsellCarouselRentals, UpsellCommunityVideoURLFulfilled, UpsellCoupon, UpsellDiamondCity, UpsellDiamondMax, UpsellDiamondMetro, UpsellEmercial, UpsellFeaturedCommunityAG, UpsellFeaturedCommunityRent, UpsellFeaturedListingRentals, UpsellHDActiveFloorplansFulfilled, UpsellHDActivePhotosFulfilled, UpsellHDPanoTour, UpsellHDPanoTourFulfilled, UpsellHDPhoto, UpsellHDVideo, UpsellHDVideoFulfilled, UpsellHighlighted, UpsellLinked3DFloorplan, UpsellLinked3DFloorplanFulfilled, UpsellLinkedFloorplan, UpsellLinkedFloorplanFulfilled, UpsellLinkedRoomPlanner, UpsellLinkedRoomPlannerFulfilled, UpsellListingRent, UpsellListingRentals, UpsellMediaCenter, UpsellMgmtPeelAd, UpsellMobileDeal, UpsellMobileDealFulfilled, UpsellMobileDiamond, UpsellMobileSpotlight, UpsellNoVacancyRent, UpsellPayPerLead, UpsellPayPerLease, UpsellPhotoUpgrade, UpsellPrecisionTargetedEmailRent, UpsellPremierListingRentals, UpsellPremiumUpgrade, UpsellRewardCardRent, UpsellSponsoredApartment, UpsellSpotlightAG, UpsellSpotlightRent, UpsellSpotlightRentals, UpsellStandardListingRentals, UpsellStandardPlusListingRentals, UpsellSubscriptionModelRent, UpsellVideoSpokesmodel, UpsellVIPPlacementRent, UpsellVirtualBrochure, UpsellVirtualTourFulfilled, UpsellPayPerLeaseALM
     )
        SELECT 
	ListingID=ISNULL(a.listingid, r.listingid)
	, YMDID= @ymdid
	, YearMonth=LEFT (@ymdid,6)
	, PropertyIDAG=a.PropertyID
	, StatusIDAG= ISNULL(a.listingStatusID,0)
	, PropertyIDRent=r.RentPropertyID
	, StatusIDRent=ISNULL(r.RentStatusID,0)
	, ListingType=ISNULL(a.listingType, r.ListingType)
	
	, IsSEM=ISNULL(a.isSEM, 0)
	, ShowPricing=ISNULL(a.showPricing, r.showPricing)
	, LowPrice=ISNULL(a.lowPrice, r.lowPrice)
	, HighPrice=ISNULL(a.HighPrice, r.highprice)
	, CallRecordingOptOut=CASE WHEN ISNULL(a.UpsellPropCallRecording,r.UpsellPropCallRecording) = 0 THEN 1
	                           ELSE 0 END
	, TotalAmenities=ISNULL(a.totalAmenities, r.totalAmenities)
	, ActiveAmenities=ISNULL(a.ActiveAmenities, r.ActiveAmenities)
	, ActiveCoupon= ISNULL(a.CouponActiveOnSite,r.CouponActiveOnSite)
	, ActiveFloorplans=ISNULL(a.ActiveFloorPlans,r.ActiveFloorPlans)
	, ActiveHDFloorplans=ISNULL(a.ActiveHDFloorPlans,r.ActiveHDFloorPlans)
	, ActiveHDPhotos=ISNULL(a.ActiveHDPhotos, r.ActiveHDPhotos)
	, ActivePhotos=ISNULL(a.ActivePhotos,r.ActivePhotos)
	, ExternalID=ISNULL(a.ExternalID, r.ExternalID)
	, ListingPricingSource=ISNULL(a.ExternalPriceCode,r.ExternalPriceCode)
	, Charter=ISNULL(a.Charter,0)
	, DIRECTV=ISNULL(a.DIRECTV,0)
	, CR3AvgOverallRatingAG=ISNULL(a.CR3AvgOverallRating,0)
	, CR3AvgOverallRatingRent=ISNULL(r.CR3AvgOverallRating,0)
	, ShowOfficeHours=ISNULL(a.ShowOfficeHours,r.ShowOfficeHours)
	, PlacementTierAG=ISNULL(a.PlacementTier,0)
	, PlacementTierRent=0
	, ContractLoyaltyPoints=ISNULL(a.contractLoyaltyPoints,0)
	, InternetProductPoints=ISNULL(a.InternetProductPoints,0)
	, LegacyLoyaltyPoints=ISNULL(a.LegacyLoyaltyPoints,0)
	, MobilePoints=ISNULL(a.MobilePoints,0)
	, PrintProductPoints=ISNULL(a.PrintProductPoints,0)
	, Ranking=ISNULL(a.Ranking,0)
	, RPLRank=ISNULL(a.RPLRank,0)
	, BadgeCollege=ISNULL(a.UpsellListCollegeListing,0)
	, BadgeCorporate=ISNULL(a.UpsellListCorporateListing,0)
	, BadgeIncomeRestricted=ISNULL(a.UpsellListIncomeRestricted,0)
	, BadgeLuxury=ISNULL(a.UpsellListLuxuryCommunity,0)
	, BadgeMilitary=ISNULL(a.UpsellListMilitaryListing,0)
	, BadgePetFriendly=ISNULL(a.UpsellListPetFriendly,0)
	, BadgeSenior=ISNULL(a.UpsellListSeniorListing,0)
	, Upsell3DFloorplan=ISNULL(a.UpsellList3DFloorPlan,0)
	, UpsellAGSites=ISNULL(a.UpsellListAGSites,0)

	, UpsellCarousel=ISNULL(a.UpsellListCommunityCarousel,0)
	, UpsellCarouselRentals=ISNULL(a.UpsellListRentalsCarousel,0)
	, UpsellCommunityVideoURLFulfilled=ISNULL(a.CommunityVideoURLFulfilled,0)
	, UpsellCoupon=ISNULL(a.UpsellListCoupon,r.UpsellListCoupon)
	, UpsellDiamondCity=ISNULL(a.UpsellListDiamondCity,0)
	, UpsellDiamondMax=ISNULL(a.UpsellListDiamondMax,0)
	, UpsellDiamondMetro=ISNULL(a.UpsellListDiamondMetro,0)
	, UpsellEmercial=ISNULL(a.UpsellPropEmercial,0)
	, UpsellFeaturedCommunityAG=CASE WHEN a.UpsellPropFeaturedCommunityPlatinum=1 OR a.UpsellPropFeaturedCommunityGold=1
	                                     OR a.UpsellPropFeaturedCommunitySilver=1 THEN 1
									 ELSE 
									     0 
									 END

	, UpsellFeaturedCommunityRent=ISNULL(r.UpsellRentMetroFL,0)
	, UpsellFeaturedListingRentals=ISNULL(a.UpsellPropRentalsFeatured,0)
	, UpsellHDActiveFloorplansFulfilled=ISNULL(a.HDActiveFloorPlansFulfilled,r.HDActiveFloorPlansFulfilled)
	, UpsellHDActivePhotosFulfilled=ISNULL(a.HDActivePhotosFulfilled,r.HDActivePhotosFulfilled)
	, UpsellHDPanoTour=ISNULL(a.UpsellListHDPanoTours,0)
	, UpsellHDPanoTourFulfilled=ISNULL(a.HDTourURLFulfilled,0)
	, UpsellHDPhoto=ISNULL(a.UpsellListHDPhoto,0)
	, UpsellHDVideo=ISNULL(a.UpsellListHDVideo,0)
	, UpsellHDVideoFulfilled=ISNULL(a.HDVideoURLFulfilled,0)
	, UpsellHighlighted=ISNULL(a.UpsellListHighlighted,0)
	, UpsellLinked3DFloorplan=ISNULL(a.Linked3DFloorPlan,r.Linked3DFloorPlan)
	, UpsellLinked3DFloorplanFulfilled=ISNULL(a.Linked3DFloorPlanFulfilled,r.Linked3DFloorPlanFulfilled)
	, UpsellLinkedFloorplan=ISNULL(a.LinkedFloorPlan,r.LinkedFloorPlan)
	, UpsellLinkedFloorplanFulfilled=ISNULL(a.LinkedFloorPlanFulfilled,r.LinkedFloorPlanFulfilled)
	, UpsellLinkedRoomPlanner=ISNULL(a.LinkedRoomPlanner,r.LinkedRoomPlanner)
	, UpsellLinkedRoomPlannerFulfilled=ISNULL(a.LinkedRoomPlannerFulfilled,r.LinkedRoomPlannerFulfilled)
	, UpsellListingRent=ISNULL(r.UpsellRentListing,0)
	, UpsellListingRentals=ISNULL(a.UpsellListRentalsListing,0)
	, UpsellMediaCenter=ISNULL(a.UpsellMediaCenter,0)
	--, UpsellMetroFeaturedListingRent=ISNULL(r.UpsellRentMetroFL,0)
	, UpsellMgmtPeelAd=ISNULL(a.UpsellMgmtPeelAd,0)
	, UpsellMobileDeal=ISNULL(a.UpsellPropMobileDeal,0)
	, UpsellMobileDealFulfilled=ISNULL(a.MobileDealFulfilled,r.MobileDealFulfilled)
	, UpsellMobileDiamond=ISNULL(a.UpsellListMobileDiamond,0)
	, UpsellMobileSpotlight=ISNULL(a.UpsellListMobileSpotLight,0)
	, UpsellNoVacancyRent=ISNULL(r.UpsellRentNoVacancy,0)
	, UpsellPayPerLead=ISNULL(a.UpsellListPayPerLead,0)
	, UpsellPayPerLease=ISNULL(a.UpsellListPayPerLease,0)
	, UpsellPhotoUpgrade=ISNULL(a.UpsellPropPhotoUpgrade,0)
	, UpsellPrecisionTargetedEmailRent=ISNULL(r.UpsellRentPTE,0)
	, UpsellPremierListingRentals=ISNULL(a.UpsellPropRentalsPremier,0)
	, UpsellPremiumUpgrade=ISNULL(a.UpsellPropPremiumUpgrade,0)
	, UpsellRewardCardRent=ISNULL(r.UpsellRentRewardCard,0)
	, UpsellSponsoredApartment=ISNULL(a.UpsellListSponsoredApartment,0)
	, UpsellSpotlightAG=ISNULL(a.UpsellListSpotLight,0)
	, UpsellSpotlightRent=ISNULL(r.UpsellRentSpotlight,0)
	, UpsellSpotlightRentals=ISNULL(a.UpsellListRentalsSpotlightAd,0)
	, UpsellStandardListingRentals=ISNULL(a.UpsellListRentalsStandard,0)
	, UpsellStandardPlusListingRentals=ISNULL(a.UpsellListRentalsStandardPlus,0)
	, UpsellSubscriptionModelRent=ISNULL(r.UpsellRentSubscriptionModel,0)
	, UpsellVideoSpokesmodel=ISNULL(a.UpsellPropVideoSpokesModel,0)
	, UpsellVIPPlacementRent=ISNULL(r.UpsellRentVIPPlacement,0)
	, UpsellVirtualBrochure=ISNULL(a.UpsellPropVirtualBrochure,0)
	, UpsellVirtualTourFulfilled=ISNULL(a.VirtualTourFulfilled,0)
	, UpsellPayPerLeaseALM=ISNULL(r.UpsellListPayPerLeaseALM,0)	
	FROM (SELECT * FROM apartmentguide.mart.Listings a WITH (NOLOCK) WHERE ymdid=@ymdid) a
	FULL OUTER JOIN (SELECT * FROM rentcom.mart.listings r WITH (NOLOCK) WHERE ymdid=@ymdid) r
	ON  a.listingid =r.listingid


	SET NOCOUNT OFF;
END

/*
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150501
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150502
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150503
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150504
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150505
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150506
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150507
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150508
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150509
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150510
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150511
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150512
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150513
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150514
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150515
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150516
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150517
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150518
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150519
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150520
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150521
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150522
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150523
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150524
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150525
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150526
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150527
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150528
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150529
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150530
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150531
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150601
EXEC Mart.[pr_Recover_ML_Lost_DimensionData] 20150602
*/










GO
/****** Object:  StoredProcedure [Mart].[pr_RentcomListingsFromAPS]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Mart].[pr_RentcomListingsFromAPS]
/*************************************************************************************************
*
* Name:	Mart.pr_RentcomListingsFromAPS
*
* Desc:	This replaces the mart listings data in Rentcom
*
* Test:	EXEC Mart.pr_RentcomListingsFromAPS
*
* Note: Keeping AG, Rentcom and RenPath as separate procedures so that they aren't dependent on successful completion of each other
* 
* Hist:	01	10/31/2016		Sarah Mims			Initial Version. Ticket # 24020.
* Hist:	02	02/07/2017		Sarah Mims			Case # 01340196 - productionizing this procedure by changing names where necessary
**************************************************************************************************/
AS

BEGIN

SET NOCOUNT ON

			-----------------------------
			--Declare error handling variables
			-----------------------------
			DECLARE
				@ErrorMessage					NVARCHAR(4000)
				,@ErrorSeverity					INT
				,@ErrorState					INT
				
		----------------------------------
		--Declare and Set Logging Variables
		----------------------------------
		 DECLARE @TrackDate DATETIME 
				,@LocalYMDID INT 
				,@LengthInSeconds INT 
				,@DatabaseName VARCHAR(128) 
				,@ProcedureName VARCHAR(128) 
				,@CommentLine VARCHAR(500)
				,@BeginYMDID INT
				,@EndYMDID INT              


		SET	@TrackDate = GETDATE();
		SET	@LocalYMDID  =  CAST(CONVERT(VARCHAR(8),GETDATE(),112) AS INT)
		SET @LengthInSeconds = 0;
		SET @DatabaseName = DB_NAME()  ;      
		SET @ProcedureName = 'Mart.pr_RentcomListingsFromAPS';	

		----------------------------------
		--Start Logging
		----------------------------------	
		SET @LengthInSeconds = DATEDIFF(ss, @TrackDate,GETDATE())            
		EXEC DBAUtility.dbo.pr_Logging_StoredProcs @DatabaseName = @DatabaseName,
			@ProcName = @ProcedureName,
			@StepName = '1 - Start Procedure: Mart.pr_RentcomListingsFromAPS',
			@VariableStates = @LocalYMDID,
			@LengthInSeconds = @LengthInSeconds,
			@Comments = 'Start Procedure';
		SET @TrackDate = GETDATE();

---------------------------------
--Do the actual work now: 
--1) Delete the date range from Mart.Listings
--2) Insert the date range from the APS Staging Table
---------------------------------
BEGIN TRY
		IF EXISTS(SELECT DISTINCT YMDID FROM RentPath.Staging.MartListingsFromAPS)
			BEGIN
				BEGIN TRANSACTION
  
						-------------------------------------------------------
						--Delete the data from Mart Listings for the date range   
						-------------------------------------------------------						           
						DELETE FROM Rentcom.Mart.Listings
						WHERE YMDID IN (SELECT DISTINCT YMDID FROM RentPath.Staging.MartListingsFromAPS)  
						
						SET @BeginYMDID = (SELECT MIN(YMDID) FROM RentPath.Staging.MartListingsFromAPS)   
						SET @EndYMDID = (SELECT MAX(YMDID) FROM RentPath.Staging.MartListingsFromAPS)                 

								----------------------------------
								--Log the deletion
								----------------------------------	
								SET @LengthInSeconds = DATEDIFF(ss, @TrackDate,GETDATE())      
								SET @CommentLine = 'Data deleted from Rentcom Mart listings:  from '+CAST(@BeginYMDID AS VARCHAR)+' to ' +CAST(@EndYMDID AS VARCHAR)+''
								EXEC DBAUtility.dbo.pr_Logging_StoredProcs @DatabaseName = @DatabaseName,
									@ProcName = @ProcedureName,
									@StepName = '2 - Delete data from Rentcom Mart Listings for the date range',
									@VariableStates = @LocalYMDID,
									@LengthInSeconds = @LengthInSeconds,
									@Comments = @CommentLine;
								SET @TrackDate = GETDATE();


						-------------------------------------------------------
						--Insert the data for the date range into Rentcom Mart Listings
						-------------------------------------------------------	
						INSERT INTO Rentcom.Mart.Listings

						SELECT
						ISNULL([YMDID],0)											AS [YMDID]
						,ISNULL([YearMonth],0)										AS [YearMonth]
						,ISNULL([PropertyIDRent],0)									AS [RentPropertyID]
						,ISNULL([PropertyIDAG],0)									AS [PropertyID]
						,ISNULL([ListingID],0)										AS [ListingID]
						,ISNULL([ListingTypeID],0)									AS [ListingTypeID]
						,[ListingType] COLLATE SQL_Latin1_General_CP1_CI_AS			AS [ListingType]
						,[ListingTypeShort] COLLATE SQL_Latin1_General_CP1_CI_AS	AS [ListingTypeShort]
						,ISNULL([StatusIDRent],0)									AS [RentStatusID]
						,[ExternalID] COLLATE SQL_Latin1_General_CP1_CI_AS			AS [ExternalID]
						,[ExternalPriceCode] COLLATE SQL_Latin1_General_CP1_CI_AS	AS [ExternalPriceCode]
						,ISNULL([RentLeaseMgtCoID],0)								AS [RentLeaseMgtCoID]
						,ISNULL([LeaseMgtCoID],0)									AS [LeaseMgtCoID]
						,ISNULL([TotalPhotos],0)									AS [TotalPhotos]
						,ISNULL([ActivePhotos],0)									AS [ActivePhotos]
						,ISNULL([TotalFloorPlans],0)								AS [TotalFloorPlans]
						,ISNULL([ActiveFloorplans],0)								AS [ActiveFloorplans]
						,ISNULL([TotalAmenities],0)									AS [TotalAmenities]
						,ISNULL([ActiveAmenities],0)								AS [ActiveAmenities]
						,ISNULL([ActiveHDPhotos],0)									AS [ActiveHDPhotos]
						,ISNULL([ActiveHDFloorPlans],0)								AS [ActiveHDFloorPlans]
						,ISNULL([ShowPricing],0)									AS [ShowPricing]
						,ISNULL([ShowOfficeHours],0)								AS [ShowOfficeHours]
						,ISNULL([ListingDescriptionLength],0)						AS [ListingDescriptionLength]
						,ISNULL([LowPrice],0)										AS [LowPrice]
						,ISNULL([HighPrice],0)										AS [HighPrice]
						,ISNULL([UpsellCoupon],0)									AS [UpsellListCoupon]
						,ISNULL([UpsellCallRecording],0)							AS [UpsellPropCallRecording]
						,ISNULL([UpsellListingRent],0)								AS [UpsellRentListing]
						,ISNULL([UpsellRewardCardRent],0)							AS [UpsellRentRewardCard]
						,ISNULL([UpsellRentFeaturedPlacement],0)					AS [UpsellRentFeaturedPlacement]
						,ISNULL([UpsellPrecisionTargetedEmailRent],0)				AS [UpsellRentPTE]
						,ISNULL([UpsellVIPPlacementRent],0)							AS [UpsellRentVIPPlacement]
						,ISNULL([UpsellNoVacancyRent],0)							AS [UpsellRentNoVacancy]
						,ISNULL([UpsellFeaturedCommunityRent],0)					AS [UpsellRentMetroFL]
						,ISNULL([UpsellSpotlightRent],0)							AS [UpsellRentSpotlight]
						,ISNULL([UpsellSubscriptionModelRent],0)					AS [UpsellRentSubscriptionModel]
						,ISNULL([UpsellPayPerLeaseALM],0)							AS [UpsellListPayPerLeaseALM]
						,CONVERT(tinyint,0)											AS FutureUpsell04
						,[CR3AvgOverallRatingRent]									AS [CR3AvgOverallRating]
						,CONVERT(tinyint,0)											AS HDActiveFloorPlansFulfilled
						,CONVERT(tinyint,0)											AS HDActivePhotosFulfilled
						,ISNULL([UpsellLinkedFloorplanFulfilled],0)					AS [LinkedFloorPlanFulfilled]
						,CONVERT(tinyint,0)											AS Linked3DFloorPlanFulfilled
						,ISNULL([UpsellLinkedRoomPlannerFulfilled],0)				AS [LinkedRoomPlannerFulfilled]
						,ISNULL([UpsellMobileDealFulfilled],0)						AS [MobileDealFulfilled]
						,ISNULL([ActiveCoupon],0)									AS [CouponActiveOnSite]
						,ISNULL([LastUpdateYMDID],0)								AS [LastUpdateYMDID]
						,ISNULL([UpsellLinkedFloorplan],0)							AS [LinkedFloorPlan]
						,CONVERT(int,0)												AS Linked3DFloorPlan
						,ISNULL([UpsellLinkedRoomPlanner],0)						AS [LinkedRoomPlanner]
						,ISNULL([UniqueVisitsRent],0)								AS [UniqueVisits]
						,ISNULL([ClicksMapRent],0)									AS [MapClicks]
						,ISNULL([ClicksMgtCoURLRent],0)								AS [ClicksMgtCoWebLink]
						,CONVERT(int,0)												AS FutureClicks01
						,CONVERT(int,0)												AS FutureClicks02
						,CONVERT(int,0)												AS FutureClicks03
						,CONVERT(int,0)												AS FutureClicks04
						,CONVERT(int,0)												AS FutureClicks05
						,ISNULL([SRPListingImprRent],0)								AS [ImprSearchResults]
						,ISNULL([RentConnectedCallsRent],0)							AS [RentConnectedCalls]
						,ISNULL([RentMissedCallsRent],0)							AS [RentMissedCalls]
						,ISNULL([RentOneWebConnectedCallsRent],0)					AS [RentOneWebConnectedCalls]
						,ISNULL([RentOneWebMissedCallsRent],0)						AS [RentOneWebMissedCalls]
						,ISNULL([RentAltRegConnectedCallsRent],0)					AS [RentAltRegConnectedCalls]
						,ISNULL([RentAltRegMissedCallsRent],0)						AS [RentAltRegMissedCalls]
						,ISNULL([RentMobileConnectedCallsRent],0)					AS [RentMobileConnectedCalls]
						,ISNULL([RentMobileMissedCallsRent],0)						AS [RentMobileMissedCalls]
						,ISNULL([RentSEMConnectedCalls],0)							AS [RentSEMConnectedCalls]
						,ISNULL([RentSEMMissedCalls],0)								AS [RentSEMMissedCalls]
						,ISNULL([RentMobileSEMConnectedCalls],0)					AS [RentMobileSEMConnectedCalls]
						,ISNULL([RentMobileSEMMissedCalls],0)						AS [RentMobileSEMMissedCalls]
						,CONVERT(int,0)												AS FutureConnectedCalls03
						,CONVERT(int,0)												AS FutureMissedCalls03
						,ISNULL([RentEmailLeadsRent],0)								AS [RentEmailLeads]
						,ISNULL([TruliaEmailLeadsRent],0)							AS [TruliaEmailLeads]
						,[AndroidEmailLeadsRent]									AS [AndroidEmailLeads]
						,ISNULL([iPadEmailLeadsRent],0)								AS [iPadEmailLeads]
						,ISNULL([iPhoneEmailLeadsRent],0)							AS [iPhoneEmailLeads]
						,CONVERT(int,0)												AS FutureEmailLeads01
						,CONVERT(int,0)												AS FutureEmailLeads02
						,CONVERT(int,0)												AS FutureEmailLeads03
						,CONVERT(int,0)												AS FutureEmailLeads04
						,CONVERT(int,0)												AS InvoicedLeases
						FROM RentPath.Staging.MartListingsFromAPS  
					
			COMMIT TRANSACTION
  

								----------------------------------
								--Log the insertion
								----------------------------------	
								SET @LengthInSeconds = DATEDIFF(ss, @TrackDate,GETDATE())      
								EXEC DBAUtility.dbo.pr_Logging_StoredProcs @DatabaseName = @DatabaseName,
									@ProcName = @ProcedureName,
									@StepName = '3 - Insert data into Rentcom Mart Listings for the date range',
									@VariableStates = @LocalYMDID,
									@LengthInSeconds = @LengthInSeconds,
									@Comments = 'The transaction of inserting the data has been committed';
								SET @TrackDate = GETDATE();
            
			END					                   
	      
END TRY

	BEGIN CATCH
		SET @ErrorMessage		= ERROR_MESSAGE()
		SET @ErrorSeverity		= ERROR_SEVERITY()
		SET @ErrorState			= ERROR_STATE()

		SET @ErrorMessage = 'Error occured in Mart.pr_RentcomListingsFromAPS procedure. Error - ' + @ErrorMessage

			----------------------------------
			--Log the error
			----------------------------------	
			SET @LengthInSeconds = DATEDIFF(ss, @TrackDate,GETDATE())            
			EXEC DBAUtility.dbo.pr_Logging_StoredProcs @DatabaseName = @DatabaseName,
				@ProcName = @ProcedureName,
				@StepName = 'Error occured in Mart.pr_RentcomListingsFromAPS procedure.',
				@VariableStates = @LocalYMDID,
				@LengthInSeconds = @LengthInSeconds,
				@Comments = @ErrorMessage;
			SET @TrackDate = GETDATE();
		

		IF @@trancount > 0
			ROLLBACK TRANSACTION


		RAISERROR (@ErrorMessage, -- Message text.
		@ErrorSeverity, -- Severity.
		@ErrorState -- State.
		) WITH LOG;

		RETURN 0		-- Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	
	END CATCH

SET NOCOUNT OFF

END

GO
/****** Object:  StoredProcedure [Mart].[pr_RentPathListingsFromAPS]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Mart].[pr_RentPathListingsFromAPS]
/*************************************************************************************************
*
* Name:	Mart.pr_RentPathListingsFromAPS
*
* Desc:	This replaces the mart listings data in RentPath
*
* Test:	EXEC Mart.pr_RentPathListingsFromAPS
*
* Note: Keeping AG, Rentcom and RentPath as separate procedures so that they aren't dependent on successful completion of each other
* 
* Hist:	01	10/31/2016		Sarah Mims			Initial Version. Ticket # 24020.
* Hist:	02	02/07/2017		Sarah Mims			Case # 01340196 - productionizing this procedure by changing names where necessary
* Hist: 03	02/09/2017		Colleen Rocks		Case # 01373367 - add BadgeNewConstruction, BadgeRemodeled, UpsellPropInternetBanner
**************************************************************************************************/
AS
BEGIN

    SET NOCOUNT ON

		-----------------------------
		--Declare error handling variables
		-----------------------------
    DECLARE @ErrorMessage NVARCHAR(4000)
       ,@ErrorSeverity INT
       ,@ErrorState INT
				
		----------------------------------
		--Declare and Set Logging Variables
		----------------------------------
    DECLARE @TrackDate DATETIME
       ,@LocalYMDID INT
       ,@LengthInSeconds INT
       ,@DatabaseName VARCHAR(128)
       ,@ProcedureName VARCHAR(128)
       ,@CommentLine VARCHAR(500)
       ,@BeginYMDID INT
       ,@EndYMDID INT              


    SET @TrackDate = GETDATE();
    SET @LocalYMDID = CAST(CONVERT(VARCHAR(8),GETDATE(),112) AS INT)
    SET @LengthInSeconds = 0;
    SET @DatabaseName = DB_NAME();      
    SET @ProcedureName = 'Mart.pr_RentPathListingsFromAPS';	

		----------------------------------
		--Start Logging
		----------------------------------	
    SET @LengthInSeconds = DATEDIFF(ss,@TrackDate,GETDATE())            
    EXEC DBAUtility.dbo.pr_Logging_StoredProcs
        @DatabaseName = @DatabaseName
       ,@ProcName = @ProcedureName
       ,@StepName = '1 - Start Procedure: Mart.pr_RentPathListingsFromAPS'
       ,@VariableStates = @LocalYMDID
       ,@LengthInSeconds = @LengthInSeconds
       ,@Comments = 'Start Procedure';
    SET @TrackDate = GETDATE();

---------------------------------
--Do the actual work now: 
--1) Delete the date range from Mart.Listings
--2) Insert the date range from the APS Staging Table
---------------------------------
    BEGIN TRY
        IF EXISTS ( SELECT DISTINCT
                            YMDID
                    FROM    RentPath.Staging.MartListingsFromAPS )
            BEGIN
                BEGIN TRANSACTION
  
						-------------------------------------------------------
						--Delete the data from Mart Listings for the date range   
						-------------------------------------------------------						           
                DELETE  FROM RentPath.Mart.Listings
                WHERE   YMDID IN (SELECT DISTINCT
                                            YMDID
                                  FROM      RentPath.Staging.MartListingsFromAPS)  
						
                SET @BeginYMDID = (
                                   SELECT   MIN(YMDID)
                                   FROM     RentPath.Staging.MartListingsFromAPS
                                  )   
                SET @EndYMDID = (
                                 SELECT MAX(YMDID)
                                 FROM   RentPath.Staging.MartListingsFromAPS
                                )                 

					----------------------------------
					--Log the deletion
					----------------------------------	
                SET @LengthInSeconds = DATEDIFF(ss,@TrackDate,GETDATE())      
                SET @CommentLine = 'Data deleted from RentPath Mart listings:  from ' + CAST(@BeginYMDID AS VARCHAR) + ' to ' + CAST(@EndYMDID AS VARCHAR) + ''
                EXEC DBAUtility.dbo.pr_Logging_StoredProcs
                    @DatabaseName = @DatabaseName
                   ,@ProcName = @ProcedureName
                   ,@StepName = '2 - Delete data from RentPath Mart Listings for the date range'
                   ,@VariableStates = @LocalYMDID
                   ,@LengthInSeconds = @LengthInSeconds
                   ,@Comments = @CommentLine;
                SET @TrackDate = GETDATE();


						-------------------------------------------------------
						--Insert the data for the date range into RentPath Mart Listings
						-------------------------------------------------------	
                INSERT  INTO RentPath.Mart.Listings
                        SELECT  YMDID
                               ,YearMonth
                               ,ListingID
                               ,ListingDescriptionLength
                               ,ListingTypeID
                               ,ListingTypeShort
                               ,PropertyIDAG
                               ,StatusIDAG
                               ,PropertyIDRent
                               ,StatusIDRent
                               ,ListingType
                               ,IsSEM
                               ,ShowPricing
                               ,LowPrice
                               ,HighPrice
                               ,CallRecordingOptOut
                               ,TotalAmenities
                               ,ActiveAmenities
                               ,ActiveCoupon
                               ,ActiveFloorplans
                               ,ActiveHDFloorPlans
                               ,ActiveHDPhotos
                               ,ActivePhotos
                               ,ExternalID
                               ,HasAvailabilityURL
                               ,ExternalPriceCode AS ListingPricingSource
                               ,CallTrackingInBook
                               ,InvoicedLeases
                               ,IsOverThreshold
                               ,IsRentalProp
                               ,LastUpdateYMDID
                               ,LeaseMgtCoID
                               ,RentLeaseMgtCoID
                               ,ATTUverse
                               ,BrightHouse
                               ,Charter
                               ,DIRECTV
                               ,TimeWarner
                               ,VerizonFIOS
                               ,XfinityDP
                               ,XfinitySP
                               ,XfinityTP
                               ,HasCR3
                               ,CR3AvgOverallRatingAG
                               ,CR3AvgOverallRatingRent
                               ,ShowOfficeHours
                               ,PlacementTierAG
                               ,PlacementTierRent
                               ,ContractLoyaltyPoints
                               ,InternetProductPoints
                               ,LegacyLoyaltyPoints
                               ,MobilePoints
                               ,PrintProductPoints
                               ,Ranking
                               ,NumericRank
                               ,RPLRANK
                               ,BadgeCollege
                               ,BadgeCorporate
                               ,BadgeIncomeRestricted
                               ,BadgeLuxury
                               ,BadgeMilitary
                               ,BadgePetFriendly
                               ,BadgeSenior
                               ,BadgeGolf
                               ,BadgeWaterfront
                               ,BadgeFurnished
							   ,BadgeNewConstruction
							   ,BadgeRemodeled							  
                               ,DefaultBadge
                               ,Upsell30SecondVideo
                               ,Upsell3DFloorplan
                               ,Upsell60SecondVideo
                               ,UpsellAdCreator
                               ,UpsellAGMobileSyndication
                               ,UpsellAGSites
                               ,UpsellApartmentListing
                               ,UpsellBillingOnly
                               ,UpsellCallRecording
                               ,UpsellCarousel
                               ,UpsellCarouselRentals
                               ,UpsellCategoryListing
                               ,UpsellCommunityVideo
                               ,UpsellCommunityVideoURLFulfilled
                               ,UpsellCoupon
                               ,UpsellDiamondCity
                               ,UpsellDiamondMax
                               ,UpsellDiamondMetro
                               ,UpsellDynamicLeadForm
                               ,UpsellEmercial
                               ,UpsellEZPay
                               ,UpsellFeaturedCommunityAG
                               ,UpsellFeaturedCommunityGold
                               ,UpsellFeaturedCommunityPlatinum
                               ,UpsellFeaturedCommunityRent
                               ,UpsellFeaturedCommunitySilver
                               ,UpsellFeaturedListingRentals
                               ,UpsellFloorPlanUpgrade
                               ,UpsellFormToPhone
                               ,UpsellFrontPage
                               ,UpsellGoldTier
                               ,UpsellHDActiveFloorplansFulfilled
                               ,UpsellHDActivePhotosFulfilled
                               ,UpsellHDPanoTour
                               ,UpsellHDPanoTourFulfilled
                               ,UpsellHDPhoto
                               ,UpsellHDVideo
                               ,UpsellHDVideoFulfilled
                               ,UpsellHighlighted
                               ,UpsellLeadMail
                               ,UpsellLinked3DFloorplan
                               ,UpsellLinked3DFloorplanFulfilled
                               ,UpsellLinkedFloorplan
                               ,UpsellLinkedFloorplanFulfilled
                               ,UpsellLinkedHDFloorplan
                               ,UpsellLinkedHDFloorplanFulfilled
                               ,UpsellLinkedLowResFloorPlan
                               ,UpsellLinkedLowResFloorPlanFulFilled
                               ,UpsellLinkedRoomPlanner
                               ,UpsellLinkedRoomPlannerFulfilled
                               ,UpsellListingRent
                               ,UpsellListingRentals
                               ,UpsellMediaCenter
                               ,UpsellMediaCenterCoupon
                               ,UpsellMgmtManagementCoLogoDisplay
                               ,UpsellMgmtPeelAd
                               ,UpsellMobileDeal
                               ,UpsellMobileDealFulfilled
                               ,UpsellMobileDiamond
                               ,UpsellMobileSpotlight
                               ,UpsellNoVacancyRent
                               ,UpsellPayPerLead
                               ,UpsellPayPerLease
                               ,UpsellPayPerLeaseALM
                               ,UpsellPhotoPlus
                               ,UpsellPhotoUpgrade
                               ,UpsellPlatinumTier
                               ,UpsellPrecisionTargetedEmailRent
                               ,UpsellPremierListingRentals
                               ,UpsellPremiumUpgrade
                               ,UpsellPropertyLogo
							   ,UpsellPropInternetBanner
                               ,UpsellRentFeaturedPlacement
                               ,UpsellRentpathConnect
                               ,UpsellRepMon
                               ,UpsellRewardCardRent
                               ,UpsellSocialMediaMan
                               ,UpsellSpanish
                               ,UpsellSponsoredApartment
                               ,UpsellSpotlightAG
                               ,UpsellSpotlightRent
                               ,UpsellSpotlightRentals
                               ,UpsellStandardListingRentals
                               ,UpsellStandardPlusListingRentals
                               ,UpsellSubscriptionModelRent
                               ,UpsellVideoSpokesmodel
                               ,UpsellVIPPlacementRent
                               ,UpsellVirtualBrochure
                               ,UpsellVirtualTourFulfilled
                               ,ClicksCheckYourCredit
                               ,ClicksCommunityVideoAG
                               ,ClicksCR3AG
                               ,ClicksCR3Rent
                               ,ClicksDiamondMaxCheckAvailAG
                               ,ClicksDiamondMaxPhotoAG
                               ,ClicksFeatCommCheckAvailAG
                               ,ClicksFeatCommCheckAvailRent
                               ,ClicksFeaturedCommunityAG
                               ,ClicksFeaturedCommunityRent
                               ,ClicksFeaturedMgtCo
                               ,ClicksFloorplanAG
                               ,ClicksFloorplanRent
                               ,ClicksFrontPagePropLead
                               ,ClicksHDFloorplanAG
                               ,ClicksHDFloorplanRent
                               ,ClicksHDPanoTourAG
                               ,ClicksHDPanoTourRent
                               ,ClicksHDPhotoAG
                               ,ClicksHDPhotoRent
                               ,ClicksHDVideoAG
                               ,ClicksHDVideoRent
                               ,ClicksLeadSubmissionAG
                               ,ClicksLeadSubmissionRent
                               ,ClicksMapAG
                               ,ClicksMapRent
                               ,ClicksMgtCoPeelAdAG
                               ,ClicksMgtCoPeelAdRent
                               ,ClicksMgtCoURLAG
                               ,ClicksMgtCoURLRent
                               ,ClicksPhotosAG
                               ,ClicksPhotosRent
                               ,ClicksReserveNowAG
                               ,ClicksReserveNowRent
                               ,ClicksSpotlightRentSpecialsAG
                               ,ClicksSpotlightRentSpecialsRent
                               ,ClicksSpotlightReserveNowAG
                               ,ClicksSRPListingCheckAvailAG
                               ,ClicksSRPListingCheckAvailRent
                               ,ClicksWebURLAG
                               ,ClicksWebURLRent
                               ,ViewsEmercial
                               ,ViewsListingPage
                               ,ViewsListingPage_Mobile
                               ,ViewsListingPage_Sites
                               ,ViewsListingPageAGSites
                               ,ViewsListingPageMobileAG
                               ,ViewsListingPageMobileRent
                               ,ViewsListingPageWebAG
                               ,ViewsListingPageWebRent
                               ,ViewsVirtualBrochure
                               ,AGCPrintConnectedCalls
                               ,AGCPrintMissedCalls
                               ,ASGPrintConnectedCalls
                               ,ASGPrintMissedCalls
                               ,CombinedFeedsConnectedCalls
                               ,CombinedFeedsMissedCalls
                               ,CraigsListConnectedCalls
                               ,CraigsListMissedCalls
                               ,CTCConnectedCalls
                               ,CTCMissedCalls
                               ,DripConnectedCalls
                               ,DripMissedCalls
                               ,GoogleConnectedCalls
                               ,GoogleMissedCalls
                               ,LeadMailConnectedCalls
                               ,LeadMailMissedCalls
                               ,LuxuryConnectedCalls
                               ,LuxuryMissedCalls
                               ,MarchexConnectedCalls
                               ,MarchexMissedCalls
                               ,MobileSEMConnectedCalls
                               ,MobileSEMMissedCalls
                               ,PaidSPConnectedCalls
                               ,PaidSPMissedCalls
                               ,PPCConnectedCalls
                               ,PPCMissedCalls
                               ,RentConnectedCallsAG
                               ,RentMissedCallsAG
                               ,RentConnectedCallsRent
                               ,RentMissedCallsRent
                               ,RentMobileConnectedCallsAG
                               ,RentMobileMissedCallsAG
                               ,RentMobileConnectedCallsRent
                               ,RentMobileMissedCallsRent
                               ,RentMobileSEMConnectedCalls
                               ,RentMobileSEMMissedCalls
                               ,RentOneWebConnectedCallsAG
                               ,RentOneWebMissedCallsAG
                               ,RentOneWebConnectedCallsRent
                               ,RentOneWebMissedCallsRent
                               ,RentSEMConnectedCalls
                               ,RentSEMMissedCalls
                               ,SEMConnectedCalls
                               ,SEMMissedCalls
                               ,SitesConnectedCalls
                               ,SitesMissedCalls
                               ,SMSConnectedCalls
                               ,SMSMissedCalls
                               ,TruliaConnectedCalls
                               ,TruliaMissedCalls
                               ,VideoConnectedCalls
                               ,VideoMissedCalls
                               ,WebLocalTrackingNumberConnectedCalls
                               ,WebLocalTrackingNumberMissedCalls
                               ,WebConnectedCalls
                               ,WebMissedCalls
                               ,AGEmailLeads
                               ,AGKindleEmailLeads
                               ,AGMobileEmailLeads
                               ,AGTabletEmailLeads
                               ,AIMCOEmailLeads
                               ,AndroidEmailLeadsAG
                               ,AndroidEmailLeadsRent
                               ,CampusHomesOnlineEmailLeads
                               ,CondoEmailLeads
                               ,EREIFeedLeads
                               ,HotpadsEmailLeads
                               ,iPadEmailLeadsAG
                               ,iPadEmailLeadsRent
                               ,iPhoneEmailLeadsAG
                               ,iPhoneEmailLeadsRent
                               ,LovelyEmailLeads
                               ,LuxuryEmailLeads
                               ,MetroEmailLeads
                               ,NeighborhoodEmailLeads
                               ,OodleEmailLeads
                               ,PropSolutionsFeedLeads
                               ,RDTFeedLeadsAG
                               ,RDTFeedLeadsRent
                               ,RentAndroidEmailLeads
                               ,RentEmailLeadsAG
                               ,RentEmailLeadsRent
                               ,RentiPadEmailLeads
                               ,RentiPhoneEmailLeads
                               ,RentRentarEmailLeads
                               ,SitesEmailLeads
                               ,TruliaEmailLeadsAG
                               ,TruliaEmailLeadsRent
                               ,VastEmailLeads
                               ,VerticalBrandsEmailLeads
                               ,YardiRCFeedLeads
                               ,YieldFeedLeads
                               ,ZillowEmailLeads
                               ,RentalHousesEmailLeads
                               ,RentalsAndroidEmailLeads
                               ,RentalsEmailLeads
                               ,RentalsIPhoneEmailLeads
                               ,RentalsMobileEmailLeads
                               ,RentalsLocalConnectedCalls
                               ,RentalsLocalMissedCalls
                               ,RentalsConnectedCalls
                               ,RentalsMissedCalls
                               ,RentAltRegConnectedCallsAG
                               ,RentAltRegMissedCallsAG
                               ,RentAltRegConnectedCallsRent
                               ,RentAltRegMissedCallsRent
                               ,ImprFrontCover
                               ,CheckListingAvail
                               ,SRPListingImprAG
                               ,SRPListingImprRent
                               ,SRPUniqueVisitAG
                               ,SRPUniqueVisitRent
                               ,TextMsgMobile
                               ,TextMsgWeb
                               ,TotalFloorPlans
                               ,TotalPhotos
                               ,UniqueVisitsAG
                               ,UniqueVisitsAGSites
                               ,UniqueVisitsMobileAG
                               ,UniqueVisitsMobileRent
                               ,UniqueVisitsRent
                        FROM    RentPath.Staging.MartListingsFromAPS  
					
                COMMIT TRANSACTION
  

								----------------------------------
								--Log the insertion
								----------------------------------	
                SET @LengthInSeconds = DATEDIFF(ss,@TrackDate,GETDATE())      
                EXEC DBAUtility.dbo.pr_Logging_StoredProcs
                    @DatabaseName = @DatabaseName
                   ,@ProcName = @ProcedureName
                   ,@StepName = '3 - Insert data into RentPath Mart Listings for the date range'
                   ,@VariableStates = @LocalYMDID
                   ,@LengthInSeconds = @LengthInSeconds
                   ,@Comments = 'The transaction of inserting the data has been committed';
                SET @TrackDate = GETDATE();
            
            END					                   
	      
    END TRY

    BEGIN CATCH
        SET @ErrorMessage = ERROR_MESSAGE()
        SET @ErrorSeverity = ERROR_SEVERITY()
        SET @ErrorState = ERROR_STATE()

        SET @ErrorMessage = 'Error occured in Mart.pr_RentPathListingsFromAPS procedure. Error - ' + @ErrorMessage

			----------------------------------
			--Log the error
			----------------------------------	
        SET @LengthInSeconds = DATEDIFF(ss,@TrackDate,GETDATE())            
        EXEC DBAUtility.dbo.pr_Logging_StoredProcs
            @DatabaseName = @DatabaseName
           ,@ProcName = @ProcedureName
           ,@StepName = 'Error occured in Mart.pr_RentPathListingsFromAPS procedure.'
           ,@VariableStates = @LocalYMDID
           ,@LengthInSeconds = @LengthInSeconds
           ,@Comments = @ErrorMessage;
        SET @TrackDate = GETDATE();
		

        IF @@trancount > 0
            ROLLBACK TRANSACTION


        RAISERROR (@ErrorMessage, -- Message text.
		@ErrorSeverity, -- Severity.
		@ErrorState -- State.
		) WITH LOG;

        RETURN 0		-- Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	
    END CATCH

    SET NOCOUNT OFF

END


GO
/****** Object:  StoredProcedure [Mart].[pr_SmallPropertyListings]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/*******************************************************************************************************************************************
*
* Name:	[Mart].[pr_SmallPropertyListings]
*
* Desc:	This SPROC pulls down the data for Rentals/Lovely Syndication to AG and Rent and marts it by YMDID.
*
* Test:	EXEC Mart.pr_SmallPropertyListings NULL
*	SELECT * FROM RentPath.Mart.SmallPropertyListings WHERE YMDID = 20150227
*
* Notes:
*		Note that the Rentals and Lovely property records that come in are on the syndication,
*			so there is no need to check either for status value.
*		Each record in Staging table gets a record here, whether they have leads or not.
*		Since all appear on syndication, and a record is created in Mart for each listing, then
*			this is essentially a snapshot (marting) of the Staging table showing who was syndicated that day.
*
* Hist:	01	02/13/2015	Bob Langley		Initial Version - Ticket 18228
*		02	05/13/2015	Sarah Mims		Ticket # 19300 - added Rentcom syndication and Small Property listings and as a result modified table structure
*		03	05/28/2015	Sarah Mims		Ticket # 19582 - added new Rentcom Email Lead Types
*		04	05/28/2015	Sarah Mims		Ticket # 19584 - fixed Lovely lead issue and changed pull to CopyStatus = 1 per Jim
*		05	05/29/2015	Sarah Mims		Ticket # 19582 - accounted for new NOS lead types (NOS-AndroidRent, NOS-iPadRent, NOS-iPhoneRent) as well as
*										Lovely lead types (AndroidRent, iPadRent, iPhoneRent)
*		06	06/01/2015	Sarah Mims		Ticket # 19582 - changed to only pull calls for Rent Small Properties and changed to join on RentPropertyID
*		07	06/07/2015	Don Wert		Ticket 19694, update the query populating #TealiumViewsListingPage to use only 30 characters from ListingID.
*		08	06/29/2015	Sarah Mims		Ticket # 19914 - added DisplayListingID to Mart Listings table for reporting purposes and also added update to 
*										StatusIDAG/StatusIDRent based on the existence of an email lead for that listing
*		09	07/06/2015	Sarah Mims		Ticket # 19924 - changed marting of Lovely emails source to newly created Lovely Email Syndication table
*		10	08/19/2015	Sarah Mims		Ticket # 20448 - added in RentalHouses Listings syndicated to Rent
*		11	10/7/2015	Don Wert		Ticket 21062 - add Left function to the query that populates #ListingArray
*		12	10/21/2015	Sarah Mims		Ticket # 21193 - added m.apartmentguide source for Lovely leads
*		13	11/30/2015	Sarah Mims		Ticket # 21466 - added iPadAG, iPhoneAG and AndroidAG for Lovely and Rentals leads
*		14	12/01/2015	Sarah Mims		Ticket # 21466 - removed the filter of status = 'Active' for getting Rentals leads
*													   - changed the update status logic at the end to look for any email lead
*		15	03/09/2016	Sarah Mims		Ticket # 22367 Changed the RAISE ERROR for the non matching YMDID from 10 to 16 so it jumps out of
*										the procedure and provides us with an error
*		16	05/16/2016	Sarah Mims		Ticket # 23059 - Added AndroidRT, iPhoneRentals,m.rentals,rentals leads from RentPath.Fact.EmailsLovelySyndication
*******************************************************************************************************************************************/
CREATE PROCEDURE [Mart].[pr_SmallPropertyListings] (@datetorun INT = NULL)
AS 
BEGIN

    SET NOCOUNT ON;
	
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    DECLARE @TrackDate DATETIME
       ,@LengthInSeconds INT
       ,@DatabaseName VARCHAR(128)
                
    SET @TrackDate = GETDATE()
    SET @LengthInSeconds = 0
    SET @DatabaseName = DB_NAME()        
		
    EXEC DBAUtility.dbo.pr_Logging_StoredProcsNoTemp 
        @DatabaseName = @DatabaseName
       , -- varchar(128)
        @ProcName = 'Mart.pr_SmallPropertyListings'
       , -- varchar(128)
        @StepName = 'Execute Procedure'
       , -- varchar(128)
        @VariableStates = ''
       , -- varchar(500)
        @LengthInSeconds = @LengthInSeconds
       , -- int
        @Comments = 'Execute Procedure'; -- varchar(500)

	/* Testing 
	DECLARE @datetorun int
	SET @datetorun = NULL--20150306
	*/

	---------------------------------------------------
	--Declare and set variables
	---------------------------------------------------
    DECLARE @ErrorMessage NVARCHAR(4000)
       ,@ErrorNumber INT
       ,@ErrorSeverity INT
       ,@ErrorState INT
       ,@ErrorLine INT
       ,@ErrorProcedure NVARCHAR(200)
		
    DECLARE @codesection VARCHAR(300)

    DECLARE @sqlcmd VARCHAR(8000)
    DECLARE @sqlcmd2 NVARCHAR(4000)


    DECLARE @yearmonth INT
    DECLARE @datetouse DATETIME
    DECLARE @datetouseymdid INT
    DECLARE @periodbegymdid INT
    DECLARE @periodendymdid INT
    DECLARE @yesterdayymdid INT

    DECLARE @servername VARCHAR(200)
    DECLARE @msgbody VARCHAR(8000)
    DECLARE @msgsubject VARCHAR(8000)
    DECLARE @RecipientsText VARCHAR(8000)

    DECLARE @newwebsitevalues VARCHAR(4000)


	--Note:  input parameter @datetorun should be yesterday's date (only have data up through yesterday).  If null, will take today's date and subtract a day to get the run date to use.
    SET @datetouse = ISNULL(CONVERT(DATETIME,CONVERT(VARCHAR(10),@datetorun)),CONVERT(DATETIME,CONVERT(VARCHAR(10),DATEADD(dd,-1,GETDATE()),101)))		-- if null, set to today
    SET @datetouseymdid = CONVERT(INT,CONVERT(VARCHAR(10),@datetouse,112))											-- Get the date as integer	
	
	--SET @datetouse = '08/19/2015'
	--SET @datetouseymdid = 20150819		
	
    SET @periodbegymdid = (
                           SELECT   MonthStartYMDID
                           FROM     DBAUtility.Dimension.Dates
                           WHERE    YMDID = @datetouseymdid
                          )
    SET @periodendymdid = (
                           SELECT   MonthEndYMDID
                           FROM     DBAUtility.Dimension.Dates
                           WHERE    YMDID = @datetouseymdid
                          )
    SET @yearmonth = CONVERT(INT,@periodbegymdid * .01)

    SET @yesterdayymdid = CONVERT(INT,CONVERT(VARCHAR(10),DATEADD(dd,-1,GETDATE()),112))
	
    PRINT '@datetouse = ' + CONVERT(VARCHAR(30),@datetouse)
    PRINT '@datetouseymdid = ' + CONVERT(VARCHAR(30),@datetouseymdid)
    PRINT '@yearmonth = ' + CONVERT(VARCHAR(30),@yearmonth)
    PRINT '@periodbegymdid = ' + CONVERT(VARCHAR(30),@periodbegymdid)
    PRINT '@periodendymdid = ' + CONVERT(VARCHAR(30),@periodendymdid)
    PRINT ' '
	
	----------------------------------------------------------------------
	--Make sure the data is available in AG ParsedData and Tealium ParsePivot for the date chosen
	----------------------------------------------------------------------      		
IF (
	SELECT TOP 1
			ymdid
	FROM    Staging.TealiumParsedPivot

	UNION    
	SELECT TOP 1 YMDID FROM Apartmentguide.dbo.ParsedData
	) = @datetouseymdid

BEGIN 
   	----------------------------------------------------------------------
	-- Drop all temporary working tables
	----------------------------------------------------------------------

    SET @codesection = 'Drop temp working tables'

    BEGIN TRY
        DROP TABLE #tmpworkingtable
    END TRY
    BEGIN CATCH
    END CATCH

    BEGIN TRY
        DROP TABLE #VisitListingImpressions
    END TRY
    BEGIN CATCH
    END CATCH
	
    BEGIN TRY
        DROP TABLE #tmpAPTGSidImp
    END TRY
    BEGIN CATCH
    END CATCH

    BEGIN TRY
        DROP TABLE #AGViews
    END TRY
    BEGIN CATCH
    END CATCH

    BEGIN TRY
        DROP TABLE #tmpviewslistingpage
    END TRY
    BEGIN CATCH
    END CATCH
	
    BEGIN TRY
        DROP TABLE #ListingArray
    END TRY
    BEGIN CATCH
    END CATCH
  
    BEGIN TRY
        DROP TABLE #Impressions
    END TRY
    BEGIN CATCH
    END CATCH    
    
	BEGIN TRY
		DROP TABLE #TealiumViewsListingPage
	END TRY
	BEGIN CATCH
	END CATCH
  
	BEGIN TRY
		DROP TABLE #MobileMetrics
	END TRY
	BEGIN CATCH
	END CATCH    
	
    BEGIN TRY
        DROP TABLE #tmppageviewsvisits
    END TRY
    BEGIN CATCH
    END CATCH

    BEGIN TRY
        DROP TABLE #tmpwebtrendssitedata
    END TRY
    BEGIN CATCH
    END CATCH

	BEGIN TRY
        DROP TABLE 	#AGSRP
    END TRY
    BEGIN CATCH
    END CATCH

    BEGIN TRY
        DROP TABLE #tmpimpressionsperlisting
    END TRY
    BEGIN CATCH
    END CATCH

	PRINT @codesection  
	---------------------------------------------------------------------------
	--Create temp tables
	---------------------------------------------------------------------------
	SET @codesection = 'Create needed temp working tables'

    CREATE TABLE #tmpworkingtable				
        (
        YMDID INT NOT NULL
       ,YearMonth INT NOT NULL
       ,StatusIDAG INT NOT NULL
       ,StatusIDRent INT NOT NULL       
       ,DisplayListingID VARCHAR(30) NOT NULL      
       ,ListingID INT NOT NULL
	   ,PropertyIDAG INT NOT NULL
       ,PropertyIDRent INT NOT NULL     
       ,IsRentals TINYINT NULL
       ,IsRentalHouses TINYINT NULL     
       ,IsLovely TINYINT NULL
       ,IsRentSmallProp TINYINT NOT NULL
       ,ShowPricing TINYINT NULL DEFAULT 0
       ,LowPrice INT NOT NULL DEFAULT 0
       ,HighPrice INT NOT NULL DEFAULT 0
       ,ActiveAmenities INT NOT NULL
       ,ActiveFloorPlans INT NOT NULL
       ,ActivePhotos INT NOT NULL
       ,UniqueVisitsAG INT NOT NULL
       ,UniqueVisitsRent INT NOT NULL
       ,UniqueVisitsMobileAG INT NOT NULL
       ,UniqueVisitsMobileRent INT NOT NULL
       ,ViewsListingPageWebAG INT NOT NULL
       ,ViewsListingPageWebRent INT NOT NULL
       ,ViewsListingPageMobileAG INT NOT NULL
       ,ViewsListingPageMobileRent INT NOT NULL
       ,SRPListingImprAG INT NOT NULL
       ,SRPListingImprRent INT NOT NULL
       ,SRPUniqueVisitAG INT NOT NULL
       ,SRPUniqueVisitRent INT NOT NULL
       ,InternetConnectedCalls INT NOT NULL
       ,InternetMissedCalls INT NOT NULL
       ,MobileConnectedCalls INT NOT NULL
       ,MobileMissedCalls INT NOT NULL
       ,EmailLeadsAG INT NOT NULL
       ,MobileEmailLeadsAG INT NOT NULL
       ,IphoneEmailLeadsAG INT NOT NULL
       ,AndroidEmailLeadsAG INT NOT NULL
       ,IPadEmailLeadsAG INT NOT NULL
       ,TabletEmailLeadsAG INT NOT NULL
       ,KindleEmailLeadsAG INT NOT NULL
       ,EmailLeadsRent INT NOT NULL
       ,MobileEmailLeadsRent INT NOT NULL
       ,IphoneEmailLeadsRent INT NOT NULL
       ,AndroidEmailLeadsRent INT NOT NULL
       ,IPadEmailLeadsRent INT NOT NULL
       ,TabletEmailLeadsRent INT NOT NULL
       ,KindleEmailLeadsRent INT NOT NULL
	   ,EmailLeadsRentals INT NOT NULL
	   ,MobileEmailLeadsRentals INT NOT NULL
	   ,AndroidEmailLeadsRentals INT NOT NULL
	   ,IphoneEmailLeadsRentals INT NOT NULL,	  	   	   
	   )
	   
    PRINT 'Finished deleting and creating needed temp tables ' + CONVERT(VARCHAR(50),GETDATE(),101) + '  ' + CONVERT(VARCHAR(50),GETDATE(),108)   	
	
	--------------------------------------------------
	--Do a check to see if other values are present other than expected ones
	--------------------------------------------------
	
    BEGIN TRY
        IF EXISTS ( SELECT  *
                    FROM    RentPath.Fact.EmailsLovelySyndication
                    WHERE   Source NOT IN ('AndroidAG','AndroidRent','apartmentguide','iPadAG','iPadRent','iPhoneAG','iPhoneRent','m.apartmentguide','rent','AndroidRT','iPhoneRentals','m.rentals','rentals')
					)--the list of good values, so if others come in, send an email
            BEGIN         
                SET @newwebsitevalues = ''
                SELECT  @newwebsitevalues = @newwebsitevalues + '; ' + Source
				FROM
					(
					SELECT DISTINCT Source
					FROM    RentPath.Fact.EmailsLovelySyndication
					WHERE   Source NOT IN ('AndroidAG','AndroidRent','apartmentguide','iPadAG','iPadRent','iPhoneAG','iPhoneRent','m.apartmentguide','rent','AndroidRT','iPhoneRentals','m.rentals','rentals')	-- list of good values
					) AS d

                SET @servername = CONVERT(VARCHAR(200),@@servername)
                SET @msgsubject = 'New WEBSITE value found for CENTROID Lovely email leads'

                SET @msgbody = 'Server ' + @servername + CHAR(13) + CHAR(10)
                SET @msgbody = @msgbody + CHAR(13) + CHAR(13) + 'New WEBSITE value(s) found.  Values = ' + @newwebsitevalues
                SET @msgbody = @msgbody + CHAR(13) + CHAR(13) + 'This Email Is Generated By SP [Mart].[pr_SmallPropertyListings] In RentPath.'

                SET @RecipientsText = 'bidatateam@rentpath.com'

                EXEC msdb.dbo.sp_send_dbmail 
                    @profile_name = 'BI Team Account'
                   ,@recipients = @RecipientsText
                   ,							-- use ; between if more than one
                    @body = @msgbody
                   ,@subject = @msgsubject
                   ,@importance = 'HIGH'
                   ,@body_format = 'TEXT';
            END
    END TRY
    BEGIN CATCH
    END CATCH

    PRINT 'Finished loading Centroid AllLeads information  ' + CONVERT(VARCHAR(50),GETDATE(),101) + '  ' + CONVERT(VARCHAR(50),GETDATE(),108)

	--------------------------------
	--Get ViewsListingPage for old AG tagging
	--------------------------------
	SET @codesection = 'Get AG ViewsListingPage information'
	    
    SELECT  ListingID = LTRIM(RTRIM(Measure))
           ,ViewsListingPageWebAG = SUM(CASE WHEN MeasureType = 'a_l_pv'
                                                  OR Measuretype = 'DPG' THEN 1
                                             ELSE 0
                                        END)
    INTO    #AGViews
    FROM    Apartmentguide.dbo.ParsedData WITH (NOLOCK)
    GROUP BY LTRIM(RTRIM(Measure))

    SELECT  ListingID
            ,ViewsListingPageWebAG
    INTO    #tmpviewslistingpage
    FROM    #AGViews
    WHERE   (ListingID LIKE 'r%'
                AND ISNUMERIC(SUBSTRING(ListingID,2,LEN(ListingID) - 1)) = 1)
            OR (ListingID LIKE 'lv%'
                AND ISNUMERIC(SUBSTRING(ListingID,3,LEN(ListingID) - 2)) = 1)
	
    PRINT 'Finished loading AG ViewsListingPage information  ' + CONVERT(VARCHAR(50),GETDATE(),101) + '  ' + CONVERT(VARCHAR(50),GETDATE(),108)

	/*TEALIUM TAGGING*/
	------------------------------------------
	--Create & populate table for listing array, which is used to 
	--calculate impression and visit counts
	------------------------------------------
	SET @codesection = 'Get Listing Array for Tealium tagging'

	CREATE TABLE #ListingArray (
		Listingid VARCHAR(30) NULL
	   ,visit VARCHAR(7000) NULL
	   ,profileid INT NULL
	   ,[EVENT] VARCHAR(21) NULL)

	INSERT  INTO #ListingArray
			(Listingid
			,visit
			,profileid
			,EVENT)
			SELECT  LEFT(Listingid,30) AS Listingid
				   ,visit
				   ,profileid
				   ,[EVENT]
			FROM    (
					 SELECT s.Measure AS Listingid
						   ,visit
						   ,profileid
						   ,'SearchPageImpressions' AS [EVENT]
					 FROM Staging.TealiumParsedPivot AS tpp
					 CROSS APPLY DBAUtility.dbo.fn_Split(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(listing_array,' ',''),'<',''),'>',''),'&lt;',''),'&gt;',''),';') AS s
					 WHERE  [page] = 'srp'
							AND subprofileid <> 99
							--AND (REPLACE(REPLACE(REPLACE(REPLACE(listing_array,'<',''),'>',''),'&lt;',''),'&gt;','') LIKE '%r%'
							--	OR REPLACE(REPLACE(REPLACE(REPLACE(listing_array,'<',''),'>',''),'&lt;',''),'&gt;','') LIKE '%lv%')
					) AS a

	CREATE NONCLUSTERED INDEX idx_ListingArray
	ON #ListingArray(Listingid,profileid);

	PRINT 'Finished loading listing array for Tealium tagging' + CONVERT(VARCHAR(50),GETDATE(),101) + '  ' + CONVERT(VARCHAR(50),GETDATE(),108)

	------------------------------------------
	--Get Impressions for Tealium tagging
	------------------------------------------
	SET @codesection = 'Get Tealium Impressions'

	CREATE TABLE #Impressions (
		listingid VARCHAR(30)
	   ,profileid INT
	   ,SRPListingImpr INT
	   ,SRPUniqueVisit INT);

	INSERT INTO #Impressions
			(listingid
			,profileid
			,SRPListingImpr
			,SRPUniqueVisit)
			SELECT  a.ListingID
				   ,a.profileid					AS ProfileID
				   ,COUNT(1)					AS SRPListingImpr
				   ,COUNT(DISTINCT visit)		AS SRPUniqueVisit
			FROM    
					(
					 SELECT la.Listingid AS ListingID
						   ,la.visit
						   ,la.profileid
						   ,la.[EVENT]
					 FROM  #ListingArray AS la
					) AS a
			GROUP BY a.ListingID
				   ,a.profileid;

	CREATE NONCLUSTERED INDEX idx_Impressions
	ON #Impressions(listingid,profileid)
	INCLUDE(SRPListingImpr);

	PRINT 'Finished loading Tealium impressions' + CONVERT(VARCHAR(50),GETDATE(),101) + '  ' + CONVERT(VARCHAR(50),GETDATE(),108)
	--------------------------------
	--Get ViewsListingPage and Visits for Tealium tagging
	--------------------------------
	SET @codesection = 'Get Tealium Visits and Views'

    CREATE TABLE #TealiumViewsListingPage (
        ListingID VARCHAR(30)
	   ,Profileid INT      
       ,UniqueVisits INT
       ,UniqueVisitsMobile INT
       ,ViewsListingPageWeb INT
       ,ViewsListingPageMobile INT);

		INSERT INTO #TealiumViewsListingPage
				(listingid
				,profileid
				,UniqueVisits
				,UniqueVisitsMobile
				,ViewsListingPageWeb
				,ViewsListingPageMobile)
				SELECT  LEFT(tpp.ListingID,30) AS ListingID
					   ,CAST(tpp.profileid AS INT) AS profileid
					   ,COUNT(DISTINCT CASE WHEN tpp.subprofileid = 1 THEN tpp.visit
									   END) AS UniqueVisits
					   ,COUNT(DISTINCT CASE WHEN tpp.subprofileid = 2 THEN tpp.visit
									   END) AS UniqueVisitsMobile
					   ,SUM(CASE WHEN tpp.subprofileid = 1 THEN 1
								 ELSE 0
							END) AS ViewsListingPageWeb
					   ,SUM(CASE WHEN tpp.subprofileid = 2 THEN 1
								 ELSE 0
							END) AS ViewsListingPageMobile
				FROM    Staging.TealiumParsedPivot AS tpp
				WHERE   tpp.action = 'pageview'
						AND tpp.[page] = 'pdp'
						AND subprofileid <> 99
				GROUP BY tpp.listingid
					   ,tpp.profileid

             CREATE NONCLUSTERED INDEX idx_Tealium_Pageviews
             ON #TealiumViewsListingPage(listingid,profileid)
             INCLUDE(UniqueVisits
             ,UniqueVisitsMobile
             ,ViewsListingPageWeb
             ,ViewsListingPageMobile);

	PRINT 'Finished loading Tealium Visits and Views  ' + CONVERT(VARCHAR(50),GETDATE(),101) + '  ' + CONVERT(VARCHAR(50),GETDATE(),108)
    -------------------------------------------------------
	-- Mart web listing pageviews and visits for old AG mobile tagging
    -------------------------------------------------------
	SET @codesection = 'Get AG Mobile Pageviews and Visits'

		SELECT  ListingID
				,YMDID
				,COUNT(DISTINCT [wt.vt_sid])	AS NumOfVisits
				,SUM(1)							AS Pageviews
		INTO	#MobileMetrics
		FROM      (
					SELECT ParseID
						,ProfileID
						,YMDID
						,EventDate
						,MeasureType
						,Measure
					FROM   Staging.dbo.ParsedData WITH (NOLOCK)			
					WHERE  YMDID = @datetouseYMDID
						AND ProfileID = 51
						AND MeasureType IN ('wt.vt_sid','wt.cg_n','listingid','wt.dl')
				) X PIVOT ( MAX(Measure) FOR MeasureType IN ([wt.vt_sid],[wt.cg_n],[listingid],[wt.dl]) ) P
		WHERE     p.[wt.cg_n] = 'detail'
				AND p.[wt.dl] = 'pageview'
		GROUP BY  ListingID
				,YMDID


        SELECT  *
        INTO    #tmppageviewsvisits
        FROM    #MobileMetrics
        WHERE   (ListingID LIKE '%r%')
                OR (ListingID LIKE '%lv%')
        
    PRINT 'Finished loading AG Mobile Pageviews and Visits  ' + CONVERT(VARCHAR(50),GETDATE(),101) + '  ' + CONVERT(VARCHAR(50),GETDATE(),108)	

    -------------------------------------------------------
    -- Get AG Visits from old tagging
    -------------------------------------------------------
	SET @codesection = 'Get AG Visits from Old Tagging'

    SELECT  ListingID = p1.measure
           ,UniqueVisitsAG = COUNT(DISTINCT p2.Measure)
    INTO    #tmpwebtrendssitedata
    FROM    Apartmentguide.dbo.ParsedData AS p1 WITH (NOLOCK) 
    INNER JOIN Apartmentguide.dbo.ParsedData AS p2 WITH (NOLOCK)
			ON p1.ParseID = p2.ParseID
    WHERE   (p1.MeasureType = 'a_l_pv'
             OR p1.MeasureType = 'DPG')
            AND p2.MeasureType = 'WT.vt_sid'
            AND ISNUMERIC(p1.Measure) = 0
    GROUP BY p1.measure
                    
    PRINT 'Finished loading AG Visits from Old Tagging  ' + CONVERT(VARCHAR(50),GETDATE(),101) + '  ' + CONVERT(VARCHAR(50),GETDATE(),108)

	-------------------------------------------------------
	--Get SRP Listing Impression for AG from old tagging
	-------------------------------------------------------
	SET @codesection = 'Get AG SRP Listing Impressions'
	
    SELECT  ListingID = s.measure
           ,SRPListingImprAG = COUNT(*)
    INTO    #AGSRP
    FROM    Apartmentguide.dbo.ParsedData AS p WITH (NOLOCK)
    CROSS APPLY DBAUtility.dbo.fn_Split(REPLACE(REPLACE(REPLACE(REPLACE(p.Measure,'<',''),'>',''),'&lt;',''),'&gt;',''),';') AS s
    WHERE   (p.MeasureType = 'a_l_imp'
             OR p.measuretype = 'SPG')
            AND (s.measure LIKE 'r%'
                 OR s.measure LIKE 'lv%')
    GROUP BY s.measure
                 
    SELECT  *
    INTO    #tmpimpressionsperlisting
    FROM    #AGSRP
    WHERE   ListingID LIKE 'r%'
            OR ListingID LIKE 'lv%'

    PRINT 'Finished loading the AG SRP Listing Impressions ' + CONVERT(VARCHAR(50),GETDATE(),101) + '  ' + CONVERT(VARCHAR(50),GETDATE(),108)
    
	--------------------------------------------
	--Get SRP Unique Visits for AG from old tagging
	--------------------------------------------
	SET @codesection = 'Get SRP Unique Visits'

    SELECT  p1.measure AS SID
           ,REPLACE(REPLACE(REPLACE(REPLACE(p.Measure,'<',''),'>',''),'&lt;',''),'&gt;','') AS imp
    INTO    #tmpAPTGSidImp
    FROM    Apartmentguide.dbo.ParsedData p1 WITH (NOLOCK)
    INNER JOIN Apartmentguide.dbo.ParsedData p WITH (NOLOCK)
            ON p1.parseid = p.parseid
    WHERE   p1.measuretype = 'WT.vt_sid'
            AND (p.measuretype = 'a_l_imp'
                 OR p.measuretype = 'SPG')
            AND (REPLACE(REPLACE(REPLACE(REPLACE(p.Measure,'<',''),'>',''),'&lt;',''),'&gt;','') LIKE '%r%'
                 OR REPLACE(REPLACE(REPLACE(REPLACE(p.Measure,'<',''),'>',''),'&lt;',''),'&gt;','') LIKE '%lv%');

    SELECT  ListingID = imp.Measure
           ,DisplayListingID = DBAUtility.dbo.fnDigitOnly(imp.Measure)
           ,SRPUniqueVisitAG = COUNT(DISTINCT sid)
    INTO    #VisitListingImpressions
    FROM    #tmpAPTGSidImp
    CROSS APPLY DBAUtility.dbo.fn_Split(imp,';') AS imp
    WHERE   /* ISNUMERIC(imp.Measure) = 1
			AND*/
            CHARINDEX('a',imp.measure) = 0
            AND CHARINDEX('b',imp.measure) = 0
            AND CHARINDEX('c',imp.measure) = 0
            AND CHARINDEX('d',imp.measure) = 0
            AND CHARINDEX('e',imp.measure) = 0
            AND CHARINDEX('f',imp.measure) = 0
    GROUP BY imp.Measure
           ,DBAUtility.dbo.fnDigitOnly(imp.Measure);

    PRINT 'Finished loading SRP Unique Visits ' + CONVERT(VARCHAR(50),GETDATE(),101) + '  ' + CONVERT(VARCHAR(50),GETDATE(),108)
	
	--------------------------------------------------------------------------------
	--Dump the records into the temp working table
	--------------------------------------------------------------------------------
    SET @codesection = 'Insert records to the working table'

	INSERT INTO #tmpworkingtable
		(
        YMDID 
       ,YearMonth 
       ,StatusIDAG 
       ,StatusIDRent        
       ,DisplayListingID    
       ,ListingID 
	   ,PropertyIDAG 
       ,PropertyIDRent      
       ,IsRentals
	   ,IsRentalHouses
       ,IsLovely 
       ,IsRentSmallProp 
       ,ShowPricing 
       ,LowPrice 
       ,HighPrice 
       ,ActiveAmenities 
       ,ActiveFloorPlans 
       ,ActivePhotos 	   
       ,UniqueVisitsAG 
       ,UniqueVisitsRent 
       ,UniqueVisitsMobileAG 
       ,UniqueVisitsMobileRent 
       ,ViewsListingPageWebAG 
       ,ViewsListingPageWebRent 
       ,ViewsListingPageMobileAG 
       ,ViewsListingPageMobileRent 
       ,SRPListingImprAG 
       ,SRPListingImprRent 
       ,SRPUniqueVisitAG 
       ,SRPUniqueVisitRent 
       ,InternetConnectedCalls 
       ,InternetMissedCalls 
       ,MobileConnectedCalls 
       ,MobileMissedCalls 
       ,EmailLeadsAG 
       ,MobileEmailLeadsAG 
       ,IphoneEmailLeadsAG 
       ,AndroidEmailLeadsAG 
       ,IPadEmailLeadsAG 
       ,TabletEmailLeadsAG 
       ,KindleEmailLeadsAG 
       ,EmailLeadsRent 
       ,MobileEmailLeadsRent 
       ,IphoneEmailLeadsRent 
       ,AndroidEmailLeadsRent 
       ,IPadEmailLeadsRent 
       ,TabletEmailLeadsRent 
       ,KindleEmailLeadsRent
	   ,EmailLeadsRentals
	   ,MobileEmailLeadsRentals 
	   ,AndroidEmailLeadsRentals
	   ,IphoneEmailLeadsRentals 	   
	   )
            SELECT  rp.YMDID
                   ,@YearMonth										AS YearMonth
				   ,ISNULL(rp.StatusIDAG,0)							AS StatusIDAG
				   ,ISNULL(rp.StatusIDRent,0)						AS StatusIDRent
				   ,rp.DisplayListingID
                   ,rp.ListingID
				   ,rp.PropertyIDAG
				   ,rp.PropertyIDRent
                   ,rp.IsRentals
				   ,rp.IsRentalHouses
                   ,rp.IsLovely
				   ,rp.IsRentSmallProp
                   ,rp.ShowPricing
                   ,rp.LowPrice		
                   ,rp.HighPrice	
				   ,rp.ActiveAmenities
				   ,rp.ActiveFloorPlans
                   ,rp.ActivePhotos
					   -----------------------------------------
					   --Web Metrics (Old and Tealium)
					   -----------------------------------------
                   ,CAST(ISNULL(v.UniqueVisitsAG,0) AS INT)	+ CAST(ISNULL(tl.UniqueVisitsAG,0) AS INT)				AS UniqueVisitsAG
				   ,CAST(ISNULL(tl.UniqueVisitsRent,0) AS INT)														AS UniqueVisitsRent
                   ,CAST(ISNULL(wpv.NumOfVisits,0) AS INT) + CAST(ISNULL(tl.UniqueVisitMobileAG,0) AS INT)			AS UniqueVisitsMobileAG
				   ,CAST(ISNULL(tl.UniqueVisitMobileRent,0) AS INT)													AS UniqueVisitMobileRent
                   ,ISNULL(p.ViewsListingPageWebAG,0) + CAST(ISNULL(tl.ViewsListingPageWebAG,0) AS INT)				AS ViewsListingPageWebAG
				   ,CAST(ISNULL(tl.ViewsListingPageWebRent,0) AS INT)												AS ViewsListingPageWebRent
                   ,CAST(ISNULL(wpv.Pageviews,0) AS INT) + CAST(ISNULL(tl.ViewsListingPageMobileAG,0) AS INT)		AS ViewsListingPageMobileAG
				   ,CAST(ISNULL(tl.ViewsListingPageMobileRent,0) AS INT)											AS ViewsListingPageMobileRent
                   ,CAST(ISNULL(imp.SRPListingImprAG,0) AS INT) + CAST(ISNULL(tp.SRPListingImprAG,0) AS INT)		AS SRPListingImprAG
				   ,CAST(ISNULL(tp.SRPListingImprRent,0) AS INT)													AS SRPListingImprRent
                   ,CAST(ISNULL(vli.SRPUniqueVisitAG,0) AS INT) + CAST(ISNULL(tp.SRPUniqueVisitAG,0) AS INT)		AS SRPUniqueVisitAG
				   ,CAST(ISNULL(tp.SRPUniqueVisitRent,0) AS INT)													AS SRPUniqueVisitRent
					   -----------------------------------------
					   --Leads 
					   -----------------------------------------
                   ,CASE WHEN rp.IsRentSmallProp = 1 
								THEN CAST(ISNULL(rph.InternetConnectedCalls,0) AS INT)
								ELSE 0
								END																					AS InternetConnectedCalls	
                   ,CASE WHEN rp.IsRentSmallProp = 1 THEN CAST(ISNULL(rph.InternetMissedCalls,0) AS INT)
								ELSE 0
								END																					AS InternetMissedCalls									
                  ,CASE WHEN rp.IsRentSmallProp = 1 
								THEN CAST(ISNULL(rph.MobileConnectedCalls,0) AS INT)
								ELSE 0
								END																					AS MobileConnectedCalls	
                   ,CASE WHEN rp.IsRentSmallProp = 1 THEN CAST(ISNULL(rph.MobileMissedCalls,0) AS INT)
								ELSE 0
								END																					AS MobileMissedCalls	
                   ,CASE WHEN rp.IsLovely = 1 THEN CAST(ISNULL(lvd.AGEmailLeads,0) AS INT)
						ELSE CAST(ISNULL(ld.AGEmailLeads,0) AS INT)
						END																							AS EmailLeadsAG
                   ,CASE WHEN rp.IsLovely = 1 THEN CAST(ISNULL(lvd.AGMobileEmailLeads,0) AS INT)
						ELSE CAST(ISNULL(ld.AGMobileEmailLeads,0) AS INT)
						END																							AS MobileEmailLeadsAG
                   ,CASE WHEN rp.IsLovely = 1 THEN CAST(ISNULL(lvd.AGiPhoneEmailLeads,0) AS INT)
						ELSE CAST(ISNULL(ld.AGiPhoneEmailLeads,0) AS INT)													
						END																							AS iPhoneEmailLeadsAG
                   ,CASE WHEN rp.IsLovely = 1 THEN CAST(ISNULL(lvd.AGAndroidEmailLeads,0) AS INT)
						ELSE CAST(ISNULL(ld.AGAndroidEmailLeads,0) AS INT)
						END																							AS AndroidEmailLeadsAG
                   ,CASE WHEN rp.IsLovely =1 THEN CAST(ISNULL(lvd.AGiPadEmailLeads,0) AS INT)
						ELSE CAST(ISNULL(ld.AGiPadEmailLeads,0) AS INT)		
						END																							AS iPadEmailLeadsAG
                   ,CAST(ISNULL(ld.AGTabletEmailLeads,0) AS INT)													AS TabletEmailLeadsAG
                   ,CAST(ISNULL(ld.AGKindleEmailLeads,0) AS INT)													AS KindleEmailLeadsAG
                   ,CASE WHEN rp.IsRentSmallProp = 1 THEN CAST(ISNULL(rem.RentEmailLeads,0) AS INT)
						 WHEN rp.IsLovely = 1 THEN CAST(ISNULL(lvd.RentEmailLeads,0) AS INT)
						 ELSE CAST(ISNULL(ld.RentEmailLeads,0) AS INT)
						 END																						AS EmailLeadsRent
                   ,CAST(ISNULL(ld.RentMobileEmailLeads,0) AS INT)													AS MobileEmailLeadsRent
				   ,CASE WHEN rp.IsRentSmallProp = 1 THEN CAST(ISNULL(rem.iPhoneEmailLeads,0) AS INT)
						 WHEN rp.IsLovely = 1 THEN CAST(ISNULL(lvd.RentiPhoneEmailLeads,0) AS INT)
						 ELSE CAST(ISNULL(ld.RentiPhoneEmailLeads,0) AS INT)													
						 END																						AS iPhoneEmailLeadsRent
                   ,CASE WHEN rp.IsRentSmallProp = 1 THEN CAST(ISNULL(rem.AndroidEmailLeads,0) AS INT)
					     WHEN rp.IsLovely = 1 THEN CAST(ISNULL(lvd.RentAndroidEmailLeads,0) AS INT)
						 ELSE CAST(ISNULL(ld.RentAndroidEmailLeads,0) AS INT)													
						 END																						AS AndroidEmailLeadsRent
                   ,CASE WHEN rp.IsRentSmallProp = 1 THEN CAST(ISNULL(rem.iPadEmailLeads,0) AS INT)
						 WHEN rp.IsLovely = 1 THEN CAST(ISNULL(lvd.RentiPadEmailLeads,0) AS INT)
						 ELSE CAST(ISNULL(ld.RentiPadEmailLeads,0) AS INT)
						 END																						AS iPadEmailLeadsRent
                   ,CAST(ISNULL(ld.RentTabletEmailLeads,0) AS INT)													AS TabletEmailLeadsRent
                   ,CAST(ISNULL(ld.RentKindleEmailLeads,0) AS INT)													AS KindleEmailLeadsRent		
				   ,CAST(ISNULL(lvd.EmailLeadsRentals,0) AS INT)													AS EmailLeadsRentals
				   ,CAST(ISNULL(lvd.MobileEmailLeadsRentals,0)	AS INT)												AS MobileEmailLeadsRentals
				   ,CAST(ISNULL(lvd.AndroidEmailLeadsRentals,0) AS INT)												AS AndroidEmailLeadsRentals
				   ,CAST(ISNULL(lvd.IphoneEmailLeadsRentals,0)	AS INT)												AS IphoneEmailLeadsRentals				   	   				  				  				  				   				   				   
            FROM    RentPath.Dimension.SmallPropertyListings AS rp
            LEFT OUTER JOIN #tmpviewslistingpage AS p
                    ON rp.DisplayListingID = p.ListingID
    -------------------------------------------------------
    -- Mart web listing pageviews and visits for old AG mobile tagging
    -------------------------------------------------------
            LEFT OUTER JOIN #tmppageviewsvisits AS wpv
                    ON rp.DisplayListingID = wpv.listingid
                       AND @datetouseymdid = wpv.ymdid
    -------------------------------------------------------
    -- Mart AG Visits from old tagging
    -------------------------------------------------------
            LEFT OUTER JOIN #tmpwebtrendssitedata AS v
                    ON rp.DisplayListingID= v.ListingID
	-------------------------------------------------------
	-- Mart SRP Listing Impression for AG from old tagging
	-------------------------------------------------------
            LEFT OUTER JOIN #tmpimpressionsperlisting AS imp
                    ON rp.DisplayListingID = imp.ListingID
    -------------------------------------------------------
    -- Mart SRP Unique Visits for AG from old tagging, which are unique visits that saw a listing
    -------------------------------------------------------
            LEFT OUTER JOIN #VisitListingImpressions AS vli
                    ON rp.DisplayListingID = vli.DisplayListingID
    -------------------------------------------------------
    -- Mart Views and Visits from Tealium
    -------------------------------------------------------
	LEFT OUTER JOIN 
					(
					SELECT   listingid						
							,SUM(CASE WHEN profileid = 84 THEN ViewsListingPageWeb
										ELSE 0
								END) AS ViewsListingPageWebAG
							,SUM(CASE WHEN profileid = 84 THEN ViewsListingPageMobile
										ELSE 0
								END) AS ViewsListingPageMobileAG
							,SUM(CASE WHEN profileid = 86 THEN ViewsListingPageWeb
										ELSE 0
								END) AS ViewsListingPageWebRent
							,SUM(CASE WHEN profileid = 86 THEN ViewsListingPageMobile
										ELSE 0
								END) AS ViewsListingPageMobileRent
							,SUM(CASE WHEN profileid = 84 THEN UniqueVisits
										ELSE 0
								END) AS UniqueVisitsAG
							,SUM(CASE WHEN profileid = 84 THEN UniqueVisitsMobile
										ELSE 0
								END) AS UniqueVisitMobileAG
							,SUM(CASE WHEN profileid = 86 THEN UniqueVisits
										ELSE 0
								END) AS UniqueVisitsRent
							,SUM(CASE WHEN profileid = 86 THEN UniqueVisitsMobile
										ELSE 0
								END) AS UniqueVisitMobileRent
					FROM     #TealiumViewsListingPage
					GROUP BY listingid
					) AS tl
  ON rp.DisplayListingID = tl.ListingID
-------------------------------------------------------
    -- Mart Impressions from Tealium
-------------------------------------------------------
  LEFT OUTER JOIN 
				  (
				  SELECT    ListingID
						   ,SUM(CASE WHEN profileid = 84 THEN SRPListingImpr
									 ELSE 0
								END) AS SRPListingImprAG
						   ,SUM(CASE WHEN profileid = 86 THEN SRPListingImpr
									 ELSE 0
								END) AS SRPListingImprRent
						   ,SUM(CASE WHEN profileid = 84 THEN SRPUniqueVisit
									 ELSE 0
								END) AS SRPUniqueVisitAG
						   ,SUM(CASE WHEN profileid = 86 THEN SRPUniqueVisit
									 ELSE 0
								END) AS SRPUniqueVisitRent
				  FROM      #Impressions	
				  GROUP BY ListingID
				  )	AS tp
	ON rp.DisplayListingID = tp.ListingID					                                   
		
    -------------------------------------------------------
    -- Mart Rentals Phone Leads
	-- Same phone number is displayed on all sites so can't tell source of phone lead
	-- No longer doing this as of 6/1/15 because Blane explained these are already being counted in Rentals and since we can't determine source site, we can't count them here also
    -------------------------------------------------------
    -------------------------------------------------------
    -- Mart Rentals Email Leads
    -------------------------------------------------------
            LEFT OUTER JOIN (
                             SELECT ListingID = spl.ListingID
							       ,dl.SiteID
                                   ,AGEmailLeads = SUM(CASE WHEN SourceSystem = 'NOS-apartmentguide' THEN 1					--This is a good value
                                                            ELSE 0
                                                       END)
                                   ,AGiPhoneEmailLeads = SUM(CASE WHEN SourceSystem = 'NOS-iPhoneAG' THEN 1					--This is a good value
                                                                ELSE 0
                                                           END)
                                   ,AGAndroidEmailLeads = SUM(CASE WHEN SourceSystem = 'NOS-AndroidAG' THEN 1				--This is a good value
                                                                 ELSE 0
                                                            END)
                                   ,AGiPadEmailLeads = SUM(CASE WHEN SourceSystem = 'NOS-iPadAG' THEN 1						--This is a good value
                                                              ELSE 0
                                                         END)
                                   ,AGMobileEmailLeads = SUM(CASE WHEN SourceSystem = 'NOS-m.apartmentguide' THEN 1			--This is a good value
                                                                  ELSE 0
                                                             END)
                                   ,AGTabletEmailLeads = SUM(CASE WHEN SourceSystem = 'NOS-ANDROIDTABapartmentguide' THEN 1	-- this value is not set up.  Change value when it is added, to the appropriate value to check for.
                                                                  ELSE 0
                                                             END)
                                   ,AGKindleEmailLeads = SUM(CASE WHEN SourceSystem = 'NOS-apartmentguideKindleAG' THEN 1	-- this value is not set up.  Change value when it is added, to the appropriate value to check for.
                                                                  ELSE 0
                                                             END)
                                   ,RentEmailLeads = SUM(CASE WHEN SourceSystem = 'NOS-rent' THEN 1							--This is a good value
                                                                  ELSE 0
                                                             END)
								   ,RentiPhoneEmailLeads = SUM(CASE WHEN SourceSystem = 'NOS-iPhoneRent' THEN 1				--This is a good value
                                                              ELSE 0
                                                         END)
                                   ,RentAndroidEmailLeads = SUM(CASE WHEN SourceSystem = 'NOS-AndroidRent' THEN 1			--This is a good value
                                                              ELSE 0
                                                         END)
                                   ,RentiPadEmailLeads = SUM(CASE WHEN SourceSystem = 'NOS-iPadRent' THEN 1					--This is a good value
                                                            ELSE 0
                                                       END)
                                   ,RentMobileEmailLeads = SUM(CASE WHEN SourceSystem = 'NOS-m.rent' THEN 1					-- this value is not set up.  Change value when it is added, to the appropriate value to check for.
                                                                ELSE 0
                                                           END)
                                   ,RentTabletEmailLeads = SUM(CASE WHEN SourceSystem = 'NOS-ANDROIDTABrent' THEN 1			-- this value is not set up.  Change value when it is added, to the appropriate value to check for.
                                                                ELSE 0
                                                           END)
                                   ,RentKindleEmailLeads = SUM(CASE WHEN SourceSystem = 'NOS-KindleRent' THEN 1				-- this value is not set up.  Change value when it is added, to the appropriate value to check for.
                                                                  ELSE 0
                                                             END)
                             FROM   Rentals.Fact.EmailLeads AS el 
                             JOIN   Rentals.Dimension.Listings AS dl 
                                    ON dl.ListingID = el.ListingID
                                       --AND dl.ListingStatus = 'Active'
                             JOIN   RentPath.Dimension.SmallPropertyListings AS spl 
                                    ON dl.ListingNumber = spl.ListingID
									AND dl.SiteID = CASE WHEN spl.IsRentals = 1 THEN 1
														 WHEN spl.IsRentalHouses = 1 THEN 2
														 END
                             WHERE  el.YMDID = @datetouseymdid
                             GROUP BY spl.ListingID
							 ,dl.SiteID
                            ) AS ld
                    ON rp.ListingID = ld.ListingID
					AND ld.SiteID = CASE WHEN rp.IsRentals = 1 THEN 1
										 WHEN rp.IsRentalHouses = 1 THEN 2 
										 END
	-------------------------------------------------------
    -- Mart Lovely Email Leads
    -------------------------------------------------------
            LEFT OUTER JOIN (
							SELECT DisplayListingID
                                   ,AGEmailLeads = SUM(CASE WHEN Status =1 AND Source = 'apartmentguide' THEN 1 ELSE 0 END)
								   ,RentEmailLeads = SUM(CASE WHEN Status =1 AND Source = 'rent' THEN 1 ELSE 0 END)
								   ,RentAndroidEmailLeads = SUM(CASE WHEN Status =1  AND Source = 'AndroidRent' THEN 1 ELSE 0 END)
								   ,RentiPadEmailLeads = SUM(CASE WHEN Status =1 AND Source = 'iPadRent' THEN 1 ELSE 0 END)
								   ,RentiPhoneEmailLeads = SUM(CASE WHEN Status =1 AND Source = 'iPhoneRent' THEN 1 ELSE 0 END)
								   ,AGMobileEmailLeads = SUM(CASE WHEN Status = 1 AND Source = 'm.apartmentguide' THEN 1 ELSE 0 END)
								   ,AGiPhoneEmailLeads =  SUM(CASE WHEN Status = 1 AND Source = 'iPhoneAG' THEN 1 ELSE 0 END)
								   ,AGAndroidEmailLeads = SUM(CASE WHEN Status = 1 AND Source = 'AndroidAG' THEN 1 ELSE 0 END)
								   ,AGiPadEmailLeads = SUM(CASE WHEN Status = 1 AND Source = 'iPadAG' THEN 1 ELSE 0 END)
								   ,EmailLeadsRentals = SUM(CASE WHEN Status =1 AND Source = 'rentals' THEN 1 ELSE 0 END)
								   ,MobileEmailLeadsRentals = SUM(CASE WHEN Status =1 AND Source = 'm.rentals' THEN 1 ELSE 0 END)
								   ,AndroidEmailLeadsRentals = SUM(CASE WHEN Status =1  AND Source = 'AndroidRT' THEN 1 ELSE 0 END)
								   ,IphoneEmailLeadsRentals = SUM(CASE WHEN Status =1 AND Source = 'iPhoneRentals' THEN 1 ELSE 0 END)
							 FROM   Rentpath.Fact.EmailsLovelySyndication
							 WHERE YMDID = @datetouseYMDID
							 GROUP BY DisplayListingID
                            ) AS lvd
                    ON rp.DisplayListingID = lvd.DisplayListingID
					AND rp.IsLovely = 1
	-------------------------------------------------------
    -- Mart Rentcom Small Property Phone Leads
    -------------------------------------------------------
		LEFT OUTER JOIN
						(
						SELECT RentPropertyID
						,SUM(CASE WHEN CallStatus = 1  AND CallType IN ('altreg','default','oneweb')THEN 1
                                 ELSE 0
                            END) AS InternetConnectedCalls
                       ,SUM(CASE WHEN CallStatus <> 1  AND CallType IN ('altreg','default','oneweb')THEN 1
                                 ELSE 0
                            END) AS InternetMissedCalls
                       ,SUM(CASE WHEN CallStatus = 1  AND CallType = 'mobile' THEN 1
                                 ELSE 0
                            END) AS MobileConnectedCalls
                       ,SUM(CASE WHEN CallStatus <> 1  AND CallType = 'mobile' THEN 1
                                 ELSE 0
                            END) AS MobileMissedCalls
					   FROM     Rentcom.Fact.CallsRentCom
                       WHERE    YMDID = @datetouseYMDID
                       GROUP BY RentPropertyID	
					   ) AS rph
		ON rp.PropertyIDRent = rph.RentPropertyID
		AND rp.IsRentSmallProp = 1
	-------------------------------------------------------
    -- Mart Rentcom Small Property Email Leads
    -------------------------------------------------------
		LEFT OUTER JOIN
						(
						SELECT  ListingID
						,RentEmailLeads = SUM(CASE WHEN source IN ('hotlead','RENT') AND Status = 1 THEN 1 ELSE 0 END)
						,TruliaEmailLeads = SUM(CASE WHEN source = 'trulia_hl' AND Status = 1 THEN 1 ELSE 0 END) 
						,AndroidEmailLeads = SUM(CASE WHEN Source = 'ANDROIDRENT' AND Status = 1 THEN 1 ELSE 0 END)
						,iPadEmailLeads = SUM(CASE WHEN Source = 'IPADRENT' AND Status = 1 THEN 1 ELSE 0 END)
						,iPhoneEmailLeads = SUM(CASE WHEN Source = 'IPHONERENT' AND Status = 1 THEN 1 ELSE 0 END)                                                         
						FROM    Rentcom.Fact.EmailsRentCom
						WHERE    YMDID = @datetouseYMDID
						GROUP BY ListingID	
					   ) AS rem
		ON rp.ListingID = rem.ListingID
		AND rp.IsRentSmallProp = 1
		

    PRINT 'Finished loading tmpworkingtable ' + CONVERT(VARCHAR(50),GETDATE(),101) + '  ' + CONVERT(VARCHAR(50),GETDATE(),108)

	-------------------------------------------------------------
	--Now mart the data after deleting from current table if any records exist in the new data
	-------------------------------------------------------------
    SET @codesection = 'Move the data to the live marting tables'

    BEGIN TRY
		
        IF EXISTS ( SELECT  *
                    FROM    #tmpworkingtable )				--check to make sure new data exists before we get rid of old data
            BEGIN
                BEGIN TRANSACTION
					
                SET @codesection = 'Delete appropriate data from live table'
					--Delete appropriate data from the live table
                DELETE  FROM Mart.SmallPropertyListings
                WHERE   YMDID = @datetouseymdid

                SET @codesection = 'Place the new data into the live table'
					--Now replace it with new data

                INSERT INTO RentPath.Mart.SmallPropertyListings
                        (YMDID
                        ,YearMonth
                        ,StatusIDAG
                        ,StatusIDRent
						,DisplayListingID
                        ,ListingID
                        ,PropertyIDAG
                        ,PropertyIDRent
                        ,IsRentals
						,IsRentalHouses
                        ,IsLovely
                        ,IsRentSmallProp
                        ,ShowPricing
                        ,LowPrice
                        ,HighPrice
                        ,ActiveAmenities
                        ,ActiveFloorPlans
                        ,ActivePhotos
                        ,UniqueVisitsAG
                        ,UniqueVisitsRent
                        ,UniqueVisitsMobileAG
                        ,UniqueVisitsMobileRent
                        ,ViewsListingPageWebAG
                        ,ViewsListingPageWebRent
                        ,ViewsListingPageMobileAG
                        ,ViewsListingPageMobileRent
                        ,SRPListingImprAG
                        ,SRPListingImprRent
                        ,SRPUniqueVisitAG
                        ,SRPUniqueVisitRent
                        ,InternetConnectedCalls
                        ,InternetMissedCalls
                        ,MobileConnectedCalls
                        ,MobileMissedCalls
                        ,EmailLeadsAG
                        ,MobileEmailLeadsAG
                        ,IphoneEmailLeadsAG
                        ,AndroidEmailLeadsAG
                        ,IPadEmailLeadsAG
                        ,TabletEmailLeadsAG
                        ,KindleEmailLeadsAG
                        ,EmailLeadsRent
                        ,MobileEmailLeadsRent
                        ,IphoneEmailLeadsRent
                        ,AndroidEmailLeadsRent
                        ,IPadEmailLeadsRent
                        ,TabletEmailLeadsRent
                        ,KindleEmailLeadsRent
						,EmailLeadsRentals
						,MobileEmailLeadsRentals
						,AndroidEmailLeadsRentals
						,IphoneEmailLeadsRentals																				
						)               
                        SELECT  @datetouseymdid		AS YMDID
                               ,@yearmonth			AS YearMonth
                               ,StatusIDAG
                               ,StatusIDRent
							   ,DisplayListingID
                               ,ListingID
							   ,PropertyIDAG
							   ,PropertyIDRent
                               ,IsRentals
							   ,IsRentalHouses
                               ,IsLovely
                               ,IsRentSmallProp
                               ,ShowPricing
                               ,LowPrice
                               ,HighPrice
							   ,ActiveAmenities
							   ,ActiveFloorPlans
							   ,ActivePhotos
                               ,UniqueVisitsAG
                               ,UniqueVisitsRent
                               ,UniqueVisitsMobileAG
                               ,UniqueVisitsMobileRent
                               ,ViewsListingPageWebAG
                               ,ViewsListingPageWebRent
                               ,ViewsListingPageMobileAG
                               ,ViewsListingPageMobileRent
                               ,SRPListingImprAG
                               ,SRPListingImprRent
                               ,SRPUniqueVisitAG
                               ,SRPUniqueVisitRent
                               ,InternetConnectedCalls
                               ,InternetMissedCalls
                               ,MobileConnectedCalls
                               ,MobileMissedCalls
                               ,EmailLeadsAG
                               ,MobileEmailLeadsAG
                               ,IphoneEmailLeadsAG
                               ,AndroidEmailLeadsAG
                               ,IPadEmailLeadsAG
                               ,TabletEmailLeadsAG
                               ,KindleEmailLeadsAG
                               ,EmailLeadsRent
                               ,MobileEmailLeadsRent
                               ,IphoneEmailLeadsRent
                               ,AndroidEmailLeadsRent
                               ,IPadEmailLeadsRent
                               ,TabletEmailLeadsRent
                               ,KindleEmailLeadsRent
							   ,EmailLeadsRentals
							   ,MobileEmailLeadsRentals
							   ,AndroidEmailLeadsRentals
							   ,IphoneEmailLeadsRentals		
                        FROM    #tmpworkingtable

                COMMIT TRANSACTION
            END
	
    END TRY
    BEGIN CATCH
        SELECT  @ErrorMessage = ERROR_MESSAGE()
               ,@ErrorNumber = ERROR_NUMBER()
               ,@ErrorSeverity = ERROR_SEVERITY()
               ,@ErrorState = ERROR_STATE()
               ,@ErrorLine = ERROR_LINE()
               ,@ErrorProcedure = ISNULL(ERROR_PROCEDURE(),'-');

        IF @@trancount > 0					--if a transaction was started (will = 0 if no transaction was started)
            ROLLBACK TRANSACTION


        SET @ErrorMessage = 'Attempting to load SmallPropertyListings for Rentals/Lovely Syndication to AG. SPROC is [Mart].[pr_SmallPropertyListings].  Error in code section - ' + @codesection + '   Error - ' + @ErrorMessage

        RAISERROR(@ErrorMessage,16,1) WITH log;

        RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.

    END CATCH
	
    PRINT 'Finished saving data to Mart.SmallPropertyListings table  ' + CONVERT(VARCHAR(50),GETDATE(),101) + '  ' + CONVERT(VARCHAR(50),GETDATE(),108)

	-------------------------------------------------------
	--Update StatusIDAG and StatusIDRent based on any leads for the day
	-------------------------------------------------------
	UPDATE up
	SET StatusIDAG	= CASE WHEN d.AGTotalEmailLeads > 0 THEN 1 ELSE up.StatusIDAG END
	,StatusIDRent	= CASE WHEN d.RentTotalEmailLeads > 0 THEN 1 ELSE up.StatusIDRent END
    FROM    RentPath.Mart.SmallPropertyListings AS up
    JOIN    (
             SELECT spl.DisplayListingID
                   ,spl.ListingID
                   ,spl.YMDID
                   ,SUM(spl.AGTotalEmailLeads)		AS AGTotalEmailLeads
                   ,SUM(spl.RentTotalEmailLeads)	AS RentTotalEmailLeads
             FROM   RentPath.Mart.SmallPropertyListings AS spl
             WHERE  spl.YMDID = @datetouseymdid
             GROUP BY spl.DisplayListingID
                   ,spl.ListingID
                   ,spl.YMDID
             HAVING SUM(spl.AGTotalEmailLeads) > 0
                    OR SUM(spl.RentTotalEmailLeads) > 0
            ) AS d
            ON up.DisplayListingID = d.DisplayListingID
               AND up.ListingID = d.ListingID
               AND up.YMDID = d.YMDID

END

ELSE
	
	BEGIN		
            DECLARE @StringVariable NVARCHAR(100);
            SET @StringVariable = N'TealiumParsedPivot or AG Parsed Data YMDID does not match marting YMDID.';

            RAISERROR (@StringVariable, -- Message text.
		   16, -- Severity,
		   1 -- State,
			)
			RETURN 0; 

        END
        
    SET NOCOUNT OFF;
END;







GO
/****** Object:  StoredProcedure [Mart].[pr_SmallPropertyListingsBackMart]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*******************************************************************************************************************************************
*
* Name:	[Mart].[pr_SmallPropertyListingsBackMart]
*
* Desc:	This SPROC pulls down the data for Rentals/Lovely Syndication to AG and Rent and marts it by YMDID.
*
* Test:	EXEC Mart.pr_SmallPropertyListingsBackMart 20160716
*	SELECT * FROM RentPath.Mart.SmallPropertyListings WHERE YMDID = 20150227
*
* Notes:
*		Note that the Rentals and Lovely property records that come in are on the syndication,
*			so there is no need to check either for status value.
*		Each record in Staging table gets a record here, whether they have leads or not.
*		Since all appear on syndication, and a record is created in Mart for each listing, then
*			this is essentially a snapshot (marting) of the Staging table showing who was syndicated that day.
*
* Hist:	01	08/01/2016	Clinton Woody uses arcived parsed data and builds datasets- Ticket 23762

*******************************************************************************************************************************************/
CREATE PROCEDURE [Mart].[pr_SmallPropertyListingsBackMart] (@datetorun INT)
AS 
BEGIN

    SET NOCOUNT ON;
	
	IF EXISTS(SELECT TOP 1 * FROM mart.SmallPropertyListings WHERE YMDID=@datetorun)
	BEGIN
		PRINT 'This Date Already Run!!! If you want to run this proc delete the data for this date';
		GOTO doneit;
	END
    
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    DECLARE @TrackDate DATETIME
       ,@LengthInSeconds INT
       ,@DatabaseName VARCHAR(128)
	   ,@strsql VARCHAR(MAX)
	   ,@MeasuretypeStr VARCHAR(MAX)
	   ,@MeasurePivotStr varchar(max)
	   ,@MeasurePivotStr2 varchar(max);
                
    SET @TrackDate = GETDATE()
    SET @LengthInSeconds = 0
    SET @DatabaseName = DB_NAME()        
		
    EXEC DBAUtility.dbo.pr_Logging_StoredProcsNoTemp 
        @DatabaseName = @DatabaseName
       , -- varchar(128)
        @ProcName = 'Mart.pr_SmallPropertyListingsBackMart'
       , -- varchar(128)
        @StepName = 'Execute Procedure'
       , -- varchar(128)
        @VariableStates = ''
       , -- varchar(500)
        @LengthInSeconds = @LengthInSeconds
       , -- int
        @Comments = 'Execute Procedure'; -- varchar(500)

	/* Testing 
	DECLARE @datetorun int
	SET @datetorun = NULL--20150306
	*/

	---------------------------------------------------
	--Declare and set variables
	---------------------------------------------------
    DECLARE @ErrorMessage NVARCHAR(4000)
       ,@ErrorNumber INT
       ,@ErrorSeverity INT
       ,@ErrorState INT
       ,@ErrorLine INT
       ,@ErrorProcedure NVARCHAR(200)
		
    DECLARE @codesection VARCHAR(300)

    DECLARE @sqlcmd VARCHAR(8000)
    DECLARE @sqlcmd2 NVARCHAR(4000)
	--DECLARE @datetorun INT=20160716

    DECLARE @yearmonth INT
    DECLARE @datetouse DATETIME
    DECLARE @datetouseymdid INT
    DECLARE @periodbegymdid INT
    DECLARE @periodendymdid INT
    DECLARE @yesterdayymdid INT

    DECLARE @servername VARCHAR(200)
    DECLARE @msgbody VARCHAR(8000)
    DECLARE @msgsubject VARCHAR(8000)
    DECLARE @RecipientsText VARCHAR(8000)

    DECLARE @newwebsitevalues VARCHAR(4000)


	--Note:  input parameter @datetorun should be yesterday's date (only have data up through yesterday).  If null, will take today's date and subtract a day to get the run date to use.
    SET @datetouse = ISNULL(CONVERT(DATETIME,CONVERT(VARCHAR(10),@datetorun)),CONVERT(DATETIME,CONVERT(VARCHAR(10),DATEADD(dd,-1,GETDATE()),101)))		-- if null, set to today
    SET @datetouseymdid = CONVERT(INT,CONVERT(VARCHAR(10),@datetouse,112))											-- Get the date as integer	
	
	--SET @datetouse = '08/19/2015'
	--SET @datetouseymdid = 20150819		
	
    SET @periodbegymdid = (
                           SELECT   MonthStartYMDID
                           FROM     DBAUtility.Dimension.Dates
                           WHERE    YMDID = @datetouseymdid
                          )
    SET @periodendymdid = (
                           SELECT   MonthEndYMDID
                           FROM     DBAUtility.Dimension.Dates
                           WHERE    YMDID = @datetouseymdid
                          )
    SET @yearmonth = CONVERT(INT,@periodbegymdid * .01)
	PRINT @yearmonth;

    SET @yesterdayymdid = CONVERT(INT,CONVERT(VARCHAR(10),DATEADD(dd,-1,GETDATE()),112))
	
    PRINT '@datetouse = ' + CONVERT(VARCHAR(30),@datetouse)
    PRINT '@datetouseymdid = ' + CONVERT(VARCHAR(30),@datetouseymdid)
    PRINT '@yearmonth = ' + CONVERT(VARCHAR(30),@yearmonth)
    PRINT '@periodbegymdid = ' + CONVERT(VARCHAR(30),@periodbegymdid)
    PRINT '@periodendymdid = ' + CONVERT(VARCHAR(30),@periodendymdid)
    PRINT ' '
	
	----------------------------------------------------------------------
	--Make sure the data is available in AG ParsedData and Tealium ParsePivot for the date chosen
	----------------------------------------------------------------------      		
	BEGIN TRY
		DROP TABLE staging.TealiumParsedPivotBackMart
    END TRY
    BEGIN CATCH
    END CATCH
    
	BEGIN TRY
		DROP TABLE staging.parseddatabackmart
    END TRY
    BEGIN CATCH
    END CATCH

	BEGIN TRY
		DROP TABLE staging.rentpathparseddata
    END TRY
    BEGIN CATCH
    END CATCH

	BEGIN TRY
		DROP TABLE staging.agparseddata
    END TRY
    BEGIN CATCH
    END CATCH

	SELECT *
	INTO staging.parseddatabackmart
	FROM ArchivedStaging.dbo.ArchivedParsedData WITH (NOLOCK)
	WHERE ymdid=@datetouseymdid
	
	CREATE INDEX idx_profileid ON staging.parseddatabackmart  (profileid)

	DELETE FROM  staging.parseddatabackmart
	where ProfileID NOT IN (SELECT distinct profileid FROM staging.dbo.DimensionProfiles WHERE DestinationDatabase IN ('ApartmentGuide','RentPath','Autotagging')  );

	SELECT * 
	into staging.rentpathparseddata
	FROM  staging.parseddatabackmart
	where ProfileID IN (SELECT distinct profileid FROM staging.dbo.DimensionProfiles WHERE DestinationDatabase ='RentPath'  );

	SELECT * 
	into staging.agparseddata
	FROM staging.parseddatabackmart
	where ProfileID IN (SELECT distinct profileid FROM staging.dbo.DimensionProfiles WHERE DestinationDatabase ='ApartmentGuide'  );

		IF (SELECT OBJECT_ID(N'#tmpMeasures')) IS NOT NULL
			DROP TABLE #tmpMeasures

	------------------------------------------
	/*Set variables*/ 
	------------------------------------------
		SET @strsql = 'select ymdid,parseid,profileid,subprofileid,eventdate';

	-----------------------------------------
	--Grab web data into #tmpMeasures table
	-----------------------------------------
		SELECT  measuretype
			   ,CASE WHEN sortorder < 105 THEN ',[' + LTRIM(RTRIM(measuretype)) + ']'
					 ELSE '[' + LTRIM(RTRIM(measuretype)) + ']'
				END AS MeasuretypeStr
			   ,',[' + LTRIM(RTRIM(measuretype)) + ']=[' + LTRIM(RTRIM(measuretype)) + ']' AS MeasurePivotStr
			   ,CASE WHEN sortorder < 105 THEN ',[' + LTRIM(RTRIM(measuretype)) + ']'
					 ELSE '[' + LTRIM(RTRIM(measuretype)) + ']'
				END AS MeasurePivotStr2
			   ,SortOrder
		INTO    #tmpMeasures
		FROM    (
				 SELECT
						DISTINCT
						measuretype
					   ,CASE WHEN measuretype = 'action' THEN 94
							 WHEN measuretype = 'click' THEN 80
							 WHEN measuretype = 'campaign_id' THEN 93
							 WHEN measuretype = 'subprofile' THEN 100
							 WHEN measuretype = 'profile' THEN 105
-- added ef_id here, make the sort order just below the lower ones here
							 WHEN measuretype = 'ef_id' THEN 79
							 WHEN measuretype = 'entry_campaign_id' THEN 90
							 WHEN measuretype = 'visit' THEN 90
							 WHEN measuretype = 'page' THEN 99
							 WHEN measuretype = 'page-sub' THEN 98
							 WHEN measuretype = 'position' THEN 97
							 WHEN measuretype = 'selection' THEN 96
							 --WHEN measuretype = 'value' THEN 96
							 WHEN measuretype = 'listingid' THEN 95
							 WHEN measuretype = 'session_id' THEN 89
							 WHEN measuretype = 'referrer' THEN 26
							 WHEN measuretype = 'referring_domain' THEN 3
							 ELSE 0
						END AS SortOrder
				 FROM   staging.rentpathparseddata WITH (NOLOCK)
				 WHERE MeasureType NOT LIKE '%]%'
				) a;
--SELECT * FROM #tmpMeasures ORDER BY sortorder desc
-- drop table #tmpMeasures 
		DECLARE SQLCursor CURSOR
		FOR
		SELECT  MeasuretypeStr
			   ,MeasurePivotStr
			   ,MeasurePivotStr2 --,max(SortOrder) as SortOrder
		FROM    #tmpMeasures
		WHERE   CHARINDEX('-',measuretype) = 0
		GROUP BY measuretype
			   ,MeasuretypeStr
			   ,MeasurePivotStr
			   ,MeasurePivotStr2
		ORDER BY MAX(SortOrder) DESC
			   ,measuretype;
		OPEN SQLCursor;

		FETCH NEXT FROM SQLCursor INTO @MeasuretypeStr,@MeasurePivotStr,@MeasurePivotStr2;
		WHILE @@FETCH_STATUS = 0 
			BEGIN
				SET @strsql = @strsQL + @MeasurePivotStr;
				FETCH NEXT FROM SQLCursor INTO @MeasuretypeStr,@MeasurePivotStr,@MeasurePivotStr2;
			END

		SET @strsql = @strsql + ' into staging.TealiumParsedPivotBackMart FROM (
							SELECT 
							parseid,profileid,ymdid,eventdate
							,measuretype
							,measure
							,subprofileid
							FROM 
							staging.rentpathparseddata WITH (NOLOCK)';

		SET @strsql = @strsql + ') X PIVOT ( MAX(X.Measure) FOR X.MeasureType IN (';

		CLOSE SQLCursor;
		OPEN SQLCursor;
		FETCH NEXT FROM SQLCursor INTO @MeasureTypeStr,@MeasurePivotStr,@MeasurePivotStr2
		WHILE @@FETCH_STATUS = 0 
			BEGIN
				SET @strsql = @strsQL + @MeasurePivotStr2;
				FETCH NEXT FROM SQLCursor INTO @MeasuretypeStr,@MeasurePivotStr,@MeasurePivotStr2;
			END

		CLOSE SQLCursor;
		DEALLOCATE SQLCursor;

		SET @strsql = @strsql + ') ) X';
	--PRINT @strsql;
		EXEC(@StrSQL);

   	----------------------------------------------------------------------
	-- Drop all temporary working tables
	----------------------------------------------------------------------

    SET @codesection = 'Drop temp working tables'

    BEGIN TRY
        DROP TABLE #tmpworkingtable
    END TRY
    BEGIN CATCH
    END CATCH

    BEGIN TRY
        DROP TABLE #VisitListingImpressions
    END TRY
    BEGIN CATCH
    END CATCH
	
    BEGIN TRY
        DROP TABLE #tmpAPTGSidImp
    END TRY
    BEGIN CATCH
    END CATCH

    BEGIN TRY
        DROP TABLE #AGViews
    END TRY
    BEGIN CATCH
    END CATCH

    BEGIN TRY
        DROP TABLE #tmpviewslistingpage
    END TRY
    BEGIN CATCH
    END CATCH
	
    BEGIN TRY
        DROP TABLE #ListingArray
    END TRY
    BEGIN CATCH
    END CATCH
  
    BEGIN TRY
        DROP TABLE #Impressions
    END TRY
    BEGIN CATCH
    END CATCH    
    
	BEGIN TRY
		DROP TABLE #TealiumViewsListingPage
	END TRY
	BEGIN CATCH
	END CATCH
  
	BEGIN TRY
		DROP TABLE #MobileMetrics
	END TRY
	BEGIN CATCH
	END CATCH    
	
    BEGIN TRY
        DROP TABLE #tmppageviewsvisits
    END TRY
    BEGIN CATCH
    END CATCH

    BEGIN TRY
        DROP TABLE #tmpwebtrendssitedata
    END TRY
    BEGIN CATCH
    END CATCH

	BEGIN TRY
        DROP TABLE 	#AGSRP
    END TRY
    BEGIN CATCH
    END CATCH

    BEGIN TRY
        DROP TABLE #tmpimpressionsperlisting
    END TRY
    BEGIN CATCH
    END CATCH

	PRINT @codesection  
	---------------------------------------------------------------------------
	--Create temp tables
	---------------------------------------------------------------------------
-- start here if fails again
	SET @codesection = 'Create needed temp working tables'

    CREATE TABLE #tmpworkingtable				
        (
        YMDID INT NOT NULL
       ,YearMonth INT NOT NULL
       ,StatusIDAG INT NOT NULL
       ,StatusIDRent INT NOT NULL       
       ,DisplayListingID VARCHAR(30) NOT NULL      
       ,ListingID INT NOT NULL
	   ,PropertyIDAG INT NOT NULL
       ,PropertyIDRent INT NOT NULL     
       ,IsRentals TINYINT NULL
       ,IsRentalHouses TINYINT NULL     
       ,IsLovely TINYINT NULL
       ,IsRentSmallProp TINYINT NOT NULL
       ,ShowPricing TINYINT NULL DEFAULT 0
       ,LowPrice INT NOT NULL DEFAULT 0
       ,HighPrice INT NOT NULL DEFAULT 0
       ,ActiveAmenities INT NOT NULL
       ,ActiveFloorPlans INT NOT NULL
       ,ActivePhotos INT NOT NULL
       ,UniqueVisitsAG INT NOT NULL
       ,UniqueVisitsRent INT NOT NULL
       ,UniqueVisitsMobileAG INT NOT NULL
       ,UniqueVisitsMobileRent INT NOT NULL
       ,ViewsListingPageWebAG INT NOT NULL
       ,ViewsListingPageWebRent INT NOT NULL
       ,ViewsListingPageMobileAG INT NOT NULL
       ,ViewsListingPageMobileRent INT NOT NULL
       ,SRPListingImprAG INT NOT NULL
       ,SRPListingImprRent INT NOT NULL
       ,SRPUniqueVisitAG INT NOT NULL
       ,SRPUniqueVisitRent INT NOT NULL
       ,InternetConnectedCalls INT NOT NULL
       ,InternetMissedCalls INT NOT NULL
       ,MobileConnectedCalls INT NOT NULL
       ,MobileMissedCalls INT NOT NULL
       ,EmailLeadsAG INT NOT NULL
       ,MobileEmailLeadsAG INT NOT NULL
       ,IphoneEmailLeadsAG INT NOT NULL
       ,AndroidEmailLeadsAG INT NOT NULL
       ,IPadEmailLeadsAG INT NOT NULL
       ,TabletEmailLeadsAG INT NOT NULL
       ,KindleEmailLeadsAG INT NOT NULL
       ,EmailLeadsRent INT NOT NULL
       ,MobileEmailLeadsRent INT NOT NULL
       ,IphoneEmailLeadsRent INT NOT NULL
       ,AndroidEmailLeadsRent INT NOT NULL
       ,IPadEmailLeadsRent INT NOT NULL
       ,TabletEmailLeadsRent INT NOT NULL
       ,KindleEmailLeadsRent INT NOT NULL
	   ,EmailLeadsRentals INT NOT NULL
	   ,MobileEmailLeadsRentals INT NOT NULL
	   ,AndroidEmailLeadsRentals INT NOT NULL
	   ,IphoneEmailLeadsRentals INT NOT NULL,	  	   	   
	   )
	   
    PRINT 'Finished deleting and creating needed temp tables ' + CONVERT(VARCHAR(50),GETDATE(),101) + '  ' + CONVERT(VARCHAR(50),GETDATE(),108)   	
	
	--------------------------------------------------
	--Do a check to see if other values are present other than expected ones
	--------------------------------------------------
	
    BEGIN TRY
        IF EXISTS ( SELECT  TOP 1 *
                    FROM    RentPath.Fact.EmailsLovelySyndication
                    WHERE   Source NOT IN ('AndroidAG','AndroidRent','apartmentguide','iPadAG','iPadRent','iPhoneAG','iPhoneRent','m.apartmentguide','rent','AndroidRT','iPhoneRentals','m.rentals','rentals')
					)--the list of good values, so if others come in, send an email
            BEGIN         
                SET @newwebsitevalues = ''
                SELECT  @newwebsitevalues = @newwebsitevalues + '; ' + Source
				FROM
					(
					SELECT DISTINCT Source
					FROM    RentPath.Fact.EmailsLovelySyndication
					WHERE   Source NOT IN ('AndroidAG','AndroidRent','apartmentguide','iPadAG','iPadRent','iPhoneAG','iPhoneRent','m.apartmentguide','rent','AndroidRT','iPhoneRentals','m.rentals','rentals')	-- list of good values
					) AS d

                SET @servername = CONVERT(VARCHAR(200),@@servername)
                SET @msgsubject = 'New WEBSITE value found for CENTROID Lovely email leads'

                SET @msgbody = 'Server ' + @servername + CHAR(13) + CHAR(10)
                SET @msgbody = @msgbody + CHAR(13) + CHAR(13) + 'New WEBSITE value(s) found.  Values = ' + @newwebsitevalues
                SET @msgbody = @msgbody + CHAR(13) + CHAR(13) + 'This Email Is Generated By SP [Mart].[pr_SmallPropertyListings] In RentPath.'

                SET @RecipientsText = 'smims@rentpath.com; kmorrow@rentpath.com'

                EXEC msdb.dbo.sp_send_dbmail 
                    @profile_name = 'BI Team Account'
                   ,@recipients = @RecipientsText
                   ,							-- use ; between if more than one
                    @body = @msgbody
                   ,@subject = @msgsubject
                   ,@importance = 'HIGH'
                   ,@body_format = 'TEXT';
            END
    END TRY
    BEGIN CATCH
    END CATCH

    PRINT 'Finished loading Centroid AllLeads information  ' + CONVERT(VARCHAR(50),GETDATE(),101) + '  ' + CONVERT(VARCHAR(50),GETDATE(),108)

	--------------------------------
	--Get ViewsListingPage for old AG tagging
	--------------------------------
	SET @codesection = 'Get AG ViewsListingPage information'
	    
    SELECT  ListingID = LTRIM(RTRIM(Measure))
           ,ViewsListingPageWebAG = SUM(CASE WHEN MeasureType = 'a_l_pv'
                                                  OR Measuretype = 'DPG' THEN 1
                                             ELSE 0
                                        END)
    INTO    #AGViews
    FROM    staging.agparseddata WITH (NOLOCK)
    GROUP BY LTRIM(RTRIM(Measure))

    SELECT  ListingID
            ,ViewsListingPageWebAG
    INTO    #tmpviewslistingpage
    FROM    #AGViews
    WHERE   (ListingID LIKE 'r%'
                AND ISNUMERIC(SUBSTRING(ListingID,2,LEN(ListingID) - 1)) = 1)
            OR (ListingID LIKE 'lv%'
                AND ISNUMERIC(SUBSTRING(ListingID,3,LEN(ListingID) - 2)) = 1)
	
    PRINT 'Finished loading AG ViewsListingPage information  ' + CONVERT(VARCHAR(50),GETDATE(),101) + '  ' + CONVERT(VARCHAR(50),GETDATE(),108)

	/*TEALIUM TAGGING*/
	------------------------------------------
	--Create & populate table for listing array, which is used to 
	--calculate impression and visit counts
	------------------------------------------
	SET @codesection = 'Get Listing Array for Tealium tagging'

	CREATE TABLE #ListingArray (
		Listingid VARCHAR(30) NULL
	   ,visit VARCHAR(7000) NULL
	   ,profileid INT NULL
	   ,[EVENT] VARCHAR(21) NULL)

	INSERT  INTO #ListingArray
			(Listingid
			,visit
			,profileid
			,EVENT)
			SELECT  LEFT(Listingid,30) AS Listingid
				   ,visit
				   ,profileid
				   ,[EVENT]
			FROM    (
					 SELECT s.Measure AS Listingid
						   ,visit
						   ,profileid
						   ,'SearchPageImpressions' AS [EVENT]
					 FROM  staging.TealiumParsedPivotBackMart tpp --Staging.TealiumParsedPivot AS tpp
					 CROSS APPLY DBAUtility.dbo.fn_Split(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(listing_array,' ',''),'<',''),'>',''),'&lt;',''),'&gt;',''),';') AS s
					 WHERE  [page] = 'srp'
							AND subprofileid <> 99
							--AND (REPLACE(REPLACE(REPLACE(REPLACE(listing_array,'<',''),'>',''),'&lt;',''),'&gt;','') LIKE '%r%'
							--	OR REPLACE(REPLACE(REPLACE(REPLACE(listing_array,'<',''),'>',''),'&lt;',''),'&gt;','') LIKE '%lv%')
					) AS a

	CREATE NONCLUSTERED INDEX idx_ListingArray
	ON #ListingArray(Listingid,profileid);

	PRINT 'Finished loading listing array for Tealium tagging' + CONVERT(VARCHAR(50),GETDATE(),101) + '  ' + CONVERT(VARCHAR(50),GETDATE(),108)

	------------------------------------------
	--Get Impressions for Tealium tagging
	------------------------------------------
	SET @codesection = 'Get Tealium Impressions'

	CREATE TABLE #Impressions (
		listingid VARCHAR(30)
	   ,profileid INT
	   ,SRPListingImpr INT
	   ,SRPUniqueVisit INT);

	INSERT INTO #Impressions
			(listingid
			,profileid
			,SRPListingImpr
			,SRPUniqueVisit)
			SELECT  a.ListingID
				   ,a.profileid					AS ProfileID
				   ,COUNT(1)					AS SRPListingImpr
				   ,COUNT(DISTINCT visit)		AS SRPUniqueVisit
			FROM    
					(
					 SELECT la.Listingid AS ListingID
						   ,la.visit
						   ,la.profileid
						   ,la.[EVENT]
					 FROM  #ListingArray AS la
					) AS a
			GROUP BY a.ListingID
				   ,a.profileid;

	CREATE NONCLUSTERED INDEX idx_Impressions
	ON #Impressions(listingid,profileid)
	INCLUDE(SRPListingImpr);

	PRINT 'Finished loading Tealium impressions' + CONVERT(VARCHAR(50),GETDATE(),101) + '  ' + CONVERT(VARCHAR(50),GETDATE(),108)
	--------------------------------
	--Get ViewsListingPage and Visits for Tealium tagging
	--------------------------------
	SET @codesection = 'Get Tealium Visits and Views'

    CREATE TABLE #TealiumViewsListingPage (
        ListingID VARCHAR(30)
	   ,Profileid INT      
       ,UniqueVisits INT
       ,UniqueVisitsMobile INT
       ,ViewsListingPageWeb INT
       ,ViewsListingPageMobile INT);

		INSERT INTO #TealiumViewsListingPage
				(listingid
				,profileid
				,UniqueVisits
				,UniqueVisitsMobile
				,ViewsListingPageWeb
				,ViewsListingPageMobile)
				SELECT  LEFT(tpp.ListingID,30) AS ListingID
					   ,CAST(tpp.profileid AS INT) AS profileid
					   ,COUNT(DISTINCT CASE WHEN tpp.subprofileid = 1 THEN tpp.visit
									   END) AS UniqueVisits
					   ,COUNT(DISTINCT CASE WHEN tpp.subprofileid = 2 THEN tpp.visit
									   END) AS UniqueVisitsMobile
					   ,SUM(CASE WHEN tpp.subprofileid = 1 THEN 1
								 ELSE 0
							END) AS ViewsListingPageWeb
					   ,SUM(CASE WHEN tpp.subprofileid = 2 THEN 1
								 ELSE 0
							END) AS ViewsListingPageMobile
				FROM    staging.TealiumParsedPivotBackMart tpp -- Staging.TealiumParsedPivot AS tpp
				WHERE   tpp.action = 'pageview'
						AND tpp.[page] = 'pdp'
						AND subprofileid <> 99
				GROUP BY tpp.listingid
					   ,tpp.profileid

             CREATE NONCLUSTERED INDEX idx_Tealium_Pageviews
             ON #TealiumViewsListingPage(listingid,profileid)
             INCLUDE(UniqueVisits
             ,UniqueVisitsMobile
             ,ViewsListingPageWeb
             ,ViewsListingPageMobile);

	PRINT 'Finished loading Tealium Visits and Views  ' + CONVERT(VARCHAR(50),GETDATE(),101) + '  ' + CONVERT(VARCHAR(50),GETDATE(),108)
    -------------------------------------------------------
	-- Mart web listing pageviews and visits for old AG mobile tagging
    -------------------------------------------------------
	SET @codesection = 'Get AG Mobile Pageviews and Visits'

		SELECT  ListingID
				,YMDID
				,COUNT(DISTINCT [wt.vt_sid])	AS NumOfVisits
				,SUM(1)							AS Pageviews
		INTO	#MobileMetrics
		FROM      (
					SELECT ParseID
						,ProfileID
						,YMDID
						,EventDate
						,MeasureType
						,Measure
					FROM   staging.parseddatabackmart WITH (NOLOCK)--Staging.dbo.ParsedData WITH (NOLOCK)			
					WHERE  ProfileID = 51
						AND MeasureType IN ('wt.vt_sid','wt.cg_n','listingid','wt.dl')
				) X PIVOT ( MAX(Measure) FOR MeasureType IN ([wt.vt_sid],[wt.cg_n],[listingid],[wt.dl]) ) P
		WHERE     p.[wt.cg_n] = 'detail'
				AND p.[wt.dl] = 'pageview'
		GROUP BY  ListingID
				,YMDID


        SELECT  *
        INTO    #tmppageviewsvisits
        FROM    #MobileMetrics
        WHERE   (ListingID LIKE '%r%')
                OR (ListingID LIKE '%lv%')
        
    PRINT 'Finished loading AG Mobile Pageviews and Visits  ' + CONVERT(VARCHAR(50),GETDATE(),101) + '  ' + CONVERT(VARCHAR(50),GETDATE(),108)	

    -------------------------------------------------------
    -- Get AG Visits from old tagging
    -------------------------------------------------------
	SET @codesection = 'Get AG Visits from Old Tagging'

    SELECT  ListingID = p1.measure
           ,UniqueVisitsAG = COUNT(DISTINCT p2.Measure)
    INTO    #tmpwebtrendssitedata
    FROM   staging.agparseddata p1 WITH (NOLOCK) --Apartmentguide.dbo.ParsedData AS p1 WITH (NOLOCK) 
    INNER JOIN staging.agparseddata p2 WITH (NOLOCK) -- Apartmentguide.dbo.ParsedData AS p2 WITH (NOLOCK)
			ON p1.ParseID = p2.ParseID
    WHERE   (p1.MeasureType = 'a_l_pv'
             OR p1.MeasureType = 'DPG')
            AND p2.MeasureType = 'WT.vt_sid'
            AND ISNUMERIC(p1.Measure) = 0
    GROUP BY p1.measure
                    
    PRINT 'Finished loading AG Visits from Old Tagging  ' + CONVERT(VARCHAR(50),GETDATE(),101) + '  ' + CONVERT(VARCHAR(50),GETDATE(),108)

	-------------------------------------------------------
	--Get SRP Listing Impression for AG from old tagging
	-------------------------------------------------------
	SET @codesection = 'Get AG SRP Listing Impressions'
	
    SELECT  ListingID = s.measure
           ,SRPListingImprAG = COUNT(*)
    INTO    #AGSRP
    FROM  staging.agparseddata p WITH (NOLOCK) --  Apartmentguide.dbo.ParsedData AS p WITH (NOLOCK)
    CROSS APPLY DBAUtility.dbo.fn_Split(REPLACE(REPLACE(REPLACE(REPLACE(p.Measure,'<',''),'>',''),'&lt;',''),'&gt;',''),';') AS s
    WHERE   (p.MeasureType = 'a_l_imp'
             OR p.measuretype = 'SPG')
            AND (s.measure LIKE 'r%'
                 OR s.measure LIKE 'lv%')
    GROUP BY s.measure
                 
    SELECT  *
    INTO    #tmpimpressionsperlisting
    FROM    #AGSRP
    WHERE   ListingID LIKE 'r%'
            OR ListingID LIKE 'lv%'

    PRINT 'Finished loading the AG SRP Listing Impressions ' + CONVERT(VARCHAR(50),GETDATE(),101) + '  ' + CONVERT(VARCHAR(50),GETDATE(),108)
    
	--------------------------------------------
	--Get SRP Unique Visits for AG from old tagging
	--------------------------------------------
	SET @codesection = 'Get SRP Unique Visits'

    SELECT  p1.measure AS SID
           ,REPLACE(REPLACE(REPLACE(REPLACE(p.Measure,'<',''),'>',''),'&lt;',''),'&gt;','') AS imp
    INTO    #tmpAPTGSidImp
    FROM   staging.agparseddata p1 WITH (NOLOCK) -- Apartmentguide.dbo.ParsedData p1 WITH (NOLOCK)
    INNER JOIN staging.agparseddata p WITH (NOLOCK) -- Apartmentguide.dbo.ParsedData p WITH (NOLOCK)
            ON p1.parseid = p.parseid
    WHERE   p1.measuretype = 'WT.vt_sid'
            AND (p.measuretype = 'a_l_imp'
                 OR p.measuretype = 'SPG')
            AND (REPLACE(REPLACE(REPLACE(REPLACE(p.Measure,'<',''),'>',''),'&lt;',''),'&gt;','') LIKE '%r%'
                 OR REPLACE(REPLACE(REPLACE(REPLACE(p.Measure,'<',''),'>',''),'&lt;',''),'&gt;','') LIKE '%lv%');

    SELECT  ListingID = imp.Measure
           ,DisplayListingID = DBAUtility.dbo.fnDigitOnly(imp.Measure)
           ,SRPUniqueVisitAG = COUNT(DISTINCT sid)
    INTO    #VisitListingImpressions
    FROM    #tmpAPTGSidImp
    CROSS APPLY DBAUtility.dbo.fn_Split(imp,';') AS imp
    WHERE   /* ISNUMERIC(imp.Measure) = 1
			AND*/
            CHARINDEX('a',imp.measure) = 0
            AND CHARINDEX('b',imp.measure) = 0
            AND CHARINDEX('c',imp.measure) = 0
            AND CHARINDEX('d',imp.measure) = 0
            AND CHARINDEX('e',imp.measure) = 0
            AND CHARINDEX('f',imp.measure) = 0
    GROUP BY imp.Measure
           ,DBAUtility.dbo.fnDigitOnly(imp.Measure);

    PRINT 'Finished loading SRP Unique Visits ' + CONVERT(VARCHAR(50),GETDATE(),101) + '  ' + CONVERT(VARCHAR(50),GETDATE(),108)
	
	--------------------------------------------------------------------------------
	--Dump the records into the temp working table
	--------------------------------------------------------------------------------
    SET @codesection = 'Insert records to the working table'
-- Here woody
--DECLARE @yearmonth INT=201607;
--DECLARE @datetouseymdid INT = 20160716;
	INSERT INTO #tmpworkingtable
		(
        YMDID 
       ,YearMonth 
       ,StatusIDAG 
       ,StatusIDRent        
       ,DisplayListingID    
       ,ListingID 
	   ,PropertyIDAG 
       ,PropertyIDRent      
       ,IsRentals
	   ,IsRentalHouses
       ,IsLovely 
       ,IsRentSmallProp 
       ,ShowPricing 
       ,LowPrice 
       ,HighPrice 
       ,ActiveAmenities 
       ,ActiveFloorPlans 
       ,ActivePhotos 	   
       ,UniqueVisitsAG 
       ,UniqueVisitsRent 
       ,UniqueVisitsMobileAG 
       ,UniqueVisitsMobileRent 
       ,ViewsListingPageWebAG 
       ,ViewsListingPageWebRent 
       ,ViewsListingPageMobileAG 
       ,ViewsListingPageMobileRent 
       ,SRPListingImprAG 
       ,SRPListingImprRent 
       ,SRPUniqueVisitAG 
       ,SRPUniqueVisitRent 
       ,InternetConnectedCalls 
       ,InternetMissedCalls 
       ,MobileConnectedCalls 
       ,MobileMissedCalls 
       ,EmailLeadsAG 
       ,MobileEmailLeadsAG 
       ,IphoneEmailLeadsAG 
       ,AndroidEmailLeadsAG 
       ,IPadEmailLeadsAG 
       ,TabletEmailLeadsAG 
       ,KindleEmailLeadsAG 
       ,EmailLeadsRent 
       ,MobileEmailLeadsRent 
       ,IphoneEmailLeadsRent 
       ,AndroidEmailLeadsRent 
       ,IPadEmailLeadsRent 
       ,TabletEmailLeadsRent 
       ,KindleEmailLeadsRent
	   ,EmailLeadsRentals
	   ,MobileEmailLeadsRentals 
	   ,AndroidEmailLeadsRentals
	   ,IphoneEmailLeadsRentals 	   
	   )
            SELECT  @datetouseymdid AS YMDID  --rp.YMDID  -- this is the currentdate for the small properties dimensions
                   ,@YearMonth										AS YearMonth
				   ,ISNULL(rp.StatusIDAG,0)							AS StatusIDAG
				   ,ISNULL(rp.StatusIDRent,0)						AS StatusIDRent
				   ,rp.DisplayListingID
                   ,rp.ListingID
				   ,rp.PropertyIDAG
				   ,rp.PropertyIDRent
                   ,rp.IsRentals
				   ,rp.IsRentalHouses
                   ,rp.IsLovely
				   ,rp.IsRentSmallProp
                   ,rp.ShowPricing
                   ,rp.LowPrice		
                   ,rp.HighPrice	
				   ,rp.ActiveAmenities
				   ,rp.ActiveFloorPlans
                   ,rp.ActivePhotos
					   -----------------------------------------
					   --Web Metrics (Old and Tealium)
					   -----------------------------------------
                   ,CAST(ISNULL(v.UniqueVisitsAG,0) AS INT)	+ CAST(ISNULL(tl.UniqueVisitsAG,0) AS INT)				AS UniqueVisitsAG
				   ,CAST(ISNULL(tl.UniqueVisitsRent,0) AS INT)														AS UniqueVisitsRent
                   ,CAST(ISNULL(wpv.NumOfVisits,0) AS INT) + CAST(ISNULL(tl.UniqueVisitMobileAG,0) AS INT)			AS UniqueVisitsMobileAG
				   ,CAST(ISNULL(tl.UniqueVisitMobileRent,0) AS INT)													AS UniqueVisitMobileRent
                   ,ISNULL(p.ViewsListingPageWebAG,0) + CAST(ISNULL(tl.ViewsListingPageWebAG,0) AS INT)				AS ViewsListingPageWebAG
				   ,CAST(ISNULL(tl.ViewsListingPageWebRent,0) AS INT)												AS ViewsListingPageWebRent
                   ,CAST(ISNULL(wpv.Pageviews,0) AS INT) + CAST(ISNULL(tl.ViewsListingPageMobileAG,0) AS INT)		AS ViewsListingPageMobileAG
				   ,CAST(ISNULL(tl.ViewsListingPageMobileRent,0) AS INT)											AS ViewsListingPageMobileRent
                   ,CAST(ISNULL(imp.SRPListingImprAG,0) AS INT) + CAST(ISNULL(tp.SRPListingImprAG,0) AS INT)		AS SRPListingImprAG
				   ,CAST(ISNULL(tp.SRPListingImprRent,0) AS INT)													AS SRPListingImprRent
                   ,CAST(ISNULL(vli.SRPUniqueVisitAG,0) AS INT) + CAST(ISNULL(tp.SRPUniqueVisitAG,0) AS INT)		AS SRPUniqueVisitAG
				   ,CAST(ISNULL(tp.SRPUniqueVisitRent,0) AS INT)													AS SRPUniqueVisitRent
					   -----------------------------------------
					   --Leads 
					   -----------------------------------------
                   ,CASE WHEN rp.IsRentSmallProp = 1 
								THEN CAST(ISNULL(rph.InternetConnectedCalls,0) AS INT)
								ELSE 0
								END																					AS InternetConnectedCalls	
                   ,CASE WHEN rp.IsRentSmallProp = 1 THEN CAST(ISNULL(rph.InternetMissedCalls,0) AS INT)
								ELSE 0
								END																					AS InternetMissedCalls									
                  ,CASE WHEN rp.IsRentSmallProp = 1 
								THEN CAST(ISNULL(rph.MobileConnectedCalls,0) AS INT)
								ELSE 0
								END																					AS MobileConnectedCalls	
                   ,CASE WHEN rp.IsRentSmallProp = 1 THEN CAST(ISNULL(rph.MobileMissedCalls,0) AS INT)
								ELSE 0
								END																					AS MobileMissedCalls	
                   ,CASE WHEN rp.IsLovely = 1 THEN CAST(ISNULL(lvd.AGEmailLeads,0) AS INT)
						ELSE CAST(ISNULL(ld.AGEmailLeads,0) AS INT)
						END																							AS EmailLeadsAG
                   ,CASE WHEN rp.IsLovely = 1 THEN CAST(ISNULL(lvd.AGMobileEmailLeads,0) AS INT)
						ELSE CAST(ISNULL(ld.AGMobileEmailLeads,0) AS INT)
						END																							AS MobileEmailLeadsAG
                   ,CASE WHEN rp.IsLovely = 1 THEN CAST(ISNULL(lvd.AGiPhoneEmailLeads,0) AS INT)
						ELSE CAST(ISNULL(ld.AGiPhoneEmailLeads,0) AS INT)													
						END																							AS iPhoneEmailLeadsAG
                   ,CASE WHEN rp.IsLovely = 1 THEN CAST(ISNULL(lvd.AGAndroidEmailLeads,0) AS INT)
						ELSE CAST(ISNULL(ld.AGAndroidEmailLeads,0) AS INT)
						END																							AS AndroidEmailLeadsAG
                   ,CASE WHEN rp.IsLovely =1 THEN CAST(ISNULL(lvd.AGiPadEmailLeads,0) AS INT)
						ELSE CAST(ISNULL(ld.AGiPadEmailLeads,0) AS INT)		
						END																							AS iPadEmailLeadsAG
                   ,CAST(ISNULL(ld.AGTabletEmailLeads,0) AS INT)													AS TabletEmailLeadsAG
                   ,CAST(ISNULL(ld.AGKindleEmailLeads,0) AS INT)													AS KindleEmailLeadsAG
                   ,CASE WHEN rp.IsRentSmallProp = 1 THEN CAST(ISNULL(rem.RentEmailLeads,0) AS INT)
						 WHEN rp.IsLovely = 1 THEN CAST(ISNULL(lvd.RentEmailLeads,0) AS INT)
						 ELSE CAST(ISNULL(ld.RentEmailLeads,0) AS INT)
						 END																						AS EmailLeadsRent
                   ,CAST(ISNULL(ld.RentMobileEmailLeads,0) AS INT)													AS MobileEmailLeadsRent
				   ,CASE WHEN rp.IsRentSmallProp = 1 THEN CAST(ISNULL(rem.iPhoneEmailLeads,0) AS INT)
						 WHEN rp.IsLovely = 1 THEN CAST(ISNULL(lvd.RentiPhoneEmailLeads,0) AS INT)
						 ELSE CAST(ISNULL(ld.RentiPhoneEmailLeads,0) AS INT)													
						 END																						AS iPhoneEmailLeadsRent
                   ,CASE WHEN rp.IsRentSmallProp = 1 THEN CAST(ISNULL(rem.AndroidEmailLeads,0) AS INT)
					     WHEN rp.IsLovely = 1 THEN CAST(ISNULL(lvd.RentAndroidEmailLeads,0) AS INT)
						 ELSE CAST(ISNULL(ld.RentAndroidEmailLeads,0) AS INT)													
						 END																						AS AndroidEmailLeadsRent
                   ,CASE WHEN rp.IsRentSmallProp = 1 THEN CAST(ISNULL(rem.iPadEmailLeads,0) AS INT)
						 WHEN rp.IsLovely = 1 THEN CAST(ISNULL(lvd.RentiPadEmailLeads,0) AS INT)
						 ELSE CAST(ISNULL(ld.RentiPadEmailLeads,0) AS INT)
						 END																						AS iPadEmailLeadsRent
                   ,CAST(ISNULL(ld.RentTabletEmailLeads,0) AS INT)													AS TabletEmailLeadsRent
                   ,CAST(ISNULL(ld.RentKindleEmailLeads,0) AS INT)													AS KindleEmailLeadsRent		
				   ,CAST(ISNULL(lvd.EmailLeadsRentals,0) AS INT)													AS EmailLeadsRentals
				   ,CAST(ISNULL(lvd.MobileEmailLeadsRentals,0)	AS INT)												AS MobileEmailLeadsRentals
				   ,CAST(ISNULL(lvd.AndroidEmailLeadsRentals,0) AS INT)												AS AndroidEmailLeadsRentals
				   ,CAST(ISNULL(lvd.IphoneEmailLeadsRentals,0)	AS INT)												AS IphoneEmailLeadsRentals				   	   				  				  				  				   				   				   
            FROM    RentPath.Dimension.SmallPropertyListings AS rp
            LEFT OUTER JOIN #tmpviewslistingpage AS p
                    ON rp.DisplayListingID = p.ListingID
    -------------------------------------------------------
    -- Mart web listing pageviews and visits for old AG mobile tagging
    -------------------------------------------------------
            LEFT OUTER JOIN #tmppageviewsvisits AS wpv
                    ON rp.DisplayListingID = wpv.listingid
                       AND @datetouseymdid = wpv.ymdid
    -------------------------------------------------------
    -- Mart AG Visits from old tagging
    -------------------------------------------------------
            LEFT OUTER JOIN #tmpwebtrendssitedata AS v
                    ON rp.DisplayListingID= v.ListingID
	-------------------------------------------------------
	-- Mart SRP Listing Impression for AG from old tagging
	-------------------------------------------------------
            LEFT OUTER JOIN #tmpimpressionsperlisting AS imp
                    ON rp.DisplayListingID = imp.ListingID
    -------------------------------------------------------
    -- Mart SRP Unique Visits for AG from old tagging, which are unique visits that saw a listing
    -------------------------------------------------------
            LEFT OUTER JOIN #VisitListingImpressions AS vli
                    ON rp.DisplayListingID = vli.DisplayListingID
    -------------------------------------------------------
    -- Mart Views and Visits from Tealium
    -------------------------------------------------------
	LEFT OUTER JOIN 
					(
					SELECT   listingid						
							,SUM(CASE WHEN profileid = 84 THEN ViewsListingPageWeb
										ELSE 0
								END) AS ViewsListingPageWebAG
							,SUM(CASE WHEN profileid = 84 THEN ViewsListingPageMobile
										ELSE 0
								END) AS ViewsListingPageMobileAG
							,SUM(CASE WHEN profileid = 86 THEN ViewsListingPageWeb
										ELSE 0
								END) AS ViewsListingPageWebRent
							,SUM(CASE WHEN profileid = 86 THEN ViewsListingPageMobile
										ELSE 0
								END) AS ViewsListingPageMobileRent
							,SUM(CASE WHEN profileid = 84 THEN UniqueVisits
										ELSE 0
								END) AS UniqueVisitsAG
							,SUM(CASE WHEN profileid = 84 THEN UniqueVisitsMobile
										ELSE 0
								END) AS UniqueVisitMobileAG
							,SUM(CASE WHEN profileid = 86 THEN UniqueVisits
										ELSE 0
								END) AS UniqueVisitsRent
							,SUM(CASE WHEN profileid = 86 THEN UniqueVisitsMobile
										ELSE 0
								END) AS UniqueVisitMobileRent
					FROM     #TealiumViewsListingPage
					GROUP BY listingid
					) AS tl
  ON rp.DisplayListingID = tl.ListingID
-------------------------------------------------------
    -- Mart Impressions from Tealium
-------------------------------------------------------
  LEFT OUTER JOIN 
				  (
				  SELECT    ListingID
						   ,SUM(CASE WHEN profileid = 84 THEN SRPListingImpr
									 ELSE 0
								END) AS SRPListingImprAG
						   ,SUM(CASE WHEN profileid = 86 THEN SRPListingImpr
									 ELSE 0
								END) AS SRPListingImprRent
						   ,SUM(CASE WHEN profileid = 84 THEN SRPUniqueVisit
									 ELSE 0
								END) AS SRPUniqueVisitAG
						   ,SUM(CASE WHEN profileid = 86 THEN SRPUniqueVisit
									 ELSE 0
								END) AS SRPUniqueVisitRent
				  FROM      #Impressions	
				  GROUP BY ListingID
				  )	AS tp
	ON rp.DisplayListingID = tp.ListingID					                                   
		
    -------------------------------------------------------
    -- Mart Rentals Phone Leads
	-- Same phone number is displayed on all sites so can't tell source of phone lead
	-- No longer doing this as of 6/1/15 because Blane explained these are already being counted in Rentals and since we can't determine source site, we can't count them here also
    -------------------------------------------------------
    -------------------------------------------------------
    -- Mart Rentals Email Leads
    -------------------------------------------------------
            LEFT OUTER JOIN (
                             SELECT ListingID = spl.ListingID
							       ,dl.SiteID
                                   ,AGEmailLeads = SUM(CASE WHEN SourceSystem = 'NOS-apartmentguide' THEN 1					--This is a good value
                                                            ELSE 0
                                                       END)
                                   ,AGiPhoneEmailLeads = SUM(CASE WHEN SourceSystem = 'NOS-iPhoneAG' THEN 1					--This is a good value
                                                                ELSE 0
                                                           END)
                                   ,AGAndroidEmailLeads = SUM(CASE WHEN SourceSystem = 'NOS-AndroidAG' THEN 1				--This is a good value
                                                                 ELSE 0
                                                            END)
                                   ,AGiPadEmailLeads = SUM(CASE WHEN SourceSystem = 'NOS-iPadAG' THEN 1						--This is a good value
                                                              ELSE 0
                                                         END)
                                   ,AGMobileEmailLeads = SUM(CASE WHEN SourceSystem = 'NOS-m.apartmentguide' THEN 1			--This is a good value
                                                                  ELSE 0
                                                             END)
                                   ,AGTabletEmailLeads = SUM(CASE WHEN SourceSystem = 'NOS-ANDROIDTABapartmentguide' THEN 1	-- this value is not set up.  Change value when it is added, to the appropriate value to check for.
                                                                  ELSE 0
                                                             END)
                                   ,AGKindleEmailLeads = SUM(CASE WHEN SourceSystem = 'NOS-apartmentguideKindleAG' THEN 1	-- this value is not set up.  Change value when it is added, to the appropriate value to check for.
                                                                  ELSE 0
                                                             END)
                                   ,RentEmailLeads = SUM(CASE WHEN SourceSystem = 'NOS-rent' THEN 1							--This is a good value
                                                                  ELSE 0
                                                             END)
								   ,RentiPhoneEmailLeads = SUM(CASE WHEN SourceSystem = 'NOS-iPhoneRent' THEN 1				--This is a good value
                                                              ELSE 0
                                                         END)
                                   ,RentAndroidEmailLeads = SUM(CASE WHEN SourceSystem = 'NOS-AndroidRent' THEN 1			--This is a good value
                                                              ELSE 0
                                                         END)
                                   ,RentiPadEmailLeads = SUM(CASE WHEN SourceSystem = 'NOS-iPadRent' THEN 1					--This is a good value
                                                            ELSE 0
                                                       END)
                                   ,RentMobileEmailLeads = SUM(CASE WHEN SourceSystem = 'NOS-m.rent' THEN 1					-- this value is not set up.  Change value when it is added, to the appropriate value to check for.
                                                                ELSE 0
                                                           END)
                                   ,RentTabletEmailLeads = SUM(CASE WHEN SourceSystem = 'NOS-ANDROIDTABrent' THEN 1			-- this value is not set up.  Change value when it is added, to the appropriate value to check for.
                                                                ELSE 0
                                                           END)
                                   ,RentKindleEmailLeads = SUM(CASE WHEN SourceSystem = 'NOS-KindleRent' THEN 1				-- this value is not set up.  Change value when it is added, to the appropriate value to check for.
                                                                  ELSE 0
                                                             END)
                             FROM   Rentals.Fact.EmailLeads AS el 
                             JOIN   Rentals.Dimension.Listings AS dl 
                                    ON dl.ListingID = el.ListingID
                                       --AND dl.ListingStatus = 'Active'
                             JOIN   RentPath.Dimension.SmallPropertyListings AS spl 
                                    ON dl.ListingNumber = spl.ListingID
									AND dl.SiteID = CASE WHEN spl.IsRentals = 1 THEN 1
														 WHEN spl.IsRentalHouses = 1 THEN 2
														 END
                             WHERE  el.YMDID = @datetouseymdid
                             GROUP BY spl.ListingID
							 ,dl.SiteID
                            ) AS ld
                    ON rp.ListingID = ld.ListingID
					AND ld.SiteID = CASE WHEN rp.IsRentals = 1 THEN 1
										 WHEN rp.IsRentalHouses = 1 THEN 2 
										 END
	-------------------------------------------------------
    -- Mart Lovely Email Leads
    -------------------------------------------------------
            LEFT OUTER JOIN (
							SELECT DisplayListingID
                                   ,AGEmailLeads = SUM(CASE WHEN Status =1 AND Source = 'apartmentguide' THEN 1 ELSE 0 END)
								   ,RentEmailLeads = SUM(CASE WHEN Status =1 AND Source = 'rent' THEN 1 ELSE 0 END)
								   ,RentAndroidEmailLeads = SUM(CASE WHEN Status =1  AND Source = 'AndroidRent' THEN 1 ELSE 0 END)
								   ,RentiPadEmailLeads = SUM(CASE WHEN Status =1 AND Source = 'iPadRent' THEN 1 ELSE 0 END)
								   ,RentiPhoneEmailLeads = SUM(CASE WHEN Status =1 AND Source = 'iPhoneRent' THEN 1 ELSE 0 END)
								   ,AGMobileEmailLeads = SUM(CASE WHEN Status = 1 AND Source = 'm.apartmentguide' THEN 1 ELSE 0 END)
								   ,AGiPhoneEmailLeads =  SUM(CASE WHEN Status = 1 AND Source = 'iPhoneAG' THEN 1 ELSE 0 END)
								   ,AGAndroidEmailLeads = SUM(CASE WHEN Status = 1 AND Source = 'AndroidAG' THEN 1 ELSE 0 END)
								   ,AGiPadEmailLeads = SUM(CASE WHEN Status = 1 AND Source = 'iPadAG' THEN 1 ELSE 0 END)
								   ,EmailLeadsRentals = SUM(CASE WHEN Status =1 AND Source = 'rentals' THEN 1 ELSE 0 END)
								   ,MobileEmailLeadsRentals = SUM(CASE WHEN Status =1 AND Source = 'm.rentals' THEN 1 ELSE 0 END)
								   ,AndroidEmailLeadsRentals = SUM(CASE WHEN Status =1  AND Source = 'AndroidRT' THEN 1 ELSE 0 END)
								   ,IphoneEmailLeadsRentals = SUM(CASE WHEN Status =1 AND Source = 'iPhoneRentals' THEN 1 ELSE 0 END)
							 FROM   Rentpath.Fact.EmailsLovelySyndication
							 WHERE YMDID = @datetouseYMDID
							 GROUP BY DisplayListingID
                            ) AS lvd
                    ON rp.DisplayListingID = lvd.DisplayListingID
					AND rp.IsLovely = 1
	-------------------------------------------------------
    -- Mart Rentcom Small Property Phone Leads
    -------------------------------------------------------
		LEFT OUTER JOIN
						(
						SELECT RentPropertyID
						,SUM(CASE WHEN CallStatus = 1  AND CallType IN ('altreg','default','oneweb')THEN 1
                                 ELSE 0
                            END) AS InternetConnectedCalls
                       ,SUM(CASE WHEN CallStatus <> 1  AND CallType IN ('altreg','default','oneweb')THEN 1
                                 ELSE 0
                            END) AS InternetMissedCalls
                       ,SUM(CASE WHEN CallStatus = 1  AND CallType = 'mobile' THEN 1
                                 ELSE 0
                            END) AS MobileConnectedCalls
                       ,SUM(CASE WHEN CallStatus <> 1  AND CallType = 'mobile' THEN 1
                                 ELSE 0
                            END) AS MobileMissedCalls
					   FROM     Rentcom.Fact.CallsRentCom
                       WHERE    YMDID = @datetouseYMDID
                       GROUP BY RentPropertyID	
					   ) AS rph
		ON rp.PropertyIDRent = rph.RentPropertyID
		AND rp.IsRentSmallProp = 1
	-------------------------------------------------------
    -- Mart Rentcom Small Property Email Leads
    -------------------------------------------------------
		LEFT OUTER JOIN
						(
						SELECT  ListingID
						,RentEmailLeads = SUM(CASE WHEN source IN ('hotlead','RENT') AND Status = 1 THEN 1 ELSE 0 END)
						,TruliaEmailLeads = SUM(CASE WHEN source = 'trulia_hl' AND Status = 1 THEN 1 ELSE 0 END) 
						,AndroidEmailLeads = SUM(CASE WHEN Source = 'ANDROIDRENT' AND Status = 1 THEN 1 ELSE 0 END)
						,iPadEmailLeads = SUM(CASE WHEN Source = 'IPADRENT' AND Status = 1 THEN 1 ELSE 0 END)
						,iPhoneEmailLeads = SUM(CASE WHEN Source = 'IPHONERENT' AND Status = 1 THEN 1 ELSE 0 END)                                                         
						FROM    Rentcom.Fact.EmailsRentCom
						WHERE    YMDID = @datetouseYMDID
						GROUP BY ListingID	
					   ) AS rem
		ON rp.ListingID = rem.ListingID
		AND rp.IsRentSmallProp = 1
		

    PRINT 'Finished loading tmpworkingtable ' + CONVERT(VARCHAR(50),GETDATE(),101) + '  ' + CONVERT(VARCHAR(50),GETDATE(),108)

	-------------------------------------------------------------
	--Now mart the data after deleting from current table if any records exist in the new data
	-------------------------------------------------------------
    SET @codesection = 'Move the data to the live marting tables'

    BEGIN TRY
--		UPDATE #tmpworkingtable SET YMDID=20160716

        IF EXISTS ( SELECT TOP 1 *
                    FROM    #tmpworkingtable )				--check to make sure new data exists before we get rid of old data
            BEGIN
                BEGIN TRANSACTION
					
                SET @codesection = 'Delete appropriate data from live table'
					--Delete appropriate data from the live table
                DELETE  FROM Mart.SmallPropertyListings
                WHERE   YMDID = @datetouseymdid

                SET @codesection = 'Place the new data into the live table'
					--Now replace it with new data

                INSERT INTO RentPath.Mart.SmallPropertyListings
                        (YMDID
                        ,YearMonth
                        ,StatusIDAG
                        ,StatusIDRent
						,DisplayListingID
                        ,ListingID
                        ,PropertyIDAG
                        ,PropertyIDRent
                        ,IsRentals
						,IsRentalHouses
                        ,IsLovely
                        ,IsRentSmallProp
                        ,ShowPricing
                        ,LowPrice
                        ,HighPrice
                        ,ActiveAmenities
                        ,ActiveFloorPlans
                        ,ActivePhotos
                        ,UniqueVisitsAG
                        ,UniqueVisitsRent
                        ,UniqueVisitsMobileAG
                        ,UniqueVisitsMobileRent
                        ,ViewsListingPageWebAG
                        ,ViewsListingPageWebRent
                        ,ViewsListingPageMobileAG
                        ,ViewsListingPageMobileRent
                        ,SRPListingImprAG
                        ,SRPListingImprRent
                        ,SRPUniqueVisitAG
                        ,SRPUniqueVisitRent
                        ,InternetConnectedCalls
                        ,InternetMissedCalls
                        ,MobileConnectedCalls
                        ,MobileMissedCalls
                        ,EmailLeadsAG
                        ,MobileEmailLeadsAG
                        ,IphoneEmailLeadsAG
                        ,AndroidEmailLeadsAG
                        ,IPadEmailLeadsAG
                        ,TabletEmailLeadsAG
                        ,KindleEmailLeadsAG
                        ,EmailLeadsRent
                        ,MobileEmailLeadsRent
                        ,IphoneEmailLeadsRent
                        ,AndroidEmailLeadsRent
                        ,IPadEmailLeadsRent
                        ,TabletEmailLeadsRent
                        ,KindleEmailLeadsRent
						,EmailLeadsRentals
						,MobileEmailLeadsRentals
						,AndroidEmailLeadsRentals
						,IphoneEmailLeadsRentals																				
						)               
                        SELECT  @datetouseymdid		AS YMDID
                               ,@yearmonth			AS YearMonth
                               ,StatusIDAG
                               ,StatusIDRent
							   ,DisplayListingID
                               ,ListingID
							   ,PropertyIDAG
							   ,PropertyIDRent
                               ,IsRentals
							   ,IsRentalHouses
                               ,IsLovely
                               ,IsRentSmallProp
                               ,ShowPricing
                               ,LowPrice
                               ,HighPrice
							   ,ActiveAmenities
							   ,ActiveFloorPlans
							   ,ActivePhotos
                               ,UniqueVisitsAG
                               ,UniqueVisitsRent
                               ,UniqueVisitsMobileAG
                               ,UniqueVisitsMobileRent
                               ,ViewsListingPageWebAG
                               ,ViewsListingPageWebRent
                               ,ViewsListingPageMobileAG
                               ,ViewsListingPageMobileRent
                               ,SRPListingImprAG
                               ,SRPListingImprRent
                               ,SRPUniqueVisitAG
                               ,SRPUniqueVisitRent
                               ,InternetConnectedCalls
                               ,InternetMissedCalls
                               ,MobileConnectedCalls
                               ,MobileMissedCalls
                               ,EmailLeadsAG
                               ,MobileEmailLeadsAG
                               ,IphoneEmailLeadsAG
                               ,AndroidEmailLeadsAG
                               ,IPadEmailLeadsAG
                               ,TabletEmailLeadsAG
                               ,KindleEmailLeadsAG
                               ,EmailLeadsRent
                               ,MobileEmailLeadsRent
                               ,IphoneEmailLeadsRent
                               ,AndroidEmailLeadsRent
                               ,IPadEmailLeadsRent
                               ,TabletEmailLeadsRent
                               ,KindleEmailLeadsRent
							   ,EmailLeadsRentals
							   ,MobileEmailLeadsRentals
							   ,AndroidEmailLeadsRentals
							   ,IphoneEmailLeadsRentals		
                        FROM    #tmpworkingtable

                COMMIT TRANSACTION
            END
	
    END TRY
    BEGIN CATCH
        SELECT  @ErrorMessage = ERROR_MESSAGE()
               ,@ErrorNumber = ERROR_NUMBER()
               ,@ErrorSeverity = ERROR_SEVERITY()
               ,@ErrorState = ERROR_STATE()
               ,@ErrorLine = ERROR_LINE()
               ,@ErrorProcedure = ISNULL(ERROR_PROCEDURE(),'-');

        IF @@trancount > 0					--if a transaction was started (will = 0 if no transaction was started)
            ROLLBACK TRANSACTION


        SET @ErrorMessage = 'Attempting to load SmallPropertyListings for Rentals/Lovely Syndication to AG. SPROC is [Mart].[pr_SmallPropertyListings].  Error in code section - ' + @codesection + '   Error - ' + @ErrorMessage

        RAISERROR(@ErrorMessage,16,1) WITH log;

        RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.

    END CATCH
	
    PRINT 'Finished saving data to Mart.SmallPropertyListings table  ' + CONVERT(VARCHAR(50),GETDATE(),101) + '  ' + CONVERT(VARCHAR(50),GETDATE(),108)

	-------------------------------------------------------
	--Update StatusIDAG and StatusIDRent based on any leads for the day
	-------------------------------------------------------

	UPDATE up
	SET StatusIDAG	= CASE WHEN d.AGTotalEmailLeads > 0 THEN 1 ELSE up.StatusIDAG END
	,StatusIDRent	= CASE WHEN d.RentTotalEmailLeads > 0 THEN 1 ELSE up.StatusIDRent END
    FROM    RentPath.Mart.SmallPropertyListings AS up
    JOIN    (
             SELECT spl.DisplayListingID
                   ,spl.ListingID
                   ,spl.YMDID
                   ,SUM(spl.AGTotalEmailLeads)		AS AGTotalEmailLeads
                   ,SUM(spl.RentTotalEmailLeads)	AS RentTotalEmailLeads
             FROM   RentPath.Mart.SmallPropertyListings AS spl
             WHERE  spl.YMDID = @datetouseymdid
             GROUP BY spl.DisplayListingID
                   ,spl.ListingID
                   ,spl.YMDID
             HAVING SUM(spl.AGTotalEmailLeads) > 0
                    OR SUM(spl.RentTotalEmailLeads) > 0
            ) AS d
            ON up.DisplayListingID = d.DisplayListingID
               AND up.ListingID = d.ListingID
               AND up.YMDID = d.YMDID

doneit:

END



GO
/****** Object:  StoredProcedure [Mart].[pr_UpdateListingslead]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Richard Chen
-- Create date: 20150818
-- Description:	procedure to update leads in rentpath.mart.listings
-- =============================================
CREATE PROCEDURE [Mart].[pr_UpdateListingslead] (@YMDID AS INT = NULL, @listingid AS INT)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	--DECLARE 
	--@ymdid INT, @listingid INT
  
  --SET @ymdid=20150602
  --SET @listingid=187958  
IF (
	SELECT  OBJECT_ID(N'tempdb..#PhoneLeads')
	) IS NOT NULL
	DROP TABLE #PhoneLeads;
IF (
	SELECT  OBJECT_ID(N'tempdb..#EmailLeads')
	) IS NOT NULL
    DROP TABLE #EmailLeads  


CREATE TABLE #phoneLeads
(listingid INT, PhoneleadsAG INT, phoneLeadsRent int)

INSERT INTO #phoneleads
values
(@listingid,0,0)

UPDATE p
SET p.phoneleadsAG= isnull(v.PhoneLeadsAG,0)
   ,p.phoneleadsRent=isnull(v.phoneLeadsRent,0)
FROM #PhoneLeads p
LEFT join
(SELECT listingid, PhoneLeadsAG=ISNULL([84],0),PhoneLeadsRent=ISNULL([86],0)
FROM 
 (                   SELECT  pl.ListingID
                           ,CASE WHEN pl.Website = 'AG'
                                      AND l.ListingType <> 'Rentals Listing' THEN 84
                                 WHEN pl.Website = 'Rent' THEN 86
                            END AS ProfileID
                           ,COUNT(1) AS EventCount
                    FROM    RentPath.Mart.PhoneLeads AS pl
                    LEFT OUTER JOIN RentPath.mart.Listings AS l
						ON pl.ymdid=l.ymdid
						AND pl.listingid=l.ListingID
						and l.YMDID = @ymdid
						AND l.ListingID = pl.ListingID
						AND pl.listingid=@listingid
					--LEFT OUTER JOIN RentPath.Dimension.Listings_CR_20150817 AS lcr
     --                       --added this left join so we could ensure leads for rentals props are not being counted as AG leads
     --                           ON pl.ListingID = lcr.ListingID
                    WHERE   pl.YMDID = @ymdid
					        AND pl.listingid=@listingid
                            AND pl.CallStatus = 1
                            AND pl.CallType <> 'CRAIGSLIST'
							AND CASE WHEN pl.Website = 'AG'
                                      AND l.ListingType <> 'Rentals Listing' THEN 84
                                 WHEN pl.Website = 'Rent' THEN 86
                            END IN (84,86)
                    GROUP BY pl.ListingID
                           ,CASE WHEN pl.Website = 'AG'
                                      AND l.ListingType <> 'Rentals Listing' THEN 84
                                 WHEN pl.Website = 'Rent' THEN 86
                            END
  )  s
  PIVOT
  (MAX(EventCount) FOR profileID IN ([84],[86]) ) p
  ) v
  ON p.listingid=v.listingid

--SELECT * FROM #phoneleads

CREATE TABLE #EmailLeads
(listingid INT, EmailleadsAG INT, EmailLeadsRent int)

INSERT INTO #Emailleads
values
(@listingid,0,0)

UPDATE E
SET e.EmailleadsAG= isnull(v.EmailLeadsAG,0)
   ,e.EmailleadsRent=isnull(v.EmailLeadsRent,0)
FROM #EmailLeads e
LEFT join
(
SELECT listingid, EmailLeadsAG=[84],EmailLeadsRent=[86]
FROM 
 (
        SELECT  el.ListingID
                           ,CASE WHEN el.Website = 'AG'
                                      AND l.ListingType <> 'Rentals Listing'  THEN 84
                                 WHEN el.Website = 'Rent' THEN 86
                            END AS ProfileID
                           ,COUNT(1) AS EventCount
                    FROM    RentPath.Mart.EmailLeads AS el
                    LEFT OUTER JOIN RentPath.mart.Listings AS l
                            --added this left join so we could ensure leads for rentals props are not being counted as AG leads
                         ON el.ymdid=l.ymdid
						AND el.listingid=l.ListingID
						and l.YMDID = @ymdid
						AND l.ListingID = el.ListingID
						AND el.listingid=@listingid
                    WHERE   el.YMDID = @YMDID
					        AND el.listingid=@listingid
                            AND el.[Status] = 1
							AND CASE WHEN el.Website = 'AG'
                                      AND l.ListingType <> 'Rentals Listing' THEN 84
                                 WHEN el.Website = 'Rent' THEN 86
                            END IN (84,86)
					GROUP BY el.ListingID
                           ,CASE WHEN el.Website = 'AG'
                                      AND l.ListingType <> 'Rentals Listing'  THEN 84
                                 WHEN el.Website = 'Rent' THEN 86
                            END
  )  s
  PIVOT
  (MAX(EventCount) FOR profileID IN ([84],[86]) ) p
  ) v
  ON e.listingid=v.listingid;

--SELECT * FROM #EmailLeads

--SELECT ml.listingid, 
UPDATE ml
SET  ml.phoneleadsag=isnull(p.PhoneLeadsAG,0)
,ml.PhoneLeadsRent= isnull(p.PhoneLeadsRent,0)
,ml.EmailLeadsAG= isnull(e.EmailLeadsAG,0)
,ml.EmailLeadsRent= isnull(e.emailLeadsRent,0)
FROM rentpath.mart.Listings ml
 JOIN #PhoneLeads p ON ml.listingid=p.listingid
 JOIN #EmailLeads e ON ml.listingid=e.listingid
WHERE ml.ymdid=@ymdid
AND ml.listingid=@listingid


/*
EXEC [Mart].[pr_UpdateListingslead] 20150601,14016
*/


END


GO
/****** Object:  StoredProcedure [Mart].[pr_wwwapartmentguidecom_google_serp_top_20]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Mart].[pr_wwwapartmentguidecom_google_serp_top_20]
@YMDID INT
AS 

DELETE FROM [RentPath].Mart.[wwwapartmentguidecom_google_serp_top_20]
WHERE YMDID = @YMDID

INSERT INTO [RentPath].Mart.[wwwapartmentguidecom_google_serp_top_20]
(
	YMDID,
	Keyword,
	Market,
	Location,
	Device,
	GlobalMonthlySearchVolume,
	RegionalMonthlySearchVolume,
	[Rank],
	ResultTypeForPriorDay,
	ProtocolForPriorDay,
	RankingUrlOnPriorDay,
	ResultType,
	Protocol,
	RankingUrl,
	Tags
)
Select ISNULL(@YMDID, CONVERT(VARCHAR(8),GETDATE(),112)) YMDID,
Keyword,
Market,
Location,
Device,
[Global Monthly Search Volume],
[Regional Monthly Search Volume],
ISNULL(NULLIF(Rank,'""'),-1) Rank,
[Result Type for prior day],
[Protocol for prior day],
[Ranking URL on prior day],
[Result Type],
Protocol,
[Ranking URL],
Tags
FROM [RentPath].[Staging].[wwwapartmentguidecom_google_serp_top_20]


GO
/****** Object:  StoredProcedure [Mart].[SmallPropertyListings_Check_Available_By_Day]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*--######################################################################################
*
* Name:	[Mart].[SmallPropertyListings_Check_Available_By_Day]
*
* Desc:	<put description here>
*
* Test:	EXEC Mart.SmallPropertyListings_Check_Available_By_Day NULL
* Test:	EXEC Mart.SmallPropertyListings_Check_Available_By_Day 20150301
*
* Hist:	01	03/30/2015	Bob Langley		Initial Version - ticket 18228
--#######################################################################################*/
CREATE PROCEDURE [Mart].[SmallPropertyListings_Check_Available_By_Day]
(@YMDID	int = NULL)
AS 
BEGIN

    SET NOCOUNT ON;

	DECLARE @RecipientsText varchar(3000)
	DECLARE @msgbody varchar(7000)


	/* Testing 
	DECLARE @YMDID int
	SET @YMDID = NULL		--20150330
	*/
	
	
	
	DECLARE
		@ErrorMessage					NVARCHAR(4000),
		@ErrorNumber					INT,
		@ErrorSeverity					INT,
		@ErrorState						INT,
		@ErrorLine						INT,
		@ErrorProcedure					NVARCHAR(200)
		

	if @YMDID IS NULL
		SET @YMDID = CONVERT(int, Convert(varchar(10),DATEADD(dd,-1,GETDATE()),112))



	
	PRINT '@YMDID = ' + CONVERT(varchar(30),@YMDID)
	PRINT ' '


	/* ===================================================================================================================== */
	--Now check to make sure the information is there for the given date
	

	BEGIN TRY
		
		if NOT EXISTS(SELECT * FROM RentPath.Mart.SmallPropertyListings WITH (NOLOCK) WHERE YMDID = @YMDID)					--check to make sure new data exists before we get rid of old data
			BEGIN
				SET @RecipientsText = 'blangley@rentpath.com; kmorrow@rentpath.com; cmcganity@rentpath.com'
				SET @msgbody = 'Data is missing for date ' + CONVERT(varchar(30),@YMDID) + ' in table RentPath.Mart.SmallPropertyListings.'


				EXEC msdb.dbo.sp_send_dbmail
						@profile_name = 'BI Team Account',
						@recipients = @RecipientsText,							-- use ; between if more than one
						@reply_to = 'noreply@rentpath.com',
						@body = @msgbody,
						@subject = 'Missing data in RentPath.Mart.SmallPropertyListings',
						@importance = 'HIGH',
						@body_format = 'TEXT';
			END


	END TRY
	BEGIN CATCH
		SELECT 
			@ErrorMessage		= ERROR_MESSAGE(),
			@ErrorNumber		= ERROR_NUMBER(),
			@ErrorSeverity		= ERROR_SEVERITY(),
			@ErrorState			= ERROR_STATE(),
			@ErrorLine			= ERROR_LINE(),
			@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');

		SET @ErrorMessage = 'Attempting to check availability of data in SmallPropertyListings table for date ' + CONVERT(varchar(30),@YMDID) + '. In SPROC Mart.SmallPropertyListings_Check_Available_By_Day.   Error - ' + @ErrorMessage

	


		raiserror(@ErrorMessage,16,1) with log;

		RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	
	END CATCH

	SET NOCOUNT OFF;
END;



GO
/****** Object:  StoredProcedure [Reports].[pr_MediaCenterOpportunityReport]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Reports].[pr_MediaCenterOpportunityReport] (
    @CBSA INT
   ,@Owner VARCHAR(30)
   ,@MgtCo INT
   ,@PropID INT
   ,@Channel INT
   ,@StartYMDID INT
   ,@EndYMDID INT)
/*******************************************************************************************
* Name:	Reports.pr_MediaCenterOpportunityReport
* ------------------------------------------------------------------------------------------
* Desc:	Report for Sales from MediaCenter data received from DSI
* ------------------------------------------------------------------------------------------
* Notes: This data is being used by SFDC for Media Center reporting 
* ------------------------------------------------------------------------------------------
* Test:	exec Reports.pr_MediaCenterOpportunityReport 0,'<All>',0,0,0,20170601,20170630
* ------------------------------------------------------------------------------------------
* Hist:	01	06/28/2016		dwert	Ticket 21200, initial version
* Hist: 02	07/21/2016		dwert	Add date ranger per addendum to ticket 21200.
********************************************************************************************/
AS 
SET NOCOUNT ON

BEGIN
	/* test 
	DECLARE @CBSA AS int
	,@Owner AS VARCHAR(30)
	,@MgtCo AS INT
	,@PropID AS INT
	,@Channel AS INT
    ,@StartYMDID AS INT
	,@EndYMDID INT
	
	SET @CBSA = 0 --34980 --0
	SET @Owner = '<All>'  --'005E0000000JBSjIAO'  --andrea logan --
	SET @MgtCo = 0 --9008
	SET @PropID = 0  --22911 --0
	SET @Channel = 0
	SET @StartYMDID = 20160601
	set @EndYMDID = 20160701
	*/

	--if the user selected an end date before the start date, default end date to start date
	IF @EndYMDID < @StartYMDID
		SET @EndYMDID = CAST(CONVERT(VARCHAR,DATEADD(mm,DATEDIFF(mm,0,GETDATE()),0),112) AS INT)

	--add 30 days to the selected end date, which will come in as the first of the selected month
	SELECT @EndYMDID = @EndYMDID+30

    SELECT  *
    FROM    mart.vw_MediaCenterData
    WHERE   ISNULL(PropertyID,0) <> 0
            AND (@CBSA <= 0
			 OR [CBSACode] = @CBSA)
            AND (@Owner = '<All>'
                 OR [SalesRepID] = @Owner)
            AND (@MgtCo = 0
                 OR [MgtCoIDAG] = @MgtCo)
            AND (@PropID = 0
                 OR [PropertyID] = @PropID)
            AND (@Channel = 0
                 OR [SalesRepSalesChannelRole] = CASE WHEN @Channel = 1 THEN 'Field'
                                                      WHEN @Channel = 2 THEN 'Inside'
                                                      WHEN @Channel = 3 THEN 'National'
                                                      WHEN @channel = 4 THEN 'Other'
                                                 END)
			AND YMDID BETWEEN @StartYMDID AND @EndYMDID
END





GO
/****** Object:  StoredProcedure [Reports].[rpt_AGSitesForCOG]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Reports].[rpt_AGSitesForCOG] ( @JobStatus INT )

AS

/******************************************************************************************
*
* Name:    Reports.rpt_AGSitesForCOG
*
* Desc:    AGSites web app for main screen data dump
*
* Test:    EXEC Reports.rpt_AGSitesForCOG 0
*			EXEC Reports.rpt_AGSitesForCOG 1
*			EXEC Reports.rpt_AGSitesForCOG -1
*
* Hist:	01	10/28/2016		Brian Trembley		Initial Version. Ticket # 23968.
**************************************************************************************************/
SET NOCOUNT ON

DECLARE @SQL VARCHAR(8000)

SET @SQL = '
SELECT PROPERTYID, PROPERTYNAME, LISTINGID, STARTDATE, ENDDATE, DOMAIN_URL, DESCRIPTION, CITY, STATECD
FROM    OPENROWSET(''oraoledb.oracle'',''APTG''; ''reader''; ''reader'','' 

SELECT p.propertyid, p.propertyname, plo.listingid, plo.startdate, plo.enddate, d.domain_url, j.description, pc.city, st.statecd
FROM   properties.properties p
     , properties.proplistoptions plo
     , properties.propaddresses pa
     , properties.addresses ad
     , common.postalcodes pc
     , common.states st
     , products.domain d
     , (select j.listingid, j.domainjobstatus_id, djs.description
          from products.domain_jobs j
          join products.domainjob_status djs on j.domainjobstatus_id = djs.jobstatus_id
         where j.last_update_date = (select max(last_update_date) from products.domain_jobs j2 where j2.listingid = j.listingid group by listingid)) j
WHERE plo.optiontypeid = 74
       AND plo.propertyid = p.propertyid
       AND plo.isactive = 1
       AND trunc(sysdate) between plo.startdate - 5 and enddate
       AND p.propertyid = pa.propertyid
       AND pa.addressid = ad.addressid
       AND ad.postalid = pc.postalid
       AND pc.stateid = st.stateid
       AND plo.listingid = j.listingid (+)
       AND plo.listingid = d.listingid (+)
       AND d.isactive (+) = 1
       ' + CASE WHEN @JobStatus = -1 THEN '' 
	            WHEN @JobStatus = 0 THEN 'AND j.domainjobstatus_id IS NULL ' 
				ELSE  'AND j.domainjobstatus_id = '+ CAST(@JobStatus as VARCHAR(3)) 
			END + ' 
ORDER BY propertyname
'') ';


--print @SQL
CREATE TABLE #Results (
	PROPERTYID INT NULL, 
	PROPERTYNAME VARCHAR(1000) NULL, 
	LISTINGID INT NULL, 
	STARTDATE DATETIME NULL , 
	ENDDATE  DATETIME NULL, 
	DOMAIN_URL VARCHAR(1000) NULL, 
	[DESCRIPTION] VARCHAR(1000) NULL, 
	CITY VARCHAR(1000) NULL, 
	STATECD VARCHAR(100) NULL, 
	);

INSERT INTO #Results
EXEC (@SQL);

SELECT *
FROM #Results;

SET NOCOUNT OFF



GO
/****** Object:  StoredProcedure [Reports].[rpt_AverageRents]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Reports].[rpt_AverageRents] (
	@State varchar(65),
    @ViewBy INT,
    @SelectedView VARCHAR(MAX),
    @Bedrooms varchar(8000) )
AS

/****************************************************************************************************
* Name:    Reports.rpt_AverageRent
* Desc:    Returns data used by the Average Rents report
* -----------------------------------------------------------------------------------------
* Test:		EXEC Reports.rpt_AverageRents 'GA',0,'12060','2,1,3,4,5'    
*			EXEC Reports.rpt_AverageRents 'AZ',1,'Phoenix','2,1,3,4,5'
*			EXEC Reports.rpt_AverageRents 'GA',0,'30307','2,1,3,4,5'
* -----------------------------------------------------------------------------------------
* Note:    As for parameters, 0 groups by CBSA/State, 1 groups by city/state, 2 groups by zip/state
* 
* Hist:    01    05/19/2009    David McFarland        Initial Version      
*          02    06/03/2009    David McFarland        Added Listing and coupon counts
*          03    11/01/2010    Richard Chen           Add filter
*		   04	 01/14/2014	   Sarah Mims			  Ticket # 13906 - modified to include Rent
*		   05	 01/22/2015	   Sarah Mims			  No ticket - RentPath reporting project
****************************************************************************************************/

SET NOCOUNT ON


    SELECT  @State										AS StateSelected
           ,@SelectedView								AS ViewByValueSelected
           ,@Bedrooms									AS BedroomsSelected
           ,list.PropertyState							AS PropertyState
		   ,CASE WHEN @ViewBy = 0 THEN zc.CBSAName
				WHEN @ViewBy = 1 THEN list.PropertyCity
				WHEN @ViewBy = 2 THEN list.ZipCode
				END										AS GroupLevel
           ,COUNT(DISTINCT list.ListingID)				AS Listings
           ,SUM(list.CouponActiveOnSite)				AS ListingsWithCoupon
           ,units.Bedrooms								AS Bedrooms
           ,units.Bathrooms								AS Bathrooms
           ,AVG(units.SqFootage)						AS AvgSqFootage
           ,AVG(units.RentPrice)						AS AvgRentPrice
           ,CAST(AVG(units.RentPrice) AS DECIMAL(15,4)) / CAST(AVG(units.SqFootage) AS DECIMAL(15,4)) AS AvgRentPerSqFoot
    FROM    ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS list
    INNER JOIN ApartmentGuide.Dimension.AGRentCombinedDimensionUnits AS units
            ON list.ListingID = units.ListingID
			AND list.Website = units.Website
	LEFT OUTER JOIN DBAUtility.dbo.ZipCBSA AS zc
			ON list.ZipCode = zc.ZipCode
    WHERE   list.StatusID = 1
            AND list.PropertyState = @State
            AND (CHARINDEX(list.PropertyCity + ',',@SelectedView + ',') > 0
                 OR CHARINDEX(list.ZipCode + ',',@SelectedView + ',') > 0
				 OR CHARINDEX(zc.CBSACode + ',',@SelectedView + ',') > 0
				 )
            AND CHARINDEX(CONVERT(VARCHAR,units.Bedrooms) + ',',@Bedrooms + ',') > 0
			AND (ISNULL(zc.CBSAName,'') <> CASE WHEN @ViewBy = 0 THEN '' END
		    OR ISNULL(list.PropertyCity,'') <> CASE WHEN @ViewBy = 1 THEN '' END 
			OR ISNULL(list.ZipCode,'') <> CASE WHEN @ViewBy = 2 THEN '' END)        	
    GROUP BY list.PropertyState
           ,CASE WHEN @ViewBy = 0 THEN zc.CBSAName
				WHEN @ViewBy = 1 THEN list.PropertyCity
				WHEN @ViewBy = 2 THEN list.ZipCode
				END		
           ,units.Bedrooms
           ,units.Bathrooms
    ORDER BY PropertyState
           ,Bedrooms
           ,Bathrooms


SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [Reports].[rpt_AxioDisplay]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Reports].[rpt_AxioDisplay] (
    @UserGUID UNIQUEIDENTIFIER
   ,@RecordsReturned INT
   ,@SearchTerm VARCHAR(50))
/*************************************************************************************************
* Name:	Reports.rpt_AxioDisplay
*-------------------------------------------------------------------------------------------------
* Desc:	This displays all Axio ids that a particular user can see
*-------------------------------------------------------------------------------------------------
* Test:	EXEC Reports.rpt_AxioDisplay '32732F2B-85E7-4142-B7E3-2D0E6F95C538',300000,NULL
*		EXEC Reports.rpt_AxioDisplay 'E11A9543-E50D-46A5-B3A2-A0CFCBFF6A95',300000,NULL
*		EXEC Reports.rpt_AxioDisplay 'E11A9543-E50D-46A5-B3A2-A0CFCBFF6A95',500,'craft'
*		EXEC Reports.rpt_AxioDisplay 'cb2d1aaf-609b-4514-8440-15cc53525638',25,NULL
*-------------------------------------------------------------------------------------------------
* Notes: This pulls back the top number of records determined by the input parameter sorted by Property Name
* THIS IS A CLIENT PORTAL DASHBOARD PROC. BEFORE MAKING CHANGES IN PRODUCTION, THEY MUST BE
* VETTED AND TESTED IN THE DEV & QA DATABASES FIRST.
*-------------------------------------------------------------------------------------------------
* Hist:	01	05/25/2017		Kimberley Morrow			Initial Version. Case 01480140
**************************************************************************************************/
AS
SET NOCOUNT ON;



/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
If this code changes make a corresponding change to the code in Reports.rpt_PropertyLeadsSummary.
The code there uses the same logic but gets different columns
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/


------------------------------------------------------
--Declare & Set Variables
------------------------------------------------------
DECLARE @AccessToAll INT
  
SET @SearchTerm = CONCAT('%',@SearchTerm,'%')  

BEGIN TRY
    DROP TABLE #workingset
END TRY
BEGIN CATCH
END CATCH
  
	

CREATE TABLE #workingset (
    ListingID INT
   ,UserGUID UNIQUEIDENTIFIER
   ,AGPropertyID INT
   ,RentPropertyID INT
   ,PropertyName VARCHAR(1000)
   ,PropertyCity VARCHAR(300)
   ,PropertyState CHAR(20)
   ,PropertyZip INT
   ,AGStatus INT
   ,RentStatus INT
   ,TotalUserCanSee INT)
CREATE CLUSTERED INDEX CI_workingset_77219_on_ListingID ON #workingset(ListingID)

	---------------------------------------------------------------------------------------------------------------------------------
	--Hard-code Access To All to 1 for all roles except 6,7, and 14 (Property Manager (Client),Management Company (Client) and Read Only)
	---------------------------------------------------------------------------------------------------------------------------------
SELECT  @AccessToAll = ISNULL(CASE WHEN dur.RoleID NOT IN (6,7,14) THEN 1
                                   ELSE 0
                              END,0)
FROM    Dimension.vw_DSUM_User AS du
JOIN    Dimension.vw_DSUM_UserRole AS dur
        ON du.UserID = dur.UserID
WHERE   du.UserGUID = @UserGUID
		
------------------------------------------------------------------------------------------------
--Get property list. If they have Access To All, give them the top @RecordsReturned Properties
------------------------------------------------------------------------------------------------
IF @AccessToAll > 0
    BEGIN
        SELECT TOP (@RecordsReturned)
				--dl.ListingID,
                @UserGUID AS UserGUID
               ,MAX(PropertyIDAG) AS AGPropertyID
               ,MAX(dl.PropertyIDRent) AS RentPropertyID
               ,MAX(CASE WHEN ASCII(LEFT(dl.PropertyName,1)) BETWEEN 33 AND 126 THEN LTRIM(dl.PropertyName)
                         ELSE LTRIM(RIGHT(dl.PropertyName,LEN(dl.PropertyName) - 1))
                    END) AS PropertyName
               ,MAX(dl.PropertyCity) AS PropertyCity
               ,MAX(dl.PropertyState) AS PropertyState
               ,MAX(dl.PropertyZipCode) AS PropertyZip
               ,MAX(StatusIDAG) AS AGStatus
               ,MAX(StatusIDRent) AS RentStatus
               ,COUNT(dl.ListingID) OVER () AS TotalUserCanSee
               ,a.Axio_Project_ID__c AS ProjectID
			   ,a.Axio_Market_ID__c AS MarketID
			   ,a.Axio_ID__c AS AxioID
               ,a.Is_Axio_Active__c AS AxioActive
        FROM    RentPath.Dimension.Listings AS dl
        INNER JOIN SalesForce.dimension.SALESFORCE_XREF AS sx
                ON dl.PropertyIDAG = sx.AGPropertyID
        INNER JOIN SalesForce.dbo.Account AS a
                ON sx.SalesforceAccountID = a.Id
        WHERE   (dl.StatusIDAG = 1
                 OR dl.StatusIDRent = 1)
                AND dl.PropertyName LIKE CASE WHEN @SearchTerm IS NOT NULL THEN @SearchTerm
                                              ELSE dl.PropertyName
                                         END
                AND PropertyIDAG IS NOT NULL
        GROUP BY dl.ListingID
               ,a.Axio_Project_ID__c
			   ,a.Axio_Market_ID__c
			   ,a.Axio_ID__c
               ,a.Is_Axio_Active__c
        ORDER BY PropertyName
    END

ELSE
------------------------------------------------------------------------------------------------
-- If they do NOT have Access To All, find out what they can see and give them the top @RecordsReturned Properties
------------------------------------------------------------------------------------------------
    SELECT TOP (@RecordsReturned)
			--x.ListingID,
            X.UserGUID
           ,pd.AGPropertyID
           ,pd.RentPropertyID
           ,pd.PropertyName
           ,pd.PropertyCity
           ,pd.PropertyState
           ,pd.PropertyZip
           ,pd.AGStatus
           ,pd.RentStatus
           ,COUNT(X.UserGUID) OVER () AS TotalUserCanSee
           ,pd.ProjectID
		   ,pd.MarketID
		   ,pd.AxioID
           ,pd.AxioActive
    FROM    (
             SELECT UserGUID
                   ,ListingID
             FROM   Dimension.vw_DSUM_Management
             WHERE  UserGUID = @UserGUID
             UNION
             SELECT UserGUID
                   ,ListingID
             FROM   Dimension.vw_DSUM_Property
             WHERE  UserGUID = @UserGUID
             UNION
             SELECT ds.UserGUID
                   ,dl.ListingID
             FROM   Dimension.vw_DSUM_Market AS ds
             JOIN   RentPath.Dimension.Listings AS dl
                    ON ds.ListingID = dl.ListingID
                       AND ds.LocalLookupValue = CASE WHEN dl.MarketCD = 'P00SAL' THEN 'W02000'
                                                      ELSE dl.MarketCD
                                                 END
             WHERE  ds.UserGUID = @UserGUID
                    AND (dl.StatusIDAG = 1
                         OR dl.StatusIDRent = 1)
             GROUP BY ds.UserGUID
                   ,dl.ListingID
            ) AS X
    JOIN    (
             SELECT dl.ListingID
                   ,MAX(dl.PropertyIDAG) AS AGPropertyID
                   ,MAX(dl.PropertyIDRent) AS RentPropertyID
                   ,MAX(CASE WHEN ASCII(LEFT(dl.PropertyName,1)) BETWEEN 33 AND 126 THEN LTRIM(dl.PropertyName)
                             ELSE LTRIM(RIGHT(dl.PropertyName,LEN(dl.PropertyName) - 1))
                        END) AS PropertyName
                   ,MAX(dl.PropertyCity) AS PropertyCity
                   ,MAX(dl.PropertyState) AS PropertyState
                   ,MAX(dl.PropertyZipCode) AS PropertyZip
                   ,MAX(dl.StatusIDAG) AS AGStatus
                   ,MAX(dl.StatusIDRent) AS RentStatus
                   ,a.Axio_ID__c AS ProjectID
				   ,a.Axio_Market_ID__c AS MarketID
				   ,a.Axio_ID__c AS AxioID
                   ,a.Is_Axio_Active__c AS AxioActive
             FROM   RentPath.Dimension.Listings AS dl
             INNER JOIN SalesForce.dimension.SALESFORCE_XREF AS sx
                    ON dl.PropertyIDAG = sx.AGPropertyID
             INNER JOIN SalesForce.dbo.Account AS a
                    ON sx.SalesforceAccountID = a.Id
             WHERE  (dl.StatusIDAG = 1
                     OR dl.StatusIDRent = 1)
                    AND dl.PropertyName LIKE CASE WHEN @SearchTerm IS NOT NULL THEN @SearchTerm
                                                  ELSE dl.PropertyName
                                             END
                    AND dl.PropertyIDAG IS NOT NULL
             GROUP BY dl.ListingID
                   ,a.Axio_ID__c
				   ,a.Axio_Market_ID__c
				   ,a.Axio_ID__c
                   ,a.Is_Axio_Active__c
            ) AS pd
            ON X.ListingID = pd.ListingID
    ORDER BY pd.PropertyName



SET NOCOUNT OFF;


SET ANSI_NULLS ON










GO
/****** Object:  StoredProcedure [Reports].[rpt_CallAnalysisCharts]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Reports].[rpt_CallAnalysisCharts]
	(
	@StartDate				DATETIME
	,@EndDate				DATETIME  
	,@GroupLevel			INT
	,@GroupID				INT
	,@CBSACD				VARCHAR(4000)
	,@TimeGrain				INT
	)
/*************************************************************************************************
*
* Name:	Reports.rpt_CallAnalysisCharts
*
* Desc:	This provides AvgCallWaitTime and AbandonedCalls for either a Property or a Management 
*		Company by hour or day. This is the updated proc to use for both the Property Phone Lead Details
*		and Management Call Analysis reports on MyAG.
*
* Test:	EXEC Reports.rpt_CallAnalysisCharts '12/01/2013','01/07/2014',0, 29379, '12060', 0
*
* Note: Group Level 0 = Property, 1 = Management Company. 
*		Time Grain 0  = Hour, 1 = Day.
*
* Hist:	01	10/07/2013		Sarah Mims			Initial Version. Ticket #12806.
* Hist:	02	01/08/2014	    Shetal Gandhi	    Ticket 13864, modified to include Rent. Added Items here because
*												of presentation issues in report.
*Hist:	03	12/15/2014		Sarah Mims			No ticket - removed website parameter
*		04	10/25/2016		Bob Langley			Ticket 24212 - Changed to add MissedCalls to leads (where does connectedcalls)
**************************************************************************************************/
AS

SET NOCOUNT ON

	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    DECLARE @TrackDate DATETIME
       ,@LengthInSeconds INT
       ,@DatabaseName VARCHAR(128)
                
    SET @TrackDate = GETDATE()
    SET @LengthInSeconds = 0
    SET @DatabaseName = DB_NAME()        
		
    EXEC DBAUtility.dbo.pr_Logging_StoredProcsNoTemp 
        @DatabaseName = @DatabaseName
       , -- varchar(128)
        @ProcName = 'Reports.rpt_CallAnalysisCharts'
       , -- varchar(128)
        @StepName = 'Execute Procedure'
       , -- varchar(128)
        @VariableStates = ''
       , -- varchar(500)
        @LengthInSeconds = @LengthInSeconds
       , -- int
        @Comments = 'Execute Procedure'; -- varchar(500)

----------------------------------------------------------
--Drop temp tables if not NULL
----------------------------------------------------------
  IF OBJECT_ID('tempdb..#CallTimeframe') IS NOT NULL 
     DROP TABLE #CallTimeframe

----------------------------------------------------------
--Declare and set variables
----------------------------------------------------------
DECLARE @StartYMDID INT
,@EndYMDID			INT
,@CallTimeframeCount INT
,@MaxCallTimeframeCount INT

SET @StartYMDID = CAST(CONVERT(VARCHAR(10),@StartDate,112) AS INT)
SET @EndYMDID = CAST(CONVERT(VARCHAR(10),@EndDate,112) AS INT)

-------------------------------------------------------------------------
--Create a temp table to hold Time Frame segments so that there can be
--a clean comparison to National Data
-------------------------------------------------------------------------
SELECT  @CallTimeframeCount = CASE @TimeGrain
                                WHEN 0 THEN 0
                                ELSE 1
                              END
       ,@MaxCallTimeframeCount = CASE @TimeGrain
                                   WHEN 0 THEN 24
                                   ELSE 8
                                 END
CREATE TABLE #CallTimeframe (CallTimeframe INT)
		
WHILE @CallTimeframeCount < @MaxCallTimeframeCount  --don't load 24, hours run from 0 to 23
    BEGIN
        INSERT  INTO #CallTimeframe
                (CallTimeframe)
        VALUES  (@CallTimeframeCount)
			
        SET @CallTimeframeCount = @CallTimeframeCount + 1
    END


-----------------------------------------------------------------------------------------------------
--Select out desired time frame (Hour or Day), group level data (Property or Management Company)
--and National Data
-----------------------------------------------------------------------------------------------------

SELECT ct.CallTimeframe
,CASE @TimeGrain WHEN 0 THEN 
	CASE WHEN ct.CallTimeFrame IN (12,0) THEN CAST(12 AS CHAR(2)) ELSE CAST(ct.CallTimeFrame %12 AS CHAR(2)) END 
	+ CASE ct.CallTimeFrame/12 WHEN 1 THEN ' PM' ELSE ' AM' END
	ELSE nt.TimeGrainName END																								AS TimeFrameName 
,ISNULL(gd.AbandonedCalls,0)																								AS AbandonedCalls
,ISNULL(gd.AvgCallWaitTime,0)																								AS AvgCallWaitTime
,ISNULL(nt.AbandonedCalls,0)																								AS NationalAbandonedCalls
,ISNULL(nt.AvgCallWaitTime,0)																								AS NationalAvgCallWaitTime
FROM #CallTimeframe AS ct

--Group Level Data (Property or Management Company)
LEFT OUTER JOIN
(
SELECT	CASE WHEN @TimeGrain = 0 THEN d.HourOfDay ELSE d.DayOfWeekNum END												AS TimeGrainNum
		,CASE WHEN @TimeGrain = 0 THEN d.HourName ELSE d.DayOfWeekName END												AS TimeGrainName
		,SUM(CASE WHEN d.IsAbandoned = 1 THEN 1
					ELSE 0
			END)																										AS AbandonedCalls
		,CASE WHEN SUM(CASE WHEN d.CallStatus = 1
								AND d.AudioURL IS NOT NULL
								AND d.TotalCallerTrimTalkTime IS NOT NULL THEN 1
							ELSE 0
						END) = 0 THEN 0
				ELSE SUM(d.TimePriorToCallerSpeaking) / CAST(SUM(CASE WHEN d.CallStatus IN (1,2,3)			--Ticket 24212  adding missed calls to connected.
																			AND d.AudioURL IS NOT NULL
																			AND d.TotalCallerTrimTalkTime IS NOT NULL THEN 1
																		ELSE 0
																END) AS MONEY)
		END																												AS AvgCallWaitTime			

FROM
	(
	SELECT  CASE WHEN @GroupLevel = 0 THEN dl.listingID
				 ELSE dl.MgtCoID
			END																													AS GroupID
		   ,DATEPART(HOUR,cag.CallStartDateTime)																				AS HourOfDay
		   ,CASE WHEN DATEPART(HOUR,cag.CallStartDateTime) IN (12,0) 
		   THEN CAST(12 AS CHAR(2)) ELSE CAST(DATEPART(HOUR,cag.CallStartDateTime) %12 AS CHAR(2)) END 
		   + CASE DATEPART(HOUR,cag.CallStartDateTime)/12 WHEN 1 THEN ' PM' ELSE ' AM' END										AS HourName
		   ,LEFT(DATENAME(WEEKDAY,cag.CallStartDateTime),3)																		AS DayOfWeekName
		   ,DATEPART(WEEKDAY,cag.CallStartDateTime)																				AS DayOfWeekNum
		   ,CASE WHEN cag.IsAbandoned = 1 THEN 1
				 ELSE 0
			END																													AS IsAbandoned
		   ,cag.CallStatus
		   ,cag.AudioURL
		   ,cag.TimePriorToCallerSpeaking
		   ,cag.TotalCallerTrimTalkTime
	FROM ApartmentGuide.Fact.AGRentPhoneLeads AS cag
	JOIN    ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
			ON cag.ListingID = dl.ListingID
			AND cag.Website = dl.Website
	JOIN    DBAUtility.dbo.ZipCBSA AS zc
			ON dl.ZipCode = zc.ZIPCode
	WHERE   cag.YMDID BETWEEN @StartYMDID AND @EndYMDID
			AND cag.CallType <> 'CRAIGSLIST'
			AND dl.ListingID = CASE WHEN @GroupLevel = 0 THEN @GroupID
									 ELSE dl.ListingID
								END
			AND ISNULL(dl.MgtCoID,99999) = CASE WHEN @GroupLevel = 1 THEN @GroupID
								  ELSE ISNULL(dl.MgtCoID,99999)
							 END
			AND ISNULL(CHARINDEX(zc.CBSACode,@CBSACD),0) >= CASE WHEN @GroupLevel = 1 THEN 1
																 ELSE 0
															END
	) AS d	
														 				
GROUP BY CASE WHEN @TimeGrain = 0 THEN d.HourOfDay ELSE d.DayOfWeekNum END												
		,CASE WHEN @TimeGrain = 0 THEN d.HourName ELSE d.DayOfWeekName END

) AS gd

ON ct.CallTimeframe = gd.TimeGrainNum 
    	  
--National Data
LEFT OUTER JOIN
			(
			SELECT  CASE @TimeGrain WHEN 0 THEN DATEPART(HOUR,cag.CallStartDateTime)
					ELSE DATEPART(WEEKDAY,cag.CallStartDateTime)	
					END																												AS TimeGrainNum
				   ,CASE @TimeGrain WHEN 0 THEN 
							CASE WHEN DATEPART(HOUR,cag.CallStartDateTime) IN (12,0) 
							THEN CAST(12 AS CHAR(2)) ELSE CAST(DATEPART(HOUR,cag.CallStartDateTime) %12 AS CHAR(2)) END 
							+ CASE DATEPART(HOUR,cag.CallStartDateTime)/12 WHEN 1 THEN ' PM' ELSE ' AM' END 
							ELSE LEFT(DATENAME(WEEKDAY,cag.CallStartDateTime),3)	END												AS TimeGrainName	
				   ,SUM(CASE WHEN cag.IsAbandoned = 1 THEN 1
							 ELSE 0
						END)																										AS AbandonedCalls
				   ,CASE WHEN SUM(CASE WHEN cag.CallStatus IN (1,2,3)					--Ticket 24212  adding missed calls to connected.		
											AND cag.AudioURL IS NOT NULL
											AND cag.TotalCallerTrimTalkTime IS NOT NULL THEN 1
									   ELSE 0
								  END) = 0 THEN 0
						 ELSE SUM(cag.TimePriorToCallerSpeaking) / CAST(SUM(CASE WHEN cag.CallStatus IN (1,2,3)					--Ticket 24212  adding missed calls to connected.
																					  AND cag.AudioURL IS NOT NULL
																					  AND cag.TotalCallerTrimTalkTime IS NOT NULL THEN 1
																				 ELSE 0
																			END) AS MONEY)
					END																												AS AvgCallWaitTime
			FROM    ApartmentGuide.Fact.AGRentPhoneLeads AS cag
			WHERE   cag.YMDID BETWEEN @StartYMDID AND @EndYMDID
					AND cag.CallType <> 'CRAIGSLIST'
			GROUP BY    CASE @TimeGrain WHEN 0 THEN DATEPART(HOUR,cag.CallStartDateTime)
					ELSE DATEPART(WEEKDAY,cag.CallStartDateTime)	
					END																												
				  ,CASE @TimeGrain WHEN 0 THEN 
					CASE WHEN DATEPART(HOUR,cag.CallStartDateTime) IN (12,0) THEN CAST(12 AS CHAR(2)) ELSE CAST(DATEPART(HOUR,cag.CallStartDateTime) %12 AS CHAR(2)) END + CASE DATEPART(HOUR,cag.CallStartDateTime)/12 WHEN 1 THEN ' PM' ELSE ' AM' END 
					ELSE LEFT(DATENAME(WEEKDAY,cag.CallStartDateTime),3)	END	
			) AS nt
ON nt.TimeGrainNum = ct.CallTimeFrame																					
						
ORDER BY ct.CallTimeframe  


SET NOCOUNT OFF 




GO
/****** Object:  StoredProcedure [Reports].[rpt_CallAnalysisData]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Reports].[rpt_CallAnalysisData] (
    @StartDate DATETIME
   ,@EndDate DATETIME
   ,@GroupLevel INT
   ,@GroupID INT
   ,@CBSACD VARCHAR(4000))
AS /*************************************************************************************************
*
* Name:	Reports.rpt_CallAnalysisData
*
* Desc:	This provides the data needed for both the Property Phone Lead Details and Management
*		Call Analysis reports. The dataset returned depends on the Group Level and GroupID selected.
*
* Test:	EXEC Reports.rpt_CallAnalysisData '01/01/2017','01/31/2017',1, 6022, NULL
*		EXEC Reports.rpt_CallAnalysisData_24212_TEST '09/01/2013','10/22/2013',0,101460,NULL
*		EXEC Reports.rpt_CallAnalysisData '09/01/2016','10/17/2016',0,77500,NULL
* Note: Group Level 0 = Property, 1 = Management Company
*
* Hist:	01	10/07/2013		Sarah Mims			Initial Version. Ticket #12806.
*		02	10/23/2013		Sarah Mims			Ticket #13656 modified #BaseData query to account
*												for NULL MgtCoIDs
* Hist: 03	11/15/2013		Don Wert			Ticket 13713, add CallID to the property output list to support the new media player
* Hist: 04	12/03/2013		Clinton Woody		Ticket 13938, Because properties do not have a CBSA hd to change #base join to left outer join
* Hist: 05	01/14/2014		Sarah Mims			Ticket # 14331 - changed "Internet" to "Desktop" in sd subquery and any other places "Internet" leads are referenced
* Hist:	06	12/15/2014		Sarah Mims			No ticket - removed website parameter
* Hist: 07	10/18/2016		Bob Langley			Ticket 24212 - Changed to add MissedCalls to leads (where does connectedcalls)
* Hist:	08	05/09/2017	    Kimberley Morrow	Case# 01468091 - Changed audio url location. 
												Please note that the RDL for Report.Rentpath.com uses a different "AudioURL" url than sqlrpt01 for 30_phone_leads because of Save Desk
**************************************************************************************************/

SET NOCOUNT ON;

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
DECLARE @TrackDate DATETIME
   ,@LengthInSeconds INT
   ,@DatabaseName VARCHAR(128);
                
SET @TrackDate = GETDATE();
SET @LengthInSeconds = 0;
SET @DatabaseName = DB_NAME();        
		
EXEC DBAUtility.dbo.pr_Logging_StoredProcsNoTemp
    @DatabaseName = @DatabaseName
   , -- varchar(128)
    @ProcName = 'Reports.rpt_CallAnalysisData'
   , -- varchar(128)
    @StepName = 'Execute Procedure'
   , -- varchar(128)
    @VariableStates = ''
   , -- varchar(500)
    @LengthInSeconds = @LengthInSeconds
   , -- int
    @Comments = 'Execute Procedure'; -- varchar(500)

----------------------------------------------------------------------------------------------------------------
--Drop temp table if not null
----------------------------------------------------------------------------------------------------------------

IF OBJECT_ID('tempdb..#BaseData') IS NOT NULL
    BEGIN    
        DROP TABLE #BaseData;
    END;

IF OBJECT_ID('tempdb..#QuintileCutoffs') IS NOT NULL
    BEGIN   
        DROP TABLE #QuintileCutoffs;
    END;

IF OBJECT_ID('tempdb..#ActiveListings') IS NOT NULL
    BEGIN    
        DROP TABLE #ActiveListings;
    END;

IF OBJECT_ID('tempdb..#AllListings') IS NOT NULL
    BEGIN    
        DROP TABLE #AllListings;
    END;
----------------------------------------------------------------------------------------------------------------
--Declare and set variables
----------------------------------------------------------------------------------------------------------------

DECLARE @StartYMDID INT
   ,@EndYMDID INT;

SET @StartYMDID = CAST(CONVERT(VARCHAR(10),@StartDate,112) AS INT);
SET @EndYMDID = CAST(CONVERT(VARCHAR(10),@EndDate,112) AS INT);

SET @GroupLevel = ISNULL(@GroupLevel,0);




------------------------------------------------------------------------
/*******************APPLIES TO MANAGEMENT LEVEL ONLY********************/
--Find all the ListingIDs that were active at any point during that time
--frame that were associated with management company based on the
--Website parameter selected 
------------------------------------------------------------------------
--Active Listings (for calculations)

SELECT  dl.ListingID
       ,dl.Website
INTO    #ActiveListings
FROM    ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
JOIN    ApartmentGuide.Mart.AGRentCombinedMartListings AS ml
        ON dl.ListingID = ml.ListingID
           AND dl.Website = ml.Website
LEFT OUTER JOIN DBAUtility.dbo.ZipCBSA AS zc
        ON dl.ZipCode = zc.ZIPCode
WHERE   ml.YMDID BETWEEN @StartYMDID AND @EndYMDID
        AND ISNULL(dl.MgtCoID,9999) = CASE WHEN @GroupLevel = 1 THEN @GroupID
                                           ELSE ISNULL(dl.MgtCoID,9999)
                                      END
        AND ISNULL(CHARINDEX(zc.CBSACode,@CBSACD),0) >= CASE WHEN @GroupLevel = 1 THEN 1
                                                             ELSE 0
                                                        END
GROUP BY dl.ListingID
       ,dl.Website
HAVING  MAX(ml.ListingStatusID) = 1;     


--All Listings (for Flags)
SELECT  dl.ListingID
       ,ISNULL(MAX(CASE WHEN dl.Website = 'AG' THEN 1
                        ELSE 0
                   END),0) AS AGFlag
       ,ISNULL(MAX(CASE WHEN ml.Website = 'AG'
                             AND ml.ListingStatusID = 1 THEN 1
                        ELSE 0
                   END),0) AS AGListingStatusID
       ,ISNULL(MAX(CASE WHEN dl.Website = 'Rent' THEN 1
                        ELSE 0
                   END),0) AS RentFlag
       ,ISNULL(MAX(CASE WHEN ml.Website = 'Rent'
                             AND ml.ListingStatusID = 1 THEN 1
                        ELSE 0
                   END),0) AS RentListingStatusID
INTO    #AllListings
FROM    ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
JOIN    ApartmentGuide.Mart.AGRentCombinedMartListings AS ml
        ON dl.ListingID = ml.ListingID
           AND dl.Website = ml.Website
LEFT OUTER JOIN DBAUtility.dbo.ZipCBSA AS zc
        ON dl.ZipCode = zc.ZIPCode
WHERE   ml.YMDID BETWEEN @StartYMDID AND @EndYMDID
        AND ISNULL(dl.MgtCoID,9999) = CASE WHEN @GroupLevel = 1 THEN @GroupID
                                           ELSE ISNULL(dl.MgtCoID,9999)
                                      END
        AND ISNULL(CHARINDEX(zc.CBSACode,@CBSACD),0) >= CASE WHEN @GroupLevel = 1 THEN 1
                                                             ELSE 0
                                                        END
GROUP BY dl.ListingID;

----------------------------------------------------------------------------------------------------------------
--Create Quintile Cutoffs for Percent Missed (includes Busy), Percent Abandoned and Average Wait Time
----------------------------------------------------------------------------------------------------------------

SELECT  AbandonCut45 = MAX(CASE WHEN ct.AbandonedQuintile = 5 THEN ct.PercentAbandoned
                                ELSE NULL
                           END)
       ,AbandonCut34 = MAX(CASE WHEN ct.AbandonedQuintile = 4 THEN ct.PercentAbandoned
                                ELSE NULL
                           END)
       ,AbandonCut23 = MAX(CASE WHEN ct.AbandonedQuintile = 3 THEN ct.PercentAbandoned
                                ELSE NULL
                           END)
       ,AbandonCut12 = MAX(CASE WHEN ct.AbandonedQuintile = 2 THEN ct.PercentAbandoned
                                ELSE NULL
                           END)
       ,MissedCut45 = MAX(CASE WHEN ct.MissedQuintile = 5 THEN ct.PercentMissed
                               ELSE NULL
                          END)
       ,MissedCut34 = MAX(CASE WHEN ct.MissedQuintile = 4 THEN ct.PercentMissed
                               ELSE NULL
                          END)
       ,MissedCut23 = MAX(CASE WHEN ct.MissedQuintile = 3 THEN ct.PercentMissed
                               ELSE NULL
                          END)
       ,MissedCut12 = MAX(CASE WHEN ct.MissedQuintile = 2 THEN ct.PercentMissed
                               ELSE NULL
                          END)
       ,WaitTimeCut45 = MAX(CASE WHEN ct.WaitTimeQuintile = 5 THEN ct.AvgCallWaitTime
                                 ELSE NULL
                            END)
       ,WaitTimeCut34 = MAX(CASE WHEN ct.WaitTimeQuintile = 4 THEN ct.AvgCallWaitTime
                                 ELSE NULL
                            END)
       ,WaitTimeCut23 = MAX(CASE WHEN ct.WaitTimeQuintile = 3 THEN ct.AvgCallWaitTime
                                 ELSE NULL
                            END)
       ,WaitTimeCut12 = MAX(CASE WHEN ct.WaitTimeQuintile = 2 THEN ct.AvgCallWaitTime
                                 ELSE NULL
                            END)
INTO    #QuintileCutoffs
FROM    (
         SELECT d.ListingID
               ,d.PercentAbandoned
               ,NTILE(5) OVER (ORDER BY d.PercentAbandoned DESC) AS AbandonedQuintile
               ,d.PercentMissed
               ,NTILE(5) OVER (ORDER BY d.PercentMissed DESC) AS MissedQuintile
               ,d.AvgCallWaitTime
               ,NTILE(5) OVER (ORDER BY d.AvgCallWaitTime DESC) AS WaitTimeQuintile
         FROM   (
                 SELECT cag.ListingID
                       ,CASE WHEN SUM(CASE WHEN cag.CallStatus IN (1,2,3)			--Ticket 24212  adding missed calls to connected.
                                                AND cag.AudioURL IS NOT NULL THEN 1
                                           ELSE 0
                                      END) = 0 THEN 0
                             ELSE SUM(CASE WHEN cag.IsAbandoned = 1 THEN 1
                                           ELSE 0
                                      END) / CAST(SUM(CASE WHEN cag.CallStatus IN (1,2,3)			--Ticket 24212  adding missed calls to connected.
                                                                AND cag.AudioURL IS NOT NULL THEN 1
                                                           ELSE 0
                                                      END) AS MONEY)
                        END AS PercentAbandoned
                       ,CASE WHEN SUM(1) = 0 THEN 0
                             ELSE SUM(CASE WHEN cag.CallStatus IN (2,3) THEN 1
                                           ELSE 0
                                      END) / CAST(SUM(1) AS MONEY)
                        END AS PercentMissed
                       ,CASE WHEN SUM(CASE WHEN cag.CallStatus IN (1,2,3)			--Ticket 24212  adding missed calls to connected.
                                                AND cag.AudioURL IS NOT NULL
                                                AND cag.TotalCallerTrimTalkTime IS NOT NULL THEN 1
                                           ELSE 0
                                      END) = 0 THEN 0
                             ELSE SUM(cag.TimePriorToCallerSpeaking) / CAST(SUM(CASE WHEN cag.CallStatus IN (1,2,3)			--Ticket 24212  adding missed calls to connected.
                                                                                          AND cag.AudioURL IS NOT NULL
                                                                                          AND cag.TotalCallerTrimTalkTime IS NOT NULL THEN 1
                                                                                     ELSE 0
                                                                                END) AS MONEY)
                        END AS AvgCallWaitTime
                 FROM   ApartmentGuide.Fact.AGRentPhoneLeads AS cag
                 WHERE  cag.YMDID BETWEEN @StartYMDID AND @EndYMDID
                        AND cag.CallType <> 'CRAIGSLIST'
                 GROUP BY cag.ListingID
                ) AS d
        ) AS ct;
		
--------------------------------------------------------------------------------------------------------------------------------------
--Create base dataset based on group level
--------------------------------------------------------------------------------------------------------------------------------------
SELECT  @GroupID AS GroupID
       ,dl.ListingID
       ,dl.PropertyName
       ,dl.MgtCoName
       ,cag.CallID
       ,DATEPART(HOUR,cag.CallStartDateTime) AS CallHourOfDay
       ,DATEPART(WEEKDAY,cag.CallStartDateTime) AS CallDayOfWeekNum
       ,LEFT(DATENAME(WEEKDAY,cag.CallStartDateTime),3) AS CallDayOfWeekName
       ,CONVERT(VARCHAR(10),cag.CallStartDateTime,101) AS CallDate
       ,SUBSTRING(CONVERT(VARCHAR(30),cag.CallStartDateTime,100),13,7) AS CallTime
       ,CASE WHEN ph.FirstName IS NULL
                  AND ph.LastName IS NULL THEN cag.CallerName
             ELSE ISNULL(ph.FirstName,'') + ' ' + ISNULL(ph.LastName,'')
        END AS CallerName
       ,cag.CallerPhoneNumber
       ,cag.CallerLocation
       ,zc.CBSACode
       ,zc.CBSAName
       ,ISNULL(pc.LeadMediumDesc,'Not Categorized') AS LeadMediumDesc
       ,CASE cag.CallStatus
          WHEN 1 THEN 'Connected'
          WHEN 2 THEN 'Missed'
          WHEN 3 THEN 'Missed'
          ELSE 'Unknown'
        END AS TextCallStatus
       ,cag.CallStatus
       ,cag.IsAbandoned
       ,cag.DurationInSeconds
       ,cag.TotalCallerTrimTalkTime
       ,cag.TimePriorToCallerSpeaking
       ,CASE WHEN CASE WHEN cag.CallStatus IN (1,2,3)			--Ticket 24212  adding missed calls to connected.
                            AND cag.TotalCallerTrimTalkTime IS NOT NULL
                            AND cag.AudioURL IS NOT NULL THEN 1
                       ELSE 0
                  END = 0 THEN 0
             ELSE CAST(cag.TimePriorToCallerSpeaking AS MONEY) / CASE WHEN cag.CallStatus IN (1,2,3)			--Ticket 24212  adding missed calls to connected.
                                                                           AND cag.TotalCallerTrimTalkTime IS NOT NULL
                                                                           AND cag.AudioURL IS NOT NULL THEN 1
                                                                      ELSE 0
                                                                 END
        END AS AvgCallWaitTime
	   ,cag.AudioURL
       ,(CASE WHEN (cag.AudioURL IS NOT NULL)  THEN 'https://dashboard.apartmentguide.com/audio/mp3player/' + LTRIM(RTRIM(CONVERT(VARCHAR(300),cag.CallID)))  
              WHEN (cag.AudioURL IS NOT NULL) AND cag.Website = 'RENT' THEN 'https://dashboard.rent.com/audio/mp3player/' + LTRIM(RTRIM(CONVERT(VARCHAR(300),cag.CallID)))
			  ELSE NULL
         END) AS AudioURLNew
		 --Please note that the RDL for Report.Rentpath.com uses a different "AudioURL" url than sqlrpt01 for 30_phone_leads because of Save Desk
       ,CASE WHEN cag.AudioURL IS NOT NULL THEN 1
             ELSE 0
        END AS CallRecording
       ,dl.Website
INTO    #BaseData
FROM    ApartmentGuide.Fact.AGRentPhoneLeads AS cag
JOIN    ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
        ON cag.ListingID = dl.ListingID
           AND cag.Website = dl.Website
LEFT OUTER JOIN ApartmentGuide.Dimension.PhoneLookup AS ph
        ON cag.CallerPhoneNumber = ph.PhoneNumber
LEFT OUTER JOIN (
                 SELECT LTRIM(SUBSTRING(LeadSourceBusinessKey,CHARINDEX('-',LeadSourceBusinessKey) + 1,LEN(LeadSourceBusinessKey))) AS LeadType
                       ,DBSourceSystemDesc
                       ,CASE WHEN dss.DBSourceSystemKey = 1 THEN 'AG'
                             ELSE 'Rent'
                        END AS Website
                       ,LeadTypeDesc
                       ,LeadMediumDesc
                 FROM   WAREHOUSE.Conformed.LeadSource AS ls
                 JOIN   WAREHOUSE.Conformed.DBSourceSystem AS dss
                        ON ls.DBSourceSystemKey = dss.DBSourceSystemKey
                 WHERE  dss.DBSourceSystemKey IN (1,6)
                        AND ls.LeadTypeDesc = 'Phone'
                ) AS pc
        ON cag.CallType = pc.LeadType
           AND cag.Website = pc.Website
LEFT OUTER JOIN DBAUtility.dbo.ZipCBSA AS zc
        ON dl.ZipCode = zc.ZIPCode
WHERE   cag.YMDID BETWEEN @StartYMDID AND @EndYMDID
        AND cag.CallType <> 'CRAIGSLIST'
        AND dl.ListingID = CASE WHEN @GroupLevel = 0 THEN @GroupID
                                ELSE dl.ListingID
                           END
        AND ISNULL(dl.MgtCoID,9999) = CASE WHEN @GroupLevel = 1 THEN @GroupID
                                           ELSE ISNULL(dl.MgtCoID,9999)
                                      END
        AND ISNULL(CHARINDEX(zc.CBSACode,@CBSACD),0) >= CASE WHEN @GroupLevel = 1 THEN 1
                                                             ELSE 0
                                                        END;                                    

---------------------------------------------------------------------------------------
--Get report data including summary for selected group level
---------------------------------------------------------------------------------------
IF @GroupLevel = 0    --If the group level is Property then do the following		
    SELECT  sd.ListingID
           ,sd.CBSAName
           ,sd.TotalCalls
           ,sd.ConnectedCalls		--Ticket 24212  now includes Missed Calls
           ,sd.DesktopConnectedCalls
           ,sd.MobileConnectedCalls
           ,sd.PrintConnectedCalls
           ,sd.MissedCalls
           ,sd.PercentMissed
           ,CASE WHEN sd.PercentMissed > qc.MissedCut12 THEN 1
                 WHEN sd.PercentMissed > qc.MissedCut23 THEN 2
                 WHEN sd.PercentMissed > qc.MissedCut34 THEN 3
                 WHEN sd.PercentMissed > qc.MissedCut45 THEN 4
                 ELSE 5
            END AS MissedRank
           ,sd.AbandonedCalls
           ,sd.PercentAbandoned
           ,CASE WHEN sd.PercentAbandoned > qc.AbandonCut12 THEN 1
                 WHEN sd.PercentAbandoned > qc.AbandonCut23 THEN 2
                 WHEN sd.PercentAbandoned > qc.AbandonCut34 THEN 3
                 WHEN sd.PercentAbandoned > qc.AbandonCut45 THEN 4
                 ELSE 5
            END AS AbandondedRank
           ,sd.AvgCallDuration
           ,sd.AvgCallWaitTime
           ,CASE WHEN sd.AvgCallWaitTime > qc.WaitTimeCut12 THEN 1
                 WHEN sd.AvgCallWaitTime > qc.WaitTimeCut23 THEN 2
                 WHEN sd.AvgCallWaitTime > qc.WaitTimeCut34 THEN 3
                 WHEN sd.AvgCallWaitTime > qc.WaitTimeCut45 THEN 4
                 ELSE 5
            END AS WaitTimeRank
           ,dbd.CallDate
           ,dbd.CallHourOfDay
           ,dbd.CallDayOfWeekNum
           ,dbd.CallDayOfWeekName
           ,CASE WHEN dbd.CallHourOfDay IN (12,0) THEN CAST(12 AS CHAR(2))
                 ELSE CAST(dbd.CallHourOfDay % 12 AS CHAR(2))
            END + CASE dbd.CallHourOfDay / 12
                    WHEN 1 THEN ' PM'
                    ELSE ' AM'
                  END AS CallHour
           ,dbd.CallTime
           ,dbd.CallerName
           ,dbd.CallerLocation
           ,dbd.CallerPhoneNumber
           ,dbd.LeadMediumDesc
           ,dbd.TextCallStatus
           ,dbd.IsAbandoned
           ,dbd.DurationInSeconds
           ,CASE WHEN dbd.AvgWaitTime < 0 THEN 0
                 ELSE dbd.AvgWaitTime
            END AS AvgWaitTime
		   ,dbd.AudioURLNew
           ,dbd.CallRecording
           ,dbd.CallID
           ,dbd.Website
    FROM    (
             SELECT bd.GroupID AS ListingID
                   ,bd.CBSAName
                   ,SUM(1) AS TotalCalls
                   ,SUM(CASE WHEN bd.CallStatus IN (1,2,3) THEN 1			--Ticket 24212  added missed calls to connected for total
                             ELSE 0
                        END) AS ConnectedCalls
                   ,SUM(CASE WHEN bd.CallStatus IN (1)
                                  AND bd.LeadMediumDesc = 'Desktop' THEN 1
                             ELSE 0
                        END) AS DesktopConnectedCalls
                   ,SUM(CASE WHEN bd.CallStatus IN (1)
                                  AND bd.LeadMediumDesc = 'Mobile' THEN 1
                             ELSE 0
                        END) AS MobileConnectedCalls
                   ,SUM(CASE WHEN bd.CallStatus IN (1)
                                  AND bd.LeadMediumDesc = 'Print' THEN 1
                             ELSE 0
                        END) AS PrintConnectedCalls
                   ,SUM(CASE WHEN bd.CallStatus IN (2,3) THEN 1
                             ELSE 0
                        END) AS MissedCalls
                   ,SUM(CASE WHEN bd.CallStatus IN (2,3) THEN 1
                             ELSE 0
                        END) / CAST(SUM(1) AS DECIMAL(15,4)) AS PercentMissed
                   ,SUM(CASE WHEN bd.IsAbandoned = 1 THEN 1
                             ELSE 0
                        END) AS AbandonedCalls
                   ,CAST(SUM(CASE WHEN bd.IsAbandoned = 1 THEN 1
                                  ELSE 0
                             END) AS DECIMAL(15,4)) / SUM(CASE WHEN bd.CallStatus IN (1,2,3)			--Ticket 24212  adding missed calls to connected.
                                                                    AND bd.AudioURL IS NOT NULL THEN 1
                                                          END) AS PercentAbandoned
                   ,AVG(CASE WHEN bd.DurationInSeconds = 0 THEN NULL
                             ELSE bd.DurationInSeconds
                        END) AS AvgCallDuration
                   ,CASE WHEN SUM(CASE WHEN bd.CallStatus IN (1,2,3)			--Ticket 24212  adding missed calls to connected.
                                            AND bd.TotalCallerTrimTalkTime IS NOT NULL
                                            AND bd.AudioURL IS NOT NULL THEN 1
                                       ELSE 0
                                  END) = 0 THEN 0
                         ELSE SUM(bd.TimePriorToCallerSpeaking) / CAST(SUM(CASE WHEN bd.CallStatus IN (1,2,3)			--Ticket 24212  adding missed calls to connected.
                                                                                     AND bd.TotalCallerTrimTalkTime IS NOT NULL
                                                                                     AND bd.AudioURL IS NOT NULL THEN 1
                                                                                ELSE 0
                                                                           END) AS MONEY)
                    END AS AvgCallWaitTime
             FROM   #BaseData AS bd
             GROUP BY bd.GroupID
                   ,bd.CBSAName
            ) AS sd
    CROSS JOIN #QuintileCutoffs qc
    JOIN    (
             SELECT bd.GroupID
                   ,bd.CallHourOfDay
                   ,bd.CallDayOfWeekNum
                   ,bd.CallDayOfWeekName
                   ,bd.CallDate
                   ,bd.CallTime
                   ,bd.CallerName
                   ,bd.CallerLocation
                   ,bd.CallerPhoneNumber
                   ,bd.LeadMediumDesc
                   ,bd.TextCallStatus
                   ,bd.IsAbandoned
                   ,bd.DurationInSeconds
                   ,bd.AvgCallWaitTime AS AvgWaitTime
                   ,bd.AudioURL
				   ,bd.AudioURLNew
                   ,bd.CallRecording
                   ,bd.CallID
                   ,bd.Website
             FROM   #BaseData AS bd
            ) AS dbd
            ON sd.ListingID = dbd.GroupID;

ELSE --The group level is Management company so do the following instead
--------------------------------------------------------------------------------------
--Select out management results
--------------------------------------------------------------------------------------
    SELECT  md.ReportLevel
           ,md.GroupID
           ,md.GroupName
           ,md.CBSAName
           ,md.AGFlag
           ,md.AGListingStatusID
           ,md.RentFlag
           ,md.RentListingStatusID
           ,md.TotalCalls
           ,md.ConnectedCalls
           ,md.PercentConnected
           ,md.MissedCalls
           ,md.PercentMissed
           ,CASE WHEN md.PercentMissed > qc.MissedCut12 THEN 1
                 WHEN md.PercentMissed > qc.MissedCut23 THEN 2
                 WHEN md.PercentMissed > qc.MissedCut34 THEN 3
                 WHEN md.PercentMissed > qc.MissedCut45 THEN 4
                 ELSE 5
            END AS MissedRank
           ,md.AbandonedCalls
           ,md.PercentAbandoned
           ,CASE WHEN md.PercentAbandoned > qc.AbandonCut12 THEN 1
                 WHEN md.PercentAbandoned > qc.AbandonCut23 THEN 2
                 WHEN md.PercentAbandoned > qc.AbandonCut34 THEN 3
                 WHEN md.PercentAbandoned > qc.AbandonCut45 THEN 4
                 ELSE 5
            END AS AbandondedRank
           ,md.AvgCallDuration
           ,md.AvgWaitTime
           ,CASE WHEN md.AvgWaitTime > qc.WaitTimeCut12 THEN 1
                 WHEN md.AvgWaitTime > qc.WaitTimeCut23 THEN 2
                 WHEN md.AvgWaitTime > qc.WaitTimeCut34 THEN 3
                 WHEN md.AvgWaitTime > qc.WaitTimeCut45 THEN 4
                 ELSE 5
            END AS WaitTimeRank
    FROM    (
             SELECT 'MgtCo' AS ReportLevel
                   ,@GroupID AS GroupID
                   ,1 AS AGListingStatusID
                   ,1 AS RentListingStatusID
                   ,1 AS AGFlag
                   ,1 AS RentFlag
                   ,bd.MgtCoName AS GroupName
                   ,NULL AS CBSAName
                   ,SUM(1) AS TotalCalls
                   ,SUM(CASE WHEN bd.CallStatus IN (1) THEN 1
                             ELSE 0
                        END) AS ConnectedCalls
                   ,CASE WHEN SUM(1) = 0 THEN 0
                         ELSE SUM(CASE WHEN bd.CallStatus IN (1) THEN 1
                                       ELSE 0
                                  END) / CAST(SUM(1) AS DECIMAL(15,4))
                    END AS PercentConnected
                   ,SUM(CASE WHEN bd.CallStatus IN (2,3) THEN 1
                             ELSE 0
                        END) AS MissedCalls
                   ,CASE WHEN SUM(1) = 0 THEN 0
                         ELSE SUM(CASE WHEN bd.CallStatus IN (2,3) THEN 1
                                       ELSE 0
                                  END) / CAST(SUM(1) AS DECIMAL(15,4))
                    END AS PercentMissed
                   ,SUM(CASE WHEN bd.IsAbandoned = 1 THEN 1
                             ELSE 0
                        END) AS AbandonedCalls
                   ,CASE WHEN SUM(CASE WHEN bd.CallStatus IN (1,2,3)			--Ticket 24212  adding missed calls to connected.
                                            AND bd.AudioURL IS NOT NULL THEN 1
                                       ELSE 0
                                  END) = 0 THEN 0
                         ELSE SUM(CASE WHEN bd.IsAbandoned = 1 THEN 1
                                       ELSE 0
                                  END) / CAST(SUM(CASE WHEN bd.CallStatus IN (1,2,3)			--Ticket 24212  adding missed calls to connected.
                                                            AND bd.AudioURL IS NOT NULL THEN 1
                                                       ELSE 0
                                                  END) AS DECIMAL(15,4))
                    END AS PercentAbandoned
                   ,AVG(CASE WHEN bd.DurationInSeconds = 0 THEN NULL
                             ELSE bd.DurationInSeconds
                        END) AS AvgCallDuration
                   ,CASE WHEN SUM(CASE WHEN bd.CallStatus IN (1,2,3)			--Ticket 24212  adding missed calls to connected.
                                            AND bd.TotalCallerTrimTalkTime IS NOT NULL
                                            AND bd.AudioURL IS NOT NULL THEN 1
                                       ELSE 0
                                  END) = 0 THEN 0
                         ELSE SUM(bd.TimePriorToCallerSpeaking) / CAST(SUM(CASE WHEN bd.CallStatus IN (1,2,3)			--Ticket 24212  adding missed calls to connected.
                                                                                     AND bd.TotalCallerTrimTalkTime IS NOT NULL
                                                                                     AND bd.AudioURL IS NOT NULL THEN 1
                                                                                ELSE 0
                                                                           END) AS MONEY)
                    END AS AvgWaitTime
             FROM   #BaseData AS bd
             JOIN   #ActiveListings AS ld
                    ON bd.ListingID = ld.ListingID
                       AND bd.Website = ld.Website
             WHERE  CHARINDEX(bd.CBSACode,@CBSACD) > 0
             GROUP BY bd.MgtCoName
             UNION ALL
             SELECT pd.ReportLevel
                   ,pd.ListingID
                   ,ls.AGListingStatusID
                   ,ls.RentListingStatusID
                   ,ls.AGFlag
                   ,ls.RentFlag
                   ,pd.PropertyName
                   ,pd.CBSAName
                   ,pd.TotalCalls
                   ,pd.ConnectedCalls
                   ,pd.PercentConnected
                   ,pd.MissedCalls
                   ,pd.PercentMissed
                   ,pd.AbandonedCalls
                   ,pd.PercentAbandoned
                   ,pd.AvgCallDuration
                   ,pd.AvgWaitTime
             FROM   (
                     SELECT 'Property' AS ReportLevel
                           ,bd.ListingID
                           ,bd.PropertyName
                           ,bd.CBSAName
                           ,SUM(1) AS TotalCalls
                           ,SUM(CASE WHEN bd.CallStatus IN (1) THEN 1
                                     ELSE 0
                                END) AS ConnectedCalls
                           ,CASE WHEN SUM(1) = 0 THEN 0
                                 ELSE SUM(CASE WHEN bd.CallStatus IN (1) THEN 1
                                               ELSE 0
                                          END) / CAST(SUM(1) AS DECIMAL(15,4))
                            END AS PercentConnected
                           ,SUM(CASE WHEN bd.CallStatus IN (2,3) THEN 1
                                     ELSE 0
                                END) AS MissedCalls
                           ,CASE WHEN SUM(1) = 0 THEN 0
                                 ELSE SUM(CASE WHEN bd.CallStatus IN (2,3) THEN 1
                                               ELSE 0
                                          END) / CAST(SUM(1) AS DECIMAL(15,4))
                            END AS PercentMissed
                           ,SUM(CASE WHEN bd.IsAbandoned = 1 THEN 1
                                     ELSE 0
                                END) AS AbandonedCalls
                           ,CASE WHEN SUM(CASE WHEN bd.CallStatus IN (1,2,3)			--Ticket 24212  adding missed calls to connected.
                                                    AND bd.AudioURL IS NOT NULL THEN 1
                                               ELSE 0
                                          END) = 0 THEN 0
                                 ELSE SUM(CASE WHEN bd.IsAbandoned = 1 THEN 1
                                               ELSE 0
                                          END) / CAST(SUM(CASE WHEN bd.CallStatus IN (1,2,3)			--Ticket 24212  adding missed calls to connected.
                                                                    AND bd.AudioURL IS NOT NULL THEN 1
                                                               ELSE 0
                                                          END) AS DECIMAL(15,4))
                            END AS PercentAbandoned
                           ,AVG(CASE WHEN bd.DurationInSeconds = 0 THEN NULL
                                     ELSE bd.DurationInSeconds
                                END) AS AvgCallDuration
                           ,CASE WHEN SUM(CASE WHEN bd.CallStatus IN (1,2,3)			--Ticket 24212  adding missed calls to connected.
                                                    AND bd.TotalCallerTrimTalkTime IS NOT NULL
                                                    AND bd.AudioURL IS NOT NULL THEN 1
                                               ELSE 0
                                          END) = 0 THEN 0
                                 ELSE SUM(bd.TimePriorToCallerSpeaking) / CAST(SUM(CASE WHEN bd.CallStatus IN (1,2,3)			--Ticket 24212  adding missed calls to connected.
                                                                                             AND bd.TotalCallerTrimTalkTime IS NOT NULL
                                                                                             AND bd.AudioURL IS NOT NULL THEN 1
                                                                                        ELSE 0
                                                                                   END) AS MONEY)
                            END AS AvgWaitTime
                     FROM   #BaseData AS bd
                     JOIN   #ActiveListings AS ld
                            ON bd.ListingID = ld.ListingID
                               AND bd.Website = ld.Website
                     GROUP BY bd.ListingID
                           ,bd.PropertyName
                           ,bd.GroupID
                           ,bd.CBSAName
                    ) AS pd
             LEFT OUTER JOIN #AllListings AS ls
                    ON pd.ListingID = ls.ListingID
            ) AS md
    CROSS JOIN #QuintileCutoffs AS qc;

                              
SET NOCOUNT OFF;




GO
/****** Object:  StoredProcedure [Reports].[rpt_CallAnalysisData_RCTest]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [Reports].[rpt_CallAnalysisData_RCTest] (
    @StartDate DATETIME
   ,@EndDate DATETIME
   ,@GroupLevel INT
   ,@GroupID INT
   ,@CBSACD VARCHAR(4000)
   )

AS 
/*************************************************************************************************
*
* Name:	Reports.rpt_CallAnalysisData
*
* Desc:	This provides the data needed for both the Property Phone Lead Details and Management
*		Call Analysis reports. The dataset returned depends on the Group Level and GroupID selected.
*
* Test:	EXEC Reports.rpt_CallAnalysisData '08/01/2013','08/31/2013',1, 6008, '38060'
*		EXEC Reports.rpt_CallAnalysisData '09/01/2013','10/22/2013',0,101460,NULL
*
* Note: Group Level 0 = Property, 1 = Management Company
*
* Hist:	01	10/07/2013		Sarah Mims			Initial Version. Ticket #12806.
*		02	10/23/2013		Sarah Mims			Ticket #13656 modified #BaseData query to account
*												for NULL MgtCoIDs
* Hist: 03	11/15/2013		Don Wert			Ticket 13713, add CallID to the property output list to support the new media player
* Hist: 04	12/03/2013		Clinton Woody		Ticket 13938, Because properties do not have a CBSA hd to change #base join to left outer join
* Hist: 05	01/14/2014		Sarah Mims			Ticket # 14331 - changed "Internet" to "Desktop" in sd subquery and any other places "Internet" leads are referenced
* Hist:	06	12/15/2014		Sarah Mims			No ticket - removed website parameter
**************************************************************************************************/

SET NOCOUNT ON

	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    DECLARE @TrackDate DATETIME
       ,@LengthInSeconds INT
       ,@DatabaseName VARCHAR(128)
                
    SET @TrackDate = GETDATE()
    SET @LengthInSeconds = 0
    SET @DatabaseName = DB_NAME()        
		
    EXEC DBAUtility.dbo.pr_Logging_StoredProcsNoTemp 
        @DatabaseName = @DatabaseName
       , -- varchar(128)
        @ProcName = 'Reports.rpt_CallAnalysisData'
       , -- varchar(128)
        @StepName = 'Execute Procedure'
       , -- varchar(128)
        @VariableStates = ''
       , -- varchar(500)
        @LengthInSeconds = @LengthInSeconds
       , -- int
        @Comments = 'Execute Procedure'; -- varchar(500)

----------------------------------------------------------------------------------------------------------------
--Drop temp table if not null
----------------------------------------------------------------------------------------------------------------

IF OBJECT_ID('tempdb..#BaseData') IS NOT NULL 
BEGIN    
	DROP TABLE #BaseData
END

IF OBJECT_ID('tempdb..#QuintileCutoffs') IS NOT NULL 
BEGIN   
    DROP TABLE #QuintileCutoffs
END

IF OBJECT_ID('tempdb..#ActiveListings') IS NOT NULL 
BEGIN    
	DROP TABLE #ActiveListings
END

IF OBJECT_ID('tempdb..#AllListings') IS NOT NULL 
BEGIN    
	DROP TABLE #AllListings
END
----------------------------------------------------------------------------------------------------------------
--Declare and set variables
----------------------------------------------------------------------------------------------------------------

DECLARE @StartYMDID INT
   ,@EndYMDID INT

SET @StartYMDID = CAST(CONVERT(VARCHAR(10),@StartDate,112) AS INT)
SET @EndYMDID = CAST(CONVERT(VARCHAR(10),@EndDate,112) AS INT)

------------------------------------------------------------------------
/*******************APPLIES TO MANAGEMENT LEVEL ONLY********************/
--Find all the ListingIDs that were active at any point during that time
--frame that were associated with management company based on the
--Website parameter selected 
------------------------------------------------------------------------
--Active Listings (for calculations)

SELECT  dl.ListingID
,dl.Website
INTO    #ActiveListings
FROM    ApartmentGuide.Dimension.AGRentCombinedDimensionListingsRCtest AS dl
JOIN    ApartmentGuide.Mart.AGRentCombinedMartListingsRCTest AS ml
        ON dl.ListingID = ml.ListingID
           AND dl.Website = ml.Website
LEFT OUTER JOIN DBAUtility.dbo.ZipCBSA AS zc
        ON dl.ZipCode = zc.ZIPCode
WHERE   ml.YMDID BETWEEN @StartYMDID AND @EndYMDID
        AND ISNULL(dl.MgtCoId,9999) = CASE WHEN @GroupLevel = 1 THEN @GroupID
                                           ELSE ISNULL(dl.MgtCoID,9999)
                                      END
		AND ISNULL(CHARINDEX(zc.CBSACode,@CBSACD),0) >= CASE WHEN @GroupLevel = 1 THEN 1
																 ELSE 0
															END     
GROUP BY dl.ListingID
	   ,dl.Website
HAVING  MAX(ml.ListingStatusID) = 1     


--All Listings (for Flags)
SELECT  dl.ListingID
,ISNULL(MAX(CASE WHEN dl.Website = 'AG' THEN 1
                ELSE 0
            END),0) AS AGFlag
,ISNULL(MAX(CASE WHEN ml.Website = 'AG' AND ml.ListingStatusID = 1 THEN 1
                ELSE 0
            END),0) AS AGListingStatusID
,ISNULL(MAX(CASE WHEN dl.Website = 'Rent' THEN 1
                ELSE 0
            END),0) AS RentFlag
,ISNULL(MAX(CASE WHEN ml.Website = 'Rent' AND ml.ListingStatusID = 1THEN 1
                ELSE 0
            END),0) AS RentListingStatusID
INTO    #AllListings
FROM    ApartmentGuide.Dimension.AGRentCombinedDimensionListingsRCTest AS dl
JOIN    ApartmentGuide.Mart.AGRentCombinedMartListingsRCtest AS ml
        ON dl.ListingID = ml.ListingID
           AND dl.Website = ml.Website
LEFT OUTER JOIN DBAUtility.dbo.ZipCBSA AS zc
        ON dl.ZipCode = zc.ZIPCode
WHERE   ml.YMDID BETWEEN @StartYMDID AND @EndYMDID
        AND ISNULL(dl.MgtCoId,9999) = CASE WHEN @GroupLevel = 1 THEN @GroupID
                                           ELSE ISNULL(dl.MgtCoID,9999)
                                      END
		AND ISNULL(CHARINDEX(zc.CBSACode,@CBSACD),0) >= CASE WHEN @GroupLevel = 1 THEN 1
																 ELSE 0
															END     
GROUP BY dl.ListingID

----------------------------------------------------------------------------------------------------------------
--Create Quintile Cutoffs for Percent Missed (includes Busy), Percent Abandoned and Average Wait Time
----------------------------------------------------------------------------------------------------------------

SELECT  AbandonCut45 = MAX(CASE WHEN ct.AbandonedQuintile = 5 THEN ct.PercentAbandoned
                                ELSE NULL
                           END)
       ,AbandonCut34 = MAX(CASE WHEN ct.AbandonedQuintile = 4 THEN ct.PercentAbandoned
                                ELSE NULL
                           END)
       ,AbandonCut23 = MAX(CASE WHEN ct.AbandonedQuintile = 3 THEN ct.PercentAbandoned
                                ELSE NULL
                           END)
       ,AbandonCut12 = MAX(CASE WHEN ct.AbandonedQuintile = 2 THEN ct.PercentAbandoned
                                ELSE NULL
                           END)
       ,MissedCut45 = MAX(CASE WHEN ct.MissedQuintile = 5 THEN ct.PercentMissed
                               ELSE NULL
                          END)
       ,MissedCut34 = MAX(CASE WHEN ct.MissedQuintile = 4 THEN ct.PercentMissed
                               ELSE NULL
                          END)
       ,MissedCut23 = MAX(CASE WHEN ct.MissedQuintile = 3 THEN ct.PercentMissed
                               ELSE NULL
                          END)
       ,MissedCut12 = MAX(CASE WHEN ct.MissedQuintile = 2 THEN ct.PercentMissed
                               ELSE NULL
                          END)
       ,WaitTimeCut45 = MAX(CASE WHEN ct.WaitTimeQuintile = 5 THEN ct.AvgCallWaitTime
                                 ELSE NULL
                            END)
       ,WaitTimeCut34 = MAX(CASE WHEN ct.WaitTimeQuintile = 4 THEN ct.AvgCallWaitTime
                                 ELSE NULL
                            END)
       ,WaitTimeCut23 = MAX(CASE WHEN ct.WaitTimeQuintile = 3 THEN ct.AvgCallWaitTime
                                 ELSE NULL
                            END)
       ,WaitTimeCut12 = MAX(CASE WHEN ct.WaitTimeQuintile = 2 THEN ct.AvgCallWaitTime
                                 ELSE NULL
                            END)
INTO    #QuintileCutoffs
FROM    (
         SELECT d.ListingID
               ,d.PercentAbandoned
               ,NTILE(5) OVER (ORDER BY d.PercentAbandoned DESC) AS AbandonedQuintile
               ,d.PercentMissed
               ,NTILE(5) OVER (ORDER BY d.PercentMissed DESC) AS MissedQuintile
               ,d.AvgCallWaitTime
               ,NTILE(5) OVER (ORDER BY d.AvgCallWaitTime DESC) AS WaitTimeQuintile
         FROM   (
                 SELECT cag.ListingID
                       ,CASE WHEN SUM(CASE WHEN cag.CallStatus = 1
                                                AND cag.AudioURL IS NOT NULL THEN 1
                                           ELSE 0
                                      END) = 0 THEN 0
                             ELSE SUM(CASE WHEN cag.IsAbandoned = 1 THEN 1
                                           ELSE 0
                                      END) / CAST(SUM(CASE WHEN cag.CallStatus = 1
                                                                AND cag.AudioURL IS NOT NULL THEN 1
                                                           ELSE 0
                                                      END) AS MONEY)
                        END AS PercentAbandoned
                       ,CASE WHEN SUM(1) = 0 THEN 0
                             ELSE SUM(CASE WHEN cag.CallStatus IN (2,3) THEN 1
                                           ELSE 0
                                      END) / CAST(SUM(1) AS MONEY)
                        END AS PercentMissed
                       ,CASE WHEN SUM(CASE WHEN cag.CallStatus = 1
                                                AND cag.AudioURL IS NOT NULL
                                                AND cag.TotalCallerTrimTalkTime IS NOT NULL THEN 1
                                           ELSE 0
                                      END) = 0 THEN 0
                             ELSE SUM(cag.TimePriorToCallerSpeaking) / CAST(SUM(CASE WHEN cag.CallStatus = 1
                                                                                          AND cag.AudioURL IS NOT NULL
                                                                                          AND cag.TotalCallerTrimTalkTime IS NOT NULL THEN 1
                                                                                     ELSE 0
                                                                                END) AS MONEY)
                        END AS AvgCallWaitTime
				 FROM   ApartmentGuide.Fact.AGRentPhoneLeads AS cag
                 WHERE  cag.YMDID BETWEEN @StartYMDID AND @EndYMDID
                        AND cag.CallType <> 'CRAIGSLIST'

                 GROUP BY cag.ListingID
                ) AS d
        ) AS ct
		
--------------------------------------------------------------------------------------------------------------------------------------
--Create base dataset based on group level
--------------------------------------------------------------------------------------------------------------------------------------
SELECT  @GroupID AS GroupID
       ,dl.ListingID
       ,dl.PropertyName
       ,dl.MgtCoName
       ,cag.CallID
       ,DATEPART(HOUR,cag.CallStartDateTime) AS CallHourOfDay
       ,DATEPART(weekday,cag.CallStartDateTime) AS CallDayOfWeekNum
       ,LEFT(DATENAME(weekday,cag.CallStartDateTime),3) AS CallDayOfWeekName
       ,CONVERT(VARCHAR(10),cag.CallStartDateTime,101) AS CallDate
       ,SUBSTRING(CONVERT(VARCHAR(30),cag.CallStartDateTime,100),13,7) AS CallTime
       ,CASE WHEN ph.firstName IS NULL
                  AND ph.LastName IS NULL THEN cag.CallerName
             ELSE ISNULL(ph.firstname,'') + ' ' + ISNULL(ph.lastname,'')
        END AS CallerName
       ,cag.CallerPhoneNumber
       ,cag.CallerLocation
       ,zc.CBSACode
       ,zc.CBSAName
       ,ISNULL(pc.LeadMediumDesc,'Not Categorized') AS LeadMediumDesc
       ,CASE cag.CallStatus
          WHEN 1 THEN 'Connected'
          WHEN 2 THEN 'Missed'
          WHEN 3 THEN 'Missed'
          ELSE 'Unknown'
        END AS TextCallStatus
       ,cag.CallStatus
       ,cag.IsAbandoned
       ,cag.DurationInSeconds
       ,cag.TotalCallerTrimTalkTime
       ,cag.TimePriorToCallerSpeaking
       ,CASE WHEN CASE WHEN cag.CallStatus = 1
                            AND cag.TotalCallerTrimTalkTime IS NOT NULL
                            AND cag.AudioURL IS NOT NULL THEN 1
                       ELSE 0
                  END = 0 THEN 0
             ELSE CAST(cag.TimePriorToCallerSpeaking AS MONEY) / CASE WHEN cag.CallStatus = 1
                                                                           AND cag.TotalCallerTrimTalkTime IS NOT NULL
                                                                           AND cag.AudioURL IS NOT NULL THEN 1
                                                                      ELSE 0
                                                                 END
        END AS AvgCallWaitTime
       ,cag.AudioURL
       ,CASE WHEN cag.AudioURL IS NOT NULL THEN 1
             ELSE 0
        END AS CallRecording
		,dl.Website
INTO    #BaseData
FROM    ApartmentGuide.Fact.AGRentPhoneLeads AS cag
JOIN    ApartmentGuide.Dimension.AGRentCombinedDimensionListingsRCTest AS dl
        ON cag.ListingID = dl.ListingID
		and cag.website = dl.website
LEFT OUTER JOIN ApartmentGuide.Dimension.PhoneLookup AS ph
        ON cag.CallerPhoneNumber = ph.phoneNumber
LEFT OUTER JOIN (
                SELECT  LTRIM(SUBSTRING(LeadSourceBusinessKey,CHARINDEX('-',LeadSourceBusinessKey) + 1,LEN(LeadSourceBusinessKey))) AS LeadType
                       ,DBSourceSystemDesc
                       ,CASE WHEN dss.DBSourceSystemKey = 1 THEN 'AG'
                             ELSE 'Rent'
                        END AS Website
                       ,LeadTypeDesc
                       ,LeadMediumDesc
                FROM    Warehouse.Conformed.LeadSource AS ls
                JOIN    Warehouse.Conformed.DBSourceSystem AS dss
                        ON ls.DBSourceSystemKey = dss.DBSourceSystemKey
                WHERE   dss.DBSourceSystemKey IN (1,6)
                        AND ls.LeadTypeDesc = 'Phone'
                ) AS pc
        ON cag.CallType = pc.LeadType
			AND cag.Website = pc.Website
LEFT OUTER JOIN DBAUtility.dbo.ZipCBSA AS zc
        ON dl.ZipCode = zc.ZIPCode
WHERE   cag.YMDID BETWEEN @StartYMDID AND @EndYMDID
        AND cag.CallType <> 'CRAIGSLIST'
        AND dl.listingID = CASE WHEN @GroupLevel = 0 THEN @GroupID
                                 ELSE dl.listingID
                            END
        AND ISNULL(dl.MgtCoId,9999) = CASE WHEN @GroupLevel = 1 THEN @GroupID
                                           ELSE ISNULL(dl.MgtCoID,9999)
                                      END
		AND ISNULL(CHARINDEX(zc.CBSACode,@CBSACD),0) >= CASE WHEN @GroupLevel = 1 THEN 1
																 ELSE 0
															END                                    

---------------------------------------------------------------------------------------
--Get report data including summary for selected group level
---------------------------------------------------------------------------------------
IF @GroupLevel = 0 --If the group level is Property then do the following		
	SELECT  sd.ListingID
           ,sd.CBSAName
           ,sd.TotalCalls
           ,sd.ConnectedCalls
           ,sd.DesktopConnectedCalls
           ,sd.MobileConnectedCalls
           ,sd.PrintConnectedCalls
           ,sd.MissedCalls
           ,sd.PercentMissed
           ,CASE WHEN sd.PercentMissed > qc.MissedCut12 THEN 1
                 WHEN sd.PercentMissed > qc.MissedCut23 THEN 2
                 WHEN sd.PercentMissed > qc.MissedCut34 THEN 3
                 WHEN sd.PercentMissed > qc.MissedCut45 THEN 4
                 ELSE 5
            END AS MissedRank
           ,sd.AbandonedCalls
           ,sd.PercentAbandoned
           ,CASE WHEN sd.PercentAbandoned > qc.AbandonCut12 THEN 1
                 WHEN sd.PercentAbandoned > qc.AbandonCut23 THEN 2
                 WHEN sd.PercentAbandoned > qc.AbandonCut34 THEN 3
                 WHEN sd.PercentAbandoned > qc.AbandonCut45 THEN 4
                 ELSE 5
            END AS AbandondedRank
           ,sd.AvgCallDuration
           ,sd.AvgCallWaitTime
           ,CASE WHEN sd.AvgCallWaitTime > qc.WaitTimeCut12 THEN 1
                 WHEN sd.AvgCallWaitTime > qc.WaitTimeCut23 THEN 2
                 WHEN sd.AvgCallWaitTime > qc.WaitTimeCut34 THEN 3
                 WHEN sd.AvgCallWaitTime > qc.WaitTimeCut45 THEN 4
                 ELSE 5
            END AS WaitTimeRank
           ,dbd.CallDate
           ,dbd.CallHourOfDay
           ,dbd.CallDayOfWeekNum
           ,dbd.CallDayOfWeekName
           ,CASE WHEN dbd.CallHourOfDay IN (12,0) THEN CAST(12 AS CHAR(2))
                 ELSE CAST(dbd.CallHourOfDay % 12 AS CHAR(2))
            END + CASE dbd.CallHourOfDay / 12
                    WHEN 1 THEN ' PM'
                    ELSE ' AM'
                  END AS CallHour
           ,dbd.CallTime
           ,dbd.CallerName
           ,dbd.CallerLocation
           ,dbd.CallerPhoneNumber
           ,dbd.LeadMediumDesc
           ,dbd.TextCallStatus
           ,dbd.IsAbandoned
           ,dbd.DurationInSeconds
           ,CASE WHEN dbd.AvgWaitTime < 0 THEN 0
                 ELSE dbd.AvgWaitTime
            END AS AvgWaitTime
           ,dbd.AudioURL
           ,dbd.CallRecording
           ,dbd.CallID
		   ,dbd.Website
    FROM    (
             SELECT bd.GroupID AS ListingID 
                   ,bd.CBSAName
                   ,SUM(1) AS TotalCalls
                   ,SUM(CASE WHEN bd.CallStatus = 1 THEN 1
                             ELSE 0
                        END) AS ConnectedCalls
                   ,SUM(CASE WHEN bd.CallStatus = 1
                                  AND bd.LeadMediumDesc = 'Desktop' THEN 1
                             ELSE 0
                        END) AS DesktopConnectedCalls
                   ,SUM(CASE WHEN bd.CallStatus = 1
                                  AND bd.LeadMediumDesc = 'Mobile' THEN 1
                             ELSE 0
                        END) AS MobileConnectedCalls
                   ,SUM(CASE WHEN bd.CallStatus = 1
                                  AND bd.LeadMediumDesc = 'Print' THEN 1
                             ELSE 0
                        END) AS PrintConnectedCalls
                   ,SUM(CASE WHEN bd.CallStatus IN (2,3) THEN 1
                             ELSE 0
                        END) AS MissedCalls
                   ,SUM(CASE WHEN bd.CallStatus IN (2,3) THEN 1
                             ELSE 0
                        END) / CAST(SUM(1) AS DECIMAL(15,4)) AS PercentMissed
                   ,SUM(CASE WHEN bd.IsAbandoned = 1 THEN 1
                             ELSE 0
                        END) AS AbandonedCalls
                   ,CAST(SUM(CASE WHEN bd.IsAbandoned = 1 THEN 1
                                  ELSE 0
                             END) AS DECIMAL(15,4)) / SUM(CASE WHEN bd.CallStatus = 1
                                                                    AND bd.AudioURL IS NOT NULL THEN 1
                                                          END) AS PercentAbandoned
                   ,AVG(CASE WHEN bd.DurationInSeconds = 0 THEN NULL
                             ELSE bd.DurationInSeconds
                        END) AS AvgCallDuration
                   ,CASE WHEN SUM(CASE WHEN bd.CallStatus = 1
                                            AND bd.TotalCallerTrimTalkTime IS NOT NULL
                                            AND bd.AudioURL IS NOT NULL THEN 1
                                       ELSE 0
                                  END) = 0 THEN 0
                         ELSE SUM(bd.TimePriorToCallerSpeaking) / CAST(SUM(CASE WHEN bd.CallStatus = 1
                                                                                     AND bd.TotalCallerTrimTalkTime IS NOT NULL
                                                                                     AND bd.AudioURL IS NOT NULL THEN 1
                                                                                ELSE 0
                                                                           END) AS MONEY)
                    END AS AvgCallWaitTime
             FROM   #BaseData AS bd
             GROUP BY bd.GroupID
					,bd.CBSAName
            ) AS sd
    CROSS JOIN #QuintileCutoffs qc
    JOIN    (
             SELECT bd.GroupID
                   ,bd.CallHourOfDay
                   ,bd.CallDayOfWeekNum
                   ,bd.CallDayOfWeekName
                   ,bd.CallDate
                   ,bd.CallTime
                   ,bd.CallerName
                   ,bd.CallerLocation
                   ,bd.CallerPhoneNumber
                   ,bd.LeadMediumDesc
                   ,bd.TextCallStatus
                   ,bd.IsAbandoned
                   ,bd.DurationInSeconds
                   ,bd.AvgCallWaitTime AS AvgWaitTime
                   ,bd.AudioURL
                   ,bd.CallRecording
                   ,bd.CallID
				   ,bd.Website
             FROM   #BaseData AS bd
            ) AS dbd
		    ON sd.ListingID = dbd.GroupID

ELSE --The group level is Management company so do the following instead
--------------------------------------------------------------------------------------
--Select out management results
--------------------------------------------------------------------------------------
    SELECT  md.ReportLevel
           ,md.GroupID
           ,md.GroupName
           ,md.CBSAName
		   ,md.AGFlag
		   ,md.AGListingStatusID
		   ,md.RentFlag
		   ,md.RentListingStatusID
           ,md.TotalCalls
           ,md.ConnectedCalls
           ,md.PercentConnected
           ,md.MissedCalls
           ,md.PercentMissed
           ,CASE WHEN md.PercentMissed > qc.MissedCut12 THEN 1
                 WHEN md.PercentMissed > qc.MissedCut23 THEN 2
                 WHEN md.PercentMissed > qc.MissedCut34 THEN 3
                 WHEN md.PercentMissed > qc.MissedCut45 THEN 4
                 ELSE 5
            END AS MissedRank
           ,md.AbandonedCalls
           ,md.PercentAbandoned
           ,CASE WHEN md.PercentAbandoned > qc.AbandonCut12 THEN 1
                 WHEN md.PercentAbandoned > qc.AbandonCut23 THEN 2
                 WHEN md.PercentAbandoned > qc.AbandonCut34 THEN 3
                 WHEN md.PercentAbandoned > qc.AbandonCut45 THEN 4
                 ELSE 5
            END AS AbandondedRank
           ,md.AvgCallDuration
           ,md.AvgWaitTime
           ,CASE WHEN md.AvgWaitTime > qc.WaitTimeCut12 THEN 1
                 WHEN md.AvgWaitTime > qc.WaitTimeCut23 THEN 2
                 WHEN md.AvgWaitTime > qc.WaitTimeCut34 THEN 3
                 WHEN md.AvgWaitTime > qc.WaitTimeCut45 THEN 4
                 ELSE 5
            END AS WaitTimeRank
    FROM    
			(
             SELECT 'MgtCo'																	AS ReportLevel
                   ,@GroupID																AS GroupID
				   ,1																		AS AGListingStatusID
				   ,1																		AS RentListingStatusID
				   ,1																		AS AGFlag
				   ,1																		AS RentFlag
                   ,bd.MgtCoName															AS GroupName
                   ,NULL																	AS CBSAName
                   ,SUM(1) AS TotalCalls
                   ,SUM(CASE WHEN bd.CallStatus = 1 THEN 1
                             ELSE 0
                        END) AS ConnectedCalls
                   ,CASE WHEN SUM(1) = 0 THEN 0
                         ELSE SUM(CASE WHEN bd.CallStatus = 1 THEN 1
                                       ELSE 0
                                  END) / CAST(SUM(1) AS DECIMAL(15,4))
                    END AS PercentConnected
                   ,SUM(CASE WHEN bd.CallStatus IN (2,3) THEN 1
                             ELSE 0
                        END) AS MissedCalls
                   ,CASE WHEN SUM(1) = 0 THEN 0
                         ELSE SUM(CASE WHEN bd.CallStatus IN (2,3) THEN 1
                                       ELSE 0
                                  END) / CAST(SUM(1) AS DECIMAL(15,4))
                    END AS PercentMissed
                   ,SUM(CASE WHEN bd.IsAbandoned = 1 THEN 1
                             ELSE 0
                        END) AS AbandonedCalls
                   ,CASE WHEN SUM(CASE WHEN bd.CallStatus = 1
                                            AND bd.AudioURL IS NOT NULL THEN 1
                                       ELSE 0
                                  END) = 0 THEN 0
                         ELSE SUM(CASE WHEN bd.IsAbandoned = 1 THEN 1
                                       ELSE 0
                                  END) / CAST(SUM(CASE WHEN bd.CallStatus = 1
                                                            AND bd.AudioURL IS NOT NULL THEN 1
                                                       ELSE 0
                                                  END) AS DECIMAL(15,4))
                    END AS PercentAbandoned
                   ,AVG(CASE WHEN bd.DurationInSeconds = 0 THEN NULL
                             ELSE bd.DurationInSeconds
                        END) AS AvgCallDuration
                   ,CASE WHEN SUM(CASE WHEN bd.CallStatus = 1
                                            AND bd.TotalCallerTrimTalkTime IS NOT NULL
                                            AND bd.AudioURL IS NOT NULL THEN 1
                                       ELSE 0
                                  END) = 0 THEN 0
                         ELSE SUM(bd.TimePriorToCallerSpeaking) / CAST(SUM(CASE WHEN bd.CallStatus = 1
                                                                                     AND bd.TotalCallerTrimTalkTime IS NOT NULL
                                                                                     AND bd.AudioURL IS NOT NULL THEN 1
                                                                                ELSE 0
                                                                           END) AS MONEY)
                    END AS AvgWaitTime
             FROM   #BaseData AS bd
			 JOIN #ActiveListings AS ld
				ON bd.ListingID = ld.ListingID
				AND bd.Website = ld.Website
             WHERE  CHARINDEX(bd.CBSACode,@CBSACD) > 0
             GROUP BY bd.MgtCoName
		
             UNION ALL
			          			 
					SELECT pd.ReportLevel
					,pd.ListingID
					,ls.AGListingStatusID
					,ls.RentListingStatusID
					,ls.AGFlag
					,ls.RentFlag
					,pd.PropertyName
					,pd.CBSAName
					,pd.TotalCalls
					,pd.ConnectedCalls
					,pd.PercentConnected
					,pd.MissedCalls
					,pd.PercentMissed
					,pd.AbandonedCalls
					,pd.PercentAbandoned
					,pd.AvgCallDuration
					,pd.AvgWaitTime
					FROM							 
							(
							SELECT 'Property'															AS ReportLevel
						   ,bd.ListingID													
						   ,bd.PropertyName
						   ,bd.CBSAName
						   ,SUM(1)																		AS TotalCalls
						   ,SUM(CASE WHEN bd.CallStatus = 1 THEN 1
									 ELSE 0
								END)																	AS ConnectedCalls
						   ,CASE WHEN SUM(1) = 0 THEN 0
								 ELSE SUM(CASE WHEN bd.CallStatus = 1 THEN 1
											   ELSE 0
										  END) / CAST(SUM(1) AS DECIMAL(15,4))
							END																			AS PercentConnected
						   ,SUM(CASE WHEN bd.CallStatus IN (2,3) THEN 1
									 ELSE 0
								END)																	AS MissedCalls
						   ,CASE WHEN SUM(1) = 0 THEN 0
								 ELSE SUM(CASE WHEN bd.CallStatus IN (2,3) THEN 1
											   ELSE 0
										  END) / CAST(SUM(1) AS DECIMAL(15,4))
							END																			AS PercentMissed
						   ,SUM(CASE WHEN bd.IsAbandoned = 1 THEN 1
									 ELSE 0
								END)																	AS AbandonedCalls
						   ,CASE WHEN SUM(CASE WHEN bd.CallStatus = 1
													AND bd.AudioURL IS NOT NULL THEN 1
											   ELSE 0
										  END) = 0 THEN 0
								 ELSE SUM(CASE WHEN bd.IsAbandoned = 1 THEN 1
											   ELSE 0
										  END) / CAST(SUM(CASE WHEN bd.CallStatus = 1
																	AND bd.AudioURL IS NOT NULL THEN 1
															   ELSE 0
														  END) AS DECIMAL(15,4))
							END																			AS PercentAbandoned
						   ,AVG(CASE WHEN bd.DurationInSeconds = 0 THEN NULL
									 ELSE bd.DurationInSeconds
								END)																	AS AvgCallDuration
						   ,CASE WHEN SUM(CASE WHEN bd.CallStatus = 1
													AND bd.TotalCallerTrimTalkTime IS NOT NULL
													AND bd.AudioURL IS NOT NULL THEN 1
											   ELSE 0
										  END) = 0 THEN 0
								 ELSE SUM(bd.TimePriorToCallerSpeaking) / CAST(SUM(CASE WHEN bd.CallStatus = 1
																							 AND bd.TotalCallerTrimTalkTime IS NOT NULL
																							 AND bd.AudioURL IS NOT NULL THEN 1
																						ELSE 0
																				   END) AS MONEY)
							END																			AS AvgWaitTime
							FROM   #BaseData AS bd
							JOIN #ActiveListings AS ld
							ON bd.ListingID = ld.ListingID
								AND bd.Website = ld.Website											                                          						
							GROUP BY bd.ListingID			    
								,bd.PropertyName
								,bd.GroupID
								,bd.CBSAName
							) AS pd
				LEFT OUTER JOIN #AllListings AS ls
					ON pd.ListingID = ls.ListingID
						              
         ) AS md
    CROSS JOIN #QuintileCutoffs AS qc
                              
SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [Reports].[rpt_ContactInfo]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


















CREATE PROCEDURE [Reports].[rpt_ContactInfo] (
    @AGPropertyID INT = NULL)
/*************************************************************************************************
* Name:	Reports.rpt_ContactInfo
*-------------------------------------------------------------------------------------------------
* Desc:	This returns Concierge contact information for the selected property.
*-------------------------------------------------------------------------------------------------
* Test:	EXEC Reports.rpt_ContactInfo 100052123
*		EXEC Reports.rpt_ContactInfo null
*		EXEC Reports.rpt_ContactInfo 288
*-------------------------------------------------------------------------------------------------
* Notes: THIS IS A CLIENT PORTAL DASHBOARD PROC. BEFORE MAKING CHANGES IN PRODUCTION, THEY MUST BE
* VETTED AND TESTED IN THE DEV & QA DATABASES FIRST.
*-------------------------------------------------------------------------------------------------
* Hist:	01	01/23/2015		Don Wert			Initial Version. Ticket # 17937.
* Hist: 02	05/07/2015		Colleen Rocks		Filtered out inactive concierge; included generic info when blank
* Hist: 03	07/31/2015		Bob Langley			Ticket 19882 - changed to pull listingid for statusid=1 (wasn't doing that before)
* Hist: 04	08/14/2015		Shetal Gandhi		Ticket 20421 - Modified to use the New Rentpath tables instead of the AG Combined views
* Hist: 05	10/27/2015		Colleen Rocks		Ticket 19097 - modified URL column for ConciergePhoto
* Hist: 06	05/11/2016		Colleen Rocks		Ticket 22366; replace join to community__c table to use account table instead
* Hist: 07	05/16/2016		Colleen Rocks		Ticket 22996; add sales rep info
**************************************************************************************************/
AS
SET NOCOUNT ON;
BEGIN
	/*--test
	DECLARE @AGPropertyID INT = 99489 --0 --*/
	
	
	
    DECLARE @ListingID INT

    SELECT  @ListingID = CASE WHEN ISNULL(@AGPropertyID,0) = 0 THEN 0
                              ELSE (
                                    SELECT  MAX(ListingID) AS ListingID
                                    FROM    RentPath.Dimension.Listings
                                    WHERE   [PropertyIDAG] = @AGPropertyID
                                            AND (StatusIDAG = 1
                                                 OR StatusIDRent = 1)
                                   )
                         END


    IF @ListingID > 0
        BEGIN
	--------------------------------------------------------------------------------
	--Pull in Concierge & Sales contact info
	--------------------------------------------------------------------------------
            SELECT  c.Id
                   ,dl.ListingID
                   ,dl.PropertyIDAG AS AGPROPERTYID
                   ,u.FirstName
                   ,ISNULL(u.Email,'contact@rentpath.com') AS Email
                   ,ISNULL(u.Phone,'877-999-4472') AS Phone
                   --,u.FullPhotoUrl AS ConciergePhoto
                   ,u.Photo_URL__c AS ConciergePhoto
				   ,sr.FirstName AS SalesRepFirstName
				   ,COALESCE(sr.Phone,sr.MobilePhone,'877-999-4472') AS SalesRepPhone
				   ,sr.Photo_URL__c AS SalesRepPhoto
				   ,ISNULL(sr.Email,'contact@rentpath.com') AS SalesRepEmail
            FROM    (
                     SELECT ListingID
                           ,MAX(PropertyIDAG) AS PropertyIDAG
                           ,MAX(PropertyIDRent) AS PropertyIDRent
                     FROM   RentPath.Dimension.Listings
                     WHERE  ListingID = @ListingID
                            AND PropertyIDAG IS NOT NULL
                     GROUP BY ListingID
                    ) dl
            INNER JOIN SalesForce.dimension.SALESFORCE_XREF AS sx
				ON sx.AGPROPERTYID = dl.PropertyIDAG
			INNER JOIN SalesForce.dbo.Account AS c
                    ON sx.SalesforceAccountID = c.ID
            LEFT OUTER JOIN SalesForce.dbo.User2 AS u
                    ON c.Concierge_Owner__c = u.Id
                       AND u.IsActive = 1
			LEFT OUTER JOIN SalesForce.dbo.User2 AS sr
					ON c.OwnerId = sr.Id
						AND sr.IsActive = 1

        END
  
    ELSE
        BEGIN
            SELECT  NULL AS ListingID
                   ,NULL AS FirstName
                   ,'contact@rentpath.com' AS Email
                   ,'877-999-4472' AS Phone
                   ,NULL AS ConciergePhoto
				   ,NULL AS SalesRepFirstName
				   ,'877-999-4472' AS SalesRepPhone
				   ,NULL AS SalesRepPhoto
				   ,'contact@rentpath.com' AS SalesRepEmail

        END



    
END

SET NOCOUNT OFF;













GO
/****** Object:  StoredProcedure [Reports].[rpt_ContentInfo]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO













CREATE PROCEDURE [Reports].[rpt_ContentInfo]
    (
      @AGPropertyID INT = NULL
    )

/*************************************************************************************************
*
* Name:	Reports.rpt_ContentInfo
*
* Desc:	This returns content information
*
* Test:	EXEC Reports.rpt_ContentInfo 82932
*		EXEC Reports.rpt_ContentInfo 0
*		EXEC Reports.rpt_ContentInfo null
*		EXEC Reports.rpt_ContentInfo 11790
*
*
* Hist:	01	01/23/2015		Don Wert			Initial Version. Ticket # 17937.
* Hist: 02	04/21/2015		Shetal Gandhi		Use HD Photos instead of Photos
* Hist: 03	05/20/2015		Colleen Rocks		Changed %linkedfps to divide by numunits instead of activefps
* Hist: 04	07/31/2015		Bob Langley			Ticket 19882 - changed to pull listingid for statusid=1 (wasn't doing that before)
* Hist: 05	08/14/2015		Shetal Gandhi		Ticket 20421 - Modified to use the New Rentpath tables instead of the AG Combined views
* Hist: 06  10/22/2015      Julie DiPietro		Ticket 21039 & 20990 - changed to use Dimension.UnitLayouts for numunits (for linkedfp and pricing)
**************************************************************************************************/
AS
    SET NOCOUNT ON

    BEGIN
	/*test
	DECLARE @AGPropertyID INT = 87144 --0 --
	--DECLARE @AGPropertyID INT = 4560 --0 --
	--DECLARE @AGPropertyID INT = 288 --0 --
	*/
 	
        DECLARE @ListingID INT

        SELECT  @ListingID = CASE WHEN ISNULL(@AGPropertyID, 0) = 0 THEN 0
                                  ELSE ( SELECT MAX(ListingID) AS ListingID
                                         FROM   Rentpath.Dimension.Listings WITH (NOLOCK)
                                         WHERE  PropertyIDAG = @AGPropertyID
										 AND (StatusIDAG = 1  OR StatusIDRent = 1)
                                       )
                             END
	--------------------------------------------------------------------------------
	--Drop temp tables if NOT NULL
	--------------------------------------------------------------------------------
        IF OBJECT_ID('tempdb..#Content') IS NOT NULL
            BEGIN
                DROP TABLE #Content
            END  

        IF @ListingID > 0
            BEGIN

		--------------------------------------------------------------------------------
		--Content info
		--------------------------------------------------------------------------------
        BEGIN TRY
			DROP TABLE #tmplistinginfo
		END TRY
		BEGIN CATCH
		END CATCH
		BEGIN TRY
			DROP TABLE #tmpunitinfo
		END TRY
		BEGIN CATCH
		END CATCH


				SELECT  ul.ListingID ,
						COUNT(*) AS NumUnits ,
						COUNT(CASE WHEN ul.PriceLow IS NULL AND ul.PriceHigh IS NULL THEN NULL ELSE 1 END) AS UnitsWPrice
						--COUNT(CASE WHEN ul.LowPrice IS NULL AND ul.HighPrice IS NULL THEN NULL ELSE 1 END) AS UnitsWPrice
				INTO #tmpunitinfo
				FROM    [ApartmentGuide].[Dimension].[UnitLayouts] AS ul WITH (NOLOCK)
				--FROM Rentpath.Dimension.Listings AS ul WITH (NOLOCK)
				WHERE   ul.ListingID = @ListingID
						AND ul.DimEndYMDID IS NULL
				GROUP BY ul.ListingID


		SELECT    l.ListingID ,
				MAX(l.PropertyIDAG) AS AGPropertyID ,
				MAX(l.PropertyIDRent) AS RentPropertyID ,
				MAX(StatusIDAG) AS AGActive ,
				MAX(StatusIDRent) AS RentActive ,
				--MAX(l.ActivePhotos) AS PhotoCount ,
				MAX(l.ActiveHDPhotos) AS PhotoHDCount,
				MAX(CASE WHEN l.ActiveHDPhotos > 0 THEN 1
							ELSE 0
					END) AS HasHDPhotos ,
				MAX(CONVERT(DECIMAL(5, 2), NULLIF(l.UpsellLinkedFloorplan,
											0))) AS LinkedFPs ,
				MAX(CONVERT(DECIMAL(5, 2), NULLIF(l.ActiveFloorPlans,
											0))) AS ActiveFPs ,
				MAX(CASE WHEN l.UpsellLinked3DFloorplan > 0
							THEN 1
							ELSE 0
					END) AS Has3DFloorplans ,
				MAX(CONVERT(DECIMAL(5, 2), NULLIF(u.UnitsWPrice,
											0))) AS UnitsWPrice ,
				MAX(CONVERT(DECIMAL(5, 2), NULLIF(u.NumUnits,
											0))) AS NumUnits ,
				MAX(l.ActiveCoupon) AS HasActiveCoupon ,
				--MAX(vcs.IsLive) AS HasCR3 ,
				MAX(l.HasCR3) AS HasCR3,
				MAX(l.UpsellHDPanoTour) AS HasPanoTour ,
				MAX(l.UpsellHDVideo) AS HasHDVideo ,
				MAX(l.UpsellAGSites) AS HasAGSites
		INTO #tmplistinginfo
		FROM      Rentpath.Dimension.Listings AS l WITH (NOLOCK)
		LEFT JOIN #tmpunitinfo AS u 
				ON l.ListingID = u.ListingID
		--LEFT JOIN ApartmentGuide.Mart.vw_CR3Statistics AS vcs WITH (NOLOCK) 
		--		ON l.PropertyIDAG = vcs.propertyid
		--LEFT JOIN ApartmentGuide.Dimension.Listings AS agl WITH (NOLOCK) ON l.ListingID = agl.ListingID
		WHERE     l.ListingID = @ListingID
		GROUP BY  l.ListingID ,
			l.PropertyIDAG ,
			l.PropertyIDRent	
		
		
		
		        SELECT  l.ListingID ,
                        l.AGPropertyID ,
                        l.AGActive ,
                        l.RentActive ,
                        l.PhotoHDCount ,
                        l.HasHDPhotos ,
                        ( l.LinkedFPs / l.NumUnits ) * 100 AS '%LinkedFPs' ,
                        l.Has3DFloorplans ,
                        ( l.UnitsWPrice / l.NumUnits ) * 100 AS '%UnitsWPrice' ,
                        l.HasActiveCoupon ,
                        ISNULL(l.HasCR3, 0) AS HasCR3 ,
                        l.HasPanoTour ,
                        l.HasHDVideo ,
                        ISNULL(l.HasAGSites, 0) AS HasAGSites
                INTO    #Content
                FROM    #tmplistinginfo AS l

		--------------------------------------------------------------------------------
		--Result set
		--------------------------------------------------------------------------------

                SELECT  CAST('HD Photos' AS VARCHAR(20)) AS Name ,
                        CASE WHEN c.PhotoHDCount >= 20 THEN 1
                             ELSE 0
                        END AS Status ,
                        CAST('Talk to your Concierge about including HD Photos'AS VARCHAR(100)) AS LongName
                FROM    #Content AS c
                WHERE   c.ListingID = @ListingID
                UNION ALL
                SELECT  CAST('Linked Floorplans' AS VARCHAR(20)) AS Name ,
                        CASE WHEN c.[%LinkedFPs] = 100 THEN 1
                             ELSE 0
                        END AS Status ,
                        CAST('Link Floorplan Images to Each Unit' AS VARCHAR(50)) AS LongName
                FROM    #Content AS c
                WHERE   c.ListingID = @ListingID
                UNION ALL
                SELECT  CAST('Priced Units' AS VARCHAR(20)) AS Name ,
                        CASE WHEN c.[%UnitsWPrice] = 100 THEN 1
                             ELSE 0
                        END AS Status ,
                        CAST('Add Pricing to Each Unit' AS VARCHAR(50)) AS LongName
                FROM    #Content AS c
                WHERE   c.ListingID = @ListingID
                UNION ALL
                SELECT  CAST('Coupon' AS VARCHAR(20)) AS Name ,
                        c.HasActiveCoupon AS Status ,
                        CAST('Add a Valid Coupon' AS VARCHAR(50)) AS LongName
                FROM    #Content AS c
                WHERE   c.ListingID = @ListingID
                UNION ALL
                SELECT  CAST('Ratings & Reviews' AS VARCHAR(20)) AS Name ,
                        c.HasCR3 AS Status ,
                        CAST('Opt In and Add Reviews' AS VARCHAR(50)) AS LongName
                FROM    #Content AS c
                WHERE   c.ListingID = @ListingID
                UNION ALL
                SELECT  CAST('Panoramic Tour' AS VARCHAR(20)) AS Name ,
                        c.HasPanoTour AS Status ,
                        CAST('Talk to your Concierge about including a HD Panoramic Tour' AS VARCHAR(100)) AS LongName
                FROM    #Content AS c
                WHERE   c.ListingID = @ListingID
                UNION ALL
                SELECT  CAST('HD Video' AS VARCHAR(20)) AS Name ,
                        c.HasHDVideo AS Status ,
                        CAST('Talk to your Concierge about including a HD Video' AS VARCHAR(100)) AS LongName
                FROM    #Content AS c
                WHERE   c.ListingID = @ListingID
                UNION ALL
                SELECT  CAST('AG Sites' AS VARCHAR(20)) AS Name ,
                        c.HasAGSites AS Status ,
                        CAST('Talk to your Concierge about creating an AG Site' AS VARCHAR(100)) AS LongName
                FROM    #Content AS c
                WHERE   c.ListingID = @ListingID

            END
  
        ELSE
            BEGIN
                SELECT  CAST('HD Photos' AS VARCHAR(20)) AS Name ,
                        NULL AS Status
                UNION ALL
                SELECT  CAST('Linked Floorplans' AS VARCHAR(20)) AS Name ,
                        NULL AS Status
                UNION ALL
                SELECT  CAST('Priced Units' AS VARCHAR(20)) AS Name ,
                        NULL AS Status
                UNION ALL
                SELECT  CAST('Coupon' AS VARCHAR(20)) AS Name ,
                        NULL AS Status
                UNION ALL
                SELECT  CAST('Ratings & Reviews' AS VARCHAR(20)) AS Name ,
                        NULL AS Status
                UNION ALL
                SELECT  CAST('Panoramic Tour' AS VARCHAR(20)) AS Name ,
                        NULL AS Status
                UNION ALL
                SELECT  CAST('HD Video' AS VARCHAR(20)) AS Name ,
                        NULL AS Status
                UNION ALL
                SELECT  CAST('AG Sites' AS VARCHAR(20)) AS Name ,
                        NULL AS Status

            END
    
    
    END

    SET NOCOUNT OFF









GO
/****** Object:  StoredProcedure [Reports].[rpt_DataProductMarketLevelUnitInfo]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Reports].[rpt_DataProductMarketLevelUnitInfo] (
    @AGPropertyID INT
	)

/*******************************************************************************************
* Name:	Reports.[rpt_DataProductMarketLevelUnitInfo]
* ------------------------------------------------------------------------------------------
* Desc:	This provides Market Level data at the Unit Level the Market
* ------------------------------------------------------------------------------------------
* Test:	EXEC Reports.[rpt_DataProductMarketLevelUnitInfo]  6867
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist: 01	12/16/2015		Shetal Gandhi		No ticket; Created for the Urgent Data Product Project
********************************************************************************************/
AS
SET NOCOUNT ON;



DECLARE @CurrYearCurrMonth INT ,
		@PriorYearCurrMonth INT,
		@CurrYearLastMonth INT

SET @CurrYearCurrMonth = CAST(CONVERT(VARCHAR(8),DATEADD(mm,-1,DATEADD(dd,-(DAY(GETDATE())-1),GETDATE())),112) AS INT)  -- 1st of Last Month
--CAST(CONVERT(VARCHAR(6),GETDATE(),112) AS INT)
SET @PriorYearCurrMonth = CAST(CONVERT(VARCHAR(8),DATEADD(yyyy,-1,DATEADD(mm,-1,DATEADD(dd,-(DAY(GETDATE())-1),GETDATE()))),112) AS INT) -- 1st of Last Month, 1 year ago
SET @CurrYearLastMonth = CAST(CONVERT(VARCHAR(8),DATEADD(mm,-2,DATEADD(dd,-(DAY(GETDATE())-1),GETDATE())),112) AS INT) --2 months ago --CAST(CONVERT(VARCHAR(6),DATEADD(mm,-1,GETDATE()),112) AS INT)


BEGIN TRY
    DROP TABLE #SubjectProperty
END TRY
BEGIN CATCH 
END CATCH

BEGIN TRY
    DROP TABLE #MarketProperties
END TRY
BEGIN CATCH 
END CATCH

BEGIN TRY
	DROP TABLE #Dates
END TRY
BEGIN CATCH 
END CATCH

BEGIN TRY
	DROP TABLE #SubjectUnits
END TRY
BEGIN CATCH 
END CATCH

BEGIN TRY
	DROP TABLE #MarketUnits
END TRY
BEGIN CATCH 
END CATCH


SELECT *
INTO #Dates
FROM dbautility.dimension.dates AS d
WHERE YMDID BETWEEN @PriorYearCurrMonth AND @CurrYearCurrMonth

SELECT DISTINCT 
		dl.ListingID
       ,PropertyIDAG
       ,PropertyIDRent
       ,PropertyName
       ,PropertyZipCode
       ,zm.MSACode
       ,zmsa.MSAName
       ,zmsa.MSAType
INTO    #SubjectProperty
FROM    Rentpath.Dimension.Listings AS dl
JOIN    DBAUtility.dbo.ZipMSA AS zm
        ON dl.PropertyZipCode = zm.ZipCode
JOIN    DBAUtility.dbo.ZipMSALookup AS zmsa
		on zmsa.MSACode = zm.MSACode
where dl.PropertyIDAG = @AGPropertyID 
and (dl.StatusIDAG = 1 OR dl.StatusIDRent = 1)


select DISTINCT 
		dl.ListingID
       ,dl.PropertyIDAG
       ,dl.PropertyIDRent
       ,dl.PropertyName
       ,dl.PropertyZipCode
       ,zm.MSACode
into #MarketProperties
from Rentpath.Dimension.Listings AS dl
JOIN    DBAUtility.dbo.ZipMSA AS zm
        ON dl.PropertyZipCode = zm.ZipCode
JOIN	#SubjectProperty as s
		on s.MSACode = zm.MSACode
WHERE (dl.StatusIDAG = 1 OR dl.StatusIDRent = 1)


	SELECT d.YMDID
	--,CASE WHEN Bedrooms >= 4 THEN '4+' ELSE CAST(Bedrooms AS VARCHAR(10)) END AS Bedrooms  
	,MIN(ul.PriceLow) AS MinLowPrice, COUNT(DISTINCT ul.ID) AS UnitCount, AVG(ul.SqFtLow) AS Sqft
	INTO #MarketUnits
	FROM #Dates AS d
	FULL OUTER JOIN ApartmentGuide.[Dimension].[UnitLayouts] AS ul
		ON d.ymdid BETWEEN DimStartYMDID AND ISNULL(DimEndYMDID,'29990101')	
	JOIN #MarketProperties AS mp
			ON mp.ListingID = ul.ListingID
	WHERE d.YMDID BETWEEN DimStartYMDID AND ISNULL(DimEndYMDID,'29990101')
	AND bedrooms = 1
	GROUP BY d.YMDID
	--GROUP BY d.YearMonth,  CASE WHEN Bedrooms >= 4 THEN '4+' ELSE CAST(Bedrooms AS VARCHAR(10)) END 
	
SELECT ul.ListingID,d.YMDID
--,CASE WHEN Bedrooms >= 4 THEN '4+' ELSE CAST(Bedrooms AS VARCHAR(10)) END AS Bedrooms  
,MIN(ul.PriceLow) AS MinLowPrice, COUNT(DISTINCT ul.ID) AS UnitCount, AVG(ul.SqFtLow) AS Sqft
INTO #SubjectUnits
FROM #Dates AS d
FULL OUTER JOIN ApartmentGuide.[Dimension].[UnitLayouts] AS ul
	ON d.ymdid BETWEEN DimStartYMDID AND ISNULL(DimEndYMDID,'29990101')	
JOIN #SubjectProperty AS lm
		ON lm.ListingID = ul.ListingID
WHERE d.YMDID BETWEEN DimStartYMDID AND ISNULL(DimEndYMDID,'29990101')
AND bedrooms = 1
GROUP BY ul.ListingID,d.YMDID
--,  CASE WHEN Bedrooms >= 4 THEN '4+' ELSE CAST(Bedrooms AS VARCHAR(10)) END 
ORDER BY d.YMDID

SELECT  'Subject' AS Metric
, MinLowPrice AS [Level$]
, (MinLowPrice - PYMinLowPrice) / PYMinLowPrice AS [%AnnualGrowth]-- AS  PriorYearRent
, UnitCount AS UnitCount
, SQft		AS SQft
, MinLowPrice / SQft AS [Rent/SF]
, (MinLowPrice - CYLMMinLowPrice) / CYLMMinLowPrice AS [%LastMonthGrowth]-- AS  PriorYearRent
FROM #SubjectUnits AS su
LEFT JOIN (SELECT MinLowPrice AS PYMinLowPrice
		   FROM #SubjectUnits
		   WHERE YMDID = @PriorYearCurrMonth ) AS py
 ON  1 = 1 
 LEFT JOIN (SELECT MinLowPrice AS CYLMMinLowPrice
		   FROM #SubjectUnits
		   WHERE YMDID = @CurrYearLastMonth ) AS cylm
 ON  1 = 1 
WHERE ymdid = @CurrYearCurrMonth	
UNION
SELECT   'MSA/Market' AS Metric
, MinLowPrice AS [Level$]
, (MinLowPrice - PYMinLowPrice) / PYMinLowPrice AS [%AnnualGrowth]-- AS  PriorYearRent
, UnitCount AS UnitCount
, SQft		AS SQft
, MinLowPrice / SQft AS [Rent/SF]
, (MinLowPrice - CYLMMinLowPrice) / CYLMMinLowPrice AS [%LastMonthGrowth]-- AS  PriorYearRent
FROM #MarketUnits AS su
LEFT JOIN (SELECT MinLowPrice AS PYMinLowPrice
		   FROM #MarketUnits
		   WHERE YMDID = @PriorYearCurrMonth ) AS py
 ON  1 = 1 
 LEFT JOIN (SELECT MinLowPrice AS CYLMMinLowPrice
		   FROM #MarketUnits
		   WHERE YMDID = @CurrYearLastMonth ) AS cylm
 ON  1 = 1 
WHERE ymdid = @CurrYearCurrMonth
		




SET NOCOUNT OFF;


GO
/****** Object:  StoredProcedure [Reports].[rpt_Delete_Subscription]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*--######################################################################################
*
* Name:	[Reports].[rpt_Delete_Subscription]
*
* Desc:  Takes subscription information and writes new record if SubscriptionID = 0, or updates data if SubscriptionID <> 0.
*
* Test:	EXEC Reports.rpt_Delete_Subscription 24,'1A0D6CD1-1C7B-4588-A45A-85EF9654285C'
*
* SELECT * FROM dbo.DashboardSubscriptions WITH (NOLOCK)
* SELECT * FROM dbo.DashboardSubscriptionsAudit WITH (NOLOCK) WHERE SubscriptionID = 24
* Hist:	01	02/12/2015	Bob Langley		Ticket 18155 - Initial Version 
* Hist: 02	06/02/2015	Bob Langley		Ticket 19612 - Changed to add the new AdvancedReportType column
* Hist: 03	06/24/2015	Bob Langley		Ticket 19743, Story 96653792 - For release 1.6, changed to add the new column AdvancedMethod for sending by either email or FTP (was just FTP).
--#######################################################################################*/
CREATE PROCEDURE [Reports].[rpt_Delete_Subscription]
(@subscriptionid	int
,@userguid	uniqueidentifier
)
AS 
BEGIN

    SET NOCOUNT ON;

	DECLARE
		@ErrorMessage					NVARCHAR(4000),
		@ErrorNumber					INT,
		@ErrorSeverity					INT,
		@ErrorState						INT,
		@ErrorLine						INT,
		@ErrorProcedure					NVARCHAR(200)



	DECLARE @userid int
	DECLARE @numrecs int
	DECLARE @recn int




	/* ===================================================================================================================== */
	--Main Section
	BEGIN TRY

		if @SubscriptionID <> 0
			BEGIN
				BEGIN TRANSACTION

				--insert "BEFORE" record to Audit
				INSERT INTO dbo.DashboardSubscriptionsAudit
				SELECT SubscriptionID, PropertyID, UserGUID, [Description], Report, AdvancedReportType, AdvancedMethod, [TO], Frequency, Creator, [Server], Port, [Login], [Password], DisplayColumns, LCHost, LCUser, LCDate, 0 AS FinalDelete
				FROM dbo.DashboardSubscriptions
				WHERE SubscriptionID = @subscriptionID

				--insert Final record to Audit to show the dates and times and who did it (using @userguid to replace UserGUID column name)
				INSERT INTO dbo.DashboardSubscriptionsAudit
				SELECT SubscriptionID, PropertyID, @userguid, [Description], Report, AdvancedReportType, AdvancedMethod, [TO], Frequency, Creator, [Server], Port, [Login], [Password], DisplayColumns, HOST_NAME(), USER, GETDATE(), 1 AS FinalDelete
				FROM dbo.DashboardSubscriptions
				WHERE SubscriptionID = @subscriptionID

				--now delete it from main table
				DELETE FROM dbo.DashboardSubscriptions
				WHERE SubscriptionID = @subscriptionid

				SET @recn = 0
				SET @numrecs = @@rowcount


				COMMIT TRANSACTION
			END

	
	END TRY
	BEGIN CATCH
		SELECT 
			@ErrorMessage		= ERROR_MESSAGE(),
			@ErrorNumber		= ERROR_NUMBER(),
			@ErrorSeverity		= ERROR_SEVERITY(),
			@ErrorState			= ERROR_STATE(),
			@ErrorLine			= ERROR_LINE(),
			@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');
		

		if @@trancount > 0
			ROLLBACK TRANSACTION


		SET @ErrorMessage = 'Attempting to delete Subscription information. Rolling back transaction. In SPROC [Reports].[rpt_Delete_Subscription].  Error - ' + @ErrorMessage

		raiserror(@ErrorMessage,16,1) with log;

		RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	
	END CATCH

	/* ===================================================================================================================== */

	SET NOCOUNT OFF;
END;




GO
/****** Object:  StoredProcedure [Reports].[rpt_DropDown_ActiveListings]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*--######################################################################################
*
* Name:	[Reports].[rpt_DropDown_ActiveListings]
*
* Desc:  List of Properties for Rent and AG that are active
*
* Test:	EXEC Reports.[rpt_DropDown_ActiveListings] 
* 
*	
* Hist:	01	10/20/2015	Shetal Gandhi		Ticket 21125 - Initial Version 
--#######################################################################################*/
CREATE PROCEDURE [Reports].[rpt_DropDown_ActiveListings] (@Market VARCHAR(100))

AS 
BEGIN

    SET NOCOUNT ON;

SELECT ListingID, PropertyName, PropertyName +'('+CAST(ListingID AS VARCHAR(20))+')' AS DisplayProperty
FROM [Dimension].[Listings]
WHERE ([StatusIDAG] = 1 OR [StatusIDRent] = 1)
AND MarketCD = CASE WHEN @Market = 'All' THEN MarketCD ELSE @Market end
ORDER BY PropertyName

	SET NOCOUNT OFF;
END;




GO
/****** Object:  StoredProcedure [Reports].[rpt_DropDown_ActiveListingsByMgmtCoOrMarket]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Reports].[rpt_DropDown_ActiveListingsByMgmtCoOrMarket] (
    @Selection INT
   ,@FilterID VARCHAR(100))
/*--######################################################################################
*
* Name:	[Reports].[rpt_DropDown_ActiveListingsByMgmtCoOrMarket]
*
* Desc:  List of Properties for Rent and AG that are active
*
* Test:	EXEC Reports.[rpt_DropDown_ActiveListingsByMgmtCoOrMarket] 
* @Selection = 1 = MgmtCo
			 = 2 = Market
* @FilterID = MarketCD or MgmtCoID

* Hist:	01	11/20/2015	Shetal Gandhi		Ticket 21125 - Initial Version 
--#######################################################################################*/

AS
BEGIN

    SET NOCOUNT ON;
    IF @Selection = 1
        BEGIN
            SELECT  ListingID
                   ,PropertyName
                   ,PropertyName + '(' + CAST(ListingID AS VARCHAR(20)) + ')' AS DisplayProperty
            FROM    [Dimension].[Listings]
            WHERE   ([StatusIDAG] = 1
                     OR [StatusIDRent] = 1)
                    AND ISNULL(MgtCoIDAG,MgtCoIDRent) = CASE WHEN @FilterID = 'All' THEN ISNULL(MgtCoIDAG,MgtCoIDRent)
                                                             ELSE @FilterID
                                                        END
            ORDER BY PropertyName
        END

    IF @Selection = 2
        BEGIN
            SELECT  ListingID
                   ,PropertyName
                   ,PropertyName + '(' + CAST(ListingID AS VARCHAR(20)) + ')' AS DisplayProperty
            FROM    [Dimension].[Listings]
            WHERE   ([StatusIDAG] = 1
                     OR [StatusIDRent] = 1)
                    AND MarketCD = CASE WHEN @FilterID = 'All' THEN MarketCD
                                        ELSE @FilterID
                                   END
            ORDER BY PropertyName

        END
    SET NOCOUNT OFF
END  






GO
/****** Object:  StoredProcedure [Reports].[rpt_DropDown_ActiveProperties]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/*--######################################################################################
*
* Name:	[Reports].[rpt_DropDown_ActiveProperties]
*
* Desc:  List of Properties for Rent and AG that are active
*
* Test:	EXEC Reports.[rpt_DropDown_ActiveProperties] 
*
*
* Hist:	01	07/01/2015	Shetal Gandhi		Ticket 19652 - Initial Version 
--#######################################################################################*/
CREATE PROCEDURE [Reports].[rpt_DropDown_ActiveProperties]

AS 
BEGIN

    SET NOCOUNT ON;

SELECT PropertyID, Property+' - ' +
CASE WHEN AGSite IS NOT NULL AND RentSite IS NOT NULL THEN 
			AGSite+'/'+RentSite
	 WHEN AGSite IS NULL THEN RentSite
	 WHEN RentSite IS NULL THEN AGSite
	 ELSE NULL
	end   AS PropertyDisplay
FROM (
SELECT PropertyID, PROPERTY ,MAX(CASE WHEN Site = 'AG' THEN 'AG' ELSE NULL END) AS AGSite 
							,MAX(CASE WHEN Site = 'Rent' THEN 'Rent' ELSE NULL END) AS RentSite
FROM (
		SELECT PropertyIDAG AS PropertyID,
			   PropertyName+' ('+CONVERT(varchar,PropertyIDAG)+')' PROPERTY,
			   'AG' AS Site
		FROM   RentPath.dimension.listings
		WHERE  StatusIDAG = 1

		UNION ALL

		SELECT PropertyIDRent AS PropertyID,
			   PropertyName+' ('+CONVERT(varchar,PropertyIDRent)+')' PROPERTY,
			   'Rent' AS Site
		FROM   RentPath.dimension.listings
		WHERE  StatusIDRent = 1
     
  ) AS a
  GROUP BY PropertyID, PROPERTY   
) AS b    
UNION ALL

		SELECT NULL PropertyID,
					 ' *All Properties' PROPERTY
ORDER  BY Propertydisplay


	SET NOCOUNT OFF;
END;




GO
/****** Object:  StoredProcedure [Reports].[rpt_DropDown_AllListingsByMgmtCoOrMarket]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


Create PROCEDURE [Reports].[rpt_DropDown_AllListingsByMgmtCoOrMarket] (
    @Selection INT
   ,@FilterID VARCHAR(100))
/*--######################################################################################
*
* Name:	[Reports].[rpt_DropDown_ActiveListingsByMgmtCoOrMarket]
*
* Desc:  List of Properties for Rent and AG that are active
*
* Test:	EXEC Reports.[rpt_DropDown_AllListingsByMgmtCoOrMarket] 
* @Selection = 1 = MgmtCo
			 = 2 = Market
* @FilterID = MarketCD or MgmtCoID

* Hist:	01	03/24/2017	Richard Chen 		Initial Case 01429756 - Borrow Code from
                                            [Reports].[rpt_DropDown_ActiveListingsByMgmtCoOrMarket]
											Remove "Where ([StatusIDAG] = 1 OR [StatusIDRent] = 1)" filter
											Add [Inactive] to Display
--#######################################################################################*/

AS
BEGIN

    SET NOCOUNT ON;
    IF @Selection = 1
        BEGIN
            SELECT  ListingID
                   ,PropertyName
                   ,PropertyName + '(' + CAST(ListingID AS VARCHAR(20)) + ')'
				    +case when StatusIDAG =0 and StatusIDRent = 0 then ' [Inactive]' else '' end  AS DisplayProperty
            FROM    [Dimension].[Listings]
            WHERE   ISNULL(MgtCoIDAG,MgtCoIDRent) = CASE WHEN @FilterID = 'All' THEN ISNULL(MgtCoIDAG,MgtCoIDRent)
                                                             ELSE @FilterID
                                                        END
            ORDER BY PropertyName
        END

    IF @Selection = 2
        BEGIN
            SELECT  ListingID
                   ,PropertyName
                   ,PropertyName + '(' + CAST(ListingID AS VARCHAR(20)) + ')'
				    +case when StatusIDAG =0 and StatusIDRent = 0 then ' [Inactive]' else '' end AS DisplayProperty
            FROM    [Dimension].[Listings]
            WHERE   MarketCD = CASE WHEN @FilterID = 'All' THEN MarketCD
                                        ELSE @FilterID
                                   END
            ORDER BY PropertyName

        END
    SET NOCOUNT OFF
END  






GO
/****** Object:  StoredProcedure [Reports].[rpt_DropDown_ETUndeliverableType]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Reports].[rpt_DropDown_ETUndeliverableType]
/*************************************************************************************************
*
* Name:	Reports.rpt_DropDown_ETUndeliverableType
*
* Desc:	This provides a drop down list of Exact Target Undeliverable Types (created from UndelType values in Edialog table)
*
* Test:	EXEC Reports.rpt_DropDown_ETUndeliverableType
*
* Note: This procedure hard codes the values for now because it takes entirely too long to pull them
*		dynamically. I may work with the Oracle team on adding an index but I've already asked them
*		for an index on ET_Leads and want them to address that first.
*
* Hist:	01	09/23/2016		Sarah Mims			Initial Version. Ticket # 23173
**************************************************************************************************/
AS

SET NOCOUNT ON
SELECT 'All' AS UndeliverableType
UNION
SELECT 'None'
UNION
SELECT 'Block bounce'
UNION
SELECT 'Soft bounce'
UNION
SELECT 'HARD'
UNION
SELECT 'Hard bounce'
UNION
SELECT 'Technical/Other bounce'
UNION
SELECT 'Unknown bounce'
UNION
SELECT 'Not Attempted - Held'
UNION
SELECT 'SOFT'


SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [Reports].[rpt_Dropdown_GetAllowedPropForUser]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Reports].[rpt_Dropdown_GetAllowedPropForUser] (
      @iUserID INT
	  )
AS
/******************************************************************************************
* Name: [reports].[rpt_Dropdown_GetAllowedPropForUser]
* -----------------------------------------------------------------------------------------
* Desc: Dropdown of properties for My.AG reoprts
* -----------------------------------------------------------------------------------------
* Test: EXEC reports.rpt_Dropdown_GetAllowedPropForUser 6153
*		EXEC reports.rpt_Dropdown_GetAllowedPropForUser 295050
*		EXEC reports.rpt_Dropdown_GetAllowedPropForUser 288436
*		EXEC reports.rpt_Dropdown_GetAllowedPropForUser 52892
*		EXEC reports.rpt_Dropdown_GetAllowedPropForUser 6292
*		EXEC reports.rpt_Dropdown_GetAllowedPropForUser 64731
* -----------------------------------------------------------------------------------------
* History: 
* 01     02/16/2015     Bob Langley     Ticket 18155 - Initial Version - took RentPath.[reports].[rpt_Dropdown_GetUserPropState] and modified
* 02	 09/16/2015		Shetal Gandhi	Ticket 20421 - Modified to use the New Rentpath tables instead of the AG Combined views
*********************************************************************************************************/
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET NOCOUNT ON

------------------------------------------------------
---- Declare & Set Variables
------------------------------------------------------
DECLARE @YMDID int,
        @AccessToAll int,
        @Role varchar(25)

DECLARE @iStateCD varchar(12)
SET @iStateCD = NULL
   ------------------------------------------------------
   ---- Determine if the user is an admin
   ------------------------------------------------------

   SELECT @AccessToAll = COUNT(dsum.accesstoall)
   FROM   Dimension.vw_DSUM_DataRight AS dsum
   WHERE  dsum.userid = @iuserid
   AND    dsum.accesstoall <> 0;

   ---if it is NULL, set it to 0
   SET @AccessToAll  = IsNULL(@AccessToAll,0)

   ------------------------------------------------------
   ---- find the highest permission (lowest role) for the user
   ------------------------------------------------------
   SELECT @Role = MIN(RoleID)
   FROM   Dimension.vw_DSUM_USERROLE ur
   WHERE  ur.UserID = @iUserID
   ---if it is NULL, set it to 0
   SET @Role = IsNULL(@Role,0)

   -----------------------------------------------------------------------------------
   ---- If the user is an admin by Role or with the AccessToAll flag, 
   ---- select back all listings. Gotta use Dimension.Listings here because 
   ---- the DSUM table only has listings with permissions setup, not all listings
   -----------------------------------------------------------------------------------
   ---- Note: A ListingID can have different PropertyNames and PropertyCities between
   ---- AG listing and the Rent listing. In the query below I get a distinct name for
   ---- each listing and always return the AG version unless it is specifically run for
   ---- Website = Rent (1)
   -----------------------------------------------------------------------------------
   IF @AccessToAll > 0 OR @Role IN (2,3)  
   BEGIN
           SELECT DISTINCT
                    combined.ListingID,
					combined.PropertyIDAG AS AGPropertyID, ----For the AG Dashboard Drop down. This is temporary until that report is converted to an LMS report.
                    list.PropertyName
                        +', LID: '+CONVERT(varchar,combined.ListingID)
                        +', '+ list.PropertyCity
                        +CASE WHEN list.IsActiveAG+list.IsActiveRent = 2 THEN ' (AG/Rent)'
                                WHEN list.IsActiveAG = 1 THEN ' (AG)'
                                WHEN list.IsActiveRent = 1 THEN ' (Rent)'
                                WHEN list.IsActiveAG+list.IsActiveRent = 0 THEN ''
                                ELSE ''
                                END PropertyDisplay
             FROM   Rentpath.Dimension.Listings AS  combined
                    ---------------------------------------------------------------
                    ---- create 1 record per listing to get AG/Rent active status
                    ---------------------------------------------------------------
                    INNER JOIN (SELECT ListingID,
                                       MAX(PropertyName) PropertyName,
                                       MAX(PropertyCity) PropertyCity,
                                       MAX(StatusIDAG) IsActiveAG,
                                       MAX(StatusIDRent) IsActiveRent
                                FROM   Rentpath.dimension.Listings
                                GROUP  BY ListingID
                                ) list
                        ON combined.ListingID = list.ListingID
             WHERE    combined.PropertyState = (CASE WHEN @iStateCD IS NULL THEN combined.PropertyState ELSE @iStateCD END)
				AND (list.IsActiveAG = 1 
						OR list.IsActiveRent = 1
						)
             ORDER  BY PropertyDisplay

   END
   ELSE
   BEGIN
            -----------------------------------------------------------------------------------
             ---- For all users that aren't Admins, select back what they can see by UserID
             -----------------------------------------------------------------------------------
            SELECT  fd.ListingID
                    ,fd.AGPropertyID  ----For the AG Dashboard Drop down. This is temporary until that report is converted to an LMS report.
                    ,fd.PropertyName 
					+ ', LID: ' + CONVERT(VARCHAR,fd.ListingID) + ', ' 
					+ fd.PropertyCity + CASE WHEN fd.IsActiveAG + fd.IsActiveRent = 2 THEN ' (AG/Rent)'
											WHEN fd.IsActiveAG = 1 THEN ' (AG)'
											WHEN fd.IsActiveRent = 1 THEN ' (Rent)'
											WHEN fd.IsActiveAG + fd.IsActiveRent = 0 THEN ''
											ELSE ''
										END																AS PropertyDisplay

			FROM
			(
			SELECT d.ListingID
			,d.AGPropertyID
			,d.PropertyName
			,d.PropertyCity
			,MAX(d.IsActiveAG)		AS IsActiveAG
			,MAX(d.IsActiveRent)	AS IsActiveRent

			FROM
			 -----------------------------------------------------------------------------------
             ---- Management Company Entities
             -----------------------------------------------------------------------------------  			 			 			 			 
					 (
					 SELECT dl.ListingID
						   ,dl.PropertyCity
						   ,dl.PropertyIDAG AS AGPropertyID
						   ,dsum.IsActiveAG
						   ,dsum.IsActiveRent
						   ,dl.PropertyName
					 FROM   Dimension.vw_DSUM_Management AS dsum
					 JOIN   Rentpath.Dimension.Listings AS dl
							ON dsum.MgtCoID = COALESCE(dl.MgtCoIDAG, dl.MgtCoIDRent)
					 WHERE  dsum.accesstoall = 0
							AND dsum.userid = @iUserID
							AND dl.PropertyState = (CASE WHEN @iStateCD IS NULL THEN dl.PropertyState ELSE @iStateCD END)

					 UNION

					 -----------------------------------------------------------------------------------
					 ---- Property Entities
					 -----------------------------------------------------------------------------------
						SELECT  dl.ListingID
							   ,dl.PropertyCity
							   ,dl.PropertyIDAG AS AGPropertyID
							   ,dsum.IsActiveAG
							   ,dsum.IsActiveRent
							   ,dl.PropertyName
						FROM    Dimension.vw_DSUM_Property AS dsum
						JOIN    Rentpath.Dimension.Listings AS dl
								ON dsum.ListingID = dl.ListingID
						WHERE   dsum.accesstoall = 0
								AND dsum.userid = @iuserid
								AND dsum.entitytype = 'Properties'
								AND dl.PropertyState = (CASE WHEN @iStateCD IS NULL THEN dl.PropertyState ELSE @iStateCD END)
					  ) AS d  
					  					  
		GROUP BY d.ListingID
			,d.AGPropertyID
			,d.PropertyName
			,d.PropertyCity					                      
			) AS fd
   WHERE 
	(fd.IsActiveAG = 1 
		OR fd.IsActiveRent = 1
		)
   ORDER  BY PropertyDisplay

 END




GO
/****** Object:  StoredProcedure [Reports].[rpt_Dropdown_GetMarket]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* SINGLE MARKET SELECTION ONLY*/
cREATE PROCEDURE [Reports].[rpt_Dropdown_GetMarket]
AS
SELECT DISTINCT MarketName,MarketCD 
FROM [Dimension].[Listings]
ORDER BY MarketName


GO
/****** Object:  StoredProcedure [Reports].[rpt_Dropdown_GetMarketOrMgmtCo]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/*--######################################################################################
*
* Name:	[Reports].[rpt_Dropdown_GetMarketOrMgmtCo]
*
* Desc:  List of Markets or ManagementCompanies
*
* Test:	EXEC Reports.[rpt_Dropdown_GetMarketOrMgmtCo] 1
*   1 = Management Company
	2 = Market
*	
* Hist:	01	11/20/2015	Shetal Gandhi		Ticket 21125 - Initial Version 
* Hist: 02	07/20/2016	Colleen Rocks		Ticket 23524; added filter of active props only
--#######################################################################################*/

CREATE PROCEDURE [Reports].[rpt_Dropdown_GetMarketOrMgmtCo] (@Selection INT)
AS

IF @Selection = 1 

BEGIN
SELECT ' All Management Companies' AS  Name,'ALL' AS Code
UNION ALL
SELECT DISTINCT ISNULL(MgtCoNameAG,MgtCoNameRent) AS Name,CAST(ISNULL(MgtCoIDAG,MgtCoIDRent)AS VARCHAR) AS Code
FROM [Dimension].[Listings]
WHERE StatusIDAG = 1 OR StatusIDRent = 1
ORDER BY 1


END

IF @Selection = 2
BEGIN 

SELECT ' All Markets' AS  Name,'ALL' AS Code
UNION ALL
SELECT DISTINCT MarketName AS Name ,CAST(MarketCD AS VARCHAR)  AS Code
FROM [Dimension].[Listings]
WHERE StatusIDAG = 1 OR StatusIDRent = 1
ORDER BY 1


END 



GO
/****** Object:  StoredProcedure [Reports].[rpt_Dropdown_GetMarkets]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Reports].[rpt_Dropdown_GetMarkets]
AS
SELECT ' All Markets' as  MarketName,'ALL' as MarketCD
UNION ALL
SELECT DISTINCT MarketName,MarketCD 
FROM [Dimension].[Listings]
ORDER BY MarketName


GO
/****** Object:  StoredProcedure [Reports].[rpt_Dropdown_GetMgtCoCBSAList]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Reports].[rpt_Dropdown_GetMgtCoCBSAList]
  (	@iMgtCoID INT
	)
/*************************************************************************************************
*
* Name:	reports.rpt_Dropdown_GetMgtCoCBSAList
*
* Desc:	This gets the list of CBSAs for a particular Management Company
*
* Test:	EXEC reports.rpt_Dropdown_GetMgtCoCBSAList 10076
*		EXEC reports.rpt_Dropdown_GetMgtCoCBSAList 6024
*		EXEC reports.rpt_Dropdown_GetMgtCoCBSAList 6008
*		EXEC reports.rpt_Dropdown_GetMgtCoCBSAList 6034
*		EXEC reports.rpt_Dropdown_GetMgtCoCBSAList 6010
*		EXEC reports.rpt_Dropdown_GetMgtCoCBSAList 6020
*		EXEC reports.rpt_Dropdown_GetMgtCoCBSAList -1
*
* Note: This was created from Corporate.reports.rpt_Dropdown_GetMgtCoCBSAList
*
* Hist:	01	03/26/2014		Sarah Mims			Initial Version.
* Hist:	02	06/06/2014		Chadwick Smith		tik#15858 Now handles "Select All" in the MgtCo dropdown (mgtcoid = -1)
*		03	12/01/2014		Sarah Mims			No ticket - DMac Project
*													1) No longer taking Website into account
*													2) Changed input parameter to iUserGuid	
*													3) Cleaned up old parameters not needed anymore
**************************************************************************************************/
AS
SET NOCOUNT ON;

	------------------------------------------------------
	--Get CBSA List for the selected management company
	------------------------------------------------------
    SELECT DISTINCT
            ISNULL(zc.CBSACode,'00000') AS CBSACode
           ,ISNULL(zc.CBSAName,'none') AS CBSAName
    FROM    ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
    JOIN    DBAUtility.dbo.ZipCBSA AS zc
            ON dl.ZIPCode = zc.ZipCode
               AND dl.StatusID = 1
               AND dl.MgtCoID = CASE @iMgtCoID WHEN -1 THEN dl.MgtCoID ELSE @iMgtCoID END
    ORDER BY CBSAName;

SET NOCOUNT OFF;



GO
/****** Object:  StoredProcedure [Reports].[rpt_Dropdown_GetMgtCoCBSAList_RCTest]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


Create PROCEDURE [Reports].[rpt_Dropdown_GetMgtCoCBSAList_RCTest]
  (	@iMgtCoID INT
	)
/*************************************************************************************************
*
* Name:	reports.rpt_Dropdown_GetMgtCoCBSAList
*
* Desc:	This gets the list of CBSAs for a particular Management Company
*
* Test:	EXEC reports.rpt_Dropdown_GetMgtCoCBSAList 10076
*		EXEC reports.rpt_Dropdown_GetMgtCoCBSAList 6024
*		EXEC reports.rpt_Dropdown_GetMgtCoCBSAList 6008
*		EXEC reports.rpt_Dropdown_GetMgtCoCBSAList 6034
*		EXEC reports.rpt_Dropdown_GetMgtCoCBSAList 6010
*		EXEC reports.rpt_Dropdown_GetMgtCoCBSAList 6020
*		EXEC reports.rpt_Dropdown_GetMgtCoCBSAList -1
*
* Note: This was created from Corporate.reports.rpt_Dropdown_GetMgtCoCBSAList
*
* Hist:	01	03/26/2014		Sarah Mims			Initial Version.
* Hist:	02	06/06/2014		Chadwick Smith		tik#15858 Now handles "Select All" in the MgtCo dropdown (mgtcoid = -1)
*		03	12/01/2014		Sarah Mims			No ticket - DMac Project
*													1) No longer taking Website into account
*													2) Changed input parameter to iUserGuid	
*													3) Cleaned up old parameters not needed anymore
**************************************************************************************************/
AS
SET NOCOUNT ON;

	------------------------------------------------------
	--Get CBSA List for the selected management company
	------------------------------------------------------
    SELECT DISTINCT
            ISNULL(zc.CBSACode,'00000') AS CBSACode
           ,ISNULL(zc.CBSAName,'none') AS CBSAName
    FROM    ApartmentGuide.Dimension.AGRentCombinedDimensionListingsRCTest AS dl
    JOIN    DBAUtility.dbo.ZipCBSA AS zc
            ON dl.ZIPCode = zc.ZipCode
               AND dl.StatusID = 1
               AND dl.MgtCoID = CASE @iMgtCoID WHEN -1 THEN dl.MgtCoID ELSE @iMgtCoID END
    ORDER BY CBSAName;

SET NOCOUNT OFF;



GO
/****** Object:  StoredProcedure [Reports].[rpt_Dropdown_GetUserCBSAs]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Reports].[rpt_Dropdown_GetUserCBSAs] (
      @iUserID INT
      ,@State VARCHAR(2) )
AS
/******************************************************************************************
* Name: reports.rpt_Dropdown_GetUserCBSAs
* -----------------------------------------------------------------------------------------
* Desc: Dropdown of CBSA for MyAG AG Market reports
* -----------------------------------------------------------------------------------------
* TEST:		EXEC reports.rpt_Dropdown_GetUserCBSAs 6153,'GA'
*			EXEC reports.rpt_Dropdown_GetUserCBSAs 314202,'AZ'
*			EXEC reports.rpt_Dropdown_GetUserCBSAs 301846,'MD'
*			EXEC reports.rpt_Dropdown_GetUserCBSAs 6682,'MD'
* -----------------------------------------------------------------------------------------
* History: 
* 01     12/01/2014     Sarah Mims      Initial Version created from Corporate.reports.rpt_Dropdown_GetUserCBSAs
*													1) No longer taking Website into account
*													2) Changed input parameter to iUserGuid
*													3) Cleaned up old parameters not needed anymore
* 02	12/15/2014		Sarah Mims		No ticket - changed input parameter back to UserID
* 03	05/27/2015		Sarah Mims		Ticket # 19570 - changed pointer to WEBICON_QA
* 04    05/28/2015      Julie DiPietro  Ticket # 19570 - changed pointer from WEBICON_QA to Corporate
*****************************************************************************************************/
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET NOCOUNT ON

------------------------------------------------------
---- Declare & Set Variables
------------------------------------------------------
DECLARE @AccessToAll int,
        @Role varchar(25)

   ------------------------------------------------------
   ---- Determine if the user is an admin
   ------------------------------------------------------
   SELECT @AccessToAll = COUNT(dsum.accesstoall)
   FROM   Corporate.Dimension.DSUM_DataRight AS dsum
   WHERE  dsum.userid = @iuserid
   AND    dsum.accesstoall <> 0;

   ---if it is NULL, set it to 0
   SET @AccessToAll  = IsNULL(@AccessToAll,0)

   ------------------------------------------------------
   ---- find the highest permission (lowest role) for the user
   ------------------------------------------------------
   SELECT @Role = MIN(RoleID)
   FROM   Corporate.dimension.DSUM_USERROLE ur
   WHERE  ur.UserID = @iUserID

   ---if it is NULL, set it to 0
   SET @Role = IsNULL(@Role,0)


   -----------------------------------------------------------------------------------
   ---- If the user is an admin by Role or with the AccessToAll flag, 
   ---- select back all MSAs
   -----------------------------------------------------------------------------------
   IF @AccessToAll > 0 OR @Role in (2,3)  
   BEGIN

            SELECT DISTINCT
                    zc.CBSACode
                   ,zc.CBSAName
            FROM    ApartmentGuide.Dimension.Listings AS l
			JOIN	DBAUtility.dbo.ZipCBSA AS zc
					ON l.ZipCode = zc.ZIPCode
            JOIN    DBAUtility.dbo.ZipMSA AS zm
                    ON zc.ZIPCode = zm.ZIPCode
            WHERE   zm.CityType = 'D'
                    AND zm.StateFIPS > 0
                    AND zm.StateFIPS <= 56
					AND zm.StateAbbr = @State
            ORDER BY zc.CBSAName

   END
   ELSE
   BEGIN
             -----------------------------------------------------------------------------------
             ---- For all users that aren't Admins, select back what they can see by UserID
             -----------------------------------------------------------------------------------
             ---- Management Company Entities
             -----------------------------------------------------------------------------------
              SELECT DISTINCT
                    zc.CBSACode
                   ,zc.CBSAName
             FROM   Corporate.Dimension.DSUM_Management AS ds
             JOIN   DBAUtility.dbo.ZipCBSA AS zc
                    ON ds.ZipCode = zc.ZIPCode
             JOIN   dbautility.dbo.zipmsa AS zm
                    ON zc.ZIPCode = zm.ZipCode
                       AND zm.CityType = 'D'
             WHERE  ds.accesstoall = 0
                    AND ds.userid = @iUserID
                    AND zm.StateFIPS > 0
                    AND zm.StateFIPS <= 56
					AND zm.StateAbbr = @State	 	


             UNION

             -----------------------------------------------------------------------------------
             ---- Property Entities
             -----------------------------------------------------------------------------------
              SELECT DISTINCT
                    zc.CBSACode
                   ,zc.CBSAName
             FROM   Corporate.Dimension.DSUM_Property  AS ds
             JOIN   DBAUtility.dbo.ZipCBSA AS zc
                    ON ds.ZipCode = zc.ZIPCode
             JOIN   dbautility.dbo.zipmsa AS zm
                    ON zc.ZIPCode = zm.ZipCode
                       AND zm.CityType = 'D'
             WHERE  ds.accesstoall = 0
                    AND ds.userid = @iUserID
                    AND zm.StateFIPS > 0
                    AND zm.StateFIPS <= 56
					AND zm.StateAbbr = @State

             ORDER  BY CBSAName

 END


GO
/****** Object:  StoredProcedure [Reports].[rpt_Dropdown_GetUserMgtCoList]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Reports].[rpt_Dropdown_GetUserMgtCoList]
  (	@iUserID INT
	  ,@iIncSelectAll INT = 0 
)
/*************************************************************************************************
*
* Name:	reports.rpt_Dropdown_GetUserMgtCoList
*
* Desc:	This gets the list of Management Companies a particular user can see
*
* Test:	EXEC reports.rpt_Dropdown_GetUserMgtCoList 6153,0
*		EXEC reports.rpt_Dropdown_GetUserMgtCoList 6153,1
*		EXEC reports.rpt_Dropdown_GetUserMgtCoList 7532,1
*		EXEC reports.rpt_Dropdown_GetUserMgtCoList 7532,0
*		EXEC reports.rpt_Dropdown_GetUserMgtCoList 313754,1
*		EXEC reports.rpt_Dropdown_GetUserMgtCoList 313754,0
*		EXEC reports.rpt_Dropdown_GetUserMgtCoList 6682,1
*		EXEC reports.rpt_Dropdown_GetUserMgtCoList 6682,0
*	    EXEC reports.rpt_Dropdown_GetUserMgtCoList 301846,1
*	    EXEC reports.rpt_Dropdown_GetUserMgtCoList 301846,0
*		EXEC reports.rpt_Dropdown_GetUserMgtCoList 15530,1
*		EXEC reports.rpt_Dropdown_GetUserMgtCoList 15530,0
*		EXEC reports.rpt_Dropdown_GetUserMgtCoList 6150,1
*		EXEC reports.rpt_Dropdown_GetUserMgtCoList 304656,0
*
*
* Note: This was created from Corporate.reports.rpt_Dropdown_GetUserMgtCoList_WithSelectAll
*
* Hist:	01	06/06/2014		Chadwick Smith		tik#15858 Initial Version copied from [reports].[rpt_Dropdown_GetUserMgtCoList]
*												Changed to include "Select All" in the dropdown, but only for admins
*   	02	06/10/2014		Chadwick Smith		tik#15858 Changed it so anyone can see "Select All" except for external clients
*		03	12/01/2014		Sarah Mims			No ticket - DMac Project
*													1) No longer taking Website into account
*													2) Changed input parameter to iUserGuid
*													3) Cleaned up old parameters not needed anymore
*		04	12/15/2014		Sarah Mims			No ticket - changed input parameter back to UserID
*		05	05/27/2015		Sarah Mims			Ticket # 19570 - changed pointer to WEBICON_QA 
*       06  05/28/2015      Julie DiPietro      Ticket # 19570 - changed pointer from WEBICON_QA to Corporate
**************************************************************************************************/
AS
SET NOCOUNT ON

	------------------------------------------------------
	--Declare & Set Variables
	------------------------------------------------------
	DECLARE @AccessToAll	INT
			,@Role			INT
			,@RoleName		VARCHAR(50) 
			,@RoleCheck		INT

	------------------------------------------------------
	--Access To All
	------------------------------------------------------
	SELECT @AccessToAll = COUNT(dsum.accesstoall)
	FROM   Corporate.Dimension.DSUM_DataRight AS dsum
	WHERE  dsum.userid = @iuserid
		AND    dsum.accesstoall <> 0;

	SET @AccessToAll  = ISNULL(@AccessToAll,0)

	------------------------------------------------------
	--Role Check
	------------------------------------------------------
	SELECT @Role = MIN(RoleID)
	FROM   Corporate.dimension.DSUM_USERROLE ur
	WHERE  ur.UserID = @iUserID

	SELECT @RoleName = (
					SELECT Role
					FROM   Corporate.dimension.DSUM_ROLE ur
					WHERE  ur.RoleID = @Role
					)


	SET @RoleCheck = (
					SELECT COUNT(*) 
					FROM Corporate.Dimension.DSUM_Role AS r
					JOIN Corporate.Dimension.DSUM_UserRole AS ur 
						ON ur.RoleID = r.RoleID
						AND LOWER(r.Role) = LOWER(@iUserid)
					WHERE ur.UserID = @iUserid
					)

	------------------------------------------------------------------------------------------------
	--Get Management Company list. If they are an admin or meet the Role check logic, give them everything.
	------------------------------------------------------------------------------------------------

	IF @AccessToAll > 0 OR @RoleCheck > 0 OR EXISTS	(SELECT NULL
														FROM Corporate.Dimension.DSUM_UserRole 
														WHERE RoleID NOT IN (6,7) --6 = Property Manager (Client), 7 = Management Company (Client)
														AND UserID = @iuserid
														) --anyone except for external clients
	
	BEGIN
	    SELECT NewOrder = 0 --used so SelectAll always appears at the top
		      ,MgtCoID = -1
		      ,MgtCoName = '(Select All)'
			  ,MgtCoDisplay = '(Select All)'
	    WHERE @iIncSelectAll = 1
		UNION ALL
		SELECT  NewOrder = 1
		       ,d.MgtCoID
			   ,d.MgtCoName
			   ,MgtCoName + ' - ' + CAST(d.MgtCoID AS VARCHAR(15)) + ' (' + REVERSE(SUBSTRING(REVERSE(ISNULL(CASE WHEN d.AGFlag = 1 THEN 'AG/'
																												  ELSE ''
																											 END + CASE WHEN d.RentFlag = 1 THEN 'Rent/'
																														ELSE ''
																												   END,'N/A/')),2,9999)) + ')' AS MgtCoDisplay
		 FROM   (
				 SELECT mc.MgtCoID
					   ,mc.MgtCoName
					   ,ISNULL(MAX(CASE WHEN ar.Website = 'AG' THEN ar.StatusID
								   END),0) AS AGFlag
					   ,ISNULL(MAX(CASE WHEN ar.Website = 'Rent' THEN ar.StatusID
								   END),0) AS RentFlag
				 FROM   ApartmentGuide.Dimension.MgtCompanies AS mc
				 JOIN   ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS ar
						ON mc.MgtCoID = ar.MgtCoID
				 WHERE mc.IsActive = 1
				 GROUP BY mc.MgtCoID
					   ,mc.MgtCoName
				) AS d    
		 ORDER BY NewOrder, MgtCoName
	END

	ELSE
		------------------------------------------------------------------------------------------------
		-- If they are NOT an admin or meet the Role check logic, find out what they can see.
		------------------------------------------------------------------------------------------------
	BEGIN
		SELECT NewOrder = 0
		,x.MgtCoID
		,x.MgtCoName
		,x.MgtCoName + ' - ' + CAST(x.MgtCoID AS VARCHAR(15)) + ' (' + REVERSE(SUBSTRING(REVERSE(ISNULL(CASE WHEN x.AGFlag = 1 THEN 'AG/'
																													  ELSE ''
																												 END + CASE WHEN x.RentFlag = 1 THEN 'Rent/'
																															ELSE ''
																													   END,'N/A/')),2,9999)) + ')' AS MgtCoDisplay

		FROM

		(
		SELECT	 mc.MgtCoID
				,mc.MgtCoName
				,MAX(AGFlag) AS AGFlag
				,MAX(RentFlag) AS RentFlag
		FROM	 ApartmentGuide.Dimension.MgtCompanies AS mc
		JOIN
			      		  
					(
		------------------------------------------------------------------------------------------------
		--Derive the management company list the user can see based on the market access they have
		------------------------------------------------------------------------------------------------
					SELECT  dl.MgtCoID
							,MAX(CASE WHEN dl.Website = 'AG' AND dl.StatusID = 1 THEN 1 ELSE 0 END)		AS AGFlag
							,MAX(CASE WHEN dl.Website = 'Rent' AND dl.StatusID = 1 THEN 1 ELSE 0 END)	AS RentFlag					
					FROM    Corporate.Dimension.DSUM_Market AS ds
					JOIN    ApartmentGuide.Dimension.ListingMarket AS lm
							ON ds.LocalLookupValue = CASE WHEN lm.MarketCD = 'P00SAL' THEN 'W02000' ELSE lm.MarketCD END
					JOIN	ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
							ON lm.ListingID = dl.ListingID
					WHERE   ds.AccessToAll = 0
							AND ds.UserID = @iUserid
							AND dl.StatusID = 1
					GROUP BY dl.MgtCoID

					UNION		
		------------------------------------------------------------------------------------------------
		--Derive the management company list the user can see based on the property access they have
		------------------------------------------------------------------------------------------------	
					SELECT  dl.MgtCoID
						   ,MAX(CASE WHEN dl.Website = 'AG'AND dl.StatusID = 1 THEN 1 ELSE 0 END)		AS AGFlag
						   ,MAX(CASE WHEN dl.Website = 'Rent' AND dl.StatusID = 1 THEN 1 ELSE 0 END)	AS RentFlag
					FROM    Corporate.Dimension.DSUM_Property AS ds
					JOIN    ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
							ON ds.ListingID = dl.ListingID
					WHERE   ds.UserID = @iUserid
							AND ds.AccessToAll = 0
							AND dl.StatusID = 1
					GROUP BY dl.MgtCoID
		 
					UNION	
		------------------------------------------------------------------------------------------------
		--Get the list of Mangement Companies they can see
		------------------------------------------------------------------------------------------------												           
				   SELECT	mc.MgtCoID
							,MAX(ds.IsActiveAG)		AS AGFlag
							,MAX(ds.IsActiveRent)	AS RentFlag
				   FROM     Corporate.Dimension.DSUM_Management AS ds
				   JOIN     ApartmentGuide.Dimension.MgtCompanies AS mc
							ON ds.MgtCoID = mc.MgtCoID
				   WHERE    ds.AccessToAll = 0
							AND mc.IsActive = 1
							AND ds.UserID = @iUserid
				   GROUP BY mc.MgtCoID
					) AS d

		ON mc.MgtCoID = d.MgtCoID

		GROUP BY mc.MgtCoID
				,mc.MgtCoName
		) AS x
		
	
		ORDER BY MgtCoDisplay					 
	END

SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [Reports].[rpt_Dropdown_GetUserMgtCoList_RCTest]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [Reports].[rpt_Dropdown_GetUserMgtCoList_RCTest]
  (	@iUserID INT
	  ,@iIncSelectAll INT = 0 
)
/*************************************************************************************************
*
* Name:	reports.rpt_Dropdown_GetUserMgtCoList
*
* Desc:	This gets the list of Management Companies a particular user can see
*
* Test:	EXEC reports.rpt_Dropdown_GetUserMgtCoList 6153,0
*		EXEC reports.rpt_Dropdown_GetUserMgtCoList 6153,1
*		EXEC reports.rpt_Dropdown_GetUserMgtCoList 7532,1
*		EXEC reports.rpt_Dropdown_GetUserMgtCoList 7532,0
*		EXEC reports.rpt_Dropdown_GetUserMgtCoList 313754,1
*		EXEC reports.rpt_Dropdown_GetUserMgtCoList 313754,0
*		EXEC reports.rpt_Dropdown_GetUserMgtCoList 6682,1
*		EXEC reports.rpt_Dropdown_GetUserMgtCoList 6682,0
*	    EXEC reports.rpt_Dropdown_GetUserMgtCoList 301846,1
*	    EXEC reports.rpt_Dropdown_GetUserMgtCoList 301846,0
*		EXEC reports.rpt_Dropdown_GetUserMgtCoList 15530,1
*		EXEC reports.rpt_Dropdown_GetUserMgtCoList 15530,0
*		EXEC reports.rpt_Dropdown_GetUserMgtCoList 6150,1
*		EXEC reports.rpt_Dropdown_GetUserMgtCoList 304656,0
*
*
* Note: This was created from Corporate.reports.rpt_Dropdown_GetUserMgtCoList_WithSelectAll
*
* Hist:	01	06/06/2014		Chadwick Smith		tik#15858 Initial Version copied from [reports].[rpt_Dropdown_GetUserMgtCoList]
*												Changed to include "Select All" in the dropdown, but only for admins
*   	02	06/10/2014		Chadwick Smith		tik#15858 Changed it so anyone can see "Select All" except for external clients
*		03	12/01/2014		Sarah Mims			No ticket - DMac Project
*													1) No longer taking Website into account
*													2) Changed input parameter to iUserGuid
*													3) Cleaned up old parameters not needed anymore
*		04	12/15/2014		Sarah Mims			No ticket - changed input parameter back to UserID
*		05	05/27/2015		Sarah Mims			Ticket # 19570 - changed pointer to WEBICON_QA 
*       06  05/28/2015      Julie DiPietro      Ticket # 19570 - changed pointer from WEBICON_QA to Corporate
**************************************************************************************************/
AS
SET NOCOUNT ON

	------------------------------------------------------
	--Declare & Set Variables
	------------------------------------------------------
	DECLARE @AccessToAll	INT
			,@Role			INT
			,@RoleName		VARCHAR(50) 
			,@RoleCheck		INT

	------------------------------------------------------
	--Access To All
	------------------------------------------------------
	SELECT @AccessToAll = COUNT(dsum.accesstoall)
	FROM   Corporate.Dimension.DSUM_DataRight AS dsum
	WHERE  dsum.userid = @iuserid
		AND    dsum.accesstoall <> 0;

	SET @AccessToAll  = ISNULL(@AccessToAll,0)

	------------------------------------------------------
	--Role Check
	------------------------------------------------------
	SELECT @Role = MIN(RoleID)
	FROM   Corporate.dimension.DSUM_USERROLE ur
	WHERE  ur.UserID = @iUserID

	SELECT @RoleName = (
					SELECT Role
					FROM   Corporate.dimension.DSUM_ROLE ur
					WHERE  ur.RoleID = @Role
					)


	SET @RoleCheck = (
					SELECT COUNT(*) 
					FROM Corporate.Dimension.DSUM_Role AS r
					JOIN Corporate.Dimension.DSUM_UserRole AS ur 
						ON ur.RoleID = r.RoleID
						AND LOWER(r.Role) = LOWER(@iUserid)
					WHERE ur.UserID = @iUserid
					)

	------------------------------------------------------------------------------------------------
	--Get Management Company list. If they are an admin or meet the Role check logic, give them everything.
	------------------------------------------------------------------------------------------------

	IF @AccessToAll > 0 OR @RoleCheck > 0 OR EXISTS	(SELECT NULL
														FROM Corporate.Dimension.DSUM_UserRole 
														WHERE RoleID NOT IN (6,7) --6 = Property Manager (Client), 7 = Management Company (Client)
														AND UserID = @iuserid
														) --anyone except for external clients
	
	BEGIN
	    SELECT NewOrder = 0 --used so SelectAll always appears at the top
		      ,MgtCoID = -1
		      ,MgtCoName = '(Select All)'
			  ,MgtCoDisplay = '(Select All)'
	    WHERE @iIncSelectAll = 1
		UNION ALL
		SELECT  NewOrder = 1
		       ,d.MgtCoID
			   ,d.MgtCoName
			   ,MgtCoName + ' - ' + CAST(d.MgtCoID AS VARCHAR(15)) + ' (' + REVERSE(SUBSTRING(REVERSE(ISNULL(CASE WHEN d.AGFlag = 1 THEN 'AG/'
																												  ELSE ''
																											 END + CASE WHEN d.RentFlag = 1 THEN 'Rent/'
																														ELSE ''
																												   END,'N/A/')),2,9999)) + ')' AS MgtCoDisplay
		 FROM   (
				 SELECT mc.MgtCoID
					   ,mc.MgtCoName
					   ,ISNULL(MAX(CASE WHEN ar.Website = 'AG' THEN ar.StatusID
								   END),0) AS AGFlag
					   ,ISNULL(MAX(CASE WHEN ar.Website = 'Rent' THEN ar.StatusID
								   END),0) AS RentFlag
				 FROM   ApartmentGuide.Dimension.MgtCompanies AS mc
				 JOIN   ApartmentGuide.Dimension.AGRentCombinedDimensionListingsRCTest AS ar
						ON mc.MgtCoID = ar.MgtCoID
				 WHERE mc.IsActive = 1
				 GROUP BY mc.MgtCoID
					   ,mc.MgtCoName
				) AS d    
		 ORDER BY NewOrder, MgtCoName
	END

	ELSE
		------------------------------------------------------------------------------------------------
		-- If they are NOT an admin or meet the Role check logic, find out what they can see.
		------------------------------------------------------------------------------------------------
	BEGIN
		SELECT NewOrder = 0
		,x.MgtCoID
		,x.MgtCoName
		,x.MgtCoName + ' - ' + CAST(x.MgtCoID AS VARCHAR(15)) + ' (' + REVERSE(SUBSTRING(REVERSE(ISNULL(CASE WHEN x.AGFlag = 1 THEN 'AG/'
																													  ELSE ''
																												 END + CASE WHEN x.RentFlag = 1 THEN 'Rent/'
																															ELSE ''
																													   END,'N/A/')),2,9999)) + ')' AS MgtCoDisplay

		FROM

		(
		SELECT	 mc.MgtCoID
				,mc.MgtCoName
				,MAX(AGFlag) AS AGFlag
				,MAX(RentFlag) AS RentFlag
		FROM	 ApartmentGuide.Dimension.MgtCompanies AS mc
		JOIN
			      		  
					(
		------------------------------------------------------------------------------------------------
		--Derive the management company list the user can see based on the market access they have
		------------------------------------------------------------------------------------------------
					SELECT  dl.MgtCoID
							,MAX(CASE WHEN dl.Website = 'AG' AND dl.StatusID = 1 THEN 1 ELSE 0 END)		AS AGFlag
							,MAX(CASE WHEN dl.Website = 'Rent' AND dl.StatusID = 1 THEN 1 ELSE 0 END)	AS RentFlag					
					FROM    Corporate.Dimension.DSUM_Market AS ds
					JOIN    ApartmentGuide.Dimension.ListingMarket AS lm
							ON ds.LocalLookupValue = CASE WHEN lm.MarketCD = 'P00SAL' THEN 'W02000' ELSE lm.MarketCD END
					JOIN	ApartmentGuide.Dimension.AGRentCombinedDimensionListingsRCTest AS dl
							ON lm.ListingID = dl.ListingID
					WHERE   ds.AccessToAll = 0
							AND ds.UserID = @iUserid
							AND dl.StatusID = 1
					GROUP BY dl.MgtCoID

					UNION		
		------------------------------------------------------------------------------------------------
		--Derive the management company list the user can see based on the property access they have
		------------------------------------------------------------------------------------------------	
					SELECT  dl.MgtCoID
						   ,MAX(CASE WHEN dl.Website = 'AG'AND dl.StatusID = 1 THEN 1 ELSE 0 END)		AS AGFlag
						   ,MAX(CASE WHEN dl.Website = 'Rent' AND dl.StatusID = 1 THEN 1 ELSE 0 END)	AS RentFlag
					FROM    Corporate.Dimension.DSUM_Property AS ds
					JOIN    ApartmentGuide.Dimension.AGRentCombinedDimensionListingsRCTest AS dl
							ON ds.ListingID = dl.ListingID
					WHERE   ds.UserID = @iUserid
							AND ds.AccessToAll = 0
							AND dl.StatusID = 1
					GROUP BY dl.MgtCoID
		 
					UNION	
		------------------------------------------------------------------------------------------------
		--Get the list of Mangement Companies they can see
		------------------------------------------------------------------------------------------------												           
				   SELECT	mc.MgtCoID
							,MAX(ds.IsActiveAG)		AS AGFlag
							,MAX(ds.IsActiveRent)	AS RentFlag
				   FROM     Corporate.Dimension.DSUM_Management AS ds
				   JOIN     ApartmentGuide.Dimension.MgtCompanies AS mc
							ON ds.MgtCoID = mc.MgtCoID
				   WHERE    ds.AccessToAll = 0
							AND mc.IsActive = 1
							AND ds.UserID = @iUserid
				   GROUP BY mc.MgtCoID
					) AS d

		ON mc.MgtCoID = d.MgtCoID

		GROUP BY mc.MgtCoID
				,mc.MgtCoName
		) AS x
		
	
		ORDER BY MgtCoDisplay					 
	END

SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [Reports].[rpt_Dropdown_GetUserPropState]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Reports].[rpt_Dropdown_GetUserPropState] (
      @iUserID INT
      ,@iStateCD varchar(12)
	  )
AS
/******************************************************************************************
* Name: [reports].[rpt_Dropdown_GetUserPropState]
* -----------------------------------------------------------------------------------------
* Desc: Dropdown of properties for My.AG reoprts
* -----------------------------------------------------------------------------------------
* Test: EXEC reports.rpt_Dropdown_GetUserPropState 6153,'GA'
*		EXEC reports.rpt_Dropdown_GetUserPropState 295050,'WA'
*		EXEC reports.rpt_Dropdown_GetUserPropState 288436,'MI'
*		EXEC reports.rpt_Dropdown_GetUserPropState 52892,'AR'
*		EXEC reports.rpt_Dropdown_GetUserPropState 6292,'TX'
*		EXEC reports.rpt_Dropdown_GetUserPropState 64731,'TX'
* -----------------------------------------------------------------------------------------
* History: 
* 01     03/26/2014     Sarah Mims     Initial Version created from Corporate.reports.rpt_Dropdown_GetUserPropState
*									   1) No longer taking Website into account
*									   2) Changed input parameter to iUserGuid
*									   3) Cleaned up old parameters not needed anymore
* 02		12/15/2014	Sarah Mims	   No ticket - changed input parameter back to UserID
* 03		05/27/2015	Sarah Mims	   Ticket # 19570 - changed pointer to WEBICON_QA
* 04        05/28/2015  Julie DiPietro Ticket # 19570 - changed pointer from WEBICON_QA to Corporate
*********************************************************************************************************/
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET NOCOUNT ON

------------------------------------------------------
---- Declare & Set Variables
------------------------------------------------------
DECLARE @YMDID int,
        @AccessToAll int,
        @Role varchar(25)


   ------------------------------------------------------
   ---- Determine if the user is an admin
   ------------------------------------------------------
   SELECT @AccessToAll = COUNT(dsum.accesstoall)
   FROM   Corporate.Dimension.DSUM_DataRight AS dsum
   WHERE  dsum.userid = @iuserid
   AND    dsum.accesstoall <> 0;

   ---if it is NULL, set it to 0
   SET @AccessToAll  = IsNULL(@AccessToAll,0)

   ------------------------------------------------------
   ---- find the highest permission (lowest role) for the user
   ------------------------------------------------------
   SELECT @Role = MIN(RoleID)
   FROM   Corporate.dimension.DSUM_USERROLE ur
   WHERE  ur.UserID = @iUserID

   ---if it is NULL, set it to 0
   SET @Role = IsNULL(@Role,0)


   -----------------------------------------------------------------------------------
   ---- If the user is an admin by Role or with the AccessToAll flag, 
   ---- select back all listings. Gotta use Dimension.Listings here because 
   ---- the DSUM table only has listings with permissions setup, not all listings
   -----------------------------------------------------------------------------------
   ---- Note: A ListingID can have different PropertyNames and PropertyCities between
   ---- AG listing and the Rent listing. In the query below I get a distinct name for
   ---- each listing and always return the AG version unless it is specifically run for
   ---- Website = Rent (1)
   -----------------------------------------------------------------------------------
   IF @AccessToAll > 0 OR @Role in (2,3)  
   BEGIN
             SELECT DISTINCT
                    combined.ListingID,
					combined.AGPropertyID, ----For the AG Dashboard Drop down. This is temporary until that report is converted to an LMS report.
                    ----Use the AG PropertyName unless it is a Rent query
                    COALESCE(list.PropertyNameAG,list.PropertyNameRent)
                        +', LID: '+CONVERT(varchar,combined.ListingID)
                        ----Use the AG PropertyCity unless it is a Rent query
                        +', '+ COALESCE(list.PropertyCityAG,list.PropertyCityRent)
                        +CASE WHEN list.IsActiveAG+list.IsActiveRent = 2 THEN ' (AG/Rent)'
                                WHEN list.IsActiveAG = 1 THEN ' (AG)'
                                WHEN list.IsActiveRent = 1 THEN ' (Rent)'
                                WHEN list.IsActiveAG+list.IsActiveRent = 0 THEN ''
                                ELSE ''
                                END PropertyDisplay
             FROM   apartmentguide.dimension.AGRentCombinedDimensionListings combined
                    ---------------------------------------------------------------
                    ---- create 1 record per listing to get AG/Rent active status
                    ---------------------------------------------------------------
                    INNER JOIN (SELECT ListingID,
                                       MAX(CASE WHEN website = 'AG' THEN PropertyName ELSE NULL END) PropertyNameAG,
                                       MAX(CASE WHEN website = 'RENT' THEN PropertyName ELSE NULL END) PropertyNameRent,
                                       MAX(CASE WHEN website = 'AG' THEN PropertyCity ELSE NULL END) PropertyCityAG,
                                       MAX(CASE WHEN website = 'RENT' THEN PropertyCity ELSE NULL END) PropertyCityRent,
                                       MAX(CASE WHEN website = 'AG' THEN StatusID ELSE 0 END) IsActiveAG,
                                       MAX(CASE WHEN website = 'RENT' THEN StatusID ELSE 0 END) IsActiveRent
                                FROM   apartmentguide.dimension.AGRentCombinedDimensionListings
                                GROUP  BY ListingID
                                ) list
                        ON combined.ListingID = list.ListingID
             WHERE    combined.PropertyState = @iStateCD
				AND (list.IsActiveAG = 1 
						OR list.IsActiveRent = 1
						)
             ORDER  BY PropertyDisplay

   END
   ELSE
   BEGIN
             -----------------------------------------------------------------------------------
             ---- For all users that aren't Admins, select back what they can see by UserID
             -----------------------------------------------------------------------------------
            SELECT  fd.ListingID
                    ,fd.AGPropertyID  ----For the AG Dashboard Drop down. This is temporary until that report is converted to an LMS report.
                    ,fd.PropertyName 
					+ ', LID: ' + CONVERT(VARCHAR,fd.ListingID) + ', ' 
					+ fd.PropertyCity + CASE WHEN fd.IsActiveAG + fd.IsActiveRent = 2 THEN ' (AG/Rent)'
											WHEN fd.IsActiveAG = 1 THEN ' (AG)'
											WHEN fd.IsActiveRent = 1 THEN ' (Rent)'
											WHEN fd.IsActiveAG + fd.IsActiveRent = 0 THEN ''
											ELSE ''
										END																AS PropertyDisplay

			FROM
			(
			SELECT d.ListingID
			,d.AGPropertyID
			,d.PropertyName
			,d.PropertyCity
			,MAX(d.IsActiveAG)		AS IsActiveAG
			,MAX(d.IsActiveRent)	AS IsActiveRent

			FROM
			 -----------------------------------------------------------------------------------
             ---- Management Company Entities
             -----------------------------------------------------------------------------------  			 			 			 			 
					 (
					 SELECT dl.ListingID
						   ,dl.PropertyCity
						   ,dl.AGPropertyID
						   ,dsum.IsActiveAG
						   ,dsum.IsActiveRent
						   ,dl.PropertyName
					 FROM   Corporate.Dimension.DSUM_Management AS dsum
					 JOIN   ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
							ON dsum.MgtCoID = dl.MgtCoID
					 WHERE  dsum.accesstoall = 0
							AND dsum.userid = @iUserID
							AND dl.PropertyState = @iStateCD

					 UNION

					 -----------------------------------------------------------------------------------
					 ---- Property Entities
					 -----------------------------------------------------------------------------------
						SELECT  dl.ListingID
							   ,dl.PropertyCity
							   ,dl.AGPropertyID
							   ,dsum.IsActiveAG
							   ,dsum.IsActiveRent
							   ,dl.PropertyName
						FROM    Corporate.Dimension.DSUM_Property AS dsum
						JOIN    ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
								ON dsum.ListingID = dl.ListingID
						WHERE   dsum.accesstoall = 0
								AND dsum.userid = @iuserid
								AND dsum.entitytype = 'Properties'
								AND dl.PropertyState = @iStateCD
					  ) AS d  
					  					  
		GROUP BY d.ListingID
			,d.AGPropertyID
			,d.PropertyName
			,d.PropertyCity					                      
			) AS fd
   WHERE 
	(fd.IsActiveAG = 1 
		OR fd.IsActiveRent = 1
		)
   ORDER  BY PropertyDisplay

 END


GO
/****** Object:  StoredProcedure [Reports].[rpt_Dropdown_GetUserPropState_TEST]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Reports].[rpt_Dropdown_GetUserPropState_TEST] (
      @iUserID INT
      ,@iStateCD varchar(12)
	  )
AS
/******************************************************************************************
* Name: [reports].[rpt_Dropdown_GetUserPropState]
* -----------------------------------------------------------------------------------------
* Desc: Dropdown of properties for My.AG reoprts
* -----------------------------------------------------------------------------------------
* Test: EXEC reports.rpt_Dropdown_GetUserPropState 6153,'GA'
*		EXEC reports.rpt_Dropdown_GetUserPropState 295050,'WA'
*		EXEC reports.rpt_Dropdown_GetUserPropState 288436,'MI'
*		EXEC reports.rpt_Dropdown_GetUserPropState 52892,'AR'
*		EXEC reports.rpt_Dropdown_GetUserPropState 6292,'TX'
*		EXEC reports.rpt_Dropdown_GetUserPropState 64731,'TX'
* -----------------------------------------------------------------------------------------
* History: 
* 01     03/26/2014     Sarah Mims     Initial Version created from Corporate.reports.rpt_Dropdown_GetUserPropState
*									   1) No longer taking Website into account
*									   2) Changed input parameter to iUserGuid
*									   3) Cleaned up old parameters not needed anymore
*02		12/15/2014		Sarah Mims	   No ticket - changed input parameter back to UserID
*********************************************************************************************************/
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET NOCOUNT ON

------------------------------------------------------
---- Declare & Set Variables
------------------------------------------------------
DECLARE @YMDID int,
        @AccessToAll int,
        @Role varchar(25)


   ------------------------------------------------------
   ---- Determine if the user is an admin
   ------------------------------------------------------
   SELECT @AccessToAll = COUNT(dsum.accesstoall)
   FROM   Corporate.Dimension.DSUM_DataRight AS dsum
   WHERE  dsum.userid = @iuserid
   AND    dsum.accesstoall <> 0;

   ---if it is NULL, set it to 0
   SET @AccessToAll  = IsNULL(@AccessToAll,0)

   ------------------------------------------------------
   ---- find the highest permission (lowest role) for the user
   ------------------------------------------------------
   SELECT @Role = MIN(RoleID)
   FROM   Corporate.dimension.DSUM_USERROLE ur
   WHERE  ur.UserID = @iUserID

   ---if it is NULL, set it to 0
   SET @Role = IsNULL(@Role,0)


   -----------------------------------------------------------------------------------
   ---- If the user is an admin by Role or with the AccessToAll flag, 
   ---- select back all listings. Gotta use Dimension.Listings here because 
   ---- the DSUM table only has listings with permissions setup, not all listings
   -----------------------------------------------------------------------------------
   ---- Note: A ListingID can have different PropertyNames and PropertyCities between
   ---- AG listing and the Rent listing. In the query below I get a distinct name for
   ---- each listing and always return the AG version unless it is specifically run for
   ---- Website = Rent (1)
   -----------------------------------------------------------------------------------
   IF @AccessToAll > 0 OR @Role in (2,3)  
   BEGIN
             SELECT DISTINCT
                    combined.ListingID,
					combined.AGPropertyID, ----For the AG Dashboard Drop down. This is temporary until that report is converted to an LMS report.
                    ----Use the AG PropertyName unless it is a Rent query
                    COALESCE(list.PropertyNameAG,list.PropertyNameRent)
                        +', LID: '+CONVERT(varchar,combined.ListingID)
                        ----Use the AG PropertyCity unless it is a Rent query
                        +', '+ COALESCE(list.PropertyCityAG,list.PropertyCityRent)
                        +CASE WHEN list.IsActiveAG+list.IsActiveRent = 2 THEN ' (AG/Rent)'
                                WHEN list.IsActiveAG = 1 THEN ' (AG)'
                                WHEN list.IsActiveRent = 1 THEN ' (Rent)'
                                WHEN list.IsActiveAG+list.IsActiveRent = 0 THEN ''
                                ELSE ''
                                END PropertyDisplay
             FROM   apartmentguide.dimension.AGRentCombinedDimensionListings combined
                    ---------------------------------------------------------------
                    ---- create 1 record per listing to get AG/Rent active status
                    ---------------------------------------------------------------
                    INNER JOIN (SELECT ListingID,
                                       MAX(CASE WHEN website = 'AG' THEN PropertyName ELSE NULL END) PropertyNameAG,
                                       MAX(CASE WHEN website = 'RENT' THEN PropertyName ELSE NULL END) PropertyNameRent,
                                       MAX(CASE WHEN website = 'AG' THEN PropertyCity ELSE NULL END) PropertyCityAG,
                                       MAX(CASE WHEN website = 'RENT' THEN PropertyCity ELSE NULL END) PropertyCityRent,
                                       MAX(CASE WHEN website = 'AG' THEN StatusID ELSE 0 END) IsActiveAG,
                                       MAX(CASE WHEN website = 'RENT' THEN StatusID ELSE 0 END) IsActiveRent
                                FROM   apartmentguide.dimension.AGRentCombinedDimensionListings
                                GROUP  BY ListingID
                                ) list
                        ON combined.ListingID = list.ListingID
             WHERE    combined.PropertyState = (CASE WHEN @iStateCD IS NULL THEN combined.PropertyState ELSE @iStateCD END)
				AND (list.IsActiveAG = 1 
						OR list.IsActiveRent = 1
						)
             ORDER  BY PropertyDisplay

   END
   ELSE
   BEGIN
             -----------------------------------------------------------------------------------
             ---- For all users that aren't Admins, select back what they can see by UserID
             -----------------------------------------------------------------------------------
            SELECT  fd.ListingID
                    ,fd.AGPropertyID  ----For the AG Dashboard Drop down. This is temporary until that report is converted to an LMS report.
                    ,fd.PropertyName 
					+ ', LID: ' + CONVERT(VARCHAR,fd.ListingID) + ', ' 
					+ fd.PropertyCity + CASE WHEN fd.IsActiveAG + fd.IsActiveRent = 2 THEN ' (AG/Rent)'
											WHEN fd.IsActiveAG = 1 THEN ' (AG)'
											WHEN fd.IsActiveRent = 1 THEN ' (Rent)'
											WHEN fd.IsActiveAG + fd.IsActiveRent = 0 THEN ''
											ELSE ''
										END																AS PropertyDisplay

			FROM
			(
			SELECT d.ListingID
			,d.AGPropertyID
			,d.PropertyName
			,d.PropertyCity
			,MAX(d.IsActiveAG)		AS IsActiveAG
			,MAX(d.IsActiveRent)	AS IsActiveRent

			FROM
			 -----------------------------------------------------------------------------------
             ---- Management Company Entities
             -----------------------------------------------------------------------------------  			 			 			 			 
					 (
					 SELECT dl.ListingID
						   ,dl.PropertyCity
						   ,dl.AGPropertyID
						   ,dsum.IsActiveAG
						   ,dsum.IsActiveRent
						   ,dl.PropertyName
					 FROM   Corporate.Dimension.DSUM_Management AS dsum
					 JOIN   ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
							ON dsum.MgtCoID = dl.MgtCoID
					 WHERE  dsum.accesstoall = 0
							AND dsum.userid = @iUserID
							AND dl.PropertyState = (CASE WHEN @iStateCD IS NULL THEN dl.PropertyState ELSE @iStateCD END)

					 UNION

					 -----------------------------------------------------------------------------------
					 ---- Property Entities
					 -----------------------------------------------------------------------------------
						SELECT  dl.ListingID
							   ,dl.PropertyCity
							   ,dl.AGPropertyID
							   ,dsum.IsActiveAG
							   ,dsum.IsActiveRent
							   ,dl.PropertyName
						FROM    Corporate.Dimension.DSUM_Property AS dsum
						JOIN    ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
								ON dsum.ListingID = dl.ListingID
						WHERE   dsum.accesstoall = 0
								AND dsum.userid = @iuserid
								AND dsum.entitytype = 'Properties'
								AND dl.PropertyState = (CASE WHEN @iStateCD IS NULL THEN dl.PropertyState ELSE @iStateCD END)
					  ) AS d  
					  					  
		GROUP BY d.ListingID
			,d.AGPropertyID
			,d.PropertyName
			,d.PropertyCity					                      
			) AS fd
   WHERE 
	(fd.IsActiveAG = 1 
		OR fd.IsActiveRent = 1
		)
   ORDER  BY PropertyDisplay

 END



GO
/****** Object:  StoredProcedure [Reports].[rpt_Dropdown_GetUserStates]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Reports].[rpt_Dropdown_GetUserStates] (
      @iUserID INT
)      
AS
/******************************************************************************************
* Name: [reports].[rpt_Dropdown_GetUserStates]
* -----------------------------------------------------------------------------------------
* Desc: Dropdown of properties for My.AG reports
* -----------------------------------------------------------------------------------------
* Test: EXEC reports.rpt_Dropdown_GetUserStates 6153
*		EXEC reports.rpt_Dropdown_GetUserStates 288985
*		EXEC reports.rpt_Dropdown_GetUserStates 52892
*		EXEC reports.rpt_Dropdown_GetUserStates 6292
* -----------------------------------------------------------------------------------------
* History: 
* 01     12/1/2014     Sarah Mims      Initial Version created from Corporate.reports.rpt_Dropdown_GetUserStates
*									   1) No longer taking Website into account
*									   2) Changed input parameter to iUserGuid
*									   3) Cleaned up old parameters not needed anymore
* 02	12/15/2014	   Sarah Mims	   Changed input parameter back to UserID
* 03	05/27/2015	   Sarah Mims	   Ticket # 19570 - changed pointer to WEBICON_QA
* 04    05/28/2015     Julie DiPietro  Ticket # 19570 - changed pointer from WEBICON_QA to Corporate
******************************************************************************************/
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
SET NOCOUNT ON

------------------------------------------------------
---- Declare & Set Variables
------------------------------------------------------
DECLARE @YMDID INT
   ,@AccessToAll INT
   ,@Role VARCHAR(25)
        
   ------------------------------------------------------
   ---- Determine if the user is an admin
   ------------------------------------------------------
   SELECT @AccessToAll = COUNT(dsum.accesstoall)
   FROM   Corporate.Dimension.DSUM_DataRight AS dsum
   WHERE  dsum.UserId = @iUserid
   AND    dsum.accesstoall <> 0;

   ---if it is NULL, set it to 0
   SET @AccessToAll  = IsNULL(@AccessToAll,0)

   ------------------------------------------------------
   ---- find the highest permission (lowest role) for the user
   ------------------------------------------------------
   SELECT @Role = MIN(RoleID)
   FROM   Corporate.dimension.DSUM_USERROLE ur
   WHERE  ur.UserID = @iUserID

   ---if it is NULL, set it to 0
   SET @Role = IsNULL(@Role,0)


   -----------------------------------------------------------------------------------
   ---- If the user is an admin by Role or with the AccessToAll flag, 
   ---- select back all MSAs
   -----------------------------------------------------------------------------------
   IF @AccessToAll > 0 OR @Role in (2,3)  
   BEGIN

            SELECT DISTINCT 
                   msa.StateAbbr StateCD,
                   msa.StateName
            FROM   dbautility..zipmsa msa
            WHERE  msa.CityType = 'D'
            AND    msa.StateFIPS > 0 
            AND    msa.StateFIPS <= 56           
            ORDER  BY msa.StateAbbr

   END
   ELSE
   BEGIN
             -----------------------------------------------------------------------------------
             ---- For all users that aren't Admins, select back what they can see by UserID
             -----------------------------------------------------------------------------------
             ---- Management Company Entities
             -----------------------------------------------------------------------------------
             SELECT DISTINCT 
                    msa.StateAbbr StateCD,
                    msa.StateName
             FROM   Corporate.Dimension.DSUM_Management AS ds
                    LEFT JOIN dbautility..zipmsa msa
                      ON ds.ZipCode = msa.ZipCode
                     AND msa.CityType = 'D'
             WHERE  ds.accesstoall = 0
             AND    ds.userid = @iUserID
             AND    msa.StateFIPS >0 
             AND    msa.StateFIPS <= 56   


             UNION

             -----------------------------------------------------------------------------------
             ---- Property Entities
             -----------------------------------------------------------------------------------
             SELECT DISTINCT msa.StateAbbr StateCD,
                    msa.StateName
             FROM   Corporate.Dimension.DSUM_Property AS ds
                    INNER JOIN dbautility..zipmsa msa
                       ON ds.ZipCode = msa.ZipCode
                     AND msa.CityType = 'D'
             WHERE  ds.accesstoall = 0
             AND    ds.userid = @iUserID
             AND    msa.StateFIPS >0
             AND    msa.StateFIPS <= 56

             ORDER  BY StateCD

 END


GO
/****** Object:  StoredProcedure [Reports].[rpt_DropDown_Markets]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Reports].[rpt_DropDown_Markets] @MarketType INT

AS

/******************************************************************************************
*
* Name:    Reports.rpt_DropDown_Markets
*
* Desc:    Dropdown of the markets with various options for the label column
*
* Test:    EXEC Reports.rpt_DropDown_Markets 0
*		   EXEC Reports.rpt_DropDown_Markets 1
*
* Hist:	01	09/23/2016		Sarah Mims			Initial Version. Ticket # 23173.
**************************************************************************************************/
SET NOCOUNT ON

IF @MarketType = 0

	BEGIN

		SELECT  m.MarketCD
			   ,m.MarketName
		FROM    ApartmentGuide.Dimension.Markets AS m
		ORDER BY MarketName
	END

ELSE

	BEGIN
		SELECT DISTINCT
				CBSACode AS MarketCD
			   ,CBSAName AS MarketName
		FROM    DBAUtility.dbo.ZipCBSA
		ORDER BY MarketName
	END   

    
    
SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [Reports].[rpt_Dropdown_MgtCompanies]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Reports].[rpt_Dropdown_MgtCompanies]
  (	@IncSelectAll INT = 0 
)
/*************************************************************************************************
*
* Name:	reports.[rpt_Dropdown_MgtCompanies]
*
* Desc:	This gets the list of Management Companies for AG and Rent
*
* Test:	EXEC reports.[rpt_Dropdown_MgtCompanies]  0
*
* Hist:	01	10/13/2015		Shetal Gandhi		Ticket 21100 - Created to select all AG and Rent Management Companies with a Select All Option
**************************************************************************************************/
AS
SET NOCOUNT ON

IF @IncSelectAll = 0

	SELECT DISTINCT MgtCoIDAG AS MgtcoID, MgtCoNameAG AS MgtcoName, MgtCoNameAG +' ('+CAST(MgtCoIDAG AS VARCHAR)+')' AS MgtCoNameLabel 
	FROM rentpath.dimension.listings
	WHERE MgtCoIDAG != 0

	UNION

	SELECT DISTINCT MgtCoIDRent  AS MgtcoID, MgtCoNameRent  AS MgtcoName, MgtCoNameRent +' ('+CAST(MgtCoIDRent AS VARCHAR)+')' AS MgtCoNameLabel
	FROM rentpath.dimension.listings
	WHERE MgtCoIDRent != 0
	ORDER BY 2

ELSE

	SELECT 0 AS MgtcoID, '<Select All>' AS MgtcoName, 'Select All' AS MgtCoNameLabel

	UNION

	SELECT DISTINCT MgtCoIDAG AS MgtcoID, MgtCoNameAG AS MgtcoName, MgtCoNameAG +' ('+CAST(MgtCoIDAG AS VARCHAR)+')' AS MgtCoNameLabel
	FROM rentpath.dimension.listings
	WHERE MgtCoIDAG != 0

	UNION

	SELECT DISTINCT MgtCoIDRent  AS MgtcoID, MgtCoNameRent  AS MgtcoName, MgtCoNameRent +' ('+CAST(MgtCoIDRent AS VARCHAR)+')' AS MgtCoNameLabel
	FROM rentpath.dimension.listings
	WHERE MgtCoIDRent != 0
	ORDER BY 2

SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [Reports].[rpt_DropDown_MVTActions]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Reports].[rpt_DropDown_MVTActions]
	(
	@MVTTest VARCHAR(255)
	)
/*************************************************************************************************
*
* Name:	Reports.rpt_DropDown_MVTActions
*
* Desc:	This pulls the list of Actions
*
* Test:	EXEC Reports.rpt_DropDown_MVTActions '[ME] PDP Recommend Title Retro'
* Test:	EXEC Reports.rpt_DropDown_MVTActions '[ME] PDP 3D Floor Plans'
*
* Note:
*
* Hist:	01	10/10/2016		Sarah Mims			Initial Version. Ticket # 23610*
**************************************************************************************************/
AS

SET NOCOUNT ON

	EXEC
	('SELECT DISTINCT a.ActionKey
	,a.Action
	FROM DimensionalModelWeb.Conformed.MultivariateTesting AS m
	JOIN DimensionalModelWeb.Fact.WebEvent AS w
		ON m.MVTKey = w.MVTKey
	JOIN DimensionalModelWeb.Conformed.Action AS a
		ON w.ActionKey = a.ActionKey
	WHERE m.TestName =  ''' + @MVTTest +'''
	ORDER BY Action
	'
	)	AT APS_LINK	

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [Reports].[rpt_DropDown_MVTPages]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Reports].[rpt_DropDown_MVTPages]
	(
	@MVTTest VARCHAR(255)
	)
/*************************************************************************************************
*
* Name:	Reports.rpt_DropDown_MVTPages
*
* Desc:	This pulls the list of Pages
*
* Test:	EXEC Reports.rpt_DropDown_MVTPages '[ME] PDP Recommend Title Retro'
*		EXEC Reports.rpt_DropDown_MVTPages '[ME] PDP 3D Floor Plans'
*		EXEC Reports.rpt_DropDown_MVTPages 'm.AG Refresh 2nd Quarter 2016'
*
* Note:
*
* Hist:	01	10/10/2016		Sarah Mims			Initial Version. Ticket # 23610
**************************************************************************************************/
AS

SET NOCOUNT ON

	EXEC
	('
	
	------------------------------
	--Pull back relevant pages
	------------------------------
	SELECT DISTINCT pg.PageKey
		,pg.Page
		FROM DimensionalModelWeb.Conformed.MultivariateTesting AS m
		JOIN DimensionalModelWeb.Fact.WebEvent AS w
			ON m.MVTKey = w.MVTKey
		JOIN DimensionalModelWeb.Conformed.Page AS pg
			ON w.PageKey = pg.PageKey
		WHERE m.TestName =  ''' + @MVTTest +'''
		ORDER BY Page	
	'
	) AT APS_LINK	


SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [Reports].[rpt_DropDown_MVTPageSubs]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Reports].[rpt_DropDown_MVTPageSubs]
	(
	@MVTTest VARCHAR(255)
	,@PositionKeys VARCHAR(4000)
	)
/*************************************************************************************************
*
* Name:	Reports.rpt_DropDown_MVTPageSubs
*
* Desc:	This pulls the list of PageSubs
*
* Test:	EXEC Reports.rpt_DropDown_MVTPageSubs '[ME] PDP Recommend Title Retro','1'
* Test:	EXEC Reports.rpt_DropDown_MVTPageSubs '[ME] PDP 3D Floor Plans','1'
*
* Note:
*
* Hist:	01	10/10/2016		Sarah Mims			Initial Version. Ticket # 23610
**************************************************************************************************/
AS


SET NOCOUNT ON

	EXEC
	('

	------------------------------
	--Drop Position List Table
	------------------------------
	BEGIN TRY
		DROP TABLE RentPath.dbo.rpt_MVTPositionList
	END TRY
	BEGIN CATCH
	END CATCH


	------------------------------
	--Create Position List Table
	------------------------------
	CREATE TABLE RentPath.dbo.rpt_MVTPositionList
	WITH (DISTRIBUTION = REPLICATE)
	AS
	
	SELECT pt.PositionKey
	,pt.Position
		FROM
		(
		SELECT 
				PositionKey = LTrim(RTrim(Convert(nvarchar(4000), SubString('''+@PositionKeys+''', n.Number, CharIndex('','', '''+@PositionKeys+''' + '','', n.Number) - n.Number))))
				,StartPosition = n.Number
			FROM
				Common.dbo.numbers AS n
			WHERE
					n.Number <= Convert(int, Len('''+@PositionKeys+'''))
				AND	SUBSTRING('','' + '''+@PositionKeys+''', n.Number, LEN('','')) = '',''
		) AS X
	JOIN DimensionalModelWeb.Conformed.Position AS pt
		ON X.PositionKey = pt.PositionKey

	------------------------------
	--Pull back relevant page subs
	------------------------------
	SELECT DISTINCT ps.PageSubKey
		,ps.PageSub
		FROM DimensionalModelWeb.Conformed.MultivariateTesting AS m
		JOIN DimensionalModelWeb.Fact.WebEvent AS w
			ON m.MVTKey = w.MVTKey
		JOIN DimensionalModelWeb.Conformed.PageSub AS ps
			ON w.PageSubKey = ps.PageSubKey
		JOIN RentPath.dbo.rpt_MVTActionList AS a
			ON w.ActionKey = a.ActionKey
		JOIN RentPath.dbo.rpt_MVTPageList AS p
			ON w.PageKey = p.PageKey
		JOIN RentPath.dbo.rpt_MVTPositionList AS pt
			ON w.PositionKey = pt.PositionKey
		WHERE m.TestName =  ''' + @MVTTest +'''
		ORDER BY PageSub	
	'
	) AT APS_LINK	


SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [Reports].[rpt_DropDown_MVTPageSubs4Product]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [Reports].[rpt_DropDown_MVTPageSubs4Product]
	(
	@PositionKeys VARCHAR(4000)
	)
/*************************************************************************************************
*
* Name:	Reports.rpt_DropDown_MVTPageSubs
*
* Desc:	This pulls the list of PageSubs
*
* Test:	EXEC Reports.rpt_DropDown_MVTPageSubs '[ME] PDP Recommend Title Retro','1'
* Test:	EXEC Reports.rpt_DropDown_MVTPageSubs '[ME] PDP 3D Floor Plans','1'
*
* Note:
*
* Hist:	01	03/28/2017		Richard Chen			Initial Version. Case 01433393
**************************************************************************************************/
AS


SET NOCOUNT ON

	EXEC
	('

	------------------------------
	--Drop Position List Table
	------------------------------
	BEGIN TRY
		DROP TABLE RentPath.dbo.rpt_MVTPositionList
	END TRY
	BEGIN CATCH
	END CATCH


	------------------------------
	--Create Position List Table
	------------------------------
	CREATE TABLE RentPath.dbo.rpt_MVTPositionList
	WITH (DISTRIBUTION = REPLICATE)
	AS
	
	SELECT pt.PositionKey
	,pt.Position
		FROM
		(
		SELECT 
				PositionKey = LTrim(RTrim(Convert(nvarchar(4000), SubString('''+@PositionKeys+''', n.Number, CharIndex('','', '''+@PositionKeys+''' + '','', n.Number) - n.Number))))
				,StartPosition = n.Number
			FROM
				Common.dbo.numbers AS n
			WHERE
					n.Number <= Convert(int, Len('''+@PositionKeys+'''))
				AND	SUBSTRING('','' + '''+@PositionKeys+''', n.Number, LEN('','')) = '',''
		) AS X
	JOIN DimensionalModelWeb.Conformed.Position AS pt
		ON X.PositionKey = pt.PositionKey

	------------------------------
	--Pull back relevant page subs
	------------------------------
	SELECT DISTINCT ps.PageSubKey
		,ps.PageSub
		FROM DimensionalModelWeb.Conformed.MultivariateTesting AS m
		JOIN DimensionalModelWeb.Fact.WebEvent AS w
			ON m.MVTKey = w.MVTKey
		JOIN DimensionalModelWeb.Conformed.PageSub AS ps
			ON w.PageSubKey = ps.PageSubKey
		JOIN RentPath.dbo.rpt_MVTActionList AS a
			ON w.ActionKey = a.ActionKey
		JOIN RentPath.dbo.rpt_MVTPageList AS p
			ON w.PageKey = p.PageKey
		JOIN RentPath.dbo.rpt_MVTPositionList AS pt
			ON w.PositionKey = pt.PositionKey
		ORDER BY PageSub	
	'
	) AT APS_LINK	


SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [Reports].[rpt_DropDown_MVTPositions]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Reports].[rpt_DropDown_MVTPositions]
	(
	@MVTTest VARCHAR(255)
	,@PageKeys VARCHAR(4000)
	)
/*************************************************************************************************
*
* Name:	Reports.rpt_DropDown_MVTPositions
*
* Desc:	This pulls the list of Positions for the MVT test selected
*
* Test:	EXEC Reports.rpt_DropDown_MVTPositions '[ME] PDP Recommend Title Retro' ,'0,1,2,3'
*		EXEC Reports.rpt_DropDown_MVTPositions '[ME] PDP 3D Floor Plans','0,1,2,3'
*
* Note:
*
* Hist:	01	10/10/2016		Sarah Mims			Initial Version. Ticket # 23610
**************************************************************************************************/
AS

SET NOCOUNT ON

	EXEC
	('
	------------------------------
	--Drop Page List Table
	------------------------------
	BEGIN TRY
		DROP TABLE RentPath.dbo.rpt_MVTPageList
	END TRY
	BEGIN CATCH
	END CATCH


	------------------------------
	--Create Page List Table
	------------------------------
	CREATE TABLE RentPath.dbo.rpt_MVTPageList
	WITH (DISTRIBUTION = REPLICATE)
	AS

	SELECT pg.PageKey
	,pg.Page
	FROM
		(
		SELECT 
				PageKey = LTrim(RTrim(Convert(nvarchar(4000), SubString('''+@PageKeys+''', n.Number, CharIndex('','', '''+@PageKeys+''' + '','', n.Number) - n.Number))))
				,StartPosition = n.Number
			FROM
				Common.dbo.numbers AS n
			WHERE
					n.Number <= Convert(int, Len('''+@PageKeys+'''))
				AND	SUBSTRING('','' + '''+@PageKeys+''', n.Number, LEN('','')) = '',''
		) AS X
	JOIN DimensionalModelWeb.Conformed.Page AS pg
		ON X.PageKey = pg.PageKey

	------------------------------
	--Pull back relevant positions
	------------------------------
	SELECT DISTINCT pt.PositionKey
		,pt.Position
		FROM DimensionalModelWeb.Conformed.MultivariateTesting AS m
		JOIN DimensionalModelWeb.Fact.WebEvent AS w
			ON m.MVTKey = w.MVTKey
		JOIN DimensionalModelWeb.Conformed.Position AS pt
			ON w.PositionKey = pt.PositionKey
		JOIN RentPath.dbo.rpt_MVTPageList AS pg
			ON w.PageKey = pg.PageKey
		WHERE m.TestName =  ''' + @MVTTest +'''
		ORDER BY Position	
	'
	) AT APS_LINK	


SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [Reports].[rpt_DropDown_MVTPositions4Product]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Reports].[rpt_DropDown_MVTPositions4Product]
	(
	@PageKeys VARCHAR(4000)
	)
/*************************************************************************************************
*
* Name:	Reports.rpt_DropDown_MVTPositions
*
* Desc:	This pulls the list of Positions for the MVT test selected
*
* Test:	EXEC Reports.rpt_DropDown_MVTPositions '[ME] PDP Recommend Title Retro' ,'0,1,2,3'
*		EXEC Reports.rpt_DropDown_MVTPositions '[ME] PDP 3D Floor Plans','0,1,2,3'
*
* Note:
*
* Hist:	01	03/28/2017		Richard Chen			Initial Version. Case 01433393
**************************************************************************************************/
AS

SET NOCOUNT ON

	EXEC
	('
	------------------------------
	--Drop Page List Table
	------------------------------
	BEGIN TRY
		DROP TABLE RentPath.dbo.rpt_MVTPageList
	END TRY
	BEGIN CATCH
	END CATCH


	------------------------------
	--Create Page List Table
	------------------------------
	CREATE TABLE RentPath.dbo.rpt_MVTPageList
	WITH (DISTRIBUTION = REPLICATE)
	AS

	SELECT pg.PageKey
	,pg.Page
	FROM
		(
		SELECT 
				PageKey = LTrim(RTrim(Convert(nvarchar(4000), SubString('''+@PageKeys+''', n.Number, CharIndex('','', '''+@PageKeys+''' + '','', n.Number) - n.Number))))
				,StartPosition = n.Number
			FROM
				Common.dbo.numbers AS n
			WHERE
					n.Number <= Convert(int, Len('''+@PageKeys+'''))
				AND	SUBSTRING('','' + '''+@PageKeys+''', n.Number, LEN('','')) = '',''
		) AS X
	JOIN DimensionalModelWeb.Conformed.Page AS pg
		ON X.PageKey = pg.PageKey

	------------------------------
	--Pull back relevant positions
	------------------------------
	SELECT DISTINCT pt.PositionKey
		,pt.Position
		FROM DimensionalModelWeb.Conformed.MultivariateTesting AS m
		JOIN DimensionalModelWeb.Fact.WebEvent AS w
			ON m.MVTKey = w.MVTKey
		JOIN DimensionalModelWeb.Conformed.Position AS pt
			ON w.PositionKey = pt.PositionKey
		JOIN RentPath.dbo.rpt_MVTPageList AS pg
			ON w.PageKey = pg.PageKey
		ORDER BY Position	
	'
	) AT APS_LINK	


SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [Reports].[rpt_DropDown_MVTProfiles]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Reports].[rpt_DropDown_MVTProfiles]
/*************************************************************************************************
*
* Name:	Reports.rpt_DropDown_MVTProfiles
*
* Desc:	This pulls the list of production profiles that have MVT Tests.
*
* Test:	EXEC Reports.rpt_DropDown_MVTProfiles 
*
* Note:
*
* Hist:	01	10/10/2016		Sarah Mims			Initial Version. Ticket # 23610
**************************************************************************************************/
AS

SET NOCOUNT ON

	EXEC
	('SELECT DISTINCT p.ProfileKey
	,p.ProfileName
	,p.SubProfileName
	FROM DimensionalModelWeb.Conformed.Profile AS p
	JOIN DimensionalModelWeb.Fact.WebEvent AS w
		ON p.ProfileKey = w.ProfileKey
	WHERE p.ProfileName NOT IN (''Dev'',''QA'')
		AND w.MVTKey <> 0
	ORDER BY p.ProfileName
	 ,p.SubProfileName
	'
	)	AT APS_LINK	

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [Reports].[rpt_DropDown_MVTSegments]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Reports].[rpt_DropDown_MVTSegments]
/*************************************************************************************************
*
* Name:	Reports.rpt_DropDown_MVTSegments
*
* Desc:	This is for Scott Ehly's report.
*
* Test:	EXEC Reports.rpt_DropDown_MVTSegments
*
* Note:
*
* Hist:	01	10/11/2016		Sarah Mims			Initial Version. Ticket #26310.
*
**************************************************************************************************/
AS

SET NOCOUNT ON


SELECT 0 AS SegmentKey,'None' AS Segment
UNION SELECT 1,'Browser'
UNION SELECT 2,'CBSA - CustIP'
UNION SELECT 3,'CBSA - Search'
UNION SELECT 4,'Date'
UNION SELECT 5,'Day Of Week'
UNION SELECT 6,'OperatingSystem'
UNION SELECT 7,'Page'
UNION SELECT 8,'TrafficSource'

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [Reports].[rpt_DropDown_MVTSelections]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Reports].[rpt_DropDown_MVTSelections]
	(
	@MVTTest VARCHAR(255)
	,@ActionKeys VARCHAR(4000)
	)
/*************************************************************************************************
*
* Name:	Reports.rpt_DropDown_MVTSelections
*
* Desc:	This pulls the list of Selections
*
* Test:	EXEC Reports.rpt_DropDown_MVTSelections '[ME] PDP Recommend Title Retro','1'
*		EXEC Reports.rpt_DropDown_MVTSelections '[ME] PDP 3D Floor Plans','2'
*
* Note:
*
* Hist:	01	10/10/2016		Sarah Mims			Initial Version. Ticket # 23610
**************************************************************************************************/
AS

SET NOCOUNT ON

	EXEC
	('
	------------------------------
	--Drop Action List Table
	------------------------------
	BEGIN TRY
		DROP TABLE RentPath.dbo.rpt_MVTActionList
	END TRY
	BEGIN CATCH
	END CATCH


	------------------------------
	--Create Action List Table
	------------------------------
	CREATE TABLE RentPath.dbo.rpt_MVTActionList
	WITH (DISTRIBUTION = REPLICATE)
	AS
	SELECT 
			ActionKey = LTrim(RTrim(Convert(nvarchar(4000), SubString('''+@ActionKeys+''', n.Number, CharIndex('','', '''+@ActionKeys+''' + '','', n.Number) - n.Number))))
			,StartPosition = n.Number
		FROM
			Common.dbo.numbers AS n
		WHERE
				n.Number <= Convert(int, Len('''+@ActionKeys+'''))
			AND	SUBSTRING('','' + '''+@ActionKeys+''', n.Number, LEN('','')) = '',''

	------------------------------
	--Pull back relevant selections
	------------------------------
	SELECT DISTINCT s.SelectionKey
		,s.Selection
		FROM DimensionalModelWeb.Conformed.MultivariateTesting AS m
		JOIN DimensionalModelWeb.Fact.WebEvent AS w
			ON m.MVTKey = w.MVTKey
		JOIN DimensionalModelWeb.Conformed.Selection AS s
			ON w.SelectionKey = s.SelectionKey
		JOIN RentPath.dbo.rpt_MVTPageList AS pg
			ON w.PageKey = pg.PageKey
		JOIN RentPath.dbo.rpt_MVTActionList AS a
			ON w.ActionKey = a.ActionKey
		WHERE m.TestName =  ''' + @MVTTest +'''
		ORDER BY s.Selection	
	'
	) AT APS_LINK	


SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [Reports].[rpt_DropDown_MVTSelections4Product]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Reports].[rpt_DropDown_MVTSelections4Product]
	(
	@ActionKeys VARCHAR(4000)
	)
/*************************************************************************************************
*
* Name:	Reports.rpt_DropDown_MVTSelections
*
* Desc:	This pulls the list of Selections
*
* Test:	EXEC Reports.rpt_DropDown_MVTSelections4Product '1'
*		EXEC Reports.rpt_DropDown_MVTSelections '[ME] PDP 3D Floor Plans','2'
*
* Note:
--0	No Action
--1	click
--2	lead_submission
--3	moving_submission
--4	pageview
--5	swipe
--7	error
--8	review_submission


*
* Hist:	01	03/28/2017		Richard Chen			Initial Version. Case 01433393
**************************************************************************************************/
AS

SET NOCOUNT ON

	EXEC
	('
	------------------------------
	--Drop Action List Table
	------------------------------
	BEGIN TRY
		DROP TABLE RentPath.dbo.rpt_MVTActionList4Product
	END TRY
	BEGIN CATCH
	END CATCH


	------------------------------
	--Create Action List Table
	------------------------------
	CREATE TABLE RentPath.dbo.rpt_MVTActionList4Product
	WITH (DISTRIBUTION = REPLICATE)
	AS
	SELECT 
			ActionKey = LTrim(RTrim(Convert(nvarchar(4000), SubString('''+@ActionKeys+''', n.Number, CharIndex('','', '''+@ActionKeys+''' + '','', n.Number) - n.Number))))
			,StartPosition = n.Number
		FROM
			Common.dbo.numbers AS n
		WHERE
				n.Number <= Convert(int, Len('''+@ActionKeys+'''))
			AND	SUBSTRING('','' + '''+@ActionKeys+''', n.Number, LEN('','')) = '',''

	------------------------------
	--Pull back relevant selections
	------------------------------
	SELECT DISTINCT s.SelectionKey
		,s.Selection
		FROM DimensionalModelWeb.Conformed.MultivariateTesting AS m
		JOIN DimensionalModelWeb.Fact.WebEvent AS w
			ON m.MVTKey = w.MVTKey
		JOIN DimensionalModelWeb.Conformed.Selection AS s
			ON w.SelectionKey = s.SelectionKey
		JOIN RentPath.dbo.rpt_MVTPageList AS pg
			ON w.PageKey = pg.PageKey
		JOIN RentPath.dbo.rpt_MVTActionList4Product AS a
			ON w.ActionKey = a.ActionKey
		ORDER BY s.Selection	
	'
	) AT APS_LINK	


SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [Reports].[rpt_DropDown_MVTTests]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Reports].[rpt_DropDown_MVTTests]
	(
	@ProfileKey INT
	)
/*************************************************************************************************
*
* Name:	Reports.rpt_DropDown_MVTTests
*
* Desc:	This pulls the list of MVT Tests for the selected profile. 
*
* Test:	EXEC Reports.rpt_DropDown_MVTTests 1
* 		EXEC Reports.rpt_DropDown_MVTTests 2
* 		EXEC Reports.rpt_DropDown_MVTTests 3
*
* Note:
*
* Hist:	01	10/10/2016		Sarah Mims			Initial Version. Ticket # 23610*
**************************************************************************************************/
AS

SET NOCOUNT ON

	EXEC
	('SELECT DISTINCT TestName
	FROM DimensionalModelWeb.Conformed.MultivariateTesting AS m
	JOIN DimensionalModelWeb.Fact.WebEvent AS w
		ON m.MVTKey = w.MVTKey
	WHERE w.ProfileKey = '+@ProfileKey+'
	AND w.MVTKey <> 0
	ORDER BY TestName
	'
	)	AT APS_LINK	

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [Reports].[rpt_Dropdown_SFDCMgtCompanies]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Reports].[rpt_Dropdown_SFDCMgtCompanies]

/*******************************************************************************************
* Name:	[Reports].[rpt_Dropdown_SFDCMgtCompanies]
* ------------------------------------------------------------------------------------------
* Desc:	
* ------------------------------------------------------------------------------------------
* Test:	EXEC [Reports].[rpt_Dropdown_SFDCMgtCompanies]
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist:	01	06/15/2016		Colleen Rocks		Ticket 23245; initial version
********************************************************************************************/
AS 
BEGIN
	SET NOCOUNT ON;

SELECT DISTINCT a.ParentId AS MgtCoID
	,CONCAT(ma.Name,' - ',a.ParentID) AS MgtCoName
FROM SalesForce.dbo.Account AS a
JOIN SalesForce.dbo.Account AS ma
	ON a.ParentId = ma.Id
WHERE ma.RecordTypeId IN ('012E00000004RulIAE','012E00000005omKIAQ')
ORDER BY CONCAT(ma.Name,' - ',a.ParentID);


	SET NOCOUNT OFF;
END 






GO
/****** Object:  StoredProcedure [Reports].[rpt_Dropdown_SFDCMgtCompanies_All]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Reports].[rpt_Dropdown_SFDCMgtCompanies_All]

/*******************************************************************************************
* Name:	[Reports].[rpt_Dropdown_SFDCMgtCompanies_All]
* ------------------------------------------------------------------------------------------
* Desc:	
* ------------------------------------------------------------------------------------------
* Test:	EXEC [Reports].[rpt_Dropdown_SFDCMgtCompanies_All]
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist:	01	05/01/2017		Julie DiPietro		Ticket 01457569; initial version
********************************************************************************************/
AS 
BEGIN
	SET NOCOUNT ON;

SELECT '0' AS MgtCoID
      ,'<Select All>' AS MgtCoName
	  ,0 AS SortOrder
UNION

SELECT x.MgtCoID
      ,x.MgtCoName
	  ,ROW_NUMBER() OVER (ORDER BY x.MgtCoName) AS SortOrder
FROM
(
 SELECT DISTINCT a.ParentId AS MgtCoID
	    ,CONCAT(ma.Name,' - ',a.ParentID) AS MgtCoName
 FROM SalesForce.dbo.Account AS a
 JOIN SalesForce.dbo.Account AS ma
	ON a.ParentId = ma.Id
 WHERE ma.RecordTypeId IN ('012E00000004RulIAE','012E00000005omKIAQ')
 ) AS x
 ORDER BY SortOrder;


	SET NOCOUNT OFF;
END 







GO
/****** Object:  StoredProcedure [Reports].[rpt_Dropdown_ZutronDomain]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Reports].[rpt_Dropdown_ZutronDomain] (
    @InclAGSites INT
   ,@MgtCoID INT)
/*************************************************************************************************
*
* Name:	reports.[rpt_Dropdown_ZutronDomain]
*
* Desc:	This gets the list of domains for a management company tagged with Zutron
*
* Test:	EXEC reports.[rpt_Dropdown_ZutronDomain] 0, 6069
*
* Hist:	01	09/22/2016		Colleen Rocks		Ticket 23755; initial version
**************************************************************************************************/
AS
SET NOCOUNT ON

IF @InclAGSites = -1
    IF @MgtCoID = 0
        SELECT  '(Select All)' AS Domain
               ,1 AS RowNum

    ELSE
        SELECT  domain = REPLACE(REPLACE(REPLACE(UpsellAGSitesCustomURL,'https:',''),'http:',''),'/','')
               ,2 AS RowNum
        FROM    RentPath.Dimension.Listings
        WHERE   UpsellAGSitesCustomURL <> ''
                AND @MgtCoID = MgtCoIDAG
        UNION
        SELECT  Domain
               ,2 AS RowNum
        FROM    RentPath.dbo.ZutronTaggedWebSite
        WHERE   @MgtCoID = MGTCoIDAG
        ORDER BY RowNum
               ,Domain

ELSE
    SELECT  Domain
           ,2 AS RowNum
    FROM    RentPath.dbo.ZutronTaggedWebSite
    WHERE   @MgtCoID = MGTCoIDAG
    ORDER BY RowNum
           ,Domain

SET NOCOUNT OFF





GO
/****** Object:  StoredProcedure [Reports].[rpt_Dropdown_ZutronMgtCompanies]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Reports].[rpt_Dropdown_ZutronMgtCompanies] (@InclAGSites INT)
/*************************************************************************************************
*
* Name:	reports.[rpt_Dropdown_ZutronMgtCompanies]
*
* Desc:	This gets the list of management companies tagged with Zutron
*
* Test:	EXEC reports.[rpt_Dropdown_ZutronMgtCompanies] -1
*
* Hist:	01	09/22/2016		Colleen Rocks		Ticket 23755; initial version
**************************************************************************************************/
AS
SET NOCOUNT ON

IF @InclAGSites = -1
    SELECT  0 AS MgtCoID
           ,'<Select All>' AS MgtCoName
           ,'Select All' AS MgtCoNameLabel
    UNION
    SELECT  DISTINCT
            CASE WHEN MgtCoIDAG IS NULL THEN '-1' ELSE MgtCoIDAG END AS MgtCoID
           ,CASE WHEN MgtCoNameAG = '' THEN '<Z>' ELSE MgtCoNameAG END AS MgtCoName
           ,CASE WHEN MgtCoIDAG IS NULL THEN 'None' ELSE CONCAT(MgtCoNameAG,' (',MgtCoIDAG,')') END AS MgtCoNameLabel
    FROM    RentPath.Dimension.Listings
    WHERE   UpsellAGSitesCustomURL <> ''
    UNION
    SELECT  DISTINCT
            MGTCoIDAG AS MgtCoID
           ,MgtCoNameAG AS MgtCoName
           ,CONCAT(MgtCoNameAG,' (',MGTCoIDAG,')') AS MgtCoNameLabel
    FROM    RentPath.dbo.ZutronTaggedWebSite
    ORDER BY 2

ELSE
    SELECT  0 AS MgtCoID
           ,'<Select All>' AS MgtCoName
           ,'Select All' AS MgtCoNameLabel
    UNION
    SELECT  MGTCoIDAG AS MgtCoID
           ,MgtCoNameAG AS MgtCoName
           ,CONCAT(MgtCoNameAG,' (',MGTCoIDAG,')') AS MgtCoNameLabel
    FROM    RentPath.dbo.ZutronTaggedWebSite
    ORDER BY 2

SET NOCOUNT OFF



GO
/****** Object:  StoredProcedure [Reports].[rpt_EditXmlHistory]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Reports].[rpt_EditXmlHistory] (
     @mgtcoid VARCHAR(15)
      ,@StartYMDDate AS DATETIME = NULL
      ,@EndYMDDate AS DATETIME = NULL)
AS 
/**********************************************************************************************************************************************
* Name:    Reports.[rpt_EditXmlHistory]
* Desc:    Input a @mgtcoid, pull all EditXmlhistory related to the mgtcoid
* -------------------------------------------------------------------------------------------
* Test:		EXEC Reports.[rpt_EditXmlHistory] '8934','01/01/2017','01/31/2017'

* -------------------------------------------------------------------------------------------
* Note: defaults to last years for previous month.
* -------------------------------------------------------------------------------------------
* Hist:  01 01/31/2012  Richard Chen            Initial version, #Case 01384903
*****************************************************************************************************************************************************/
BEGIN

------------------------------------------------------------------------
 -- Drop temp tables if not NULL
------------------------------------------------------------------------
-- IF OBJECT_ID('tempdb..#Listings') IS NOT NULL
--	BEGIN 
--       DROP TABLE #lm
--	END	   
		

 ------------------------------------------------------------------------
 -- Declare & Set Variables
 ------------------------------------------------------------------------
 DECLARE  @StartYMDID varchar(20)
         ,@EndYMDID varchar(20)
         --,@CBSACount int

 SET @StartYMDDate = ISNULL(@StartYMDDate,DATEADD(MONTH,-12,GETDATE()));
 SET @EndYMDDate = ISNULL(@EndYMDDate,DATEADD(MONTH,0,GETDATE()));

 SET @StartYMDID = CONVERT(VARCHAR(8),@StartYMDDate,112)
 SET @EndYMDID = CONVERT(VARCHAR(8),@EndYMDDate,112)
         
 IF @EndYMDID > CONVERT(VARCHAR(8),GETDATE() - 1,112) 
     BEGIN SET @EndYMDID = CONVERT(VARCHAR(8),GETDATE() - 1,112)  END

declare
@vmgtcoid varchar(15)
,@sql  nvarchar(4000)
--mgtcoid 8934
set @vmgtcoid = @mgtcoid

set @sql='
SELECT ROLE,FIRSTNAME,LASTNAME,EMAIL,PROPERTYID,LISTINGID,PROPERTYNAME,PROMOTEDAT
FROM
OPENQUERY (oracleaptg,
''select r.role,u.FirstName, u.LastName,u.email,x.propertyid,pl.listingid,p.PropertyName,to_char(promotedat,''''Mon-dd-yyyy hh24:mi:ss'''') as Promotedat
  from webicon.dsum_user u
  join webicon.dsum_userrole ur
      on ur.userid=u.userid		
  join  common.editxmlhistory x		
      on x.promoter=u.userid		
  join webicon.dsum_role   r
     on ur.roleid=r.roleid
  join properties.proplistings pl
     on x.propertyid=pl.propertyid
  join properties.properties p
    on pl.propertyid=p.propertyid
 where to_char(x.promotedat,''''yyyymmdd'''') between '+@StartYMDID +' and '+@EndYMDID+'
    and pl.mgtcoid='+@vmgtcoid+'
'')'
print @sql

execute sp_executesql @sql  
   


END

SET NOCOUNT OFF





GO
/****** Object:  StoredProcedure [Reports].[rpt_EmailLeadsByMoveInDate]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Reports].[rpt_EmailLeadsByMoveInDate]
    (
      @StartDate DATE,
	  @EndDate DATE,
      @MarketCD VARCHAR(4000)
    )
/*************************************************************************************************
*
* Name:	Reports.rpt_PropertyEmailLeads
*
* Desc:	This is the new version of the Property Email Leads report
*
* Test:	
        EXEC Reports.[rpt_EmailLeadsByMoveInDate]  0, @MarketCD=N'P01003'
		EXEC Reports.[rpt_EmailLeadsByMoveInDate]  1, @MarketCD=N'P01003'
		EXEC Reports.[rpt_EmailLeadsByMoveInDate]  2, @MarketCD=N'P01003'
		EXEC Reports.[rpt_EmailLeadsByMoveInDate]  3, @MarketCD=N'P01003'

*
* Note: "Immediately", "Couple of weeks", "About a month"    , and "1-3 Months"
         1 to 7 days , 7days to 14 days ,  14 days to 30 days,31days to 92 days
*  values       0            1                    2                 3
* Hist:	01	04/22/2015		Richard Chen			Initial Version. Ticket 19137

**************************************************************************************************/
AS 
    SET NOCOUNT ON

	--------------------------------------
	--Declare and set variables
	--------------------------------------

    DECLARE @TSQL VARCHAR(8000) ,
        @StartYMDID INT ,
        @EndYMDID INT

      SET @StartYMDID=CAST(CONVERT(VARCHAR, @startDate, 112) AS INT)
      SET @ENDYMDID=CAST(CONVERT(VARCHAR, @EndDate, 112) AS INT)
      PRINT @StartYMDID
      PRINT @EndYMDID




    BEGIN TRY
        DROP TABLE #TempSplitMarket
    END TRY
    BEGIN CATCH
    END CATCH

--	DECLARE @marketcd VARCHAR(4000)
--	SET @MarketCD=N'P01003'

    SELECT  DISTINCT
            measure AS MarketCD
    INTO    #TempSplitMarket
    FROM    dbautility..fn_split(@MarketCD, ',');	     

    SELECT  CONVERT(DATE,CAST(e.ymdid AS varchar),112) AS LeadReceiveDate
	        ,dlm.marketname,dl.PropertyName,e.Comments,'ApartmentGuide' AS SourceSystem
	        ,e.leadid 
            ,CONVERT(DATE, REPLACE(movemonth, '-', ''), 112) AS movemonth
			,DATEDIFF (d,CONVERT(date,CAST(e.ymdid AS varchar),112)
			             ,CONVERT(DATE, REPLACE(movemonth, '-', ''), 112)) AS moverange 
    FROM    apartmentguide.[Fact].[AllEmailLeads] e WITH (nolock)
            JOIN apartmentguide.dimension.listings dl WITH (nolock) ON e.listingid = dl.listingid
            JOIN apartmentguide.dimension.listingMarket dlm WITH (nolock) ON dl.listingid = dlm.listingid
			JOIN  #TempSplitMarket M ON dlm.marketcd=m.marketcd
    WHERE   e.ymdid BETWEEN @StartYMDID AND @EndYMDID
    UNION
--2015-04-23T
    SELECT  CONVERT(DATE,CAST(e.ymdid AS varchar),112) AS LeadReceiveDate
	        ,dlm.marketname,dl.PropertyName,e.Comments, 'ThirdPartyFeed' AS SourceSystem
	        ,e.leadid
            ,CASE WHEN ISNUMERIC(REPLACE(movemonth, '-', '')) = 1
                 THEN CONVERT(DATE, REPLACE(movemonth, '-', ''), 112)
                 ELSE CASE WHEN CHARINDEX('T', movemonth) = 11
                           THEN CAST (REPLACE(movemonth, 'T', '') AS DATE)
                           WHEN movemonth LIKE '%UNKNOWN%'
                           THEN DATEADD(year, 100, GETDATE())
                           ELSE CONVERT(DATE, REPLACE(movemonth, '-', ' '), 100)
                      END
              END AS movemonth
			,DATEDIFF (d,CONVERT(date,CAST(e.ymdid AS varchar),112)
			             ,CASE WHEN ISNUMERIC(REPLACE(movemonth, '-', '')) = 1
                               THEN CONVERT(DATE, REPLACE(movemonth, '-', ''), 112)
                          ELSE 
							  CASE WHEN CHARINDEX('T', movemonth) = 11
								   THEN CAST (REPLACE(movemonth, 'T', '') AS DATE)
								   WHEN movemonth LIKE '%UNKNOWN%'
								   THEN DATEADD(year, 100, GETDATE())
								   ELSE CONVERT(DATE, REPLACE(movemonth, '-', ' '), 100)
							   END
						  END                        
						 ) AS moverange
    FROM    ApartmentGuide.Fact.ThirdPartyFeedLeads e WITH (nolock)
	        JOIN apartmentguide.dimension.listings dl WITH (nolock) ON e.listingid = dl.listingid
            JOIN apartmentguide.dimension.listingMarket dlm WITH (nolock) ON dl.listingid = dlm.listingid
			JOIN  #TempSplitMarket M ON dlm.marketcd=m.marketcd
    WHERE e.ymdid BETWEEN @StartYMDID AND @EndYMDID  
    UNION
    SELECT  CONVERT(DATE,CAST(e.ymdid AS varchar),112) AS LeadReceiveDate
	        ,dlm.marketname,dl.PropertyName,e.Comments,'RentCom' AS SourceSystem
	        ,leadid 
            ,CONVERT(DATE, REPLACE(movemonth, '-', ''), 112) AS movemonth
			,DATEDIFF (d,CONVERT(date,CAST(e.ymdid AS varchar),112)
			             ,CONVERT(DATE, REPLACE(movemonth, '-', ''), 112)) AS moverange
    FROM    Rentcom.Fact.EmailsRentCom e WITH (nolock)
            JOIN rentcom.dimension.listings dl WITH (nolock) ON e.listingid = dl.listingid
			JOIN rentcom.dimension.listingmarket dlm WITH (nolock)  ON dl.listingid=dlm.listingid
			JOIN  #TempSplitMarket M ON dlm.marketcd=m.marketcd
    WHERE   e.ymdid BETWEEN @StartYMDID AND @EndYMDID


    SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [Reports].[rpt_EmailsProducingLeadsReport]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Reports].[rpt_EmailsProducingLeadsReport]
( @EndYMDID INT = NULL )
/*******************************************************************************************
* Name:	reports.rpt_EmailsProducingLeadsReport
* ------------------------------------------------------------------------------------------
* Desc:	This procedure gets a list of all email addresses with 15 or fewer lead emails and
		what city/state/zip combinations it sent to.  Purpose is for sending marketing emails.

		The reporting period is Thu-Wed and the ending YMDID can be provided to produce a report
		 for a period earlier than previous week, otherwise the report is based on current date.
* ------------------------------------------------------------------------------------------
* Test:	reports.rpt_EmailsProducingLeadsReport --to get previous week's emails
		reports.rpt_EmailsProducingLeadsReport 20170616
* ------------------------------------------------------------------------------------------
* Hist:	01	20170627	dwert		Case 01473330, initial version
* Hist: 02	20170817	dwert		Case unknown, Jamela requested via email for us to add prospect name
********************************************************************************************/
AS 
BEGIN 
	SET NOCOUNT ON

	--make these params of the proc, if that's the route you go
	DECLARE @StartYMDID INT = NULL

	/*test
	DECLARE @EndYMDID INT = NULL
	*/

	--this allows you to get data for different time periods
	IF @EndYMDID IS NULL
	BEGIN
		SELECT @EndYMDID = MAX(YMDID)
		FROM DBAUtility.Dimension.Dates
		WHERE Date < GETDATE()
		AND DayShortName = 'Wed'
	END

	--note that the reporting period always begins on Thursday
	SELECT @StartYMDID = MAX(YMDID)
	FROM DBAUtility.Dimension.Dates
	WHERE YMDID < @EndYMDID
	AND DayShortName = 'Thu'

	--SELECT @StartYMDID
	--,@EndYMDID


	SELECT CAST(@StartYMDID AS VARCHAR) + ' to ' + CAST(@EndYMDID AS VARCHAR) AS ReportingPeriod
	,el.Email
	,COUNT(1) AS LeadCount
	INTO #EmailLeadCounts
	FROM RentPath.Mart.EmailLeads el
	LEFT JOIN RentPath.Dimension.Listings dl
		ON dl.ListingID = el.ListingID
	WHERE el.YMDID BETWEEN @StartYMDID AND @EndYMDID
	GROUP BY el.Email
	ORDER BY el.Email

	IF (SELECT OBJECT_ID('Rentpath.Reports.EmailsProducingLeads')) IS NOT NULL
		DROP TABLE RentPath.Reports.EmailsProducingLeads

	--currently any email with >15 leads is considered a robot and should not be included
	SELECT CAST(@StartYMDID AS VARCHAR) + ' to ' + CAST(@EndYMDID AS VARCHAR) AS ReportingPeriod
	,el.Email
	,ISNULL(el.FirstName,'') + CASE WHEN el.FirstName IS NOT NULL THEN ' ' ELSE '' END + ISNULL(el.LastName,'') AS ProspectName
	,dl.PropertyCity
	,dl.PropertyState
	,dl.PropertyZipCode
	--,COUNT(1) AS LeadCount
	INTO RentPath.Reports.EmailsProducingLeads
	FROM RentPath.Mart.EmailLeads el
	JOIN RentPath.Dimension.Listings dl
		ON dl.ListingID = el.ListingID
	JOIN (
		SELECT Email
		,Leadcount
		FROM #EmailLeadCounts
		WHERE LeadCount <= 15
	) fltr
		ON fltr.Email = el.Email
	WHERE el.YMDID BETWEEN @StartYMDID AND @EndYMDID
	GROUP BY el.Email
	,ISNULL(el.FirstName,'') + CASE WHEN el.FirstName IS NOT NULL THEN ' ' ELSE '' END + ISNULL(el.LastName,'')
	,dl.PropertyCity
	,dl.PropertyState
	,dl.PropertyZipCode
	ORDER BY el.Email
	,dl.PropertyCity
	,dl.PropertyState
	,dl.PropertyZipCode

	--SELECT TOP 100 *
	--FROM RentPath.Reports.EmailsProducingLeads
END	




GO
/****** Object:  StoredProcedure [Reports].[rpt_EventAnalysis_4Product]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Reports].[rpt_EventAnalysis_4Product]
(@ProfileKey INT
,@StartDate DATETIME
,@EndDate DATETIME
,@FirstSegment INT
,@SecondSegment INT
,@VSelection INT
,@SelectionKeys VARCHAR (4000)
,@PageSubKeys VARCHAR (4000)
)
/*************************************************************************************************
*
* Name:	Reports.rpt_MVTCustomReport
*
* Desc:	This report is for Scott Ehly.
*
* Test:	EXEC Reports.[rpt_EventAnalysis_4Product] 2,'VS Card 2 vs 3 CTA', '03/03/2017', '03/07/2017',0,0,0,'35,50','7,9,17,20,35,46,47,66,71,99,109,111,112,129,134,138,139,141,144,146,160,164,174,180,185,186,191,193,203,207,209,217,221,224,230,236,237,239,245,252,282,291,298,302,306,315,319,331,337,339,355,359,0,373,376,399,402,403,405,408,412,420,424,430,434,437,441,445,446,447,450,458,504,509,525,564,566,567,568,569,570,571,573'
*
  exec Reports.[rpt_EventAnalysis_4Product] 
  @ProfileKey=2
  ,@StartDate='03/24/2017'
  ,@EndDate='03/03/2017'
  ,@FirstSegment=4
  ,@SecondSegment=0
  ,@VSelection=0
  ,@SelectionKeys=N'1,2,3,4,5,6,7,8,9,132,10,13,14,137,15,133,17,18,19,21,25,135,136,34,35,0,50,53,56,57,61,62,65,147,148,68'
  ,@PageSubKeys=N'7,9,578,17,20,373,567,35,568,46,47,66,71,576,399,525,566,99,402,403,109,111,112,405,575,129,408,134,139,144,146,412,569,160,164,174,570,180,185,186,191,193,420,203,207,209,504,217,0,221,224,236,237,424,571,577,239,245,252,434,437,291,441,298,445,446,302,509,447,573,450,306,315,574,319,331,564,337,339,359,458'

exec Reports.[rpt_EventAnalysis_4Product] @ProfileKey=2
,@StartDate='2017-03-26',@EndDate='2017-03-27',@FirstSegment=2,@SecondSegment=1,@VSelection=0,@SelectionKeys=N'1,2,3,4,5,6,7,8,9,132,10,138,73,11,74,12,13,14,137,15,16,133,17,134,18,19,20,75,76,21,22,23,24,82,25,83,26,27,28,29,30,31,32,33,135,136,34,35,144,92,94,36,37,139,140,95,98,38,99,141,100,101,39,40,41,42,43,44,45,46,143,47,109,48,0,49,50,112,113,51,114,52,53,54,55,122,56,57,58,59,60,61,62,63,126,127,65,129,147,66,130,67,148,131,142,68'
,@PageSubKeys=N'362,363,1,2,364,365,517,3,366,367,518,4,6,7,8,9,519,520,10,11,12,368,13,369,370,371,14,521,15,16,578,372,17,18,19,20,21,482,373,374,23,24,375,25,26,557,483,484,485,28,29,30,376,377,31,32,567,34,486,487,35,568,36,37,38,39,40,41,378,379,380,381,382,383,384,522,43,385,386,387,388,46,47,48,49,389,390,391,392,50,51,52,53,54,523,459,394,395,524,57,58,60,61,396,62,64,65,397,66,460,67,68,69,71,72,74,76,78,398,489,79,80,576,399,81,490,83,525,84,85,86,87,88,94,95,400,566,558,96,97,401,572,98,99,100,402,101,492,493,494,495,496,497,102,474,403,104,105,106,404,107,461,109,110,111,112,115,526,405,575,116,406,498,407,117,118,122,123,124,125,126,127,128,129,130,132,133,462,408,409,134,135,137,138,139,140,527,141,142,463,143,144,410,411,145,146,147,528,499,148,412,149,413,151,152,153,154,155,156,157,569,500,159,414,160,161,415,416,162,163,164,165,166,167,169,170,171,172,173,174,175,176,177,559,179,570,560,180,479,476,480,478,475,417,477,481,501,182,183,184,185,186,187,464,465,188,190,191,192,193,194,529,530,531,532,533,534,535,536,537,538,539,540,195,418,196,197,198,199,419,541,542,543,544,545,546,547,548,549,550,551,552,420,202,203,204,205,206,502,207,208,209,210,211,212,213,214,473,421,215,503,504,216,217,219,0,220,422,553,505,506,561,221,562,554,224,225,226,227,228,229,423,230,231,235,236,466,237,424,571,425,238,426,577,239,240,242,243,244,427,245,246,428,247,248,249,429,251,252,253,430,255,256,258,259,262,264,265,266,267,268,269,270,271,272,274,277,278,279,431,432,280,281,433,434,282,435,284,285,286,436,287,555,288,289,290,507,437,291,292,438,439,293,440,294,296,441,298,442,443,444,299,508,445,469,446,300,301,563,302,470,509,447,573,510,511,448,304,305,449,450,306,307,451,309,310,512,311,313,513,314,315,453,574,317,318,454,319,320,514,321,322,323,324,325,326,327,328,329,556,331,564,332,335,336,455,337,338,339,456,340,515,341,471,346,347,349,350,351,352,565,354,355,356,357,516,472,358,359,360,361,457,458'
* Note: 	
*	--------------
*	--V Selection
*	--------------
*	0--Visit
*	1--Visitor
*	-------------
*	--Segment
*	-------------
*	0--None
*	1--Browser
*	2--CBSA - CustIP
*	3--CBSA - Search
*	4--Date
*	5--Day Of Week
*	6--OperatingSystem
*	7--Page
*	8--TrafficSource
*
* Hist:	01	03/28/2017		Richard Chen			Initial Version. Case 01433393
**************************************************************************************************/
AS

--SET NOCOUNT ON

--DECLARE 
--@ProfileKey INT
--,@StartDate DATETIME
--,@EndDate DATETIME
--,@FirstSegment INT
--,@SecondSegment INT
--,@VSelection INT
--,@SelectionKeys VARCHAR (4000)
--,@PageSubKeys VARCHAR (4000)

--SET @ProfileKey =2
--SET @StartDate = '03/26/2017'
--SET @EndDate= '03/27/2017'
--SET @FirstSegment = 1
--SET @SecondSegment = 8
--SET @VSelection = 0
--SET @SelectionKeys = '1,2,3,4,5,6,7,8,9,132,10,13,14,137,15,133,17,18,19,21,25,135,136,34,35,0,50,53,56,57,61,62,65,147,148,68'
--SET @PageSubKeys = '7,9,578,17,20,373,567,35,568,46,47,66,71,576,399,525,566,99,402,403,109,111,112,405,575,129,408,134,139,144,146,412,569,160,164,174,570,180,185,186,191,193,420,203,207,209,504,217,0,221,224,236,237,424,571,577,239,245,252,434,437,291,441,298,445,446,302,509,447,573,450,306,315,574,319,331,564,337,339,359,458'


-------------------------------
--Declare and set variables
-----------------------------
DECLARE @StartDateKey INT
		,@EndDateKey INT
        ,@sql  varchar(8000)  
SET @StartDateKey = CAST(CONVERT(VARCHAR(8),@StartDate,112) AS INT)
SET @EndDateKey = CAST(CONVERT(VARCHAR(8),@EndDate,112) AS INT)

-------------------------------
--Drop the result set table
-------------------------------
BEGIN TRY
DROP TABLE RentPath.dbo.MVTResultSet4Product
END TRY
BEGIN CATCH
END CATCH
-----------------------------------
--To improve performance - do all of the work on APS except the final table
-----------------------------------

EXEC( 
'	------------------------------
	--Drop Selection and PageSub Tables
	------------------------------
	BEGIN TRY
		DROP TABLE RentPath.dbo.rpt_MVTSelectionList4Product
	END TRY
	BEGIN CATCH
	END CATCH

	BEGIN TRY
		DROP TABLE RentPath.dbo.rpt_MVTPageSubList4Product
	END TRY
	BEGIN CATCH
	END CATCH

	BEGIN TRY
		DROP TABLE RentPath.dbo.MVTVCount4Product
	END TRY
	BEGIN CATCH
	END CATCH

	BEGIN TRY
		DROP TABLE RentPath.dbo.MVTCustomEvents4Product
	END TRY
	BEGIN CATCH
	END CATCH

	BEGIN TRY
		DROP TABLE RentPath.dbo.MVTResultSet4Product
	END TRY
	BEGIN CATCH
	END CATCH

	------------------------------
	--Create Selection Table
	------------------------------

	CREATE TABLE RentPath.dbo.rpt_MVTSelectionList4Product
	  WITH (DISTRIBUTION = REPLICATE)
	  AS

		SELECT s.SelectionKey
		,s.Selection
		FROM
		(
		SELECT 
				SelectionKey = LTrim(RTrim(Convert(nvarchar(4000), SubString('''+@SelectionKeys+''', n.Number, CharIndex('','', '''+@SelectionKeys+''' + '','', n.Number) - n.Number))))
				,StartPosition = n.Number
				,GETDATE() AS DateCreated
			FROM
				Common.dbo.numbers AS n
			WHERE
					n.Number <= Convert(int, Len('''+@SelectionKeys+'''))
				AND	SUBSTRING('','' + '''+@SelectionKeys+''', n.Number, LEN('','')) = '',''
		) AS X
		JOIN DimensionalModelWeb.Conformed.Selection AS s
			ON X.SelectionKey = s.SelectionKey
	------------------------------
	--Create Selection Table
	------------------------------

	CREATE TABLE RentPath.dbo.rpt_MVTPageSubList4Product
	  WITH (DISTRIBUTION = REPLICATE)
	  AS
		SELECT ps.PageSubKey
		,ps.PageSub
		FROM
			(
			SELECT 
					PageSubKey = LTrim(RTrim(Convert(nvarchar(4000), SubString('''+@PageSubKeys+''', n.Number, CharIndex('','', '''+@PageSubKeys+''' + '','', n.Number) - n.Number))))
					,StartPosition = n.Number
					,GETDATE() AS DateCreated
				FROM
					Common.dbo.numbers AS n
				WHERE
						n.Number <= Convert(int, Len('''+@PageSubKeys+'''))
					AND	SUBSTRING('','' + '''+@PageSubKeys+''', n.Number, LEN('','')) = '',''
			) AS X
		JOIN DimensionalModelWeb.Conformed.PageSub AS ps
			ON X.PageSubKey = ps.PageSubKey

	----------------------------------
	--Create ''fixed'' visit count by segment table
	----------------------------------
	CREATE TABLE RentPath.dbo.MVTVCount4Product
	WITH (DISTRIBUTION = REPLICATE)
	AS

	SELECT CASE '+@FirstSegment+' WHEN 4 THEN w.DateKey ELSE 99999 END AS DateSort
	,CASE '+@FirstSegment+'
			 WHEN 1 THEN b.Browser
			 WHEN 2 THEN cl.CBSAName
			 WHEN 3 THEN sl.CBSAName
			 WHEN 4 THEN d.DateDescription
			 WHEN 5 THEN d.DayName
			 WHEN 6 THEN os.OperatingSystem
			 WHEN 7 THEN p.Page
			 WHEN 8 THEN ts.TrafficSourceName
			 ELSE ''None Selected'' END AS FirstSegment	 
	,CASE '+@SecondSegment+'
			 WHEN 1 THEN b.Browser
			 WHEN 2 THEN cl.CBSAName
			 WHEN 3 THEN sl.CBSAName
			 WHEN 4 THEN d.DateDescription
			 WHEN 5 THEN d.DayName
			 WHEN 6 THEN os.OperatingSystem
			 WHEN 7 THEN p.Page
			 WHEN 8 THEN ts.TrafficSourceName
			 ELSE ''None Selected'' END AS SecondSegment
	,COUNT(DISTINCT CASE WHEN '+@VSelection+' = 0 THEN VisitEventKey ELSE VisitorKey END) AS FixedVCount
	FROM DimensionalModelWeb.Fact.WebEvent_VisitorHash AS w
	JOIN DimensionalModelWeb.Conformed.Browser AS b
		ON w.BrowserKey = b.BrowserKey
	JOIN DimensionalModelWeb.Conformed.Dates AS d
		ON w.DateKey = d.DateKey
	JOIN DimensionalModelWeb.Conformed.MultivariateTesting AS mvt
		ON w.MVTKey = mvt.MVTKey
	JOIN DimensionalModelWeb.Conformed.OperatingSystem AS os
		ON w.OperatingSystemKey = os.OperatingsystemKey
	JOIN DimensionalModelWeb.Conformed.Page AS p
		ON w.PageKey = p.PageKey
	JOIN DimensionalModelWeb.Conformed.Profile AS pr
		ON w.ProfileKey = pr.ProfileKey
	JOIN DimensionalModelWeb.Conformed.TrafficSource AS ts
		ON w.TrafficSourceKey = ts.TrafficSourceKey
	JOIN DimensionalModelWeb.Conformed.Location AS sl
		ON w.SearchLocationKey = sl.LocationKey
	JOIN DimensionalModelWeb.Conformed.Location AS cl
		ON w.CustIPLocationKey = cl.LocationKey
	WHERE w.BadTrafficFlag = 0
	AND w.DateKey BETWEEN ' + @StartDateKey + ' AND ' + @EndDateKey + '
	AND w.ProfileKey = '''+@ProfileKey+'''
	GROUP BY 
	 CASE '+@FirstSegment+' WHEN 4 THEN w.DateKey ELSE 99999 END
	,CASE '+@FirstSegment+'
			 WHEN 1 THEN b.Browser
			 WHEN 2 THEN cl.CBSAName
			 WHEN 3 THEN sl.CBSAName
			 WHEN 4 THEN d.DateDescription
			 WHEN 5 THEN d.DayName
			 WHEN 6 THEN os.OperatingSystem
			 WHEN 7 THEN p.Page
			 WHEN 8 THEN ts.TrafficSourceName
			 ELSE ''None Selected'' END 
	,CASE '+@SecondSegment+'
			 WHEN 1 THEN b.Browser
			 WHEN 2 THEN cl.CBSAName
			 WHEN 3 THEN sl.CBSAName
			 WHEN 4 THEN d.DateDescription
			 WHEN 5 THEN d.DayName
			 WHEN 6 THEN os.OperatingSystem
			 WHEN 7 THEN p.Page
			 WHEN 8 THEN ts.TrafficSourceName
			 ELSE ''None Selected'' END 

	----------------------------------
	--Create custom counts by segment table
	----------------------------------
	CREATE TABLE RentPath.dbo.MVTCustomEvents4Product
	WITH (DISTRIBUTION = REPLICATE)
	AS
	SELECT 	
	  CASE '+@FirstSegment+' WHEN 4 THEN w.DateKey ELSE 99999 END AS DateSort
     ,CASE '+@FirstSegment+'
			 WHEN 1 THEN b.Browser
			 WHEN 2 THEN cl.CBSAName
			 WHEN 3 THEN sl.CBSAName
			 WHEN 4 THEN d.DateDescription
			 WHEN 5 THEN d.DayName
			 WHEN 6 THEN os.OperatingSystem
			 WHEN 7 THEN p.Page
			 WHEN 8 THEN ts.TrafficSourceName
			 ELSE ''None Selected'' END AS FirstSegment	 
	,CASE '+@SecondSegment+'
			 WHEN 1 THEN b.Browser
			 WHEN 2 THEN cl.CBSAName
			 WHEN 3 THEN sl.CBSAName
			 WHEN 4 THEN d.DateDescription
			 WHEN 5 THEN d.DayName
			 WHEN 6 THEN os.OperatingSystem
			 WHEN 7 THEN p.Page
			 WHEN 8 THEN ts.TrafficSourceName
			 ELSE ''None Selected'' END AS SecondSegment
	,COUNT(DISTINCT CASE WHEN '+@VSelection+' = 0 THEN VisitEventKey ELSE VisitorKey END) AS CustomVCount
	,COUNT(*) AS CustomEventCount
	FROM DimensionalModelWeb.Fact.WebEvent_VisitorHash AS w
	JOIN DimensionalModelWeb.Conformed.Browser AS b
		ON w.BrowserKey = b.BrowserKey
	JOIN DimensionalModelWeb.Conformed.Dates AS d
		ON w.DateKey = d.DateKey
	JOIN DimensionalModelWeb.Conformed.MultivariateTesting AS mvt
		ON w.MVTKey = mvt.MVTKey
	JOIN DimensionalModelWeb.Conformed.OperatingSystem AS os
		ON w.OperatingSystemKey = os.OperatingsystemKey
	JOIN RentPath.dbo.rpt_MVTPageList AS p
		ON w.PageKey = p.PageKey
	JOIN RentPath.dbo.rpt_MVTPositionList AS pt
		ON w.PositionKey = pt.PositionKey
	JOIN DimensionalModelWeb.Conformed.Profile AS pr
		ON w.ProfileKey = pr.ProfileKey
	JOIN RentPath.dbo.rpt_MVTActionList AS a
		ON w.ActionKey = a.ActionKey
	JOIN RentPath.dbo.rpt_MVTPageSubList4Product AS ps
		ON w.PageSubKey = ps.PageSubKey
	JOIN DimensionalModelWeb.Conformed.TrafficSource AS ts
		ON w.TrafficSourceKey = ts.TrafficSourceKey
	JOIN DimensionalModelWeb.Conformed.Location AS sl
		ON w.SearchLocationKey = sl.LocationKey
	JOIN DimensionalModelWeb.Conformed.Location AS cl
		ON w.CustIPLocationKey = cl.LocationKey
	JOIN RentPath.dbo.rpt_MVTSelectionList4Product AS s
		ON w.SelectionKey = s.SelectionKey
	WHERE w.BadTrafficFlag = 0
	AND w.DateKey BETWEEN ' + @StartDateKey + ' AND ' + @EndDateKey + '
	AND w.ProfileKey = '''+@ProfileKey+'''
	GROUP BY CASE '+@FirstSegment+' WHEN 4 THEN w.DateKey ELSE 99999 END
	,CASE '+@FirstSegment+'
			 WHEN 1 THEN b.Browser
			 WHEN 2 THEN cl.CBSAName
			 WHEN 3 THEN sl.CBSAName
			 WHEN 4 THEN d.DateDescription
			 WHEN 5 THEN d.DayName
			 WHEN 6 THEN os.OperatingSystem
			 WHEN 7 THEN p.Page
			 WHEN 8 THEN ts.TrafficSourceName
			 ELSE ''None Selected'' END 
	,CASE '+@SecondSegment+'
			 WHEN 1 THEN b.Browser
			 WHEN 2 THEN cl.CBSAName
			 WHEN 3 THEN sl.CBSAName
			 WHEN 4 THEN d.DateDescription
			 WHEN 5 THEN d.DayName
			 WHEN 6 THEN os.OperatingSystem
			 WHEN 7 THEN p.Page
			 WHEN 8 THEN ts.TrafficSourceName
			 ELSE ''None Selected'' END 

----------------------------------
--Put it all together
----------------------------------
CREATE REMOTE TABLE RentPath.dbo.MVTResultSet4Product
	AT
		(''Data Source = 172.24.214.35, 1433;
		User ID = biteam;
		Password = will our data be accurate?;''
		)
AS
SELECT fn.DateSort
,fn.FirstSegment
,fn.SecondSegment
,fn.FixedVCount
,fn.CustomEventCount
,fn.CustomVCount
,CustomEventConv = CASE WHEN CAST(fn.CustomEventCount AS DECIMAL(15,2)) =  0 THEN 0 
					ELSE CAST(fn.CustomEventCount AS DECIMAL(15,2))/fn.FixedVCount END	
,Binary = CASE WHEN CAST(fn.CustomVCount AS DECIMAL(15,2)) =  0 THEN 0 
					ELSE CAST(fn.CustomVCount AS DECIMAL(15,2))/fn.FixedVCount END	
FROM
	(
	SELECT X.DateSort
	,X.FirstSegment
	,X.SecondSegment
	,SUM(X.FixedVCount)				AS FixedVCount
	,SUM(X.CustomEventCount)		AS CustomEventCount
	,SUM(X.CustomVCount)			AS CustomVCount
	FROM
			(
			SELECT mc.DateSort
			       ,mc.FirstSegment
				   ,mc.SecondSegment
				   ,mc.FixedVCount																					AS FixedVCount
				   ,ISNULL(me.CustomEventCount,0)																	AS CustomEventCount
				   ,ISNULL(me.CustomVCount,0)																		AS CustomVCount
			FROM   RentPath.dbo.MVTVCount4Product AS mc
			LEFT OUTER JOIN RentPath.dbo.MVTCustomEvents4Product AS me
					ON mc.FirstSegment = me.FirstSegment
					   AND mc.SecondSegment = me.SecondSegment
					   AND mc.DateSort = me.DateSort
			) AS X
	GROUP BY X.DateSort
	        ,X.FirstSegment
	        ,X.SecondSegment
	) AS fn
' ) AT APS_LINK


--select * from RentPath.dbo.MVTResultSet4Product
EXEC( @sql)

-------------------------------------
----Get final results
-------------------------------------
SELECT DateSort
,FirstSegment
,SecondSegment
,FixedVCount
,CustomEventCount
,CustomVCount
,CustomEventConv
,Binary
FROM RentPath.dbo.MVTResultSet4Product


SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [Reports].[rpt_ExactTargetDetailReport]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Reports].[rpt_ExactTargetDetailReport]
	(
	@LeadDate DATETIME 
	,@Website INT --0 is AG, 1 is Rent
	,@MarketCD VARCHAR(8000)
	,@Delivered VARCHAR(5) -- All, Y or N
	,@UndelType VARCHAR(64)--All and individual values taken from UndelType in Edialog table
	)
/*************************************************************************************************
*
* Name:	Reports.rpt_ExactTargetDetailReport
*
* Desc:	This report provides detailed data for one day of leads
*
* Test:	EXEC Reports.rpt_ExactTargetDetailReport_test '09/28/2016', 0,'P02030,P02038,P02042,P02069,P02078,P02079,P02093','All','All'
        EXEC Reports.rpt_ExactTargetDetailReport_test '03/18/2017', 0,'P02030,P02038,P02042,P02069,P02078,P02079,P02093','All','All'
* Test:	EXEC Reports.rpt_ExactTargetDetailReport_test '09/22/2016', 1,'P02030,P02038,P02042,P02069,P02078,P02079,P02093','All','All'
*
* Note: This report replaces the following procedures.Once Asher has UAT'ed this report, I will archive all other reports/procedures.
*		--ApartmentGuide.Reports.rpt_UndelStatus
*		--Rentcom.Reports.rpt_UndelStatusRent
*		--ApartmentGuide.Reports.rpt_LeadsNotInEDialogFile
* 
* Hist:	01	09/23/2016		Sarah Mims			Initial Version. Ticket # 23173.
* Hist:	02	09/28/2016		Sarah Mims			Ticket # 23173
*												--Removed MarketType parameter
*												--Removed Market CD, Local Market CD, Local Market Name and Management Company ID display
*												--Replaced Market Name with CBSA Name
*												--Added a National Account flag
*												--Changed source of Management Company from Listing Editor to SFDC
* Hist: 03  03/20/2017      Richard Chen        SFDC Case 01423278
**************************************************************************************************/
AS

SET NOCOUNT ON

---------------------------------
-- Drop temp tables
---------------------------------
BEGIN TRY
	DROP TABLE #OracleData
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	DROP TABLE #MarketList
END TRY
BEGIN CATCH
END CATCH

---------------------------------
-- Declare and set variables
---------------------------------
DECLARE @LeadDateEnd DATETIME 
,@LeadDateString VARCHAR(10)
,@LeadDateStringEnd VARCHAR(10)
,@SQL VARCHAR(4000)


SET @LeadDateEnd = DATEADD(d,1,@LeadDate)
SET	@LeadDateString = LEFT(CONVERT(VARCHAR(30),@LeadDate,101),10)
SET @LeadDateStringEnd = LEFT(CONVERT(VARCHAR(30),@LeadDateEnd,101),10)

-----------------------------------------------------------
 -- Split out the market parameter into a market table
-----------------------------------------------------------
SELECT  REPLACE(REPLACE(REPLACE(REPLACE(Measure,' ',''),CHAR(13) + CHAR(10),' '),CHAR(13),''),CHAR(10),'') AS MarketCD
INTO    #MarketList
FROM    DBAUtility.dbo.fn_Split_Large(@MarketCD,',');

-------------------------------------------------
-- Get Lead and Exact Target Data from Oracle
-------------------------------------------------
CREATE TABLE #OracleData (
   ListingID VARCHAR(65)
   ,LeadID VARCHAR(65)
   ,LeadDateTime DATETIME
   ,ProspectEmail VARCHAR(65)
   ,FirstName VARCHAR(65)
   ,LastName VARCHAR(65)
   ,ContactEmail VARCHAR(255)
   ,Delivered VARCHAR(5)
   ,DeliverTime DATETIME
   ,Opened VARCHAR(5)
   ,OpenTime DATETIME
   ,Replied VARCHAR(5)
   ,ReplyTime DATETIME
   ,UndelType VARCHAR(65)
   ,UndelReason VARCHAR(1000)
   ,Status VARCHAR(100)
   ,DateOfFirstBounce DATETIME
   ,BounceCount DECIMAL(38,0)
   ,BounceCategory VARCHAR(100)
   ,BounceType VARCHAR(100)
   ,BounceReason VARCHAR (4000)
   ,MailingName  VARCHAR(255)
   )


------------------------
-- AG Website
------------------------
IF @Website = 0
	BEGIN
			SET @SQL = 
			'SELECT ListingID
			,LeadID
			,LeadDateTime
			,ProspectEmail
			,FirstName
			,LastName
			,ContactEmail
			,Delivered
			,DeliverTime
			,Opened
			,OpenTime
			,Replied
			,ReplyTime
			,UndelType
			,Undel_Reason
			,Status
			,DateOfFirstBounce
			,BounceCount
			,BounceCategory
			,BounceType
			,BounceReason
			,MailingName
			FROM OPENQUERY (oracleaptg, 
						''SELECT a.ListingID
						,a.leadid		AS LeadID
						,a.WHEN_ENTERED AS LeadDateTime
						,a.email		AS ProspectEmail
						,a.fname		AS FirstName
						,a.lname		AS LastName
						,l.Email		AS ContactEmail
						,l.Delivered
						,l.DeliverTime
						,l.Opened
						,l.OpenTime
						,l.Replied
						,l.ReplyTime
						,l.UndelType
						,un.Undel_Reason
						,un.Status
						,fb.DateOfFirstBounce
						,un.BounceCount
						,un.BounceCategory
						,un.BounceType
						,br.BounceReason
						,l.MailingName
						FROM COMMON.ALLLEADS a
						JOIN COMMON.ET_LEADS et
							ON a.LeadID = et.LeadID
						LEFT OUTER JOIN COMMON.EDIALOG_LEADINFO l 
							ON et.LeadID = l.LeadID
							AND LOWER(et.ContactEmail) = LOWER(l.Email)
						LEFT OUTER JOIN 
										(
										SELECT LOWER(Email) AS Email
										,Undel_Reason
										,Status
										,BounceCategory
										,BounceType
										,SUM(BounceCount) AS BounceCount
										FROM COMMON.ET_UNDELEMAILADDRESSES un
										GROUP BY LOWER(Email)
										,Undel_Reason
										,Status
										,BounceCategory
										,BounceType
										) un
							ON un.Email=LOWER(NVL(l.email,et.CONTACTEMAIL))
							AND un.Status = ''''Bounce''''
						LEFT OUTER JOIN
									  (
									  SELECT Email
									  ,MIN(DateOfFirstBounce) AS DateOfFirstBounce
									  FROM COMMON.ET_UNDELEMAILADDRESSES 
									  GROUP BY Email
									  ) fb
							ON LOWER(un.email)=LOWER(fb.Email)
						LEFT OUTER JOIN
									  (
									 SELECT d.Email
									,d.UndelFlagDate
									,b.BounceReason
									FROM
										(                                  
										SELECT Email                                      
										,BounceReason
										,Undel_Flag_Date AS UndelFlagDate
										FROM COMMON.ET_UNDELEMAILADDRESSES
										WHERE BounceReason IS NOT NULL 
										) b
									JOIN
										(
										SELECT Email
										,MAX(Undel_Flag_Date) AS UndelFlagDate
										FROM COMMON.ET_UNDELEMAILADDRESSES 
										WHERE BounceReason IS NOT NULL
										GROUP BY Email
										) d
									ON b.UndelFlagDate = d.UndelFlagDate
									AND b.Email = d.Email
									  ) br
							ON LOWER(un.email)=LOWER(br.Email)
						   WHERE a.status = 1
						   AND a.WHEN_ENTERED >= TO_DATE(''''' + @LeadDateString + ''''',''''mm/dd/yyyy'''') 
						   AND a.WHEN_ENTERED < TO_DATE(''''' + @LeadDateStringEnd + ''''',''''mm/dd/yyyy'''') 
						   AND NVL(l.Delivered,''''N'''') = CASE WHEN ''''' + @Delivered + ''''' =  ''''All'''' THEN NVL(l.Delivered,''''N'''') ELSE ''''' + @Delivered + ''''' END
						   AND NVL(l.UndelType,''''None'''') = CASE WHEN ''''' + @UndelType + ''''' =  ''''All'''' THEN NVL(l.UndelType,''''None'''') ELSE ''''' + @UndelType + ''''' END
						   ''
						)'


			--PRINT @sql 
			INSERT  INTO #OracleData
					EXEC (@SQL)

	END

ELSE

	BEGIN
	------------------------
	-- Rent Website
	------------------------
			SET @SQL = 
			'SELECT ListingID
			,LeadID
			,LeadDateTime
			,ProspectEmail
			,FirstName
			,LastName
			,ContactEmail
			,Delivered
			,DeliverTime
			,Opened
			,OpenTime
			,Replied
			,ReplyTime
			,UndelType
			,Undel_Reason
			,Status
			,DateOfFirstBounce
			,BounceCount
			,BounceCategory
			,BounceType
			,BounceReason
			,MailingName
			FROM OPENQUERY (oracleaptg, 
						''SELECT a.ListingID
						,a.leadid		AS LeadID
						,a.WHEN_ENTERED AS LeadDateTime
						,a.email		AS ProspectEmail
						,a.fname		AS FirstName
						,a.lname		AS LastName
						,l.Email		AS ContactEmail
						,l.Delivered
						,l.DeliverTime
						,l.Opened
						,l.OpenTime
						,l.Replied
						,l.ReplyTime
						,l.UndelType
						,un.Undel_Reason
						,un.Status
						,fb.DateOfFirstBounce
						,un.BounceCount
						,un.BounceCategory
						,un.BounceType
						,br.BounceReason
						,l.MailingName
						FROM COMMON.ALLLEADS_RENT a
						JOIN COMMON.ET_LEADS_RENT et
							ON a.LeadID = et.LeadID
						LEFT OUTER JOIN COMMON.ET_LEADINFO_RENT l 
							ON et.LeadID = l.LeadID
							AND LOWER(et.ContactEmail) = LOWER(l.Email)
						LEFT OUTER JOIN 
										(
										SELECT LOWER(Email) AS Email
										,Undel_Reason
										,Status
										,BounceCategory
										,BounceType
										,SUM(BounceCount) AS BounceCount
										FROM COMMON.ET_RENT_UNDELEMAILADDRESSES un
										GROUP BY LOWER(Email)
										,Undel_Reason
										,Status
										,BounceCategory
										,BounceType
										) un
							ON un.Email=LOWER(NVL(l.email,et.CONTACTEMAIL))
							AND un.BounceCategory IS NOT NULL
						LEFT OUTER JOIN
									  (
									  SELECT Email
									  ,MIN(DateOfFirstBounce) AS DateOfFirstBounce
									  FROM COMMON.ET_RENT_UNDELEMAILADDRESSES 
									  GROUP BY Email
									  ) fb
							ON LOWER(un.email)=LOWER(fb.Email)
						LEFT OUTER JOIN
									  (
									 SELECT d.Email
									,d.UndelFlagDate
									,b.BounceReason
									FROM
										(                                  
										SELECT Email                                      
										,BounceReason
										,Undel_Flag_Date AS UndelFlagDate
										FROM COMMON.ET_RENT_UNDELEMAILADDRESSES
										WHERE BounceReason IS NOT NULL 
										) b
									JOIN
										(
										SELECT Email
										,MAX(Undel_Flag_Date) AS UndelFlagDate
										FROM COMMON.ET_RENT_UNDELEMAILADDRESSES 
										WHERE BounceReason IS NOT NULL
										GROUP BY Email
										) d
									ON b.UndelFlagDate = d.UndelFlagDate
									AND b.Email = d.Email
									  ) br
							ON LOWER(un.email)=LOWER(br.Email)
						LEFT OUTER JOIN
									  (
									  SELECT Email
									  ,MIN(DateOfFirstBounce) AS DateOfFirstBounce
									  FROM COMMON.ET_RENT_UNDELEMAILADDRESSES 
									  GROUP BY Email
									  ) fb
							ON LOWER(un.email)=LOWER(fb.Email)
						   WHERE a.status = 1
						   AND a.WHEN_ENTERED >= TO_DATE(''''' + @LeadDateString + ''''',''''mm/dd/yyyy'''') 
						   AND a.WHEN_ENTERED < TO_DATE(''''' + @LeadDateStringEnd + ''''',''''mm/dd/yyyy'''') 
						   AND NVL(l.Delivered,''''N'''') = CASE WHEN ''''' + @Delivered + ''''' =  ''''All'''' THEN NVL(l.Delivered,''''N'''') ELSE ''''' + @Delivered + ''''' END
						   AND NVL(l.UndelType,''''None'''') = CASE WHEN ''''' + @UndelType + ''''' =  ''''All'''' THEN NVL(l.UndelType,''''None'''') ELSE ''''' + @UndelType + ''''' END
						   ''
						)'


			--PRINT @sql 
			INSERT  INTO #OracleData
					EXEC (@SQL)

	END
--------------------------------------------------------------------
--Select out results from Oracle and join to Market tables on WH
--------------------------------------------------------------------
SELECT CASE WHEN @Website = 0 THEN 'Apartment Guide'
			WHEN @Website = 1 THEN 'Rent'
			ELSE 'What else is there' END					AS WebsiteReport
,a.CBSAName
,a.MarketName
,pat.Name													AS ManagementCompany
,ISNULL(CAST(pat.Centralized_National_Account__c AS INT),0)	AS NationalAccountFlag
,a.ListingID
,a.PropertyName
,a.PropertyCity
,a.PropertyState
,a.LeadID
,a.LeadDateTime
,a.ProspectEmail
,a.FirstName
,a.LastName
,a.ContactEmail
,a.Delivered
,a.DeliverTime
,a.Opened
,a.OpenTime
,a.Replied
,a.ReplyTime
,a.UndelType
,a.UndelReason
,a.Status
,a.DateOfFirstBounce
,a.BounceCount
,a.BounceCategory
,a.BounceType
,a.BounceReason
,a.MailingName
FROM 
	(              
	SELECT ISNULL(c.CBSAName,'none')										AS CBSAName
	,lm.MarketCD
	,lm.MarketName
	,rl.ListingID
	,rl.SFPropertyAcctID
	,CASE WHEN @Website = 0 THEN rl.PropertyIDAG ELSE rl.PropertyIDRent END AS PropertyID
	,rl.PropertyName
	,rl.PropertyCity
	,rl.PropertyState
	,od.LeadID
	,od.LeadDateTime
	,od.ProspectEmail
	,od.FirstName
	,od.LastName
	,od.ContactEmail
	,od.Delivered
	,od.DeliverTime
	,od.Opened
	,od.OpenTime
	,od.Replied
	,od.ReplyTime
	,od.UndelType
	,od.UndelReason
	,od.Status
	,od.DateOfFirstBounce
	,od.BounceCount
	,od.BounceCategory
	,od.BounceType
	,od.BounceReason
	,od.MailingName
	FROM #OracleData AS od
	JOIN RentPath.Dimension.Listings AS rl
		ON od.ListingID = rl.ListingID
	JOIN ApartmentGuide.Dimension.ListingMarket AS lm
		ON rl.ListingID = lm.ListingID
	LEFT OUTER JOIN DBAUtility.dbo.ZipCBSA AS c
		ON ISNULL(rl.PropertyZipCode,'00000') = c.ZIPCode
	) AS a
JOIN #MarketList AS ml
	ON a.MarketCD = ml.MarketCD
JOIN Salesforce.dbo.Account AS at
	ON a.SFPropertyAcctID = at.ID
JOIN Salesforce.dbo.Account AS pat
	ON at.ParentID = pat.ID
ORDER BY CBSAName
,ContactEmail



SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [Reports].[rpt_ExactTargetSummaryReport]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Reports].[rpt_ExactTargetSummaryReport]
	(
	@StartDate DATETIME
   ,@EndDate DATETIME  
   ,@Website INT
	)
/*************************************************************************************************
*
* Name:	Reports.rpt_ExactTargetSummaryReport
*
* Desc:	This summarizes the Exact Target data for the selected date range. It is slow!!!!
*
* Test:	EXEC Reports.rpt_ExactTargetSummaryReport '10/01/2016','10/31/2016',0
* Test: EXEC Reports.rpt_ExactTargetSummaryReport '10/01/2016','10/31/2016',1
*
* Note:
*
* Hist:	01	10/13/2016		Sarah Mims			Initial Version. Ticket # 21373.
* Hist:	02	11/07/2016		Sarah Mims			Ticket # 21373 - have to dump the results into the temp table
*												for the SSRS report to read the columns. Thanks Microsoft! :D
**************************************************************************************************/
AS

SET NOCOUNT ON

----------------------------------
--Add a day to the end date to ensure we are pulling all days of data from Oracle
----------------------------------
SET @EndDate = CASE WHEN @StartDate = @EndDate THEN DATEADD(d,1,@StartDate) ELSE @EndDate END

---------------------------------
-- Declare and set variables
---------------------------------
DECLARE @StartDateString VARCHAR(10)
,@EndDateString VARCHAR(10)
,@SQL VARCHAR(4000)

SET	@StartDateString = LEFT(CONVERT(VARCHAR(30),@StartDate,101),10)
SET @EndDateString = LEFT(CONVERT(VARCHAR(30),@EndDate,101),10)

---------------------------------
-- Create a temp table to house the data set for SSRS
---------------------------------
CREATE TABLE #ExactTarget
(SummaryGroupName VARCHAR (30)
,SummaryGroupValue VARCHAR(4000)
,NumberOfLeads INT
,NumberOfUniqueLeads INT
,NumberOfUniqueContactEmails INT
)


----------------------------------------------------------------------------------------
-- Get Lead and Exact Target Data from Oracle
----------------------------------------------------------------------------------------
IF @Website = 0
BEGIN
		SET @SQL =
		'SELECT SummaryGroupName
			,SummaryGroupValue
			,NumberOfLeads
			,NumberOfUniqueLeads
			,NumberOfUniqueContactEmails
		FROM OPENQUERY 
		(oracleaptg, 
		''WITH ExactTargetCTE
		AS
		(
		SELECT l.UndelType
		,br.BounceReason      
		,un.BounceCategory             
		,a.LeadID
		,l.Email           
		FROM COMMON.ALLLEADS a
		JOIN COMMON.ET_LEADS et
			ON a.LeadID = et.LeadID
		LEFT OUTER JOIN COMMON.EDIALOG_LEADINFO l 
			ON et.LeadID = l.LeadID
			AND LOWER(et.ContactEmail) = LOWER(l.Email)
		LEFT OUTER JOIN 
					(
					SELECT LOWER(Email) AS Email
					,Undel_Reason
					,Status
					,BounceCategory
					,BounceType
					FROM COMMON.ET_UNDELEMAILADDRESSES un
					GROUP BY LOWER(Email)
					,Undel_Reason
					,Status
					,BounceCategory
					,BounceType
					) un
			ON un.Email=LOWER(NVL(l.email,et.CONTACTEMAIL))
			AND un.Status = ''''Bounce''''
		LEFT OUTER JOIN
						(
						SELECT d.Email
						,b.BounceReason
						FROM
							(                                  
							SELECT Email                                      
							,BounceReason
							,Undel_Flag_Date AS UndelFlagDate
							FROM COMMON.ET_UNDELEMAILADDRESSES
							WHERE BounceReason IS NOT NULL 
							) b
						JOIN
							(
							SELECT Email
							,MAX(Undel_Flag_Date) AS UndelFlagDate
							FROM COMMON.ET_UNDELEMAILADDRESSES 
							WHERE BounceReason IS NOT NULL
							GROUP BY Email
							) d
						ON b.UndelFlagDate = d.UndelFlagDate
						AND b.Email = d.Email
						) br
			ON LOWER(un.email)=LOWER(br.Email)
		WHERE a.status = 1
			AND a.WHEN_ENTERED >= TO_DATE(''''' + @StartDateString + ''''',''''mm/dd/yyyy'''') 
			AND a.WHEN_ENTERED < TO_DATE(''''' + @EndDateString + ''''',''''mm/dd/yyyy'''') 
		)

				SELECT         ''''Undeliverable Type''''          AS SummaryGroupName
									,UndelType                     AS SummaryGroupValue                    
									,COUNT(LeadID)                 AS NumberOfLeads
									,COUNT(DISTINCT LeadID)        AS NumberOfUniqueLeads
									,COUNT(DISTINCT Email)         AS NumberOfUniqueContactEmails
				FROM ExactTargetCTE
				GROUP BY UndelType       

				UNION

				SELECT          ''''Bounce Reason''''               AS SummaryGroupName
									,BounceReason                  AS SummaryGroupValue                    
									,COUNT(LeadID)                 AS NumberOfLeads
									,COUNT(DISTINCT LeadID)        AS NumberOfUniqueLeads
									,COUNT(DISTINCT Email)         AS NumberOfUniqueContactEmails
				FROM ExactTargetCTE
				GROUP BY BounceReason           

				UNION

				SELECT          ''''Bounce Category''''              AS SummaryGroupName
									,BounceCategory                 AS SummaryGroupValue                    
									,COUNT(LeadID)                  AS NumberOfLeads
									,COUNT(DISTINCT LeadID)         AS NumberOfUniqueLeads
									,COUNT(DISTINCT Email)          AS NumberOfUniqueContactEmails
				FROM ExactTargetCTE
				GROUP BY BounceCategory''    
									)'

	--PRINT @sql 
				INSERT INTO #ExactTarget
				EXEC (@SQL)
END
ELSE
BEGIN
SET @SQL = 
	'SELECT SummaryGroupName
		,SummaryGroupValue
		,NumberOfLeads
		,NumberOfUniqueLeads
		,NumberOfUniqueContactEmails
		FROM OPENQUERY 
		(oracleaptg, 
		''WITH ExactTargetCTE
		AS
		(
		SELECT l.UndelType
		,br.BounceReason      
		,un.BounceCategory             
		,a.LeadID
		,l.Email           
		FROM COMMON.ALLLEADS_RENT a
		JOIN COMMON.ET_LEADS_RENT et
			ON a.LeadID = et.LeadID
		LEFT OUTER JOIN COMMON.ET_LEADINFO_RENT l 
			ON et.LeadID = l.LeadID
			AND LOWER(et.ContactEmail) = LOWER(l.Email)
		LEFT OUTER JOIN 
					(
					SELECT LOWER(Email) AS Email
					,Undel_Reason
					,Status
					,BounceCategory
					,BounceType
					FROM COMMON.ET_RENT_UNDELEMAILADDRESSES un
					GROUP BY LOWER(Email)
					,Undel_Reason
					,Status
					,BounceCategory
					,BounceType
					) un
			ON un.Email=LOWER(NVL(l.email,et.CONTACTEMAIL))
			AND un.BounceCategory IS NOT NULL
		LEFT OUTER JOIN
						(
						SELECT d.Email
						,b.BounceReason
						FROM
							(                                  
							SELECT Email                                      
							,BounceReason
							,Undel_Flag_Date AS UndelFlagDate
							FROM COMMON.ET_RENT_UNDELEMAILADDRESSES
							WHERE BounceReason IS NOT NULL 
							) b
						JOIN
							(
							SELECT Email
							,MAX(Undel_Flag_Date) AS UndelFlagDate
							FROM COMMON.ET_RENT_UNDELEMAILADDRESSES 
							WHERE BounceReason IS NOT NULL
							GROUP BY Email
							) d
						ON b.UndelFlagDate = d.UndelFlagDate
						AND b.Email = d.Email
						) br
			ON LOWER(un.email)=LOWER(br.Email)
		WHERE a.status = 1
			AND a.WHEN_ENTERED >= TO_DATE(''''' + @StartDateString + ''''',''''mm/dd/yyyy'''') 
			AND a.WHEN_ENTERED < TO_DATE(''''' + @EndDateString + ''''',''''mm/dd/yyyy'''') 
		)

				SELECT         ''''Undeliverable Type''''          AS SummaryGroupName
									,UndelType                     AS SummaryGroupValue                    
									,COUNT(LeadID)                 AS NumberOfLeads
									,COUNT(DISTINCT LeadID)        AS NumberOfUniqueLeads
									,COUNT(DISTINCT Email)         AS NumberOfUniqueContactEmails
				FROM ExactTargetCTE
				GROUP BY UndelType       

				UNION

				SELECT          ''''Bounce Reason''''              AS SummaryGroupName
									,BounceReason                  AS SummaryGroupValue                    
									,COUNT(LeadID)                 AS NumberOfLeads
									,COUNT(DISTINCT LeadID)        AS NumberOfUniqueLeads
									,COUNT(DISTINCT Email)         AS NumberOfUniqueContactEmails
				FROM ExactTargetCTE
				GROUP BY BounceReason           

				UNION

				SELECT          ''''Bounce Category''''             AS SummaryGroupName
									,BounceCategory                 AS SummaryGroupValue                    
									,COUNT(LeadID)                  AS NumberOfLeads
									,COUNT(DISTINCT LeadID)         AS NumberOfUniqueLeads
									,COUNT(DISTINCT Email)          AS NumberOfUniqueContactEmails
				FROM ExactTargetCTE
				GROUP BY BounceCategory''    
									)'
	INSERT INTO #ExactTarget
	EXEC (@SQL)
END
------------------------------
--Select out final results
------------------------------
SELECT  SummaryGroupName
       ,SummaryGroupValue
       ,NumberOfLeads
       ,NumberOfUniqueLeads
       ,NumberOfUniqueContactEmails
FROM    #ExactTarget

SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [Reports].[rpt_Get_Column_List_Dashboard_Advanced_Subscription]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





/*--######################################################################################
*
* Name:	[Reports].[rpt_Get_Column_List_Dashboard_Advanced_Subscription]
*
* Desc:  Returns a delimited list of column names that are available for the Subscription Dashboard.
*
* Test:	EXEC Reports.rpt_Get_Column_List_Dashboard_Advanced_Subscription
*
*
* Hist:	01	02/19/2015	Bob Langley		Ticket 18155 - Initial Version 
* Hist: 02  12/01/2015  Kimberley Morrow	Ticket 21535 - Breakout available Columns into rows
--#######################################################################################*/
CREATE PROCEDURE [Reports].[rpt_Get_Column_List_Dashboard_Advanced_Subscription]
AS 
BEGIN

    SET NOCOUNT ON;

	DECLARE
		@ErrorMessage					NVARCHAR(4000),
		@ErrorNumber					INT,
		@ErrorSeverity					INT,
		@ErrorState						INT,
		@ErrorLine						INT,
		@ErrorProcedure					NVARCHAR(200)



	DECLARE @userid int
	DECLARE @numrecs int
	DECLARE @recn int


	/* ===================================================================================================================== */
	--Main Section
	BEGIN TRY

		--get the list of columns and tooltips


		SELECT dm.FriendlyColumnName AS AvailableColumns, dm.DataDictionary AS ToolTips
		FROM dbo.AdvancedSubscriptionDataColumns dm WITH (NOLOCK)
		ORDER BY dm.ColumnID

			



	END TRY
	BEGIN CATCH
		SELECT 
			@ErrorMessage		= ERROR_MESSAGE(),
			@ErrorNumber		= ERROR_NUMBER(),
			@ErrorSeverity		= ERROR_SEVERITY(),
			@ErrorState			= ERROR_STATE(),
			@ErrorLine			= ERROR_LINE(),
			@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');
		
		SET @ErrorMessage = 'Attempting to get delimited column list for Subscription Dashboard Advanced Subscriptions. In SPROC [Reports].[rpt_Get_Column_List_Dashboard_Advanced_Subscription].  Error - ' + @ErrorMessage


		raiserror(@ErrorMessage,16,1) with log;

		RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	
	END CATCH

	/* ===================================================================================================================== */

	SET NOCOUNT OFF;
END;






GO
/****** Object:  StoredProcedure [Reports].[rpt_Get_Property_In_Market]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* SINGLE MARKET SELECTION ONLY
hist 01: Clinton Woody 20160502 Ticket # 21604 get property in market
exec [Reports].[rpt_Get_Property_In_Market] 'p01003','both'
exec [Reports].[rpt_Get_Property_In_Market] 'p01003','Rent'
exec [Reports].[rpt_Get_Property_In_Market] 'p01003','AG'
*/
CREATE PROCEDURE [Reports].[rpt_Get_Property_In_Market]
(@MarketCd VARCHAR(20)
,@site VARCHAR(10))
AS
SELECT PropertyName + ', '+CAST(ListingID AS VARCHAR(7)) AS PropertyName,listingID 
FROM [Dimension].[Listings]
WHERE MarketCD=@MarketCD
AND CASE WHEN @Site='Both' AND (StatusIDAG=1 and StatusIDRent=1) THEN 1 WHEN @Site='AG' AND StatusIDAG=1 THEN 1
WHEN @Site='Rent' AND StatusIDRent=1 THEN 1 END =1
ORDER BY MarketName


GO
/****** Object:  StoredProcedure [Reports].[rpt_Get_SalesForce_CommunityID_For_PropertyID]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








CREATE PROCEDURE [Reports].[rpt_Get_SalesForce_CommunityID_For_PropertyID]
(@agpropertyid int = NULL)
AS 
/*--######################################################################################
* Name:	[Reports].[rpt_Get_SalesForce_CommunityID_For_PropertyID]
*-------------------------------------------------------------------------------------------------
* Desc:  Takes PropertyID   as Input Parameter and returns Salesforce Account Id 
*-------------------------------------------------------------------------------------------------
* Notes: THIS IS A CLIENT PORTAL DASHBOARD PROC. BEFORE MAKING CHANGES IN PRODUCTION, THEY MUST BE
* VETTED AND TESTED IN THE DEV & QA DATABASES FIRST.
*-------------------------------------------------------------------------------------------------
* Test:	EXEC Reports.rpt_Get_SalesForce_CommunityID_For_PropertyID NULL
* Test:	EXEC Reports.rpt_Get_SalesForce_CommunityID_For_PropertyID 39524		--001E000000nya5gIAA
* Test:	EXEC Reports.rpt_Get_SalesForce_CommunityID_For_PropertyID 467864		--001E000000nya5KIAQ
* Test:	EXEC Reports.rpt_Get_SalesForce_CommunityID_For_PropertyID '001E000000nya5mIAA'
*-------------------------------------------------------------------------------------------------
* Hist:	01	02/11/2015	Bob Langley			Ticket 18155 - Initial Version 
* Hist:	02	06/14/2016	Kimberley Morrow	Ticket 23280 - Change communityid to accountid 

--#######################################################################################*/

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
    SET NOCOUNT ON;

	DECLARE
		@ErrorMessage					NVARCHAR(4000),
		@ErrorNumber					INT,
		@ErrorSeverity					INT,
		@ErrorState						INT,
		@ErrorLine						INT,
		@ErrorProcedure					NVARCHAR(200)



	/* Testing 
	DECLARE @salesforceaccountid	varchar(18)
	SET @salesforceaccountid = '001E000000nya5gIAA'
	*/

	/* ===================================================================================================================== */
	--Main Section
	BEGIN TRY

		SELECT RentPropertyID, SalesForceAccountID AS SalesForceCommunityID  FROM Salesforce.Dimension.SALESFORCE_XREF WHERE AGPropertyID = @agpropertyid	--@salesforceaccountid
		
	END TRY
	BEGIN CATCH
		SELECT 
			@ErrorMessage		= ERROR_MESSAGE(),
			@ErrorNumber		= ERROR_NUMBER(),
			@ErrorSeverity		= ERROR_SEVERITY(),
			@ErrorState			= ERROR_STATE(),
			@ErrorLine			= ERROR_LINE(),
			@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');
		
		SET @ErrorMessage = 'Attempting to retrieve SalesForce CommunityID value from given PropertyID. In SPROC [Reports].[rpt_Get_SalesForce_CommunityID_For_PropertyID].  Error - ' + @ErrorMessage


		RAISERROR(@ErrorMessage,16,1) WITH LOG;

		RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	
	END CATCH

	/* ===================================================================================================================== */

	SET NOCOUNT OFF;
END;











GO
/****** Object:  StoredProcedure [Reports].[rpt_Get_SalesForce_PropertyID_For_CommunityID]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO









/*--######################################################################################
* Name:	[Reports].[rpt_Get_SalesForce_PropertyID_For_CommunityID]
*-------------------------------------------------------------------------------------------------
* Desc:  Takes Salesforce Community Id as its input parameter and returns property id (both AG and Rent)
*-------------------------------------------------------------------------------------------------
* Test:	EXEC Reports.rpt_Get_SalesForce_PropertyID_For_CommunityID NULL
* Test:	EXEC Reports.rpt_Get_SalesForce_PropertyID_For_CommunityID '001E000000nya5GIAQ'
*-------------------------------------------------------------------------------------------------
* Notes: THIS IS A CLIENT PORTAL DASHBOARD PROC. BEFORE MAKING CHANGES IN PRODUCTION, THEY MUST BE
* VETTED AND TESTED IN THE DEV & QA DATABASES FIRST.
*-------------------------------------------------------------------------------------------------
* Hist:	01	02/11/2015	Bob Langley			Ticket 18155 - Initial Version 
* Hist:	01	06/14/2016	Kimberley Morrow	Ticket 23280 - Update SPROCs to use SFDC Account Client ID
--#######################################################################################*/
CREATE PROCEDURE [Reports].[rpt_Get_SalesForce_PropertyID_For_CommunityID]
(@salesforcecommunityid	VARCHAR(18) = NULL) --actually the accountid
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
    SET NOCOUNT ON;

	DECLARE
		@ErrorMessage					NVARCHAR(4000),
		@ErrorNumber					INT,
		@ErrorSeverity					INT,
		@ErrorState						INT,
		@ErrorLine						INT,
		@ErrorProcedure					NVARCHAR(200)



	/* Testing 
	DECLARE @salesforcecommunityid	varchar(18)
	SET @salesforcecommunityid = '001E000000nya5GIAQ'
	*/
	
	/* ===================================================================================================================== */
	--Main Section
	BEGIN TRY

		SELECT AGPropertyID, RentPropertyID FROM Salesforce.Dimension.SALESFORCE_XREF WHERE SalesForceAccountID = @salesforcecommunityid
		
	END TRY
	BEGIN CATCH
		SELECT 
			@ErrorMessage		= ERROR_MESSAGE(),
			@ErrorNumber		= ERROR_NUMBER(),
			@ErrorSeverity		= ERROR_SEVERITY(),
			@ErrorState			= ERROR_STATE(),
			@ErrorLine			= ERROR_LINE(),
			@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');
		
		SET @ErrorMessage = 'Attempting to retrieve PropertyID values. In SPROC [Reports].[rpt_Get_SalesForce_PropertyID_For_CommunityID].  Error - ' + @ErrorMessage


		RAISERROR(@ErrorMessage,16,1) WITH LOG;

		RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	
	END CATCH

	/* ===================================================================================================================== */

	SET NOCOUNT OFF;
END;










GO
/****** Object:  StoredProcedure [Reports].[rpt_Get_Subscriptions]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Reports].[rpt_Get_Subscriptions]
(@propertyid	INT = NULL
,@userguid	UNIQUEIDENTIFIER	= NULL			--is the Creator id value (uniqueidentifier) (This is who the subscription belongs to)
,@seeallsubsflag	INT = NULL)
AS 
/*--######################################################################################
* Name:	[Reports].[rpt_Get_Subscriptions]
*-------------------------------------------------------------------------------------------------
* Desc:  Get Dashboard subscription information for the propertyid and userguid information given as inputs
*-------------------------------------------------------------------------------------------------
* Notes: THIS IS A CLIENT PORTAL DASHBOARD PROC. BEFORE MAKING CHANGES IN PRODUCTION, THEY MUST BE
* VETTED AND TESTED IN THE DEV & QA DATABASES FIRST.
*-------------------------------------------------------------------------------------------------
* Test:	EXEC Reports.rpt_Get_Subscriptions 24998,'1A0D6CD1-1C7B-4588-A45A-85EF9654285C',NULL
*		EXEC Reports.rpt_Get_Subscriptions 0,'50C3414F-F006-6948-A536-2AA350B7FCAD',1
*		EXEC Reports.rpt_Get_Subscriptions 24998,'0C5AABFC-C6CB-493C-82D5-4A08AABE41CA',1
*-------------------------------------------------------------------------------------------------
* Hist:	01	02/11/2015	Bob Langley		Ticket 18155 - Initial Version 
* Hist: 02	06/02/2015	Bob Langley		Ticket 19612 - Changed to add the new AdvancedReportType column
* Hist: 03	06/24/2015	Bob Langley		Ticket 19743, Story 96653792 - For release 1.6, changed to add the new column AdvancedMethod for sending by either email or FTP (was just FTP).
--#######################################################################################*/

BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
    SET NOCOUNT ON;

	DECLARE
		@ErrorMessage					NVARCHAR(4000),
		@ErrorNumber					INT,
		@ErrorSeverity					INT,
		@ErrorState						INT,
		@ErrorLine						INT,
		@ErrorProcedure					NVARCHAR(200)



	DECLARE @userid int

	SET @seeallsubsflag = ISNULL(@seeallsubsflag,0)				--default to "NO" if flag is null

	/* Testing 
	DECLARE @salesforcecommunityid	varchar(18)
	SET @salesforcecommunityid = 'a0YE0000000DeacMAC'
	*/
	BEGIN TRY
		DROP TABLE #tmpsubscriptions
	END TRY
	BEGIN CATCH
	END CATCH


	CREATE TABLE #tmpsubscriptions
	(SubscriptionID	int
	)

	/* ===================================================================================================================== */
	--Main Section
	BEGIN TRY



		if @propertyid = 0
			BEGIN
				--Get his properties
				INSERT INTO #tmpsubscriptions
				SELECT SubscriptionID
				FROM dbo.DashboardSubscriptions WITH (NOLOCK)
				WHERE PropertyID = 0 AND Creator = @userguid			--want All Properties, and want all his properties

				--Get others' properties
				INSERT INTO #tmpsubscriptions
				SELECT SubscriptionID
				FROM dbo.DashboardSubscriptions WITH (NOLOCK)
				WHERE (PropertyID = 0 AND @seeallsubsflag = 1 AND Creator <> @userguid)			-- want All Properties and see everyone else's
			END
		ELSE		-- <> 0
			BEGIN
				INSERT INTO #tmpsubscriptions
				SELECT SubscriptionID
				FROM dbo.DashboardSubscriptions WITH (NOLOCK)
				WHERE PropertyID = @propertyid
			END


		--Final Result Set
		SELECT s.SubscriptionID
		, s.[Description]
		, s.PropertyID
		, s.Report
		, s.AdvancedReportType
		, s.AdvancedMethod
		, s.[TO]
		, s.Frequency
		, s.Creator
		, u.Email AS CreatorEmail
		, s.[Server]
		, s.Port
		, s.[Login]
		, s.[Password]
		, s.DisplayColumns
		FROM dbo.DashboardSubscriptions s WITH (NOLOCK)
		LEFT OUTER JOIN Dimension.vw_DSUM_User u WITH (NOLOCK)
			ON u.UserGUID = s.Creator
		WHERE s.SubscriptionID IN (SELECT DISTINCT SubscriptionID FROM #tmpsubscriptions)
		ORDER BY s.SubscriptionID

	
				
	END TRY
	BEGIN CATCH
		SELECT 
			@ErrorMessage		= ERROR_MESSAGE(),
			@ErrorNumber		= ERROR_NUMBER(),
			@ErrorSeverity		= ERROR_SEVERITY(),
			@ErrorState			= ERROR_STATE(),
			@ErrorLine			= ERROR_LINE(),
			@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');
		
		SET @ErrorMessage = 'Attempting to retrieve Subscription information. In SPROC [Reports].[rpt_Get_Subscriptions].  Error - ' + @ErrorMessage


		RAISERROR(@ErrorMessage,16,1) WITH LOG;

		RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	
	END CATCH

	/* ===================================================================================================================== */

	SET NOCOUNT OFF;
END;





GO
/****** Object:  StoredProcedure [Reports].[rpt_GetAvgRentsViewList]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Reports].[rpt_GetAvgRentsViewList]
	(
	@State VARCHAR(2)
	,@ViewBy INT
	)
/*************************************************************************************************
*
* Name:	Reports.rpt_GetAvgRentsViewList
*
* Desc:	This provides the drop down for the Average Rents report on MyAG
*
* Test:	EXEC Reports.rpt_GetAvgRentsViewList 'GA', 2
*
* Note:    ViewBy Parameter: 0 = CBSA, 1 = City, 2 = Zip 
*
* Hist:	01	01/14/2013		Sarah Mims			Initial Version. Ticket # 13906.
*		02	01/22/2015		Sarah Mims			No ticket - RentPath leads project.
**************************************************************************************************/
AS

SET NOCOUNT ON

SELECT d.ViewType
	  ,d.ViewTypeName
FROM
	(
	SELECT DISTINCT CASE WHEN @ViewBy = 0 THEN zc.CBSACode
						 WHEN @ViewBy = 1 THEN ar.PropertyCity
						 WHEN @ViewBy = 2 THEN ar.ZipCode
						 END											AS ViewType
		,CASE WHEN @ViewBy = 0 THEN zc.CBSAName
				WHEN @ViewBy = 1 THEN ar.PropertyCity
				WHEN @ViewBy = 2 THEN ar.ZipCode
				END														AS ViewTypeName
	FROM ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS ar
	LEFT OUTER JOIN DBAUtility.dbo.ZipCBSA AS zc
		ON ar.ZipCode = zc.ZipCode
	WHERE ar.PropertyState = @State 
	) AS d
	
WHERE ISNULL(d.ViewType,'00000') <> '00000'
	AND d.ViewType <> ''

ORDER BY ViewTypeName

SET NOCOUNT OFF







GO
/****** Object:  StoredProcedure [Reports].[rpt_GetPropertyName]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



















CREATE PROCEDURE [Reports].[rpt_GetPropertyName] (
   @PropertyID INT)

/*************************************************************************************************
* Name:	Reports.rpt_GetPropertyName
*-------------------------------------------------------------------------------------------------
* Desc:	Takes a property ID and returns the corresponding property name
*-------------------------------------------------------------------------------------------------
* Test:	EXEC Reports.rpt_GetPropertyName 1036
*		EXEC Reports.rpt_GetPropertyName 288
*-------------------------------------------------------------------------------------------------
* Notes: THIS IS A CLIENT PORTAL DASHBOARD PROC. BEFORE MAKING CHANGES IN PRODUCTION, THEY MUST BE
* VETTED AND TESTED IN THE DEV & QA DATABASES FIRST.
*-------------------------------------------------------------------------------------------------
* Hist:	01	02/02/2015		David McFarland			Initial Version
* Hist:	02	02/03/2015		Colleen Rocks			Ticket 17937; adjusted to input AG or Rent PID
* Hist: 03	05/22/2015		Bob Langley				changed to only do AGPropertyID
* Hist: 04	08/14/2015		Shetal Gandhi			Ticket 20421 - Modified to use the New Rentpath tables instead of the AG Combined views
* Hist: 05	01/14/2016		Kimberley Morrow		Ticket 21860 - Returning ProjectID for AxioMetric
* Hist: 06	05/17/2016		Colleen Rocks			Ticket 22366; replace join to community__c table to use account table instead
* Hist: 07	05/18/2016		Kimberley Morrow		Ticket 23085;  Add Axio Market ID
**************************************************************************************************/

AS 
SET NOCOUNT ON;

SELECT 
	DISTINCT l.PropertyName
	,a.Axio_Project_ID__c AS ProjectID
	,a.Axio_Market_ID__c AS MarketID
FROM
	Rentpath.Dimension.Listings AS l
INNER JOIN 
	SalesForce.dimension.SALESFORCE_XREF AS sx
	ON l.PropertyIDAG = sx.AGPropertyID
INNER JOIN 
	SalesForce.dbo.Account AS a
    ON sx.SalesforceAccountID = a.ID
WHERE
	@PropertyID = l.PropertyIDAG

SET NOCOUNT OFF;

/*******************************************************************************************************************************/
/*******************************************************************************************************************************/
/*******************************************************************************************************************************/
/*******************************************************************************************************************************/

/****** Object:  StoredProcedure [Reports].[rpt_PortalLeads]    Script Date: 9/9/2015 2:48:32 PM ******/
SET ANSI_NULLS ON















GO
/****** Object:  StoredProcedure [Reports].[rpt_LeadDetails]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Reports].[rpt_LeadDetails] (
    @StartDate DATETIME = NULL
   ,@EndDate DATETIME = NULL
   ,@GroupLevel INT = NULL
   ,@State VARCHAR(3) = NULL
   ,@GroupID INT = NULL)

/*******************************************************************************************
* Name:	Reports.rpt_LeadDetails
* ------------------------------------------------------------------------------------------
* Desc:	New version of Mgmt Lead Details for Save Desk; can be broken down by mgmt or property
* ------------------------------------------------------------------------------------------
* Test:	EXEC Reports.rpt_LeadDetails '01/01/2015','05/01/2015',1,NULL,6008
        EXEC Reports.rpt_LeadDetails NULL,NULL,0,'CT',189799
* ------------------------------------------------------------------------------------------
* Notes: @GroupLevel 0 = Property; 1 = Mgmt Company; @GroupID is ListingID or MgtCoID
* ------------------------------------------------------------------------------------------
* Hist:	01	05/12/2015	Colleen Rocks        Ticket 19291; initial version
********************************************************************************************/
AS
BEGIN
    SET NOCOUNT ON;
	
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    DECLARE @TrackDate DATETIME
       ,@LengthInSeconds INT
       ,@DatabaseName VARCHAR(128)
                
    SET @TrackDate = GETDATE()
    SET @LengthInSeconds = 0
    SET @DatabaseName = DB_NAME()        
		
    EXEC DBAUtility.dbo.pr_Logging_StoredProcsNoTemp 
        @DatabaseName = @DatabaseName
       , -- varchar(128)
        @ProcName = 'Reports.rpt_LeadDetails'
       , -- varchar(128)
        @StepName = 'Execute Procedure'
       , -- varchar(128)
        @VariableStates = ''
       , -- varchar(500)
        @LengthInSeconds = @LengthInSeconds
       , -- int
        @Comments = 'Execute Procedure'; -- varchar(500)

/*test
DECLARE @StartDate DATETIME = '04/01/2015'
   ,@EndDate DATETIME = '05/05/2015'
   ,@GroupLevel INT = 0
   ,@State VARHCAR(2) = 'NY'
   ,@GroupID INT = 25745*/

----------------------------------
--Declare and set variables
----------------------------------
    DECLARE @StartYMDID INT
       ,@EndYMDID INT

    SET @StartDate = ISNULL(@StartDate,DATEADD(YEAR,-1,GETDATE()))
    SET @EndDate = ISNULL(@EndDate,GETDATE() - 1)

    SET @StartYMDID = CAST(CONVERT(VARCHAR(10),@StartDate,112) AS INT)
    SET @EndYMDID = CAST(CONVERT(VARCHAR(10),@EndDate,112) AS INT)

----------------------------------
--Drop temp tables
----------------------------------
    IF OBJECT_ID('tempdb..#AllLeads') IS NOT NULL
        BEGIN    
            DROP TABLE #AllLeads
        END

----------------------------------
--Get phone call leads
----------------------------------
    SELECT  @GroupID AS GroupID
           ,dl.ListingID
           ,dl.PropertyName
           ,dl.MgtCoName
           ,'Phone' AS LeadType
           ,CONCAT('https://audio.rentpath.com/audioplayer/mp3player.aspx?id=',cag.CallID) AS CallID
           ,cag.CallEndDateTime AS LeadDayTime
           ,CONVERT(VARCHAR,cag.CallEndDateTime,101) + ' ' + RIGHT(CONVERT(VARCHAR,cag.CallEndDateTime,100),7) AS LeadDate
           ,CASE WHEN ph.FirstName IS NULL
                      AND ph.LastName IS NULL THEN cag.CallerName
                 ELSE ISNULL(ph.FirstName,'') + ' ' + ISNULL(ph.LastName,'')
            END AS Name
           ,'' AS EmailAddress
           ,'' AS Comments
           ,cag.CallerPhoneNumber AS PhoneNumber
           ,cag.DurationInSeconds AS CallDuration
    INTO    #AllLeads
    FROM    ApartmentGuide.Fact.AGRentPhoneLeads AS cag
    JOIN    ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
            ON cag.ListingID = dl.ListingID
               AND cag.Website = dl.Website
    LEFT OUTER JOIN ApartmentGuide.Dimension.PhoneLookup AS ph
            ON cag.CallerPhoneNumber = ph.PhoneNumber
    WHERE   cag.YMDID BETWEEN @StartYMDID AND @EndYMDID
            AND cag.CallType <> 'CRAIGSLIST'
            AND dl.PropertyState = CASE WHEN @GroupLevel = 0 THEN @State
                                        ELSE dl.PropertyState
                                   END
            AND dl.ListingID = CASE WHEN @GroupLevel = 0 THEN @GroupID
                                    ELSE dl.ListingID
                               END
            AND ISNULL(dl.MgtCoID,9999) = CASE WHEN @GroupLevel = 1 THEN @GroupID
                                               ELSE ISNULL(dl.MgtCoID,9999)
                                          END 
-----------------
    UNION 
-----------------
----------------------------------
--Get email leads
----------------------------------
    SELECT  @GroupID AS GroupID
           ,dl.ListingID
           ,dl.PropertyName
           ,dl.MgtCoName
           ,'Email' AS LeadType
           ,'' AS CallID
           ,el.WhenEntered AS LeadDayTime
           ,CONVERT(VARCHAR,el.WhenEntered,101) + ' ' + RIGHT(CONVERT(VARCHAR,el.WhenEntered,100),7) AS LeadDate
           ,CONCAT(el.FirstName,' ',el.LastName) AS Name
           ,el.Email AS EmailAddress
           ,el.Comments
           ,ISNULL(COALESCE(el.DayPhone,el.NightPhone),0) AS PhoneNumber
           ,0 AS CallDuration
    FROM    ApartmentGuide.Fact.AGRentWebFormLeads AS el
    JOIN    ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
            ON el.ListingID = dl.ListingID
               AND el.Website = dl.Website
    WHERE   el.YMDID BETWEEN @StartYMDID AND @EndYMDID
            AND el.Status = 1
            AND dl.PropertyState = CASE WHEN @GroupLevel = 0 THEN @State
                                        ELSE dl.PropertyState
                                   END
            AND dl.ListingID = CASE WHEN @GroupLevel = 0 THEN @GroupID
                                    ELSE dl.ListingID
                               END
            AND ISNULL(dl.MgtCoID,9999) = CASE WHEN @GroupLevel = 1 THEN @GroupID
                                               ELSE ISNULL(dl.MgtCoID,9999)
                                          END 

----------------------------------
--Get final result set
----------------------------------
    SELECT  al.GroupID
           ,al.ListingID
           ,al.PropertyName
           ,al.MgtCoName
           ,al.LeadType
           ,al.CallID
           ,al.LeadDate
           ,al.Name
           ,al.EmailAddress
           ,al.Comments
           ,al.PhoneNumber
           ,al.CallDuration
    FROM    #AllLeads AS al
    ORDER BY al.PropertyName
           ,al.LeadDayTime 

    SET NOCOUNT OFF;
END 















GO
/****** Object:  StoredProcedure [Reports].[rpt_LeadDetails_ReportTypeDropdown]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Reports].[rpt_LeadDetails_ReportTypeDropdown] (
       @GroupLevel	INT
	   ,@State VARCHAR(2) = NULL)

/*******************************************************************************************
* Name:	Reports.rpt_LeadDetails_ReportTypeDropdown
* ------------------------------------------------------------------------------------------
* Desc:	This dropdown is used in the Lead Details report to populate the GroupID, which is 
* either a list of properties (if @GroupLevel = 0) or mgt companies (if @GroupLevel = 1)
* ------------------------------------------------------------------------------------------
* Test:	EXEC Reports.rpt_LeadDetails_ReportTypeDropdown 0,'GA'
        EXEC Reports.rpt_LeadDetails_ReportTypeDropdown 1
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist:	01	05/12/2015	Colleen Rocks        Ticket 19291; initial version
********************************************************************************************/
AS 
BEGIN
	SET NOCOUNT ON;

IF @GroupLevel = 0

BEGIN

SELECT x.ListingID AS ID
	,CASE WHEN x.AGStatus = 0 AND x.RentStatus = 0 THEN CONCAT(x.PropertyName,' LID: ',x.listingID,'*')
		ELSE CONCAT(x.PropertyName,' LID: ',x.listingID) END AS Name
FROM (
		SELECT l.ListingID
			,l.PropertyName
			,MAX(CASE WHEN l.Website = 'AG' THEN l.StatusID ELSE 0 END) AS AGStatus
			,MAX(CASE WHEN l.Website = 'Rent' THEN l.StatusID ELSE 0 END) AS RentStatus
		FROM ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS l
		WHERE l.PropertyState = @State
		GROUP BY l.ListingID
			,l.PropertyName
	) AS x

END
ELSE

SELECT DISTINCT mc.MgtCoID AS ID, CONCAT(mc.MgtCoName,'-',mc.MgtCoID) AS Name
FROM ApartmentGuide.Dimension.MgtCompanies AS mc
WHERE mc.IsActive = 1
ORDER BY Name

	SET NOCOUNT OFF;
END 









GO
/****** Object:  StoredProcedure [Reports].[rpt_LowLeadsOtherInfo]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Reports].[rpt_LowLeadsOtherInfo] (
    @ListingID INT
   ,@Detail INT)
/*************************************************************************************************
*
* Name:	Reports.rpt_LowLeadsOtherInfo
*
* Desc:	This provides all general information regarding each listing for the past 13 months
*
* Test:	EXEC Reports.rpt_LowLeadsOtherInfo 24246 ,2
*		EXEC Reports.rpt_LowLeadsOtherInfo 24246, 3
*
* @Detail =  1: RecommendedListings 
*			 2: Reviews
*			 3: Summary Info 
*
* Hist:	01	10/21/2015		Shetal Gandhi		Initial Version. Ticket #21125.
* Hist: 02	01/11/2015		Colleen Rocks		Ticket #21797; moved creation of CR3 table and Oracle pull to If @Detail = 2 section
*												so that sproc only pulls from Oracle if CR3 selected
* Hist: 03	04/22/2016		Clinton Woody		Ticket #22366;  replaced community__c with view
* Hist: 04	08/01/2016		Colleen Rocks		Ticket 23452; replaced salesforcecommunityid with salesforceaccountid
**************************************************************************************************/
AS
SET NOCOUNT ON;
-- Dates selection
DECLARE @MonthStartDate DATE
   ,@cmd NVARCHAR(4000);


SELECT  @MonthStartDate = MonthStartDate
FROM    (
         SELECT DISTINCT
                MonthStartDate
         FROM   DBAUtility.Dimension.Dates
         WHERE  Date = CONVERT(VARCHAR(25),DATEADD(dd,-(DAY(DATEADD(mm,1,GETDATE())) - 1),DATEADD(mm,-13,GETDATE())),101)
        ) AS d;

BEGIN TRY
    DROP TABLE #TempRatings
END TRY
BEGIN CATCH 
END CATCH;

BEGIN TRY
    DROP TABLE #TempRecommended
END TRY
BEGIN CATCH 
END CATCH;


IF @Detail = 1
    BEGIN


;
        WITH    Combined
                  AS (
                      SELECT    dl.ListingID
                               ,rl.RecommendedListings
                               ,rl.NearbyListings
                      FROM      RentPath.Dimension.Listings AS dl
                      LEFT JOIN DataMining.Mart.AG_RecommendedListings_NearbyListings rl WITH (NOLOCK)
                                ON dl.ListingID = rl.ListingID
                      WHERE     dl.ListingID = @ListingID --23043 -- 24246
                     ),
                XRef
                  AS (
                      SELECT    sx.SalesforceAccountID
                               ,l.ListingID
                               ,PropertyIDAG
                      FROM      SalesForce.[dimension].[SALESFORCE_XREF] sx WITH (NOLOCK)
                      JOIN      RentPath.Dimension.Listings l WITH (NOLOCK)
                                ON sx.AGPROPERTYID = l.PropertyIDAG
                     )
            SELECT DISTINCT
                    ListingID AS ListingID
                   ,cc.ClientName AS Name
            INTO    #TempRecommended
            FROM    (
                     SELECT *
                     FROM   (
                             SELECT DISTINCT
                                    ISNULL(xref0.SalesforceAccountID,0) AS CommunityID
                                   ,ISNULL(xref1.SalesforceAccountID,0) AS LeadRelatedCommunityID
                                   ,ISNULL(xref2.SalesforceAccountID,0) AS NearbyCommunityID
                             FROM   Combined c
                             CROSS APPLY [DBAUtility].[dbo].[fn_Split_With_RowNum](ISNULL(c.RecommendedListings,0) + '^0','^') sv
                             FULL OUTER JOIN (
                                              SELECT    *
                                              FROM      Combined c2
                                              CROSS APPLY [DBAUtility].[dbo].[fn_Split_With_RowNum](c2.NearbyListings + '^0','^') sv2
                                             ) coj
                                    ON c.ListingID = coj.ListingID
                                       AND sv.RowNumber = coj.RowNumber
                             LEFT JOIN XRef xref0
                                    ON xref0.ListingID = ISNULL(c.ListingID,coj.ListingID)
                             LEFT JOIN XRef xref1
                                    ON xref1.ListingID = sv.Measure
                             LEFT JOIN XRef xref2
                                    ON xref2.ListingID = coj.Measure
                            ) AS a
                     JOIN   SalesForce.dimension.SALESFORCE_XREF AS sx
                            ON sx.SalesforceAccountID = a.[CommunityID]
                     JOIN   RentPath.Dimension.Listings AS dl
                            ON dl.PropertyIDAG = sx.AGPROPERTYID
                    ) AS a
            LEFT JOIN SalesForce.dbo.VW_SalesForceCommunity AS cc  --Community__c AS cc
			ON cc.PropAccountID = a.LeadRelatedCommunityID;
                    --ON cc.CommunityID18__c = a.LeadRelatedCommunityID;

        SELECT  *
        FROM    (
                 SELECT tr.ListingID
                       ,CASE WHEN Test > 1 THEN tr.Name
                             ELSE 'N/A'
                        END AS Name
                 FROM   #TempRecommended AS tr
                 LEFT JOIN (
                            SELECT  ListingID
                                   ,COUNT(ISNULL(Name,1)) AS Test --CASE WHEN 
                            FROM    #TempRecommended
                            GROUP BY ListingID
                            HAVING  COUNT(*) > 1
                           ) AS a
                        ON tr.ListingID = a.ListingID
                ) AS b
        WHERE   Name IS NOT NULL;

    END

IF @Detail = 2 -- Reviews
    BEGIN

        CREATE TABLE #TempRatings (
            SubmissionDate DATE
           ,ListingID INT
           ,ReviewText VARCHAR(MAX)
           ,ReviewID INT
           ,AVGRating FLOAT);

        SELECT  @cmd = N'
						SELECT *
						FROM OPENQUERY (ORACLEAPTG,''
						select ur.SubmissionDate, pl.listingid , ur.ReviewText, ur.ReviewID, v.overallrating
						from rating.user_reviews  ur
						join properties.proplistings  pl
						     on ur.propertyid = pl.PropertyID
						LEFT JOIN rating.review_info_view v 
														  on ur.REVIEWID=v.reviewid 
														  and ur.PROPERTYID=v.propertyid 
														  and (v.publishtoag=1 or v.publishtorent=1)
						where pl.listingid = ' + CAST(@ListingID AS VARCHAR) + '   
						and reviewtext is not null
						and (v.publishtoag is not null or v.publishtorent is not null)
						'') OPI
							'

--and ur.submissiondate >= ''''' + CAST(CAST(@MonthStartDate AS DATE) AS VARCHAR(15)) + ''''' 
        INSERT  INTO #TempRatings
                (SubmissionDate
                ,ListingID
                ,ReviewText
                ,ReviewID
                ,AVGRating)
                EXEC sp_executesql
                    @cmd;


        SELECT  SubmissionDate
               ,ListingID
               ,ReviewText
               ,ReviewID
               ,AVGRating
        FROM    #TempRatings AS tr;

    END

IF @Detail = 3
    BEGIN
        SELECT  dl.ListingID
               ,dl.PropertyName
               ,dl.CBSAName
               ,dl.MgtCoNameAG
               ,BillingIDAG AS ClientIDAG
               ,dl.PropertyCity
               ,dl.PropertyState
               ,dl.PropertyZipCode
               ,CAST(ActiveAmenities AS VARCHAR) + ' out of ' + CAST(TotalAmenities AS VARCHAR) AS NumberOfActiveAmenities
               ,CASE WHEN ExternalID IS NOT NULL
                          AND ListingPricingSource IS NOT NULL THEN 'YES (' + ListingPricingSource + ')'
                     ELSE 'NO'
                END AS OnDatafeed
--INTO #TempProperties
        FROM    RentPath.Dimension.Listings AS dl
        WHERE   ListingID = @ListingID --'19191';



    END
SET NOCOUNT OFF;






GO
/****** Object:  StoredProcedure [Reports].[rpt_LowLeadsReport]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Reports].[rpt_LowLeadsReport] (@ListingID INT) --, @IsSummary INT)
/*************************************************************************************************
*
* Name:	Reports.rpt_LowLeadsReport
*
* Desc:	This provides all general information regarding each listing for the past 13 months
*
* Test:	EXEC Reports.rpt_LowLeadsReport 26407
*
* Hist:	01	10/20/2015		Shetal Gandhi		Initial Version. Ticket #21125.
* Hist: 02	12/03/2015		Shetal Gandhi		Ticket #21562 - Modified to set else values to 0 instead of Nulls in the #TempItems Population
* Hist: 03	12/22/2015		Don Wert			Ticket 21717.  In the fourth query, an insert to temp table #TempMaxData, there is a join from a date column in 
												a temp table to a YMDID column in a MAX table.  This resulted in an arithmetic overflow.  Changed to use
												a YMDID column in the temp table.
* Hist: 04	01/12/2016		Colleen Rocks		Ticket 21808; reformatted code and add with no lock due to some lag times in data retrieval
* Hist: 05	01/13/2016		Colleen Rocks		Ticket 21808; added time logging to each section
* Hist: 06	10/29/2016		Bob Langley			Ticket 24212 - Changed to add MissedCalls to leads (where does connectedcalls)
**************************************************************************************************/
AS
SET NOCOUNT ON

/*test
DECLARE @ListingID INT
SET @ListingID = 185233
*/

------------------------------------------
/*Throughout the procedure, we log when completed 
successfully so if a failure occurs, we know at what point*/ 
------------------------------------------
--INSERT  INTO Staging.PropAnalysisLog
--        (ListingID,StepNum,Step,EndTime)
--VALUES  (@ListingID
--		,1
--        ,'Reports.rpt_LowLeadsReport started'  -- Step - varchar(1000)
--        ,GETDATE());

-------------------------------
/*Drop temp tables*/
-------------------------------
BEGIN TRY
    DROP TABLE #TempProperties
END TRY
BEGIN CATCH 
END CATCH;

BEGIN TRY
    DROP TABLE #TempDates
END TRY
BEGIN CATCH 
END CATCH;

BEGIN TRY
    DROP TABLE #TempMaxData
END TRY
BEGIN CATCH 
END CATCH;

BEGIN TRY
    DROP TABLE #TempEndOfMonthMartListingsData
END TRY
BEGIN CATCH 
END CATCH;

BEGIN TRY
    DROP TABLE #TempMartListingsData
END TRY
BEGIN CATCH 
END CATCH;

BEGIN TRY
    DROP TABLE #TempItems
END TRY
BEGIN CATCH 
END CATCH;

BEGIN TRY
    DROP TABLE #TempCalls
END TRY
BEGIN CATCH 
END CATCH;

BEGIN TRY
    DROP TABLE #TempPlacement
END TRY
BEGIN CATCH 
END CATCH;


BEGIN TRY
    DROP TABLE #MaxLeaseItems
END TRY
BEGIN CATCH 
END CATCH;

BEGIN TRY
    DROP TABLE #ByCBSA
END TRY
BEGIN CATCH 
END CATCH;

--INSERT  INTO Staging.PropAnalysisLog
--        (ListingID,StepNum,Step,EndTime)
--VALUES  (@ListingID
--		,2
--        ,'Temp tables dropped'  -- Step - varchar(1000)
--        ,GETDATE());

-------------------------------
/*Get dim.listings data for property*/
-------------------------------
SELECT  dl.ListingID
       ,dl.PropertyIDAG
       ,dl.PropertyIDRent
       ,dl.StatusIDAG
       ,dl.StatusIDRent
       ,dl.PropertyName
       ,dl.CBSACode
       ,dl.CBSAName
       ,dl.MarketCD
       ,dl.MarketName
       ,dl.MgtCoIDAG
       ,dl.MgtCoNameAG
       ,dl.MgtCoIDRent
       ,dl.MgtCoNameRent
       ,BillingIDAG AS ClientIDAG
       ,BillingIDRent AS ClientIDRent
       ,dl.PropertyCity
       ,dl.PropertyState
       ,dl.PropertyZipCode
       ,CAST(ActiveAmenities AS VARCHAR) + ' out of ' + CAST(TotalAmenities AS VARCHAR) AS NumberOfActiveAmenities
       ,CASE WHEN ExternalID IS NOT NULL
                  AND ListingPricingSource IS NOT NULL THEN 'YES (' + ListingPricingSource + ')'
             ELSE 'NO'
        END AS OnDatafeed
INTO    #TempProperties
FROM    RentPath.Dimension.Listings AS dl WITH (NOLOCK)
WHERE   ListingID = @ListingID; --'19191'

--INSERT  INTO Staging.PropAnalysisLog
--        (ListingID,StepNum,Step,EndTime)
--VALUES  (@ListingID
--		,3
--        ,'#TempProperties populated'  -- Step - varchar(1000)
--        ,GETDATE());

-------------------------------
/*Get last 13 months' date range*/
-------------------------------
SELECT  YearMonth
       ,MonthStartYMDID
       ,CASE WHEN LEFT(MonthEndYMDID,6) = CAST(CONVERT(VARCHAR(6),GETDATE(),112) AS INT) THEN CAST(CONVERT(VARCHAR(8),DATEADD(dd,-1,GETDATE()),112) AS INT)
             ELSE MonthEndYMDID
        END AS MonthEndYMDID
       ,MonthStartDate
       ,'Month ' + CAST(ROW_NUMBER() OVER (ORDER BY YearMonth ASC) AS VARCHAR(10)) AS Months
       ,REPLACE(RIGHT(CONVERT(VARCHAR(11),MonthStartDate,106),8),' ','-') AS MonthName
INTO    #TempDates
FROM    (
         SELECT DISTINCT
                YearMonth
               ,MonthStartYMDID
               ,MonthEndYMDID
               ,MonthStartDate--, MAX(CASE WHEN dayOfMonth = 5 THEN YMDID ELSE NULL END) AS FifthOfMonth
         FROM   DBAUtility.Dimension.Dates WITH (NOLOCK)
         WHERE  Date BETWEEN CONVERT(VARCHAR(25),DATEADD(dd,-(DAY(DATEADD(mm,1,GETDATE())) - 1),DATEADD(mm,-13,GETDATE())),101)
                     AND     CONVERT(VARCHAR(25),GETDATE(),101)
         GROUP BY YearMonth
               ,MonthStartYMDID
               ,MonthEndYMDID
               ,MonthStartDate
        ) AS d;

--INSERT  INTO Staging.PropAnalysisLog
--        (ListingID,StepNum,Step,EndTime)
--VALUES  (@ListingID
--		,4
--        ,'#TempDates populated'  -- Step - varchar(1000)
--        ,GETDATE());

-------------------------------
/*Get list of currently active MAXLeases clients*/
-------------------------------
SELECT DISTINCT
        i.ItemBusinessKey AS MaxLeaseItem
INTO    #MaxLeaseItems
FROM    Revenue.Fact.Revenue AS r WITH (NOLOCK)
JOIN    Revenue.Conformed.Publication AS p WITH (NOLOCK)
        ON r.Invoice_PublicationKey = p.PublicationKey
JOIN    Revenue.Conformed.Item AS i WITH (NOLOCK)
        ON r.ItemKey = i.ItemKey
WHERE   p.PublicationBusinessKey = '191GUIDE';

--INSERT  INTO Staging.PropAnalysisLog
--        (ListingID,StepNum,Step,EndTime)
--VALUES  (@ListingID
--		,5
--        ,'#MaxLeaseItems populated'  -- Step - varchar(1000)
--        ,GETDATE());

-------------------------------
/*Get invoice data for property*/
-------------------------------
SELECT  LEFT(IssueBeginYMDID,6) AS YearMonth
       ,d.Months
       ,p.ListingID
       ,SUM(InvoiceTotal) AS CurrentMonthlyInvoice
       ,CASE WHEN m.ClientID IS NOT NULL THEN 'Yes'
             ELSE 'No'
        END AS MaxLease
INTO    #TempMaxData
FROM    MAX.Mart.MaxInvoice AS mi WITH (NOLOCK)
JOIN    #TempProperties AS p
        ON p.ClientIDAG = mi.ClientID
JOIN    #TempDates AS d
        ON d.MonthStartDate = CAST(CAST(mi.[IssueBeginYMDID] AS VARCHAR) AS DATE)
LEFT JOIN (
           SELECT   LEFT(mili.IssueBeginYMDID,6) AS YearMonth
                   ,mi2.ItemID
                   ,mili.ClientID
           FROM     MAX.Mart.MaxInvoice_LineItems AS mili WITH (NOLOCK)
           JOIN     MAX.Mart.MaxItem AS mi2 WITH (NOLOCK)
                    ON mi2.ItemID = mili.ItemId
           JOIN     #TempProperties AS p
                    ON p.ClientIDAG = mili.ClientID
           JOIN     #TempDates AS d
                    ON d.MonthStartYMDID = mili.IssueBeginYMDID
                       AND mi2.ItemID IN (SELECT    MaxLeaseItem
                                          FROM      #MaxLeaseItems)    -- Max Leases
          ) AS m
        ON m.YearMonth = LEFT(IssueBeginYMDID,6)
WHERE   mi.InvoiceStatusID = 'FINALIZED'
GROUP BY p.ListingID
       ,d.Months
       ,CASE WHEN m.ClientID IS NOT NULL THEN 'Yes'
             ELSE 'No'
        END
       ,LEFT(IssueBeginYMDID,6); 
--ORDER BY  LEFT(IssueBeginYMDID,6), p.ListingID 

--INSERT  INTO Staging.PropAnalysisLog
--        (ListingID,StepNum,Step,EndTime)
--VALUES  (@ListingID
--		,6
--        ,'#TempMaxData populated'  -- Step - varchar(1000)
--        ,GETDATE());

-------------------------------
/*Get Mart Listings Info, PackageType, 
CR3, Coupon on the last day of the month*/
-------------------------------
SELECT  ml.ListingID
       ,ml.YearMonth
       ,d.Months
       ,ml.PlacementTierAG
       ,CASE WHEN ml.PlacementTierAG = 5 THEN 'Diamond'
             WHEN ml.PlacementTierAG = 10 THEN 'Platinum'
             WHEN ml.PlacementTierAG = 20 THEN 'Gold'
             WHEN ml.PlacementTierAG = 30 THEN 'Silver'
             ELSE NULL
        END AS AGTier
       ,CASE WHEN ml.PlacementTierRent = 5 THEN 'Diamond'
             WHEN ml.PlacementTierRent = 10 THEN 'Platinum'
             WHEN ml.PlacementTierRent = 20 THEN 'Gold'
             WHEN ml.PlacementTierRent = 30 THEN 'Silver'
             ELSE NULL
        END AS RentTier
       ,CASE WHEN ml.HasCR3 = 1 THEN 'Yes'
             ELSE 'No'
        END AS CR3
       ,CASE WHEN ml.UpsellCoupon = 1 THEN 'Yes'
             ELSE 'No'
        END AS Coupon
       ,PrintProductPoints + InternetProductPoints + LegacyLoyaltyPoints + ContractLoyaltyPoints AS Points
INTO    #TempEndOfMonthMartListingsData
FROM    RentPath.Mart.Listings AS ml WITH (NOLOCK)
JOIN    #TempProperties AS p
        ON ml.ListingID = p.ListingID
JOIN    #TempDates AS d
        ON d.MonthEndYMDID = ml.YMDID;                                                
--ORDER BY ml.YearMonth

--INSERT  INTO Staging.PropAnalysisLog
--        (ListingID,StepNum,Step,EndTime)
--VALUES  (@ListingID
--        ,7
--		,'#TempEndOfMonthMartListingsData populated'  -- Step - varchar(1000)
--        ,GETDATE());

-------------------------------
/*Get Mart Listings Info, Leads, Rental Rates*/
-------------------------------
SELECT  a.ListingID
       ,d.YearMonth
       ,d.Months
       ,a.Leads
       ,a.PropertyRentalRate
       ,b.AVGRentalPerZipCode
       ,a.WebsiteClicks
       ,a.MapClicks
       ,a.PhoneLeadsAG
       ,a.PhoneLeadsRent
       ,a.EmailLeadsAG
       ,a.EmailLeadsRent
       ,a.ActivePhotos
       ,a.PropertyDetailPageViews
INTO    #TempMartListingsData
FROM    #TempDates AS d
LEFT JOIN (
           SELECT   ml.ListingID
                   ,ml.YearMonth
                   ,d.Months
                   ,SUM(AllLeads) AS Leads
                   ,SUM([PhoneLeadsAG]) + SUM([MissedCallsAG]) AS PhoneLeadsAG			--Ticket 24212  added missed calls to connected
                   ,SUM([PhoneLeadsRent])  + SUM([MissedCallsRent]) AS PhoneLeadsRent			--Ticket 24212  added missed calls to connected
                   ,SUM([EmailLeadsAG]) AS EmailLeadsAG
                   ,SUM([EmailLeadsRent]) AS EmailLeadsRent
                   ,MAX(LowPrice) AS PropertyRentalRate
                   ,AVG([ActivePhotos]) AS ActivePhotos
                   ,SUM(ml.ViewsListingPageWeb + ml.ViewsListingPageMobile) AS PropertyDetailPageViews
                   ,SUM(ml.[ClicksWebURLAG] + ml.[ClicksWebURLRent]) AS WebsiteClicks
                   ,SUM(ml.[ClicksMapAG] + ml.[ClicksMapRent]) AS MapClicks
           FROM     RentPath.Mart.Listings AS ml WITH (NOLOCK)
           JOIN     #TempProperties AS p
                    ON ml.ListingID = p.ListingID
           JOIN     #TempDates AS d
                    ON d.YearMonth = ml.YearMonth
           WHERE    (ml.StatusIDAG = 1
                     OR ml.StatusIDRent = 1)
           GROUP BY ml.ListingID
                   ,ml.YearMonth
                   ,d.Months
          ) AS a
        ON d.YearMonth = a.YearMonth
LEFT JOIN (
           SELECT   YearMonth
                   ,Months
                   ,AVG(RentalPerZipCode) AS AVGRentalPerZipCode
           FROM     (
                     SELECT ml.ListingID
                           ,ml.YearMonth
                           ,d.Months
                           ,MAX(ml.LowPrice) AS RentalPerZipCode
                     FROM   RentPath.Mart.Listings AS ml WITH (NOLOCK)
                     JOIN   RentPath.Dimension.Listings AS dl WITH (NOLOCK)
                            ON ml.ListingID = dl.ListingID
                     JOIN   #TempDates AS d
                            ON d.YearMonth = ml.YearMonth
                     WHERE  dl.PropertyZipCode IN (SELECT   PropertyZipCode
                                                   FROM     #TempProperties AS tp)
                            AND (ml.StatusIDAG = 1
                                 OR ml.StatusIDRent = 1)
                     GROUP BY ml.ListingID
                           ,ml.YearMonth
                           ,d.Months
                    ) AS a
           GROUP BY YearMonth
                   ,Months
          ) AS b
        ON d.YearMonth = b.YearMonth;

--INSERT  INTO Staging.PropAnalysisLog
--        (ListingID,StepNum,Step,EndTime)
--VALUES  (@ListingID
--		,8
--        ,'#TempMartListingsData populated'  -- Step - varchar(1000)
--        ,GETDATE());

-------------------------------
/*Get CBSA level rental rate, lead and invoice data*/
-------------------------------
SELECT  a.YearMonth
       ,a.Months
       ,a.AVGRentalPerCBSACode
       ,a.AVGLeadsPerPropertyCBSA
       ,CurrentMonthlyInvoiceCBSA
       ,ISNULL(b.CurrentMonthlyInvoiceCBSA / NULLIF(a.AllLeadsCBSA,0),0) AS CPLByCBSA
INTO    #ByCBSA
FROM    (
         SELECT YearMonth
               ,Months
               ,AVG(RentalPerCBSACode) AS AVGRentalPerCBSACode
               ,ISNULL(SUM(AllLeadsCBSA) / NULLIF(COUNT(DISTINCT ListingID),0),0) AS AVGLeadsPerPropertyCBSA
               ,SUM(AllLeadsCBSA) AS AllLeadsCBSA
         FROM   (
                 SELECT ml.ListingID
                       ,ml.YearMonth
                       ,d.Months
                       ,MAX(ml.LowPrice) AS RentalPerCBSACode
                       ,SUM(ml.AllLeads) AS AllLeadsCBSA--, SUM(InvoiceTotal) AS CurrentMonthlyInvoiceCBSA
                 FROM   RentPath.Mart.Listings AS ml WITH (NOLOCK)
                 JOIN   RentPath.Dimension.Listings AS dl WITH (NOLOCK)
                        ON ml.ListingID = dl.ListingID
                 JOIN   #TempDates AS d
                        ON d.YearMonth = ml.YearMonth
                 WHERE  dl.CBSACode IN (SELECT  CBSACode
                                        FROM    #TempProperties AS tp)
                        AND (ml.StatusIDAG = 1
                             AND ml.StatusIDRent = 1)
                 GROUP BY ml.ListingID
                       ,ml.YearMonth
                       ,d.Months
                ) AS a
         GROUP BY YearMonth
               ,Months
        ) a
JOIN    (
         SELECT YearMonth
               ,Months
               ,SUM(CurrentMonthlyInvoiceCBSA) AS CurrentMonthlyInvoiceCBSA
         FROM   (
                 SELECT d.YearMonth
                       ,dl.ListingID
                       ,d.Months
                       ,SUM(InvoiceTotal) AS CurrentMonthlyInvoiceCBSA
                 FROM   MAX.Mart.MaxInvoice AS mi WITH (NOLOCK)
                 JOIN   RentPath.Dimension.Listings AS dl WITH (NOLOCK)
                        ON mi.ClientID = dl.BillingIDAG
                 JOIN   #TempDates AS d
                        ON d.YearMonth = LEFT(IssueBeginYMDID,6)
                 WHERE  dl.CBSACode IN (SELECT  CBSACode
                                        FROM    #TempProperties AS tp)
                        AND (dl.StatusIDAG = 1
                             AND dl.StatusIDRent = 1)
                        AND mi.InvoiceStatusID = 'FINALIZED'
                 GROUP BY dl.ListingID
                       ,d.Months
                       ,d.YearMonth
                ) AS a
         GROUP BY YearMonth
               ,Months
        ) AS b
        ON a.YearMonth = b.YearMonth;
--ORDER BY 1
	
--INSERT  INTO Staging.PropAnalysisLog
--        (ListingID,StepNum,Step,EndTime)
--VALUES  (@ListingID
--		,9
--        ,'#ByCBSA populated'  -- Step - varchar(1000)
--        ,GETDATE());

-------------------------------
/*Get Upgrade and Core Products*/
-------------------------------
;
WITH    InvoiceAmounts
          AS (
              SELECT  DISTINCT
                        CAST(CONVERT(VARCHAR(6),mili.[IssueMonth],112) AS INT) AS YearMonth
                       ,d.Months
                       ,mi.ClientID
                       ,CASE WHEN mili.InvoiceLineItemAmount != 0
                                  AND mit.IsCore != 1 THEN mit.ItemDescription
                             ELSE NULL
                        END AS UpgradeItem
                       ,SUM(CASE WHEN mili.InvoiceLineItemAmount != 0
                                      AND mit.IsCore != 1 THEN mili.InvoiceLineItemAmount
                                 ELSE 0
                            END) AS UpgradeAmount
                       ,CASE WHEN mili.InvoiceLineItemAmount != 0
                                  AND mit.IsCore = 1 THEN mit.ItemDescription
                             ELSE NULL
                        END AS CoreItem
                       ,SUM(CASE WHEN mili.InvoiceLineItemAmount != 0
                                      AND mit.IsCore = 1 THEN mili.InvoiceLineItemAmount
                                 ELSE 0
                            END) AS CoreAmount
              FROM      MAX.Mart.MaxInvoice AS mi WITH (NOLOCK)
              JOIN      MAX.Mart.MaxInvoice_LineItems AS mili WITH (NOLOCK)
                        ON mi.InvoiceID = mili.InvoiceID
              JOIN      MAX.Mart.MaxItem AS mit WITH (NOLOCK)
                        ON mit.ItemID = mili.ItemId
              JOIN      #TempProperties AS p
                        ON mi.ClientID = p.ClientIDAG
              JOIN      #TempDates AS d
                        ON d.YearMonth = CAST(CONVERT(VARCHAR(6),mili.[IssueMonth],112) AS INT)
              WHERE     mi.InvoiceStatusID = 'FINALIZED'
              GROUP BY  CAST(CONVERT(VARCHAR(6),mili.[IssueMonth],112) AS INT)
                       ,d.Months
                       ,mi.ClientID
                       ,CASE WHEN mili.InvoiceLineItemAmount != 0
                                  AND mit.IsCore != 1 THEN mit.ItemDescription
                             ELSE NULL
                        END
                       ,CASE WHEN mili.InvoiceLineItemAmount != 0
                                  AND mit.IsCore = 1 THEN mit.ItemDescription
                             ELSE NULL
                        END
             )
    SELECT  mi.YearMonth
           ,Months
           ,mi.ClientID
           ,STUFF((
                   SELECT   '| ' + i.UpgradeItem
                   FROM     InvoiceAmounts AS i
                   WHERE    i.ClientID = mi.ClientID
                            AND i.YearMonth = mi.YearMonth
                   ORDER BY i.UpgradeItem
                  FOR
                   XML PATH('')
                  ),1,2,'') AS UpgradeItem
           ,SUM(UpgradeAmount) AS UpgradeAmount
           ,STUFF((
                   SELECT   '| ' + i.CoreItem
                   FROM     InvoiceAmounts AS i
                   WHERE    i.ClientID = mi.ClientID
                            AND i.YearMonth = mi.YearMonth
                   ORDER BY i.CoreItem
                  FOR
                   XML PATH('')
                  ),1,2,'') AS CoreItem
           ,SUM(CoreAmount) AS CoreAmount
    INTO    #TempItems
    FROM    InvoiceAmounts AS mi
    GROUP BY mi.YearMonth
           ,Months
           ,mi.ClientID;

--INSERT  INTO Staging.PropAnalysisLog
--        (ListingID,StepNum,Step,EndTime)
--VALUES  (@ListingID
--		,10
--        ,'#TempItems populated'  -- Step - varchar(1000)
--        ,GETDATE());

-------------------------------
/*Get phone lead data*/
-------------------------------
SELECT  LEFT(YMDID,6) AS YearMonth
       ,d.Months
       ,pl.ListingID
       ,SUM(CASE WHEN CallStatus IN (2,3) THEN 1
                 ELSE 0
            END) / NULLIF(CAST(SUM(1) AS DECIMAL(8,2)),0) AS MissedCalls
       ,SUM(CASE WHEN IsAbandoned = 1 THEN 1
                 ELSE 0
            END) / NULLIF(CAST(SUM(CASE WHEN CallStatus IN (1,2,3)			--Ticket 24212  added missed to connected
                                             AND pl.AudioURL IS NOT NULL THEN 1
                                        ELSE 0
                                   END) AS DECIMAL(8,2)),0) AS AbandonedCalls
       ,CASE WHEN SUM(CASE WHEN pl.CallStatus IN (1,2,3)			--Ticket 24212  added missed to connected
                                AND pl.TotalCallerTrimTalkTime IS NOT NULL
                                AND pl.AudioURL IS NOT NULL THEN 1
                           ELSE 0
                      END) = 0 THEN 0
             ELSE SUM(ISNULL(pl.TimePriorToCallerSpeaking,0)) / NULLIF(CAST(SUM(CASE WHEN pl.CallStatus IN (1,2,3)			--Ticket 24212  added missed to connected
                                                                                          AND pl.TotalCallerTrimTalkTime IS NOT NULL
                                                                                          AND pl.AudioURL IS NOT NULL THEN 1
                                                                                     ELSE 0
                                                                                END) AS MONEY),0)
        END AS AvgWaitTimeBeforeConversion
       ,CONVERT(VARCHAR(10),DATEADD(SECOND,CASE WHEN SUM(CASE WHEN pl.CallStatus IN (1,2,3)			--Ticket 24212  added missed to connected
                                                                   AND pl.TotalCallerTrimTalkTime IS NOT NULL
                                                                   AND pl.AudioURL IS NOT NULL THEN 1
                                                              ELSE 0
                                                         END) = 0 THEN 0
                                                ELSE SUM(ISNULL(pl.TimePriorToCallerSpeaking,0)) / NULLIF(CAST(SUM(CASE WHEN pl.CallStatus IN (1,2,3)			--Ticket 24212  added missed to connected
                                                                                                                             AND pl.TotalCallerTrimTalkTime IS NOT NULL
                                                                                                                             AND pl.AudioURL IS NOT NULL THEN 1
                                                                                                                        ELSE 0
                                                                                                                   END) AS MONEY),0)
                                           END,0),108) AS AvgWaitTime
INTO    #TempCalls
FROM    RentPath.[Mart].[PhoneLeads] AS pl
JOIN    #TempProperties AS p
        ON pl.ListingID = p.ListingID
JOIN    #TempDates AS d
        ON d.YearMonth = LEFT(pl.YMDID,6)
WHERE   CallType <> 'CRAIGSLIST'
GROUP BY LEFT(YMDID,6)
       ,pl.ListingID
       ,d.Months;

--INSERT  INTO Staging.PropAnalysisLog
--        (ListingID,StepNum,Step,EndTime)
--VALUES  (@ListingID
--		,11
--        ,'#TempCalls populated'  -- Step - varchar(1000)
--        ,GETDATE());

-------------------------------
/*Get site placement*/
-------------------------------
SELECT  Months
       ,a.ListingID
       ,Sources AS Source
       ,STUFF((
               SELECT   '| ' + City + ', ' + State + ' - ' + 'Page ' + CAST(Page AS VARCHAR(10)) + '; ' + CAST(Position AS VARCHAR(10)) + CASE WHEN Position NOT IN (11,12,13)
                                                                                                                                                    AND RIGHT(Position,1) = 1 THEN 'st Listing'
                                                                                                                                               WHEN Position NOT IN (11,12,13)
                                                                                                                                                    AND RIGHT(Position,1) = 2 THEN 'nd Listing'
                                                                                                                                               WHEN Position NOT IN (11,12,13)
                                                                                                                                                    AND RIGHT(Position,1) = 3 THEN 'rd Listing'
                                                                                                                                               ELSE 'th Listing'
                                                                                                                                          END
               FROM     RentPath.[Fact].[CityStateListings] AS t2
               JOIN     #TempProperties AS p
                        ON t2.ListingID = CAST(p.ListingID AS VARCHAR(10))
               JOIN     #TempDates AS d
                        ON d.MonthEndYMDID = t2.YMDID
               WHERE    (t2.ListingID = a.ListingID
                         AND t2.Sources = a.Sources
                         AND t2.YMDID = a.YMDID)
              FOR
               XML PATH('')
              ),1,2,'') AS Placement
INTO    #TempPlacement
FROM    Rentpath.[Fact].[CityStateListings] a WITH (NOLOCK)
JOIN    #TempProperties AS p
        ON a.ListingID = CAST(p.ListingID AS VARCHAR(10))
JOIN    #TempDates AS d
        ON d.MonthEndYMDID = a.YMDID
GROUP BY Sources
       ,a.ListingID
       ,Months
       ,a.ymdid;

--INSERT  INTO Staging.PropAnalysisLog
--        (ListingID,StepNum,Step,EndTime)
--VALUES  (@ListingID
--		,12
--        ,'#TempPlacement populated'  -- Step - varchar(1000)
--        ,GETDATE());

-------------------------------
/*Get final result set*/
-------------------------------
SELECT  '005' AS SortOrder
       ,'Dates' AS Metric
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN d.MonthName
                      ELSE ''
                 END) AS varchar(20)) AS Month1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN d.MonthName
                      ELSE ''
                 END) AS varchar(20)) AS Month2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN d.MonthName
                      ELSE ''
                 END) AS varchar(20)) AS Month3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN d.MonthName
                      ELSE ''
                 END) AS varchar(20)) AS Month4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN d.MonthName
                      ELSE ''
                 END) AS varchar(20)) AS Month5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN d.MonthName
                      ELSE ''
                 END) AS varchar(20)) AS Month6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN d.MonthName
                      ELSE ''
                 END) AS varchar(20)) AS Month7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN d.MonthName
                      ELSE ''
                 END) AS varchar(20)) AS Month8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN d.MonthName
                      ELSE ''
                 END) AS varchar(20)) AS Month9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN d.MonthName
                      ELSE ''
                 END) AS varchar(20)) AS Month10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN d.MonthName
                      ELSE ''
                 END) AS varchar(20)) AS Month11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN d.MonthName
                      ELSE ''
                 END) AS varchar(20)) AS Month12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN d.MonthName
                      ELSE ''
                 END) AS varchar(20)) AS Month13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN d.MonthName
                      ELSE ''
                 END) AS varchar(20)) AS Month14
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN d.MonthName
                      ELSE ''
                 END) AS varchar(20)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN d.MonthName
                      ELSE ''
                 END) AS varchar(20)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN d.MonthName
                      ELSE ''
                 END) AS varchar(20)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN d.MonthName
                      ELSE ''
                 END) AS varchar(20)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN d.MonthName
                      ELSE ''
                 END) AS varchar(20)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN d.MonthName
                      ELSE ''
                 END) AS varchar(20)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN d.MonthName
                      ELSE ''
                 END) AS varchar(20)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN d.MonthName
                      ELSE ''
                 END) AS varchar(20)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN d.MonthName
                      ELSE ''
                 END) AS varchar(20)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN d.MonthName
                      ELSE ''
                 END) AS varchar(20)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN d.MonthName
                      ELSE ''
                 END) AS varchar(20)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN d.MonthName
                      ELSE ''
                 END) AS varchar(20)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN d.MonthName
                      ELSE ''
                 END) AS varchar(20)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN d.MonthName
                      ELSE ''
                 END) AS varchar(20)) AS DummyMonth14
FROM    #TempDates AS d
UNION
SELECT  '010' AS SortOrder
       ,'Current Monthly Invoice' AS Metric
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN FORMAT(md.CurrentMonthlyInvoice,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN FORMAT(md.CurrentMonthlyInvoice,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN FORMAT(md.CurrentMonthlyInvoice,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN FORMAT(md.CurrentMonthlyInvoice,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN FORMAT(md.CurrentMonthlyInvoice,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN FORMAT(md.CurrentMonthlyInvoice,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN FORMAT(md.CurrentMonthlyInvoice,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN FORMAT(md.CurrentMonthlyInvoice,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN FORMAT(md.CurrentMonthlyInvoice,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN FORMAT(md.CurrentMonthlyInvoice,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN FORMAT(md.CurrentMonthlyInvoice,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN FORMAT(md.CurrentMonthlyInvoice,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN FORMAT(md.CurrentMonthlyInvoice,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN FORMAT(md.CurrentMonthlyInvoice,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month14
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth14
FROM    #TempMaxData AS md
UNION
SELECT  '020' AS SortOrder
       ,'AG Placement Tier' AS Metric
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 1' THEN mleom.AGTier
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month1
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 2' THEN mleom.AGTier
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month2
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 3' THEN mleom.AGTier
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month3
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 4' THEN mleom.AGTier
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month4
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 5' THEN mleom.AGTier
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month5
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 6' THEN mleom.AGTier
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month6
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 7' THEN mleom.AGTier
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month7
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 8' THEN mleom.AGTier
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month8
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 9' THEN mleom.AGTier
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month9
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 10' THEN mleom.AGTier
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month10
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 11' THEN mleom.AGTier
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month11
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 12' THEN mleom.AGTier
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month12
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 13' THEN mleom.AGTier
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month13
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 14' THEN mleom.AGTier
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month14
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth14
FROM    #TempEndOfMonthMartListingsData AS mleom
UNION
SELECT  '030' AS SortOrder
       ,'Rent Placement Tier' AS Metric
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 1' THEN mleom.RentTier
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month1
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 2' THEN mleom.RentTier
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month2
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 3' THEN mleom.RentTier
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month3
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 4' THEN mleom.RentTier
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month4
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 5' THEN mleom.RentTier
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month5
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 6' THEN mleom.RentTier
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month6
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 7' THEN mleom.RentTier
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month7
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 8' THEN mleom.RentTier
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month8
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 9' THEN mleom.RentTier
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month9
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 10' THEN mleom.RentTier
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month10
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 11' THEN mleom.RentTier
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month11
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 12' THEN mleom.RentTier
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month12
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 13' THEN mleom.RentTier
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month13
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 14' THEN mleom.RentTier
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month14
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth14
FROM    #TempEndOfMonthMartListingsData AS mleom
UNION
SELECT  '040' AS SortOrder
       ,'Upgrade Items' AS Metric
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 1' THEN u.UpgradeItem
                             ELSE ''
                        END,'')) AS VARCHAR(1000)) AS Month1
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 2' THEN u.UpgradeItem
                             ELSE ''
                        END,'')) AS VARCHAR(1000)) AS Month2
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 3' THEN u.UpgradeItem
                             ELSE ''
                        END,'')) AS VARCHAR(1000)) AS Month3
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 4' THEN u.UpgradeItem
                             ELSE ''
                        END,'')) AS VARCHAR(1000)) AS Month4
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 5' THEN u.UpgradeItem
                             ELSE ''
                        END,'')) AS VARCHAR(1000)) AS Month5
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 6' THEN u.UpgradeItem
                             ELSE ''
                        END,'')) AS VARCHAR(1000)) AS Month6
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 7' THEN u.UpgradeItem
                             ELSE ''
                        END,'')) AS VARCHAR(1000)) AS Month7
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 8' THEN u.UpgradeItem
                             ELSE ''
                        END,'')) AS VARCHAR(1000)) AS Month8
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 9' THEN u.UpgradeItem
                             ELSE ''
                        END,'')) AS VARCHAR(1000)) AS Month9
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 10' THEN u.UpgradeItem
                             ELSE ''
                        END,'')) AS VARCHAR(1000)) AS Month10
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 11' THEN u.UpgradeItem
                             ELSE ''
                        END,'')) AS VARCHAR(1000)) AS Month11
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 12' THEN u.UpgradeItem
                             ELSE ''
                        END,'')) AS VARCHAR(1000)) AS Month12
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 13' THEN u.UpgradeItem
                             ELSE ''
                        END,'')) AS VARCHAR(1000)) AS Month13
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 14' THEN u.UpgradeItem
                             ELSE ''
                        END,'')) AS VARCHAR(1000)) AS Month14
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth14
FROM    #TempItems AS u
UNION
SELECT  '042' AS SortOrder
       ,'Upgrade Monthly Invoice Amount' AS Metric
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN FORMAT(u.UpgradeAmount,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(1000)) AS Month1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN FORMAT(u.UpgradeAmount,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(1000)) AS Month2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN FORMAT(u.UpgradeAmount,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(1000)) AS Month3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN FORMAT(u.UpgradeAmount,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(1000)) AS Month4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN FORMAT(u.UpgradeAmount,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(1000)) AS Month5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN FORMAT(u.UpgradeAmount,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(1000)) AS Month6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN FORMAT(u.UpgradeAmount,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(1000)) AS Month7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN FORMAT(u.UpgradeAmount,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(1000)) AS Month8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN FORMAT(u.UpgradeAmount,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(1000)) AS Month9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN FORMAT(u.UpgradeAmount,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(1000)) AS Month10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN FORMAT(u.UpgradeAmount,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(1000)) AS Month11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN FORMAT(u.UpgradeAmount,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(1000)) AS Month12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN FORMAT(u.UpgradeAmount,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(1000)) AS Month13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN FORMAT(u.UpgradeAmount,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(1000)) AS Month14
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth14
FROM    #TempItems AS u
UNION
SELECT  '044' AS SortOrder
       ,'Core Items' AS Metric
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 1' THEN u.CoreItem
                             ELSE ''
                        END,'')) AS VARCHAR(1000)) AS Month1
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 2' THEN u.CoreItem
                             ELSE ''
                        END,'')) AS VARCHAR(1000)) AS Month2
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 3' THEN u.CoreItem
                             ELSE ''
                        END,'')) AS VARCHAR(1000)) AS Month3
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 4' THEN u.CoreItem
                             ELSE ''
                        END,'')) AS VARCHAR(1000)) AS Month4
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 5' THEN u.CoreItem
                             ELSE ''
                        END,'')) AS VARCHAR(1000)) AS Month5
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 6' THEN u.CoreItem
                             ELSE ''
                        END,'')) AS VARCHAR(1000)) AS Month6
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 7' THEN u.CoreItem
                             ELSE ''
                        END,'')) AS VARCHAR(1000)) AS Month7
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 8' THEN u.CoreItem
                             ELSE ''
                        END,'')) AS VARCHAR(1000)) AS Month8
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 9' THEN u.CoreItem
                             ELSE ''
                        END,'')) AS VARCHAR(1000)) AS Month9
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 10' THEN u.CoreItem
                             ELSE ''
                        END,'')) AS VARCHAR(1000)) AS Month10
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 11' THEN u.CoreItem
                             ELSE ''
                        END,'')) AS VARCHAR(1000)) AS Month11
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 12' THEN u.CoreItem
                             ELSE ''
                        END,'')) AS VARCHAR(1000)) AS Month12
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 13' THEN u.CoreItem
                             ELSE ''
                        END,'')) AS VARCHAR(1000)) AS Month13
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 14' THEN u.CoreItem
                             ELSE ''
                        END,'')) AS VARCHAR(1000)) AS Month14
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth14
FROM    #TempItems AS u
UNION
SELECT  '046' AS SortOrder
       ,'Core Monthly Invoice Amount' AS Metric
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN FORMAT(u.CoreAmount,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(1000)) AS Month1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN FORMAT(u.CoreAmount,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(1000)) AS Month2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN FORMAT(u.CoreAmount,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(1000)) AS Month3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN FORMAT(u.CoreAmount,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(1000)) AS Month4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN FORMAT(u.CoreAmount,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(1000)) AS Month5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN FORMAT(u.CoreAmount,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(1000)) AS Month6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN FORMAT(u.CoreAmount,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(1000)) AS Month7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN FORMAT(u.CoreAmount,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(1000)) AS Month8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN FORMAT(u.CoreAmount,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(1000)) AS Month9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN FORMAT(u.CoreAmount,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(1000)) AS Month10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN FORMAT(u.CoreAmount,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(1000)) AS Month11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN FORMAT(u.CoreAmount,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(1000)) AS Month12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN FORMAT(u.CoreAmount,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(1000)) AS Month13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN FORMAT(u.CoreAmount,'C0','en-us')
                      ELSE ''
                 END) AS VARCHAR(1000)) AS Month14
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN ''
                      ELSE ''
                 END) AS VARCHAR(1000)) AS DummyMonth14
FROM    #TempItems AS u
UNION
SELECT  '050' AS SortOrder
       ,'Points' AS Metric
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN mleom.Points
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN mleom.Points
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN mleom.Points
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN mleom.Points
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN mleom.Points
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN mleom.Points
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN mleom.Points
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN mleom.Points
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN mleom.Points
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN mleom.Points
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN mleom.Points
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN mleom.Points
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN mleom.Points
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN mleom.Points
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month14
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth14
FROM    #TempEndOfMonthMartListingsData AS mleom
UNION
SELECT  '060' AS SortOrder
       ,'Activity' AS Metric
       ,CAST('' AS varchar(10)) AS Month1
       ,CAST('' AS varchar(10)) AS Month2
       ,CAST('' AS varchar(10)) AS Month3
       ,CAST('' AS varchar(10)) AS Month4
       ,CAST('' AS varchar(10)) AS Month5
       ,CAST('' AS varchar(10)) AS Month6
       ,CAST('' AS varchar(10)) AS Month7
       ,CAST('' AS varchar(10)) AS Month8
       ,CAST('' AS varchar(10)) AS Month9
       ,CAST('' AS varchar(10)) AS Month10
       ,CAST('' AS varchar(10)) AS Month11
       ,CAST('' AS varchar(10)) AS Month12
       ,CAST('' AS varchar(10)) AS Month13
       ,CAST('' AS varchar(10)) AS Month14
       ,CAST('' AS VARCHAR(10)) AS DummyMonth1
       ,CAST('' AS VARCHAR(10)) AS DummyMonth2
       ,CAST('' AS VARCHAR(10)) AS DummyMonth3
       ,CAST('' AS VARCHAR(10)) AS DummyMonth4
       ,CAST('' AS VARCHAR(10)) AS DummyMonth5
       ,CAST('' AS VARCHAR(10)) AS DummyMonth6
       ,CAST('' AS VARCHAR(10)) AS DummyMonth7
       ,CAST('' AS VARCHAR(10)) AS DummyMonth8
       ,CAST('' AS VARCHAR(10)) AS DummyMonth9
       ,CAST('' AS VARCHAR(10)) AS DummyMonth10
       ,CAST('' AS VARCHAR(10)) AS DummyMonth11
       ,CAST('' AS VARCHAR(10)) AS DummyMonth12
       ,CAST('' AS VARCHAR(10)) AS DummyMonth13
       ,CAST('' AS VARCHAR(10)) AS DummyMonth14
UNION
SELECT  '070' AS SortOrder
       ,'Property Details Page Views' AS Metric
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 1' THEN mld.PropertyDetailPageViews
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month1
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 2' THEN mld.PropertyDetailPageViews
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month2
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 3' THEN mld.PropertyDetailPageViews
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month3
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 4' THEN mld.PropertyDetailPageViews
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month4
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 5' THEN mld.PropertyDetailPageViews
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month5
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 6' THEN mld.PropertyDetailPageViews
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month6
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 7' THEN mld.PropertyDetailPageViews
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month7
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 8' THEN mld.PropertyDetailPageViews
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month8
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 9' THEN mld.PropertyDetailPageViews
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month9
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 10' THEN mld.PropertyDetailPageViews
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month10
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 11' THEN mld.PropertyDetailPageViews
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month11
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 12' THEN mld.PropertyDetailPageViews
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month12
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 13' THEN mld.PropertyDetailPageViews
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month13
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 14' THEN mld.PropertyDetailPageViews
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month14
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth14
FROM    #TempMartListingsData AS mld
UNION
SELECT  '080' AS SortOrder
       ,'# of Website Clicks' AS Metric
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 1' THEN mld.WebsiteClicks
                             ELSE ''
                        END,0)) AS VARCHAR(10)) AS Month1
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 2' THEN mld.WebsiteClicks
                             ELSE ''
                        END,0)) AS VARCHAR(10)) AS Month2
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 3' THEN mld.WebsiteClicks
                             ELSE ''
                        END,0)) AS VARCHAR(10)) AS Month3
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 4' THEN mld.WebsiteClicks
                             ELSE ''
                        END,0)) AS VARCHAR(10)) AS Month4
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 5' THEN mld.WebsiteClicks
                             ELSE ''
                        END,0)) AS VARCHAR(10)) AS Month5
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 6' THEN mld.WebsiteClicks
                             ELSE ''
                        END,0)) AS VARCHAR(10)) AS Month6
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 7' THEN mld.WebsiteClicks
                             ELSE ''
                        END,0)) AS VARCHAR(10)) AS Month7
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 8' THEN mld.WebsiteClicks
                             ELSE ''
                        END,0)) AS VARCHAR(10)) AS Month8
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 9' THEN mld.WebsiteClicks
                             ELSE ''
                        END,0)) AS VARCHAR(10)) AS Month9
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 10' THEN mld.WebsiteClicks
                             ELSE ''
                        END,0)) AS VARCHAR(10)) AS Month10
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 11' THEN mld.WebsiteClicks
                             ELSE ''
                        END,0)) AS VARCHAR(10)) AS Month11
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 12' THEN mld.WebsiteClicks
                             ELSE ''
                        END,0)) AS VARCHAR(10)) AS Month12
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 13' THEN mld.WebsiteClicks
                             ELSE ''
                        END,0)) AS VARCHAR(10)) AS Month13
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 14' THEN mld.WebsiteClicks
                             ELSE ''
                        END,0)) AS VARCHAR(10)) AS Month14
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth14
FROM    #TempMartListingsData AS mld
UNION
SELECT  '090' AS SortOrder
       ,'# of Map Clicks' AS Metric
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 1' THEN mld.MapClicks
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month1
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 2' THEN mld.MapClicks
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month2
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 3' THEN mld.MapClicks
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month3
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 4' THEN mld.MapClicks
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month4
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 5' THEN mld.MapClicks
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month5
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 6' THEN mld.MapClicks
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month6
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 7' THEN mld.MapClicks
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month7
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 8' THEN mld.MapClicks
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month8
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 9' THEN mld.MapClicks
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month9
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 10' THEN mld.MapClicks
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month10
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 11' THEN mld.MapClicks
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month11
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 12' THEN mld.MapClicks
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month12
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 13' THEN mld.MapClicks
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month13
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 14' THEN mld.MapClicks
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month14
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth14
FROM    #TempMartListingsData AS mld
UNION
SELECT  '100' AS SortOrder
       ,'Total Leads' AS Metric
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 1' THEN ml.Leads
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month1
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 2' THEN ml.Leads
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month2
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 3' THEN ml.Leads
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month3
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 4' THEN ml.Leads
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month4
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 5' THEN ml.Leads
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month5
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 6' THEN ml.Leads
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month6
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 7' THEN ml.Leads
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month7
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 8' THEN ml.Leads
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month8
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 9' THEN ml.Leads
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month9
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 10' THEN ml.Leads
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month10
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 11' THEN ml.Leads
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month11
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 12' THEN ml.Leads
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month12
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 13' THEN ml.Leads
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month13
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 14' THEN ml.Leads
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month14
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth14
FROM    #TempMartListingsData AS ml
UNION
SELECT  '110' AS SortOrder
       ,'Email Leads - AG' AS Metric
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 1' THEN ml.EmailLeadsAG
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month1
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 2' THEN ml.EmailLeadsAG
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month2
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 3' THEN ml.EmailLeadsAG
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month3
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 4' THEN ml.EmailLeadsAG
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month4
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 5' THEN ml.EmailLeadsAG
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month5
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 6' THEN ml.EmailLeadsAG
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month6
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 7' THEN ml.EmailLeadsAG
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month7
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 8' THEN ml.EmailLeadsAG
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month8
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 9' THEN ml.EmailLeadsAG
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month9
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 10' THEN ml.EmailLeadsAG
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month10
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 11' THEN ml.EmailLeadsAG
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month11
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 12' THEN ml.EmailLeadsAG
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month12
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 13' THEN ml.EmailLeadsAG
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month13
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 14' THEN ml.EmailLeadsAG
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month14
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth14
FROM    #TempMartListingsData AS ml
UNION
SELECT  '120' AS SortOrder
       ,'Email Leads - Rent' AS Metric
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 1' THEN ml.EmailLeadsRent
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month1
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 2' THEN ml.EmailLeadsRent
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month2
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 3' THEN ml.EmailLeadsRent
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month3
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 4' THEN ml.EmailLeadsRent
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month4
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 5' THEN ml.EmailLeadsRent
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month5
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 6' THEN ml.EmailLeadsRent
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month6
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 7' THEN ml.EmailLeadsRent
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month7
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 8' THEN ml.EmailLeadsRent
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month8
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 9' THEN ml.EmailLeadsRent
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month9
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 10' THEN ml.EmailLeadsRent
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month10
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 11' THEN ml.EmailLeadsRent
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month11
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 12' THEN ml.EmailLeadsRent
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month12
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 13' THEN ml.EmailLeadsRent
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month13
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 14' THEN ml.EmailLeadsRent
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month14
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth14
FROM    #TempMartListingsData AS ml
UNION
SELECT  '130' AS SortOrder
       ,'Phone Leads - AG' AS Metric
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 1' THEN ml.PhoneLeadsAG
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month1
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 2' THEN ml.PhoneLeadsAG
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month2
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 3' THEN ml.PhoneLeadsAG
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month3
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 4' THEN ml.PhoneLeadsAG
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month4
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 5' THEN ml.PhoneLeadsAG
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month5
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 6' THEN ml.PhoneLeadsAG
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month6
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 7' THEN ml.PhoneLeadsAG
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month7
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 8' THEN ml.PhoneLeadsAG
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month8
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 9' THEN ml.PhoneLeadsAG
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month9
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 10' THEN ml.PhoneLeadsAG
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month10
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 11' THEN ml.PhoneLeadsAG
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month11
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 12' THEN ml.PhoneLeadsAG
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month12
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 13' THEN ml.PhoneLeadsAG
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month13
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 14' THEN ml.PhoneLeadsAG
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month14
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth14
FROM    #TempMartListingsData AS ml
UNION
SELECT  '140' AS SortOrder
       ,'Phone Leads - Rent' AS Metric
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 1' THEN ml.PhoneLeadsRent
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month1
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 2' THEN ml.PhoneLeadsRent
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month2
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 3' THEN ml.PhoneLeadsRent
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month3
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 4' THEN ml.PhoneLeadsRent
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month4
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 5' THEN ml.PhoneLeadsRent
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month5
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 6' THEN ml.PhoneLeadsRent
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month6
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 7' THEN ml.PhoneLeadsRent
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month7
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 8' THEN ml.PhoneLeadsRent
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month8
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 9' THEN ml.PhoneLeadsRent
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month9
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 10' THEN ml.PhoneLeadsRent
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month10
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 11' THEN ml.PhoneLeadsRent
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month11
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 12' THEN ml.PhoneLeadsRent
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month12
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 13' THEN ml.PhoneLeadsRent
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month13
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 14' THEN ml.PhoneLeadsRent
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month14
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth14
FROM    #TempMartListingsData AS ml
UNION
SELECT  '150' AS SortOrder
       ,'Cost Per Lead' AS Metric
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 1' THEN FORMAT(ISNULL(md.CurrentMonthlyInvoice / NULLIF(ml.Leads,0),0),'C','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month1
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 2' THEN FORMAT(ISNULL(md.CurrentMonthlyInvoice / NULLIF(ml.Leads,0),0),'C','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month2
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 3' THEN FORMAT(ISNULL(md.CurrentMonthlyInvoice / NULLIF(ml.Leads,0),0),'C','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month3
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 4' THEN FORMAT(ISNULL(md.CurrentMonthlyInvoice / NULLIF(ml.Leads,0),0),'C','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month4
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 5' THEN FORMAT(ISNULL(md.CurrentMonthlyInvoice / NULLIF(ml.Leads,0),0),'C','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month5
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 6' THEN FORMAT(ISNULL(md.CurrentMonthlyInvoice / NULLIF(ml.Leads,0),0),'C','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month6
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 7' THEN FORMAT(ISNULL(md.CurrentMonthlyInvoice / NULLIF(ml.Leads,0),0),'C','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month7
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 8' THEN FORMAT(ISNULL(md.CurrentMonthlyInvoice / NULLIF(ml.Leads,0),0),'C','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month8
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 9' THEN FORMAT(ISNULL(md.CurrentMonthlyInvoice / NULLIF(ml.Leads,0),0),'C','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month9
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 10' THEN FORMAT(ISNULL(md.CurrentMonthlyInvoice / NULLIF(ml.Leads,0),0),'C','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month10
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 11' THEN FORMAT(ISNULL(md.CurrentMonthlyInvoice / NULLIF(ml.Leads,0),0),'C','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month11
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 12' THEN FORMAT(ISNULL(md.CurrentMonthlyInvoice / NULLIF(ml.Leads,0),0),'C','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month12
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 13' THEN FORMAT(ISNULL(md.CurrentMonthlyInvoice / NULLIF(ml.Leads,0),0),'C','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month13
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 14' THEN FORMAT(ISNULL(md.CurrentMonthlyInvoice / NULLIF(ml.Leads,0),0),'C','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month14
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 1' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 2' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 3' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 4' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 5' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 6' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 7' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 8' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 9' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 10' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 11' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 12' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 13' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 14' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth14
FROM    #TempMartListingsData AS ml
JOIN    #TempMaxData AS md
        ON md.YearMonth = ml.YearMonth
           AND md.ListingID = ml.ListingID
UNION
SELECT  '160' AS SortOrder
       ,'Avg Leads Per Property in CBSA Area' AS Metric
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 1' THEN ml.AVGLeadsPerPropertyCBSA
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month1
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 2' THEN ml.AVGLeadsPerPropertyCBSA
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month2
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 3' THEN ml.AVGLeadsPerPropertyCBSA
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month3
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 4' THEN ml.AVGLeadsPerPropertyCBSA
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month4
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 5' THEN ml.AVGLeadsPerPropertyCBSA
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month5
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 6' THEN ml.AVGLeadsPerPropertyCBSA
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month6
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 7' THEN ml.AVGLeadsPerPropertyCBSA
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month7
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 8' THEN ml.AVGLeadsPerPropertyCBSA
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month8
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 9' THEN ml.AVGLeadsPerPropertyCBSA
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month9
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 10' THEN ml.AVGLeadsPerPropertyCBSA
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month10
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 11' THEN ml.AVGLeadsPerPropertyCBSA
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month11
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 12' THEN ml.AVGLeadsPerPropertyCBSA
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month12
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 13' THEN ml.AVGLeadsPerPropertyCBSA
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month13
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 14' THEN ml.AVGLeadsPerPropertyCBSA
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month14
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth14
FROM    #ByCBSA AS ml
UNION -- CPLByCBSA
SELECT  '170' AS SortOrder
       ,'Avg Cost Per Lead in CBSA Area' AS Metric
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 1' THEN FORMAT(ml.CPLByCBSA,'C','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month1
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 2' THEN FORMAT(ml.CPLByCBSA,'C','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month2
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 3' THEN FORMAT(ml.CPLByCBSA,'C','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month3
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 4' THEN FORMAT(ml.CPLByCBSA,'C','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month4
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 5' THEN FORMAT(ml.CPLByCBSA,'C','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month5
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 6' THEN FORMAT(ml.CPLByCBSA,'C','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month6
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 7' THEN FORMAT(ml.CPLByCBSA,'C','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month7
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 8' THEN FORMAT(ml.CPLByCBSA,'C','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month8
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 9' THEN FORMAT(ml.CPLByCBSA,'C','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month9
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 10' THEN FORMAT(ml.CPLByCBSA,'C','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month10
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 11' THEN FORMAT(ml.CPLByCBSA,'C','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month11
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 12' THEN FORMAT(ml.CPLByCBSA,'C','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month12
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 13' THEN FORMAT(ml.CPLByCBSA,'C','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month13
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 14' THEN FORMAT(ml.CPLByCBSA,'C','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month14
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 1' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 2' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 3' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 4' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 5' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 6' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 7' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 8' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 9' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 10' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 11' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 12' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 13' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 14' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth14
FROM    #ByCBSA AS ml
UNION
SELECT  '180' AS SortOrder
       ,'Rental Rate' AS Metric
       ,CAST('' AS varchar(10)) AS Month1
       ,CAST('' AS varchar(10)) AS Month2
       ,CAST('' AS varchar(10)) AS Month3
       ,CAST('' AS varchar(10)) AS Month4
       ,CAST('' AS varchar(10)) AS Month5
       ,CAST('' AS varchar(10)) AS Month6
       ,CAST('' AS varchar(10)) AS Month7
       ,CAST('' AS varchar(10)) AS Month8
       ,CAST('' AS varchar(10)) AS Month9
       ,CAST('' AS varchar(10)) AS Month10
       ,CAST('' AS varchar(10)) AS Month11
       ,CAST('' AS varchar(10)) AS Month12
       ,CAST('' AS varchar(10)) AS Month13
       ,CAST('' AS varchar(10)) AS Month14
       ,CAST('' AS VARCHAR(10)) AS DummyMonth1
       ,CAST('' AS VARCHAR(10)) AS DummyMonth2
       ,CAST('' AS VARCHAR(10)) AS DummyMonth3
       ,CAST('' AS VARCHAR(10)) AS DummyMonth4
       ,CAST('' AS VARCHAR(10)) AS DummyMonth5
       ,CAST('' AS VARCHAR(10)) AS DummyMonth6
       ,CAST('' AS VARCHAR(10)) AS DummyMonth7
       ,CAST('' AS VARCHAR(10)) AS DummyMonth8
       ,CAST('' AS VARCHAR(10)) AS DummyMonth9
       ,CAST('' AS VARCHAR(10)) AS DummyMonth10
       ,CAST('' AS VARCHAR(10)) AS DummyMonth11
       ,CAST('' AS VARCHAR(10)) AS DummyMonth12
       ,CAST('' AS VARCHAR(10)) AS DummyMonth13
       ,CAST('' AS VARCHAR(10)) AS DummyMonth14
UNION
SELECT  '190' AS SortOrder
       ,'Property''s Rental Rate' AS Metric
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 1' THEN FORMAT(ml.PropertyRentalRate,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month1
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 2' THEN FORMAT(ml.PropertyRentalRate,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month2
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 3' THEN FORMAT(ml.PropertyRentalRate,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month3
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 4' THEN FORMAT(ml.PropertyRentalRate,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month4
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 5' THEN FORMAT(ml.PropertyRentalRate,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month5
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 6' THEN FORMAT(ml.PropertyRentalRate,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month6
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 7' THEN FORMAT(ml.PropertyRentalRate,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month7
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 8' THEN FORMAT(ml.PropertyRentalRate,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month8
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 9' THEN FORMAT(ml.PropertyRentalRate,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month9
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 10' THEN FORMAT(ml.PropertyRentalRate,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month10
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 11' THEN FORMAT(ml.PropertyRentalRate,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month11
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 12' THEN FORMAT(ml.PropertyRentalRate,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month12
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 13' THEN FORMAT(ml.PropertyRentalRate,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month13
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 14' THEN FORMAT(ml.PropertyRentalRate,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month14
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 1' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 2' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 3' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 4' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 5' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 6' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 7' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 8' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 9' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 10' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 11' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 12' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 13' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 14' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth14
FROM    #TempMartListingsData AS ml
UNION
SELECT  '200' AS SortOrder
       ,'Avg Rental Rate in Zip Code' AS Metric
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 1' THEN FORMAT(ml.AVGRentalPerZipCode,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month1
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 2' THEN FORMAT(ml.AVGRentalPerZipCode,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month2
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 3' THEN FORMAT(ml.AVGRentalPerZipCode,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month3
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 4' THEN FORMAT(ml.AVGRentalPerZipCode,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month4
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 5' THEN FORMAT(ml.AVGRentalPerZipCode,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month5
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 6' THEN FORMAT(ml.AVGRentalPerZipCode,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month6
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 7' THEN FORMAT(ml.AVGRentalPerZipCode,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month7
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 8' THEN FORMAT(ml.AVGRentalPerZipCode,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month8
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 9' THEN FORMAT(ml.AVGRentalPerZipCode,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month9
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 10' THEN FORMAT(ml.AVGRentalPerZipCode,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month10
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 11' THEN FORMAT(ml.AVGRentalPerZipCode,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month11
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 12' THEN FORMAT(ml.AVGRentalPerZipCode,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month12
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 13' THEN FORMAT(ml.AVGRentalPerZipCode,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month13
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 14' THEN FORMAT(ml.AVGRentalPerZipCode,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month14
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 1' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 2' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 3' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 4' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 5' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 6' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 7' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 8' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 9' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 10' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 11' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 12' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 13' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 14' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth14
FROM    #TempMartListingsData AS ml
UNION
SELECT  '210' AS SortOrder
       ,'Avg Rental Rate in CBSA Area' AS Metric
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 1' THEN FORMAT(ml.AvgRentalPerCBSACode,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month1
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 2' THEN FORMAT(ml.AvgRentalPerCBSACode,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month2
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 3' THEN FORMAT(ml.AvgRentalPerCBSACode,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month3
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 4' THEN FORMAT(ml.AvgRentalPerCBSACode,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month4
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 5' THEN FORMAT(ml.AvgRentalPerCBSACode,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month5
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 6' THEN FORMAT(ml.AvgRentalPerCBSACode,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month6
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 7' THEN FORMAT(ml.AvgRentalPerCBSACode,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month7
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 8' THEN FORMAT(ml.AvgRentalPerCBSACode,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month8
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 9' THEN FORMAT(ml.AvgRentalPerCBSACode,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month9
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 10' THEN FORMAT(ml.AvgRentalPerCBSACode,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month10
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 11' THEN FORMAT(ml.AvgRentalPerCBSACode,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month11
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 12' THEN FORMAT(ml.AvgRentalPerCBSACode,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month12
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 13' THEN FORMAT(ml.AvgRentalPerCBSACode,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month13
       ,CAST(MAX(ISNULL(CASE WHEN ml.Months = 'Month 14' THEN FORMAT(ml.AvgRentalPerCBSACode,'C0','en-us')
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month14
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 1' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 2' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 3' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 4' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 5' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 6' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 7' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 8' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 9' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 10' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 11' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 12' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 13' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 14' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth14
FROM    #ByCBSA AS ml
UNION
SELECT  '220' AS SortOrder
       ,'Placement' AS Metric
       ,CAST('' AS varchar(10)) AS Month1
       ,CAST('' AS varchar(10)) AS Month2
       ,CAST('' AS varchar(10)) AS Month3
       ,CAST('' AS varchar(10)) AS Month4
       ,CAST('' AS varchar(10)) AS Month5
       ,CAST('' AS varchar(10)) AS Month6
       ,CAST('' AS varchar(10)) AS Month7
       ,CAST('' AS varchar(10)) AS Month8
       ,CAST('' AS varchar(10)) AS Month9
       ,CAST('' AS varchar(10)) AS Month10
       ,CAST('' AS varchar(10)) AS Month11
       ,CAST('' AS varchar(10)) AS Month12
       ,CAST('' AS varchar(10)) AS Month13
       ,CAST('' AS varchar(10)) AS Month14
       ,CAST('' AS VARCHAR(10)) AS DummyMonth1
       ,CAST('' AS VARCHAR(10)) AS DummyMonth2
       ,CAST('' AS VARCHAR(10)) AS DummyMonth3
       ,CAST('' AS VARCHAR(10)) AS DummyMonth4
       ,CAST('' AS VARCHAR(10)) AS DummyMonth5
       ,CAST('' AS VARCHAR(10)) AS DummyMonth6
       ,CAST('' AS VARCHAR(10)) AS DummyMonth7
       ,CAST('' AS VARCHAR(10)) AS DummyMonth8
       ,CAST('' AS VARCHAR(10)) AS DummyMonth9
       ,CAST('' AS VARCHAR(10)) AS DummyMonth10
       ,CAST('' AS VARCHAR(10)) AS DummyMonth11
       ,CAST('' AS VARCHAR(10)) AS DummyMonth12
       ,CAST('' AS VARCHAR(10)) AS DummyMonth13
       ,CAST('' AS VARCHAR(10)) AS DummyMonth14
UNION
SELECT  '230' AS SortOrder
       ,'AG Desktop' AS Metric
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'AG'
                                  AND Months = 'Month 1' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month1
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'AG'
                                  AND Months = 'Month 2' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month2
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'AG'
                                  AND Months = 'Month 3' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month3
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'AG'
                                  AND Months = 'Month 4' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month4
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'AG'
                                  AND Months = 'Month 5' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month5
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'AG'
                                  AND Months = 'Month 6' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month6
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'AG'
                                  AND Months = 'Month 7' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month7
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'AG'
                                  AND Months = 'Month 8' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month8
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'AG'
                                  AND Months = 'Month 9' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month9
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'AG'
                                  AND Months = 'Month 10' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month10
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'AG'
                                  AND Months = 'Month 11' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month11
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'AG'
                                  AND Months = 'Month 12' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month12
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'AG'
                                  AND Months = 'Month 13' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month13
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'AG'
                                  AND Months = 'Month 14' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month14
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth14
FROM    #TempPlacement AS p
UNION
SELECT  '240' AS SortOrder
       ,'AG Mobile' AS Metric
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'AG Mobile'
                                  AND Months = 'Month 1' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month1
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'AG Mobile'
                                  AND Months = 'Month 2' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month2
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'AG Mobile'
                                  AND Months = 'Month 3' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month3
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'AG Mobile'
                                  AND Months = 'Month 4' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month4
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'AG Mobile'
                                  AND Months = 'Month 5' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month5
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'AG Mobile'
                                  AND Months = 'Month 6' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month6
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'AG Mobile'
                                  AND Months = 'Month 7' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month7
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'AG Mobile'
                                  AND Months = 'Month 8' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month8
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'AG Mobile'
                                  AND Months = 'Month 9' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month9
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'AG Mobile'
                                  AND Months = 'Month 10' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month10
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'AG Mobile'
                                  AND Months = 'Month 11' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month11
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'AG Mobile'
                                  AND Months = 'Month 12' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month12
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'AG Mobile'
                                  AND Months = 'Month 13' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month13
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'AG Mobile'
                                  AND Months = 'Month 14' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month14
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth14
FROM    #TempPlacement AS p
UNION
SELECT  '250' AS SortOrder
       ,'Rent Desktop' AS Metric
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'RENT'
                                  AND Months = 'Month 1' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month1
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'RENT'
                                  AND Months = 'Month 2' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month2
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'RENT'
                                  AND Months = 'Month 3' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month3
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'RENT'
                                  AND Months = 'Month 4' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month4
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'RENT'
                                  AND Months = 'Month 5' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month5
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'RENT'
                                  AND Months = 'Month 6' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month6
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'RENT'
                                  AND Months = 'Month 7' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month7
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'RENT'
                                  AND Months = 'Month 8' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month8
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'RENT'
                                  AND Months = 'Month 9' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month9
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'RENT'
                                  AND Months = 'Month 10' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month10
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'RENT'
                                  AND Months = 'Month 11' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month11
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'RENT'
                                  AND Months = 'Month 12' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month12
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'RENT'
                                  AND Months = 'Month 13' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month13
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'RENT'
                                  AND Months = 'Month 14' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month14
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth14
FROM    #TempPlacement AS p
UNION
SELECT  '260' AS SortOrder
       ,'Rent Mobile' AS Metric
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'Rent Mobile'
                                  AND Months = 'Month 1' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month1
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'Rent Mobile'
                                  AND Months = 'Month 2' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month2
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'Rent Mobile'
                                  AND Months = 'Month 3' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month3
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'Rent Mobile'
                                  AND Months = 'Month 4' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month4
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'Rent Mobile'
                                  AND Months = 'Month 5' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month5
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'Rent Mobile'
                                  AND Months = 'Month 6' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month6
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'Rent Mobile'
                                  AND Months = 'Month 7' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month7
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'Rent Mobile'
                                  AND Months = 'Month 8' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month8
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'Rent Mobile'
                                  AND Months = 'Month 9' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month9
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'Rent Mobile'
                                  AND Months = 'Month 10' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month10
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'Rent Mobile'
                                  AND Months = 'Month 11' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month11
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'Rent Mobile'
                                  AND Months = 'Month 12' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month12
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'Rent Mobile'
                                  AND Months = 'Month 13' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month13
       ,CAST(MAX(ISNULL(CASE WHEN p.SOURCE = 'Rent Mobile'
                                  AND Months = 'Month 14' THEN p.Placement
                             ELSE ' N/A'
                        END,'')) AS VARCHAR(1000)) AS Month14
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN ''
                      ELSE 'N/A'
                 END) AS VARCHAR(1000)) AS DummyMonth14
FROM    #TempPlacement AS p
UNION
SELECT  '270' AS SortOrder
       ,'Content' AS Metric
       ,CAST('' AS varchar(10)) AS Month1
       ,CAST('' AS varchar(10)) AS Month2
       ,CAST('' AS varchar(10)) AS Month3
       ,CAST('' AS varchar(10)) AS Month4
       ,CAST('' AS varchar(10)) AS Month5
       ,CAST('' AS varchar(10)) AS Month6
       ,CAST('' AS varchar(10)) AS Month7
       ,CAST('' AS varchar(10)) AS Month8
       ,CAST('' AS varchar(10)) AS Month9
       ,CAST('' AS varchar(10)) AS Month10
       ,CAST('' AS varchar(10)) AS Month11
       ,CAST('' AS varchar(10)) AS Month12
       ,CAST('' AS varchar(10)) AS Month13
       ,CAST('' AS varchar(10)) AS Month14
       ,CAST('' AS VARCHAR(10)) AS DummyMonth1
       ,CAST('' AS VARCHAR(10)) AS DummyMonth2
       ,CAST('' AS VARCHAR(10)) AS DummyMonth3
       ,CAST('' AS VARCHAR(10)) AS DummyMonth4
       ,CAST('' AS VARCHAR(10)) AS DummyMonth5
       ,CAST('' AS VARCHAR(10)) AS DummyMonth6
       ,CAST('' AS VARCHAR(10)) AS DummyMonth7
       ,CAST('' AS VARCHAR(10)) AS DummyMonth8
       ,CAST('' AS VARCHAR(10)) AS DummyMonth9
       ,CAST('' AS VARCHAR(10)) AS DummyMonth10
       ,CAST('' AS VARCHAR(10)) AS DummyMonth11
       ,CAST('' AS VARCHAR(10)) AS DummyMonth12
       ,CAST('' AS VARCHAR(10)) AS DummyMonth13
       ,CAST('' AS VARCHAR(10)) AS DummyMonth14
UNION
SELECT  '280' AS SortOrder
       ,'Number of Photos' AS Metric
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 1' THEN ml.ActivePhotos
                             ELSE ''
                        END,'')) AS VARCHAR(20)) AS Month1
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 2' THEN ml.ActivePhotos
                             ELSE ''
                        END,'')) AS VARCHAR(20)) AS Month2
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 3' THEN ml.ActivePhotos
                             ELSE ''
                        END,'')) AS VARCHAR(20)) AS Month3
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 4' THEN ml.ActivePhotos
                             ELSE ''
                        END,'')) AS VARCHAR(20)) AS Month4
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 5' THEN ml.ActivePhotos
                             ELSE ''
                        END,'')) AS VARCHAR(20)) AS Month5
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 6' THEN ml.ActivePhotos
                             ELSE ''
                        END,'')) AS VARCHAR(20)) AS Month6
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 7' THEN ml.ActivePhotos
                             ELSE ''
                        END,'')) AS VARCHAR(20)) AS Month7
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 8' THEN ml.ActivePhotos
                             ELSE ''
                        END,'')) AS VARCHAR(20)) AS Month8
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 9' THEN ml.ActivePhotos
                             ELSE ''
                        END,'')) AS VARCHAR(20)) AS Month9
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 10' THEN ml.ActivePhotos
                             ELSE ''
                        END,'')) AS VARCHAR(20)) AS Month10
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 11' THEN ml.ActivePhotos
                             ELSE ''
                        END,'')) AS VARCHAR(20)) AS Month11
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 12' THEN ml.ActivePhotos
                             ELSE ''
                        END,'')) AS VARCHAR(20)) AS Month12
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 13' THEN ml.ActivePhotos
                             ELSE ''
                        END,'')) AS VARCHAR(20)) AS Month13
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 14' THEN ml.ActivePhotos
                             ELSE ''
                        END,'')) AS VARCHAR(20)) AS Month14
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 1' THEN ml.ActivePhotos
                             ELSE ''
                        END,'')) AS VARCHAR(20)) AS DummyMonth1
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 2' THEN ml.ActivePhotos
                             ELSE ''
                        END,'')) AS VARCHAR(20)) AS DummyMonth2
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 3' THEN ml.ActivePhotos
                             ELSE ''
                        END,'')) AS VARCHAR(20)) AS DummyMonth3
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 4' THEN ml.ActivePhotos
                             ELSE ''
                        END,'')) AS VARCHAR(20)) AS DummyMonth4
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 5' THEN ml.ActivePhotos
                             ELSE ''
                        END,'')) AS VARCHAR(20)) AS DummyMonth5
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 6' THEN ml.ActivePhotos
                             ELSE ''
                        END,'')) AS VARCHAR(20)) AS DummyMonth6
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 7' THEN ml.ActivePhotos
                             ELSE ''
                        END,'')) AS VARCHAR(20)) AS DummyMonth7
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 8' THEN ml.ActivePhotos
                             ELSE ''
                        END,'')) AS VARCHAR(20)) AS DummyMonth8
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 9' THEN ml.ActivePhotos
                             ELSE ''
                        END,'')) AS VARCHAR(20)) AS DummyMonth9
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 10' THEN ml.ActivePhotos
                             ELSE ''
                        END,'')) AS VARCHAR(20)) AS DummyMonth10
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 11' THEN ml.ActivePhotos
                             ELSE ''
                        END,'')) AS VARCHAR(20)) AS DummyMonth11
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 12' THEN ml.ActivePhotos
                             ELSE ''
                        END,'')) AS VARCHAR(20)) AS DummyMonth12
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 13' THEN ml.ActivePhotos
                             ELSE ''
                        END,'')) AS VARCHAR(20)) AS DummyMonth13
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 14' THEN ml.ActivePhotos
                             ELSE ''
                        END,'')) AS VARCHAR(20)) AS DummyMonth14
FROM    #TempMartListingsData AS ml
UNION
SELECT  '290' AS SortOrder
       ,'Coupon' AS Metric
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 1' THEN mleom.Coupon
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month1
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 2' THEN mleom.Coupon
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month2
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 3' THEN mleom.Coupon
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month3
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 4' THEN mleom.Coupon
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month4
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 5' THEN mleom.Coupon
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month5
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 6' THEN mleom.Coupon
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month6
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 7' THEN mleom.Coupon
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month7
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 8' THEN mleom.Coupon
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month8
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 9' THEN mleom.Coupon
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month9
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 10' THEN mleom.Coupon
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month10
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 11' THEN mleom.Coupon
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month11
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 12' THEN mleom.Coupon
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month12
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 13' THEN mleom.Coupon
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month13
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 14' THEN mleom.Coupon
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month14
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth14
FROM    #TempEndOfMonthMartListingsData AS mleom
UNION
SELECT  '300' AS SortOrder
       ,'CR3' AS Metric
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 1' THEN mleom.CR3
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month1
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 2' THEN mleom.CR3
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month2
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 3' THEN mleom.CR3
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month3
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 4' THEN mleom.CR3
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month4
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 5' THEN mleom.CR3
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month5
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 6' THEN mleom.CR3
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month6
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 7' THEN mleom.CR3
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month7
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 8' THEN mleom.CR3
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month8
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 9' THEN mleom.CR3
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month9
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 10' THEN mleom.CR3
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month10
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 11' THEN mleom.CR3
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month11
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 12' THEN mleom.CR3
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month12
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 13' THEN mleom.CR3
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month13
       ,CAST(MAX(ISNULL(CASE WHEN Months = 'Month 14' THEN mleom.CR3
                             ELSE ''
                        END,'')) AS VARCHAR(10)) AS Month14
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth14
FROM    #TempEndOfMonthMartListingsData AS mleom
UNION
SELECT  '310' AS SortOrder
       ,'Call Analysis' AS Metric
       ,CAST('' AS varchar(10)) AS Month1
       ,CAST('' AS varchar(10)) AS Month2
       ,CAST('' AS varchar(10)) AS Month3
       ,CAST('' AS varchar(10)) AS Month4
       ,CAST('' AS varchar(10)) AS Month5
       ,CAST('' AS varchar(10)) AS Month6
       ,CAST('' AS varchar(10)) AS Month7
       ,CAST('' AS varchar(10)) AS Month8
       ,CAST('' AS varchar(10)) AS Month9
       ,CAST('' AS varchar(10)) AS Month10
       ,CAST('' AS varchar(10)) AS Month11
       ,CAST('' AS varchar(10)) AS Month12
       ,CAST('' AS varchar(10)) AS Month13
       ,CAST('' AS varchar(10)) AS Month14
       ,CAST('' AS VARCHAR(10)) AS DummyMonth1
       ,CAST('' AS VARCHAR(10)) AS DummyMonth2
       ,CAST('' AS VARCHAR(10)) AS DummyMonth3
       ,CAST('' AS VARCHAR(10)) AS DummyMonth4
       ,CAST('' AS VARCHAR(10)) AS DummyMonth5
       ,CAST('' AS VARCHAR(10)) AS DummyMonth6
       ,CAST('' AS VARCHAR(10)) AS DummyMonth7
       ,CAST('' AS VARCHAR(10)) AS DummyMonth8
       ,CAST('' AS VARCHAR(10)) AS DummyMonth9
       ,CAST('' AS VARCHAR(10)) AS DummyMonth10
       ,CAST('' AS VARCHAR(10)) AS DummyMonth11
       ,CAST('' AS VARCHAR(10)) AS DummyMonth12
       ,CAST('' AS VARCHAR(10)) AS DummyMonth13
       ,CAST('' AS VARCHAR(10)) AS DummyMonth14
UNION
SELECT  '320' AS SortOrder
       ,'Missed Calls %' AS Metric
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 1' THEN c.MissedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS Month1
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 2' THEN c.MissedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS Month2
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 3' THEN c.MissedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS Month3
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 4' THEN c.MissedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS Month4
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 5' THEN c.MissedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS Month5
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 6' THEN c.MissedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS Month6
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 7' THEN c.MissedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS Month7
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 8' THEN c.MissedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS Month8
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 9' THEN c.MissedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS Month9
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 10' THEN c.MissedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS Month10
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 11' THEN c.MissedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS Month11
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 12' THEN c.MissedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS Month12
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 13' THEN c.MissedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS Month13
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 14' THEN c.MissedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS Month14
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 1' THEN c.MissedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS DummyMonth1
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 2' THEN c.MissedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS DummyMonth2
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 3' THEN c.MissedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS DummyMonth3
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 4' THEN c.MissedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS DummyMonth4
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 5' THEN c.MissedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS DummyMonth5
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 6' THEN c.MissedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS DummyMonth6
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 7' THEN c.MissedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS DummyMonth7
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 8' THEN c.MissedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS DummyMonth8
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 9' THEN c.MissedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS DummyMonth9
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 10' THEN c.MissedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS DummyMonth10
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 11' THEN c.MissedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS DummyMonth11
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 12' THEN c.MissedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS DummyMonth12
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 13' THEN c.MissedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS DummyMonth13
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 14' THEN c.MissedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS DummyMonth14
FROM    #TempCalls AS c
UNION
SELECT  '330' AS SortOrder
       ,'Abandoned Calls %' AS Metric
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 1' THEN c.AbandonedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS Month1
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 2' THEN c.AbandonedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS Month2
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 3' THEN c.AbandonedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS Month3
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 4' THEN c.AbandonedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS Month4
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 5' THEN c.AbandonedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS Month5
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 6' THEN c.AbandonedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS Month6
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 7' THEN c.AbandonedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS Month7
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 8' THEN c.AbandonedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS Month8
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 9' THEN c.AbandonedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS Month9
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 10' THEN c.AbandonedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS Month10
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 11' THEN c.AbandonedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS Month11
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 12' THEN c.AbandonedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS Month12
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 13' THEN c.AbandonedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS Month13
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 14' THEN c.AbandonedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS Month14
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 1' THEN c.AbandonedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS DummyMonth1
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 2' THEN c.AbandonedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS DummyMonth2
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 3' THEN c.AbandonedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS DummyMonth3
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 4' THEN c.AbandonedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS DummyMonth4
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 5' THEN c.AbandonedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS DummyMonth5
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 6' THEN c.AbandonedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS DummyMonth6
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 7' THEN c.AbandonedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS DummyMonth7
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 8' THEN c.AbandonedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS DummyMonth8
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 9' THEN c.AbandonedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS DummyMonth9
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 10' THEN c.AbandonedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS DummyMonth10
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 11' THEN c.AbandonedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS DummyMonth11
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 12' THEN c.AbandonedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS DummyMonth12
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 13' THEN c.AbandonedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS DummyMonth13
       ,CAST(CAST(MAX(CASE WHEN Months = 'Month 14' THEN c.AbandonedCalls * 100
                           ELSE 0
                      END) AS INT) AS VARCHAR(20)) AS DummyMonth14
FROM    #TempCalls AS c
UNION
SELECT  '340' AS SortOrder
       ,'Avg Wait Time' AS Metric
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN c.AvgWaitTime
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN c.AvgWaitTime
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN c.AvgWaitTime
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN c.AvgWaitTime
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN c.AvgWaitTime
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN c.AvgWaitTime
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN c.AvgWaitTime
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN c.AvgWaitTime
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN c.AvgWaitTime
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN c.AvgWaitTime
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN c.AvgWaitTime
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN c.AvgWaitTime
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN c.AvgWaitTime
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN c.AvgWaitTime
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month14
       ,CAST(MAX(CASE WHEN Months = 'Month 1' THEN c.AvgWaitTimeBeforeConversion
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN Months = 'Month 2' THEN c.AvgWaitTimeBeforeConversion
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN Months = 'Month 3' THEN c.AvgWaitTimeBeforeConversion
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN Months = 'Month 4' THEN c.AvgWaitTimeBeforeConversion
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN Months = 'Month 5' THEN c.AvgWaitTimeBeforeConversion
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN Months = 'Month 6' THEN c.AvgWaitTimeBeforeConversion
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN Months = 'Month 7' THEN c.AvgWaitTimeBeforeConversion
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN Months = 'Month 8' THEN c.AvgWaitTimeBeforeConversion
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN Months = 'Month 9' THEN c.AvgWaitTimeBeforeConversion
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN Months = 'Month 10' THEN c.AvgWaitTimeBeforeConversion
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN Months = 'Month 11' THEN c.AvgWaitTimeBeforeConversion
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN Months = 'Month 12' THEN c.AvgWaitTimeBeforeConversion
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN Months = 'Month 13' THEN c.AvgWaitTimeBeforeConversion
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN Months = 'Month 14' THEN c.AvgWaitTimeBeforeConversion
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth14
FROM    #TempCalls AS c
UNION
SELECT  '350' AS SortOrder
       ,'Max Leases' AS Metric
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 1' THEN md.MaxLease
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month1
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 2' THEN md.MaxLease
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month2
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 3' THEN md.MaxLease
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month3
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 4' THEN md.MaxLease
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month4
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 5' THEN md.MaxLease
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month5
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 6' THEN md.MaxLease
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month6
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 7' THEN md.MaxLease
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month7
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 8' THEN md.MaxLease
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month8
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 9' THEN md.MaxLease
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month9
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 10' THEN md.MaxLease
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month10
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 11' THEN md.MaxLease
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month11
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 12' THEN md.MaxLease
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month12
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 13' THEN md.MaxLease
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month13
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 14' THEN md.MaxLease
                      ELSE ''
                 END) AS VARCHAR(10)) AS Month14
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 1' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth1
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 2' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth2
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 3' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth3
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 4' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth4
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 5' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth5
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 6' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth6
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 7' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth7
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 8' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth8
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 9' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth9
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 10' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth10
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 11' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth11
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 12' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth12
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 13' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth13
       ,CAST(MAX(CASE WHEN ml.Months = 'Month 14' THEN ''
                      ELSE ''
                 END) AS VARCHAR(10)) AS DummyMonth14
FROM    #TempMartListingsData AS ml
JOIN    #TempMaxData AS md
        ON md.YearMonth = ml.YearMonth
           AND md.ListingID = ml.ListingID;
		
--INSERT  INTO Staging.PropAnalysisLog
--        (ListingID,StepNum,Step,EndTime)
--VALUES  (@ListingID
--		,13
--        ,'Reports.rpt_LowLeadsReport completed'  -- Step - varchar(1000)
--        ,GETDATE());

SET NOCOUNT OFF;






GO
/****** Object:  StoredProcedure [Reports].[rpt_LRSMetrics]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Reports].[rpt_LRSMetrics] (
    @StartYMDDate DATETIME
   ,@MgtCoID INT)

/*************************************************************************************************************
* Name: reports.rpt_LRSMetrics
* Desc: Property Phone leads by Management Company that either have a duration of 10 or less seconds or it was made afterhours.
* Test: EXEC reports.Rpt_LRSMetrics '01/01/2017','7497'
* Test: EXEC reports.Rpt_LRSMetrics '02/01/2017','6020'
* -------------------------------------------------------------------------------------------------------------
* Hist:		01		03/14/2017	Kimberley Morrow		Case # 01407420 - Initial Version
* Hist:     02      04/25/2017  Richard Chen            Case #01457450
* Hist:     03      05/02/2017  Richard Chen            case #01461671    Chage CallstartDatetime from EST to Property localtime
*************************************************************************************************************/
AS
SET NOCOUNT ON;
BEGIN

------------------------------
/*Declare & set variables*/
------------------------------
    DECLARE @StartYMDID INT
       ,@EndYMDID INT;

    SET @StartYMDID = CAST(CONVERT(VARCHAR(10),@StartYMDDate,112) AS INT);
    SET @EndYMDID = CAST(CONVERT(VARCHAR(10),DATEADD(D,-1,DATEADD(M,1,@StartYMDDate)),112) AS INT);

------------------------------
/*Drop temp tables*/
------------------------------
    BEGIN TRY
        DROP TABLE #LRSPhoneCalls;
    END TRY
    BEGIN CATCH 
    END CATCH;


    BEGIN TRY
        DROP TABLE #AllPhoneCalls;
    END TRY
    BEGIN CATCH 
    END CATCH;

------------------------------
/*Pull in RentPath phone calls for selected management company and assign flags for afterhour phone calls and duration <= 10 seconds*/
------------------------------
    SELECT  y.ListingID
           ,y.PropertyName
           ,y.PropertyAddress
           ,y.PropertyCity
           ,y.PropertyState
           ,y.MgtCoName
           ,y.TotalUnits
           ,y.MarketName
           ,y.AdvertiserStatus
           ,SUM(y.LRSFlag10) AS CallUnder10Sec
           ,SUM(y.LRSFlag15) AS CallUnder15Sec
		   ,SUM(y.LRSFlag20) AS CallUnder20Sec
           ,SUM(y.LRSFlag30) AS CallUnder30Sec
           ,SUM(y.AfterHourFlag10) AS AfterHourCallUnder10Sec
           ,SUM(y.AfterHourFlag15) AS AfterHourCallUnder15Sec
           ,SUM(y.AfterHourFlag) AS AfterHourCallOver15Sec
		   ,sum(y.allAfterHourFlag6PM) As TotalCallAfterHour6PM
    INTO    #LRSPhoneCalls
    FROM    (
             SELECT cag.ListingID
                   ,cr.PropertyName
                   ,cr.PropertyAddress
                   ,cr.PropertyCity
                   ,cr.PropertyState
                   ,cr.MgtCoNameAG AS MgtCoName
                   ,cr.PropertyTotalUnits AS TotalUnits
                   ,cr.MarketName
                   ,a.Property_Joint_Advertiser__c AS AdvertiserStatus
                   -- Formula for localtime.  First change easter time to GMT,then, add utc to change to localtime
				   --,dateAdd(HH, 5+cast(cast(zm.utc as decimal) as int), dateAdd(HH, 5+cast(cast(zm.utc as decimal) as int), cag.CallStartDateTime)) as localTime
                   ,CONVERT(VARCHAR(10),dateAdd(HH, 5+cast(cast(zm.utc as decimal) as int), cag.CallStartDateTime),101) AS CallDate
                   ,SUBSTRING(CONVERT(VARCHAR(30),dateAdd(HH, 5+cast(cast(zm.utc as decimal) as int), cag.CallStartDateTime),100),13,7) AS CallTime
                   ,CASE WHEN CAST(SUBSTRING(CONVERT(VARCHAR(30),dateAdd(HH, 5+cast(cast(zm.utc as decimal) as int), cag.CallStartDateTime),100),13,7) AS TIME) > '5:00PM'
                              AND ISNULL(cag.DurationInSeconds,0) <= 10 THEN 1
                         WHEN CAST(SUBSTRING(CONVERT(VARCHAR(30),dateAdd(HH, 5+cast(cast(zm.utc as decimal) as int), cag.CallStartDateTime),100),13,7) AS TIME) < '9:00AM'
                              AND ISNULL(cag.DurationInSeconds,0) <= 10 THEN 1
                         ELSE 0
                    END AS AfterHourFlag10
                   ,CASE WHEN CAST(SUBSTRING(CONVERT(VARCHAR(30),dateAdd(HH, 5+cast(cast(zm.utc as decimal) as int), cag.CallStartDateTime),100),13,7) AS TIME) > '5:00PM'
                              AND ISNULL(cag.DurationInSeconds,0) BETWEEN 11 AND 15 THEN 1
                         WHEN CAST(SUBSTRING(CONVERT(VARCHAR(30),dateAdd(HH, 5+cast(cast(zm.utc as decimal) as int), cag.CallStartDateTime),100),13,7) AS TIME) < '9:00AM'
                              AND ISNULL(cag.DurationInSeconds,0) BETWEEN 11 AND 15 THEN 1
                         ELSE 0
                    END AS AfterHourFlag15
                   ,CASE WHEN CAST(SUBSTRING(CONVERT(VARCHAR(30),dateAdd(HH, 5+cast(cast(zm.utc as decimal) as int), cag.CallStartDateTime),100),13,7) AS TIME) > '5:00PM'
                              AND ISNULL(cag.DurationInSeconds,0) > 15 THEN 1
                         WHEN CAST(SUBSTRING(CONVERT(VARCHAR(30),dateAdd(HH, 5+cast(cast(zm.utc as decimal) as int), cag.CallStartDateTime),100),13,7) AS TIME) < '9:00AM'
                              AND ISNULL(cag.DurationInSeconds,0) > 15 THEN 1
                         ELSE 0
                    END AS AfterHourFlag
                   ,CASE WHEN CAST(SUBSTRING(CONVERT(VARCHAR(30),dateAdd(HH, 5+cast(cast(zm.utc as decimal) as int), cag.CallStartDateTime),100),13,7) AS TIME) > '6:00PM'  THEN 1
                         when  CAST(SUBSTRING(CONVERT(VARCHAR(30),dateAdd(HH, 5+cast(cast(zm.utc as decimal) as int), cag.CallStartDateTime),100),13,7) AS TIME) < '9:00AM'  THEN 1
                         ELSE 0
                    END AS allAfterHourFlag6PM
                   ,ISNULL(cag.CallerPhoneNumber,'') AS CallerPhoneNumber
                   ,cag.CallerName
                   ,ISNULL(cag.CallerLocation,'') AS CallerLocation
                   ,CASE cag.CallStatus
                      WHEN 1 THEN 'Connected'
                      WHEN 2 THEN 'Busy'
                      WHEN 3 THEN 'Missed'
                      ELSE 'Other'
                    END AS CallStatus
                   ,cag.IsAbandoned
                   ,ISNULL(cag.DurationInSeconds,0) AS DurationInSeconds
                   ,CASE WHEN ISNULL(cag.DurationInSeconds,0) <= 10 THEN 1
                         ELSE 0
                    END AS LRSFlag10
                   ,CASE WHEN ISNULL(cag.DurationInSeconds,0) BETWEEN 11 AND 15 THEN 1
                         ELSE 0
                    END AS LRSFlag15
					,CASE WHEN ISNULL(cag.DurationInSeconds,0) BETWEEN 16 AND 20 THEN 1
                         ELSE 0
                    END AS LRSFlag20
					,CASE WHEN ISNULL(cag.DurationInSeconds,0) BETWEEN 21 AND 30 THEN 1
                         ELSE 0
                    END AS LRSFlag30
             FROM   RentPath.Mart.PhoneLeads AS cag
             LEFT OUTER JOIN RentPath.Dimension.Listings AS cr
                    ON cr.ListingID = cag.ListingID
             LEFT OUTER JOIN dbautility.dbo.zipmsa zm
			        ON cr.PropertyZipCode=zm.ZIPCode and zm.citytype='D'
             LEFT OUTER JOIN SalesForce.dbo.Account AS a
                    ON cr.SFPropertyAcctID = a.Id
             WHERE  cag.YMDID BETWEEN @StartYMDID AND @EndYMDID
                    AND cag.CallType <> 'CRAIGSLIST'
                    AND cr.MgtCoIDAG = @MgtCoID
                    AND cag.CallStatus IN (1,3)
            ) AS y
    GROUP BY y.ListingID
           ,y.PropertyName
           ,y.PropertyAddress
           ,y.PropertyCity
           ,y.PropertyState
           ,y.MgtCoName
           ,y.TotalUnits
           ,y.MarketName
           ,y.AdvertiserStatus;


------------------------------
/*AllPhoneLeads*/
------------------------------

    SELECT  ListingID
           ,SUM(PhoneLeads) + SUM(MissedCalls) AS AllPhoneLeads
    INTO    #AllPhoneCalls
    FROM    RentPath.Mart.Listings
    WHERE   YMDID BETWEEN @StartYMDID AND @EndYMDID
    GROUP BY ListingID;



--------------------------------
--/*Final Results*/
--------------------------------

    SELECT  l.ListingID
           ,l.PropertyName
           ,l.PropertyAddress
           ,l.PropertyCity
           ,l.PropertyState
           ,l.MgtCoName
           ,l.TotalUnits
           ,l.MarketName
           ,l.AdvertiserStatus
           ,l.CallUnder10Sec
           ,l.CallUnder15Sec
           ,l.CallUnder20Sec
           ,l.CallUnder30Sec
           ,l.AfterHourCallUnder10Sec
           ,l.AfterHourCallUnder15Sec
           ,l.AfterHourCallOver15Sec
		   ,l.TotalCallAfterHour6PM
           ,a.AllPhoneLeads
    FROM    #LRSPhoneCalls AS l
    JOIN    #AllPhoneCalls AS a
            ON l.ListingID = a.ListingID
    ORDER BY PropertyName;


END;
SET NOCOUNT OFF;








GO
/****** Object:  StoredProcedure [Reports].[rpt_ManagementCompanyPropList]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE [Reports].[rpt_ManagementCompanyPropList] (@mgtcoid INT)

/*******************************************************************************************
* Name:	Reports.rpt_ManagementCompanyPropList
* ------------------------------------------------------------------------------------------
* Desc:	Just provides a list of any active AG or Rent properties under the management company
* ------------------------------------------------------------------------------------------
* Test:	EXEC Reports.rpt_ManagementCompanyPropList 13144
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist:	01	10/22/2015	Colleen Rocks		Ticket 21206; initial version
* Hist: 02	11/23/2015	Colleen Rocks		Ticket 21488; add AG URL and Rent.com URL
* Hist: 03	02/10/2016	Colleen Rocks		Ticket 22111; add categories, feeds and AG site
* Hist: 04	07/05/2016	Colleen Rocks		Ticket 23355; added coupon information
* Hist: 05	07/13/2016	Colleen Rocks		Ticket 23488; add opt out of photo and floorplan feed
* Hist: 06	08/01/2016	Colleen Rocks		Ticket 23452; replace sfdccommunityid with sfpropertyacctid			
********************************************************************************************/
AS
BEGIN
    SET NOCOUNT ON;

-------------------------------------
/*Declare variables*/
-------------------------------------
    DECLARE @OracleCmd NVARCHAR(4000);

-------------------------------------
/*Drop temp tables*/
-------------------------------------
    IF OBJECT_ID('tempdb..#AGURLs') IS NOT NULL
        BEGIN
            DROP TABLE #AGURLs
        END;

    IF OBJECT_ID('tempdb..#RentURLs') IS NOT NULL
        BEGIN
            DROP TABLE #RentURLs
        END;

-------------------------------------
/*Create table for website URLs*/
-------------------------------------
    CREATE TABLE #AGURLs (
        ListingID INT
       ,OptOutFeedPhotos INT
	   ,OptOutFeedFPImages INT
	   ,AGPropertyURL VARCHAR(150));

-------------------------------------
/*Populate table from Oracle*/
-------------------------------------
    SELECT  @OracleCmd = N'SELECT oq.listingid
								,oq.optoutfeedphotos
								,oq.optoutfeedfpimages
								,oq.AGPropertyURL
							FROM OPENQUERY([ORACLEAPTG],''SELECT pl.listingid
								,pl.optoutfeedphotos
								,pl.optoutfeedfpimages
								,''''www.apartmentguide.com/''''|| MAX(pe.ListingSEOPath) AS AGPropertyURL
							FROM properties.proplistings pl
							JOIN properties.properties p
								ON pl.propertyid = p.propertyid
							JOIN properties.endeca_apt60_view pe
								ON p.propertyid = pe.propertyid
							WHERE pl.mgtcoid = ' + CAST(@mgtcoid AS VARCHAR) + '
							GROUP BY pl.listingid
								,pl.optoutfeedphotos
								,pl.optoutfeedfpimages'') AS oq';
    INSERT  INTO #AGURLs
            (ListingID
            ,OptOutFeedPhotos
            ,OptOutFeedFPImages
            ,AGPropertyURL)
            EXECUTE sp_executesql
                @OracleCmd;

    SET @OracleCmd = NULL;

-------------------------------------
/*Create table for website URLs*/
-------------------------------------
    CREATE TABLE #RentURLs (
        ListingID INT
       ,OptOutFeedPhotos INT
	   ,OptOutFeedFPImages INT
       ,RentPropertyURL VARCHAR(150));

-------------------------------------
/*Populate table from Oracle*/
-------------------------------------
    SELECT  @OracleCmd = N'SELECT oq.listingid
								,oq.optoutfeedphotos
								,oq.optoutfeedfpimages
								,oq.RentPropertyURL
							FROM OPENQUERY([ORACLEAPTG],''SELECT pl.listingid
								,pl.optoutfeedphotos
								,pl.optoutfeedfpimages
								,''''www.rent.com/''''||MAX(pa.ListingSEOPath) AS RentPropertyURL
							FROM properties.proplistings pl
							JOIN properties.properties p
								ON pl.propertyid = p.propertyid
							JOIN properties.endeca_rent_view_15 pa
								ON p.rentpropertyid = pa.listingid
							WHERE pl.rentmgtcoid = ' + CAST(@mgtcoid AS VARCHAR) + '
							GROUP BY pl.listingid
								,pl.optoutfeedphotos
								,pl.optoutfeedfpimages'') AS oq';
    INSERT  INTO #RentURLs
            (ListingID
            ,OptOutFeedPhotos
            ,OptOutFeedFPImages
            ,RentPropertyURL)
            EXECUTE sp_executesql
                @OracleCmd;

-------------------------------------
/*Get final resultset*/
-------------------------------------
    SELECT  l.PropertyName
           ,l.PropertyAddress
           ,l.PropertyCity
           ,l.PropertyState
           ,l.PropertyZipCode
           ,CONCAT(l.CBSAName,' - ',l.CBSACode) AS CBSA
           ,CASE WHEN l.StatusIDAG = 1
                      AND l.StatusIDRent = 1 THEN 'Joint'
                 WHEN l.StatusIDAG = 1
                      AND l.StatusIDRent = 0 THEN 'AG Only'
                 WHEN l.StatusIDAG = 0
                      AND l.StatusIDRent = 1 THEN 'Rent Only'
            END AS JointAdvertising
           ,l.ListingID
           ,l.PropertyIDAG
           ,l.PropertyIDRent
           ,l.sfpropertyacctid
           ,CONCAT(l.MarketName,' - ',l.MarketCD) AS Market
           ,CONCAT(l.MgtCoNameAG,' - ',l.MgtCoIDAG) AS AGMgtCompany
           ,CONCAT(l.MgtCoNameRent,' - ',l.MgtCoIDRent) AS RentMgtCompany
           ,l.PropertyTotalUnits
           ,l.ListingPricingSource
           ,l.ListingDetailsSource
		   ,CASE WHEN ISNULL(ul.OptOutFeedPhotos,rul.OptOutFeedPhotos) = 1 THEN 'Y' ELSE 'N' END AS OptOutPhotoFeed
		   ,CASE WHEN ISNULL(ul.OptOutFeedFPImages,rul.OptOutFeedFPImages) = 1 THEN 'Y' ELSE 'N' END AS OptOutFloorPlanFeed
           ,CASE WHEN l.UpsellAGSites = 1 THEN 'Y' ELSE 'N' END AS UpsellAGSites
           ,l.UpsellAGSitesCustomURL
           ,l.LowPrice
           ,l.HighPrice
           ,l.PropertyContactPhone
           ,l.WebMobileTargetAG
           ,l.WebTollFreeAG
           ,l.MobileTollFreeAG
           ,l.WebTargetRent
           ,l.WebTollFreeRent
           ,l.MobileTargetRent
           ,l.MobileTollFreeRent
           ,l.WebTargetRentals
           ,l.WebTollFreeRentals
           ,CASE WHEN l.CallRecordingOptOut = 1 THEN 'Y'
                 ELSE 'N'
            END AS OptedOutCallRecording
           ,CASE WHEN l.Whisper = 1 THEN 'Y'
                 ELSE 'N'
            END AS WhisperOn
           ,l.LeadEmailWithTypeAG
           ,l.LeadEmailWithTypeRent
           ,l.PhoneLeadRecapEmail
           ,l.ActiveAmenities
           ,l.ActiveFloorplans
           ,l.ActiveHDFloorplans
           ,l.ActivePhotos
           ,l.ActiveHDPhotos
           ,CASE WHEN l.HasCR3 = 1 THEN 'Yes'
                 ELSE 'No'
            END AS HasCR3
           ,l.CR3AvgOverallRatingAG
           ,l.CR3AvgOverallRatingRent
           ,CASE l.PlacementTierAG
              WHEN 5 THEN 'Diamond'
              WHEN 10 THEN 'Platinum'
              WHEN 20 THEN 'Gold'
              WHEN 30 THEN 'Silver'
              ELSE 'No Tier'
            END AS AGPlacementTier
           ,CASE l.PlacementTierRent
              WHEN 5 THEN 'Diamond'
              WHEN 10 THEN 'Platinum'
              WHEN 20 THEN 'Gold'
              WHEN 30 THEN 'Silver'
              ELSE 'No Tier'
            END AS RentPlacementTier
           ,l.ContractLoyaltyPoints + l.InternetProductPoints + l.LegacyLoyaltyPoints + l.MobilePoints + l.PrintProductPoints AS TotalPoints
           ,ul.AGPropertyURL
           ,rul.RentPropertyURL
           ,CASE WHEN l.BadgeCollege = 1 THEN 'Y'
                 ELSE 'N'
            END AS College
           ,CASE WHEN l.BadgeCorporate = 1 THEN 'Y'
                 ELSE 'N'
            END AS Corporate
           ,CASE WHEN l.BadgeIncomeRestricted = 1 THEN 'Y'
                 ELSE 'N'
            END AS IncomeRestricted
           ,CASE WHEN l.BadgeLuxury = 1 THEN 'Y'
                 ELSE 'N'
            END AS Luxury
           ,CASE WHEN l.BadgeMilitary = 1 THEN 'Y'
                 ELSE 'N'
            END AS Military
           ,CASE WHEN l.BadgePetFriendly = 1 THEN 'Y'
                 ELSE 'N'
            END AS PetFriendly
           ,CASE WHEN l.BadgeSenior = 1 THEN 'Y'
                 ELSE 'N'
            END AS Senior
		   ,CASE WHEN l.ActiveCoupon = 1 THEN 'Y'
                 ELSE 'N'
            END AS Coupon
           ,CONVERT(VARCHAR(10),l.WebCouponExpirationDate,101) AS WebCouponExpirationDate
           ,CASE WHEN l.WebCouponText = '' THEN 'N/A' ELSE l.WebCouponText END AS WebCouponText
	FROM    RentPath.Dimension.Listings AS l
    LEFT JOIN #AGURLs AS ul
            ON l.ListingID = ul.ListingID
    LEFT JOIN #RentURLs AS rul
            ON l.ListingID = rul.ListingID
    WHERE   (l.MgtCoIDAG = @mgtcoid
             OR l.MgtCoIDRent = @mgtcoid)
            AND (l.StatusIDAG = 1
                 OR l.StatusIDRent = 1);

    SET NOCOUNT OFF;
END 









GO
/****** Object:  StoredProcedure [Reports].[rpt_ManagementContentScorecard]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Reports].[rpt_ManagementContentScorecard]
	(
	@iMgtCoID VARCHAR (15) 
	,@iCBSACode VARCHAR(4000) 
	)
/*************************************************************************************************
*
* Name:	Reports.rpt_ManagementContentScorecard
*
* Desc:	This replaces the RPT_CONTENT_SCORECARD procedure on SQLSERVERSEL on APTG
*
* Test:	EXEC Reports.rpt_ManagementContentScorecard 10857,'12060,28140,19820'
*		EXEC Reports.rpt_ManagementContentScorecard 6008,'14460,14500,14860,19740,25540,28580,31080,31100,33100,35620,36740,37100,37980,38060,39300,40140,41740,41860,41940,42660,44140,47900,49340'
*		EXEC Reports.rpt_ManagementContentScorecard_Bob_21977 7654,'13820,19100,26420,33100,41700'
*		EXEC Reports.rpt_ManagementContentScorecard_Bob_21977 7436, '12940,35380,38100'
*
*
* Note: I pretty much pulled verbatim from the Oracle proc but utilized a temp table and 
*		Dimension Listings to improve performance. Also changed CR3 logic based on information in
*		ticket # 15174.
*
* Hist:	01	04/24/2014		Sarah Mims						Initial Version. Ticket # 15263.
* Hist:	02	06/06/2014		Chadwick Smith					tik#15858 Now handles "Select All" in the MgtCo dropdown (mgtcoid = -1)
* Hist:	03	07/22/2014		Chadwick Smith					tik#16085 Added HasLinked3DFloorPlans, HasLinkedRoomPlanners, HasMobileDeal
* Hist: 04  12/16/2014		Colleen Rocks/Sarah Mims		No ticket - No longer using website parameter; combine AG & Rent leads to be RentPath leads
* Hist:	05	01/26/2016		Brian Trembley					tik#21591 remove roomplanner
* Hist: 06	01/28/2016		Bob Langley						Ticket 21977 - Add new CR3 columns to SPROC for the report
**************************************************************************************************/
AS
SET NOCOUNT ON


/* Testing  
DECLARE @iMgtCoID VARCHAR (15)
DECLARE @iCBSACode VARCHAR(4000) 
SET @iMgtCoID='7654'
SET @iCBSACode='13820,19100,26420,33100,41700'

--SET @iMgtCoID='100007776'
--SET @iCBSACode='16700,24540,28140,46700'
*/


--DIAG     - Get values that are ran through this SPROC
BEGIN TRY
	INSERT INTO Sandbox.dbo.Bob_Test_SPROC_Execution VALUES (GETDATE(),'RentPath.Reports.rpt_ManagementContentScorecard_Bob_21977',USER,
				'@iMgtCoID=' + CONVERT(varchar(15),@iMgtCoID) 
				+ ', @iCBSACode=' + CONVERT(varchar(400),@iCBSACode) 
				)
END TRY
BEGIN CATCH
END CATCH


DECLARE @SQL NVARCHAR (4000)


---------------------------------
--Drop temp tables if NOT NULL
---------------------------------
IF OBJECT_ID('tempdb..#CR3Data') IS NOT NULL
	BEGIN
		DROP TABLE #CR3Data
	END		  

IF OBJECT_ID('tempdb..#NationalListings') IS NOT NULL
	BEGIN
		DROP TABLE #NationalListings
	END	
/* ============================================================================================ */
BEGIN TRY
	DROP TABLE #tmpcr3info
END TRY
BEGIN CATCH
END CATCH


SELECT COALESCE(dl1.ListingID, dl2.ListingID) AS ListingID
,COALESCE(dl1.PropertyIDAG,dl2.PropertyIDAG) AS PropertyIDAG
,COALESCE(dl1.PropertyIDRent,dl2.PropertyIDRent) AS PropertyIDRent
,AvgRatingPublishedAG
,AvgRatingPublishedRent
,(CASE WHEN cr3.MostRecentActiveReview = CONVERT(date,'01/01/1900') THEN NULL ELSE cr3.MostRecentActiveReview END) AS MostRecentActiveReview
,dl1.MgtCoNameAG
,dl2.MgtCoNameRent
INTO #tmpcr3info
FROM CR3.Conformed.Property cr3 WITH (NOLOCK)
LEFT OUTER JOIN RentPath.Dimension.Listings dl1 WITH (NOLOCK)
	ON dl1.PropertyIDAG = cr3.PropertyIDAG
LEFT OUTER JOIN RentPath.Dimension.Listings dl2 WITH (NOLOCK)
	ON dl2.PropertyIDRent = cr3.PropertyIDRent





--SELECT * FROM #tmpcr3info ORDER BY ListingID

--SELECT * FROM #tmpcr3info WHERE MgtCoNameAG LIKE '%Ventron Management Company, LLC%' ORDER BY ListingID

--SELECT * FROM #tmpcr3info WHERE AvgRatingPublishedAG <> 0 AND AvgRatingPublishedRent <> 0 ORDER BY ListingID


/* ============================================================================================ */
---------------------------------
--Pull in CR3 Data
---------------------------------
CREATE TABLE #CR3Data
(ListingID INT
,CR3Reviews INT)



SET @SQL = N'SELECT o.LISTINGID
				,o.CR3REVIEWS
		   FROM OPENQUERY(ORACLEAPTG,''SELECT LISTINGID
										,CR3Reviews
										FROM PROPERTIES.PROPLISTINGS pl
										JOIN
											(
											SELECT PROPERTYID
											,COUNT(ReviewID) AS CR3Reviews  
											FROM RATING.REVIEW_INFO_VIEW
											WHERE PUBLISHED  = 1
											GROUP BY PROPERTYID
											) y
										ON pl.PROPERTYID = y.PROPERTYID''
							) AS o'
--PRINT @SQL

INSERT INTO #CR3Data
EXECUTE sp_executeSQL @SQL

----------------------------------------------------------------------
--Grab base dataset (all active listings) and dump into temp table
----------------------------------------------------------------------

SELECT x.ListingID
	,x.NumActivePhotos
	,x.HasActiveHDPhotos
	,x.HasCommunityVideoURL
	,x.HasHDVideoURL
	,x.HasVirtualTour
	,x.HasHDTourURL
	,x.NumActiveFloorPlans
	,x.HasLinkedFloorPlans
	,x.HasActiveHDFloorPlans
	,x.HasLinked3DFloorPlans 
	--,x.HasLinkedRoomPlanners 
	,x.HasMobileDeal         
	,x.NumActiveAmenities
	,x.NumCertRatingsReviews
	,x.HasCouponActive
	,x.HasPricing
	,x.HasOfficeHours
	,x.DescriptionLength
	,x.LastUpdate
	,x.IsActiveAG
	,x.IsActiveRent
INTO #NationalListings
FROM (
		SELECT ar.ListingID
		,MAX(ar.ActivePhotos)														AS NumActivePhotos
		,MAX(ar.HDActivePhotosFulfilled)											AS HasActiveHDPhotos
		,MAX(ar.CommunityVideoURLFulfilled)											AS HasCommunityVideoURL
		,MAX(ar.HDVideoURLFulfilled)												AS HasHDVideoURL
		,MAX(ar.VirtualTourFulfilled)												AS HasVirtualTour
		,MAX(ar.HDTourURLFulfilled)													AS HasHDTourURL
		,MAX(ar.ActiveFloorPlans)													AS NumActiveFloorPlans
		,MAX(ar.LinkedFloorPlanFulfilled)											AS HasLinkedFloorPlans
		,MAX(ar.HDActiveFloorPlansFulfilled)										AS HasActiveHDFloorPlans
		,MAX(ar.Linked3DFloorPlanFulfilled)                                         AS HasLinked3DFloorPlans --new
		--,MAX(ar.LinkedRoomPlannerFulfilled)                                         AS HasLinkedRoomPlanners --new
		,MAX(ar.MobileDealFulfilled)                                                AS HasMobileDeal         --new
		,MAX(ar.ActiveAmenities)													AS NumActiveAmenities
		,MAX(ISNULL(cd.CR3Reviews,0))												AS NumCertRatingsReviews
		,MAX(ar.CouponActiveOnSite)													AS HasCouponActive
		,MAX(ar.ShowPricing)														AS HasPricing
		,MAX(ar.ShowOfficeHours)													AS HasOfficeHours
		,MAX(ar.ListingDescriptionLength)											AS DescriptionLength
		,MAX(ar.LastUpdateYMDID)													AS LastUpdate
		,MAX(CASE WHEN ar.Website = 'AG' AND ar.StatusID = 1 THEN 1 ELSE 0 END)		AS IsActiveAG
		,MAX(CASE WHEN ar.Website = 'Rent' AND ar.StatusID = 1 THEN 1 ELSE 0 END)	AS IsActiveRent
		FROM ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS ar
		LEFT OUTER JOIN #CR3Data AS cd
			ON ar.ListingID = cd.ListingID
		WHERE ar.StatusID = 1 
		GROUP BY  ar.ListingID 	    
		HAVING MAX(StatusID) = 1 
	) AS x

------------------------------------------------------
--This select gets the final results. It pulls from
--a series of subqueries to get scores.
------------------------------------------------------         

SELECT  c.ListingID
	,c.RentPropertyID
	,c.MgtCoID
	,c.PropertyName
	,c.CBSACode
	,c.CBSAName
	,c.NumActivePhotos
	,c.HasActiveHDPhotos
	,c.HasCommunityVideoURL
	,c.HasHDVideoURL
	,c.HasVirtualTour
	,c.HasHDTourURL
	,c.NumActiveFloorPlans
	,c.HasLinkedFloorPlans
	,c.HasActiveHDFloorPlans
    ,c.HasLinked3DFloorPlans --new
    --,c.HasLinkedRoomPlanners --new
    ,c.HasMobileDeal         --new
	,c.NumActiveAmenities
	,c.NumCertRatingsReviews
	,c.HasCouponActive
	,c.HasPricing
	,c.HasOfficeHours
	,c.DescriptionLength
	,CAST(CONVERT(VARCHAR(8),c.LastUpdate,101) AS DATE) AS LastUpdate
	,c.IsActiveAG
	,c.IsActiveRent
	,c.OverallScore
	,c.q_OverallScore
	,c.q_NumActivePhotos
	,c.q_HasActiveHDPhotos
	,c.q_HasHDVideoURL
	,c.q_HasHDTourURL
	,c.q_NumActiveFloorPlans
	,c.q_HasLinkedFloorPlans
	,c.q_HasActiveHDFloorPlans
    ,c.q_HasLinked3DFloorPlans --new
    --,c.q_HasLinkedRoomPlanners --new
    ,c.q_HasMobileDeal         --new
	,c.q_NumActiveAmenities
	,c.q_NumCertRatingsReviews
	,c.q_HasCouponActive
	,c.q_HasPricing
	,c.q_HasOfficeHours
	,c.q_DescriptionLength
	,c.q_LastUpdate
	,cr3Rating.MostRecentActiveReview AS CR3MostRecentActiveDate
	,cr3rating.AvgRatingPublishedAG AS CR3AvgRatingAG
	,cr3rating.AvgRatingPublishedRent AS CR3AvgRatingRent
FROM
		(
			--------------------------------------------------------------------------------------------------------------------------------
			--calculate overall score using the number of quintile values - so if you add/remove quintiles above, change the number below!
			--14 is the number of quintiles: get percentile score by adding up quintile values and dividing into highest possible score
			--------------------------------------------------------------------------------------------------------------------------------
			SELECT b.ListingID
			,l.RentPropertyID
			,l.MgtCoID
			,l.PropertyName
			,zc.CBSACode
			,zc.CBSAName
			,b.NumActivePhotos
			,b.HasActiveHDPhotos
			,b.HasCommunityVideoURL
			,b.HasHDVideoURL
			,b.HasVirtualTour
			,b.HasHDTourURL
			,b.NumActiveFloorPlans
			,b.HasLinkedFloorPlans
			,b.HasActiveHDFloorPlans
			,b.HasLinked3DFloorPlans --new
			--,b.HasLinkedRoomPlanners --new
			,b.HasMobileDeal         --new
			,b.NumActiveAmenities
			,b.NumCertRatingsReviews
			,b.HasCouponActive
			,b.HasPricing
			,b.HasOfficeHours
			,b.DescriptionLength
			,b.LastUpdate
			,b.IsActiveAG
			,b.IsActiveRent
			,b.q_NumActivePhotos
			,b.q_HasActiveHDPhotos
			,b.q_HasHDVideoURL
			,b.q_HasHDTourURL
			,b.q_NumActiveFloorPlans
			,b.q_HasLinkedFloorPlans
			,b.q_HasActiveHDFloorPlans
			,b.q_HasLinked3DFloorPlans --new
			--,b.q_HasLinkedRoomPlanners --new
			,b.q_HasMobileDeal         --new
			,b.q_NumActiveAmenities
			,b.q_NumCertRatingsReviews
			,b.q_HasCouponActive
			,b.q_HasPricing
			,b.q_HasOfficeHours
			,b.q_DescriptionLength
			,b.q_LastUpdate
			,q_OverallScore = NTILE(5) OVER (ORDER BY ROUND(100*((q_NumActivePhotos + q_HasActiveHDPhotos + q_HasHDVideoURL + q_HasHDTourURL + q_NumActiveFloorPlans + q_HasLinkedFloorPlans + q_HasActiveHDFloorPlans + q_HasLinked3DFloorPlans + q_HasMobileDeal + q_NumActiveAmenities + q_NumCertRatingsReviews + q_HasCouponActive + q_HasPricing + q_HasOfficeHours + q_DescriptionLength + q_LastUpdate) / CAST((17*5) AS DECIMAL (15,4))),0))  -- + q_HasLinkedRoomPlanners 
			,OverallScore = ROUND(100*((q_NumActivePhotos + q_HasActiveHDPhotos + q_HasHDVideoURL + q_HasHDTourURL + q_NumActiveFloorPlans + q_HasLinkedFloorPlans + q_HasActiveHDFloorPlans + q_HasLinked3DFloorPlans + q_HasMobileDeal + q_NumActiveAmenities + q_NumCertRatingsReviews + q_HasCouponActive + q_HasPricing + q_HasOfficeHours + q_DescriptionLength + q_LastUpdate) / CAST((17*5) AS DECIMAL (15,4))),0) -- + q_HasLinkedRoomPlanners 
			FROM
					(
					----------------------------------------------------
					--add Quintiles based on all listings nationally, i.e. before filtering the Listings
					---------------------------------------------------- 
					SELECT a.ListingID
					,a.NumActivePhotos
					,a.HasActiveHDPhotos
					,a.HasCommunityVideoURL
					,a.HasHDVideoURL
					,a.HasVirtualTour
					,a.HasHDTourURL
					,a.NumActiveFloorPlans
					,a.HasLinkedFloorPlans
					,a.HasActiveHDFloorPlans
					,a.HasLinked3DFloorPlans
					--,a.HasLinkedRoomPlanners
					,a.HasMobileDeal
					,a.NumActiveAmenities
					,a.NumCertRatingsReviews
					,a.HasCouponActive
					,a.HasPricing
					,a.HasOfficeHours
					,a.DescriptionLength
					,a.LastUpdate
					,a.IsActiveAG
					,a.IsActiveRent
					,NTILE(5) OVER (ORDER BY a.NumActivePhotos)																AS q_NumActivePhotos
					,CASE a.HasActiveHDPhotos WHEN 0 THEN 1 ELSE 5 END														AS q_HasActiveHDPhotos
					,CASE WHEN a.HasCommunityVideoURL = 0 AND a.HasHDVideoURL = 0 THEN 1 --1 if neither type of video
						  WHEN a.HasCommunityVideoURL = 1 AND a.HasHDVideoURL = 0 THEN 3 --3 if only community video
								ELSE 5 --5 if hd video regardless of whether it has community video
					END                                                                                                     AS q_HasHDVideoURL
					,CASE WHEN a.HasVirtualTour = 0 AND a.HasHDTourURL = 0 THEN 1 --1 if neither type of tour
						  WHEN a.HasVirtualTour = 1 AND a.HasHDTourURL = 0 THEN 3 --3 if only virtual tour
								ELSE 5 --5 if hd tour regardless of whether it has virtual tour
					END                                                                                                     AS q_HasHDTourURL
					,NTILE(5) OVER (ORDER BY a.NumActiveFloorPlans)															AS q_NumActiveFloorPlans
					,CASE a.HasLinkedFloorPlans   WHEN 0 THEN 1 ELSE 5 END													AS q_HasLinkedFloorPlans
					,CASE a.HasActiveHDFloorPlans WHEN 0 THEN 1 ELSE 5 END													AS q_HasActiveHDFloorPlans
					,CASE a.HasLinked3DFloorPlans WHEN 0 THEN 1 ELSE 5 END													AS q_HasLinked3DFloorPlans --new
					--,CASE a.HasLinkedRoomPlanners WHEN 0 THEN 1 ELSE 5 END													AS q_HasLinkedRoomPlanners --new
					,CASE a.HasMobileDeal WHEN 0 THEN 1 ELSE 5 END													        AS q_HasMobileDeal         --new
					,NTILE(5) OVER (ORDER BY a.NumActiveAmenities)															AS q_NumActiveAmenities
					,NTILE(5) OVER (ORDER BY a.NumCertRatingsReviews)														AS q_NumCertRatingsReviews
					,CASE a.HasCouponActive       WHEN 0 THEN 1 ELSE 5 END													AS q_HasCouponActive
					,CASE a.HasPricing            WHEN 0 THEN 1 ELSE 5 END													AS q_HasPricing
					,CASE a.HasOfficeHours        WHEN 0 THEN 1 ELSE 5 END													AS q_HasOfficeHours
					,NTILE(5) OVER (ORDER BY a.DescriptionLength)															AS q_DescriptionLength
					,NTILE(5) OVER (ORDER BY a.LastUpdate)																	AS q_LastUpdate
					FROM #NationalListings AS a
					) AS b
			JOIN 
					(
					SELECT  dl.ListingID
						   ,dl.RentPropertyID
						   ,dl.MgtCoID
						   ,dl.MgtCoName
						   ,dl.PropertyName
						   ,dl.ZipCode
					FROM    ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
					GROUP BY dl.ListingID
						   ,dl.RentPropertyID
						   ,dl.MgtCoID
						   ,dl.MgtCoName
						   ,dl.PropertyName
						   ,dl.ZipCode
					) AS l
					ON b.ListingID = l.ListingID
			JOIN DBAUtility.dbo.ZipCBSA AS zc
				ON l.ZipCode = zc.ZIPCode
		) AS c
LEFT OUTER JOIN #tmpcr3info cr3rating
	ON cr3rating.ListingID = c.ListingID
WHERE c.MgtCoID = CASE @iMgtCoID WHEN -1 THEN c.MgtCoID ELSE @iMgtCoID END
	AND CHARINDEX(c.CBSACode,@iCBSACode) > 0
	AND (c.IsActiveAG = 1
			OR c.IsActiveRent = 1
		)
ORDER BY c.OverallScore

SET NOCOUNT OFF






GO
/****** Object:  StoredProcedure [Reports].[rpt_MediaCenterPropContactRefinement]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Reports].[rpt_MediaCenterPropContactRefinement] (
    @CBSA INT
   ,@Owner VARCHAR(30)
   ,@MgtCo INT
   ,@PropID INT
   ,@Channel INT
   ,@StartYMDID INT
   ,@EndYMDID INT)
/*******************************************************************************************
* Name:	Reports.[rpt_MediaCenterPropContactRefinement]
* ------------------------------------------------------------------------------------------
* Desc:	Report for Sales from MediaCenter data received from DSI
* ------------------------------------------------------------------------------------------
* Test:	
exec Reports.[rpt_MediaCenterPropContactRefinement] 0,'<All>',0,0,0,20170501, 20170531
exec Reports.[rpt_MediaCenterPropContactRefinement] @CBSA=-1,@Owner=N'<All>',@MgtCo=0,@PropID=0,@Channel=0,@StartYMDID=20170401,@EndYMDID=20170501
* ------------------------------------------------------------------------------------------
* Hist:	01	05/31/2017		Richard Chen	Case 01340228, initial version

********************************************************************************************/
AS 
SET NOCOUNT ON

BEGIN
	/* test 
	DECLARE @CBSA AS int
	,@Owner AS VARCHAR(30)
	,@MgtCo AS INT
	,@PropID AS INT
	,@Channel AS INT
    ,@StartYMDID AS INT
	,@EndYMDID INT
	
	SET @CBSA = 0 --34980 --0
	SET @Owner = '<All>'  --'005E0000000JBSjIAO'  --andrea logan --
	SET @MgtCo = 0 --9008
	SET @PropID = 0  --22911 --0
	SET @Channel = 0
	SET @StartYMDID = 20160601
	set @EndYMDID = 20160701
	*/

	--if the user selected an end date before the start date, default end date to start date

	IF @EndYMDID < @StartYMDID
		SET @EndYMDID = CAST(CONVERT(VARCHAR,DATEADD(mm,DATEDIFF(mm,0,GETDATE()),0),112) AS INT)

	--add 30 days to the selected end date, which will come in as the first of the selected month
	SELECT @EndYMDID = @EndYMDID+30

	SELECT 
			--left(mcc.ymdid,6) as YearMonth
			 mcc.PropertyID
			,mcc.contacttype
			,dl.SFPropertyAcctID
			,sfa.SalesRepID 
			,sfa.SalesRepresentative 
			,sfa.SalesRepSalesChannelRole
			,CAST(dl.CBSACode AS INT) AS CBSACode
			,dl.CBSAName
			,dl.MarketCD
			,dl.MarketName
			,dl.MgtCoIDAG
			,dl.MgtCoNameAG
			,dl.PropertyName
            ,dl.PropertyCity
			,dl.PropertyState
			,dl.PropertyZipCode
			,dl.PropertyTotalUnits
			,max(mcc.ContactsUploaded) as ContactsUploaded
	FROM [Mart].[MediaCenterPropertyContactCounts] mcc
	JOIN Dimension.Listings dl
		ON mcc.PropertyID = dl.PropertyIDAG
	JOIN SalesForce.dbo.VW_SalesForceCommunity sfa
		ON dl.SFPropertyAcctID = sfa.PropAcctID
	WHERE   ISNULL(PropertyID,0) <> 0
				and (@CBSA <= 0
				 OR dl.[CBSACode] = @CBSA)
				AND (@Owner = '<All>'
					 OR [SalesRepID] = @Owner)
				AND (@MgtCo = 0
					 OR [MgtCoIDAG] = @MgtCo)
				AND (@PropID = 0
					 OR [PropertyID] = @PropID)
				AND (@Channel = 0
					 OR [SalesRepSalesChannelRole] = CASE WHEN @Channel = 1 THEN 'Field'
														  WHEN @Channel = 2 THEN 'Inside'
														  WHEN @Channel = 3 THEN 'National'
														  WHEN @channel = 4 THEN 'Other'
													 END)
				AND mcc.YMDID BETWEEN @StartYMDID AND @EndYMDID
	group by mcc.PropertyID
			,mcc.contacttype
			,dl.SFPropertyAcctID
			,sfa.SalesRepID
			,sfa.SalesRepresentative
			,sfa.SalesRepSalesChannelRole
			,CAST(dl.CBSACode AS INT)
			,dl.CBSAName
			,dl.MarketCD
			,dl.MarketName
			,dl.MgtCoIDAG
			,dl.MgtCoNameAG
			,dl.PropertyName
            ,dl.PropertyCity
			,dl.PropertyState
			,dl.PropertyZipCode
			,dl.PropertyTotalUnits
	order by mcc.propertyid

END




GO
/****** Object:  StoredProcedure [Reports].[rpt_MediaCenterRepDropdown]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Reports].[rpt_MediaCenterRepDropdown] (
	 @Market VARCHAR(50)
	)

/*******************************************************************************************
* Name:	Reports.rpt_MediaCenterRepDropdown
* ------------------------------------------------------------------------------------------
* Desc:	This corresponds to the rpt_MediaCenterUnused report, providing the sales rep list
* ------------------------------------------------------------------------------------------
* Test:	EXEC Reports.rpt_MediaCenterRepDropdown 'Atlanta'
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist:	01	10/07/2016		Colleen Rocks		Ticket 24106; initial version
********************************************************************************************/
AS
BEGIN
    SET NOCOUNT ON;
/*
--test:
DECLARE @Market VARCHAR(50)
*/

SELECT  x.ID
	,x.SalesRep
FROM    (
         SELECT 'All' AS ID
			    ,'All' AS SalesRep
               ,1 AS OrderNum
         UNION
         SELECT DISTINCT
                u.ID
				,u.Name AS SalesRep
               ,2 AS OrderNum
         FROM   SalesForce.dbo.User2 AS u
         WHERE  u.AG_Sales_Market__c = @Market
			OR (@Market = 'All' AND u.AG_Sales_Market__c IS NOT NULL)
        ) AS x
ORDER BY OrderNum
       ,SalesRep

    SET NOCOUNT OFF;
END 




GO
/****** Object:  StoredProcedure [Reports].[rpt_MediaCenterUnused]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Reports].[rpt_MediaCenterUnused] (
	 @Market VARCHAR(50)
	,@SalesRep VARCHAR(18)
	)

/*******************************************************************************************
* Name:	Reports.rpt_MediaCenterUnused
* ------------------------------------------------------------------------------------------
* Desc:	This gives a list of properties that have an active contract for Media Center but have 
* not used the product at all
* ------------------------------------------------------------------------------------------
* Test:	EXEC Reports.rpt_MediaCenterUnused 'All','All','All'
*		EXEC Reports.rpt_MediaCenterUnused 'All','All','001E000000nyObXIAU'
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist:	01	10/05/2016		Colleen Rocks		Ticket 24106; initial version
********************************************************************************************/
AS
BEGIN
    SET NOCOUNT ON;
/*
--test:
DECLARE @Market VARCHAR(50)
	,@SalesRep VARCHAR(18);
	
SET @Market = 'All'
SET @SalesRep = 'All'
*/

--------------------------
/*Drop temp tables*/
--------------------------
    BEGIN TRY
        DROP TABLE #MediaCenterProps
    END TRY
    BEGIN CATCH 
    END CATCH;

--------------------------
/*Get current Media Center
properties*/
--------------------------
    SELECT  a.Name AS PropertyName
           ,a.Id AS SFDCID
           ,l.ListingID
		   ,l.PropertyIDAG AS AGPID
           ,a.ShippingStreet AS PropertyStreet
           ,a.ShippingCity AS PropertyCity
           ,a.ShippingState AS PropertyState
           ,ISNULL(a.Phone,l.PropertyContactPhone) AS PropertyPhone
           ,a.Company_Email__c AS CompanyEmail
		   ,u.Id AS SalesRepID
           ,u.Name AS SalesRep
           ,u.AG_Sales_Region__c AS Region
           ,u.AG_Sales_District__c AS District
           ,u.AG_Sales_Market__c AS Market
           ,pa.Name AS ManagementCompany
           ,fli.StartDate__c AS FLIStartDate
           ,fli.EndDate__c AS FLIEndDate
           ,fli.Status__c AS FLIStatus
    INTO    #MediaCenterProps
    FROM    SalesForce.dbo.Fulfillment_Line_Item__c AS fli
    INNER JOIN SalesForce.dbo.Account AS a
            ON fli.Advertiser__c = a.Id
    INNER JOIN RentPath.Dimension.Listings AS l
            ON a.Id = l.SFPropertyAcctID
    INNER JOIN SalesForce.dbo.User2 AS u
            ON a.OwnerId = u.Id
    LEFT OUTER JOIN SalesForce.dbo.Account AS pa
            ON a.ParentId = pa.Id
    WHERE   fli.Product__c = '01tE0000008maKVIAY' --media center product
            AND fli.Status__c NOT IN ('Drop Requested','Dropped','Expire');

--------------------------
/*Get final result set of
properties that haven't used
Media Center*/
--------------------------
    SELECT  dp.DisplayName AS UserName
           ,dp.Email AS UserEmailAddress
           ,p.PropertyName
           ,p.SFDCID
           ,p.ListingID
		   ,p.AGPID
           ,p.PropertyStreet
           ,p.PropertyCity
           ,p.PropertyState
           ,p.PropertyPhone
           ,p.CompanyEmail
           ,p.SalesRep
           ,p.Region
           ,p.District
           ,p.Market
           ,p.ManagementCompany
           ,CONVERT(VARCHAR(10),p.FLIStartDate,101) AS FLIStartDate
           ,CONVERT(VARCHAR(10),p.FLIEndDate,101) AS FLIEndDate
           ,p.FLIStatus
    FROM    #MediaCenterProps AS p
    LEFT OUTER JOIN (
                     SELECT DISTINCT
                            SFPropertyAcctID
                     FROM   RentPath.Mart.vw_MediaCenterData
                    ) AS mc
            ON p.SFDCID = mc.SFPropertyAcctID
    LEFT OUTER JOIN Corporate.Dimension.DSUM_Property AS dp
            ON p.ListingID = dp.ListingID
               AND dp.Active = 1
    WHERE   mc.SFPropertyAcctID IS NULL
		AND (p.Market = @Market OR @Market = 'All')
		AND (p.SalesRepID = @SalesRep OR @SalesRep = 'All');


    SET NOCOUNT OFF;
END 







GO
/****** Object:  StoredProcedure [Reports].[rpt_MgmtContentAnalysis]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Reports].[rpt_MgmtContentAnalysis]  (
       @MgtCoID VARCHAR(20),
       @CBSACode VARCHAR(MAX),
       @ActiveListing INT
    )
AS 

/***********************************************************************************************************************
* Name: reports.rpt_MgmtContentAnalysis
---------------------------------------------------------------------------------------------------------------------
* Desc: Used in the Management Content Analysis report on reports.primedia.com   
---------------------------------------------------------------------------------------------------------------------
* Test: EXEC reports.rpt_MgmtContentAnalysis '6008','12060,12100',1
        EXEC reports.rpt_MgmtContentAnalysis '6015','10740,18700,19100',NULL
---------------------------------------------------------------------------------------------------------------------
* Note: For Active Listing parameter, 0 is Inactive, 1 is Active on either site, NULL is Both
---------------------------------------------------------------------------------------------------------------------
* Hist: 01	03/05/2015		Colleen Rocks		Ticket 15849; rewrote ApartmentGuide.reports.rpt_MgmtContentAnalysis_CBSA
*												to include Rent listings and information											
***********************************************************************************************************************/
BEGIN
SET NOCOUNT ON ;

----------------------------------------------------------
--Test
----------------------------------------------------------  
/*
DECLARE        
		@MgtCoID VARCHAR(20)  = 6020 ,
       @CBSACode VARCHAR(MAX) = '12060,12100' ,
       @ActiveListing INT = 0  
	   */

----------------------------------------------------------
--Drop temp tables
----------------------------------------------------------    
IF OBJECT_ID(N'tempdb.dbo.#CBSAList') IS NOT NULL 
	BEGIN
		DROP TABLE #CBSAList
	END

IF OBJECT_ID(N'tempdb.dbo.#CBSAListings') IS NOT NULL 
	BEGIN
		DROP TABLE #CBSAListings
	END

IF OBJECT_ID(N'tempdb.dbo.#Listings') IS NOT NULL 
	BEGIN
		DROP TABLE #Listings
	END

IF OBJECT_ID(N'tempdb.dbo.#LeadRecipandTier') IS NOT NULL 
	BEGIN
		DROP TABLE #LeadRecipandTier
	END

-----------------------------------------------------------------
-- Split out multivalued CBSA codes
-----------------------------------------------------------------
SELECT cbsa.col CBSACode
INTO   #CBSAList
FROM   dbautility.dbo.Fn_SeparateValues(@CBSACode,',') cbsa


-----------------------------------------------------------------
--Find all the ListingIDs for a CBSA and Management Company
-----------------------------------------------------------------
SELECT DISTINCT
        dl.ListingID
       ,zc.CBSACode
       ,zc.CBSAName
INTO    #CBSAListings
FROM    ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
JOIN DBAUtility.dbo.ZipCBSA zc
   ON dl.ZipCode = zc.ZIPCode
JOIN #CBSAList cbsa
   ON zc.CBSACode = cbsa.CBSACode
WHERE   dl.mgtcoid = IsNULL(@MgtCoID,dl.mgtcoid)


-----------------------------------------------------------------
--Get listing status and phone number info
-----------------------------------------------------------------   
SELECT l.ListingID
	,l.AGPropertyID
	,l.PropertyName
	,cl.CBSACode
	,cl.CBSAName
	,l.VanityURL
	,l.ActivePhotos
	,l.ActiveFloorPlans
	,l.CouponActiveOnSite
	,l.Whisper
	,l.UpsellPropCallRecording
	,CAST(d.monthNum AS VARCHAR(2))+'/'+CAST(d.dayofMonth AS VARCHAR(2))+'/'+
		RIGHT(LEFT(CAST(d.yearmonth AS VARCHAR(6)),4),2)									AS LastUpdate
    ,CASE WHEN l.website = 'AG' THEN l.PrintProductPoints ELSE 0 END						AS PrintProductPoints   
    ,CASE WHEN l.website = 'AG' THEN l.InternetProductPoints ELSE 0 END						AS InternetProductPoints
    ,CASE WHEN l.website = 'AG' THEN l.LegacyLoyaltyPoints ELSE 0 END						AS LegacyLoyaltyPoints  
    ,CASE WHEN l.website = 'AG' THEN l.ContractLoyaltyPoints ELSE 0 END						AS ContractLoyaltyPoints
	,CASE WHEN l.website = 'AG' AND l.statusid = 1 THEN 1 ELSE 0 END						AS AGActive
	,CASE WHEN l.website = 'Rent' AND l.statusid = 1 THEN 1 ELSE 0 END						AS RentActive
	,CASE WHEN l.Website = 'AG' THEN CAST(l.WebTarget AS BIGINT) END						AS AGTarget
	,CASE WHEN l.Website = 'AG' THEN CAST(l.localtestnumber AS BIGINT) END					AS AGTracking
	,CASE WHEN l.Website = 'Rent' THEN CAST(l.WebTarget AS BIGINT) END						AS RentcomTarget
	,CASE WHEN l.Website = 'Rent' THEN CAST(l.localtestnumber AS BIGINT) END				AS RentcomTracking
INTO #Listings
FROM ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS l
JOIN #CBSAListings AS cl
	ON cl.ListingID = l.ListingID
JOIN dbautility.Dimension.Dates AS d 
	ON d.ymdid = l.LastUpdateYMDID


-----------------------------------------------------------------
--USE CTEs and Stuff to put lead contacts in one row
-----------------------------------------------------------------   
;WITH cte AS
(
	SELECT DISTINCT ListingID 
	FROM #Listings
), cte2 AS
(
	SELECT cte.ListingID	
		,CASE WHEN l.Website = 'AG' AND l.StatusID = 1 THEN 
			CASE WHEN l.LeadEmailWithType <> '' AND l.LeadFax <> '' THEN REPLACE(l.LeadEmailWithType,';',', ') + ', ' + l.LeadFax
			ELSE CASE WHEN l.LeadEmailWithType <> '' THEN REPLACE(l.LeadEmailWithType,';',', ') ELSE l.LeadFax END
			END
		ELSE ''
		END	AS AGLeadContactWithType
		,CASE WHEN l.Website = 'Rent' AND l.StatusID = 1 THEN 
			CASE WHEN l.LeadEmailWithType <> '' AND l.LeadFax <> '' THEN REPLACE(l.LeadEmailWithType,';',', ') + ', ' + l.LeadFax
			ELSE CASE WHEN l.LeadEmailWithType <> '' THEN REPLACE(l.LeadEmailWithType,';',', ') ELSE l.LeadFax END
			END
		ELSE ''
		END	AS RentLeadContactWithType
		,CASE l.PlacementTier
											WHEN 05 THEN 'D'
											WHEN 10 THEN 'P'
											WHEN 20 THEN 'G'
											WHEN 30 THEN 'S'
											ELSE ''
											END	AS AGPlacementTier
	FROM cte
	JOIN ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS l
		ON l.ListingID = cte.ListingID
)
SELECT  dm2.ListingID
		,STUFF
		(
			(
				SELECT DISTINCT ',' + cte2.RentLeadContactWithType
				FROM cte2
				WHERE cte2.ListingID = dm2.ListingID
				FOR XML PATH(''), TYPE
			).value('.','varchar(max)'),1,1,''
		) AS RentLeadRecipients
		,STUFF
		(
			(
				SELECT DISTINCT ',' + cte2.AGLeadContactWithType
				FROM cte2
				WHERE cte2.ListingID = dm2.ListingID
				FOR XML PATH(''), TYPE
			).value('.','varchar(max)'),1,1,''
		) AS AGLeadRecipients
		,STUFF
		(
			(
				SELECT DISTINCT ',' + cte2.AGPlacementTier
				FROM cte2
				WHERE cte2.ListingID = dm2.ListingID
				FOR XML PATH(''), TYPE
			).value('.','varchar(max)'),1,1,''
		) AS AGPlacementTier
INTO #LeadRecipandTier
FROM cte dm2



-----------------------------------------------------------------
--Get final resultset
-----------------------------------------------------------------
SELECT DISTINCT
	l.ListingID
	,l.AGPropertyID
	,l.PropertyName
	,l.CBSACode
	,l.CBSAName
	,SUM(l.AGActive)														AS AGActive
	,SUM(l.RentActive)														AS RentActive
	,REPLACE(LTRIM(RTRIM(REPLACE(lr.AGLeadRecipients,',',''))),'',',')		AS AGLeadRecipients
	,REPLACE(LTRIM(RTRIM(REPLACE(lr.RentLeadRecipients,',',''))),'',',')	AS RentLeadRecipients
	,l.VanityURL
	,l.ActivePhotos
	,l.ActiveFloorPlans
	,l.CouponActiveOnSite
	,l.LastUpdate
	,SUM(l.PrintProductPoints)												AS PrintProductPoints
	,SUM(l.InternetProductPoints)											AS InternetProductPoints
	,SUM(l.LegacyLoyaltyPoints)												AS LegacyLoyaltyPoints
	,SUM(l.ContractLoyaltyPoints)											AS ContractLoyaltyPoints
	,lr.AGPlacementTier
	,MAX(l.AGTarget)														AS AGTarget
	,MAX(l.AGTracking)														AS AGTracking
	,MAX(l.RentcomTarget)													AS RentcomTarget
	,MAX(l.RentcomTracking)													AS RentcomTracking
	,l.Whisper
	,l.UpsellPropCallRecording												AS CR
FROM #Listings AS l
JOIN #LeadRecipandTier AS lr
	ON lr.ListingID = l.ListingID
GROUP BY l.ListingID
	,l.AGPropertyID
	,l.PropertyName
	,l.CBSACode
	,l.CBSAName
	,lr.AGLeadRecipients
	,lr.RentLeadRecipients
	,l.VanityURL
	,l.ActivePhotos
	,l.ActiveFloorPlans
	,l.CouponActiveOnSite
	,l.LastUpdate
	,lr.AGPlacementTier
	,l.Whisper
	,l.UpsellPropCallRecording
HAVING (@ActiveListing = MAX(CASE WHEN l.AGActive = 0 AND l.RentActive = 0 THEN 0
								WHEN (l.AGActive = 1 AND l.RentActive = 1) OR (l.AGActive = 1 OR l.RentActive = 1) THEN 1
								END)	
	OR @ActiveListing IS NULL)
ORDER BY l.CBSAName, l.PropertyName  




END
SET NOCOUNT OFF ;





GO
/****** Object:  StoredProcedure [Reports].[rpt_MgmtEmailContacts]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Reports].[rpt_MgmtEmailContacts]
      (@Mgtcoid VARCHAR(20),
       @CBSACode VARCHAR(8000)
	   )
AS
/******************************************************************************************
* Name:	reports.[rpt_MgmtEmailContacts]
* ------------------------------------------------------------------------------------------
* Desc:	This provides the contact 
* ------------------------------------------------------------------------------------------
* Test:	    EXEC Reports.rpt_MgmtEmailContacts '6020','12420,12580,12940,13140,13820,14460,14740,14860,15980,16700,16740'
*			EXEC Reports.rpt_MgmtEmailContacts '6008','14500,35620'
* ------------------------------------------------------------------------------------------
* Note: Contact Types we are concerned with for this report:
*
*		2	AG Lead
*		4	Lead Summary Report
*		8	Phone Lead Report
*		9	Email/Web Lead Report
*		10	Performance Details Report
*		12	Dashboard Report
*		17  AdCreator Admin
*		19  Rent.com Lead	
* ------------------------------------------------------------------------------------------
* Hist:	01	12/08/2011	Richard Chen		Initial Version
* Hist: 02  03/07/2012  Richard Chen        #8511
* Hist: 03  05/03/2012  Richard Chen        #9150  Change query to use locallookupvalue.
* Hist: 04  02/20/2013  Mary Polalrd        #11662 Copied rpt_Management_Email_Contacts to make CBSA report
* Hist: 05  08/15/2014  Chadwick Smith      #16493 Added @Website parameter
*                                                  Changed the Oracle query: - added logic to handle the website drop-down, AG or Rent.com, using PROPERTIES.CONTACTTYPE_WEBSITE
*                                                                            - changed inner join to left join for PROPERTIES.CONTACTTYPE_FORMAT (so it handles Format "N/A")
*                                                                            - added IsPreferred = 1 to match up with what is displayed on MyAds
*                                                                            - added logic to display contacts based on whether the property is AG-Only, Rent-Only, or Shared
* Hist: 06	01/02/2015	Sarah Mims			No ticket:
*													1) removed Website parameter
*													2) modified the Oracle pull to only pull back the ContactTypeIDs we care about into the temp table
*													3) Changed #CBSAListings to pull from combined Dimension Listings and to pull ListingID instead of PropertyID
*													4) Changed join between #subscription and #CBSAListings from PropertyID to ListingID 
* Hist: 07	01/09/2015	Colleen Rocks		Added mgtcoid for grouping on report header
******************************************************************************************/
BEGIN
SET NOCOUNT ON ;

  ------------------------------------------------------------------------
  -- Declare variables
  ------------------------------------------------------------------------

  DECLARE @sqlquery varchar(8000)   

  ------------------------------------------------------------------------
  -- Break out multivalued CBSA list into a table
  ------------------------------------------------------------------------
  SELECT  cbsa.col CBSACode
  INTO    #CBSAList
  FROM    dbautility.dbo.Fn_SeparateValues(@CBSACode,',') cbsa

  ------------------------------------------------------------------------
  --Find all the ListingIDs for the CBSA(s) and Management Company
  ------------------------------------------------------------------------
  SELECT DISTINCT
         dl.ListingID
		,dl.MgtCoID
        ,zc.CBSACode
        ,zc.CBSAName
 INTO    #CBSAListings
 FROM    ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
         INNER JOIN DBAUtility.dbo.ZipCBSA zc
            ON dl.ZipCode = zc.ZIPCode
         INNER JOIN #CBSAList cbsa
            ON zc.CBSACode = cbsa.CBSACode
 WHERE   dl.mgtcoid = IsNULL(@MgtCoID,dl.mgtcoid)
     
  ------------------------------------------------------------------------
  --Create temp table for the contact data
  ------------------------------------------------------------------------

    CREATE TABLE #subscription
        ( PROPERTYNAME VARCHAR(100),
          MARKETCD VARCHAR(20),
          CONTACTTYPEID INT,
          PROPERTYID INT,
		  LISTINGID INT,
		  MGTCOID INT,
          CONTACTTYPEFREQUENCY_ID INT,
          FREQUENCY_DISPLAY VARCHAR(100),
          FREQUENCY_UNIT INT,
          FREQUENCY_DAY INT,
          FORMAT VARCHAR(200),
          EMAIL VARCHAR(255),
          REPORT VARCHAR(50),
		  WEBSITE VARCHAR(50)   )

set @sqlquery = 
'SELECT PropertyName
,MarketCD
,ContactTypeID
,PropertyID
,ListingID
,MgtCoID
,ContactTypeFrequency_ID
,Frequency_Display
,Frequency_Unit
,Frequency_Day
,Format
,Email
,Report
,Website
FROM OPENQUERY
(oracleaptg,
''SELECT P.PROPERTYNAME
	  ,PLD.LOOKUPVALUE						AS MARKETCD
	  ,CCT.CONTACTTYPEID
	  ,PLC.PROPERTYID
	  ,PL.LISTINGID
	  ,PL.MgtCoId
	  ,CTFQ.CONTACTTYPEFREQUENCY_ID
	  ,CTFQ.NAME							AS FREQUENCY_DISPLAY
	  ,CTFQ.FREQUENCY_UNIT
	  ,CTFQ.FREQUENCY_DAY
	  ,NVL(UPPER(CTFM.NAME), ''''N/A'''')	AS FORMAT
	  ,LOWER(CM.CONMETHCD)					AS EMAIL
	  ,CT.CONTACTTYPE						AS REPORT
	  ,UPPER(NVL(CTW.NAME,''''N/A''''))		AS Website
FROM PROPERTIES.PROPLISTCONTACTS PLC
JOIN PROPERTIES.CONTACTCONTACTTYPES CCT
  ON PLC.CONTACTID = CCT.CONTACTID
JOIN PROPERTIES.CONTACTTYPES CT
  ON CT.CONTACTTYPEID = CCT.CONTACTTYPEID
JOIN PROPERTIES.CONTACTTYPE_FREQUENCY CTFQ
  ON CTFQ.CONTACTTYPEFREQUENCY_ID = CCT.CONTACTTYPEFREQUENCY_ID
LEFT JOIN PROPERTIES.CONTACTTYPE_FORMAT CTFM
  ON CTFM.CONTACTTYPEFORMAT_ID = CCT.CONTACTTYPEFORMAT_ID
JOIN PROPERTIES.CONTACTCONMETH CCM
  ON PLC.CONTACTID = CCM.CONTACTID
JOIN PROPERTIES.CONTACTMETHODS CM
  ON CCM.CONMETHID = CM.CONMETHID
JOIN PROPERTIES.PROPLISTPARTNERDATA PLD
  ON PLC.PROPERTYID = PLD.PROPERTYID
  AND PLC.LISTINGID = PLD.LISTINGID
  AND PLD.PARTNERID = 1
JOIN PARTNERS.PARTNERLOOKUPVALUES PLV
  ON PLD.LOOKUPVALUE = PLV.LOOKUPVALUE
JOIN PROPERTIES.PROPERTIES P
  ON PLC.PROPERTYID = P.PROPERTYID
JOIN PROPERTIES.PROPLISTINGS PL
  ON PLC.PROPERTYID = PL.PROPERTYID
  AND PLC.LISTINGID = PL.LISTINGID
LEFT JOIN PROPERTIES.CONTACTTYPE_WEBSITE CTW
  ON CCT.CONTACTTYPEWEBSITE_ID = CTW.CONTACTTYPEWEBSITE_ID
WHERE pl.mgtcoid ='+@mgtcoid+'
  AND ccm.ispreferred = 1
  AND (PL.ISACTIVE = 1 OR PL.ISACTIVERENT = 1)
  AND UPPER(NVL(CTW.NAME,''''N/A'''')) <> CASE WHEN PL.ISACTIVE = 1 AND PL.ISACTIVERENT = 0 THEN ''''RENT.COM''''
                                         WHEN PL.ISACTIVE = 0 AND PL.ISACTIVERENT = 1 THEN ''''AG''''
										 ELSE ''''BLAHBLAHBLAH''''
										 END
  AND CCT.CONTACTTYPEID IN (2,4,8,9,10,12,17,19)
ORDER BY PLD.LOOKUPVALUE, PLC.PROPERTYID, CM.CONMETHCD, CCT.CONTACTTYPEID'')'


PRINT @sqlquery

INSERT  INTO #subscription
        EXEC (@SQLQuery)
    ------------------------------------------------------------------------
    -- Get just the properties in the CBSA(s) selected
    ------------------------------------------------------------------------
    SELECT  sub.PropertyName
           ,sub.MarketCD
           ,sub.ContactTypeID
           ,sub.PropertyID
           ,sub.ListingID
		   ,sub.MGTCOID
           ,sub.ContactTypeFrequency_ID
           ,sub.Frequency_Display
           ,sub.Frequency_Unit
           ,sub.Frequency_Day
           ,sub.Format
           ,sub.Email
           ,sub.Report
           ,sub.Website
    INTO    #final
    FROM    #subscription AS sub
    INNER JOIN #CBSAListings AS list
            ON sub.LISTINGID = list.ListingID
    ------------------------------------------------------------------------
    -- Select out AG results
    ------------------------------------------------------------------------
        SELECT propertyid
			  ,ListingID
			  ,MGTCOID
              ,propertyname
              ,Email
			  ,'AG' AS Website
              ,Leads                      = max(case when contacttypeid =  2 then 'X'               END) 
              ,LeadsFormat                = max(case when contacttypeid =  2 then format            END)
              ,LeadSummaryReport          = max(case when contacttypeid =  4 then 'X'               END)
              ,LeadSummaryReportFrq       = max(case when contacttypeid =  4 then Frequency_Display END)
              ,LeadSummaryReportFormat    = max(case when contacttypeid =  4 then format            END)
              ,PhoneLeadReport            = max(case when contacttypeid =  8 then 'X'               END)
              ,PhoneLeadReportFrq         = max(case when contacttypeid =  8 then Frequency_Display END)
              ,PhoneLeadReportFormat      = max(case when contacttypeid =  8 then format            END)
              ,EmailLeadReport            = max(case when contacttypeid =  9 then 'X'               END)
              ,EmailLeadReportFrq         = max(case when contacttypeid =  9 then Frequency_Display END)
              ,EmailLeadReportFormat      = max(case when contacttypeid =  9 then format            END)
              ,PerformanceReport          = max(case when contacttypeid = 10 then 'X'               END)
              ,PerformanceReportFrq       = max(case when contacttypeid = 10 then Frequency_Display END)
              ,PerformanceReportFormat    = max(case when contacttypeid = 10 then format            END)
              ,DashboardReport            = max(case when contacttypeid = 12 then 'X'               END)
              ,DashboardReportFrq         = max(case when contacttypeid = 12 then Frequency_Display END)
              ,DashboardReportFormat      = max(case when contacttypeid = 12 then format            END)
              ,AdCreatorAdminReport       = max(case when contacttypeid = 17 then 'X'               END)
              ,AdCreatorAdminReportFrq    = max(case when contacttypeid = 17 then Frequency_Display END)
              ,AdCreatorAdminReportFormat = max(case when contacttypeid = 17 then format            END)
        FROM  #final
		WHERE Website <> 'RENT.COM'
			  AND contacttypeid IN (2,4,8,9,10,12,17) --limit to only those notifications we want to display in the report
        GROUP BY propertyid
		,ListingID
		,propertyName
		,Email
		,MgtCoID
		
		UNION ALL
	------------------------------------------------------------------------
    -- UNION in Rent results
    ------------------------------------------------------------------------
        SELECT propertyid
			  ,ListingID
			  ,MGTCOID
              ,propertyname
              ,Email
			  ,'Rent' AS Website
              ,Leads                      = max(case when contacttypeid = 19 then 'X'               END) --2=AG Lead; 19=Rent.com Lead
              ,LeadsFormat                = max(case when contacttypeid = 19 then format            END)
              ,LeadSummaryReport          = max(case when contacttypeid =  4 then 'X'               END)
              ,LeadSummaryReportFrq       = max(case when contacttypeid =  4 then Frequency_Display END)
              ,LeadSummaryReportFormat    = max(case when contacttypeid =  4 then format            END)
              ,PhoneLeadReport            = max(case when contacttypeid =  8 then 'X'               END)
              ,PhoneLeadReportFrq         = max(case when contacttypeid =  8 then Frequency_Display END)
              ,PhoneLeadReportFormat      = max(case when contacttypeid =  8 then format            END)
              ,EmailLeadReport            = max(case when contacttypeid =  9 then 'X'               END)
              ,EmailLeadReportFrq         = max(case when contacttypeid =  9 then Frequency_Display END)
              ,EmailLeadReportFormat      = max(case when contacttypeid =  9 then format            END)
              ,PerformanceReport          = max(case when contacttypeid = 10 then 'X'               END)
              ,PerformanceReportFrq       = max(case when contacttypeid = 10 then Frequency_Display END)
              ,PerformanceReportFormat    = max(case when contacttypeid = 10 then format            END)
              ,DashboardReport            = max(case when contacttypeid = 12 then 'X'               END)
              ,DashboardReportFrq         = max(case when contacttypeid = 12 then Frequency_Display END)
              ,DashboardReportFormat      = max(case when contacttypeid = 12 then format            END)
              ,AdCreatorAdminReport       = max(case when contacttypeid = 17 then 'X'               END)
              ,AdCreatorAdminReportFrq    = max(case when contacttypeid = 17 then Frequency_Display END)
              ,AdCreatorAdminReportFormat = max(case when contacttypeid = 17 then format            END)
        FROM  #final
		WHERE Website <> 'AG'
			  AND contacttypeid IN (4,8,9,10,12,17,19) --limit to only those notifications we want to display in the report
        GROUP BY propertyid
		,ListingID
		,propertyName
		,Email
		,MgtCoID

        ORDER BY PropertyName, email, Website

   
        SET NOCOUNT OFF ;
    END











GO
/****** Object:  StoredProcedure [Reports].[rpt_MgmtLeadByHourOrDay]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Reports].[rpt_MgmtLeadByHourOrDay] (
   @MgtCoID VARCHAR(15)
   ,@CBSACode VARCHAR(4000)
   ,@StartDate DATETIME
   ,@EndDate DATETIME
   ,@TimeGrain INT)
/**********************************************************************************************************************************************************
*
* Name:	Reports.rpt_MgmtLeadByHourOrDay_CBSA_Combined
*
* Desc:	Hourly lead data for the Management Lead Summary report
*
* Test:	EXEC Reports.rpt_MgmtLeadByHourOrDay 6020,'12060','01/01/2013','01/31/2014',0
*		EXEC Reports.rpt_MgmtLeadByHourOrDay 6020,'12060','01/01/2012','01/31/2013',1
*		EXEC Reports.rpt_MgmtLeadByHourOrDay 1000054343,'45940,40060','12/01/2013','12/31/2013',1
*		EXEC Reports.rpt_MgmtLeadByHourOrDay 9832,'36540','12/01/2013','12/31/2014',1
*		EXEC Reports.rpt_MgmtLeadByHourOrDay 9832,'36540','12/01/2013','12/31/2014',0
*
* Note: This report uses the logic from Reports.rpt_MgmtLeadbyHour_WithMobile/Reports.rpt_MgmtLeadbyDay_WithMobile except it passes in
*		CBSACode(s) instead of AG MarketCode(s). Instead of having two separate procedures that basically do the same thing, I have combined
*		it into one using the @TimeGrain parameter where 0 = Hour and 1 = Day.
*
* Hist:	01	01/14/2013		Sarah Mims			Initial Version. Ticket #11441.
*		02	02/20/2013		Sarah Mims			Added JOIN to Warexhouse.Conformed.LeadSource to dynamically generate Lead Buckets. 
*												Added in Previous Year's leads so that this one SP feeds all the charts in the Mgt Lead Summary report.
*		03	01/23/2014		Sarah Mims			Ticket # 14357 - modified to include Rent
*		04	03/22/2014		Sarah Mims			Modified Conformed.LeadSource JOIN to depend on website because the Rent data is now there
*		05	12/15/2014		Sarah Mims			No ticket - removed website parameter
*		06	01/02/2015		Sarah Mims			No ticket - Kimberley noticed an issue with the QA and production version not matching so I made an adjustment
*												to how we pull the listing set for the management company and then how we join that to the other data sets
*		07   09/16/2016		Clinton Woody		changed warexhouse donformed.leadsource to rentpath.dimension.leadtypes # 23874
* Hist: 08	10/25/2016		Bob Langley			Ticket 24212 - Changed to add MissedCalls to leads (where does connectedcalls)
*	    09	02/24/2017		Kimbo Morrow		No case - Changed website to businessunit since I changed the column name in my RentPath.Dimension.LeadTypes table replacing the old.

*********************************************************************************************************************************************************/
AS 
SET NOCOUNT ON

	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    DECLARE @TrackDate DATETIME
       ,@LengthInSeconds INT
       ,@DatabaseName VARCHAR(128)
                
    SET @TrackDate = GETDATE()
    SET @LengthInSeconds = 0
    SET @DatabaseName = DB_NAME()        
		
    EXEC DBAUtility.dbo.pr_Logging_StoredProcsNoTemp 
        @DatabaseName = @DatabaseName
       , -- varchar(128)
        @ProcName = 'Reports.rpt_MgmtLeadByHourOrDay'
       , -- varchar(128)
        @StepName = 'Execute Procedure'
       , -- varchar(128)
        @VariableStates = ''
       , -- varchar(500)
        @LengthInSeconds = @LengthInSeconds
       , -- int
        @Comments = 'Execute Procedure'; -- varchar(500)

---------------------------------------------------------------------------------------------------
--Declare and set variables
---------------------------------------------------------------------------------------------------
DECLARE @StartYMDID	INT
,@EndYMDID				INT
,@LastYearStartYMDID	INT
,@LastYearEndYMDID		INT

SET @StartYMDID = ( 
					SELECT YMDID
					FROM   DBAUtility.Dimension.Dates
					WHERE  YMDDate = @StartDate
					)
					
SET @EndYMDID =	( 
					SELECT   YMDID
					FROM     DBAUtility.Dimension.Dates
					WHERE    YMDDate = @EndDate
                     )
                     
SET @LastYearStartYMDID = @StartYMDID - 10000
SET @LastYearEndYMDID = @EndYMDID - 10000
	
---------------------------------------------------------------------------------------------------------------------------------------------
--Find all the ListingIDs that were active at any point during the selected time frame that are currently associated with the selected management company
---------------------------------------------------------------------------------------------------------------------------------------------
SELECT  dl.ListingID
       ,dl.Website
       ,zc.CBSACode
       ,zc.CBSAName
INTO    #Listings
FROM    ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
JOIN    ApartmentGuide.Mart.AGRentCombinedMartListings AS ml
        ON dl.ListingID = ml.ListingID
           AND dl.Website = ml.Website
LEFT OUTER JOIN DBAUtility.dbo.ZipCBSA AS zc
        ON dl.ZipCode = zc.ZIPCode
WHERE   dl.mgtcoid = @MgtCoID
        AND ml.YMDID BETWEEN @StartYMDID AND @EndYMDID
        AND CHARINDEX(ISNULL(zc.CBSACode,'00000'),@CBSACode) > 0
GROUP BY dl.ListingID
	   ,dl.Website
       ,zc.CBSACode
       ,zc.CBSAName
HAVING  MAX(ml.ListingStatusID) = 1     		 
            
------------------------------------------------------------------------------------------
--Select out result set
------------------------------------------------------------------------------------------
 SELECT  TYPE            
           ,CASE WHEN @TimeGrain = 0 
				THEN  iv.HourName				
            ELSE iv.DayofWeekName
            END																			AS TimeGrainName
           ,CASE WHEN @TimeGrain = 0 
				THEN iv.HourOfDay
            ELSE iv.DayofWeekNum
            END																			AS TimeGrainNum
           ,LEFT(YMDID,6)																AS yearMonthInt
		   ,LEFT(DATENAME(MONTH,CAST(YMDID AS VARCHAR(8))),3) + ' ' + LEFT(YMDID,4)		AS MonthAndYear
           ,COUNT(uid)																	AS LeadCount

FROM    
		(
         SELECT c.ymdid
               ,'Call' + callid uid
               ,lt.LeadMediumDesc + ' ' + lt.LeadTypeDesc AS type
               ,DATEPART(hour,c.CallStartDateTime) AS HourOfDay
               ,CASE WHEN DATEPART(hour,c.CallStartDateTime) IN (12,0) THEN CAST(12 AS CHAR (2)) ELSE
			   CAST(DATEPART(hour,c.CallStartDateTime) % 12 AS CHAR(2)) END + CASE DATEPART(hour,c.CallStartDateTime) / 12
                                                                             WHEN 1 THEN ' pm'
                                                                             ELSE ' am'
                                                                           END AS HourName
               ,LEFT(DATENAME(weekday,c.CallStartDateTime),3) AS DayOfWeekName
               ,DATEPART(weekday,c.CallStartDateTime) AS DayOfWeekNum
		 FROM	ApartmentGuide.Fact.AGRentPhoneLeads AS c
         JOIN   #Listings AS dl
                ON dl.listingid = c.listingid
				AND c.Website = dl.Website
         LEFT OUTER JOIN rentpath.Dimension.leadtypes lt
		 --(
   --                        SELECT   LTRIM(SUBSTRING(LeadSourceBusinessKey,CHARINDEX('-',LeadSourceBusinessKey) + 1,LEN(LeadSourceBusinessKey))) AS LeadType
   --                                ,DBSourceSystemDesc
   --                                ,CASE WHEN dss.DBSourceSystemKey = 1 THEN 'AG'
   --                                      ELSE 'Rent'
   --                                 END AS Website
   --                                ,LeadTypeDesc
   --                                ,LeadMediumDesc
   --                        FROM     Warexhouse.Conformed.LeadSource AS ls
   --                        JOIN     Warexhouse.Conformed.DBSourceSystem AS dss
   --                                 ON ls.DBSourceSystemKey = dss.DBSourceSystemKey
   --                        WHERE    dss.DBSourceSystemKey IN (1,6)
   --                                 AND ls.LeadTypeDesc = 'Phone'
   --                      ) lt
                ON c.CallType = lt.LeadType
					AND c.Website = lt.BusinessUnit
					AND lt.LeadTypeDesc = 'Phone'
					AND lt.DBSourceSystemKey IN (1,6)
         WHERE  c.callstatus IN (1,2,3)								--Ticket 24212  Added missed calls with connected.
                AND c.ymdid BETWEEN @StartYMDID AND @EndYMDID

                                                                                
         UNION ALL
         
         SELECT fwf.ymdid
               ,'Email' + CAST(fwf.leadid AS VARCHAR(10)) uid
               ,lt.LeadMediumDesc + ' ' + lt.LeadTypeDesc AS TYPE
               ,DATEPART(hour,fwf.whenentered) AS HourOfDay
               ,CASE WHEN DATEPART(hour,fwf.whenentered) IN (12,0) THEN CAST(12 AS CHAR (2)) ELSE
			   CAST(DATEPART(hour,fwf.whenentered) % 12 AS CHAR(2)) END + CASE DATEPART(hour,fwf.whenentered) / 12
                                                                         WHEN 1 THEN ' pm'
                                                                         ELSE ' am'
                                                                       END	AS HourName
               ,LEFT(DATENAME(weekday,fwf.whenentered),3) AS DayOfWeekName
               ,DATEPART(weekday,fwf.whenentered) AS DayOfWeekNum
         FROM   ApartmentGuide.Fact.AGRentWebFormLeads AS fwf
         JOIN   #Listings AS dl
                ON dl.listingid = fwf.listingid
				AND dl.Website = fwf.Website
         LEFT OUTER JOIN rentpath.dimension.leadtypes lt
		  --(
    --                      SELECT   LTRIM(SUBSTRING(LeadSourceBusinessKey,CHARINDEX('-',LeadSourceBusinessKey) + 1,LEN(LeadSourceBusinessKey))) AS LeadType
    --                               ,DBSourceSystemDesc
    --                               ,CASE WHEN dss.DBSourceSystemKey = 1 THEN 'AG'
    --                                     ELSE 'Rent'
    --                                END AS Website
    --                               ,LeadTypeDesc
    --                               ,LeadMediumDesc
    --                       FROM     Warexhouse.Conformed.LeadSource AS ls
    --                       JOIN     Warexhouse.Conformed.DBSourceSystem AS dss
    --                                ON ls.DBSourceSystemKey = dss.DBSourceSystemKey
    --                       WHERE    dss.DBSourceSystemKey IN (1,6)
    --                                AND ls.LeadTypeDesc = 'Email'
    --                     ) lt
                ON fwf.Source = lt.LeadType
					AND fwf.Website = lt.BusinessUnit
					AND lt.DBSourceSystemKey IN (1,6)
                                   AND lt.LeadTypeDesc = 'Email'
         WHERE  fwf.ymdid BETWEEN @StartYMDID AND @EndYMDID
                AND fwf.status = 1
        ) iv
        
GROUP BY  CASE WHEN @TimeGrain = 0 
				THEN  iv.HourName				
            ELSE iv.DayofWeekName
            END							
			,CASE WHEN @TimeGrain = 0 THEN iv.HourOfDay
					ELSE iv.DayofWeekNum
					END						       
			,type
			,LEFT(YMDID,6)															
			,LEFT(DATENAME(MONTH,CAST(YMDID AS VARCHAR(8))),3) + ' ' + LEFT(YMDID,4)	

------------------------------------------------------------------------------------------------------------
--Union in Previous Year All Leads but set the YearMonthInt and MonthAndYear columns to present year 
--so that the data appears in the chart correctly. If you don't like this, take it up with David McFarland.
------------------------------------------------------------------------------------------------------------	   
			  	   
			UNION ALL   

            SELECT  'Previous Year All Leads' AS TYPE
                   ,'x' AS TimeGrainName
                   ,25 AS TimeGrainNum
                   ,CAST(LEFT(CONVERT(VARCHAR(8),DATEADD(Year,1,CAST(ml.YearMonth AS VARCHAR(6)) + '01'),112),6) AS INT) AS yearMonthint
                   ,LEFT(DATENAME(MONTH,CAST(ml.YearMonth AS VARCHAR(6)) + '01'),3) + ' ' + LEFT(CONVERT(VARCHAR(8),DATEADD(Year,1,CAST(ml.YearMonth AS VARCHAR(6)) + '01'),112),4) AS MonthAndYear
                   ,SUM(ml.AllLeads) AS LeadCount
            FROM    #Listings AS dl
            JOIN    ApartmentGuide.Mart.AGRentCombinedMartListings AS ml
                    ON dl.ListingID = ml.ListingID
					AND dl.Website = ml.Website
            WHERE   ml.YMDID BETWEEN @LastYearStartYMDID AND @LastYearEndYMDID
            GROUP BY ml.YearMonth

	ORDER BY 
			CASE WHEN @TimeGrain = 0 THEN iv.HourOfDay
					 ELSE iv.DayofWeekNum
					 END							   	
			,type							
              
SET NOCOUNT OFF



GO
/****** Object:  StoredProcedure [Reports].[rpt_MgmtLeadDetails]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/***************************************************************************************************************************************
* Name:  Reports.rpt_MgmtLeadDetails
* Desc:  Proc gets details for all leads (phone and internet)
* -----------------------------------------------------------------------------------------
* Test:  EXEC Reports.rpt_MgmtLeadDetails '07/01/2016','07/02/2016','18216','44180'
* -----------------------------------------------------------------------------------------
* Note:    
* -----------------------------------------------------------------------------------------
* Hist:		01		07/20/2010		Mary Pollard		Initial Version
* Hist:		02		07/21/2010		Richard Chen		Fix bugs
* Hist:		03		07/21/2010		Mary Pollard		Change to allow for multi-select of markets
* Hist:		04		12/02/2010		Mary Pollard		Broke out caller location into separate fields per Dani
* Hist:		05		01/09/2012		Richard Chen		Ticket 7628 ,Add external ID
* Hist:		06		02/19/2013		Brian Trembley		Ticket 11657, created new CBSA rpts. Created proc based on rpt_MgmtCoInternetPhoneLeads
* Hist:		07		11/21/2013		Sarah Mims			Ticket #13867 changed "Lead Categories" to be data driven instead of hard coded values 
* Hist:		08		01/07/2014		Sarah Mims			Ticket #14270 - modified to include Rent.
* Hist:		09		07/02/2014		Sarah Mims			Ticket # 16137 - changed RIGHT 6 to RIGHT 7 to show the correct time
* Hist:		10		01/05/2014		Sarah Mims			No ticket - removed website parameter
* Hist:		11		08/07/2015		Colleen Rocks		Ticket 20302; added left join to dim.phonelookup to retrieve caller name (similar logic to rpt_CallAnalysisData)  
* Hist:	    12		09/16/2016		Clinton Woody		changed warexhouse donformed.leadsource to rentpath.dimension.leadtypes # 23874
* Hist:	    13	    02/24/2017		Kimbo Morrow		No case - Changed website to businessunit since I changed the column name in my RentPath.Dimension.LeadTypes table replacing the old.
* Hist:		14		05/09/2017	    Kimberley Morrow	Case# 01468091 - Changed audio url location
****************************************************************************************************************************************/
CREATE PROCEDURE [Reports].[rpt_MgmtLeadDetails] (
    @StartYMDDate DATETIME = NULL
   ,@EndYMDDate DATETIME = NULL
   ,@MgtCoID VARCHAR(15) = NULL
   ,@CBSACodes VARCHAR(MAX) = NULL)
AS 
BEGIN

    SET NOCOUNT ON;

    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    DECLARE @TrackDate DATETIME
       ,@LengthInSeconds INT
       ,@DatabaseName VARCHAR(128)
                
    SET @TrackDate = GETDATE()
    SET @LengthInSeconds = 0
    SET @DatabaseName = DB_NAME()        
		
    EXEC DBAUtility.dbo.pr_Logging_StoredProcsNoTemp 
        @DatabaseName = @DatabaseName
       , -- varchar(128)
        @ProcName = 'Reports.rpt_MgmtLeadDetails'
       , -- varchar(128)
        @StepName = 'Execute Procedure'
       , -- varchar(128)
        @VariableStates = ''
       , -- varchar(500)
        @LengthInSeconds = @LengthInSeconds
       , -- int
        @Comments = 'Execute Procedure'; -- varchar(500)
 
 --Test:
 /*DECLARE     @StartYMDDate DATETIME = '06/01/2015'
   ,@EndYMDDate DATETIME = '08/01/2015'
   ,@MgtCoID VARCHAR(15) = 100007622
   ,@CBSACodes VARCHAR(MAX) = '16740,20500'
  */
------------------------------------------------------------------------
-- Drop Temp Tables
------------------------------------------------------------------------
    IF OBJECT_ID('tempdb..#PropList') IS NOT NULL 
        DROP TABLE #PropList
    IF OBJECT_ID('tempdb..#AllLeads') IS NOT NULL 
        DROP TABLE #AllLeads

------------------------------------------------------------------------
-- Declare & Set Variables
------------------------------------------------------------------------
    DECLARE @StartYMDID AS INT
       ,@EndYMDID AS INT    

    SET @StartYMDDate = ISNULL(@StartYMDDate,GETDATE() - 1)
    SET @EndYMDDate = ISNULL(@EndYMDDate,GETDATE() - 1)

    SET @StartYMDID = CONVERT(VARCHAR,@StartYMDDate,112)
    SET @EndYMDID = CONVERT(VARCHAR,@EndYMDDate,112)

------------------------------------------------------------------------
-- Get all properties for the selected Mgt Co.
------------------------------------------------------------------------
    SELECT  ar.MgtCoName
           ,cb.CBSAName
           ,ar.Website
           ,ar.ListingID
           ,ar.PropertyName
           ,ar.PropertyAddress
           ,ar.PropertyCity
           ,ar.PropertyState
           ,ar.ZipCode PropertyZip
           ,ar.ExternalID
    INTO    #PropList
    FROM    ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS ar
    INNER JOIN DBAUtility.dbo.ZipCBSA cb
            ON ar.ZipCode = cb.ZIPCode
    WHERE   ar.MgtCoID = @MgtCoID
            AND CHARINDEX(cb.CBSACode,@CBSACodes) > 0;

------------------------------------------------------------------------
-- Get Leads (Calls and Email)
------------------------------------------------------------------------
    SELECT  leads.Website
           ,leads.ListingID
		   ,CASE WHEN ISNULL(Leads.FirstName,'') + ' ' + ISNULL(Leads.LastName,'') = ' ' THEN '--'
                 ELSE LTRIM(RTRIM(ISNULL(Leads.FirstName,'') + ' ' + ISNULL(Leads.LastName,'')))
            END AS FullName
           --,leads.FirstName
           --,leads.LastName
           ,leads.Email AS EmailAddress
           ,COALESCE(leads.DayPhone,NightPhone) AS PhoneNumber
           ,CONVERT(VARCHAR(30),'Digital Email') AS ContactMethod
           ,ISNULL(pc.LeadMediumDesc,'Not Categorized') + ' ' + ISNULL(pc.LeadTypeDesc,'Email') AS LeadCategory
           ,leads.WhenEntered AS LeadDate
           ,leads.Source
           ,CONVERT(VARCHAR(50),leads.leadid) AS LeadID
           ,CONVERT(VARCHAR(255),NULL) AS CallLocation
           ,CONVERT(VARCHAR(255),NULL) AS CallCity
           ,CONVERT(VARCHAR(255),NULL) AS CallState
           ,CONVERT(VARCHAR(255),NULL) AS CallZip
           ,CONVERT(VARCHAR(65),NULL) AS CallDuration
           ,CONVERT(VARCHAR(2000),NULL) AS AudioURL
    INTO    #AllLeads
    FROM    ApartmentGuide.Fact.AGRentWebFormLeads AS leads
    INNER JOIN #PropList AS PropList
            ON leads.ListingID = propList.ListingID
               AND leads.Website = propList.Website
    LEFT OUTER JOIN rentpath.dimension.leadtypes pc
	--(
 --                    SELECT LTRIM(SUBSTRING(LeadSourceBusinessKey,CHARINDEX('-',LeadSourceBusinessKey) + 1,LEN(LeadSourceBusinessKey))) AS LeadType
 --                          ,DBSourceSystemDesc
 --                          ,CASE WHEN dss.DBSourceSystemKey = 1 THEN 'AG'
 --                                ELSE 'Rent'
 --                           END AS Website
 --                          ,LeadTypeDesc
 --                          ,LeadMediumDesc
 --                    FROM   Warexhouse.Conformed.LeadSource AS ls
 --                    JOIN   Warexhouse.Conformed.DBSourceSystem AS dss
 --                           ON ls.DBSourceSystemKey = dss.DBSourceSystemKey
 --                    WHERE  dss.DBSourceSystemKey IN (1,6)
 --                           AND ls.LeadTypeDesc = 'Email'
 --                   ) AS pc
            ON leads.[Source] = pc.LeadType
               AND leads.Website = pc.BusinessUnit
			   AND pc.DBSourceSystemKey IN (1,6)
                            AND pc.LeadTypeDesc = 'Email'
    WHERE   leads.Status = 1
            AND leads.YMDID BETWEEN @StartYMDID AND @EndYMDID
-----------------
    UNION 
-----------------
    SELECT  calls.Website
           ,calls.ListingID
		   ,CASE WHEN ph.firstName IS NULL AND ph.LastName IS NULL THEN calls.CallerName
             ELSE ISNULL(ph.firstname,'') + ' ' + ISNULL(ph.lastname,'')
				END AS CallerName
           --,CASE WHEN CHARINDEX(' ',calls.CallerName) > 0 THEN LEFT(calls.CallerName,CHARINDEX(' ',calls.CallerName) - 1)
           --      ELSE ''
           -- END AS FirstName
           --,CASE WHEN CHARINDEX(' ',calls.CallerName) > 0 THEN SUBSTRING(calls.CallerName,CHARINDEX(' ',calls.CallerName) + 1,999)
           --      ELSE ISNULL(calls.CallerName,'Unknown')
           -- END AS LastName
           ,CONVERT(VARCHAR(255),'') AS EmailAddress
           ,calls.CallerPhoneNumber AS PhoneNumber
           ,CASE WHEN calls.CallType IN ('AGC','ASG') THEN 'Print Phone'
                 ELSE 'Digital Phone'
            END AS ContactMethod
           ,ISNULL(pc.LeadMediumDesc,'Not Categorized') + ' ' + ISNULL(pc.LeadTypeDesc,'Email') AS LeadCategory
           ,calls.CallEndDateTime AS LeadDate
           ,calls.CallType AS Source
           ,calls.CallID AS LeadID
           ,COALESCE(calls.CallerCity + ', ' + ISNULL(calls.CallerState,''),calls.CallerState,calls.CallerLocation) AS CallLocation
           ,calls.CallerCity
           ,calls.CallerState
           ,calls.CallerZip
           ,CASE WHEN LEN(CONVERT(VARCHAR,calls.durationInSeconds / 3600)) < 2 THEN '0' + CONVERT(VARCHAR,calls.durationInSeconds / 3600)
                 ELSE CONVERT(VARCHAR,calls.durationInSeconds / 3600)
            END-->Get Hours
            + ':' + CASE WHEN LEN(CONVERT(VARCHAR,(calls.durationInSeconds % 3600) / 60)) < 2 THEN '0' + CONVERT(VARCHAR,(calls.durationInSeconds % 3600) / 60)
                         ELSE CONVERT(VARCHAR,(calls.durationInSeconds % 3600) / 60)
                    END-->Get Minutes
            + ':' + CASE WHEN LEN(CONVERT(VARCHAR,calls.durationInSeconds % 60)) < 2 THEN '0' + CONVERT(VARCHAR,calls.durationInSeconds % 60)
                         ELSE CONVERT(VARCHAR,calls.durationInSeconds % 60)
                    END AS CallDuration
			,(CASE WHEN (calls.AudioURL IS NOT NULL) AND calls.Website = 'AG' THEN 'https://dashboard.apartmentguide.com/audio/mp3player/' + LTRIM(RTRIM(CONVERT(VARCHAR(300),calls.CallID)))
              WHEN (calls.AudioURL IS NOT NULL) AND calls.Website = 'RENT' THEN 'https://dashboard.rent.com/audio/mp3player/' + LTRIM(RTRIM(CONVERT(VARCHAR(300),calls.CallID)))
			  ELSE NULL
         END) AS AudioURL
    FROM    ApartmentGuide.Fact.AGRentPhoneLeads AS calls
    INNER JOIN #PropList AS PropList
            ON calls.ListingID = propList.ListingID
               AND calls.Website = proplist.Website
    LEFT OUTER JOIN ApartmentGuide.Dimension.PhoneLookup AS ph
        ON calls.CallerPhoneNumber = ph.phoneNumber
    LEFT OUTER JOIN rentpath.dimension.leadtypes pc
	 --(
  --                   SELECT LTRIM(SUBSTRING(LeadSourceBusinessKey,CHARINDEX('-',LeadSourceBusinessKey) + 1,LEN(LeadSourceBusinessKey))) AS LeadType
  --                         ,DBSourceSystemDesc
  --                         ,CASE WHEN dss.DBSourceSystemKey = 1 THEN 'AG'
  --                               ELSE 'Rent'
  --                          END AS Website
  --                         ,LeadTypeDesc
  --                         ,LeadMediumDesc
  --                   FROM   Warexhouse.Conformed.LeadSource AS ls
  --                   JOIN   Warexhouse.Conformed.DBSourceSystem AS dss
  --                          ON ls.DBSourceSystemKey = dss.DBSourceSystemKey
  --                   WHERE  dss.DBSourceSystemKey IN (1,6)
  --                          AND ls.LeadTypeDesc = 'Phone'
                    --) AS pc
            ON calls.CallType = pc.LeadType
               AND calls.Website = pc.BusinessUnit
			   AND pc.DBSourceSystemKey IN (1,6)
                            AND pc.LeadTypeDesc = 'Phone'
    WHERE   calls.CallStatus = 1
            AND calls.YMDID BETWEEN @StartYMDID AND @EndYMDID;

----------------------------------------------------------------------------------------------------------------
-- Get final dataset
----------------------------------------------------------------------------------------------------------------
    SELECT  leads.Website
           ,props.MgtCoName AS ManagementCoName
           ,props.CBSAName
           ,props.ListingID
           ,props.PropertyName
           ,props.PropertyAddress
           ,props.PropertyCity
           ,props.PropertyState
           ,props.PropertyZip
           ,CASE WHEN leads.FullName = ' ' THEN '--'
                 ELSE leads.FullName
            END AS FullName
           --,ISNULL(leads.FirstName,'--') AS FirstName
           --,ISNULL(leads.LastName,'--') AS LastName
           ,ISNULL(leads.EmailAddress,'--') AS EmailAddress
           ,ISNULL(leads.PhoneNumber,'--') AS PhoneNumber
           ,ISNULL(leads.ContactMethod,'--') AS ContactMethod
           ,ISNULL(leads.LeadCategory,'--') AS LeadCategory
           ,CONVERT(VARCHAR,leads.LeadDate,101) + ' ' + RIGHT(CONVERT(VARCHAR,leads.LeadDate,100),7) AS LeadDate
           ,ISNULL(leads.Source,'--') AS Source
           ,leads.CallLocation
           ,leads.CallCity
           ,leads.CallState
           ,leads.CallZip
           ,leads.CallDuration
           ,leads.AudioURL
           ,ISNULL(leads.LeadID,'--') AS LeadID
           ,props.ExternalID
    FROM    #PropList AS props
    LEFT JOIN #AllLeads AS leads
            ON props.ListingID = leads.ListingID
               AND props.Website = leads.Website
    ORDER BY props.PropertyName
           ,leads.LeadDate;

    SET NOCOUNT OFF;
END




GO
/****** Object:  StoredProcedure [Reports].[rpt_MgmtLeadDetails_CRTest]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/***************************************************************************************************************************************
* Name:  Reports.rpt_MgmtLeadDetails
* Desc:  Proc gets details for all leads (phone and internet)
* -----------------------------------------------------------------------------------------
* Test:  EXEC Reports.rpt_MgmtLeadDetails '07/01/2014','07/02/2014','18216','44180'
* -----------------------------------------------------------------------------------------
* Note:    
* -----------------------------------------------------------------------------------------
* Hist:		01		07/20/2010		Mary Pollard		Initial Version
* Hist:		02		07/21/2010		Richard Chen		Fix bugs
* Hist:		03		07/21/2010		Mary Pollard		Change to allow for multi-select of markets
* Hist:		04		12/02/2010		Mary Pollard		Broke out caller location into separate fields per Dani
* Hist:		05		01/09/2012		Richard Chen		Ticket 7628 ,Add external ID
* Hist:		06		02/19/2013		Brian Trembley		Ticket 11657, created new CBSA rpts. Created proc based on rpt_MgmtCoInternetPhoneLeads
* Hist:		07		11/21/2013		Sarah Mims			Ticket #13867 changed "Lead Categories" to be data driven instead of hard coded values 
* Hist:		08		01/07/2014		Sarah Mims			Ticket #14270 - modified to include Rent.
* Hist:		09		07/02/2014		Sarah Mims			Ticket # 16137 - changed RIGHT 6 to RIGHT 7 to show the correct time
* Hist:		10		01/05/2014		Sarah Mims			No ticket - removed website parameter
* Hist:		11		08/07/2015		Colleen Rocks		Ticket 20302; added left join to dim.phonelookup to retrieve caller name (similar logic to rpt_CallAnalysisData)  
****************************************************************************************************************************************/
CREATE PROCEDURE [Reports].[rpt_MgmtLeadDetails_CRTest] (
    @StartYMDDate DATETIME = NULL
   ,@EndYMDDate DATETIME = NULL
   ,@MgtCoID VARCHAR(15) = NULL
   ,@CBSACodes VARCHAR(MAX) = NULL)
AS 
BEGIN

    SET NOCOUNT ON;

    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    DECLARE @TrackDate DATETIME
       ,@LengthInSeconds INT
       ,@DatabaseName VARCHAR(128)
                
    SET @TrackDate = GETDATE()
    SET @LengthInSeconds = 0
    SET @DatabaseName = DB_NAME()        
		
    EXEC DBAUtility.dbo.pr_Logging_StoredProcsNoTemp 
        @DatabaseName = @DatabaseName
       , -- varchar(128)
        @ProcName = 'Reports.rpt_MgmtLeadDetails'
       , -- varchar(128)
        @StepName = 'Execute Procedure'
       , -- varchar(128)
        @VariableStates = ''
       , -- varchar(500)
        @LengthInSeconds = @LengthInSeconds
       , -- int
        @Comments = 'Execute Procedure'; -- varchar(500)
 
 --Test:
 /*DECLARE     @StartYMDDate DATETIME = '06/01/2015'
   ,@EndYMDDate DATETIME = '08/01/2015'
   ,@MgtCoID VARCHAR(15) = 100007622
   ,@CBSACodes VARCHAR(MAX) = '16740,20500'
  */
------------------------------------------------------------------------
-- Drop Temp Tables
------------------------------------------------------------------------
    IF OBJECT_ID('tempdb..#PropList') IS NOT NULL 
        DROP TABLE #PropList
    IF OBJECT_ID('tempdb..#AllLeads') IS NOT NULL 
        DROP TABLE #AllLeads

------------------------------------------------------------------------
-- Declare & Set Variables
------------------------------------------------------------------------
    DECLARE @StartYMDID AS INT
       ,@EndYMDID AS INT    

    SET @StartYMDDate = ISNULL(@StartYMDDate,GETDATE() - 1)
    SET @EndYMDDate = ISNULL(@EndYMDDate,GETDATE() - 1)

    SET @StartYMDID = CONVERT(VARCHAR,@StartYMDDate,112)
    SET @EndYMDID = CONVERT(VARCHAR,@EndYMDDate,112)

------------------------------------------------------------------------
-- Get all properties for the selected Mgt Co.
------------------------------------------------------------------------
    SELECT  ar.MgtCoName
           ,cb.CBSAName
           ,ar.Website
           ,ar.ListingID
           ,ar.PropertyName
           ,ar.PropertyAddress
           ,ar.PropertyCity
           ,ar.PropertyState
           ,ar.ZipCode PropertyZip
           ,ar.ExternalID
    INTO    #PropList
    FROM    ApartmentGuide.Dimension.AGRentCombinedDimensionListingsRCTest AS ar
    INNER JOIN DBAUtility.dbo.ZipCBSA cb
            ON ar.ZipCode = cb.ZIPCode
    WHERE   ar.MgtCoID = @MgtCoID
            AND CHARINDEX(cb.CBSACode,@CBSACodes) > 0;

------------------------------------------------------------------------
-- Get Leads (Calls and Email)
------------------------------------------------------------------------
    SELECT  Leads.Website
           ,leads.ListingID
		   ,CASE WHEN ISNULL(Leads.FirstName,'') + ' ' + ISNULL(Leads.LastName,'') = ' ' THEN '--'
                 ELSE LTRIM(RTRIM(ISNULL(Leads.FirstName,'') + ' ' + ISNULL(Leads.LastName,'')))
            END AS FullName
           --,leads.FirstName
           --,leads.LastName
           ,leads.Email AS EmailAddress
           ,COALESCE(leads.DayPhone,NightPhone) AS PhoneNumber
           ,CONVERT(VARCHAR(30),'Digital Email') AS ContactMethod
           ,ISNULL(pc.LeadMediumDesc,'Not Categorized') + ' ' + ISNULL(pc.LeadTypeDesc,'Email') AS LeadCategory
           ,leads.WhenEntered AS LeadDate
           ,leads.Source
           ,CONVERT(VARCHAR(50),leads.leadid) AS LeadID
           ,CONVERT(VARCHAR(255),NULL) AS CallLocation
           ,CONVERT(VARCHAR(255),NULL) AS CallCity
           ,CONVERT(VARCHAR(255),NULL) AS CallState
           ,CONVERT(VARCHAR(255),NULL) AS CallZip
           ,CONVERT(VARCHAR(65),NULL) AS CallDuration
           ,CONVERT(VARCHAR(2000),NULL) AS AudioURL
    INTO    #AllLeads
    FROM    ApartmentGuide.Fact.AGRentWebFormLeads AS leads
    INNER JOIN #PropList AS PropList
            ON leads.ListingID = propList.ListingID
               AND leads.Website = propList.Website
    LEFT OUTER JOIN (
                     SELECT LTRIM(SUBSTRING(LeadSourceBusinessKey,CHARINDEX('-',LeadSourceBusinessKey) + 1,LEN(LeadSourceBusinessKey))) AS LeadType
                           ,DBSourceSystemDesc
                           ,CASE WHEN dss.DBSourceSystemKey = 1 THEN 'AG'
                                 ELSE 'Rent'
                            END AS Website
                           ,LeadTypeDesc
                           ,LeadMediumDesc
                     FROM   Warehouse.Conformed.LeadSource AS ls
                     JOIN   Warehouse.Conformed.DBSourceSystem AS dss
                            ON ls.DBSourceSystemKey = dss.DBSourceSystemKey
                     WHERE  dss.DBSourceSystemKey IN (1,6)
                            AND ls.LeadTypeDesc = 'Email'
                    ) AS pc
            ON leads.[Source] = pc.LeadType
               AND leads.Website = pc.Website
    WHERE   leads.Status = 1
            AND leads.YMDID BETWEEN @StartYMDID AND @EndYMDID
-----------------
    UNION 
-----------------
    SELECT  calls.Website
           ,calls.ListingID
		   ,CASE WHEN ph.firstName IS NULL AND ph.LastName IS NULL THEN calls.CallerName
             ELSE ISNULL(ph.firstname,'') + ' ' + ISNULL(ph.lastname,'')
				END AS CallerName
           --,CASE WHEN CHARINDEX(' ',calls.CallerName) > 0 THEN LEFT(calls.CallerName,CHARINDEX(' ',calls.CallerName) - 1)
           --      ELSE ''
           -- END AS FirstName
           --,CASE WHEN CHARINDEX(' ',calls.CallerName) > 0 THEN SUBSTRING(calls.CallerName,CHARINDEX(' ',calls.CallerName) + 1,999)
           --      ELSE ISNULL(calls.CallerName,'Unknown')
           -- END AS LastName
           ,CONVERT(VARCHAR(255),'') AS EmailAddress
           ,calls.CallerPhoneNumber AS PhoneNumber
           ,CASE WHEN calls.CallType IN ('AGC','ASG') THEN 'Print Phone'
                 ELSE 'Digital Phone'
            END AS ContactMethod
           ,ISNULL(pc.LeadMediumDesc,'Not Categorized') + ' ' + ISNULL(pc.LeadTypeDesc,'Email') AS LeadCategory
           ,calls.CallEndDateTime AS LeadDate
           ,calls.CallType AS Source
           ,calls.CallID AS LeadID
           ,COALESCE(calls.CallerCity + ', ' + ISNULL(calls.CallerState,''),calls.CallerState,calls.CallerLocation) AS CallLocation
           ,calls.CallerCity
           ,calls.CallerState
           ,calls.CallerZip
           ,CASE WHEN LEN(CONVERT(VARCHAR,calls.durationInSeconds / 3600)) < 2 THEN '0' + CONVERT(VARCHAR,calls.durationInSeconds / 3600)
                 ELSE CONVERT(VARCHAR,calls.durationInSeconds / 3600)
            END-->Get Hours
            + ':' + CASE WHEN LEN(CONVERT(VARCHAR,(calls.durationInSeconds % 3600) / 60)) < 2 THEN '0' + CONVERT(VARCHAR,(calls.durationInSeconds % 3600) / 60)
                         ELSE CONVERT(VARCHAR,(calls.durationInSeconds % 3600) / 60)
                    END-->Get Minutes
            + ':' + CASE WHEN LEN(CONVERT(VARCHAR,calls.durationInSeconds % 60)) < 2 THEN '0' + CONVERT(VARCHAR,calls.durationInSeconds % 60)
                         ELSE CONVERT(VARCHAR,calls.durationInSeconds % 60)
                    END AS CallDuration
           , -->Get Seconds
            calls.AudioURL
    FROM    ApartmentGuide.Fact.AGRentPhoneLeads AS calls
    INNER JOIN #PropList AS PropList
            ON calls.ListingID = propList.ListingID
               AND calls.Website = proplist.Website
    LEFT OUTER JOIN ApartmentGuide.Dimension.PhoneLookup AS ph
        ON calls.CallerPhoneNumber = ph.phoneNumber
    LEFT OUTER JOIN (
                     SELECT LTRIM(SUBSTRING(LeadSourceBusinessKey,CHARINDEX('-',LeadSourceBusinessKey) + 1,LEN(LeadSourceBusinessKey))) AS LeadType
                           ,DBSourceSystemDesc
                           ,CASE WHEN dss.DBSourceSystemKey = 1 THEN 'AG'
                                 ELSE 'Rent'
                            END AS Website
                           ,LeadTypeDesc
                           ,LeadMediumDesc
                     FROM   Warehouse.Conformed.LeadSource AS ls
                     JOIN   Warehouse.Conformed.DBSourceSystem AS dss
                            ON ls.DBSourceSystemKey = dss.DBSourceSystemKey
                     WHERE  dss.DBSourceSystemKey IN (1,6)
                            AND ls.LeadTypeDesc = 'Phone'
                    ) AS pc
            ON calls.CallType = pc.LeadType
               AND calls.Website = pc.Website
    WHERE   calls.CallStatus = 1
            AND calls.YMDID BETWEEN @StartYMDID AND @EndYMDID;

----------------------------------------------------------------------------------------------------------------
-- Get final dataset
----------------------------------------------------------------------------------------------------------------
    SELECT  leads.Website
           ,props.MgtCoName AS ManagementCoName
           ,props.CBSAName
           ,props.ListingID
           ,props.PropertyName
           ,props.PropertyAddress
           ,props.PropertyCity
           ,props.PropertyState
           ,props.PropertyZip
           ,CASE WHEN leads.FullName = ' ' THEN '--'
                 ELSE leads.FullName
            END AS FullName
           --,ISNULL(leads.FirstName,'--') AS FirstName
           --,ISNULL(leads.LastName,'--') AS LastName
           ,ISNULL(leads.EmailAddress,'--') AS EmailAddress
           ,ISNULL(leads.PhoneNumber,'--') AS PhoneNumber
           ,ISNULL(leads.ContactMethod,'--') AS ContactMethod
           ,ISNULL(leads.LeadCategory,'--') AS LeadCategory
           ,CONVERT(VARCHAR,leads.LeadDate,101) + ' ' + RIGHT(CONVERT(VARCHAR,leads.LeadDate,100),7) AS LeadDate
           ,ISNULL(leads.Source,'--') AS Source
           ,leads.CallLocation
           ,leads.CallCity
           ,leads.CallState
           ,leads.CallZip
           ,leads.CallDuration
           ,leads.AudioURL
           ,ISNULL(leads.LeadID,'--') AS LeadID
           ,props.ExternalID
    FROM    #PropList AS props
    LEFT JOIN #AllLeads AS leads
            ON props.ListingID = leads.ListingID
               AND props.Website = leads.Website
    ORDER BY props.PropertyName
           ,leads.LeadDate;

    SET NOCOUNT OFF;
END



GO
/****** Object:  StoredProcedure [Reports].[rpt_MgmtLeadDetails_Daily]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/***************************************************************************************************************************************
* Name:  Reports.rpt_MgmtLeadDetails_Daily
* Desc:  Proc gets details for all leads (phone and internet) daily or weekly
* -----------------------------------------------------------------------------------------
* Test:  EXEC Reports.rpt_MgmtLeadDetails_Daily 1,'18216'
* -----------------------------------------------------------------------------------------
* Note:    
* -----------------------------------------------------------------------------------------
* Hist:		01		06/15/2017		Kimberley Morrow		Case# 01487473 - Initial Version
****************************************************************************************************************************************/

CREATE PROCEDURE [Reports].[rpt_MgmtLeadDetails_Daily] (
    @frequency INT
   ,@MgtCoID VARCHAR(15) = NULL)
AS
SET NOCOUNT ON;

 

 /*
 DECLARE     
 @Frequency INT = 1
,@MgtCoID VARCHAR(15) = '6020'
,@CBSACodes VARCHAR(MAX) = '16740,20500'
*/

------------------------------------------------------------------------
-- Drop Temp Tables
------------------------------------------------------------------------
BEGIN TRY
    DROP TABLE #PropList;
END TRY
BEGIN CATCH
END CATCH;


BEGIN TRY
    DROP TABLE #AllLeads;
END TRY
BEGIN CATCH
END CATCH;

------------------------------------------------------------------------
-- Declare & Set Variables
------------------------------------------------------------------------

DECLARE @StartYMDID AS INT;

IF @frequency = 1
    BEGIN

        SET @StartYMDID = CAST(CONVERT(VARCHAR(8),GETDATE() - 1,112) AS INT);
    END;          

IF @frequency = 2
    BEGIN

        SET @StartYMDID = CAST(CONVERT(VARCHAR(8),GETDATE() - 7,112) AS INT);

    END;

------------------------------------------------------------------------
-- Get all properties for the selected Mgt Co.
------------------------------------------------------------------------
SELECT  ar.MgtCoNameAG AS MgtCoName
       ,cb.CBSAName
       ,ar.ListingID
       ,ar.PropertyName
       ,ar.PropertyAddress
       ,ar.PropertyCity
       ,ar.PropertyState
       ,ar.PropertyZipCode
       ,ar.ExternalID
INTO    #PropList
FROM    RentPath.Dimension.Listings AS ar
INNER JOIN DBAUtility.dbo.ZipCBSA cb
        ON ar.PropertyZipCode = cb.ZIPCode
WHERE   ar.MgtCoIDAG = @MgtCoID
        AND cb.CBSACode > 0
        AND (ar.StatusIDAG = 1
             OR ar.StatusIDRent = 1);

------------------------------------------------------------------------
-- Get Leads (Calls and Email)
------------------------------------------------------------------------
SELECT  leads.Website
       ,leads.ListingID
       ,CASE WHEN ISNULL(leads.FirstName,'') + ' ' + ISNULL(leads.LastName,'') = ' ' THEN '--'
             ELSE LTRIM(RTRIM(ISNULL(leads.FirstName,'') + ' ' + ISNULL(leads.LastName,'')))
        END AS FullName
       ,leads.Email AS EmailAddress
       ,COALESCE(leads.DayPhone,NightPhone) AS PhoneNumber
       ,CONVERT(VARCHAR(30),'Digital Email') AS ContactMethod
       ,ISNULL(pc.LeadMediumDesc,'Not Categorized') + ' ' + ISNULL(pc.LeadTypeDesc,'Email') AS LeadCategory
       ,leads.WhenEntered AS LeadDate
       ,leads.Source
       ,CONVERT(VARCHAR(50),leads.LeadID) AS LeadID
       ,CONVERT(VARCHAR(255),NULL) AS CallLocation
       ,CONVERT(VARCHAR(255),NULL) AS CallCity
       ,CONVERT(VARCHAR(255),NULL) AS CallState
       ,CONVERT(VARCHAR(255),NULL) AS CallZip
       ,CONVERT(VARCHAR(65),NULL) AS CallDuration
       ,CONVERT(VARCHAR(2000),NULL) AS AudioURL
INTO    #AllLeads
FROM    RentPath.Mart.EmailLeads AS leads
INNER JOIN #PropList AS PropList
        ON leads.ListingID = PropList.ListingID
LEFT OUTER JOIN RentPath.Dimension.LeadTypes pc
        ON leads.[Source] = pc.LeadType
           AND leads.Website = pc.BusinessUnit
           AND pc.DBSourceSystemKey IN (1,6)
           AND pc.LeadTypeDesc = 'Email'
WHERE   leads.Status = 1
        AND leads.YMDID >= @StartYMDID
-----------------
UNION 
-----------------
SELECT  calls.Website
       ,calls.ListingID
       ,CASE WHEN ph.FirstName IS NULL
                  AND ph.LastName IS NULL THEN calls.CallerName
             ELSE ISNULL(ph.FirstName,'') + ' ' + ISNULL(ph.LastName,'')
        END AS CallerName
       ,CONVERT(VARCHAR(255),'') AS EmailAddress
       ,calls.CallerPhoneNumber AS PhoneNumber
       ,CASE WHEN calls.CallType IN ('AGC','ASG') THEN 'Print Phone'
             ELSE 'Digital Phone'
        END AS ContactMethod
       ,ISNULL(pc.LeadMediumDesc,'Not Categorized') + ' ' + ISNULL(pc.LeadTypeDesc,'Email') AS LeadCategory
       ,calls.CallEndDateTime AS LeadDate
       ,calls.CallType AS Source
       ,calls.CallID AS LeadID
       ,COALESCE(calls.CallerCity + ', ' + ISNULL(calls.CallerState,''),calls.CallerState,calls.CallerLocation) AS CallLocation
       ,calls.CallerCity
       ,calls.CallerState
       ,calls.CallerZip
       ,CASE WHEN LEN(CONVERT(VARCHAR,calls.DurationInSeconds / 3600)) < 2 THEN '0' + CONVERT(VARCHAR,calls.DurationInSeconds / 3600)
             ELSE CONVERT(VARCHAR,calls.DurationInSeconds / 3600)
        END-->Get Hours
        + ':' + CASE WHEN LEN(CONVERT(VARCHAR,(calls.DurationInSeconds % 3600) / 60)) < 2 THEN '0' + CONVERT(VARCHAR,(calls.DurationInSeconds % 3600) / 60)
                     ELSE CONVERT(VARCHAR,(calls.DurationInSeconds % 3600) / 60)
                END-->Get Minutes
        + ':' + CASE WHEN LEN(CONVERT(VARCHAR,calls.DurationInSeconds % 60)) < 2 THEN '0' + CONVERT(VARCHAR,calls.DurationInSeconds % 60)
                     ELSE CONVERT(VARCHAR,calls.DurationInSeconds % 60)
                END AS CallDuration
       ,(CASE WHEN (calls.AudioURL IS NOT NULL)
                   AND calls.Website = 'AG' THEN 'https://dashboard.apartmentguide.com/audio/mp3player/' + LTRIM(RTRIM(CONVERT(VARCHAR(300),calls.CallID)))
              WHEN (calls.AudioURL IS NOT NULL)
                   AND calls.Website = 'RENT' THEN 'https://dashboard.rent.com/audio/mp3player/' + LTRIM(RTRIM(CONVERT(VARCHAR(300),calls.CallID)))
              ELSE NULL
         END) AS AudioURL
FROM    ApartmentGuide.Fact.AGRentPhoneLeads AS calls
INNER JOIN #PropList AS PropList
        ON calls.ListingID = PropList.ListingID
LEFT OUTER JOIN ApartmentGuide.Dimension.PhoneLookup AS ph
        ON calls.CallerPhoneNumber = ph.PhoneNumber
LEFT OUTER JOIN RentPath.Dimension.LeadTypes pc
        ON calls.CallType = pc.LeadType
           AND calls.Website = pc.BusinessUnit
           AND pc.DBSourceSystemKey IN (1,6)
           AND pc.LeadTypeDesc = 'Phone'
WHERE   calls.CallStatus = 1
        AND calls.YMDID >= @StartYMDID;
----------------------------------------------------------------------------------------------------------------
-- Get final dataset
----------------------------------------------------------------------------------------------------------------
SELECT  leads.Website
       ,props.MgtCoName AS ManagementCoName
       ,props.CBSAName
       ,props.ListingID
       ,props.PropertyName
       ,props.PropertyAddress
       ,props.PropertyCity
       ,props.PropertyState
       ,props.PropertyZipCode
       ,CASE WHEN leads.FullName = ' ' THEN '--'
             ELSE leads.FullName
        END AS FullName
       ,ISNULL(leads.EmailAddress,'--') AS EmailAddress
       ,ISNULL(leads.PhoneNumber,'--') AS PhoneNumber
       ,ISNULL(leads.ContactMethod,'--') AS ContactMethod
       ,ISNULL(leads.LeadCategory,'--') AS LeadCategory
       ,CONVERT(VARCHAR,leads.LeadDate,101) + ' ' + RIGHT(CONVERT(VARCHAR,leads.LeadDate,100),7) AS LeadDate
       ,ISNULL(leads.Source,'--') AS Source
       ,leads.CallLocation
       ,leads.CallCity
       ,leads.CallState
       ,leads.CallZip
       ,leads.CallDuration
       ,leads.AudioURL
       ,ISNULL(leads.LeadID,'--') AS LeadID
       ,props.ExternalID
FROM    #PropList AS props
JOIN    #AllLeads AS leads
        ON props.ListingID = leads.ListingID
ORDER BY props.PropertyName
       ,leads.LeadDate;



SET NOCOUNT OFF;




GO
/****** Object:  StoredProcedure [Reports].[rpt_MgmtLeadHeader]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Reports].[rpt_MgmtLeadHeader] (
   @MgtCoID VARCHAR(15)
   ,@CBSACode VARCHAR(4000))
/*********************************************************************************************************
*
* Name:	Reports.rpt_MgmtLeadHeader
*
* Desc:	Used to pull Monthly Magement Company Lead header Data by CBSA
*
* Test:	EXEC Reports.rpt_MgmtLeadHeader 6024,'12420,19100,26420'
*
* Note: Defaults to last years for previous month. Uses the logic from Reports.rpt_MgtLeadHeader but
*		instead of showing by AG Market, this report shows by CBSA. It also does NOT inclue Print Tracked.
*
* Hist:	01	01/14/2013		Sarah Mims			Initial Version. Ticket #11441.
*		02	01/16/2014		Sarah Mims			Ticket # 14270 - modified to include Rent
*		03	12/15/2014		Sarah Mims			No ticket - removed website parameter
**********************************************************************************************************/
AS 
SET NOCOUNT ON

----------------------------------------------------------------------------------------------------------
--Declare and set CurrentYM
----------------------------------------------------------------------------------------------------------
DECLARE @CurrentYM AS INT
   ,@CurrentYearMonth AS VARCHAR(20)

SET @CurrentYM = CAST(CONVERT(VARCHAR(6),GETDATE() - 1,112) AS INT) 
SET @CurrentYearMonth = (SELECT DISTINCT MonthShortName + ' ' + CAST(Year AS VARCHAR(4))
						FROM DBAUtility.Dimension.Dates AS d
						WHERE d.YearMonth = @CurrentYM)
                        
--------------------------------------------------------------------------------------------------------------
--Select out result set
--------------------------------------------------------------------------------------------------------------                        
SELECT  dl.MgtCoID
	   ,dl.MgtCoName
	   ,dl.Website
       ,@CurrentYearMonth		AS CurrentYearMonth
       ,COUNT(dl.ListingID)		AS Count_ActiveProp
FROM    ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
LEFT OUTER JOIN DBAUtility.dbo.ZipCBSA AS zc
        ON dl.ZipCode = zc.ZIPCode
WHERE   dl.MgtCoID = @MgtCoID
        AND ISNULL(CHARINDEX(zc.CBSACode,@CBSACode),'00000') > 0
        AND dl.StatusID = 1
GROUP BY dl.MgtCoID
,dl.MgtCoName
,dl.Website


SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [Reports].[rpt_MgmtLeadSummaryDetail]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Reports].[rpt_MgmtLeadSummaryDetail]
   (
   @MgtCoID VARCHAR(15)
   ,@CBSACode VARCHAR(4000)
   ,@StartYMDDate AS DATETIME = NULL
   ,@EndYMDDate AS DATETIME = NULL
	) 
/*************************************************************************************************
*
* Name:	Reports.rpt_MgmtLeadSummaryDetail
*
* Desc:	Used to pull Monthly Management Company Lead Detail Data by CBSA
*
* Test:	EXEC Reports.rpt_MgmtLeadSummaryDetail 10076,'26420','11/01/2013','11/30/2014'
*		EXEC Reports.rpt_MgmtLeadSummaryDetail 0,6024,'12060,12420,16980,19100,1974,26420,28140,29940,31100,33100,35620,40140,42660','01/01/2012','01/31/2013'
*		EXEC Reports.rpt_MgmtLeadSummaryDetail 0,10076,'16740,26420,28660,41700,43340,46140','12/01/2012','12/31/2013'
*		EXEC Reports.rpt_MgmtLeadSummaryDetail 0,6008,'11460,12060,12580,14460,14500,14860,16740,18140,19100,19660,19740,19820,20500,21140,25540,25980,26900,27260
*		,28580,31100,31420,31700,33100,33140,33460,35620,35840,36740,37100,37340,37980,38060,38940,38860,38900,39300,40140,41700,41740,41860,41940,42220,42660,44140,41180
*		,45300,46060,46140,47580,47900,49340','12/01/2012','12/31/2013'
*
* Note: Logic changed for the Rent Migration and the new report requests that come along with it
*
* Hist:	01	01/14/2013		Sarah Mims			Initial Version. Ticket #11441.
*		02	01/16/2014		Sarah Mims			Ticket # 14357 - modified to include Rent
*		03	01/23/2014		Sarah Mims			Ticket # 14357 - removed Include parameter and changed
*												report logic based on Dani's new request
*		04	12/15/2014		Sarah Mims			No ticket - removed website parameter because we are 
*												now showing "RentPath" leads
*		02	10/18/2016		Bob Langley			Ticket 24212 - Changed to add MissedCalls to leads (where does connectedcalls)
**************************************************************************************************/
AS 
SET NOCOUNT ON
---------------------------------------------------------------------------------------------------
--Declare and set variables
---------------------------------------------------------------------------------------------------

DECLARE @StartYMDID AS INT
   ,@EndYMDID AS INT
   ,@LastYearStartYMDID INT
   ,@LastYearEndYMDID INT
        

SET @StartYMDDate = ISNULL(@StartYMDDate,DATEADD(MONTH,-12,GETDATE())) 
SET @EndYMDDate = ISNULL(@EndYMDDate,DATEADD(MONTH,-0,GETDATE())) 
SET @StartYMDID = CAST(CONVERT(VARCHAR(8),@StartYMDDate,112) AS INT)
SET @EndYMDID = CAST(CONVERT(VARCHAR(8),@EndYMDDate,112) AS INT)

IF @EndYMDID > CAST(CONVERT(VARCHAR(8),GETDATE() - 1,112) AS INT) 
    BEGIN
        SET @EndYMDID = CAST(CONVERT(VARCHAR(8),GETDATE() - 1,112) AS INT)
    END

SET @LastYearStartYMDID = @StartYMDID - 10000
SET @LastYearEndYMDID = @EndYMDID - 10000     

-------------------------------------------------------------------
-- Find the last date of each month in selected date range
-------------------------------------------------------------------
SELECT  d.monthEndYmdID
INTO    #Dates
FROM    (
         SELECT DISTINCT
                MonthEndYMDID
         FROM   DBAUtility.Dimension.Dates AS d2
         WHERE  YMDID BETWEEN @StartYmdid AND @EndYmdid
                AND MonthEndYMDID BETWEEN @StartYmdid AND @EndYmdid
         UNION
         SELECT @EndYmdid
        ) AS d
ORDER BY d.MonthEndYMDID	

------------------------------------------------------------------------
--Find all the ListingIDs that were active at any point during that time
--frame that were associated with management company based on the
--Website parameter selected 
------------------------------------------------------------------------
SELECT  dl.ListingID
       ,ISNULL(MAX(CASE WHEN dl.Website = 'AG' THEN 1
                        ELSE 0
                   END),0) AS AGFlag
       ,ISNULL(MAX(CASE WHEN dl.Website = 'Rent' THEN 1
                        ELSE 0
                   END),0) AS RentFlag
       ,zc.CBSACode
       ,zc.CBSAName
INTO    #Lim
FROM    ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
JOIN    ApartmentGuide.Mart.AGRentCombinedMartListings AS ml
        ON dl.ListingID = ml.ListingID
           AND dl.Website = ml.Website
LEFT OUTER JOIN DBAUtility.dbo.ZipCBSA AS zc
        ON dl.ZipCode = zc.ZIPCode
WHERE   dl.mgtcoid = @MgtCoID
        AND ml.YMDID BETWEEN @StartYMDID AND @EndYMDID
        AND CHARINDEX(ISNULL(zc.CBSACode,'00000'),@CBSACode) > 0
GROUP BY dl.ListingID
       ,zc.CBSACode
       ,zc.CBSAName
HAVING  MAX(ml.ListingStatusID) = 1                       

-------------------------------------------------------------------
-- Tier information is based on the last date of the given month.
-------------------------------------------------------------------
SELECT  ml.yearmonth
       ,d.MonthEndYmdID
       ,lm.CBSACode
       ,lm.CBSAName
       ,ml.ListingID
       ,CASE MAX(ml.PlacementTier)
          WHEN 05 THEN 'D'
          WHEN 10 THEN 'P'
          WHEN 20 THEN 'G'
          WHEN 30 THEN 'S'
          ELSE ''
        END AS PlacementTier
       ,MAX(ml.PrintProductPoints)			AS PrintProductPoints
       ,MAX(ml.InternetProductPoints)		AS InternetProductPoints
       ,MAX(ml.LegacyLoyaltyPoints)			AS LegacyLoyaltyPoints
       ,MAX(ml.ContractLoyaltyPoints)		AS ContractLoyaltyPoints
INTO    #Tier
FROM    ApartmentGuide.Mart.AGRentCombinedMartListings AS ml
INNER JOIN #Lim AS lm
        ON ml.listingid = lm.listingid
INNER JOIN #Dates AS d
        ON ml.ymdid = d.MonthEndYmdid
GROUP BY ml.yearmonth
       ,d.MonthEndYmdID
       ,lm.CBSACode
       ,lm.CBSAName
       ,ml.ListingID   
          
---------------------------------------------------------------------------------------------------------------
-- Get base dataset
---------------------------------------------------------------------------------------------------------------
SELECT  ml.yearmonth AS NumYearMonth
       ,DATENAME(MONTH,CAST(yearmonth AS VARCHAR(6)) + '01') + ' ' + LEFT(yearmonth,4) AS YearMonth
       ,zc.CBSACode
       ,zc.CBSAName
       ,ml.ListingID
       ,l.propertyname
	   ,MAX(lm.AGFlag) AS AGFlag
	   ,MAX(CASE WHEN lm.AGFlag = 1 AND ml.Website = 'AG' AND ml.ListingStatusID = 1 THEN 1 ELSE 0 END) AS AGListingStatusID
	   ,MAX(lm.RentFlag) AS RentFlag
	   ,MAX(CASE WHEN lm.RentFlag = 1 AND ml.Website = 'Rent' AND ml.ListingStatusID = 1 THEN 1 ELSE 0 END) AS RentListingStatusID								                                  
       ,SUM(ml.AllLeads) AS AllLeads
       ,SUM(ml.AGCPrintConnectedCalls + ml.AGCPrintMissedCalls) AS PrintCalls
       ,SUM(ml.InternetPhoneLeads_NoMobile) AS InternetPhoneLeads_NoMobile
       ,SUM(ml.InternetEmailLeads_NoMobile) AS InternetEmailLeads_NoMobile
	   ,SUM(ml.AllInternetLeads_NoMobile)	AS AllInternetLeads_NoMobile
       ,SUM(ml.MobileCalls) AS MobileCalls
       ,SUM(ml.MobileEmails) AS MobileEmails
	   ,SUM(ml.MobileAllLeads) AS MobileAllLeads
       ,SUM(ml.ThirdPartyFeedLeads) AS ThirdPartyFeedLeads
	   ,SUM(ml.CraigsListConnectedCalls + ml.CraigsListMissedCalls) AS AdCreatorPhoneLeads
INTO    #Lead
FROM    ApartmentGuide.Mart.AGRentCombinedMartListings AS ml
INNER JOIN ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS l
        ON ml.listingid = l.listingid
		   AND ml.Website = l.Website
INNER JOIN #Lim AS lm
		ON lm.ListingID = l.ListingID
LEFT OUTER JOIN DBAUtility.dbo.ZipCBSA AS zc
        ON l.ZipCode = zc.ZIPCode
WHERE   l.MgtCoID = @MgtCoID
		AND ml.YMDID BETWEEN @StartYMDID AND @EndYMDID
        AND CHARINDEX(ISNULL(zc.CBSACode,'00000'),@CBSACode) > 0
GROUP BY ml.yearMonth
       ,zc.CBSACode
       ,zc.CBSAName
       ,ml.ListingID
       ,l.propertyname   
                                                    
-------------------------------------------------------------------------------------------------------------
--Pull in Leads from the Previous Year
-------------------------------------------------------------------------------------------------------------                      
SELECT  ml.yearmonth AS NumYearMonth
       ,DATENAME(MONTH,CAST(yearmonth AS VARCHAR(6)) + '01') + ' ' + LEFT(yearmonth,4) AS YearMonth
       ,ml.ListingID
       ,SUM(ml.agcallleads) AS PreviousYearsAllLeads
INTO    #LeadsPreviousYear
FROM    ApartmentGuide.Mart.AGRentCombinedMartListings AS ml
INNER JOIN apartmentguide.dimension.AGRentCombinedDimensionListings AS l
        ON ml.listingid = l.listingid
		AND ml.Website = l.Website
INNER JOIN #Lim AS lm
		ON l.ListingID = lm.ListingID
LEFT OUTER JOIN DBAUtility.dbo.ZipCBSA AS zc
        ON l.ZipCode = zc.ZIPCode
           AND CHARINDEX(ISNULL(zc.CBSACode,'00000'),@CBSACode) > 0
WHERE   l.MgtCoID = @Mgtcoid
	AND ml.YMDID BETWEEN @LastYearStartYMDID AND @LastYearEndYMDID
GROUP BY ml.yearMonth	
       ,ml.ListingID    
                     
-------------------------------------------------------------------
-- Select out final dataset with Tier & Call Duration
-------------------------------------------------------------------

SELECT  l.numYearMonth
	   ,l.AGFlag
	   ,l.AGListingStatusID
	   ,l.RentFlag
	   ,l.RentListingStatusID
	   ,CASE WHEN (l.AGListingStatusID + l.RentListingStatusID) > 1 THEN 1 ELSE (l.AGListingStatusID + l.RentListingStatusID) END AS UseForAverageFlag			       
       ,l.yearmonth
       ,l.CBSACode
       ,l.CBSAName
       ,l.propertyname
       ,l.ListingID
	   ,l.AllLeads
	   ,ISNULL(lpy.PreviousYearsAllLeads,0)						AS PreviousYearsAllLeads
	   ,l.PrintCalls
	   ,l.InternetPhoneLeads_NoMobile
	   ,l.InternetEmailLeads_NoMobile
	   ,l.AllInternetLeads_NoMobile
	   ,l.InternetEmailLeads_NoMobile - l.ThirdPartyFeedLeads	AS ReportInternetEmails
	   ,l.AllInternetLeads_NoMobile - l.ThirdPartyFeedLeads		AS ReportInternetLeads
	   ,l.MobileCalls
	   ,l.MobileEmails
	   ,l.MobileAllLeads
	   ,l.ThirdPartyFeedLeads
	   ,l.AdCreatorPhoneLeads
       ,ISNULL(t.MonthEndYmdID,0)								AS MonthEndYMDID
       ,ISNULL(t.PlacementTier,0)								AS PlacementTier
       ,ISNULL(t.PrintProductPoints,0)							AS PrintProductPoints	
       ,ISNULL(t.InternetProductPoints,0)						AS InternetProductPoints
       ,ISNULL(t.LegacyLoyaltyPoints,0)							AS LegacyLoyaltyPoints
       ,ISNULL(t.ContractLoyaltyPoints,0)						AS ContractLoyaltyPoints
FROM    #Lead l
LEFT OUTER JOIN #Tier t
        ON l.numYearMonth = t.yearmonth
           AND l.ListingID = t.ListingID
           AND l.CBSACode = t.CBSACode
LEFT OUTER JOIN #LeadsPreviousYear lpy
        ON l.numYearMonth = lpy.numYearMonth + 100
           AND l.ListingID = lpy.ListingID
ORDER BY l.CBSAName
       ,L.propertyName
       ,L.numYearMonth  
        
SET NOCOUNT OFF        


GO
/****** Object:  StoredProcedure [Reports].[rpt_MgtCoDropdown]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Reports].[rpt_MgtCoDropdown]
/*******************************************************************************************
* Name:	reports.rpt_MgtCoDropdown
* ------------------------------------------------------------------------------------------
* Desc:	Get a list of management companies, with All
* ------------------------------------------------------------------------------------------
* Test:	exec reports.rpt_MgtCoDropdown
* ------------------------------------------------------------------------------------------
* Hist:	01	06/29/2016		dwert		Ticket 21200, initial version
********************************************************************************************/
AS 
	SELECT  0 AS MgtCoIDAG
		   ,'<All>' AS MgtCoNameAG
	UNION
	SELECT DISTINCT
			MgtCoIDAG
		   ,MgtCoNameAG
	FROM    Dimension.Listings
	WHERE   MgtCoIDAG IS NOT NULL
	ORDER BY MgtCoNameAG



GO
/****** Object:  StoredProcedure [Reports].[rpt_MgtCoReconciliation]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Reports].[rpt_MgtCoReconciliation]
	
/*************************************************************************************************
*
* Name:	Reports.rpt_MgtCoReconciliation
*
* Desc:	Pull direction from Dimension.Listings of Properties that are active and Rent and AG.
*
* Test:	EXEC Reports.rpt_MgtCoReconciliation
*
*
* Hist:	01	05/22/2015		Shetal Gandhi		Initial Version. Ticket #19521.
* Hist: 02	08/01/2016		Colleen Rocks		Ticket 23452; replace sfdccommunityid with sfpropertyacctid
**************************************************************************************************/
AS

SET NOCOUNT ON

SELECT
 ListingID
 ,StatusIDAG
 ,StatusIDRent
 ,PropertyIDAG
 ,PropertyIDRent
 ,MgtCoIDAG
 ,MgtCoIDRent
 ,MgtCoNameAG
 ,MgtCoNameRent
 ,BillingIDAG
 ,BillingIDRent
 ,SFPropertyAcctID
FROM
 [RentPath].[Dimension].[Listings]
WHERE
 StatusIDAG = 1 OR StatusIDRent = 1  



SET NOCOUNT OFF 



GO
/****** Object:  StoredProcedure [Reports].[rpt_MgtCoSFReconciliation]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Reports].[rpt_MgtCoSFReconciliation]
    
/*************************************************************************************************
*
* Name:	Reports.rpt_MgtCoSFReconciliation
*
* Desc:	This returns content for SalesForce and ListingEditor
*
* Test:	EXEC Reports.rpt_MgtCoSFReconciliation
*
* Hist:	01	03/15/2017		Julie DiPietro		Initial Version. Case # 01415193.
**************************************************************************************************/
AS

SET NOCOUNT ON


SELECT ISNULL(v.ConciergeName, '')                                                                 AS SFConciergeName
       ,ISNULL(v.AccountOwnerName, '')                                                             AS SFAccountOwnerName
       ,v.SalesRepresentative
	   ,v.MarketName
	   ,v.ClientName                                                                               AS SFPropertyName
	   ,v.StreetAddress                                                                            AS SFPropertyAddress
	   ,v.City																					   AS SFPropertyCity
	   ,v.STATE                                                                                    AS SFPropertyState
	   ,'https://rentpath.my.salesforce.com/'+ v.PropAcctID                                        AS SFLink
	   ,v.AGPropertyID
	   ,v.RentPropertyID
	   ,v.Joint_Advertising_Status__c
	   ,v.AGAgentName																			   AS SFMgtCompany 
	   ,ISNULL(v.MgmtAccountID, '')															       AS SFMgmtAccountID
	   ,l.PropertyName                                                                             AS LEPropertyName
	   ,'https://listings.apartmentguide.com/WebAd/ViewPage/'+ CAST(l.PropertyIDAG AS VARCHAR(50)) AS LELink
	   ,v.AGMaxClientID
	   ,l.ListingID
	   ,l.SFPropertyAcctID                                                                         
	   ,l.MgtCoNameAG
	   ,l.MgtCoNameRent
FROM Salesforce.dbo.VW_SalesForceCommunity AS v
LEFT JOIN RentPath.Dimension.Listings AS l
   ON v.PropAcctID = l.SFPropertyAcctID
WHERE  v.Joint_Advertising_Status__c <> 'True Prospect'
	 AND (v.AGAgentName <> l.MgtCoNameAG OR v.AGAgentName <> l.MgtCoNameRent)
	 AND (l.StatusIDAG = 1 OR l.StatusIDRent = 1)




SET NOCOUNT OFF 







GO
/****** Object:  StoredProcedure [Reports].[rpt_MissedAbandonedCallsPerPropByState]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Reports].[rpt_MissedAbandonedCallsPerPropByState] (
        @MgmtCoID CHAR(18)
        ,@State VARCHAR(2)
	   )

/*******************************************************************************************
* Name:	Reports.rpt_MissedAbandonedCallsPerPropByState
* ------------------------------------------------------------------------------------------
* Desc:	Shows missed and abandoned calls by property for the previous month, current quarter
* and current/previous quarter
* ------------------------------------------------------------------------------------------
* Test:	EXEC Reports.rpt_MissedAbandonedCallsPerPropByState '0', 'CO'
*       EXEC Reports.rpt_MissedAbandonedCallsPerPropByState '001E000000DmFqWIAV', 'CO'
*		EXEC Reports.rpt_MissedAbandonedCallsPerPropByState '0', '0'  
*		EXEC Reports.rpt_MissedAbandonedCallsPerPropByState '001E000000DmFqWIAV', '0'
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist:	01	11/28/2016		Colleen Rocks		SFDC Case 01340231; initial version
* Hist: 02  05/12/2017      Julie DiPietro      Case #01457569 - Added management company as parameter
********************************************************************************************/
AS 
BEGIN
	SET NOCOUNT ON;

/*--test:
DECLARE @State VARCHAR(2)
       ,@MgmtCoID CHAR(18) */	

------------------------------	
/*Declare and set variables*/	
------------------------------	
DECLARE @StartYMDID INT
   ,@EndYMDID INT
   ,@CurrentQtr INT

	
SELECT  @StartYMDID = MIN(d2.YMDID)
       ,@EndYMDID = d.LastMonthEndYMDID
       ,@CurrentQtr = d.[Quarter]
FROM    (
         SELECT [Quarter]
               ,[Year]
               ,LastMonthEndYMDID
         FROM   DBAUtility.Dimension.Dates
         WHERE  YMDID = CAST(CONVERT(VARCHAR(8),GETDATE() - 1,112) AS INT)
        ) AS d
INNER JOIN DBAUtility.Dimension.Dates AS d2
        ON d.[Year] = d2.[Year]
           AND d.[Quarter] - 1 = d2.[Quarter]
GROUP BY d.LastMonthEndYMDID
       ,d.[Quarter];	

------------------------------	
/*Drop temp tables*/	
------------------------------	
BEGIN TRY	
    DROP TABLE #Dates	
END TRY	
BEGIN CATCH 	
END CATCH;	
	
BEGIN TRY	
    DROP TABLE #PropList	
END TRY	
BEGIN CATCH 	
END CATCH;	
	
BEGIN TRY	
    DROP TABLE #CallData	
END TRY	
BEGIN CATCH 	
END CATCH;	
	
------------------------------	
/*Get quarter info for each month*/	
------------------------------	
SELECT DISTINCT
        d.YearMonth
       ,d.[Year]
       ,d.[Quarter]
       ,CONCAT(d.MonthName,' ',d.Year) AS MonthYear
INTO    #Dates
FROM    DBAUtility.Dimension.Dates AS d
WHERE   d.YMDID BETWEEN @StartYMDID AND @EndYMDID;	
	
------------------------------	
/*Get list of properties*/	
------------------------------	
SELECT  a.Id AS SFPropAcctID
       ,a.Joint_Advertising_Status__c AS JointAdvertising
       ,pa.Name AS SFDCMgmtCoName
	   ,ISNULL(l.MgtCoNameAG,l.MgtCoNameRent) AS LEMgmtCoName
       ,u.AG_Sales_District__c AS District
       ,u.Name AS SalesRep
       ,a.Name AS SFDCPropertyName
       ,l.PropertyCity
       ,l.PropertyState
       ,l.ListingID
       ,l.PropertyIDAG
	   ,l.PropertyIDRent
	   ,l.MarketCD
	   ,l.MarketName
       ,rnam.Name AS NAMorRAMRep
INTO    #PropList
FROM    SalesForce.dbo.Account AS a
INNER JOIN SalesForce.dbo.Account AS pa
        ON a.ParentId = pa.Id
INNER JOIN SalesForce.dbo.User2 AS u
        ON a.OwnerId = u.Id
INNER JOIN RentPath.Dimension.Listings AS l
        ON a.Id = l.SFPropertyAcctID
LEFT OUTER JOIN SalesForce.dbo.User2 AS rnam
        ON a.NSLP_Strategic_Account_Owner__c = rnam.Id
WHERE (@MgmtCoID = '0' OR pa.id = @MgmtCoID) 
   AND (@State = '0' OR l.PropertyState = @State);	
	
------------------------------	
/*Get call data for each property 	
for each month*/	
------------------------------	
SELECT  pl.SFPropAcctID
       ,pl.ListingID
       ,LEFT(p.YMDID,6) AS YearMonth
       ,SUM(CASE WHEN p.CallStatus = 1 THEN 1
                 ELSE 0
            END) AS ConnectedCalls
       ,SUM(CASE WHEN p.CallStatus IN (2,3) THEN 1
                 ELSE 0
            END) AS MissedCalls
       ,ISNULL(SUM(p.IsAbandoned),0) AS AbandonedCalls
INTO    #CallData
FROM    #PropList AS pl
INNER JOIN RentPath.Mart.PhoneLeads AS p
        ON pl.ListingID = p.ListingID
           AND p.YMDID BETWEEN @StartYMDID AND @EndYMDID
GROUP BY pl.SFPropAcctID
       ,pl.ListingID
       ,LEFT(p.YMDID,6);	
	
------------------------------	
/*Get final results*/	
------------------------------	
SELECT  x.JointAdvertising
       ,x.SFPropAcctID
       ,x.SFDCMgmtCoName
	   ,x.LEMgmtCoName
       ,x.District
       ,x.SalesRep
       ,x.NAMorRAMRep
       ,x.SFDCPropertyName
       ,x.PropertyCity
       ,x.PropertyState
	   ,x.PropertyIDAG
	   ,x.PropertyIDRent
	   ,x.MarketCD
	   ,x.MarketName
       ,SUM(CASE WHEN x.YearMonth = LEFT(@EndYMDID,6) THEN x.ConnectedCalls
                 ELSE 0
            END) AS LastMonthConnected
       ,SUM(CASE WHEN x.YearMonth = LEFT(@EndYMDID,6) THEN x.MissedCalls
                 ELSE 0
            END) AS LastMonthMissed
       ,SUM(CASE WHEN x.YearMonth = LEFT(@EndYMDID,6) THEN x.AbandonedCalls
                 ELSE 0
            END) AS LastMonthAbandoned
       ,SUM(CASE WHEN x.YearMonth = LEFT(@EndYMDID,6) THEN x.MissedAbandoned
                 ELSE 0
            END) AS LastMonthMissedAbandoned
       ,SUM(CASE WHEN x.[Quarter] = @CurrentQtr THEN x.ConnectedCalls
                 ELSE 0
            END) AS CurrQtrConnected
       ,SUM(CASE WHEN x.[Quarter] = @CurrentQtr THEN x.MissedCalls
                 ELSE 0
            END) AS CurrQtrMissed
       ,SUM(CASE WHEN x.[Quarter] = @CurrentQtr THEN x.AbandonedCalls
                 ELSE 0
            END) AS CurrQtrAbandoned
       ,SUM(CASE WHEN x.[Quarter] = @CurrentQtr THEN x.MissedAbandoned
                 ELSE 0
            END) AS CurrQtrMissedAbandoned
       ,SUM(x.ConnectedCalls) AS CurrAndPrevQtrConnected
       ,SUM(x.MissedCalls) AS CurrAndPrevQtrMissed
       ,SUM(x.AbandonedCalls) AS CurrAndPrevQtrAbandoned
       ,SUM(x.MissedAbandoned) AS CurrAndPrevQtrMissedAbandoned
FROM    (
         SELECT pl.SFPropAcctID
               ,pl.JointAdvertising
               ,pl.SFDCMgmtCoName
			   ,pl.LEMgmtCoName
               ,pl.District
               ,pl.SalesRep
               ,pl.NAMorRAMRep
               ,pl.SFDCPropertyName
               ,pl.PropertyCity
               ,pl.PropertyState
			   ,pl.PropertyIDAG
			   ,pl.PropertyIDRent
			   ,pl.MarketCD
	           ,pl.MarketName
               ,d.MonthYear
               ,d.YearMonth
               ,d.[Quarter]
               ,cd.ConnectedCalls
               ,cd.MissedCalls
               ,cd.AbandonedCalls
               ,cd.MissedCalls + cd.AbandonedCalls AS MissedAbandoned
         FROM   #PropList AS pl
         INNER JOIN #CallData AS cd
                ON cd.ListingID = pl.ListingID
         INNER JOIN #Dates AS d
                ON cd.YearMonth = d.YearMonth
        ) AS x
GROUP BY x.JointAdvertising
       ,x.SFPropAcctID
       ,x.SFDCMgmtCoName
	   ,x.LEMgmtCoName
       ,x.District
       ,x.SalesRep
       ,x.NAMorRAMRep
       ,x.SFDCPropertyName
       ,x.PropertyCity
       ,x.PropertyState
	   ,x.PropertyIDAG
	   ,x.PropertyIDRent
	   ,x.MarketCD
	   ,x.MarketName;

	SET NOCOUNT OFF;
END 














GO
/****** Object:  StoredProcedure [Reports].[rpt_MissedAbandonedCallsPerPropByState_B4_20170512]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Reports].[rpt_MissedAbandonedCallsPerPropByState_B4_20170512] (
       @State VARCHAR(2))

/*******************************************************************************************
* Name:	Reports.rpt_MissedAbandonedCallsPerPropByState
* ------------------------------------------------------------------------------------------
* Desc:	Shows missed and abandoned calls by property for the previous month, current quarter
* and current/previous quarter
* ------------------------------------------------------------------------------------------
* Test:	EXEC Reports.rpt_MissedAbandonedCallsPerPropByState 'FL'
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist:	01	11/28/2016		Colleen Rocks		SFDC Case 01340231; initial version
********************************************************************************************/
AS 
BEGIN
	SET NOCOUNT ON;

/*--test:
DECLARE @State VARCHAR(2)*/	

------------------------------	
/*Declare and set variables*/	
------------------------------	
DECLARE @StartYMDID INT
   ,@EndYMDID INT
   ,@CurrentQtr INT;
	
SELECT  @StartYMDID = MIN(d2.YMDID)
       ,@EndYMDID = d.LastMonthEndYMDID
       ,@CurrentQtr = d.[Quarter]
FROM    (
         SELECT [Quarter]
               ,[Year]
               ,LastMonthEndYMDID
         FROM   DBAUtility.Dimension.Dates
         WHERE  YMDID = CAST(CONVERT(VARCHAR(8),GETDATE() - 1,112) AS INT)
        ) AS d
INNER JOIN DBAUtility.Dimension.Dates AS d2
        ON d.[Year] = d2.[Year]
           AND d.[Quarter] - 1 = d2.[Quarter]
GROUP BY d.LastMonthEndYMDID
       ,d.[Quarter];	
	
------------------------------	
/*Drop temp tables*/	
------------------------------	
BEGIN TRY	
    DROP TABLE #Dates	
END TRY	
BEGIN CATCH 	
END CATCH;	
	
BEGIN TRY	
    DROP TABLE #PropList	
END TRY	
BEGIN CATCH 	
END CATCH;	
	
BEGIN TRY	
    DROP TABLE #CallData	
END TRY	
BEGIN CATCH 	
END CATCH;	
	
------------------------------	
/*Get quarter info for each month*/	
------------------------------	
SELECT DISTINCT
        d.YearMonth
       ,d.[Year]
       ,d.[Quarter]
       ,CONCAT(d.MonthName,' ',d.Year) AS MonthYear
INTO    #Dates
FROM    DBAUtility.Dimension.Dates AS d
WHERE   d.YMDID BETWEEN @StartYMDID AND @EndYMDID;	
	
------------------------------	
/*Get list of properties*/	
------------------------------	
SELECT  a.Id AS SFPropAcctID
       ,a.Joint_Advertising_Status__c AS JointAdvertising
       ,pa.Name AS SFDCMgmtCoName
       ,u.AG_Sales_District__c AS District
       ,u.Name AS SalesRep
       ,a.Name AS PropertyName
       ,l.PropertyCity
       ,l.PropertyState
       ,l.ListingID
       ,l.PropertyIDAG
       ,rnam.Name AS NAMorRAMRep
INTO    #PropList
FROM    SalesForce.dbo.Account AS a
INNER JOIN SalesForce.dbo.Account AS pa
        ON a.ParentId = pa.Id
INNER JOIN SalesForce.dbo.User2 AS u
        ON a.OwnerId = u.Id
INNER JOIN RentPath.Dimension.Listings AS l
        ON a.Id = l.SFPropertyAcctID
LEFT OUTER JOIN SalesForce.dbo.User2 AS rnam
        ON a.NSLP_Strategic_Account_Owner__c = rnam.Id
WHERE   l.PropertyState = @State;	
	
------------------------------	
/*Get call data for each property 	
for each month*/	
------------------------------	
SELECT  pl.SFPropAcctID
       ,pl.ListingID
       ,LEFT(p.YMDID,6) AS YearMonth
       ,SUM(CASE WHEN p.CallStatus = 1 THEN 1
                 ELSE 0
            END) AS ConnectedCalls
       ,SUM(CASE WHEN p.CallStatus IN (2,3) THEN 1
                 ELSE 0
            END) AS MissedCalls
       ,ISNULL(SUM(p.IsAbandoned),0) AS AbandonedCalls
INTO    #CallData
FROM    #PropList AS pl
INNER JOIN RentPath.Mart.PhoneLeads AS p
        ON pl.ListingID = p.ListingID
           AND p.YMDID BETWEEN @StartYMDID AND @EndYMDID
GROUP BY pl.SFPropAcctID
       ,pl.ListingID
       ,LEFT(p.YMDID,6);	
	
------------------------------	
/*Get final results*/	
------------------------------	
SELECT  x.JointAdvertising
       ,x.SFDCMgmtCoName
       ,x.District
       ,x.SalesRep
       ,x.NAMorRAMRep
       ,x.PropertyName
       ,x.PropertyCity
       ,x.PropertyState
       ,SUM(CASE WHEN x.YearMonth = LEFT(@EndYMDID,6) THEN x.ConnectedCalls
                 ELSE 0
            END) AS LastMonthConnected
       ,SUM(CASE WHEN x.YearMonth = LEFT(@EndYMDID,6) THEN x.MissedCalls
                 ELSE 0
            END) AS LastMonthMissed
       ,SUM(CASE WHEN x.YearMonth = LEFT(@EndYMDID,6) THEN x.AbandonedCalls
                 ELSE 0
            END) AS LastMonthAbandoned
       ,SUM(CASE WHEN x.YearMonth = LEFT(@EndYMDID,6) THEN x.MissedAbandoned
                 ELSE 0
            END) AS LastMonthMissedAbandoned
       ,SUM(CASE WHEN x.[Quarter] = @CurrentQtr THEN x.ConnectedCalls
                 ELSE 0
            END) AS CurrQtrConnected
       ,SUM(CASE WHEN x.[Quarter] = @CurrentQtr THEN x.MissedCalls
                 ELSE 0
            END) AS CurrQtrMissed
       ,SUM(CASE WHEN x.[Quarter] = @CurrentQtr THEN x.AbandonedCalls
                 ELSE 0
            END) AS CurrQtrAbandoned
       ,SUM(CASE WHEN x.[Quarter] = @CurrentQtr THEN x.MissedAbandoned
                 ELSE 0
            END) AS CurrQtrMissedAbandoned
       ,SUM(x.ConnectedCalls) AS CurrAndPrevQtrConnected
       ,SUM(x.MissedCalls) AS CurrAndPrevQtrMissed
       ,SUM(x.AbandonedCalls) AS CurrAndPrevQtrAbandoned
       ,SUM(x.MissedAbandoned) AS CurrAndPrevQtrMissedAbandoned
FROM    (
         SELECT pl.SFPropAcctID
               ,pl.JointAdvertising
               ,pl.SFDCMgmtCoName
               ,pl.District
               ,pl.SalesRep
               ,pl.NAMorRAMRep
               ,pl.PropertyName
               ,pl.PropertyCity
               ,pl.PropertyState
               ,d.MonthYear
               ,d.YearMonth
               ,d.[Quarter]
               ,cd.ConnectedCalls
               ,cd.MissedCalls
               ,cd.AbandonedCalls
               ,cd.MissedCalls + cd.AbandonedCalls AS MissedAbandoned
         FROM   #PropList AS pl
         INNER JOIN #CallData AS cd
                ON cd.ListingID = pl.ListingID
         INNER JOIN #Dates AS d
                ON cd.YearMonth = d.YearMonth
        ) AS x
GROUP BY x.JointAdvertising
       ,x.SFDCMgmtCoName
       ,x.District
       ,x.SalesRep
       ,x.NAMorRAMRep
       ,x.PropertyName
       ,x.PropertyCity
       ,x.PropertyState;

	SET NOCOUNT OFF;
END 






GO
/****** Object:  StoredProcedure [Reports].[rpt_MITSByManagementCompanyAndMarket]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Reports].[rpt_MITSByManagementCompanyAndMarket] (
    @MgtCoID VARCHAR(8000)
   ,@MarketCD VARCHAR(8)
   ,@IsActive INT)
AS /******************************************************************************************
* Name: Reports.rpt_MITSByManagementCompanyAndMarket
* ----------------------------------------------------------------------------------------
* Desc: Used ApartmentGuide.Reports.rpt_MITSByManagementCompanyAndMarket_wRent as a base
* ----------------------------------------------------------------------------------------
* Test:  EXEC Reports.rpt_MITSByManagementCompanyAndMarket '6498,8158,6166,7162', 'P10056', 1
*        EXEC Reports.rpt_MITSByManagementCompanyAndMarket '6008', 'ALL', 2
* ----------------------------------------------------------------------------------------
* Hist:
* 01	04/03/2014		Mary Pollard		Initial version created from rpt_MITSByManagementCompanyAndMarket
* 02	05/01/2014		Mary Pollard		Added split for multi-select mgtcoid param
* 03	07/10/2014		Mary Pollard		Added IsNULL(lm.MarketCD,'') because NULL marketCDs were
*											dropping off the report from the CASE NULL = NULL
* 04	12/27/2016		Colleen Rocks		Case 01349556; added availabilityURL and rewrote to use RentPath.Dimension.Listings
******************************************************************************************/
SET NOCOUNT ON;

/*--test:
DECLARE @MgtCoID VARCHAR(8000) = '6020' 
	,@MarketCD VARCHAR(8) = 'ALL'
	,@IsActive INT = 0*/
			
		
--------------------------------
/*Split out MgtCoID parameter*/
--------------------------------
SELECT  DISTINCT
        CONVERT(VARCHAR,Measure) MgtCoID
INTO    #MgmtCompanies
FROM    DBAUtility.dbo.fn_Split(@MgtCoID,',');


--------------------------------
/*Get final resultset*/
--------------------------------
SELECT  l.MgtCoNameAG AS MgtCoName
       ,l.MgtCoIDAG AS MgtCoID
       ,l.PropertyIDAG
       ,l.PropertyIDRent
       ,l.PropertyName
       ,l.PropertyAddress
       ,l.PropertyCity
       ,l.PropertyState
       ,l.PropertyZipCode
       ,l.ListingID
       ,l.MarketCD
       ,l.MarketName
       ,l.ExternalID
       ,l.ListingPricingSource
       ,l.ListingDetailsSource
       ,l.HasAvailabilityURL
       ,l.AvailabilityURL
       ,l.StatusIDAG
       ,l.StatusIDRent
FROM    RentPath.Dimension.Listings AS l
LEFT JOIN #MgmtCompanies AS mgtComp
        ON CONVERT(VARCHAR,l.MgtCoIDAG) = mgtComp.MgtCoID
WHERE   (CASE WHEN l.StatusIDAG = 1 OR l.StatusIDRent = 1 THEN 1
			WHEN l.StatusIDAG = 0 AND l.StatusIDRent = 0 THEN 0
			END = @IsActive OR @IsActive = 2)
        AND (@MgtCoID = '0'
             OR mgtComp.MgtCoID IS NOT NULL)
        AND (@MarketCD = 'All'
             OR l.MarketCD = @MarketCD)
ORDER BY l.MarketName
	   ,l.MgtCoNameAG
       ,l.PropertyName;


SET NOCOUNT OFF;





GO
/****** Object:  StoredProcedure [Reports].[rpt_MonthlyMarketClientCPL]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Reports].[rpt_MonthlyMarketClientCPL] (
    @MonthStartDate DATETIME)
/****************************************************************************************************
*
* Name:	Reports.rpt_MonthlyMarketClientCPL
*
* Desc:	This provides each client's leads and cost by month as well as the Market CPL for that client
*		where applicable
*
* Test:	EXEC Reports.rpt_MonthlyMarketClientCPL '06/01/2016'
*
* Note:
* Hist:	01	10/19/2012		Sarah Mims			Initial Version
*       02  02/19/2015      Richard C           Chris Shepherd in ticket 18090 request to add Rent.com Lead into procedure
*		03	12/09/2015		Colleen Rocks		Ticket 21435; rewrote cost info to use Revenue database and lead info to use RentPath
*		04	07/22/2016		Colleen Rocks		Ticket 23635; replaced references to SalesForceCommunityID with SalesForceAccountID
* Hist: 05	11/03/2016		Bob Langley			Ticket 24212 - Changed to add MissedCalls to leads (where does connectedcalls)
*****************************************************************************************************/
AS
SET NOCOUNT ON;

/*--Test:
DECLARE @MonthStartDate DATETIME
SET @MonthStartDate = '01/01/2015'		
*/													

-----------------------------------
/*Declare and set variables*/
-----------------------------------
DECLARE @LeadYearMonth INT;
SET @LeadYearMonth = LEFT(CAST(CONVERT(VARCHAR(8),@MonthStartDate,112) AS INT),6);

-----------------------------------
/*Drop temp tables*/
-----------------------------------
BEGIN TRY
    DROP TABLE #ClientData
END TRY
BEGIN CATCH
END CATCH;

BEGIN TRY
    DROP TABLE #Leads
END TRY
BEGIN CATCH
END CATCH;

-----------------------------------
/*Get client revenue info*/
-----------------------------------
SELECT  I.ClientID
       ,I.ClientProperty
       ,l.ListingID
       ,l.PropertyName
       ,ISNULL(l.MarketCD,0) AS MarketCD
       ,ISNULL(l.MarketName,CASE WHEN I.ClientProperty = 1 THEN 'Z - No Client Match'
                                 ELSE 'Z - No Market'
                            END) AS MarketName
       ,I.LeadYearMonth
       ,SUM(I.InvoiceTotal) AS Revenue
INTO    #ClientData
FROM    (
		SELECT s.SalesforceAccountID
               ,c.MAXClientBusinessKey AS ClientID
               ,c.IsProperty AS ClientProperty
               ,I.InvoiceKey
               ,I.InvoiceTypeID
               ,LEFT(CAST(CONVERT(VARCHAR(8),DATEADD(m,1,CONVERT(VARCHAR(8),r.DateKey,121)),112) AS INT),6) AS LeadYearMonth
               ,r.Revenue AS InvoiceTotal
         FROM   Revenue.Conformed.Client AS c
         JOIN   Revenue.Fact.Revenue AS r
                ON c.ClientKey = r.ClientKey
         JOIN   Revenue.Conformed.Invoice AS I
                ON r.InvoiceKey = I.InvoiceKey
         JOIN   SalesForce.dimension.SALESFORCE_XREF AS s
				ON c.CubeClientBusinessKey = s.SalesforceAccountID
         WHERE  I.InvoiceTypeID = 'Invoice'
                AND r.Revenue <> 0
                AND LEFT(CAST(CONVERT(VARCHAR(8),DATEADD(m,1,CONVERT(VARCHAR(8),r.DateKey,121)),112) AS INT),6) = @LeadYearMonth
        ) I
LEFT JOIN RentPath.Dimension.Listings AS l
	   ON I.SalesforceAccountID = l.SFPropertyAcctID
GROUP BY I.ClientID
       ,I.ClientProperty
       ,l.ListingID
       ,l.PropertyName
       ,ISNULL(l.MarketCD,0)
       ,ISNULL(l.MarketName,CASE WHEN I.ClientProperty = 1 THEN 'Z - No Client Match'
                                 ELSE 'Z - No Market'
                            END)
       ,I.LeadYearMonth;

-----------------------------------
/*Get lead info*/
-----------------------------------
SELECT  c.MarketCD
       ,c.MarketName
       ,c.ClientID
       ,ISNULL(l.ListingID,0) AS ListingID
       ,ISNULL(l.PropertyIDAG,0) AS PropertyIDAG
       ,ISNULL(l.PropertyIDRent,0) AS PropertyIDRent
       ,ISNULL(c.PropertyName,'') AS PropertyName
       ,c.LeadYearMonth AS YearMonth
       ,ISNULL(l.LowPrice,0) AS LowPrice
       ,ISNULL(l.AGLeads,0) AS AGLeads
       ,ISNULL(l.RentLeads,0) AS RentLeads
       ,ISNULL(l.TotalLeads,0) AS TotalLeads
       ,c.Revenue AS ClientCost
INTO    #Leads
FROM    #ClientData AS c
LEFT OUTER JOIN (
                 SELECT ml.ListingID
                       ,MAX(ml.PropertyIDAG) AS PropertyIDAG
                       ,MAX(ml.PropertyIDRent) AS PropertyIDRent
                       ,MAX(ml.LowPrice) AS LowPrice
                       ,SUM(ml.PhoneLeadsAG + ml.EmailLeadsAG + MissedCallsAG) AS AGLeads		--Ticket 24212 Added missed calls to PhoneLeads (it doesn't already have them included)
                       ,SUM(ml.PhoneLeadsRent + MissedCallsRent + ml.EmailLeadsRent) AS RentLeads		--Ticket 24212 Added missed calls to PhoneLeads (it doesn't already have them included)
                       ,SUM(ml.AllLeads) AS TotalLeads
                 FROM   RentPath.Mart.Listings AS ml
                 JOIN   #ClientData AS c
                        ON c.ListingID = ml.ListingID
                 WHERE  ml.YearMonth = c.LeadYearMonth
                 GROUP BY ml.ListingID
                ) AS l
        ON l.ListingID = c.ListingID;

-----------------------------------
/*Get result set*/
-----------------------------------
SELECT  d.YearMonth
       ,d.MarketName
       ,d.MarketCD
       ,mc.MarketCPLMedian
       ,d.ClientID
       ,d.PropertyIDAG
       ,d.PropertyIDRent
       ,d.PropertyName
	   ,d.LowPrice
       ,d.AGLeads
       ,d.RentLeads
       ,d.TotalLeads
       ,d.ClientCost
       ,CASE WHEN d.TotalLeads > 0 THEN d.ClientCost / d.TotalLeads
             ELSE 0
        END AS CostPerLead
       ,CASE WHEN d.TotalLeads > 0 THEN d.ClientCost / d.TotalLeads
             ELSE 0
        END - mc.MarketCPLMedian AS CPLDifference
FROM    #Leads AS d
LEFT OUTER JOIN (
                 SELECT m.MarketCD
                       ,AVG(m.CostPerLead) AS MarketCPLMedian
                 FROM   (
                         SELECT c.MarketName
                               ,c.ClientID
                               ,c.MarketCD
                               ,CASE WHEN d.TotalLeads > 0 THEN c.Revenue / d.TotalLeads
                                     ELSE 0
                                END AS CostPerLead
                               ,ROW_NUMBER() OVER (PARTITION BY c.MarketName ORDER BY CASE WHEN d.TotalLeads > 0 THEN c.Revenue / d.TotalLeads
                                                                                           ELSE 0
                                                                                      END ASC) AS RowNumber
                               ,ROW_NUMBER() OVER (PARTITION BY c.MarketName ORDER BY CASE WHEN d.TotalLeads > 0 THEN c.Revenue / d.TotalLeads
                                                                                           ELSE 0
                                                                                      END DESC) AS RowNumberDesc
                         FROM   #ClientData AS c
                         LEFT OUTER JOIN #Leads AS d
                                ON c.ListingID = d.ListingID
                        ) AS m
                 WHERE  m.RowNumber IN (m.RowNumberDesc,m.RowNumberDesc + 1,m.RowNumberDesc - 1)
                 GROUP BY m.MarketCD
                ) AS mc
        ON d.MarketCD = mc.MarketCD
ORDER BY MarketName
       ,PropertyName;


/*Original sproc up until 12/09/2015
--DECLARE @MonthStartDate DATETIME
--SET @MonthStartDate ='01/01/2015'																
DECLARE	@IssueBeginYMDID INT
SET @IssueBeginYMDID = CAST(CONVERT(VARCHAR(8),@MonthStartDate,112) AS INT)

PRINT  @MonthStartDate 																									
PRINT  @IssueBeginYMDID 
---------------------------------------------------------------------------------------
--Create CTEs for Client Cost and Lead Data
---------------------------------------------------------------------------------------
;WITH ClientData
AS
(
SELECT i.ClientID
,i.ClientProperty
,i.InvoiceLeadFlag														
,val.propertyid																													
,val.propertyname																
,ISNULL(lm.MaxSecondaryMarketCD,0)											AS MarketCD																
,ISNULL(lm.MaxSecondaryMarketName,CASE WHEN i.ClientProperty = 1
										THEN 'Z - No Client Match'
										ELSE 'Z - No Market'
										END)								AS MarketName
,i.IssueBeginYMDID
,i.IssueEndYMDID										
,SUM(i.InvoiceTotal) AS Revenue											
FROM 
		(
		SELECT		mai.clientid				  																	
				   ,c.isproperty		AS ClientProperty																	
				   ,mai.invoicetypeid																	
				   ,mai.INVOICETOTAL																	
				   ,CASE WHEN mai.invoicetypeid <> 'Invoice'																	
							  OR mai.InvoiceTotal = 0 THEN 0														
						 ELSE mai.issuebeginymdid															
					END																		AS IssueBeginYMDID																
				   ,CASE WHEN mai.invoicetypeid <> 'Invoice'																	
							  OR mai.InvoiceTotal = 0 THEN 0														
						 ELSE mai.issueendymdid															
					END																		AS IssueEndYMDID																
				   ,CASE WHEN mai.invoicetypeid <> 'Invoice'																	
							  OR mai.InvoiceTotal = 0 THEN 0														
						 ELSE 1															
					END																		AS InvoiceLeadFlag																																		
		FROM	MAX.MART.MaxInvoice mai																	
		JOIN 	Max.Mart.MaxClient c																	
				ON mai.clientid = c.clientid
																			
		WHERE	mai.IssueBeginYMDID = @IssueBeginYMDID																
				AND mai.divisionid = 'P'
		) I	
LEFT OUTER JOIN ApartmentGuide.Dimension.ListingMarket AS lm
		ON i.clientid = lm.ClientCode
LEFT OUTER JOIN ApartmentGuide.dbo.vw_AllListings AS val
		ON lm.ListingID = val.ListingID
WHERE i.InvoiceLeadFlag = 1	
GROUP BY i.ClientID		
,i.ClientProperty
,i.InvoiceLeadFlag													
,val.PropertyID											
,val.PropertyName											
,ISNULL(lm.MaxSecondaryMarketCD,0)										
,ISNULL(lm.MaxSecondaryMarketName,CASE WHEN i.ClientProperty = 1
										THEN 'Z - No Client Match'
										ELSE 'Z - No Market'
										END)
,i.IssueBeginYMDID
,i.IssueEndYMDID
)


,DetailData
AS
(
SELECT c.MarketCD
,c.MarketName
,c.ClientID
,ISNULL(c.PropertyID,0)		                        AS PropertyID
,ISNULL(c.PropertyName,'')	                        AS PropertyName
,LEFT(c.IssueBeginYMDID,6)	                        AS YearMonth
,ISNULL(l.MobileLeads,0)	                        AS MobileLeads
,ISNULL(l.WebLeads,0)		                        AS WebLeads
,ISNULL(l.PrintLeads,0)		                        AS PrintLeads
,ISNULL(r.RentLeads,0)                              AS RentLeads
,ISNULL(l.TotalLeads,0)+ISNULL(r.RentLeads,0)		AS TotalLeads
,c.Revenue					                        AS ClientCost
FROM ClientData AS c
LEFT OUTER JOIN																						
		(
		SELECT	ml.PropertyID
		,SUM(ml.MobileAllLeads)								AS MobileLeads
		,SUM(ml.AllInternetLeads_NoMobile)					AS WebLeads
		,SUM(ml.AllLeads) - SUM(ml.AllDigitalLeads)			AS PrintLeads
		,SUM(ml.AllLeads)									AS TotalLeads																																		
		FROM	ApartmentGuide.Mart.Listings AS ml
		JOIN	ClientData AS c
			ON c.PropertyID = ml.PropertyID
		WHERE ml.YMDID BETWEEN c.IssueBeginYMDID AND c.IssueEndYMDID 																						
		GROUP BY ml.PropertyID													
														
														
		UNION ALL													
																			
		SELECT	dal.PropertyID																							
		   ,SUM(mal.MobileAllLeads)							AS MobileLeads												
		   ,SUM(mal.AllInternetLeads_NoMobile)				AS WebLeads												
		   ,SUM(mal.AllLeads) - SUM(mal.AllDigitalLeads)	AS PrintLeads											
		   ,SUM(mal.AllLeads)								AS TotalLeads												
		FROM	Rentals.Mart.ApartmentListings AS mal 											
		JOIN 	Rentals.Dimension.ApartmentListings AS dal																						
				ON mal.ListingNumber = dal.ListingID
		JOIN	ClientData AS c	
				ON c.PropertyID = dal.PropertyID		
		WHERE mal.YMDID BETWEEN c.IssueBeginYMDID AND c.IssueEndYMDID																							
		GROUP BY mal.YearMonth													
		   ,dal.PropertyID
		) AS l   												
ON l.PropertyID = c.PropertyID
LEFT OUTER JOIN 
				 (SELECT x.agpropertyid,RentLeads=SUM(rml.allleads)
				    FROM rentcom.mart.listings rml
					JOIN salesforce.dimension.salesforce_xref x ON rml.rentpropertyid=x.rentpropertyid
					WHERE rml.yearmonth=LEFT(@issuebeginymdid,6)
					GROUP BY x.agpropertyid
					) r
				 ON c.propertyid=r.AGPROPERTYID
)

------------------------------------------------------------------------------------------------------
--Select out result set
------------------------------------------------------------------------------------------------------

SELECT d.YearMonth
,d.MarketName
,d.MarketCD
,mc.MarketCPLMedian
,d.ClientID
,d.PropertyID
,d.PropertyName
,d.MobileLeads
,d.WebLeads
,d.PrintLeads
,d.RentLeads
,d.TotalLeads
,d.ClientCost
FROM DetailData AS d
LEFT OUTER JOIN 
				(
				SELECT m.MarketCD
				,AVG(m.CostPerLead) AS MarketCPLMedian

				FROM
							(
							SELECT c.MarketName
							,c.ClientID
							,c.MarketCD
							,CASE WHEN d.TotalLeads > 0
									THEN c.Revenue/d.TotalLeads
									ELSE 0
									END																				AS CostPerLead
							,ROW_NUMBER() OVER (PARTITION BY c.MarketName ORDER BY CASE WHEN d.TotalLeads > 0
																					THEN c.Revenue/d.TotalLeads
																					ELSE 0
																					END ASC)						AS RowNumber
							,ROW_NUMBER() OVER (PARTITION BY c.MarketName ORDER BY CASE WHEN d.TotalLeads > 0
																					THEN c.Revenue/d.TotalLeads
																					ELSE 0
																					END DESC)						AS RowNumberDesc														
							FROM ClientData AS c
							LEFT OUTER JOIN DetailData AS d
								ON c.PropertyID = d.PropertyID
							) AS m
				WHERE m.RowNumber IN (m.RowNumberDesc,m.RowNumberDesc +1, m.RowNumberDesc-1)
				GROUP BY m.MarketCD
				) AS mc
ON d.MarketCD = mc.MarketCD
ORDER BY MarketName
,PropertyName*/

SET NOCOUNT OFF;		

																				   															







GO
/****** Object:  StoredProcedure [Reports].[rpt_MonthlyMgtPerformanceDetail]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Reports].[rpt_MonthlyMgtPerformanceDetail] 
       (
	   @mgtcoid VARCHAR(15)
       ,@CBSACode VARCHAR(MAX)
       ,@StartYMDDate AS DATETIME = NULL
       ,@EndYMDDate AS DATETIME = NULL
	   )
AS 
/**************************************************************************************************************************************************************************************************
* Name:    Reports.rpt_MonthlyMgtPerformanceDetail
* -------------------------------------------------------------------------------------------
* Desc:    Used to pull Monthly Management Company Performance data
* -------------------------------------------------------------------------------------------
* Test:  EXEC Reports.rpt_MonthlyMgtPerformanceDetail 10076,'16740,26420,28660,41700,43340,46140','12/01/2012','12/31/2013'
*		 EXEC Reports.rpt_MonthlyMgtPerformanceDetail 6020,'12060,12100','01/01/2013','01/15/2013'
*		 EXEC Reports.rpt_MonthlyMgtPerformanceDetail_24212_TEST 19042,'28700','09/01/2015','09/30/2016'
@mgtcoid=19042, @CBSACode=28700, @StartYMDDate=Sep  1 2015 12:00:00:000AM, @EndYMDDate=Sep 30 2016 12:00:00:000AM

* -------------------------------------------------------------------------------------------
* Note: defaults to last years for previous month
* -------------------------------------------------------------------------------------------
* Hist: 01  05/03/2012  Don Wert            Initial version, Ticket 9005 - started with Reports.rpt_MonthlyMgtPerformanceDetail, added new leads columns, broke out mobile, added cost per lead
* Hist: 02  06/11/2012  Richard Chen        Ticket 9562.  Report is no showing.  Problem due to inner join with cost per lead temp table.
*                                           Change query to Left outer join
* Hist: 03  09/10/2012  Chadwick Smith      #10153 Modified [AvgCostPerLead] to exclude values from the current month in the calculation, renamed [AvgCostPerLead_Minus_CurrentMonth]
* Hist: 04  11/14/2012  Sarah Mims          Per ticket #10859 added ClicksListingMap to the MapClicks column
* Hist: 05  02/19/2013  Mary Pollard        Per ticket #10859 added ClicksListingMap to the MapClicks column
* Hist: 06	01/24/2014	Sarah Mims			Ticket # 14435 - modified to include Rent
* Hist: 07	02/11/2014	Sarah Mims			Ticket # 14435 - added Invoiced Leases
* Hist: 08	02/28/2014	Sarah Mims			Ticket # 14435 - replaced the empty string in Tier with a dash
* Hist: 09	04/23/2014	Sarah Mims			Ticket # 15223 - added HD Video Clicks, HD Pano Tour Clicks and ImprSearchResults. The HD Click definitions
*											were taken from the Market Perf report (reference ticket # 14757 for more information)
* Hist: 10 04/23/2014	Sarah Mims			Ticket # 13819 - added Mgmt Page Clicks (ClicksMgtCoWebLink and ClicksMgmtCoPeelAd)
* Hist: 11 12/15/2014   Colleen Rocks		No ticket - No longer using website parameter; combine AG & Rent leads to be RentPath leads
* Hist: 12 04/15/2016   Clinton Woody		Ticket 22564 - No longer have leases so removed them from the report and this sp
* Hist: 13 10/18/2016	Bob Langley			Ticket 24212 - Changed to add MissedCalls to leads (where does connectedcalls)
***************************************************************************************************************************************************************************************************/

BEGIN
  ------------------------------------------------------------------------
  -- Declare & Set Variables
  ------------------------------------------------------------------------
  SET NOCOUNT ON;
  DECLARE @StartYMDID AS INT
         ,@EndYMDID AS INT    
  SET @StartYMDDate = ISNULL(@StartYMDDate,DATEADD(MONTH,-12,GETDATE()));
  SET @EndYMDDate = ISNULL(@EndYMDDate,DATEADD(MONTH,-0,GETDATE()));

  SET @StartYMDID = CAST(CONVERT(VARCHAR(8),@StartYMDDate,112) AS INT)
  SET @EndYMDID = CAST(CONVERT(VARCHAR(8),@EndYMDDate,112) AS INT);





------------------------------------------------------------------------
--Find all the ListingIDs that were active at any point during that time
--frame that were associated with management company based on the
--Website parameter selected 
------------------------------------------------------------------------
IF OBJECT_ID('tempdb..#Listings') IS NOT NULL
	BEGIN
		DROP TABLE #Listings
	END		  


SELECT  dl.ListingID
       ,ISNULL(MAX(CASE WHEN dl.Website = 'AG' THEN 1
                        ELSE 0
                   END),0) AS AGFlag
       ,ISNULL(MAX(CASE WHEN dl.Website = 'Rent' THEN 1
                        ELSE 0
                   END),0) AS RentFlag
       ,zc.CBSACode
       ,zc.CBSAName
INTO    #Listings
FROM    ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
JOIN    ApartmentGuide.Mart.AGRentCombinedMartListings AS ml
        ON dl.ListingID = ml.ListingID
           AND dl.Website = ml.Website
LEFT OUTER JOIN DBAUtility.dbo.ZipCBSA AS zc
        ON dl.ZipCode = zc.ZIPCode
WHERE   dl.mgtcoid = @MgtCoID
        AND ml.YMDID BETWEEN @StartYMDID AND @EndYMDID
        AND CHARINDEX(ISNULL(zc.CBSACode,'00000'),@CBSACode) > 0
GROUP BY dl.ListingID
       ,zc.CBSACode
       ,zc.CBSAName
HAVING  MAX(ml.ListingStatusID) = 1        

-----------------------------------------------------------------------------------------------
--Select out result set
-----------------------------------------------------------------------------------------------

SELECT lm.CBSAName
		,lm.ListingID
		,lm.PropertyName
		,CASE WHEN SUM(lm.AGFlag) > 0 AND SUM(lm.RentFlag) > 0
					THEN CASE WHEN SUM(lm.AGListingStatusID) - SUM(lm.RentListingStatusID) = 0 THEN SUM(lm.AGListingStatusID)
							  WHEN SUM(lm.AGListingStatusID) - SUM(lm.RentListingStatusID) < 0 THEN SUM(lm.RentListingStatusID)
							  WHEN SUM(lm.AGListingStatusID) - SUM(lm.RentListingStatusID) > 0 THEN SUM(lm.AGListingStatusID)
						  END
			  WHEN SUM(lm.AGFlag) > 0 AND SUM(lm.RentFlag) = 0 THEN SUM(lm.AGListingStatusID)
			  WHEN SUM(lm.AGFlag) = 0 AND SUM(lm.RentFlag) > 0 THEN SUM(lm.RentListingStatusID)
		END																																		AS NumMonthsforAvg			                          
		,SUM(lm.AGFlag)																															AS AGFlag
		,SUM(lm.AGListingStatusID)																												AS AGMonthsActive
		,SUM(lm.RentFlag)																														AS RentFlag
		,SUM(lm.RentListingStatusID)																											AS RentMonthsActive		
		,CASE WHEN MAX(lm.RentListingStatusID) + MAX(lm.AGListingStatusID) >= 1 AND MAX(lm.AGFlag) + MAX(lm.RentFlag) >= 1 THEN 1 ELSE 0 END	AS UseForAverageFlag
		,SUM(lm.AllLeads) - SUM(lm.ThirdPartyFeedLeads)																							AS ReportAllLeads
		,SUM(lm.InternetPhoneLeads_NoMobile)																									AS InternetPhoneLeads_NoMobile
		,SUM(lm.AllInternetLeads_NoMobile)	- SUM(lm.ThirdPartyFeedLeads)																		AS ReportAllInternetLeads
		,SUM(lm.InternetEmailLeads_NoMobile) - SUM(lm.ThirdPartyFeedLeads)																		AS ReportInternetEmailLeads
		,SUM(lm.ThirdPartyFeedLeads)																											AS ThirdPartyFeedLeads
		,SUM(lm.MobileEmailLeads)																												AS MobileEmailLeads
		,SUM(lm.PrintCalls)																														AS PrintCalls
		,SUM(lm.MobileCalls)																													AS MobileCalls
		,SUM(lm.TotalMissedCalls)																												AS TotalMissedCalls
		,SUM(lm.MapClicks)																														AS MapClicks
		,SUM(lm.ClicksListingWebLink)																											AS WebsiteClicks
		,SUM(lm.UniqueVisits)																													AS UniqueVisits
		,SUM(lm.ImprSearchResults)																												AS ImprSearchResults
		,SUM(lm.MgmtPageClicks)																													AS MgmtPageClicks
		,SUM(lm.HDVideoClicks)																													AS HDVideoClicks
		,SUM(lm.HDPanoTourClicks)																												AS HDPanoTourClicks
		,CAST(MAX(lm.PlacementTier) AS VARCHAR(2))																								AS PlacementTier
		,MAX(lm.PrintProductPoints) + MAX(lm.InternetProductPoints) 
		+MAX(lm.LegacyLoyaltyPoints) + MAX(lm.ContractLoyaltyPoints)																			AS TotalPoints
--		,SUM(lm.InvoicedLeases)																													AS InvoicedLeases
  
                
             FROM    
					(
                     SELECT ml.yearMonth                   
                           ,dl.PropertyName
                           ,ml.ListingID
						   ,zc.CBSAName
						   ,MAX(l.AGFlag)																	AS AGFlag
						   ,MAX(CASE WHEN l.AGFlag = 1 AND ml.Website = 'AG' 
									AND ml.ListingStatusID = 1 THEN 1 ELSE 0 END)							AS AGListingStatusID
						   ,MAX(l.RentFlag)																	AS RentFlag
						   ,MAX(CASE WHEN l.RentFlag = 1 AND ml.Website = 'Rent' 
									AND ml.ListingStatusID = 1 THEN 1 ELSE 0 END)							AS RentListingStatusID	
                           ,SUM(ml.AllLeads)																AS AllLeads
                           ,SUM(ml.InternetPhoneLeads_NoMobile)												AS InternetPhoneLeads_NoMobile
						   ,SUM(ml.InternetEmailLeads_NoMobile)												AS InternetEmailLeads_NoMobile
						   ,SUM(ml.AllInternetLeads_NoMobile)												AS AllInternetLeads_NoMobile
                           ,SUM(ml.ThirdPartyFeedLeads)														AS ThirdPartyFeedLeads
                           ,SUM(ml.MobileEmails)															AS MobileEmailLeads
                           ,SUM(ml.AGCPrintConnectedCalls) + SUM(ml.ASGPrintConnectedCalls)	+ SUM(ml.AGCPrintMissedCalls) + SUM(ml.ASGPrintMissedCalls)	AS PrintCalls	--Ticket 24212 added Missed Calls
                           ,SUM(ml.MobileCalls)																AS MobileCalls
                           ,SUM(ml.AllMissedCalls)															AS TotalMissedCalls
                           ,SUM(ml.ClicksMapDirections) + SUM(ml.ClicksListingMap)							AS MapClicks
                           ,SUM(ml.ClicksListingWebLink)													AS ClicksListingWebLink
                           ,SUM(ml.UniqueVisits)															AS UniqueVisits
						   ,SUM(ml.ImprSearchResults)														AS ImprSearchResults
						   ,SUM(ml.ClicksMgtCoWebLink)	+ SUM(ml.ClicksMgmtCoPeelAd)						AS MgmtPageClicks
						   ,SUM(ml.ClicksCommunityVideo) + SUM(ml.ClicksHDVideos) + SUM(ml.ViewsEmercial)	AS HDVideoClicks
						   ,SUM(ml.ClicksPanoramicTours) + SUM(ml.ViewsVirtualBrochure)						AS HDPanoTourClicks						   
                           ,CASE MAX(dl.PlacementTier)
                                              WHEN 05 THEN 'D'
                                              WHEN 10 THEN 'P'
                                              WHEN 20 THEN 'G'
                                              WHEN 30 THEN 'S'
                                              ELSE '-'
                                            END												AS PlacementTier					
                           ,MAX(dl.PrintProductPoints)										AS PrintProductPoints
                           ,MAX(dl.InternetProductPoints)									AS InternetProductPoints
                           ,MAX(dl.LegacyLoyaltyPoints)										AS LegacyLoyaltyPoints
                           ,MAX(dl.ContractLoyaltyPoints)									AS ContractLoyaltyPoints
--						   ,SUM(ml.InvoicedLeases)											AS InvoicedLeases
                     FROM   ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
                     JOIN   ApartmentGuide.Mart.AGRentCombinedMartListings AS ml
								ON dl.ListingID = ml.ListingID
                               AND dl.Website = ml.Website
                     LEFT OUTER JOIN DBAUtility.dbo.ZipCBSA AS zc
                            ON dl.ZipCode = zc.ZIPCode
                     INNER JOIN #Listings AS l
                            ON dl.ListingID = l.ListingID
                     WHERE  ml.ymdid BETWEEN @StartYMDID AND @EndYMDID
                            AND dl.MgtCoID = @MgtCoID
                            AND CHARINDEX(ISNULL(zc.CBSACode,'00000'),@CBSACode) > 0
                     GROUP BY ml.yearMonth  
                           ,dl.PropertyName
                           ,ml.ListingID
						   ,zc.CBSAName
					) AS lm
WHERE (lm.AGListingStatusID = 1
		OR lm.RentListingStatusID = 1)
GROUP BY lm.CBSAName
		,lm.ListingID
		,lm.PropertyName
           
ORDER BY lm.CBSAName,lm.PropertyName

END





GO
/****** Object:  StoredProcedure [Reports].[rpt_MonthlyMgtPerformanceSummary]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Reports].[rpt_MonthlyMgtPerformanceSummary] (
     @mgtcoid VARCHAR(15)
      ,@CBSACode VARCHAR(MAX)
      ,@StartYMDDate AS DATETIME = NULL
      ,@EndYMDDate AS DATETIME = NULL)
AS 
/**********************************************************************************************************************************************
* Name:    Reports.rpt_MonthlyMgtPerformanceSummary
* Desc:    Used to pull Monthly Management Company Performance data
* -------------------------------------------------------------------------------------------
* Test:		EXEC Reports.rpt_MonthlyMgtPerformanceSummary 10076,'16740,26420,28660,41700,43340,46140','12/01/2012','12/31/2013'
*			EXEC Reports.rpt_MonthlyMgtPerformanceSummary 6008,'14460
,14500
,14860
,19740
,25540
,31080
,31700
,33100
,35620
,36740
,37100
,37980
,38060
,39300
,40140
,41740
,41860
,41940
,42660
,47900
,49340','11/01/2013','11/30/2014'
* -------------------------------------------------------------------------------------------
* Note: defaults to last years for previous month.
* -------------------------------------------------------------------------------------------
* Hist:  01 05/03/2012  Don Wert            Initial version, Ticket 9005 - started with Reports.rpt_MonthlyMgtPerformanceSummary, added new leads columns, broke out mobile, added cost per lead
*        02 06/11/2012  Richard Chen        Ticket 9562.  Report is no showing.  Problem due to inner join with cost per lead temp table.
*                                               Change query to Left outer join
*        03 08/21/2012  David McFarland     Changed Avg lead to use AllLeads instead of the buckets, which were missing leads
*        04 11/14/2012  Sarah Mims          Per ticket #10859 added ClicksListingMap to the MapClicks column
*        05 02/18/2013  Mary Pollard        Per ticket #11659 copied rpt_MonthlyMgtPerformanceSummary_CPL to make it a CBSA report, rather than Market
*		 06	01/27/2014  Sarah Mims			Ticket # 14435 - modified to include Rent. Note changes to Tier section.
*		 07 02/11/2014	Sarah Mims			Ticket # 14335 - added Invoiced Leases
*		 08	04/23/2014	Sarah Mims			Ticket # 15223 - added HD Video Clicks, HD Pano Tour Clicks and ImprSearchResults. The HD Click definitions
*											were taken from the Market Perf report (reference ticket # 14757 for more information)
*		 09 04/23/2014	Sarah Mims			Ticket # 13819 - added Mgmt Page Clicks (ClicksMgtCoWebLink and ClicksMgmtCoPeelAd)
*		 10 12/15/2014  Colleen Rocks		No ticket - No longer using website parameter; combine AG & Rent leads to be RentPath leads
* Hist: 11 04/15/2016   Clinton Woody		Ticket 22564 - No longer have leases so removed them from the report and this sp
* Hist: 12	10/18/2016	Bob Langley			Ticket 24212 - Changed to add MissedCalls to leads (where does connectedcalls)
*****************************************************************************************************************************************************/
BEGIN

------------------------------------------------------------------------
 -- Drop temp tables if not NULL
------------------------------------------------------------------------
 IF OBJECT_ID('tempdb..#Listings') IS NOT NULL
	BEGIN 
       DROP TABLE #lm
	END	   
		
IF OBJECT_ID('tempdb..#Leads') IS NOT NULL
	BEGIN 
		DROP TABLE #lm
	END
    
IF OBJECT_ID('tempdb..#tier') IS NOT NULL 
	BEGIN
		DROP TABLE #tier
	END
    
IF OBJECT_ID('tempdb..#Dates') IS NOT NULL
	BEGIN 
		DROP TABLE #Dates
	END

 ------------------------------------------------------------------------
 -- Declare & Set Variables
 ------------------------------------------------------------------------
 DECLARE  @StartYMDID INT
         ,@EndYMDID INT
         ,@CBSACount int

 SET @StartYMDDate = ISNULL(@StartYMDDate,DATEADD(MONTH,-12,GETDATE()));
 SET @EndYMDDate = ISNULL(@EndYMDDate,DATEADD(MONTH,0,GETDATE()));

 SET @StartYMDID = CAST(CONVERT(VARCHAR(8),@StartYMDDate,112) AS INT)
 SET @EndYMDID = CAST(CONVERT(VARCHAR(8),@EndYMDDate,112) AS INT)
         
 IF @EndYMDID > CAST(CONVERT(VARCHAR(8),GETDATE() - 1,112) AS INT) 
     BEGIN SET @EndYMDID = CAST(CONVERT(VARCHAR(8),GETDATE() - 1,112) AS INT) END
  
   

------------------------------------------------------------------------
-- Find all the ListingIDs that were active at any point during that time
-- frame that were associated with management company based on the
-- Website parameter selected 
------------------------------------------------------------------------
SELECT  dl.ListingID
       ,ISNULL(MAX(CASE WHEN ml.Website = 'AG' THEN 1
                        ELSE 0
                   END),0) AS AGFlag
       ,ISNULL(MAX(CASE WHEN ml.Website = 'Rent' THEN 1
                        ELSE 0
                   END),0) AS RentFlag
       ,zc.CBSACode
       ,zc.CBSAName
INTO    #Listings
FROM    ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
JOIN    ApartmentGuide.Mart.AGRentCombinedMartListings AS ml
        ON dl.ListingID = ml.ListingID
           AND dl.Website = ml.Website
LEFT OUTER JOIN DBAUtility.dbo.ZipCBSA AS zc
        ON dl.ZipCode = zc.ZIPCode
WHERE   dl.mgtcoid = @MgtCoID
        AND ml.YMDID BETWEEN @StartYMDID AND @EndYMDID
        AND CHARINDEX(ISNULL(zc.CBSACode,'00000'),@CBSACode) > 0
        /*AND dl.Website = CASE @Website
                           WHEN 0 THEN 'AG'
                           WHEN 1 THEN 'Rent'
                           ELSE dl.Website
                         END*/
GROUP BY dl.ListingID
       ,zc.CBSACode
       ,zc.CBSAName
HAVING  MAX(ml.ListingStatusID) = 1     


------------------------------------------------------------------------
 -- Find the last date of each month in selected date range
------------------------------------------------------------------------
SELECT  d.MonthEndYMDID
INTO    #Dates
FROM		(
            SELECT DISTINCT
                monthendymdid
            FROM   dbautility.dimension.dates
            WHERE  ymdid BETWEEN @StartYmdid AND @EndYmdid
            AND    monthendymdid BETWEEN @StartYmdid AND @EndYmdid
            ----------
            UNION
            ----------
            SELECT    @EndYmdid
			) AS d

-------------------------------------------------------------------------------------------------
-- For these date in the list or lastdate of the month, find the number of 
--     property in Platinum,Gold and Silver tier
-- Use min(placementTier) for each property.  If the property has both 
--     Platinum and Gold, it will show Gold. 
-- NOTE 01/29/2014: In order for the MIN Tier logic to still work, I have hardcoded
--					the website here to AG and the AGFlag = 1 since Rent does not 
--					have tiers. In the event that Rent gets tiers, we will need to revisit this.
-------------------------------------------------------------------------------------------------
    SELECT  b.yearmonth
           ,SUM(b.Diamond) Diamond
           ,SUM(b.Platinum) Platinum
           ,SUM(b.Gold) Gold
           ,SUM(b.Silver) Silver
    INTO    #tier
    FROM  ( SELECT a.yearmonth
                  ,CASE PlacementTier
                        WHEN 05 THEN COUNT(DISTINCT ListingID)
                        ELSE 0
                        END Diamond
                  ,CASE PlacementTier
                        WHEN 10 THEN COUNT(DISTINCT ListingID)
                        ELSE 0
                        END Platinum
                  ,CASE PlacementTier
                        WHEN 20 THEN COUNT(DISTINCT ListingID)
                        ELSE 0
                        END Gold
                  ,CASE PlacementTier
                        WHEN 30 THEN COUNT(DISTINCT ListingID)
                        ELSE 0
                        END Silver
             FROM (
                     SELECT ml.yearmonth
                           ,ml.ListingID
                           ,MIN(ml.placementTier) AS PlacementTier
                     FROM   #Listings AS lim
                            INNER JOIN apartmentguide.mart.AGRentCombinedMartListings AS ml
                               ON lim.listingid = ml.listingid
							   AND lim.AGFlag = 1
                            INNER JOIN #Dates AS d
                               ON ml.ymdid = d.MonthEndYmdid
                              --Statusid come from the last date of the month
							  AND ml.ListingStatusID = 1
					 WHERE ml.Website = 'AG'
                     GROUP  BY ml.yearmonth
                              ,ml.ListingID
                  ) a
             GROUP BY a.yearmonth
                   ,a.placementTier
            ) b
    GROUP BY b.yearmonth

--------------------------------------------------------------------------------
-- Since Lead and trafic information do not use data from the ONLY the last
-- date of the month, we use a separate query
--------------------------------------------------------------------------------
SELECT  ml.YearMonth													
		,ml.ListingID
		,MAX(lm.AGFlag)																							AS AGFlag
		,MAX(CASE WHEN lm.AGFlag = 1 AND ml.Website = 'AG' 
				AND ml.ListingStatusID = 1 THEN 1 ELSE 0 END)													AS AGListingStatusID
		,MAX(lm.RentFlag)																						AS RentFlag
		,MAX(CASE WHEN lm.RentFlag = 1 AND ml.Website = 'Rent' 
				AND ml.ListingStatusID = 1 THEN 1 ELSE 0 END)													AS RentListingStatusID
		,SUM(ml.AllLeads)																						AS AllLeads
		,SUM(ml.InternetPhoneLeads_NoMobile)																	AS InternetPhoneLeads_NoMobile
		,SUM(ml.InternetEmailLeads_NoMobile)																	AS InternetEmailLeads_NoMobile
		,SUM(ml.AllInternetLeads_NoMobile)																		AS AllInternetLeads_NoMobile
		,SUM(ml.ThirdPartyFeedLeads)																			AS ThirdPartyFeedLeads
		,SUM(ml.MobileEmails)																					AS MobileEmailLeads
		,SUM(ml.AGCPrintConnectedCalls) + SUM(ml.ASGPrintConnectedCalls) + SUM(ml.AGCPrintMissedCalls) + SUM(ml.ASGPrintMissedCalls)	AS PrintCalls	--Ticket 24212  added missed calls
		,SUM(ml.MobileCalls)																					AS MobileCalls
		,SUM(ml.AllMissedCalls)																					AS TotalMissedCalls
		,SUM(ml.ClicksMapDirections) + SUM(ml.ClicksListingMap)													AS MapClicks
		,SUM(ml.ClicksListingWebLink)																			AS ClicksListingWebLink
		,SUM(ml.UniqueVisits)																					AS UniqueVisits
		,SUM(ml.ImprSearchResults)																				AS ImprSearchResults
		,SUM(ml.ClicksMgtCoWebLink)	+ SUM(ml.ClicksMgmtCoPeelAd)												AS MgmtPageClicks
		,SUM(ml.ClicksCommunityVideo) + SUM(ml.ClicksHDVideos) + SUM(ml.ViewsEmercial)							AS HDVideoClicks
		,SUM(ml.ClicksPanoramicTours) + SUM(ml.ViewsVirtualBrochure)											AS HDPanoTourClicks
		--,SUM(ml.InvoicedLeases)																					AS InvoicedLeases
    INTO    #Leads
    FROM    #Listings AS lm
            INNER JOIN apartmentguide.mart.AGRentCombinedMartListings AS ml
               ON lm.listingid = ml.listingid
			INNER JOIN ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
				ON ml.ListingID = dl.ListingID
				AND ml.Website = dl.Website
    WHERE   ml.ymdid BETWEEN @StartYMDID AND @EndYMDID
			/*AND ml.Website = CASE @Website
								WHEN 0 THEN 'AG'
								WHEN 1 THEN 'Rent'
								ELSE ml.Website
							END*/
			AND dl.MgtCoID = @MgtCoID                          
    GROUP   BY ml.yearMonth
              ,ml.Listingid

--------------------------------------------------------------------------------------------------------------------------------------
-- Select out result set
--------------------------------------------------------------------------------------------------------------------------------------
SELECT X.*
,CASE WHEN X.AGPropertyCount > X.RentPropertyCount THEN X.AGPropertyCount ELSE X.RentPropertyCount END AS NumPropsForAvg
FROM
(
SELECT  LEFT(DATENAME(MONTH,CAST(lm.yearmonth AS VARCHAR(6)) + '01'),3) + ' ' + LEFT(lm.yearmonth,4)				AS Yearmonth
		,lm.YearMonth																								AS Ordermonth
		,COUNT(CASE WHEN lm.AGFlag = 1 AND lm.AGListingStatusID = 1 THEN ListingID END)								AS AGPropertyCount
		,COUNT(CASE WHEN lm.RentFlag = 1 AND lm.RentListingStatusID = 1 THEN ListingID END)							AS RentPropertyCount
		--,CASE WHEN COUNT(CASE WHEN lm.AGFlag = 1 AND lm.AGListingStatusID = 1 THEN ListingID END)
		--	> COUNT(CASE WHEN lm.RentFlag = 1 AND lm.RentListingStatusID = 1 THEN ListingID END)
		--THEN COUNT(CASE WHEN lm.AGFlag = 1 AND lm.AGListingStatusID = 1 THEN ListingID END)
		--ELSE COUNT(CASE WHEN lm.RentFlag = 1 AND lm.RentListingStatusID = 1 THEN ListingID END)
		--END		
		--																											AS NumPropsforAvg	
		,SUM(lm.AllLeads)																							AS ReportAllLeads
		,SUM(lm.InternetPhoneLeads_NoMobile)																		AS InternetPhoneLeads_NoMobile
		,SUM(lm.AllInternetLeads_NoMobile)	- SUM(lm.ThirdPartyFeedLeads)											AS ReportAllInternetLeads
		,SUM(lm.InternetEmailLeads_NoMobile) - SUM(lm.ThirdPartyFeedLeads)											AS ReportInternetEmailLeads
		,SUM(lm.ThirdPartyFeedLeads)																				AS ThirdPartyFeedLeads
		,SUM(lm.MobileEmailLeads)																					AS MobileEmailLeads
		,SUM(lm.PrintCalls)																							AS PrintCalls
		,SUM(lm.MobileCalls)																						AS MobileCalls
		,SUM(lm.TotalMissedCalls)																					AS TotalMissedCalls
		,SUM(lm.MapClicks)																							AS MapClicks
		,SUM(lm.ClicksListingWebLink)																				AS WebsiteClicks
		,SUM(lm.UniqueVisits)																						AS UniqueVisits
		,SUM(lm.ImprSearchResults)																					AS ImprSearchResults
		,SUM(lm.MgmtPageClicks)																						AS MgmtPageClicks
		,SUM(lm.HDVideoClicks)																						AS HDVideoClicks
		,SUM(lm.HDPanoTourClicks)																					AS HDPanoTourClicks
		--,SUM(lm.InvoicedLeases)																						AS InvoicedLeases
		,ISNULL(MIN(t.Diamond),0)																					AS Diamond
		,ISNULL(MIN(t.platinum),0)																					AS Platinum
		,ISNULL(MIN(t.Gold),0)																						AS Gold
		,ISNULL(MIN(t.Silver),0)																					AS Silver
       ,CAST(SUM(lm.AllLeads) AS DECIMAL (15,4)) / COUNT(DISTINCT lm.ListingID)										AS AvgLeadsPerProperty
		--Since this is a Rent only metric, we calculate it only for Rent Listings
	   --,CASE WHEN COUNT(DISTINCT CASE WHEN lm.RentListingStatusID =1 THEN lm.ListingID END) = 0 THEN 0 
				--	ELSE CAST(SUM(lm.InvoicedLeases) AS DECIMAL (15,4))/COUNT(DISTINCT CASE WHEN lm.RentListingStatusID = 1 THEN lm.ListingID END) 
				--	END																								AS AvgLeasesPerProperty
FROM    #Leads AS lm
LEFT OUTER JOIN #Tier AS t
        ON lm.YearMonth = t.YearMonth
WHERE (lm.AGListingStatusID = 1
		OR lm.RentListingStatusID = 1)
GROUP BY lm.yearMonth
) AS X
ORDER BY x.Ordermonth                            							



END

SET NOCOUNT OFF





GO
/****** Object:  StoredProcedure [Reports].[rpt_MVTCustomReport_v1]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Reports].[rpt_MVTCustomReport_v1]
(
@MVTTest VARCHAR(255)
,@StartDate DATETIME
,@EndDate DATETIME 
,@FirstSegment INT
,@SecondSegment INT
,@VSelection INT
,@ActionKeys VARCHAR (4000)
,@PageKeys VARCHAR (4000)
,@PositionKeys VARCHAR (4000)
,@SelectionKeys VARCHAR (4000)
,@PageSubKeys VARCHAR (4000)
)
/*************************************************************************************************
*
* Name:	Reports.rpt_MVTCustomReport
*
* Desc:	This report is for Scott Ehly.
*
* Test:	Reports.rpt_MVTCustomReport_v1 '[ME] PDP 3D Floor Plans','10/01/2016', '10/10/2016', 4,1,0,'0,1,2,3,4,5,6','0,1','0,1','0,1','0,1'
*
* Note: 	
*	--------------
*	--V Selection
*	--------------
*	0--Visit
*	1--Visitor
*	-------------
*	--Segment
*	-------------
*	0--None
*	1--Browser
*	2--CBSA - CustIP
*	3--CBSA - Search
*	4--Date
*	5--Day Of Week
*	6--OperatingSystem
*	7--Page
*	8--TrafficSource
*
* Hist:	01	10/11/2016	Sarah Mims			Initial Version. Ticket # 23610
**************************************************************************************************/
AS

SET NOCOUNT ON
/*
SET @MVTTest ='[ME] PDP 3D Floor Plans'
SET @StartDateKey = 20160915
SET @EndDateKey = 20161006
SET @ActionKeys = '0,1,2,3,4,5,6'
SET @PageKeys = '0,1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ,30 ,31 ,32 ,33 ,34 ,35 ,36 ,37 ,38 ,39 ,40 ,41 ,42 ,43 ,44 ,45 ,46 ,47 ,48 ,49 ,50 ,51 ,52 ,53 ,54 ,55 ,56 ,57 ,58 ,59 ,60 ,61 ,62 ,63 ,64 ,65 ,66 ,67 ,68 ,69 ,70 ,71 ,72 ,73 ,74 ,75 ,76 ,77 ,78 ,79 ,80 ,81 ,82 ,83 ,84 ,85 ,86 ,87 ,88 ,89 ,90 ,91 ,92 ,93 ,94 ,95 ,96 ,97 ,98 ,99 ,100 ,101 ,102 ,103 ,104 ,105 ,106 ,107 ,108 ,109 ,110 ,111 ,112 ,113 ,114 ,115 ,116 ,117 ,118'
SET @PositionKeys ='0,1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ,30 ,31 ,32 ,33 ,34 ,35 ,36 ,37 ,38 ,39 ,40 ,41 ,42 ,43 ,44 ,45 ,46 ,47 ,48 ,49 ,50 ,51 ,52 ,53 ,54 ,55 ,56 ,57 ,58 ,59 ,60 ,61 ,62 ,63 ,64 ,65 ,66 ,67 ,68 ,69 ,70 ,71 ,72 ,73 ,74 ,75 ,76 ,77 ,78 ,79 ,80 ,81 ,82 ,83 ,84 ,85 ,86 ,87 ,88 ,89 ,90 ,91 ,92 ,93 ,94 ,95 ,96 ,97 ,98 ,99 ,100 ,101 ,102 ,103 ,104 ,105 ,106 ,107 ,108 ,109 ,110 ,111 ,112 ,113 ,114 ,115 ,116 ,117 ,118 ,119 ,120 ,121 ,122 ,123 ,124 ,125 ,126 ,127 ,128 ,129 ,130 ,131 ,132 ,133 ,134 ,135 ,136 ,137 ,138 ,139 ,140 ,141 ,142 ,143 ,144 ,145 ,146 ,147 ,148 ,149 ,150 ,151 ,152 ,153 ,154 ,155 ,156 ,157 ,158 ,159 ,160 ,161 ,162 ,163 ,164 ,165 ,166 ,167 ,168 ,169 ,170 ,171 ,172 ,173 ,174 ,175 ,176 ,177 ,178 ,179 ,180 ,181 ,182 ,183 ,184 ,185 ,186 ,187 ,188 ,189 ,190 ,191 ,192 ,193 ,194 ,195 ,196 ,197 ,198 ,199 ,200 ,201 ,202 ,203 ,204 ,205 ,206 ,207 ,208 ,209 ,210 ,211 ,212 ,213 ,214 ,215 ,216 ,217 ,218 ,219 ,220 ,221 ,222 ,223 ,224 ,225 ,226 ,227 ,228 ,229 ,230'
SET @SelectionKeys = '0,1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ,30 ,31 ,32 ,33 ,34 ,35 ,36 ,37 ,38 ,39 ,40 ,41 ,42 ,43 ,44 ,45 ,46 ,47 ,48 ,49 ,50 ,51 ,52 ,53 ,54 ,55 ,56 ,57 ,58 ,59 ,60 ,61 ,62 ,63 ,64 ,65 ,66 ,67 ,68 ,69 ,70 ,71 ,72 ,73 ,74 ,75 ,76 ,77 ,78 ,79 ,80 ,81 ,82 ,83 ,84 ,85 ,86 ,87 ,88 ,89 ,90 ,91 ,92 ,93 ,94 ,95 ,96 ,97 ,98 ,99 ,100 ,101 ,102 ,103 ,104 ,105 ,106 ,107 ,108 ,109 ,110 ,111 ,112 ,113 ,114 ,115 ,116 ,117 ,118 ,119 ,120 ,121 ,122 ,123 ,124 ,125 ,126 ,127 ,128 ,129 ,130 ,131 ,132 ,133 ,134 ,135 ,136 ,137 ,138 ,139 ,140 ,141 ,142 ,143 ,144'
SET @PageSubKeys = '0,1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ,30 ,31 ,32 ,33 ,34 ,35 ,36 ,37 ,38 ,39 ,40 ,41 ,42 ,43 ,44 ,45 ,46 ,47 ,48 ,49 ,50 ,51 ,52 ,53 ,54 ,55 ,56 ,57 ,58 ,59 ,60 ,61 ,62 ,63 ,64 ,65 ,66 ,67 ,68 ,69 ,70 ,71 ,72 ,73 ,74 ,75 ,76 ,77 ,78 ,79 ,80 ,81 ,82 ,83 ,84 ,85 ,86 ,87 ,88 ,89 ,90 ,91 ,92 ,93 ,94 ,95 ,96 ,97 ,98 ,99 ,100 ,101 ,102 ,103 ,104 ,105 ,106 ,107 ,108 ,109 ,110 ,111 ,112 ,113 ,114 ,115 ,116 ,117 ,118 ,119 ,120 ,121 ,122 ,123 ,124 ,125 ,126 ,127 ,128 ,129 ,130 ,131 ,132 ,133 ,134 ,135 ,136 ,137 ,138 ,139 ,140 ,141 ,142 ,143 ,144 ,145 ,146 ,147 ,148 ,149 ,150 ,151 ,152 ,153 ,154 ,155 ,156 ,157 ,158 ,159 ,160 ,161 ,162 ,163 ,164 ,165 ,166 ,167 ,168 ,169 ,170 ,171 ,172 ,173 ,174 ,175 ,176 ,177 ,178 ,179 ,180 ,181 ,182 ,183 ,184 ,185 ,186 ,187 ,188 ,189 ,190 ,191 ,192 ,193 ,194 ,195 ,196 ,197 ,198 ,199 ,200 ,201 ,202 ,203 ,204 ,205 ,206 ,207 ,208 ,209 ,210 ,211 ,212 ,213 ,214 ,215 ,216 ,217 ,218 ,219 ,220 ,221 ,222 ,223 ,224 ,225 ,226 ,227 ,228 ,229 ,230 ,231 ,232 ,233 ,234 ,235 ,236 ,237 ,238 ,239 ,240 ,241 ,242 ,243 ,244 ,245 ,246 ,247 ,248 ,249 ,250 ,251 ,252 ,253 ,254 ,255 ,256 ,257 ,258 ,259 ,260 ,261 ,262 ,263 ,264 ,265 ,266 ,267 ,268 ,269 ,270 ,271 ,272 ,273 ,274 ,275 ,276 ,277 ,278 ,279 ,280 ,281 ,282 ,283 ,284 ,285 ,286 ,287 ,288 ,289 ,290 ,291 ,292 ,293 ,294 ,295 ,296 ,297 ,298 ,299 ,300 ,301 ,302 ,303 ,304 ,305 ,306 ,307 ,308 ,309 ,310 ,311 ,312 ,313 ,314 ,315 ,316 ,317 ,318 ,319 ,320 ,321 ,322 ,323 ,324 ,325 ,326 ,327 ,328 ,329 ,330 ,331 ,332 ,333 ,334 ,335 ,336 ,337 ,338 ,339 ,340 ,341 ,342 ,343 ,344 ,345 ,346 ,347 ,348 ,349 ,350 ,351 ,352 ,353 ,354 ,355 ,356 ,357 ,358 ,359 ,360 ,361 ,362 ,363 ,364 ,365 ,366 ,367 ,368 ,369 ,370 ,371 ,372 ,373 ,374 ,375 ,376 ,377 ,378 ,379 ,380 ,381 ,382 ,383 ,384 ,385 ,386 ,387 ,388 ,389 ,390 ,391 ,392 ,393 ,394 ,395 ,396 ,397 ,398 ,399 ,400 ,401 ,402 ,403 ,404 ,405 ,406 ,407 ,408 ,409 ,410 ,411 ,412 ,413 ,414 ,415 ,416 ,417 ,418 ,419 ,420 ,421 ,422 ,423 ,424 ,425 ,426 ,427 ,428 ,429 ,430 ,431 ,432 ,433 ,434 ,435 ,436 ,437 ,438 ,439 ,440 ,441 ,442 ,443 ,444 ,445 ,446 ,447 ,448 ,449 ,450 ,451 ,452 ,453 ,454 ,455 ,456 ,457 ,458 ,459 ,460 ,461 ,462 ,463 ,464 ,465 ,466 ,467 ,468 ,469 ,470 ,471 ,472 ,473 ,474 ,475 ,476 ,477 ,478 ,479 ,480 ,481 ,482 ,483 ,484 ,485 ,486 ,487 ,488 ,489 ,490 ,491 ,492 ,493 ,494 ,495 ,496 ,497 ,498 ,499 ,500 ,501 ,502 ,503 ,504 ,505 ,506 ,507 ,508 ,509 ,510 ,511 ,512 ,513 ,514 ,515 ,516'
SET @FirstSegment = 4
SET @SecondSegment = 1
SET @VSelection = 0
*/



-------------------------------
--Declare and set variables
-------------------------------
DECLARE @StartDateKey INT
		,@EndDateKey INT
  
SET @StartDateKey = CAST(CONVERT(VARCHAR(8),@StartDate,112) AS INT)
SET @EndDateKey = CAST(CONVERT(VARCHAR(8),@EndDate,112) AS INT)
-------------------------------

-------------------------------
--Drop Temp Tables
-------------------------------
BEGIN TRY
	DROP TABLE #MVTVCount
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	DROP TABLE #MVTCustomEvents
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	DROP TABLE #ActionList
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	DROP TABLE #PageList
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	DROP TABLE #PositionList
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	DROP TABLE #SelectionList
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	DROP TABLE #PageSubList
END TRY
BEGIN CATCH
END CATCH


---------------------------------------------------------
--Break out Action and Action Refinement Selections
--Action, Page, Position, Selection and PageSub
---------------------------------------------------------
SELECT  REPLACE(REPLACE(REPLACE(REPLACE(Measure,' ',''),CHAR(13) + CHAR(10),' '),CHAR(13),''),CHAR(10),'') AS ActionKey
INTO    #ActionList
FROM    DBAUtility.dbo.fn_Split_Large(@ActionKeys,',');

SELECT  REPLACE(REPLACE(REPLACE(REPLACE(Measure,' ',''),CHAR(13) + CHAR(10),' '),CHAR(13),''),CHAR(10),'') AS PageKey
INTO    #PageList
FROM    DBAUtility.dbo.fn_Split_Large(@PageKeys,',');

SELECT  REPLACE(REPLACE(REPLACE(REPLACE(Measure,' ',''),CHAR(13) + CHAR(10),' '),CHAR(13),''),CHAR(10),'') AS PositionKey
INTO    #PositionList
FROM    DBAUtility.dbo.fn_Split_Large(@PositionKeys,',');

SELECT  REPLACE(REPLACE(REPLACE(REPLACE(Measure,' ',''),CHAR(13) + CHAR(10),' '),CHAR(13),''),CHAR(10),'') AS SelectionKey
INTO    #SelectionList
FROM    DBAUtility.dbo.fn_Split_Large(@SelectionKeys,',');

SELECT  REPLACE(REPLACE(REPLACE(REPLACE(Measure,' ',''),CHAR(13) + CHAR(10),' '),CHAR(13),''),CHAR(10),'') AS PageSubKey
INTO    #PageSubList
FROM    DBAUtility.dbo.fn_Split_Large(@PageSubKeys,',');


-------------------------------
--Create Temp Table to hold VCount
--by selected segment(s)
-------------------------------
CREATE TABLE #MVTVCount
(SubProfileName VARCHAR(50)
,TestName VARCHAR(255)
,VariationGroupName VARCHAR(64)
,FirstSegment VARCHAR(64)
,SecondSegment VARCHAR(64)
,FixedVCount INT
)


-------------------------------
--Get V Count: Visits or Visitors
--by selected segment(s)
-------------------------------
INSERT INTO #MVTVCount
EXEC
('SELECT pr.SubProfileName
,mvt.TestName	
,mvt.VariationGroupName
,CASE '+@FirstSegment+'
		 WHEN 1 THEN b.Browser
		 WHEN 2 THEN cl.CBSAName
		 WHEN 3 THEN sl.CBSAName
		 WHEN 4 THEN d.DateDescription
		 WHEN 5 THEN d.DayName
		 WHEN 6 THEN os.OperatingSystem
		 WHEN 7 THEN p.Page
		 WHEN 8 THEN ts.TrafficSourceName
		 ELSE ''None Selected'' END AS FirstSegment	 
,CASE '+@SecondSegment+'
		 WHEN 1 THEN b.Browser
		 WHEN 2 THEN cl.CBSAName
		 WHEN 3 THEN sl.CBSAName
		 WHEN 4 THEN d.DateDescription
		 WHEN 5 THEN d.DayName
		 WHEN 6 THEN os.OperatingSystem
		 WHEN 7 THEN p.Page
		 WHEN 8 THEN ts.TrafficSourceName
		 ELSE ''None Selected'' END AS SecondSegment
,COUNT(DISTINCT CASE WHEN '+@VSelection+' = 0 THEN VisitKey ELSE VisitorKey END) AS FixedVCount
FROM DimensionalModelWeb.Fact.WebEvent_VisitorHash AS w
JOIN DimensionalModelWeb.Conformed.Browser AS b
	ON w.BrowserKey = b.BrowserKey
JOIN DimensionalModelWeb.Conformed.Dates AS d
	ON w.DateKey = d.DateKey
JOIN DimensionalModelWeb.Conformed.MultivariateTesting AS mvt
	ON w.MVTKey = mvt.MVTKey
JOIN DimensionalModelWeb.Conformed.OperatingSystem AS os
	ON w.OperatingSystemKey = os.OperatingsystemKey
JOIN DimensionalModelWeb.Conformed.Page AS p
	ON w.PageKey = p.PageKey
JOIN DimensionalModelWeb.Conformed.Profile AS pr
	ON w.ProfileKey = pr.ProfileKey
JOIN DimensionalModelWeb.Conformed.TrafficSource AS ts
	ON w.TrafficSourceKey = ts.TrafficSourceKey
JOIN DimensionalModelWeb.Conformed.Location AS sl
	ON w.SearchLocationKey = sl.LocationKey
JOIN DimensionalModelWeb.Conformed.Location AS cl
	ON w.CustIPLocationKey = cl.LocationKey
WHERE w.DateKey BETWEEN ' + @StartDateKey + ' AND ' + @EndDateKey + '
AND mvt.TestName = ''' + @MVTTest +'''
GROUP BY pr.SubProfileName
,mvt.TestName	
,mvt.VariationGroupName
,CASE '+@FirstSegment+'
		 WHEN 1 THEN b.Browser
		 WHEN 2 THEN cl.CBSAName
		 WHEN 3 THEN sl.CBSAName
		 WHEN 4 THEN d.DateDescription
		 WHEN 5 THEN d.DayName
		 WHEN 6 THEN os.OperatingSystem
		 WHEN 7 THEN p.Page
		 WHEN 8 THEN ts.TrafficSourceName
		 ELSE ''None Selected'' END 
,CASE '+@SecondSegment+'
		 WHEN 1 THEN b.Browser
		 WHEN 2 THEN cl.CBSAName
		 WHEN 3 THEN sl.CBSAName
		 WHEN 4 THEN d.DateDescription
		 WHEN 5 THEN d.DayName
		 WHEN 6 THEN os.OperatingSystem
		 WHEN 7 THEN p.Page
		 WHEN 8 THEN ts.TrafficSourceName
		 ELSE ''None Selected'' END 
'
) AT APS_LINK


-------------------------------
--Get Custom Event Count by selected segment(s)
-------------------------------
CREATE TABLE #MVTCustomEvents
(SubProfileName VARCHAR(50)
,TestName VARCHAR(255)
,VariationGroupName VARCHAR(64)
,FirstSegment VARCHAR(64)
,SecondSegment VARCHAR(64)
,ActionKey INT
,[Action] VARCHAR (25)
,PageKey INT
,[Page] VARCHAR(50)
,PositionKey INT
,[Position] VARCHAR(100)
,SelectionKey INT
,Selection VARCHAR(30)
,PageSubKey INT
,PageSub VARCHAR(64)
,ParseID BIGINT
,VisitKey BIGINT
,VisitorKey BIGINT
)

EXEC
('
BEGIN TRY
	DROP TABLE RentPath.dbo.MVTCustomEvents
END TRY
BEGIN CATCH
END CATCH

CREATE TABLE RentPath.dbo.MVTCustomEvents
WITH(DISTRIBUTION = HASH(VisitorKey))
AS

SELECT pr.SubProfileName
,mvt.TestName	
,mvt.VariationGroupName
,CASE '+@FirstSegment+'
		 WHEN 1 THEN b.Browser
		 WHEN 2 THEN cl.CBSAName
		 WHEN 3 THEN sl.CBSAName
		 WHEN 4 THEN d.DateDescription
		 WHEN 5 THEN d.DayName
		 WHEN 6 THEN os.OperatingSystem
		 WHEN 7 THEN p.Page
		 WHEN 8 THEN ts.TrafficSourceName
		 ELSE ''None Selected'' END AS FirstSegment	 
,CASE '+@SecondSegment+'
		 WHEN 1 THEN b.Browser
		 WHEN 2 THEN cl.CBSAName
		 WHEN 3 THEN sl.CBSAName
		 WHEN 4 THEN d.DateDescription
		 WHEN 5 THEN d.DayName
		 WHEN 6 THEN os.OperatingSystem
		 WHEN 7 THEN p.Page
		 WHEN 8 THEN ts.TrafficSourceName
		 ELSE ''None Selected'' END AS SecondSegment
,w.ActionKey
,a.Action
,w.PageKey
,p.Page
,w.PositionKey
,pt.Position
,w.SelectionKey
,s.Selection
,w.PageSubKey
,ps.PageSub
,w.ParseID
,w.VisitKey
,w.VisitorKey
FROM DimensionalModelWeb.Fact.WebEvent_VisitorHash AS w
JOIN DimensionalModelWeb.Conformed.Browser AS b
	ON w.BrowserKey = b.BrowserKey
JOIN DimensionalModelWeb.Conformed.Dates AS d
	ON w.DateKey = d.DateKey
JOIN DimensionalModelWeb.Conformed.MultivariateTesting AS mvt
	ON w.MVTKey = mvt.MVTKey
JOIN DimensionalModelWeb.Conformed.OperatingSystem AS os
	ON w.OperatingSystemKey = os.OperatingsystemKey
JOIN DimensionalModelWeb.Conformed.Page AS p
	ON w.PageKey = p.PageKey
JOIN DimensionalModelWeb.Conformed.Position AS pt
	ON w.PositionKey = pt.PositionKey
JOIN DimensionalModelWeb.Conformed.Profile AS pr
	ON w.ProfileKey = pr.ProfileKey
JOIN DimensionalModelWeb.Conformed.Action AS a
	ON w.ActionKey = a.ActionKey
JOIN DimensionalModelWeb.Conformed.PageSub AS ps
	ON w.PageSubKey = ps.PageSubKey
JOIN DimensionalModelWeb.Conformed.TrafficSource AS ts
	ON w.TrafficSourceKey = ts.TrafficSourceKey
JOIN DimensionalModelWeb.Conformed.Location AS sl
	ON w.SearchLocationKey = sl.LocationKey
JOIN DimensionalModelWeb.Conformed.Location AS cl
	ON w.CustIPLocationKey = cl.LocationKey
JOIN DimensionalModelWeb.Conformed.Selection AS s
	ON w.SelectionKey = s.SelectionKey
WHERE w.DateKey BETWEEN ' + @StartDateKey + ' AND ' + @EndDateKey + '
AND mvt.TestName = ''' + @MVTTest +'''
'
) AT APS_LINK


INSERT INTO #MVTCustomEvents
EXEC
('SELECT *
FROM RentPath.dbo.MVTCustomEvents'
) AT APS_LINK



-------------------------------
--Put it together and calculate
--Conversion and Binary
-------------------------------
SELECT  mc.TestName
       ,mc.VariationGroupName
	   ,CASE WHEN mc.VariationGroupName LIKE '%Original%' THEN 1 ELSE 0 END AS GroupNumber
       ,mc.FirstSegment
       ,mc.SecondSegment
       ,mc.FixedVCount
       ,ISNULL(me.CustomEventCount,0) AS CustomEventCount
       ,ISNULL(me.CustomVCount,0) AS CustomVCount
       ,ISNULL(me.CustomEventCount,0) / CAST(mc.FixedVCount AS DECIMAL(15,4))	AS CustomEventConv
	   ,ISNULL(me.CustomVCount,0)/ CAST(mc.FixedVCount AS DECIMAL(15,4))		AS BinaryConv
FROM    #MVTVCount AS mc
LEFT OUTER JOIN 
			(
			SELECT  SubProfileName
				   ,TestName
				   ,VariationGroupName
				   ,FirstSegment
				   ,SecondSegment
				   ,COUNT(DISTINCT CASE WHEN @VSelection = 0 THEN VisitKey
										ELSE VisitorKey
								   END) AS CustomVCount
				   ,COUNT(*) AS CustomEventCount
			FROM    #MVTCustomEvents AS mc
			JOIN    #ActionList AS a
					ON mc.ActionKey = a.ActionKey
			JOIN    #PageList AS pg
					ON mc.PageKey = pg.PageKey
			JOIN	#PositionList AS pt
					ON mc.PositionKey = pt.PositionKey
			JOIN	#SelectionList AS s
					ON mc.SelectionKey = s.SelectionKey
			JOIN	#PageSubList AS ps
					ON mc.PageSubKey = ps.PageSubKey
			GROUP BY SubProfileName
				   ,TestName
				   ,VariationGroupName
				   ,FirstSegment
				   ,SecondSegment
			) AS me
        ON mc.TestName = me.TestName
           AND mc.VariationGroupName = me.VariationGroupName
           AND mc.FirstSegment = me.FirstSegment
           AND mc.SecondSegment = me.SecondSegment
ORDER BY mc.VariationGroupName
       ,mc.FirstSegment
       ,mc.SecondSegment

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [Reports].[rpt_MVTCustomReport_v2]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Reports].[rpt_MVTCustomReport_v2]
(
@MVTTest VARCHAR(255) 
,@StartDate DATETIME
,@EndDate DATETIME
,@FirstSegment INT
,@SecondSegment INT
,@VSelection INT
,@SelectionKeys VARCHAR (4000)
,@PageSubKeys VARCHAR (4000)
)
/*************************************************************************************************
*
* Name:	Reports.rpt_MVTCustomReport
*
* Desc:	This report is for Scott Ehly.
*
* Test:	Reports.rpt_MVTCustomReport_v2 '[ME] PDP 3D Floor Plans', '09/01/2016', '10/10/2016', 4,0,0,'0,1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ,30 ,31 ,32 ,33 ,34 ,35 ,36 ,37 ,38 ,39 ,40 ,41 ,42 ,43 ,44 ,45 ,46 ,47 ,48 ,49 ,50 ,51 ,52 ,53 ,54 ,55 ,56 ,57 ,58 ,59 ,60 ,61 ,62 ,63 ,64 ,65 ,66 ,67 ,68 ,69 ,70 ,71 ,72 ,73 ,74 ,75 ,76 ,77 ,78 ,79 ,80 ,81 ,82 ,83 ,84 ,85 ,86 ,87 ,88 ,89 ,90 ,91 ,92 ,93 ,94 ,95 ,96 ,97 ,98 ,99 ,100 ,101 ,102 ,103 ,104 ,105 ,106 ,107 ,108 ,109 ,110 ,111 ,112 ,113 ,114 ,115 ,116 ,117 ,118 ,119 ,120 ,121 ,122 ,123 ,124 ,125 ,126 ,127 ,128 ,129 ,130 ,131 ,132 ,133 ,134 ,135 ,136 ,137 ,138 ,139 ,140 ,141 ,142 ,143 ,144','0,1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ,30 ,31 ,32 ,33 ,34 ,35 ,36 ,37 ,38 ,39 ,40 ,41 ,42 ,43 ,44 ,45 ,46 ,47 ,48 ,49 ,50 ,51 ,52 ,53 ,54 ,55 ,56 ,57 ,58 ,59 ,60 ,61 ,62 ,63 ,64 ,65 ,66 ,67 ,68 ,69 ,70 ,71 ,72 ,73 ,74 ,75 ,76 ,77 ,78 ,79 ,80 ,81 ,82 ,83 ,84 ,85 ,86 ,87 ,88 ,89 ,90 ,91 ,92 ,93 ,94 ,95 ,96 ,97 ,98 ,99 ,100 ,101 ,102 ,103 ,104 ,105 ,106 ,107 ,108 ,109 ,110 ,111 ,112 ,113 ,114 ,115 ,116 ,117 ,118 ,119 ,120 ,121 ,122 ,123 ,124 ,125 ,126 ,127 ,128 ,129 ,130 ,131 ,132 ,133 ,134 ,135 ,136 ,137 ,138 ,139 ,140 ,141 ,142 ,143 ,144 ,145 ,146 ,147 ,148 ,149 ,150 ,151 ,152 ,153 ,154 ,155 ,156 ,157 ,158 ,159 ,160 ,161 ,162 ,163 ,164 ,165 ,166 ,167 ,168 ,169 ,170 ,171 ,172 ,173 ,174 ,175 ,176 ,177 ,178 ,179 ,180 ,181 ,182 ,183 ,184 ,185 ,186 ,187 ,188 ,189 ,190 ,191 ,192 ,193 ,194 ,195 ,196 ,197 ,198 ,199 ,200 ,201 ,202 ,203 ,204 ,205 ,206 ,207 ,208 ,209 ,210 ,211 ,212 ,213 ,214 ,215 ,216 ,217 ,218 ,219 ,220 ,221 ,222 ,223 ,224 ,225 ,226 ,227 ,228 ,229 ,230 ,231 ,232 ,233 ,234 ,235 ,236 ,237 ,238 ,239 ,240 ,241 ,242 ,243 ,244 ,245 ,246 ,247 ,248 ,249 ,250 ,251 ,252 ,253 ,254 ,255 ,256 ,257 ,258 ,259 ,260 ,261 ,262 ,263 ,264 ,265 ,266 ,267 ,268 ,269 ,270 ,271 ,272 ,273 ,274 ,275 ,276 ,277 ,278 ,279 ,280 ,281 ,282 ,283 ,284 ,285 ,286 ,287 ,288 ,289 ,290 ,291 ,292 ,293 ,294 ,295 ,296 ,297 ,298 ,299 ,300 ,301 ,302 ,303 ,304 ,305 ,306 ,307 ,308 ,309 ,310 ,311 ,312 ,313 ,314 ,315 ,316 ,317 ,318 ,319 ,320 ,321 ,322 ,323 ,324 ,325 ,326 ,327 ,328 ,329 ,330 ,331 ,332 ,333 ,334 ,335 ,336 ,337 ,338 ,339 ,340 ,341 ,342 ,343 ,344 ,345 ,346 ,347 ,348 ,349 ,350 ,351 ,352 ,353 ,354 ,355 ,356 ,357 ,358 ,359 ,360 ,361 ,362 ,363 ,364 ,365 ,366 ,367 ,368 ,369 ,370 ,371 ,372 ,373 ,374 ,375 ,376 ,377 ,378 ,379 ,380 ,381 ,382 ,383 ,384 ,385 ,386 ,387 ,388 ,389 ,390 ,391 ,392 ,393 ,394 ,395 ,396 ,397 ,398 ,399 ,400 ,401 ,402 ,403 ,404 ,405 ,406 ,407 ,408 ,409 ,410 ,411 ,412 ,413 ,414 ,415 ,416 ,417 ,418 ,419 ,420 ,421 ,422 ,423 ,424 ,425 ,426 ,427 ,428 ,429 ,430 ,431 ,432 ,433 ,434 ,435 ,436 ,437 ,438 ,439 ,440 ,441 ,442 ,443 ,444 ,445 ,446 ,447 ,448 ,449 ,450 ,451 ,452 ,453 ,454 ,455 ,456 ,457 ,458 ,459 ,460 ,461 ,462 ,463 ,464 ,465 ,466 ,467 ,468 ,469 ,470 ,471 ,472 ,473 ,474 ,475 ,476 ,477 ,478 ,479 ,480 ,481 ,482 ,483 ,484 ,485 ,486 ,487 ,488 ,489 ,490 ,491 ,492 ,493 ,494 ,495 ,496 ,497 ,498 ,499 ,500 ,501 ,502 ,503 ,504 ,505 ,506 ,507 ,508 ,509 ,510 ,511 ,512 ,513 ,514 ,515 ,516'
*
* Note: 	
*	--------------
*	--V Selection
*	--------------
*	0--Visit
*	1--Visitor
*	-------------
*	--Segment
*	-------------
*	0--None
*	1--Browser
*	2--CBSA - CustIP
*	3--CBSA - Search
*	4--Date
*	5--Day Of Week
*	6--OperatingSystem
*	7--Page
*	8--TrafficSource
*
* Hist:	01	10/11/2016	Sarah Mims			Initial Version. Ticket # 23610
**************************************************************************************************/
AS

SET NOCOUNT ON
/*
DECLARE @MVTTest VARCHAR(255) 
,@StartDate DATETIME
,@EndDate DATETIME
,@StartDateKey INT
,@EndDateKey INT
,@FirstSegment INT
,@SecondSegment INT
,@VSelection INT
,@SelectionKeys VARCHAR (4000)
,@PageSubKeys VARCHAR (4000)

SET @MVTTest ='[ME] PDP 3D Floor Plans'
SET @StartDate = '10/01/2016'
SET @EndDate= '10/10/2016'
SET @FirstSegment = 1
SET @SecondSegment = 0
SET @VSelection = 0
SET @SelectionKeys = '0,1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ,30 ,31 ,32 ,33 ,34 ,35 ,36 ,37 ,38 ,39 ,40 ,41 ,42 ,43 ,44 ,45 ,46 ,47 ,48 ,49 ,50 ,51 ,52 ,53 ,54 ,55 ,56 ,57 ,58 ,59 ,60 ,61 ,62 ,63 ,64 ,65 ,66 ,67 ,68 ,69 ,70 ,71 ,72 ,73 ,74 ,75 ,76 ,77 ,78 ,79 ,80 ,81 ,82 ,83 ,84 ,85 ,86 ,87 ,88 ,89 ,90 ,91 ,92 ,93 ,94 ,95 ,96 ,97 ,98 ,99 ,100 ,101 ,102 ,103 ,104 ,105 ,106 ,107 ,108 ,109 ,110 ,111 ,112 ,113 ,114 ,115 ,116 ,117 ,118 ,119 ,120 ,121 ,122 ,123 ,124 ,125 ,126 ,127 ,128 ,129 ,130 ,131 ,132 ,133 ,134 ,135 ,136 ,137 ,138 ,139 ,140 ,141 ,142 ,143 ,144'
SET @PageSubKeys = '0,1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ,30 ,31 ,32 ,33 ,34 ,35 ,36 ,37 ,38 ,39 ,40 ,41 ,42 ,43 ,44 ,45 ,46 ,47 ,48 ,49 ,50 ,51 ,52 ,53 ,54 ,55 ,56 ,57 ,58 ,59 ,60 ,61 ,62 ,63 ,64 ,65 ,66 ,67 ,68 ,69 ,70 ,71 ,72 ,73 ,74 ,75 ,76 ,77 ,78 ,79 ,80 ,81 ,82 ,83 ,84 ,85 ,86 ,87 ,88 ,89 ,90 ,91 ,92 ,93 ,94 ,95 ,96 ,97 ,98 ,99 ,100 ,101 ,102 ,103 ,104 ,105 ,106 ,107 ,108 ,109 ,110 ,111 ,112 ,113 ,114 ,115 ,116 ,117 ,118 ,119 ,120 ,121 ,122 ,123 ,124 ,125 ,126 ,127 ,128 ,129 ,130 ,131 ,132 ,133 ,134 ,135 ,136 ,137 ,138 ,139 ,140 ,141 ,142 ,143 ,144 ,145 ,146 ,147 ,148 ,149 ,150 ,151 ,152 ,153 ,154 ,155 ,156 ,157 ,158 ,159 ,160 ,161 ,162 ,163 ,164 ,165 ,166 ,167 ,168 ,169 ,170 ,171 ,172 ,173 ,174 ,175 ,176 ,177 ,178 ,179 ,180 ,181 ,182 ,183 ,184 ,185 ,186 ,187 ,188 ,189 ,190 ,191 ,192 ,193 ,194 ,195 ,196 ,197 ,198 ,199 ,200 ,201 ,202 ,203 ,204 ,205 ,206 ,207 ,208 ,209 ,210 ,211 ,212 ,213 ,214 ,215 ,216 ,217 ,218 ,219 ,220 ,221 ,222 ,223 ,224 ,225 ,226 ,227 ,228 ,229 ,230 ,231 ,232 ,233 ,234 ,235 ,236 ,237 ,238 ,239 ,240 ,241 ,242 ,243 ,244 ,245 ,246 ,247 ,248 ,249 ,250 ,251 ,252 ,253 ,254 ,255 ,256 ,257 ,258 ,259 ,260 ,261 ,262 ,263 ,264 ,265 ,266 ,267 ,268 ,269 ,270 ,271 ,272 ,273 ,274 ,275 ,276 ,277 ,278 ,279 ,280 ,281 ,282 ,283 ,284 ,285 ,286 ,287 ,288 ,289 ,290 ,291 ,292 ,293 ,294 ,295 ,296 ,297 ,298 ,299 ,300 ,301 ,302 ,303 ,304 ,305 ,306 ,307 ,308 ,309 ,310 ,311 ,312 ,313 ,314 ,315 ,316 ,317 ,318 ,319 ,320 ,321 ,322 ,323 ,324 ,325 ,326 ,327 ,328 ,329 ,330 ,331 ,332 ,333 ,334 ,335 ,336 ,337 ,338 ,339 ,340 ,341 ,342 ,343 ,344 ,345 ,346 ,347 ,348 ,349 ,350 ,351 ,352 ,353 ,354 ,355 ,356 ,357 ,358 ,359 ,360 ,361 ,362 ,363 ,364 ,365 ,366 ,367 ,368 ,369 ,370 ,371 ,372 ,373 ,374 ,375 ,376 ,377 ,378 ,379 ,380 ,381 ,382 ,383 ,384 ,385 ,386 ,387 ,388 ,389 ,390 ,391 ,392 ,393 ,394 ,395 ,396 ,397 ,398 ,399 ,400 ,401 ,402 ,403 ,404 ,405 ,406 ,407 ,408 ,409 ,410 ,411 ,412 ,413 ,414 ,415 ,416 ,417 ,418 ,419 ,420 ,421 ,422 ,423 ,424 ,425 ,426 ,427 ,428 ,429 ,430 ,431 ,432 ,433 ,434 ,435 ,436 ,437 ,438 ,439 ,440 ,441 ,442 ,443 ,444 ,445 ,446 ,447 ,448 ,449 ,450 ,451 ,452 ,453 ,454 ,455 ,456 ,457 ,458 ,459 ,460 ,461 ,462 ,463 ,464 ,465 ,466 ,467 ,468 ,469 ,470 ,471 ,472 ,473 ,474 ,475 ,476 ,477 ,478 ,479 ,480 ,481 ,482 ,483 ,484 ,485 ,486 ,487 ,488 ,489 ,490 ,491 ,492 ,493 ,494 ,495 ,496 ,497 ,498 ,499 ,500 ,501 ,502 ,503 ,504 ,505 ,506 ,507 ,508 ,509 ,510 ,511 ,512 ,513 ,514 ,515 ,516'

*/

-------------------------------
--Declare and set variables
-------------------------------
DECLARE @StartDateKey INT
		,@EndDateKey INT
  
SET @StartDateKey = CAST(CONVERT(VARCHAR(8),@StartDate,112) AS INT)
SET @EndDateKey = CAST(CONVERT(VARCHAR(8),@EndDate,112) AS INT)
-------------------------------
--Drop Temp Tables
-------------------------------
BEGIN TRY
	DROP TABLE #MVTVCount
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	DROP TABLE #MVTCustomEvents
END TRY
BEGIN CATCH
END CATCH


-----------------------------------
--Create MVTSelection and MVTPageSub "Temp" Tables on APS
-----------------------------------

EXEC
('
	------------------------------
	--Drop Selection and PageSub Tables
	------------------------------
	BEGIN TRY
		DROP TABLE RentPath.dbo.rpt_MVTSelectionList
	END TRY
	BEGIN CATCH
	END CATCH

	BEGIN TRY
		DROP TABLE RentPath.dbo.rpt_MVTPageSubList
	END TRY
	BEGIN CATCH
	END CATCH

	------------------------------
	--Create Selection Table
	------------------------------

	CREATE TABLE RentPath.dbo.rpt_MVTSelectionList
	  WITH (DISTRIBUTION = REPLICATE)
	  AS

		SELECT s.SelectionKey
		,s.Selection
		FROM
		(
		SELECT 
				SelectionKey = LTrim(RTrim(Convert(nvarchar(4000), SubString('''+@SelectionKeys+''', n.Number, CharIndex('','', '''+@SelectionKeys+''' + '','', n.Number) - n.Number))))
				,StartPosition = n.Number
				,GETDATE() AS DateCreated
			FROM
				Common.dbo.numbers AS n
			WHERE
					n.Number <= Convert(int, Len('''+@SelectionKeys+'''))
				AND	SUBSTRING('','' + '''+@SelectionKeys+''', n.Number, LEN('','')) = '',''
		) AS X
		JOIN DimensionalModelWeb.Conformed.Selection AS s
			ON X.SelectionKey = s.SelectionKey
	------------------------------
	--Create Selection Table
	------------------------------

	CREATE TABLE RentPath.dbo.rpt_MVTPageSubList
	  WITH (DISTRIBUTION = REPLICATE)
	  AS
		SELECT ps.PageSubKey
		,ps.PageSub
		FROM
			(
			SELECT 
					PageSubKey = LTrim(RTrim(Convert(nvarchar(4000), SubString('''+@PageSubKeys+''', n.Number, CharIndex('','', '''+@PageSubKeys+''' + '','', n.Number) - n.Number))))
					,StartPosition = n.Number
					,GETDATE() AS DateCreated
				FROM
					Common.dbo.numbers AS n
				WHERE
						n.Number <= Convert(int, Len('''+@PageSubKeys+'''))
					AND	SUBSTRING('','' + '''+@PageSubKeys+''', n.Number, LEN('','')) = '',''
			) AS X
		JOIN DimensionalModelWeb.Conformed.PageSub AS ps
			ON X.PageSubKey = ps.PageSubKey
') AT APS_LINK

-------------------------------
--Create Temp Table to hold VCount
--by selected segment(s)
-------------------------------
CREATE TABLE #MVTVCount
(SubProfileName VARCHAR(50)
,TestName VARCHAR(255)
,VariationGroupName VARCHAR(64)
,DateSort INT
,FirstSegment VARCHAR(64)
,SecondSegment VARCHAR(64)
,FixedVCount INT
)


-------------------------------
--Get V Count: Visits or Visitors
--by selected segment(s)
-------------------------------
INSERT INTO #MVTVCount
EXEC
('SELECT pr.SubProfileName
,mvt.TestName	
,mvt.VariationGroupName
,CASE '+@FirstSegment+' WHEN 4 THEN w.DateKey ELSE 99999 END AS DateSort
,CASE '+@FirstSegment+'
		 WHEN 1 THEN b.Browser
		 WHEN 2 THEN cl.CBSAName
		 WHEN 3 THEN sl.CBSAName
		 WHEN 4 THEN d.DateDescription
		 WHEN 5 THEN d.DayName
		 WHEN 6 THEN os.OperatingSystem
		 WHEN 7 THEN p.Page
		 WHEN 8 THEN ts.TrafficSourceName
		 ELSE ''None Selected'' END AS FirstSegment	 
,CASE '+@SecondSegment+'
		 WHEN 1 THEN b.Browser
		 WHEN 2 THEN cl.CBSAName
		 WHEN 3 THEN sl.CBSAName
		 WHEN 4 THEN d.DateDescription
		 WHEN 5 THEN d.DayName
		 WHEN 6 THEN os.OperatingSystem
		 WHEN 7 THEN p.Page
		 WHEN 8 THEN ts.TrafficSourceName
		 ELSE ''None Selected'' END AS SecondSegment
,COUNT(DISTINCT CASE WHEN '+@VSelection+' = 0 THEN VisitKey ELSE VisitorKey END) AS FixedVCount
FROM DimensionalModelWeb.Fact.WebEvent_VisitorHash AS w
JOIN DimensionalModelWeb.Conformed.Browser AS b
	ON w.BrowserKey = b.BrowserKey
JOIN DimensionalModelWeb.Conformed.Dates AS d
	ON w.DateKey = d.DateKey
JOIN DimensionalModelWeb.Conformed.MultivariateTesting AS mvt
	ON w.MVTKey = mvt.MVTKey
JOIN DimensionalModelWeb.Conformed.OperatingSystem AS os
	ON w.OperatingSystemKey = os.OperatingsystemKey
JOIN DimensionalModelWeb.Conformed.Page AS p
	ON w.PageKey = p.PageKey
JOIN DimensionalModelWeb.Conformed.Profile AS pr
	ON w.ProfileKey = pr.ProfileKey
JOIN DimensionalModelWeb.Conformed.TrafficSource AS ts
	ON w.TrafficSourceKey = ts.TrafficSourceKey
JOIN DimensionalModelWeb.Conformed.Location AS sl
	ON w.SearchLocationKey = sl.LocationKey
JOIN DimensionalModelWeb.Conformed.Location AS cl
	ON w.CustIPLocationKey = cl.LocationKey
WHERE w.BadTrafficFlag = 0
AND w.DateKey BETWEEN ' + @StartDateKey + ' AND ' + @EndDateKey + '
AND mvt.TestName = ''' + @MVTTest +'''
GROUP BY pr.SubProfileName
,mvt.TestName	
,mvt.VariationGroupName
,CASE '+@FirstSegment+' WHEN 4 THEN w.DateKey ELSE 99999 END
,CASE '+@FirstSegment+'
		 WHEN 1 THEN b.Browser
		 WHEN 2 THEN cl.CBSAName
		 WHEN 3 THEN sl.CBSAName
		 WHEN 4 THEN d.DateDescription
		 WHEN 5 THEN d.DayName
		 WHEN 6 THEN os.OperatingSystem
		 WHEN 7 THEN p.Page
		 WHEN 8 THEN ts.TrafficSourceName
		 ELSE ''None Selected'' END 
,CASE '+@SecondSegment+'
		 WHEN 1 THEN b.Browser
		 WHEN 2 THEN cl.CBSAName
		 WHEN 3 THEN sl.CBSAName
		 WHEN 4 THEN d.DateDescription
		 WHEN 5 THEN d.DayName
		 WHEN 6 THEN os.OperatingSystem
		 WHEN 7 THEN p.Page
		 WHEN 8 THEN ts.TrafficSourceName
		 ELSE ''None Selected'' END 
'
) AT APS_LINK

-------------------------------
--Create Temp Table to hold Custom Counts
--by selected segment(s)
-------------------------------
CREATE TABLE #MVTCustomEvents
(SubProfileName VARCHAR(50)
,TestName VARCHAR(255)
,VariationGroupName VARCHAR(64)
,DateSort INT
,FirstSegment VARCHAR(64)
,SecondSegment VARCHAR(64)
,CustomVCount INT
,CustomEventCount INT
)

INSERT INTO #MVTCustomEvents
EXEC
('SELECT pr.SubProfileName
,mvt.TestName	
,mvt.VariationGroupName
,CASE '+@FirstSegment+' WHEN 4 THEN w.DateKey ELSE 99999 END AS DateSort
,CASE '+@FirstSegment+'
		 WHEN 1 THEN b.Browser
		 WHEN 2 THEN cl.CBSAName
		 WHEN 3 THEN sl.CBSAName
		 WHEN 4 THEN d.DateDescription
		 WHEN 5 THEN d.DayName
		 WHEN 6 THEN os.OperatingSystem
		 WHEN 7 THEN p.Page
		 WHEN 8 THEN ts.TrafficSourceName
		 ELSE ''None Selected'' END AS FirstSegment	 
,CASE '+@SecondSegment+'
		 WHEN 1 THEN b.Browser
		 WHEN 2 THEN cl.CBSAName
		 WHEN 3 THEN sl.CBSAName
		 WHEN 4 THEN d.DateDescription
		 WHEN 5 THEN d.DayName
		 WHEN 6 THEN os.OperatingSystem
		 WHEN 7 THEN p.Page
		 WHEN 8 THEN ts.TrafficSourceName
		 ELSE ''None Selected'' END AS SecondSegment
,COUNT(DISTINCT CASE WHEN '+@VSelection+' = 0 THEN VisitKey ELSE VisitorKey END) AS CustomVCount
,COUNT(*) AS CustomEventCount
FROM DimensionalModelWeb.Fact.WebEvent_VisitorHash AS w
JOIN DimensionalModelWeb.Conformed.Browser AS b
	ON w.BrowserKey = b.BrowserKey
JOIN DimensionalModelWeb.Conformed.Dates AS d
	ON w.DateKey = d.DateKey
JOIN DimensionalModelWeb.Conformed.MultivariateTesting AS mvt
	ON w.MVTKey = mvt.MVTKey
JOIN DimensionalModelWeb.Conformed.OperatingSystem AS os
	ON w.OperatingSystemKey = os.OperatingsystemKey
JOIN RentPath.dbo.rpt_MVTPageList AS p
	ON w.PageKey = p.PageKey
JOIN RentPath.dbo.rpt_MVTPositionList AS pt
	ON w.PositionKey = pt.PositionKey
JOIN DimensionalModelWeb.Conformed.Profile AS pr
	ON w.ProfileKey = pr.ProfileKey
JOIN RentPath.dbo.rpt_MVTActionList AS a
	ON w.ActionKey = a.ActionKey
JOIN RentPath.dbo.rpt_MVTPageSubList AS ps
	ON w.PageSubKey = ps.PageSubKey
JOIN DimensionalModelWeb.Conformed.TrafficSource AS ts
	ON w.TrafficSourceKey = ts.TrafficSourceKey
JOIN DimensionalModelWeb.Conformed.Location AS sl
	ON w.SearchLocationKey = sl.LocationKey
JOIN DimensionalModelWeb.Conformed.Location AS cl
	ON w.CustIPLocationKey = cl.LocationKey
JOIN RentPath.dbo.rpt_MVTSelectionList AS s
	ON w.SelectionKey = s.SelectionKey
WHERE w.BadTrafficFlag = 0
AND w.DateKey BETWEEN ' + @StartDateKey + ' AND ' + @EndDateKey + '
AND mvt.TestName = ''' + @MVTTest +'''
GROUP BY pr.SubProfileName
,mvt.TestName	
,mvt.VariationGroupName
,CASE '+@FirstSegment+' WHEN 4 THEN w.DateKey ELSE 99999 END
,CASE '+@FirstSegment+'
		 WHEN 1 THEN b.Browser
		 WHEN 2 THEN cl.CBSAName
		 WHEN 3 THEN sl.CBSAName
		 WHEN 4 THEN d.DateDescription
		 WHEN 5 THEN d.DayName
		 WHEN 6 THEN os.OperatingSystem
		 WHEN 7 THEN p.Page
		 WHEN 8 THEN ts.TrafficSourceName
		 ELSE ''None Selected'' END 
,CASE '+@SecondSegment+'
		 WHEN 1 THEN b.Browser
		 WHEN 2 THEN cl.CBSAName
		 WHEN 3 THEN sl.CBSAName
		 WHEN 4 THEN d.DateDescription
		 WHEN 5 THEN d.DayName
		 WHEN 6 THEN os.OperatingSystem
		 WHEN 7 THEN p.Page
		 WHEN 8 THEN ts.TrafficSourceName
		 ELSE ''None Selected'' END 
'
) AT APS_LINK

-------------------------------
--Put it together
-------------------------------
SELECT X.TestName
,X.VariationGroupName
,X.DateSort
,X.GroupNumber
,X.FirstSegment
,X.SecondSegment
,SUM(X.FixedVCount)				AS FixedVCount
,SUM(X.CustomEventCount)		AS CustomEventCount
,SUM(X.CustomVCount)			AS CustomVCount
FROM
	(
	SELECT  mc.TestName
		   ,mc.VariationGroupName
		   ,mc.DateSort
		   ,CASE WHEN mc.VariationGroupName LIKE '%original%' THEN 1 ELSE 0 END								AS GroupNumber
		   ,mc.FirstSegment
		   ,mc.SecondSegment
		   ,mc.FixedVCount																					AS FixedVCount
		   ,ISNULL(me.CustomEventCount,0)																	AS CustomEventCount
		   ,ISNULL(me.CustomVCount,0)																		AS CustomVCount
	FROM    #MVTVCount AS mc
	LEFT OUTER JOIN #MVTCustomEvents AS me
			ON mc.TestName = me.TestName
			   AND mc.VariationGroupName = me.VariationGroupName
			   AND mc.FirstSegment = me.FirstSegment
			   AND mc.SecondSegment = me.SecondSegment
			   AND mc.DateSort = me.DateSort

	UNION 

	SELECT DISTINCT TestName
	,a.VariationGroupName
	,CASE WHEN @FirstSegment = 4 THEN d.YMDID ELSE 99999 END					AS DateSort
	,CASE WHEN a.VariationGroupName LIKE '%original%' THEN 1 ELSE 0 END			AS GroupNumber
	,FirstSegment
	,SecondSegment
	,0 AS FixedVCount
	,0 AS CustomEventCount
	,0 AS CustomVCount
	FROM #MVTCustomEvents AS mt
	CROSS JOIN (SELECT DISTINCT VariationGroupName FROM #MVTCustomEvents) AS a
	LEFT OUTER JOIN DBAUtility.Dimension.Dates AS d
		ON mt.FirstSegment = d.DateDescription
	) AS X
GROUP BY X.TestName
,X.VariationGroupName
,X.DateSort
,X.GroupNumber
,X.FirstSegment
,X.SecondSegment

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [Reports].[rpt_MVTCustomReport_v3]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Reports].[rpt_MVTCustomReport_v3]
(
@MVTTest VARCHAR(255) 
,@StartDate DATETIME
,@EndDate DATETIME
,@FirstSegment INT
,@SecondSegment INT
,@VSelection INT
,@SelectionKeys VARCHAR (4000)
,@PageSubKeys VARCHAR (4000)
)
/*************************************************************************************************
*
* Name:	Reports.rpt_MVTCustomReport
*
* Desc:	This report is for Scott Ehly.
*
* Test:	Reports.rpt_MVTCustomReport_v3 '[ME] PDP 3D Floor Plans', '09/01/2016', '10/10/2016', 4,0,0,'0,1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ,30 ,31 ,32 ,33 ,34 ,35 ,36 ,37 ,38 ,39 ,40 ,41 ,42 ,43 ,44 ,45 ,46 ,47 ,48 ,49 ,50 ,51 ,52 ,53 ,54 ,55 ,56 ,57 ,58 ,59 ,60 ,61 ,62 ,63 ,64 ,65 ,66 ,67 ,68 ,69 ,70 ,71 ,72 ,73 ,74 ,75 ,76 ,77 ,78 ,79 ,80 ,81 ,82 ,83 ,84 ,85 ,86 ,87 ,88 ,89 ,90 ,91 ,92 ,93 ,94 ,95 ,96 ,97 ,98 ,99 ,100 ,101 ,102 ,103 ,104 ,105 ,106 ,107 ,108 ,109 ,110 ,111 ,112 ,113 ,114 ,115 ,116 ,117 ,118 ,119 ,120 ,121 ,122 ,123 ,124 ,125 ,126 ,127 ,128 ,129 ,130 ,131 ,132 ,133 ,134 ,135 ,136 ,137 ,138 ,139 ,140 ,141 ,142 ,143 ,144','0,1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ,30 ,31 ,32 ,33 ,34 ,35 ,36 ,37 ,38 ,39 ,40 ,41 ,42 ,43 ,44 ,45 ,46 ,47 ,48 ,49 ,50 ,51 ,52 ,53 ,54 ,55 ,56 ,57 ,58 ,59 ,60 ,61 ,62 ,63 ,64 ,65 ,66 ,67 ,68 ,69 ,70 ,71 ,72 ,73 ,74 ,75 ,76 ,77 ,78 ,79 ,80 ,81 ,82 ,83 ,84 ,85 ,86 ,87 ,88 ,89 ,90 ,91 ,92 ,93 ,94 ,95 ,96 ,97 ,98 ,99 ,100 ,101 ,102 ,103 ,104 ,105 ,106 ,107 ,108 ,109 ,110 ,111 ,112 ,113 ,114 ,115 ,116 ,117 ,118 ,119 ,120 ,121 ,122 ,123 ,124 ,125 ,126 ,127 ,128 ,129 ,130 ,131 ,132 ,133 ,134 ,135 ,136 ,137 ,138 ,139 ,140 ,141 ,142 ,143 ,144 ,145 ,146 ,147 ,148 ,149 ,150 ,151 ,152 ,153 ,154 ,155 ,156 ,157 ,158 ,159 ,160 ,161 ,162 ,163 ,164 ,165 ,166 ,167 ,168 ,169 ,170 ,171 ,172 ,173 ,174 ,175 ,176 ,177 ,178 ,179 ,180 ,181 ,182 ,183 ,184 ,185 ,186 ,187 ,188 ,189 ,190 ,191 ,192 ,193 ,194 ,195 ,196 ,197 ,198 ,199 ,200 ,201 ,202 ,203 ,204 ,205 ,206 ,207 ,208 ,209 ,210 ,211 ,212 ,213 ,214 ,215 ,216 ,217 ,218 ,219 ,220 ,221 ,222 ,223 ,224 ,225 ,226 ,227 ,228 ,229 ,230 ,231 ,232 ,233 ,234 ,235 ,236 ,237 ,238 ,239 ,240 ,241 ,242 ,243 ,244 ,245 ,246 ,247 ,248 ,249 ,250 ,251 ,252 ,253 ,254 ,255 ,256 ,257 ,258 ,259 ,260 ,261 ,262 ,263 ,264 ,265 ,266 ,267 ,268 ,269 ,270 ,271 ,272 ,273 ,274 ,275 ,276 ,277 ,278 ,279 ,280 ,281 ,282 ,283 ,284 ,285 ,286 ,287 ,288 ,289 ,290 ,291 ,292 ,293 ,294 ,295 ,296 ,297 ,298 ,299 ,300 ,301 ,302 ,303 ,304 ,305 ,306 ,307 ,308 ,309 ,310 ,311 ,312 ,313 ,314 ,315 ,316 ,317 ,318 ,319 ,320 ,321 ,322 ,323 ,324 ,325 ,326 ,327 ,328 ,329 ,330 ,331 ,332 ,333 ,334 ,335 ,336 ,337 ,338 ,339 ,340 ,341 ,342 ,343 ,344 ,345 ,346 ,347 ,348 ,349 ,350 ,351 ,352 ,353 ,354 ,355 ,356 ,357 ,358 ,359 ,360 ,361 ,362 ,363 ,364 ,365 ,366 ,367 ,368 ,369 ,370 ,371 ,372 ,373 ,374 ,375 ,376 ,377 ,378 ,379 ,380 ,381 ,382 ,383 ,384 ,385 ,386 ,387 ,388 ,389 ,390 ,391 ,392 ,393 ,394 ,395 ,396 ,397 ,398 ,399 ,400 ,401 ,402 ,403 ,404 ,405 ,406 ,407 ,408 ,409 ,410 ,411 ,412 ,413 ,414 ,415 ,416 ,417 ,418 ,419 ,420 ,421 ,422 ,423 ,424 ,425 ,426 ,427 ,428 ,429 ,430 ,431 ,432 ,433 ,434 ,435 ,436 ,437 ,438 ,439 ,440 ,441 ,442 ,443 ,444 ,445 ,446 ,447 ,448 ,449 ,450 ,451 ,452 ,453 ,454 ,455 ,456 ,457 ,458 ,459 ,460 ,461 ,462 ,463 ,464 ,465 ,466 ,467 ,468 ,469 ,470 ,471 ,472 ,473 ,474 ,475 ,476 ,477 ,478 ,479 ,480 ,481 ,482 ,483 ,484 ,485 ,486 ,487 ,488 ,489 ,490 ,491 ,492 ,493 ,494 ,495 ,496 ,497 ,498 ,499 ,500 ,501 ,502 ,503 ,504 ,505 ,506 ,507 ,508 ,509 ,510 ,511 ,512 ,513 ,514 ,515 ,516'
*
* Note: 	
*	--------------
*	--V Selection
*	--------------
*	0--Visit
*	1--Visitor
*	-------------
*	--Segment
*	-------------
*	0--None
*	1--Browser
*	2--CBSA - CustIP
*	3--CBSA - Search
*	4--Date
*	5--Day Of Week
*	6--OperatingSystem
*	7--Page
*	8--TrafficSource
*
* Hist:	01	10/11/2016	Sarah Mims			Initial Version. Ticket # 23610
**************************************************************************************************/
AS

SET NOCOUNT ON
/*
DECLARE @MVTTest VARCHAR(255) 
,@StartDate DATETIME
,@EndDate DATETIME
,@StartDateKey INT
,@EndDateKey INT
,@FirstSegment INT
,@SecondSegment INT
,@VSelection INT
,@SelectionKeys VARCHAR (4000)
,@PageSubKeys VARCHAR (4000)

SET @MVTTest ='[ME] PDP 3D Floor Plans'
SET @StartDate = '10/01/2016'
SET @EndDate= '10/10/2016'
SET @FirstSegment = 1
SET @SecondSegment = 0
SET @VSelection = 0
SET @SelectionKeys = '0,1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ,30 ,31 ,32 ,33 ,34 ,35 ,36 ,37 ,38 ,39 ,40 ,41 ,42 ,43 ,44 ,45 ,46 ,47 ,48 ,49 ,50 ,51 ,52 ,53 ,54 ,55 ,56 ,57 ,58 ,59 ,60 ,61 ,62 ,63 ,64 ,65 ,66 ,67 ,68 ,69 ,70 ,71 ,72 ,73 ,74 ,75 ,76 ,77 ,78 ,79 ,80 ,81 ,82 ,83 ,84 ,85 ,86 ,87 ,88 ,89 ,90 ,91 ,92 ,93 ,94 ,95 ,96 ,97 ,98 ,99 ,100 ,101 ,102 ,103 ,104 ,105 ,106 ,107 ,108 ,109 ,110 ,111 ,112 ,113 ,114 ,115 ,116 ,117 ,118 ,119 ,120 ,121 ,122 ,123 ,124 ,125 ,126 ,127 ,128 ,129 ,130 ,131 ,132 ,133 ,134 ,135 ,136 ,137 ,138 ,139 ,140 ,141 ,142 ,143 ,144'
SET @PageSubKeys = '0,1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ,30 ,31 ,32 ,33 ,34 ,35 ,36 ,37 ,38 ,39 ,40 ,41 ,42 ,43 ,44 ,45 ,46 ,47 ,48 ,49 ,50 ,51 ,52 ,53 ,54 ,55 ,56 ,57 ,58 ,59 ,60 ,61 ,62 ,63 ,64 ,65 ,66 ,67 ,68 ,69 ,70 ,71 ,72 ,73 ,74 ,75 ,76 ,77 ,78 ,79 ,80 ,81 ,82 ,83 ,84 ,85 ,86 ,87 ,88 ,89 ,90 ,91 ,92 ,93 ,94 ,95 ,96 ,97 ,98 ,99 ,100 ,101 ,102 ,103 ,104 ,105 ,106 ,107 ,108 ,109 ,110 ,111 ,112 ,113 ,114 ,115 ,116 ,117 ,118 ,119 ,120 ,121 ,122 ,123 ,124 ,125 ,126 ,127 ,128 ,129 ,130 ,131 ,132 ,133 ,134 ,135 ,136 ,137 ,138 ,139 ,140 ,141 ,142 ,143 ,144 ,145 ,146 ,147 ,148 ,149 ,150 ,151 ,152 ,153 ,154 ,155 ,156 ,157 ,158 ,159 ,160 ,161 ,162 ,163 ,164 ,165 ,166 ,167 ,168 ,169 ,170 ,171 ,172 ,173 ,174 ,175 ,176 ,177 ,178 ,179 ,180 ,181 ,182 ,183 ,184 ,185 ,186 ,187 ,188 ,189 ,190 ,191 ,192 ,193 ,194 ,195 ,196 ,197 ,198 ,199 ,200 ,201 ,202 ,203 ,204 ,205 ,206 ,207 ,208 ,209 ,210 ,211 ,212 ,213 ,214 ,215 ,216 ,217 ,218 ,219 ,220 ,221 ,222 ,223 ,224 ,225 ,226 ,227 ,228 ,229 ,230 ,231 ,232 ,233 ,234 ,235 ,236 ,237 ,238 ,239 ,240 ,241 ,242 ,243 ,244 ,245 ,246 ,247 ,248 ,249 ,250 ,251 ,252 ,253 ,254 ,255 ,256 ,257 ,258 ,259 ,260 ,261 ,262 ,263 ,264 ,265 ,266 ,267 ,268 ,269 ,270 ,271 ,272 ,273 ,274 ,275 ,276 ,277 ,278 ,279 ,280 ,281 ,282 ,283 ,284 ,285 ,286 ,287 ,288 ,289 ,290 ,291 ,292 ,293 ,294 ,295 ,296 ,297 ,298 ,299 ,300 ,301 ,302 ,303 ,304 ,305 ,306 ,307 ,308 ,309 ,310 ,311 ,312 ,313 ,314 ,315 ,316 ,317 ,318 ,319 ,320 ,321 ,322 ,323 ,324 ,325 ,326 ,327 ,328 ,329 ,330 ,331 ,332 ,333 ,334 ,335 ,336 ,337 ,338 ,339 ,340 ,341 ,342 ,343 ,344 ,345 ,346 ,347 ,348 ,349 ,350 ,351 ,352 ,353 ,354 ,355 ,356 ,357 ,358 ,359 ,360 ,361 ,362 ,363 ,364 ,365 ,366 ,367 ,368 ,369 ,370 ,371 ,372 ,373 ,374 ,375 ,376 ,377 ,378 ,379 ,380 ,381 ,382 ,383 ,384 ,385 ,386 ,387 ,388 ,389 ,390 ,391 ,392 ,393 ,394 ,395 ,396 ,397 ,398 ,399 ,400 ,401 ,402 ,403 ,404 ,405 ,406 ,407 ,408 ,409 ,410 ,411 ,412 ,413 ,414 ,415 ,416 ,417 ,418 ,419 ,420 ,421 ,422 ,423 ,424 ,425 ,426 ,427 ,428 ,429 ,430 ,431 ,432 ,433 ,434 ,435 ,436 ,437 ,438 ,439 ,440 ,441 ,442 ,443 ,444 ,445 ,446 ,447 ,448 ,449 ,450 ,451 ,452 ,453 ,454 ,455 ,456 ,457 ,458 ,459 ,460 ,461 ,462 ,463 ,464 ,465 ,466 ,467 ,468 ,469 ,470 ,471 ,472 ,473 ,474 ,475 ,476 ,477 ,478 ,479 ,480 ,481 ,482 ,483 ,484 ,485 ,486 ,487 ,488 ,489 ,490 ,491 ,492 ,493 ,494 ,495 ,496 ,497 ,498 ,499 ,500 ,501 ,502 ,503 ,504 ,505 ,506 ,507 ,508 ,509 ,510 ,511 ,512 ,513 ,514 ,515 ,516'

*/

-------------------------------
--Declare and set variables
-------------------------------
DECLARE @StartDateKey INT
		,@EndDateKey INT
  
SET @StartDateKey = CAST(CONVERT(VARCHAR(8),@StartDate,112) AS INT)
SET @EndDateKey = CAST(CONVERT(VARCHAR(8),@EndDate,112) AS INT)


-----------------------------------
--To improve performance - do all of the work on APS
-----------------------------------

EXEC
('
	------------------------------
	--Drop Selection and PageSub Tables
	------------------------------
	BEGIN TRY
		DROP TABLE RentPath.dbo.rpt_MVTSelectionList
	END TRY
	BEGIN CATCH
	END CATCH

	BEGIN TRY
		DROP TABLE RentPath.dbo.rpt_MVTPageSubList
	END TRY
	BEGIN CATCH
	END CATCH

	BEGIN TRY
		DROP TABLE RentPath.dbo.MVTVCount
	END TRY
	BEGIN CATCH
	END CATCH

	BEGIN TRY
		DROP TABLE RentPath.dbo.MVTCustomEvents
	END TRY
	BEGIN CATCH
	END CATCH

	------------------------------
	--Create Selection Table
	------------------------------

	CREATE TABLE RentPath.dbo.rpt_MVTSelectionList
	  WITH (DISTRIBUTION = REPLICATE)
	  AS

		SELECT s.SelectionKey
		,s.Selection
		FROM
		(
		SELECT 
				SelectionKey = LTrim(RTrim(Convert(nvarchar(4000), SubString('''+@SelectionKeys+''', n.Number, CharIndex('','', '''+@SelectionKeys+''' + '','', n.Number) - n.Number))))
				,StartPosition = n.Number
				,GETDATE() AS DateCreated
			FROM
				Common.dbo.numbers AS n
			WHERE
					n.Number <= Convert(int, Len('''+@SelectionKeys+'''))
				AND	SUBSTRING('','' + '''+@SelectionKeys+''', n.Number, LEN('','')) = '',''
		) AS X
		JOIN DimensionalModelWeb.Conformed.Selection AS s
			ON X.SelectionKey = s.SelectionKey
	------------------------------
	--Create Selection Table
	------------------------------

	CREATE TABLE RentPath.dbo.rpt_MVTPageSubList
	  WITH (DISTRIBUTION = REPLICATE)
	  AS
		SELECT ps.PageSubKey
		,ps.PageSub
		FROM
			(
			SELECT 
					PageSubKey = LTrim(RTrim(Convert(nvarchar(4000), SubString('''+@PageSubKeys+''', n.Number, CharIndex('','', '''+@PageSubKeys+''' + '','', n.Number) - n.Number))))
					,StartPosition = n.Number
					,GETDATE() AS DateCreated
				FROM
					Common.dbo.numbers AS n
				WHERE
						n.Number <= Convert(int, Len('''+@PageSubKeys+'''))
					AND	SUBSTRING('','' + '''+@PageSubKeys+''', n.Number, LEN('','')) = '',''
			) AS X
		JOIN DimensionalModelWeb.Conformed.PageSub AS ps
			ON X.PageSubKey = ps.PageSubKey

	----------------------------------
	--Create ''fixed'' visit count by segment table
	----------------------------------
	CREATE TABLE RentPath.dbo.MVTVCount
	WITH (DISTRIBUTION = REPLICATE)
	AS

	SELECT pr.SubProfileName
	,mvt.TestName	
	,mvt.VariationGroupName
	,CASE '+@FirstSegment+' WHEN 4 THEN w.DateKey ELSE 99999 END AS DateSort
	,CASE '+@FirstSegment+'
			 WHEN 1 THEN b.Browser
			 WHEN 2 THEN cl.CBSAName
			 WHEN 3 THEN sl.CBSAName
			 WHEN 4 THEN d.DateDescription
			 WHEN 5 THEN d.DayName
			 WHEN 6 THEN os.OperatingSystem
			 WHEN 7 THEN p.Page
			 WHEN 8 THEN ts.TrafficSourceName
			 ELSE ''None Selected'' END AS FirstSegment	 
	,CASE '+@SecondSegment+'
			 WHEN 1 THEN b.Browser
			 WHEN 2 THEN cl.CBSAName
			 WHEN 3 THEN sl.CBSAName
			 WHEN 4 THEN d.DateDescription
			 WHEN 5 THEN d.DayName
			 WHEN 6 THEN os.OperatingSystem
			 WHEN 7 THEN p.Page
			 WHEN 8 THEN ts.TrafficSourceName
			 ELSE ''None Selected'' END AS SecondSegment
	,COUNT(DISTINCT CASE WHEN '+@VSelection+' = 0 THEN VisitKey ELSE VisitorKey END) AS FixedVCount
	FROM DimensionalModelWeb.Fact.WebEvent_VisitorHash AS w
	JOIN DimensionalModelWeb.Conformed.Browser AS b
		ON w.BrowserKey = b.BrowserKey
	JOIN DimensionalModelWeb.Conformed.Dates AS d
		ON w.DateKey = d.DateKey
	JOIN DimensionalModelWeb.Conformed.MultivariateTesting AS mvt
		ON w.MVTKey = mvt.MVTKey
	JOIN DimensionalModelWeb.Conformed.OperatingSystem AS os
		ON w.OperatingSystemKey = os.OperatingsystemKey
	JOIN DimensionalModelWeb.Conformed.Page AS p
		ON w.PageKey = p.PageKey
	JOIN DimensionalModelWeb.Conformed.Profile AS pr
		ON w.ProfileKey = pr.ProfileKey
	JOIN DimensionalModelWeb.Conformed.TrafficSource AS ts
		ON w.TrafficSourceKey = ts.TrafficSourceKey
	JOIN DimensionalModelWeb.Conformed.Location AS sl
		ON w.SearchLocationKey = sl.LocationKey
	JOIN DimensionalModelWeb.Conformed.Location AS cl
		ON w.CustIPLocationKey = cl.LocationKey
	WHERE w.BadTrafficFlag = 0
	AND w.DateKey BETWEEN ' + @StartDateKey + ' AND ' + @EndDateKey + '
	AND mvt.TestName = ''' + @MVTTest +'''
	GROUP BY pr.SubProfileName
	,mvt.TestName	
	,mvt.VariationGroupName
	,CASE '+@FirstSegment+' WHEN 4 THEN w.DateKey ELSE 99999 END
	,CASE '+@FirstSegment+'
			 WHEN 1 THEN b.Browser
			 WHEN 2 THEN cl.CBSAName
			 WHEN 3 THEN sl.CBSAName
			 WHEN 4 THEN d.DateDescription
			 WHEN 5 THEN d.DayName
			 WHEN 6 THEN os.OperatingSystem
			 WHEN 7 THEN p.Page
			 WHEN 8 THEN ts.TrafficSourceName
			 ELSE ''None Selected'' END 
	,CASE '+@SecondSegment+'
			 WHEN 1 THEN b.Browser
			 WHEN 2 THEN cl.CBSAName
			 WHEN 3 THEN sl.CBSAName
			 WHEN 4 THEN d.DateDescription
			 WHEN 5 THEN d.DayName
			 WHEN 6 THEN os.OperatingSystem
			 WHEN 7 THEN p.Page
			 WHEN 8 THEN ts.TrafficSourceName
			 ELSE ''None Selected'' END 

	----------------------------------
	--Create custom counts by segment table
	----------------------------------
	CREATE TABLE RentPath.dbo.MVTCustomEvents
	WITH (DISTRIBUTION = REPLICATE)
	AS
	SELECT pr.SubProfileName
	,mvt.TestName	
	,mvt.VariationGroupName
	,CASE '+@FirstSegment+' WHEN 4 THEN w.DateKey ELSE 99999 END AS DateSort
	,CASE '+@FirstSegment+'
			 WHEN 1 THEN b.Browser
			 WHEN 2 THEN cl.CBSAName
			 WHEN 3 THEN sl.CBSAName
			 WHEN 4 THEN d.DateDescription
			 WHEN 5 THEN d.DayName
			 WHEN 6 THEN os.OperatingSystem
			 WHEN 7 THEN p.Page
			 WHEN 8 THEN ts.TrafficSourceName
			 ELSE ''None Selected'' END AS FirstSegment	 
	,CASE '+@SecondSegment+'
			 WHEN 1 THEN b.Browser
			 WHEN 2 THEN cl.CBSAName
			 WHEN 3 THEN sl.CBSAName
			 WHEN 4 THEN d.DateDescription
			 WHEN 5 THEN d.DayName
			 WHEN 6 THEN os.OperatingSystem
			 WHEN 7 THEN p.Page
			 WHEN 8 THEN ts.TrafficSourceName
			 ELSE ''None Selected'' END AS SecondSegment
	,COUNT(DISTINCT CASE WHEN '+@VSelection+' = 0 THEN VisitKey ELSE VisitorKey END) AS CustomVCount
	,COUNT(*) AS CustomEventCount
	FROM DimensionalModelWeb.Fact.WebEvent_VisitorHash AS w
	JOIN DimensionalModelWeb.Conformed.Browser AS b
		ON w.BrowserKey = b.BrowserKey
	JOIN DimensionalModelWeb.Conformed.Dates AS d
		ON w.DateKey = d.DateKey
	JOIN DimensionalModelWeb.Conformed.MultivariateTesting AS mvt
		ON w.MVTKey = mvt.MVTKey
	JOIN DimensionalModelWeb.Conformed.OperatingSystem AS os
		ON w.OperatingSystemKey = os.OperatingsystemKey
	JOIN RentPath.dbo.rpt_MVTPageList AS p
		ON w.PageKey = p.PageKey
	JOIN RentPath.dbo.rpt_MVTPositionList AS pt
		ON w.PositionKey = pt.PositionKey
	JOIN DimensionalModelWeb.Conformed.Profile AS pr
		ON w.ProfileKey = pr.ProfileKey
	JOIN RentPath.dbo.rpt_MVTActionList AS a
		ON w.ActionKey = a.ActionKey
	JOIN RentPath.dbo.rpt_MVTPageSubList AS ps
		ON w.PageSubKey = ps.PageSubKey
	JOIN DimensionalModelWeb.Conformed.TrafficSource AS ts
		ON w.TrafficSourceKey = ts.TrafficSourceKey
	JOIN DimensionalModelWeb.Conformed.Location AS sl
		ON w.SearchLocationKey = sl.LocationKey
	JOIN DimensionalModelWeb.Conformed.Location AS cl
		ON w.CustIPLocationKey = cl.LocationKey
	JOIN RentPath.dbo.rpt_MVTSelectionList AS s
		ON w.SelectionKey = s.SelectionKey
	WHERE w.BadTrafficFlag = 0
	AND w.DateKey BETWEEN ' + @StartDateKey + ' AND ' + @EndDateKey + '
	AND mvt.TestName = ''' + @MVTTest +'''
	GROUP BY pr.SubProfileName
	,mvt.TestName	
	,mvt.VariationGroupName
	,CASE '+@FirstSegment+' WHEN 4 THEN w.DateKey ELSE 99999 END
	,CASE '+@FirstSegment+'
			 WHEN 1 THEN b.Browser
			 WHEN 2 THEN cl.CBSAName
			 WHEN 3 THEN sl.CBSAName
			 WHEN 4 THEN d.DateDescription
			 WHEN 5 THEN d.DayName
			 WHEN 6 THEN os.OperatingSystem
			 WHEN 7 THEN p.Page
			 WHEN 8 THEN ts.TrafficSourceName
			 ELSE ''None Selected'' END 
	,CASE '+@SecondSegment+'
			 WHEN 1 THEN b.Browser
			 WHEN 2 THEN cl.CBSAName
			 WHEN 3 THEN sl.CBSAName
			 WHEN 4 THEN d.DateDescription
			 WHEN 5 THEN d.DayName
			 WHEN 6 THEN os.OperatingSystem
			 WHEN 7 THEN p.Page
			 WHEN 8 THEN ts.TrafficSourceName
			 ELSE ''None Selected'' END 

----------------------------------
--Put it all together
----------------------------------

SELECT fn.TestName
,fn.VariationGroupName
,fn.DateSort
,fn.GroupNumber
,fn.FirstSegment
,fn.SecondSegment
,fn.FixedVCount
,fn.CustomEventCount
,fn.CustomVCount
,ISNULL(vog.FixedVCount,0)									AS OriginalFixedVCount
,ISNULL(og.CustomEventCount,0)								AS OriginalCustomEventCount
,ISNULL(og.CustomVCount,0)									AS OriginalCustomVCount
FROM
	(
	SELECT X.TestName
	,X.VariationGroupName
	,X.DateSort
	,X.GroupNumber
	,X.FirstSegment
	,X.SecondSegment
	,SUM(X.FixedVCount)				AS FixedVCount
	,SUM(X.CustomEventCount)		AS CustomEventCount
	,SUM(X.CustomVCount)			AS CustomVCount
	FROM
			(
			SELECT  mc.TestName
				   ,mc.VariationGroupName
				   ,mc.DateSort
				   ,CASE WHEN mc.VariationGroupName LIKE ''%original%'' THEN 1 ELSE 0 END								AS GroupNumber
				   ,mc.FirstSegment
				   ,mc.SecondSegment
				   ,mc.FixedVCount																					AS FixedVCount
				   ,ISNULL(me.CustomEventCount,0)																	AS CustomEventCount
				   ,ISNULL(me.CustomVCount,0)																		AS CustomVCount
			FROM   RentPath.dbo.MVTVCount AS mc
			LEFT OUTER JOIN RentPath.dbo.MVTCustomEvents AS me
					ON mc.TestName = me.TestName
					   AND mc.VariationGroupName = me.VariationGroupName
					   AND mc.FirstSegment = me.FirstSegment
					   AND mc.SecondSegment = me.SecondSegment
					   AND mc.DateSort = me.DateSort

			UNION 

			SELECT DISTINCT TestName
			,a.VariationGroupName
			,CASE WHEN '+@FirstSegment+' = 4 THEN d.YMDID ELSE 99999 END					AS DateSort
			,CASE WHEN a.VariationGroupName LIKE ''%original%'' THEN 1 ELSE 0 END			AS GroupNumber
			,FirstSegment
			,SecondSegment
			,0 AS FixedVCount
			,0 AS CustomEventCount
			,0 AS CustomVCount
			FROM RentPath.dbo.MVTCustomEvents AS mt
			CROSS JOIN (SELECT DISTINCT VariationGroupName FROM RentPath.dbo.MVTCustomEvents) AS a
			LEFT OUTER JOIN DimensionalModelWeb.Dimension.Dates AS d
				ON mt.FirstSegment = d.DateDescription
			) AS X
	GROUP BY X.TestName
	,X.VariationGroupName
	,X.DateSort
	,X.GroupNumber
	,X.FirstSegment
	,X.SecondSegment
	) AS fn
LEFT OUTER JOIN 
				(
				SELECT TestName
				,VariationGroupName
				,FirstSegment
				,SecondSegment
				,FixedVCount
				FROM RentPath.dbo.MVTVCount
				WHERE VariationGroupName LIKE ''%original%''
				) AS vog
	ON fn.TestName = vog.TestName
	AND fn.FirstSegment = vog.FirstSegment
	AND fn.SecondSegment = vog.SecondSegment
LEFT OUTER JOIN 
				(
				SELECT TestName
				,VariationGroupName
				,FirstSegment
				,SecondSegment
				,CustomEventCount
				,CustomVCount
				FROM RentPath.dbo.MVTCustomEvents
				WHERE VariationGroupName LIKE ''%original%''
				) AS og
	ON fn.TestName = og.TestName
	AND fn.FirstSegment = og.FirstSegment
	AND fn.SecondSegment = og.SecondSegment
'
) AT APS_LINK


SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [Reports].[rpt_MVTCustomReport_v4]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Reports].[rpt_MVTCustomReport_v4]
(@ProfileKey INT
,@MVTTest VARCHAR(255) 
,@StartDate DATETIME
,@EndDate DATETIME
,@FirstSegment INT
,@SecondSegment INT
,@VSelection INT
,@SelectionKeys VARCHAR (4000)
,@PageSubKeys VARCHAR (4000)
)
/*************************************************************************************************
*
* Name:	Reports.rpt_MVTCustomReport
*
* Desc:	This report is for Scott Ehly.
*
* Test:	EXEC Reports.rpt_MVTCustomReport_v4 2,'VS Card 2 vs 3 CTA', '03/03/2017', '03/07/2017',0,0,0,'35,50','7,9,17,20,35,46,47,66,71,99,109,111,112,129,134,138,139,141,144,146,160,164,174,180,185,186,191,193,203,207,209,217,221,224,230,236,237,239,245,252,282,291,298,302,306,315,319,331,337,339,355,359,0,373,376,399,402,403,405,408,412,420,424,430,434,437,441,445,446,447,450,458,504,509,525,564,566,567,568,569,570,571,573'
*
* Note: 	
*	--------------
*	--V Selection
*	--------------
*	0--Visit
*	1--Visitor
*	-------------
*	--Segment
*	-------------
*	0--None
*	1--Browser
*	2--CBSA - CustIP
*	3--CBSA - Search
*	4--Date
*	5--Day Of Week
*	6--OperatingSystem
*	7--Page
*	8--TrafficSource
*
* Hist:	01	10/11/2016	Sarah Mims			Initial Version. Ticket # 23610
* Hist:	02	03/13/2017	Sarah Mims			Case # 01419211
*												1) changed visit count to VisitEventKey 
*												2) added join on subprofilename in final result selection
*												3) added subprofile parameter
*												4) added a CTAS for final results that I then select from using OPENQUERY because VS 2010 is a PITA
**************************************************************************************************/
AS

SET NOCOUNT ON
/*
DECLARE @MVTTest VARCHAR(255) 
,@StartDate DATETIME
,@EndDate DATETIME
,@StartDateKey INT
,@EndDateKey INT
,@FirstSegment INT
,@SecondSegment INT
,@VSelection INT
,@SelectionKeys VARCHAR (4000)
,@PageSubKeys VARCHAR (4000)

SET @MVTTest ='[ME] PDP 3D Floor Plans'
SET @StartDate = '10/01/2016'
SET @EndDate= '10/10/2016'
SET @FirstSegment = 1
SET @SecondSegment = 0
SET @VSelection = 0
SET @SelectionKeys = '0,1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ,30 ,31 ,32 ,33 ,34 ,35 ,36 ,37 ,38 ,39 ,40 ,41 ,42 ,43 ,44 ,45 ,46 ,47 ,48 ,49 ,50 ,51 ,52 ,53 ,54 ,55 ,56 ,57 ,58 ,59 ,60 ,61 ,62 ,63 ,64 ,65 ,66 ,67 ,68 ,69 ,70 ,71 ,72 ,73 ,74 ,75 ,76 ,77 ,78 ,79 ,80 ,81 ,82 ,83 ,84 ,85 ,86 ,87 ,88 ,89 ,90 ,91 ,92 ,93 ,94 ,95 ,96 ,97 ,98 ,99 ,100 ,101 ,102 ,103 ,104 ,105 ,106 ,107 ,108 ,109 ,110 ,111 ,112 ,113 ,114 ,115 ,116 ,117 ,118 ,119 ,120 ,121 ,122 ,123 ,124 ,125 ,126 ,127 ,128 ,129 ,130 ,131 ,132 ,133 ,134 ,135 ,136 ,137 ,138 ,139 ,140 ,141 ,142 ,143 ,144'
SET @PageSubKeys = '0,1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ,30 ,31 ,32 ,33 ,34 ,35 ,36 ,37 ,38 ,39 ,40 ,41 ,42 ,43 ,44 ,45 ,46 ,47 ,48 ,49 ,50 ,51 ,52 ,53 ,54 ,55 ,56 ,57 ,58 ,59 ,60 ,61 ,62 ,63 ,64 ,65 ,66 ,67 ,68 ,69 ,70 ,71 ,72 ,73 ,74 ,75 ,76 ,77 ,78 ,79 ,80 ,81 ,82 ,83 ,84 ,85 ,86 ,87 ,88 ,89 ,90 ,91 ,92 ,93 ,94 ,95 ,96 ,97 ,98 ,99 ,100 ,101 ,102 ,103 ,104 ,105 ,106 ,107 ,108 ,109 ,110 ,111 ,112 ,113 ,114 ,115 ,116 ,117 ,118 ,119 ,120 ,121 ,122 ,123 ,124 ,125 ,126 ,127 ,128 ,129 ,130 ,131 ,132 ,133 ,134 ,135 ,136 ,137 ,138 ,139 ,140 ,141 ,142 ,143 ,144 ,145 ,146 ,147 ,148 ,149 ,150 ,151 ,152 ,153 ,154 ,155 ,156 ,157 ,158 ,159 ,160 ,161 ,162 ,163 ,164 ,165 ,166 ,167 ,168 ,169 ,170 ,171 ,172 ,173 ,174 ,175 ,176 ,177 ,178 ,179 ,180 ,181 ,182 ,183 ,184 ,185 ,186 ,187 ,188 ,189 ,190 ,191 ,192 ,193 ,194 ,195 ,196 ,197 ,198 ,199 ,200 ,201 ,202 ,203 ,204 ,205 ,206 ,207 ,208 ,209 ,210 ,211 ,212 ,213 ,214 ,215 ,216 ,217 ,218 ,219 ,220 ,221 ,222 ,223 ,224 ,225 ,226 ,227 ,228 ,229 ,230 ,231 ,232 ,233 ,234 ,235 ,236 ,237 ,238 ,239 ,240 ,241 ,242 ,243 ,244 ,245 ,246 ,247 ,248 ,249 ,250 ,251 ,252 ,253 ,254 ,255 ,256 ,257 ,258 ,259 ,260 ,261 ,262 ,263 ,264 ,265 ,266 ,267 ,268 ,269 ,270 ,271 ,272 ,273 ,274 ,275 ,276 ,277 ,278 ,279 ,280 ,281 ,282 ,283 ,284 ,285 ,286 ,287 ,288 ,289 ,290 ,291 ,292 ,293 ,294 ,295 ,296 ,297 ,298 ,299 ,300 ,301 ,302 ,303 ,304 ,305 ,306 ,307 ,308 ,309 ,310 ,311 ,312 ,313 ,314 ,315 ,316 ,317 ,318 ,319 ,320 ,321 ,322 ,323 ,324 ,325 ,326 ,327 ,328 ,329 ,330 ,331 ,332 ,333 ,334 ,335 ,336 ,337 ,338 ,339 ,340 ,341 ,342 ,343 ,344 ,345 ,346 ,347 ,348 ,349 ,350 ,351 ,352 ,353 ,354 ,355 ,356 ,357 ,358 ,359 ,360 ,361 ,362 ,363 ,364 ,365 ,366 ,367 ,368 ,369 ,370 ,371 ,372 ,373 ,374 ,375 ,376 ,377 ,378 ,379 ,380 ,381 ,382 ,383 ,384 ,385 ,386 ,387 ,388 ,389 ,390 ,391 ,392 ,393 ,394 ,395 ,396 ,397 ,398 ,399 ,400 ,401 ,402 ,403 ,404 ,405 ,406 ,407 ,408 ,409 ,410 ,411 ,412 ,413 ,414 ,415 ,416 ,417 ,418 ,419 ,420 ,421 ,422 ,423 ,424 ,425 ,426 ,427 ,428 ,429 ,430 ,431 ,432 ,433 ,434 ,435 ,436 ,437 ,438 ,439 ,440 ,441 ,442 ,443 ,444 ,445 ,446 ,447 ,448 ,449 ,450 ,451 ,452 ,453 ,454 ,455 ,456 ,457 ,458 ,459 ,460 ,461 ,462 ,463 ,464 ,465 ,466 ,467 ,468 ,469 ,470 ,471 ,472 ,473 ,474 ,475 ,476 ,477 ,478 ,479 ,480 ,481 ,482 ,483 ,484 ,485 ,486 ,487 ,488 ,489 ,490 ,491 ,492 ,493 ,494 ,495 ,496 ,497 ,498 ,499 ,500 ,501 ,502 ,503 ,504 ,505 ,506 ,507 ,508 ,509 ,510 ,511 ,512 ,513 ,514 ,515 ,516'

*/

-------------------------------
--Declare and set variables
-------------------------------
DECLARE @StartDateKey INT
		,@EndDateKey INT
  
SET @StartDateKey = CAST(CONVERT(VARCHAR(8),@StartDate,112) AS INT)
SET @EndDateKey = CAST(CONVERT(VARCHAR(8),@EndDate,112) AS INT)

-------------------------------
--Drop the result set table
-------------------------------
BEGIN TRY
DROP TABLE RentPath.dbo.MVTResultSet
END TRY
BEGIN CATCH
END CATCH
-----------------------------------
--To improve performance - do all of the work on APS except the final table
-----------------------------------

EXEC
('
	------------------------------
	--Drop Selection and PageSub Tables
	------------------------------
	BEGIN TRY
		DROP TABLE RentPath.dbo.rpt_MVTSelectionList
	END TRY
	BEGIN CATCH
	END CATCH

	BEGIN TRY
		DROP TABLE RentPath.dbo.rpt_MVTPageSubList
	END TRY
	BEGIN CATCH
	END CATCH

	BEGIN TRY
		DROP TABLE RentPath.dbo.MVTVCount
	END TRY
	BEGIN CATCH
	END CATCH

	BEGIN TRY
		DROP TABLE RentPath.dbo.MVTCustomEvents
	END TRY
	BEGIN CATCH
	END CATCH

	BEGIN TRY
		DROP TABLE RentPath.dbo.MVTResultSet
	END TRY
	BEGIN CATCH
	END CATCH

	------------------------------
	--Create Selection Table
	------------------------------

	CREATE TABLE RentPath.dbo.rpt_MVTSelectionList
	  WITH (DISTRIBUTION = REPLICATE)
	  AS

		SELECT s.SelectionKey
		,s.Selection
		FROM
		(
		SELECT 
				SelectionKey = LTrim(RTrim(Convert(nvarchar(4000), SubString('''+@SelectionKeys+''', n.Number, CharIndex('','', '''+@SelectionKeys+''' + '','', n.Number) - n.Number))))
				,StartPosition = n.Number
				,GETDATE() AS DateCreated
			FROM
				Common.dbo.numbers AS n
			WHERE
					n.Number <= Convert(int, Len('''+@SelectionKeys+'''))
				AND	SUBSTRING('','' + '''+@SelectionKeys+''', n.Number, LEN('','')) = '',''
		) AS X
		JOIN DimensionalModelWeb.Conformed.Selection AS s
			ON X.SelectionKey = s.SelectionKey
	------------------------------
	--Create Selection Table
	------------------------------

	CREATE TABLE RentPath.dbo.rpt_MVTPageSubList
	  WITH (DISTRIBUTION = REPLICATE)
	  AS
		SELECT ps.PageSubKey
		,ps.PageSub
		FROM
			(
			SELECT 
					PageSubKey = LTrim(RTrim(Convert(nvarchar(4000), SubString('''+@PageSubKeys+''', n.Number, CharIndex('','', '''+@PageSubKeys+''' + '','', n.Number) - n.Number))))
					,StartPosition = n.Number
					,GETDATE() AS DateCreated
				FROM
					Common.dbo.numbers AS n
				WHERE
						n.Number <= Convert(int, Len('''+@PageSubKeys+'''))
					AND	SUBSTRING('','' + '''+@PageSubKeys+''', n.Number, LEN('','')) = '',''
			) AS X
		JOIN DimensionalModelWeb.Conformed.PageSub AS ps
			ON X.PageSubKey = ps.PageSubKey

	----------------------------------
	--Create ''fixed'' visit count by segment table
	----------------------------------
	CREATE TABLE RentPath.dbo.MVTVCount
	WITH (DISTRIBUTION = REPLICATE)
	AS

	SELECT pr.SubProfileName
	,mvt.TestName	
	,mvt.VariationGroupName
	,CASE '+@FirstSegment+' WHEN 4 THEN w.DateKey ELSE 99999 END AS DateSort
	,CASE '+@FirstSegment+'
			 WHEN 1 THEN b.Browser
			 WHEN 2 THEN cl.CBSAName
			 WHEN 3 THEN sl.CBSAName
			 WHEN 4 THEN d.DateDescription
			 WHEN 5 THEN d.DayName
			 WHEN 6 THEN os.OperatingSystem
			 WHEN 7 THEN p.Page
			 WHEN 8 THEN ts.TrafficSourceName
			 ELSE ''None Selected'' END AS FirstSegment	 
	,CASE '+@SecondSegment+'
			 WHEN 1 THEN b.Browser
			 WHEN 2 THEN cl.CBSAName
			 WHEN 3 THEN sl.CBSAName
			 WHEN 4 THEN d.DateDescription
			 WHEN 5 THEN d.DayName
			 WHEN 6 THEN os.OperatingSystem
			 WHEN 7 THEN p.Page
			 WHEN 8 THEN ts.TrafficSourceName
			 ELSE ''None Selected'' END AS SecondSegment
	,COUNT(DISTINCT CASE WHEN '+@VSelection+' = 0 THEN VisitEventKey ELSE VisitorKey END) AS FixedVCount
	FROM DimensionalModelWeb.Fact.WebEvent_VisitorHash AS w
	JOIN DimensionalModelWeb.Conformed.Browser AS b
		ON w.BrowserKey = b.BrowserKey
	JOIN DimensionalModelWeb.Conformed.Dates AS d
		ON w.DateKey = d.DateKey
	JOIN DimensionalModelWeb.Conformed.MultivariateTesting AS mvt
		ON w.MVTKey = mvt.MVTKey
	JOIN DimensionalModelWeb.Conformed.OperatingSystem AS os
		ON w.OperatingSystemKey = os.OperatingsystemKey
	JOIN DimensionalModelWeb.Conformed.Page AS p
		ON w.PageKey = p.PageKey
	JOIN DimensionalModelWeb.Conformed.Profile AS pr
		ON w.ProfileKey = pr.ProfileKey
	JOIN DimensionalModelWeb.Conformed.TrafficSource AS ts
		ON w.TrafficSourceKey = ts.TrafficSourceKey
	JOIN DimensionalModelWeb.Conformed.Location AS sl
		ON w.SearchLocationKey = sl.LocationKey
	JOIN DimensionalModelWeb.Conformed.Location AS cl
		ON w.CustIPLocationKey = cl.LocationKey
	WHERE w.BadTrafficFlag = 0
	AND w.DateKey BETWEEN ' + @StartDateKey + ' AND ' + @EndDateKey + '
	AND mvt.TestName = ''' + @MVTTest +'''
	AND w.ProfileKey = '''+@ProfileKey+'''
	GROUP BY pr.SubProfileName
	,mvt.TestName	
	,mvt.VariationGroupName
	,CASE '+@FirstSegment+' WHEN 4 THEN w.DateKey ELSE 99999 END
	,CASE '+@FirstSegment+'
			 WHEN 1 THEN b.Browser
			 WHEN 2 THEN cl.CBSAName
			 WHEN 3 THEN sl.CBSAName
			 WHEN 4 THEN d.DateDescription
			 WHEN 5 THEN d.DayName
			 WHEN 6 THEN os.OperatingSystem
			 WHEN 7 THEN p.Page
			 WHEN 8 THEN ts.TrafficSourceName
			 ELSE ''None Selected'' END 
	,CASE '+@SecondSegment+'
			 WHEN 1 THEN b.Browser
			 WHEN 2 THEN cl.CBSAName
			 WHEN 3 THEN sl.CBSAName
			 WHEN 4 THEN d.DateDescription
			 WHEN 5 THEN d.DayName
			 WHEN 6 THEN os.OperatingSystem
			 WHEN 7 THEN p.Page
			 WHEN 8 THEN ts.TrafficSourceName
			 ELSE ''None Selected'' END 

	----------------------------------
	--Create custom counts by segment table
	----------------------------------
	CREATE TABLE RentPath.dbo.MVTCustomEvents
	WITH (DISTRIBUTION = REPLICATE)
	AS
	SELECT pr.SubProfileName
	,mvt.TestName	
	,mvt.VariationGroupName
	,CASE '+@FirstSegment+' WHEN 4 THEN w.DateKey ELSE 99999 END AS DateSort
	,CASE '+@FirstSegment+'
			 WHEN 1 THEN b.Browser
			 WHEN 2 THEN cl.CBSAName
			 WHEN 3 THEN sl.CBSAName
			 WHEN 4 THEN d.DateDescription
			 WHEN 5 THEN d.DayName
			 WHEN 6 THEN os.OperatingSystem
			 WHEN 7 THEN p.Page
			 WHEN 8 THEN ts.TrafficSourceName
			 ELSE ''None Selected'' END AS FirstSegment	 
	,CASE '+@SecondSegment+'
			 WHEN 1 THEN b.Browser
			 WHEN 2 THEN cl.CBSAName
			 WHEN 3 THEN sl.CBSAName
			 WHEN 4 THEN d.DateDescription
			 WHEN 5 THEN d.DayName
			 WHEN 6 THEN os.OperatingSystem
			 WHEN 7 THEN p.Page
			 WHEN 8 THEN ts.TrafficSourceName
			 ELSE ''None Selected'' END AS SecondSegment
	,COUNT(DISTINCT CASE WHEN '+@VSelection+' = 0 THEN VisitEventKey ELSE VisitorKey END) AS CustomVCount
	,COUNT(*) AS CustomEventCount
	FROM DimensionalModelWeb.Fact.WebEvent_VisitorHash AS w
	JOIN DimensionalModelWeb.Conformed.Browser AS b
		ON w.BrowserKey = b.BrowserKey
	JOIN DimensionalModelWeb.Conformed.Dates AS d
		ON w.DateKey = d.DateKey
	JOIN DimensionalModelWeb.Conformed.MultivariateTesting AS mvt
		ON w.MVTKey = mvt.MVTKey
	JOIN DimensionalModelWeb.Conformed.OperatingSystem AS os
		ON w.OperatingSystemKey = os.OperatingsystemKey
	JOIN RentPath.dbo.rpt_MVTPageList AS p
		ON w.PageKey = p.PageKey
	JOIN RentPath.dbo.rpt_MVTPositionList AS pt
		ON w.PositionKey = pt.PositionKey
	JOIN DimensionalModelWeb.Conformed.Profile AS pr
		ON w.ProfileKey = pr.ProfileKey
	JOIN RentPath.dbo.rpt_MVTActionList AS a
		ON w.ActionKey = a.ActionKey
	JOIN RentPath.dbo.rpt_MVTPageSubList AS ps
		ON w.PageSubKey = ps.PageSubKey
	JOIN DimensionalModelWeb.Conformed.TrafficSource AS ts
		ON w.TrafficSourceKey = ts.TrafficSourceKey
	JOIN DimensionalModelWeb.Conformed.Location AS sl
		ON w.SearchLocationKey = sl.LocationKey
	JOIN DimensionalModelWeb.Conformed.Location AS cl
		ON w.CustIPLocationKey = cl.LocationKey
	JOIN RentPath.dbo.rpt_MVTSelectionList AS s
		ON w.SelectionKey = s.SelectionKey
	WHERE w.BadTrafficFlag = 0
	AND w.DateKey BETWEEN ' + @StartDateKey + ' AND ' + @EndDateKey + '
	AND mvt.TestName = ''' + @MVTTest +'''
	AND w.ProfileKey = '''+@ProfileKey+'''
	GROUP BY pr.SubProfileName
	,mvt.TestName	
	,mvt.VariationGroupName
	,CASE '+@FirstSegment+' WHEN 4 THEN w.DateKey ELSE 99999 END
	,CASE '+@FirstSegment+'
			 WHEN 1 THEN b.Browser
			 WHEN 2 THEN cl.CBSAName
			 WHEN 3 THEN sl.CBSAName
			 WHEN 4 THEN d.DateDescription
			 WHEN 5 THEN d.DayName
			 WHEN 6 THEN os.OperatingSystem
			 WHEN 7 THEN p.Page
			 WHEN 8 THEN ts.TrafficSourceName
			 ELSE ''None Selected'' END 
	,CASE '+@SecondSegment+'
			 WHEN 1 THEN b.Browser
			 WHEN 2 THEN cl.CBSAName
			 WHEN 3 THEN sl.CBSAName
			 WHEN 4 THEN d.DateDescription
			 WHEN 5 THEN d.DayName
			 WHEN 6 THEN os.OperatingSystem
			 WHEN 7 THEN p.Page
			 WHEN 8 THEN ts.TrafficSourceName
			 ELSE ''None Selected'' END 

----------------------------------
--Put it all together
----------------------------------
CREATE REMOTE TABLE RentPath.dbo.MVTResultSet
	AT
		(''Data Source = 172.24.214.35, 1433;
		User ID = biteam;
		Password = will our data be accurate?;''
		)
AS
SELECT fn.TestName
,fn.VariationGroupName
,fn.DateSort
,fn.GroupNumber
,fn.FirstSegment
,fn.SecondSegment
,fn.FixedVCount
,fn.CustomEventCount
,fn.CustomVCount
,CustomEventConv = CASE WHEN CAST(fn.CustomEventCount AS DECIMAL(15,2)) =  0 THEN 0 
					ELSE CAST(fn.CustomEventCount AS DECIMAL(15,2))/fn.FixedVCount END	
,CustomEventConvDelta = CASE WHEN CAST(fn.CustomEventCount AS DECIMAL(15,2)) = 0 THEN 0
							 WHEN CAST(og.CustomEventCount AS DECIMAL(15,2)) = 0 THEN 0
							 ELSE (CAST(fn.CustomEventCount AS DECIMAL(15,2))/fn.FixedVCount)-(CAST(og.CustomEventCount AS DECIMAL(15,2))/vog.FixedVCount) END
,CustomEventConvDiff = CASE WHEN CAST(fn.CustomEventCount AS DECIMAL(15,2)) =  0 THEN 0
							 WHEN CAST(og.CustomEventCount AS DECIMAL(15,2)) = 0 THEN 0
							 ELSE ((CAST(fn.CustomEventCount AS DECIMAL(15,2))/fn.FixedVCount)-(CAST(og.CustomEventCount AS DECIMAL(15,2))/vog.FixedVCount))/(CAST(og.CustomEventCount AS DECIMAL(15,2))/vog.FixedVCount) END 
,Binary = CASE WHEN CAST(fn.CustomVCount AS DECIMAL(15,2)) =  0 THEN 0 
					ELSE CAST(fn.CustomVCount AS DECIMAL(15,2))/fn.FixedVCount END	
,BinaryDelta = CASE WHEN CAST(fn.CustomVCount AS DECIMAL(15,2)) = 0 THEN 0
							 WHEN CAST(og.CustomVCount AS DECIMAL(15,2)) = 0 THEN 0
							 ELSE (CAST(fn.CustomVCount AS DECIMAL(15,2))/fn.FixedVCount)-(CAST(og.CustomVCount AS DECIMAL(15,2))/vog.FixedVCount) END
,BinaryDiff = CASE WHEN CAST(fn.CustomVCount AS DECIMAL(15,2)) =  0 THEN 0
							 WHEN CAST(og.CustomVCount AS DECIMAL(15,2)) = 0 THEN 0
							 ELSE ((CAST(fn.CustomVCount AS DECIMAL(15,2))/fn.FixedVCount)-(CAST(og.CustomVCount AS DECIMAL(15,2))/vog.FixedVCount))/(CAST(og.CustomVCount AS DECIMAL(15,2))/vog.FixedVCount) END                              

,ISNULL(vog.FixedVCount,0)									AS OriginalFixedVCount
,ISNULL(og.CustomEventCount,0)								AS OriginalCustomEventCount
,ISNULL(og.CustomVCount,0)									AS OriginalCustomVCount
FROM
	(
	SELECT X.TestName
	,X.VariationGroupName
	,X.DateSort
	,X.GroupNumber
	,X.FirstSegment
	,X.SecondSegment
	,SUM(X.FixedVCount)				AS FixedVCount
	,SUM(X.CustomEventCount)		AS CustomEventCount
	,SUM(X.CustomVCount)			AS CustomVCount
	FROM
			(
			SELECT  mc.TestName
				   ,mc.VariationGroupName
				   ,mc.DateSort
				   ,CASE WHEN mc.VariationGroupName LIKE ''%original%'' THEN 1 ELSE 0 END								AS GroupNumber
				   ,mc.FirstSegment
				   ,mc.SecondSegment
				   ,mc.FixedVCount																					AS FixedVCount
				   ,ISNULL(me.CustomEventCount,0)																	AS CustomEventCount
				   ,ISNULL(me.CustomVCount,0)																		AS CustomVCount
			FROM   RentPath.dbo.MVTVCount AS mc
			LEFT OUTER JOIN RentPath.dbo.MVTCustomEvents AS me
					ON mc.SubProfileName = me.SubProfileName
					   AND mc.TestName = me.TestName
					   AND mc.VariationGroupName = me.VariationGroupName
					   AND mc.FirstSegment = me.FirstSegment
					   AND mc.SecondSegment = me.SecondSegment
					   AND mc.DateSort = me.DateSort

			UNION 

			SELECT DISTINCT TestName
			,a.VariationGroupName
			,CASE WHEN '+@FirstSegment+' = 4 THEN d.YMDID ELSE 99999 END					AS DateSort
			,CASE WHEN a.VariationGroupName LIKE ''%original%'' THEN 1 ELSE 0 END			AS GroupNumber
			,FirstSegment
			,SecondSegment
			,0 AS FixedVCount
			,0 AS CustomEventCount
			,0 AS CustomVCount
			FROM RentPath.dbo.MVTCustomEvents AS mt
			CROSS JOIN (SELECT DISTINCT VariationGroupName FROM RentPath.dbo.MVTCustomEvents) AS a
			LEFT OUTER JOIN DimensionalModelWeb.Dimension.Dates AS d
				ON mt.FirstSegment = d.DateDescription
			) AS X
	GROUP BY X.TestName
	,X.VariationGroupName
	,X.DateSort
	,X.GroupNumber
	,X.FirstSegment
	,X.SecondSegment
	) AS fn
LEFT OUTER JOIN 
				(
				SELECT TestName
				,VariationGroupName
				,FirstSegment
				,SecondSegment
				,FixedVCount
				FROM RentPath.dbo.MVTVCount
				WHERE VariationGroupName LIKE ''%original%''
				) AS vog
	ON fn.TestName = vog.TestName
	AND fn.FirstSegment = vog.FirstSegment
	AND fn.SecondSegment = vog.SecondSegment
LEFT OUTER JOIN 
				(
				SELECT TestName
				,VariationGroupName
				,FirstSegment
				,SecondSegment
				,CustomEventCount
				,CustomVCount
				FROM RentPath.dbo.MVTCustomEvents
				WHERE VariationGroupName LIKE ''%original%''
				) AS og
	ON fn.TestName = og.TestName
	AND fn.FirstSegment = og.FirstSegment
	AND fn.SecondSegment = og.SecondSegment
'
) AT APS_LINK


-----------------------------------
--Get final results
-----------------------------------
SELECT TestName
,VariationGroupName
,DateSort
,GroupNumber
,FirstSegment
,SecondSegment
,FixedVCount
,CustomEventCount
,CustomVCount
,CustomEventConv
,CustomEventConvDelta
,CustomEventConvDiff
,Binary
,BinaryDelta
,BinaryDiff
,OriginalFixedVCount
,OriginalCustomEventCount
,OriginalCustomVCount
FROM RentPath.dbo.MVTResultSet


SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [Reports].[rpt_NationalAccountPerformance]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/*******************************************************************************************
* Name:	Reports.rpt_NationalAccountPerformance
* ------------------------------------------------------------------------------------------
* Desc:	pulls data for NationalAccountPerformance report
* ------------------------------------------------------------------------------------------
* Test:	EXEC Reports.rpt_NationalAccountPerformance 6461, '01-01-2016', '01-31-2016'
EXEC Reports.rpt_NationalAccountPerformance 6020, '01-01-2016', '01-31-2016','tx'
EXEC Reports.rpt_NationalAccountPerformance 6020, '01-01-2016', '01-31-2016','0' --924 rows
EXEC Reports.rpt_NationalAccountPerformance 6020, '01-01-2016', '01-31-2016','tx'  -- 203 rows
EXEC Reports.rpt_NationalAccountPerformance 12661, '01-01-2016', '01-31-2016','0'
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist:	01	03/30/2016	Brian Trembley		Ticket 22555; initial version
* Hist: 02  05/03/2016  Richard Chen		Ticket 22901  Blannk value for CityTierLPP due to incorrect join
                                                          conditon with  #LPPbyCityWithTier CityTier 
* Hist: 03	11/03/2016		Bob Langley			Ticket 24212 - Changed to add MissedCalls to leads (where does connectedcalls)
												Also, in testing, found that leads were doubled.  Was using 
												AGRentCombinedDimensionListings, which has two rows, so join doubled leads. Took 
												out join. Used MarketName from Dim.Listings.
* Hist:	04	05/12/2017	Kimberley Morrow	Case #01472560; multiple records are created when a property has two tiers in the same month causing an issue with CPL
											Modified RDL
********************************************************************************************/

CREATE PROCEDURE [Reports].[rpt_NationalAccountPerformance] (
	 @MgtCoID INT
	,@StartDate DATETIME
	,@EndDate DATETIME
	,@StateCD VARCHAR(10) = '0' )
AS
BEGIN

-- for testing
--DECLARE @MgtCoID INT = 7671 -- 6461
--	,@StartDate datetime = '01-01-2016'
--	,@EndDate datetime = '01-31-2016'

BEGIN TRY
	drop table #CostByProperty
END TRY
BEGIN CATCH
END CATCH


SELECT  LEFT(i.IssuebeginYMDID,6) yearmonth
        ,dl.PropertyIDAG
        ,SUM(i.InvoiceSubtotal) MonthlyCost
INTO    #CostByProperty
FROM    Max.Mart.MaxInvoice i
INNER JOIN ApartmentGuide.dimension.listingmarket dlm ON i.clientid = dlm.clientcode
INNER JOIN RentPath.dimension.listings dl ON dlm.listingid = dl.listingid
WHERE    i.issueBeginYMDID BETWEEN cast(convert(varchar(8),@StartDate,112) AS int) AND cast(convert(varchar(8),@EndDate,112) AS int)
			AND dl.MgtCoIDAG = @MgtCoID
            AND i.invoiceStatusID = 'Finalized'
            AND i.InvoiceTypeID = 'Invoice'
GROUP    BY LEFT(i.IssuebeginYMDID,6)
            ,dl.PropertyIDAG

BEGIN TRY
	drop table #LPPbyCityWithTier
END TRY
BEGIN CATCH
END CATCH

select
	dl.PropertyCity
	,dl.PropertyState
	,ml.YMDID/100 YM
	,CASE WHEN ml.[StatusIDAG] = 1 THEN ml.[PlacementTierAG] ELSE ml.[PlacementTierRent] END as PlacementTier
	,SUM(ml.[EmailLeadsAG]+ml.[PhoneLeadsAG] + ml.[MissedCallsAG]) / COUNT(DISTINCT ml.PropertyIDAG ) as LPPAG		--Ticket 24212  added missed calls to PhoneLeads
	,SUM(ml.[EmailLeadsRent]+ml.[PhoneLeadsRent] + ml.[MissedCallsRent]) / COUNT(DISTINCT ml.PropertyIDRent) as LPPRent		--Ticket 24212  added missed calls to PhoneLeads
	,SUM(ml.AllLeads) / COUNT(DISTINCT ISNULL(ml.PropertyIDAG,ml.PropertyIDRent)) as LPPCombined
into #LPPbyCityWithTier
from RentPath.dimension.listings dl
join RentPath.mart.listings ml on ml.propertyidAG = dl.propertyidAG
where ml.YMDID BETWEEN cast(convert(varchar(8),@StartDate,112) AS int) AND cast(convert(varchar(8),@EndDate,112) AS int)
	and (ml.[StatusIDAG] = 1 or ml.[StatusIDRent] = 1)
group by 
	dl.PropertyCity
	,dl.PropertyState
	,ml.YMDID/100
	,CASE WHEN ml.[StatusIDAG] = 1 THEN ml.[PlacementTierAG] ELSE ml.[PlacementTierRent] END


BEGIN TRY
	drop table #LPPbyCity
END TRY
BEGIN CATCH
END CATCH


select
	dl.PropertyCity
	,dl.PropertyState
	,ml.YMDID/100 YM
	,SUM(ml.[EmailLeadsAG]+ml.[PhoneLeadsAG] + ml.[MissedCallsAG]) / COUNT(DISTINCT ml.PropertyIDAG ) as LPPAG		--Ticket 24212  added missed calls to PhoneLeads
	,SUM(ml.[EmailLeadsRent]+ml.[PhoneLeadsRent] + ml.[MissedCallsRent]) / COUNT(DISTINCT ml.PropertyIDRent) as LPPRent		--Ticket 24212  added missed calls to PhoneLeads
	,SUM(ml.AllLeads) / COUNT(DISTINCT ISNULL(ml.PropertyIDAG,ml.PropertyIDRent)) as LPPCombined
into #LPPbyCity
from RentPath.dimension.listings dl
join RentPath.mart.listings ml on ml.PropertyIDAG = dl.PropertyIDAG
where ml.YMDID BETWEEN cast(convert(varchar(8),@StartDate,112) AS int) AND cast(convert(varchar(8),@EndDate,112) AS int)
	and (ml.[StatusIDAG] = 1 or ml.[StatusIDRent] = 1 )
group by 
	dl.PropertyCity
	,dl.PropertyState
	,ml.YMDID/100
	

SELECT YM,MarketName,PropertyName,PropertyCity,PropertyState,TotalInvoiced,Leads,CPL,CityAvgLPP,CityTierLPP,PropertyTier,IsAG,IsRent	
	,CASE WHEN CityAvgLPP = 0 THEN CAST(1 AS NUMERIC(10,2))
		ELSE CAST( (Leads*1.0) / CityAvgLPP - 1  AS NUMERIC(10,2))
		END AS LeadChgPcnt
	,CASE WHEN IsAG = 1 AND IsRent = 1 THEN 'Joint'
		  WHEN IsAG = 1 THEN 'AG only'
		  WHEN IsRent = 1 THEN 'Rent only'
		  ELSE 'Neither'
		  END AS Sites
FROM (
	SELECT
		ml.YMDID/100 YM 
		,dl.MarketName
		,dl.PropertyName
		,City.PropertyCity
		,City.PropertyState
		,ISNULL(MAX(CBP.MonthlyCost),0) AS TotalInvoiced
		,SUM(ml.AllLeads) Leads
		,CAST(CASE WHEN SUM(ml.AllLeads)= 0 THEN ISNULL(MAX(CBP.MonthlyCost),0)
				ELSE ISNULL(MAX(CBP.MonthlyCost),0)/SUM(ml.AllLeads)
				END AS NUMERIC(10,2)) CPL

		--,City.LPP as CityAvgLPP
		,CASE 
			WHEN ml.StatusIDAG = 1 AND ml.StatusIDRent = 1 THEN City.LPPCombined
			WHEN ml.StatusIDAG = 1 THEN City.LPPAG
			WHEN ml.StatusIDRent = 1 THEN City.LPPRent
		END AS CityAvgLPP

		--,CASE WHEN City.LPP = 0 THEN 1
		--	ELSE CAST(SUM(ml.AllLeads)*1.0 / City.LPP - 1  as numeric(10,2))
		--	END as LeadChgPcnt

		--,CityTier.LPP as CityTierLPP	
		,CASE 
			WHEN ml.StatusIDAG = 1 AND ml.StatusIDRent = 1 THEN CityTier.LPPCombined
			WHEN ml.StatusIDAG = 1 THEN CityTier.LPPAG
			WHEN ml.StatusIDRent = 1 THEN CityTier.LPPRent
		END AS CityTierLPP

		,CASE WHEN ml.StatusIDAG = 1 AND ml.PlacementTierAG = 5 THEN 'Diamond'
			 WHEN ml.StatusIDAG = 1 AND ml.PlacementTierAG =10 THEN 'Platinum'
			 WHEN ml.StatusIDAG = 1 AND ml.PlacementTierAG =20 THEN 'Gold'
			 WHEN ml.StatusIDAG = 1 AND ml.PlacementTierAG =30 THEN 'Silver' 
			 WHEN ml.StatusIDAG = 0 AND ml.PlacementTierRent = 5 THEN 'Diamond'
			 WHEN ml.StatusIDAG = 0 AND ml.PlacementTierRent =10 THEN 'Platinum'
			 WHEN ml.StatusIDAG = 0 AND ml.PlacementTierRent =20 THEN 'Gold'
			 WHEN ml.StatusIDAG = 0 AND ml.PlacementTierRent =30 THEN 'Silver'
			 ELSE 'NoTier'
			 END AS PropertyTier
		,MAX(ml.[StatusIDAG]) AS IsAG
		,MAX(ml.[StatusIDRent]) AS IsRent
	FROM RentPath.dimension.listings dl
	LEFT JOIN RentPath.mart.listings ml ON ml.PropertyIDAG = dl.PropertyIDAG
	LEFT JOIN #CostByProperty CBP ON CBP.PropertyIDAG = dl.PropertyIDAG AND CBP.yearmonth = ml.YMDID/100
	LEFT JOIN #LPPbyCity City ON City.PropertyCity = dl.PropertyCity AND City.PropertyState = dl.PropertyState AND City.YM = ml.YMDID/100
	LEFT JOIN #LPPbyCityWithTier CityTier ON CityTier.PropertyCity = dl.PropertyCity AND CityTier.PropertyState = dl.PropertyState 
	    AND CityTier.YM = ml.YMDID/100 
		AND CityTier.PlacementTier = --22901 ml.PlacementTierAG
		(	CASE 
			WHEN ml.StatusIDAG = 1 AND ml.StatusIDRent = 1 THEN ml.placementTierAG
			WHEN ml.StatusIDAG = 1 THEN ml.placementTierAG
			WHEN ml.StatusIDRent = 1 THEN ml.placementTierRent
		END)
	WHERE dl.MgtCoIDAG= @MgtCoID
		AND ml.YMDID BETWEEN CAST(CONVERT(VARCHAR(8),@StartDate,112) AS INT) AND CAST(CONVERT(VARCHAR(8),@EndDate,112) AS INT)
		AND (ml.[StatusIDAG] = 1 OR ml.[StatusIDRent] = 1 )
		AND (dl.[StatusIDAG] = 1 OR dl.[StatusIDRent] = 1 ) -- must be currently active
		
	GROUP BY 
		dl.PropertyName
		,dl.MarketName
		,ml.YMDID/100
		,City.PropertyCity
		,City.PropertyState
		,CASE 
			WHEN ml.StatusIDAG = 1 AND ml.StatusIDRent = 1 THEN City.LPPCombined
			WHEN ml.StatusIDAG = 1 THEN City.LPPAG
			WHEN ml.StatusIDRent = 1 THEN City.LPPRent
		END
		,CASE 
			WHEN ml.StatusIDAG = 1 AND ml.StatusIDRent = 1 THEN CityTier.LPPCombined
			WHEN ml.StatusIDAG = 1 THEN CityTier.LPPAG
			WHEN ml.StatusIDRent = 1 THEN CityTier.LPPRent
		END
		,CASE WHEN ml.StatusIDAG = 1 AND ml.PlacementTierAG = 5 THEN 'Diamond'
			 WHEN ml.StatusIDAG = 1 AND ml.PlacementTierAG =10 THEN 'Platinum'
			 WHEN ml.StatusIDAG = 1 AND ml.PlacementTierAG =20 THEN 'Gold'
			 WHEN ml.StatusIDAG = 1 AND ml.PlacementTierAG =30 THEN 'Silver' 
			 WHEN ml.StatusIDAG = 0 AND ml.PlacementTierRent = 5 THEN 'Diamond'
			 WHEN ml.StatusIDAG = 0 AND ml.PlacementTierRent =10 THEN 'Platinum'
			 WHEN ml.StatusIDAG = 0 AND ml.PlacementTierRent =20 THEN 'Gold'
			 WHEN ml.StatusIDAG = 0 AND ml.PlacementTierRent =30 THEN 'Silver'
			 ELSE 'NoTier'
			 END
	) InnerQuery
WHERE ( PropertyState  =@StateCD  OR @StateCD='0')
ORDER BY YM, PropertyName

END





GO
/****** Object:  StoredProcedure [Reports].[rpt_PayPerLeaseLeadsForMatching]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Reports].[rpt_PayPerLeaseLeadsForMatching] (
    @StartYMDID INT
   ,@EndYMDID INT
   ,@MgtCoID INT
   ,@LeadSite INT --0 = Both; 1 = AG; 2 = Rent
   ,@IsPayPerLease TINYINT = 1
   ,@sortbypropname TINYINT = 0
   )
	
/***************************************************************************************************
* Name:	Reports.rpt_PayPerLeaseLeadsForMatching
* --------------------------------------------------------------------------------------------------
* Desc:	Used to attempt to match our leads to a property's rent rolls
* --------------------------------------------------------------------------------------------------
* Test:	EXEC Reports.rpt_PayPerLeaseLeadsForMatching 20160101,20160630,6017,1,0
* --------------------------------------------------------------------------------------------------
* Note: Be VERY careful if you need to make changes to that long "Replace" line. I recommend
*		copying the current line before you do so, so you can fall back.
* --------------------------------------------------------------------------------------------------
* Hist:	01	06/07/2010	David McFarland		Initial Version
*		02	08/12/2010	David McFarland		Added logic to limit it to only show leads for
*											listings that currently have the pay per lease
*											upsell set. This is per Jeff Anop, and is part of
*											Issue # 1415
*		03	08/26/2010	David McFarland		Added LeadID, as the end user wanted a unique
*											identifier, and was creating her own after the fact
*		04	10/12/2010	David McFarland		Added a flag to show whether pay per lease upsell was
*											active on the day of the lead, and removed the filter
*											that only showed leads for properties that currently
*											have the pay per lease flag set to true.
*		05	11/19/2010	David McFarland		Added FirstDayActive and DaysActiveInDateRange
*		06	03/10/2011	Mary Pollard		Added PropertyCity and PropertyState. Ticket #4023 from Ahreum
*		07	03/28/2011	David McFarland		Enlarged the name columns to handle some of the more lengthy
*											company names tied to phone calls
*       08  04/26/2011  John Cox            Added the ability to pull "All" managment companies per ticket #4519
*       09  04/26/2011  John Cox            Added the ability to pull "All" managment companies per ticket #4519
*       10  05/27/2011  Mary Pollard        Added PropertyID per ticket #5066
*       11  06/15/2011  Mary Pollard        Added "ReverseLookupSource" field
*       12  06/22/2011  Mary Pollard        Added "LeadSource" field per ticket #5410
*       13  06/22/2011  Mary Pollard        Added dup parameters because the proc was not returning through the proc
*                                              but returned immediately as a script. Parameter sniffing was suspected
*                                              and confirmed. Setting the parameters withing the proc resolved the issue.
*       14  07/20/2011  Mary Pollard        Changed FullName to be the Phonelookup name when its there, else FullName from callsApartmentGuide
*       15  07/21/2011  Richard Chen        Chage y.firstname, y.lastname to use the fullname in change history 14
*       16  07/22/2011  Richard Chen        Per Ticket 5815, This report should include both estara and infutor reverse lookup.
*       17  07/27/2011  Clinton Woody       Per Ticket 5867, create estimated time for calls based upon callload hour -1
											has to be evaluated on callenddate time
*       18  08/22/2011  Richard Chen        Ticket6126. Match email phone with reverse lookup.	
*		19	11/03/2011  Shetal Gandhi		Ticket 6992 - Changed VARCHAR to NVARCHAR in entire stored proc
*		20	12/14/2011  Brian Trembley		Ticket 7410 - adding data mining lead types
*		20	12/15/2011  Brian Trembley		Ticket 7433 - several changes, and make lookup it's own lead
*		21	01/31/2012	David McFarland		Modified to handle running for non-pay per lease customers as well, via a
*												new parameter. This is per ticket #7971
*       22  02/05/2014  Bob Langley			Ticket 14532 - Modified to add the Email text as a column and the call URL column to the end as a link so that the user can listen to the phone call
											Both appear only if the Sort On Property Name parameter is set to Yes.  Otherwise they are hidden in the report.
*		23	10/10/2016	Colleen Rocks		Ticket 24392; rewrite to include Rent leads (hit RentPath tables instead of ApartmentGuide); created new filter for lead website
*											also commented out callminer section as it no longer applies; also added propertyaddress field
***************************************************************************************************/
AS 
SET NOCOUNT ON;
/*
--test:
DECLARE @StartYMDID INT = 20160901
   ,@EndYMDID INT = 20161001
   ,@MgtCoID INT = 6017
   ,@IsPayPerLease TINYINT = 1
   ,@sortbypropname TINYINT = 0
*/

---------------------------
/*Declare and set variables 
to avoid parameter sniffing*/
---------------------------
DECLARE @StartYMDID_AvoidSniffer INT
   ,@EndYMDID_AvoidSniffer INT
   ,@MgtCoID_AvoidSniffer INT

SET @StartYMDID_AvoidSniffer = @StartYMDID
SET @EndYMDID_AvoidSniffer = @EndYMDID
SET @MgtCoID_AvoidSniffer = @MgtCoID


SELECT DISTINCT
        l.MgtCoIDAG AS MgtCoID
INTO    #MgtCoIDs
FROM    RentPath.Dimension.Listings AS l
WHERE   (l.StatusIDAG = 1
         OR l.StatusIDRent = 1)
        AND l.UpsellPayPerLease = CASE WHEN @IsPayPerLease = 1 THEN 1
                                       ELSE l.UpsellPayPerLease
                                  END
        AND (@MgtCoID_AvoidSniffer = -1
             OR @MgtCoID_AvoidSniffer = l.MgtCoIDAG);

---------------------------
/*Get the first day active 
for each PPL Listing*/
---------------------------
SELECT  ListingID
       ,FirstDayActive = CAST(CAST(MIN(YMDID) AS NVARCHAR(8)) AS DATETIME)
INTO    #FirstDay
FROM    RentPath.Mart.Listings
WHERE   UpsellPayPerLease = CASE WHEN @IsPayPerLease = 1 THEN 1
                                 ELSE UpsellPayPerLease
                            END
        AND YMDID BETWEEN @StartYMDID_AvoidSniffer
                  AND     @EndYMDID_AvoidSniffer
        AND (StatusIDAG = 1
             OR StatusIDRent = 1)
GROUP BY ListingID

CREATE UNIQUE INDEX uidx#ListingID ON #FirstDay ( ListingID )

---------------------------
/*Get # of Days active as a 
PPL listing in date range*/
---------------------------
SELECT  ListingID
       ,DaysActiveInDateRange = ISNULL(SUM(UpsellPayPerLease),0)
INTO    #DaysActive
FROM    RentPath.Mart.Listings
WHERE   YMDID BETWEEN @StartYMDID_AvoidSniffer
              AND     @EndYMDID_AvoidSniffer
GROUP BY ListingID

CREATE UNIQUE INDEX uidx#ListingID ON #DaysActive ( ListingID )

---------------------------
/*Get email leads*/
---------------------------
SELECT  LeadID = CAST(e.LeadID AS NVARCHAR(50))
       ,MgtCoID = l.MgtCoIDAG
       ,MgtCoName = CAST(l.MgtCoNameAG AS NVARCHAR(50))
       ,ListingID = l.ListingID
       ,PropertyID = l.PropertyIDAG
	   ,ClientID = l.SFPropertyAcctID
       ,PropertyName = CAST(l.PropertyName AS NVARCHAR(100))
	   ,PropertyAddress = CAST(l.PropertyAddress AS NVARCHAR(200))
       ,PropertyCity = CAST(l.PropertyCity AS NVARCHAR(50))
       ,PropertyState = CAST(l.PropertyState AS NVARCHAR(50))
       ,e.Website
       ,FirstName = CAST(e.FirstName AS NVARCHAR(255))
       ,LastName = CAST(e.LastName AS NVARCHAR(255))
       ,FullName = CAST(e.FirstName + CASE WHEN e.FirstName IS NULL
                                                OR e.LastName IS NULL THEN ''
                                           ELSE ' '
                                      END + e.LastName AS NVARCHAR(255))
       ,ContactMethod = CAST('Email' AS NVARCHAR(50))
       ,LeadSource = CAST(e.Source AS NVARCHAR(50))
       ,ContactDate = e.WhenEntered
       ,estContactDate = e.WhenEntered
       ,Email = CAST(e.Email AS NVARCHAR(255))
       ,Phone = CAST(e.DayPhone AS NVARCHAR(50))
       ,IsPayPerLease = m.UpsellPayPerLease
       ,ReverseLookupSource = ''
       ,EmailText = CONVERT(VARCHAR(2500),e.Comments)
       ,AudioURL = CONVERT(VARCHAR(500),NULL)
INTO    #x
FROM    RentPath.Dimension.Listings AS l
JOIN    RentPath.Mart.EmailLeads AS e
        ON l.ListingID = e.ListingID
JOIN    RentPath.Mart.Listings AS m
        ON l.ListingID = m.ListingID
           AND e.YMDID = m.YMDID
JOIN    #MgtCoIDs AS MG
        ON l.MgtCoIDAG = MG.MgtCoID
WHERE   e.YMDID BETWEEN @StartYMDID_AvoidSniffer
                AND     @EndYMDID_AvoidSniffer
		AND (CASE WHEN @LeadSite = 1 THEN 'AG'
				ELSE 'Rent' END = e.Website
			OR @LeadSite = 0);

---------------------------
/*Use email Day Phone to match 
reverse lookup*/
---------------------------
INSERT  INTO #x
        SELECT  LeadID = CAST(e.LeadID AS NVARCHAR(50))
               ,MgtCoID = l.MgtCoIDAG
               ,MgtCoName = CAST(l.MgtCoNameAG AS NVARCHAR(50))
               ,ListingID = l.ListingID
               ,PropertyID = l.PropertyIDAG
               ,ClientID = l.SFPropertyAcctID
			   ,PropertyName = CAST(l.PropertyName AS NVARCHAR(100))
			   ,PropertyAddress = CAST(l.PropertyAddress AS NVARCHAR(200))
               ,PropertyCity = CAST(l.PropertyCity AS NVARCHAR(50))
               ,PropertyState = CAST(l.PropertyState AS NVARCHAR(50))
               ,e.Website
               ,FirstName = CAST(p.FirstName AS NVARCHAR(255))
               ,LastName = CAST(p.LastName AS NVARCHAR(255))
               ,FullName = CAST(p.FirstName + CASE WHEN p.FirstName IS NULL
                                                        OR p.LastName IS NULL THEN ''
                                                   ELSE ' '
                                              END + p.LastName AS NVARCHAR(255))
               ,ContactMethod = 'EmailDayPhoneLookup'
               ,LeadSource = CAST(e.Source AS NVARCHAR(50))
               ,ContactDate = e.WhenEntered
               ,estContactDate = e.WhenEntered
               ,Email = CAST(e.Email AS NVARCHAR(255))
               ,Phone = CAST(e.DayPhone AS NVARCHAR(50))
               ,IsPayPerLease = m.UpsellPayPerLease
               ,ReverseLookupSource = ''
               ,EmailText = ''
               ,AudioURL = NULL
        FROM    RentPath.Dimension.Listings AS l
        JOIN    RentPath.Mart.EmailLeads AS e
                ON l.ListingID = e.ListingID
        JOIN    RentPath.Mart.Listings AS m
                ON l.ListingID = m.ListingID
                   AND e.YMDID = m.YMDID
        JOIN    #MgtCoIDs AS MG
                ON l.MgtCoIDAG = MG.MgtCoID
        JOIN    ApartmentGuide.Dimension.PhoneLookup AS p
                ON REPLACE(REPLACE(REPLACE(e.DayPhone,'(',''),')',''),'-','') = RIGHT(p.PhoneNumber,10)
        WHERE   e.YMDID BETWEEN @StartYMDID_AvoidSniffer
                        AND     @EndYMDID_AvoidSniffer
                AND p.FirstName IS NOT NULL
				AND (CASE WHEN @LeadSite = 1 THEN 'AG'
				ELSE 'Rent' END = e.Website
					OR @LeadSite = 0);

INSERT  INTO #x
        SELECT  LeadID = CAST(e.LeadID AS NVARCHAR(50))
               ,MgtCoID = l.MgtCoIDAG
               ,MgtCoName = CAST(l.MgtCoNameAG AS NVARCHAR(50))
               ,ListingID = l.ListingID
               ,PropertyID = l.PropertyIDAG
               ,ClientID = l.SFPropertyAcctID               
			   ,PropertyName = CAST(l.PropertyName AS NVARCHAR(100))
			   ,PropertyAddress = CAST(l.PropertyAddress AS NVARCHAR(200))
               ,PropertyCity = CAST(l.PropertyCity AS NVARCHAR(50))
               ,PropertyState = CAST(l.PropertyState AS NVARCHAR(50))
               ,e.Website
               ,FirstName = CAST(p.FirstName AS NVARCHAR(255))
               ,LastName = CAST(p.LastName AS NVARCHAR(255))
               ,FullName = CAST(p.FirstName + CASE WHEN p.FirstName IS NULL
                                                        OR p.LastName IS NULL THEN ''
                                                   ELSE ' '
                                              END + p.LastName AS NVARCHAR(255))
               ,ContactMethod = 'EmailNightPhoneLookup'
               ,LeadSource = CAST(e.Source AS NVARCHAR(50))
               ,ContactDate = e.WhenEntered
               ,estContactDate = e.WhenEntered
               ,Email = CAST(e.Email AS NVARCHAR(255))
               ,Phone = CAST(e.DayPhone AS NVARCHAR(50))
               ,IsPayPerLease = m.UpsellPayPerLease
               ,ReverseLookupSource = ''
               ,EmailText = ''
               ,AudioURL = NULL
        FROM    RentPath.Dimension.Listings AS l
        JOIN    RentPath.Mart.EmailLeads AS e
                ON l.ListingID = e.ListingID
        JOIN    RentPath.Mart.Listings AS m
                ON l.ListingID = m.ListingID
                   AND e.YMDID = m.YMDID
        JOIN    #MgtCoIDs AS MG
                ON l.MgtCoIDAG = MG.MgtCoID
        JOIN    ApartmentGuide.Dimension.PhoneLookup AS p
                ON REPLACE(REPLACE(REPLACE(e.NightPhone,'(',''),')',''),'-','') = RIGHT(p.PhoneNumber,10)
        WHERE   e.YMDID BETWEEN @StartYMDID_AvoidSniffer
                        AND     @EndYMDID_AvoidSniffer
                AND p.FirstName IS NOT NULL
				AND (CASE WHEN @LeadSite = 1 THEN 'AG'
				ELSE 'Rent' END = e.Website
					OR @LeadSite = 0);

---------------------------
/*Get phone leads*/
---------------------------
INSERT  INTO #x
        SELECT  LeadID = CAST(c.CallId AS NVARCHAR(50))
               ,MgtCoID = l.MgtCoIDAG
               ,MgtCoName = l.MgtCoNameAG
               ,ListingID = l.ListingID
               ,PropertyID = l.PropertyIDAG
               ,ClientID = l.SFPropertyAcctID
               ,PropertyName = l.PropertyName
			   ,PropertyAddress = l.PropertyAddress
               ,PropertyCity = l.PropertyCity
               ,PropertyState = l.PropertyState
               ,c.Website
               ,FirstName = p.FirstName
               ,LastName = p.LastName
               ,FullName = ISNULL(p.FirstName,'') + ' ' + ISNULL(p.LastName,'')
               ,ContactMethod = 'Call'
               ,LeadSource = c.CallType
               ,ContactDate = c.CallStartDateTime
               ,estContactDate = CASE WHEN DATEPART(HOUR,c.CallEndDateTime) <> c.CallLoadHour THEN DATEADD(HOUR,CallLoadHour - DATEPART(HOUR,c.CallEndDateTime),c.CallEndDateTime)
                                      ELSE c.CallStartDateTime
                                 END
               ,Email = ''
               ,Phone = c.CallerPhoneNumber
               ,IsPayPerLease = m.UpsellPayPerLease
               ,ReverseLookupSource = CASE WHEN p.PhoneNumber IS NOT NULL THEN 'I'
                                           ELSE 'E'
                                      END
               ,EmailText = ''
               ,AudioURL = c.AudioURL
        FROM    RentPath.Dimension.Listings AS l
        JOIN    RentPath.Mart.PhoneLeads AS c
                ON l.ListingID = c.ListingID
        JOIN    RentPath.Mart.Listings AS m
                ON l.ListingID = m.ListingID
                   AND c.YMDID = m.YMDID
        JOIN    #MgtCoIDs AS MG
                ON l.MgtCoIDAG = MG.MgtCoID
        LEFT JOIN ApartmentGuide.Dimension.PhoneLookup AS p
                ON c.CallerPhoneNumber = p.PhoneNumber
        WHERE   c.YMDID BETWEEN @StartYMDID_AvoidSniffer
                        AND     @EndYMDID_AvoidSniffer
				AND (CASE WHEN @LeadSite = 1 THEN 'AG'
				ELSE 'Rent' END = c.Website
					OR @LeadSite = 0);


UPDATE  #x
SET     Phone = REPLACE(REPLACE(REPLACE(REPLACE(Phone,'(',''),')',''),'-',''),' ','')

/*--10/10/2016; CR commenting out this section
--as latest date entered was 05/31/2013

---------------------------
/*Get data mining leads, 12/14/2011 
trial of additional data pulled 
by Jennifer*/
---------------------------

-- drop table #datamine
-- Clean up manually entered data
--SELECT * INTO #datamine FROM ORACLEAPTG..COMMON.JTEMP_PHONE -- orig table
SELECT  *
INTO    #datamine
FROM    ORACLEAPTG..COMMON.PAYPERLEASE_PHONE

UPDATE  #datamine
SET     ALTERNATE = REPLACE(REPLACE(REPLACE(REPLACE(ALTERNATE,'(',''),')',''),'-',''),' ','')

UPDATE  #datamine
SET     ALTERNATE = SUBSTRING(ALTERNATE,2,LEN(ALTERNATE))
WHERE   LEFT(ALTERNATE,1) = '1'

UPDATE  #datamine
SET     ALTERNATE = LEFT(ALTERNATE,10)

UPDATE  #datamine
SET     ALTERNATE = ''
WHERE   ISNUMERIC(ALTERNATE) = 0


CREATE CLUSTERED INDEX cidx#LeadID ON #x(LeadID)
--  Call Miner code

INSERT  INTO #x
        SELECT  X.LeadID
               ,X.MgtCoID
               ,X.MgtCoName
               ,X.ListingID
               ,X.PropertyID
               ,X.PropertyName
               ,X.PropertyCity
               ,X.PropertyState
               --,LookupFirstName = CAST(p.FirstName AS NVARCHAR(255))
               --,LookupLastName = CAST(p.LastName AS NVARCHAR(255))
               --,LookupFullName =  CAST(p.FirstName + CASE WHEN p.FirstName IS NULL
               --                                         OR p.LastName IS NULL THEN ''
               --                                    ELSE ' '
               --                               END + p.LastName AS NVARCHAR(255))
               ,FirstName = dm.FNAME
               ,LastName = dm.LNAME
               ,FullName = CAST(CASE WHEN dm.FNAME IS NULL
                                          OR dm.LNAME IS NULL THEN ''
                                     ELSE dm.FNAME + ' ' + dm.LNAME
                                END AS NVARCHAR(255))
               ,ContactMethod = CASE WHEN ContactMethod = 'Call' THEN 'DataMineCall'
                                     ELSE 'DataMineEmail'
                                END
               ,LeadSource = CASE WHEN ContactMethod = 'Call' THEN 'DataMineCall'
                                  ELSE 'DataMineEmail'
                             END
               ,X.ContactDate
               ,X.estContactDate
               ,X.Email
               ,Phone = dm.ALTERNATE
               ,X.IsPayPerLease
               ,X.ReverseLookupSource
               ,EmailText = ''
               ,NULL AS AudioURL
        FROM    #x AS X
        LEFT JOIN #datamine AS dm
                ON X.LeadID = dm.CallID
        LEFT JOIN Dimension.PhoneLookup p
                ON dm.ALTERNATE = p.PhoneNumber
        WHERE   ((dm.ALTERNATE IS NOT NULL
                  AND LEN(dm.ALTERNATE) >= 7)
                 OR (dm.EMAILADDRESS IS NOT NULL
                     AND LEN(dm.EMAILADDRESS) >= 5)
                 OR (dm.FNAME IS NOT NULL
                     AND LEN(dm.FNAME) > 0)
                 OR (dm.LNAME IS NOT NULL
                     AND LEN(dm.LNAME) > 0))
        UNION ALL
        SELECT  LeadID = dm.CALLID
               ,X.MgtCoID
               ,X.MgtCoName
               ,X.ListingID
               ,X.PropertyID
               ,X.PropertyName
               ,X.PropertyCity
               ,X.PropertyState
               --,LookupFirstName = X.FirstName
               --,LookupLastName =  X.LastName
               --,LookupFullName =  X.FullName  
               ,FirstName = dm.FNAME
               ,LastName = dm.LNAME
               ,FullName = CAST(CASE WHEN dm.FNAME IS NULL
                                          OR dm.LNAME IS NULL THEN ''
                                     ELSE dm.FNAME + ' ' + dm.LNAME
                                END AS NVARCHAR(255))
               ,ContactMethod = 'DataMineEmail'
               ,LeadSource = 'DataMineEmail'
               ,X.ContactDate
               ,X.estContactDate
               ,Email = dm.EMAILADDRESS
               ,X.Phone
               ,X.IsPayPerLease
               ,X.ReverseLookupSource
               ,EmailText = ''
               ,NULL AS AudioURL
        FROM    #x AS X
        JOIN    #datamine AS dm
                ON X.LeadID = dm.CallID
        WHERE   dm.EMAILADDRESS IS NOT NULL
                AND LEN(dm.EMAILADDRESS) >= 5	
			
*/
--end call miner
/*

SELECT * FROM #x where leadid = '7dbe9ee7aef9e02af2a2e55f6dfeb672'

SELECT * FROM #datamine -- 1888
SELECT * FROM #x
SELECT TOP 50 * FROM dimension.PhoneLookup
SELECT DISTINCT contactmethod FROM #x

 SELECT COUNT(*) FROM #datamine AS dm WHERE  dm.EMAILADDRESS IS NOT NULL	

DELETE FROM #x WHERE LeadSource  = 'DataMineCall'
DELETE FROM #x WHERE LeadSource  = 'DataMineEmail'

SELECT * 
FROM #x a
join #x b on a.leadid= b.leadid
where a.LeadSource  = 'DataMineCall'
	and b.LeadSource  <> 'DataMineCall'
	and a.homephone<>b.homephone

SELECT * FROM #x where homephone <> workphone
SELECT * FROM #x where cellphone <> workphone
SELECT * FROM #x where cellphone <> homephone

503-780-6871

SELECT * 
FROM #datamine dm
JOIN dimension.PhoneLookup p
        ON dm.ALTERNATE = p.PhoneNumber 
*/
       
---------------------------
/*Get result set*/
---------------------------       
SELECT  x.LeadID
       ,x.MgtCoID
       ,x.MgtCoName
       ,x.ListingID
       ,x.PropertyID
       ,x.ClientID
       ,x.PropertyName
	   ,x.PropertyAddress
       ,x.PropertyCity
       ,x.PropertyState
       ,x.Website
       ,x.FirstName
       ,x.LastName
       ,x.FullName
       ,IsCompany = CAST(CASE WHEN LEN(x.FullName) - LEN(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(x.FullName,'co.',''),'company',''),'inc.',''),'corp.',''),'corporate',''),'housing',''),'technology',''),'system',''),'insurance',''),'real estate',''),'audit test','')) > 0 THEN 1
                              ELSE 0
                         END AS TINYINT)
       ,x.ContactMethod
       ,x.LeadSource
       ,x.ContactDate
       ,x.estContactDate
       ,x.Email
       ,x.Phone AS HomePhone
       ,x.Phone AS WorkPhone
       ,x.Phone AS CellPhone
       ,x.IsPayPerLease
       ,x.ReverseLookupSource
       ,f.FirstDayActive
       ,d.DaysActiveInDateRange
       ,ISNULL(x.EmailText,'') AS EmailText
       ,x.AudioURL
FROM    #x AS x
LEFT JOIN #FirstDay AS f
        ON x.ListingID = f.ListingID
LEFT JOIN #DaysActive AS d
        ON x.ListingID = d.ListingID
ORDER BY CASE WHEN @sortbypropname = 1 THEN x.PropertyName
              ELSE ''
         END
       ,x.MgtCoID
       ,x.ListingID
       ,x.LeadID
       ,x.LeadSource DESC;

SET NOCOUNT OFF;






GO
/****** Object:  StoredProcedure [Reports].[rpt_PortalLeads]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Reports].[rpt_PortalLeads] (
    @UserGUID UNIQUEIDENTIFIER
   ,@AGPropertyID INT
   ,@DateRange INT = NULL)
/*************************************************************************************************
*
* Name:	Reports.rpt_PortalLeads
*
* Desc:	This provides leads for one or all listings that the user can see
*
* Test:	EXEC Reports.rpt_PortalLeads 'CBF5E01E-ED26-4280-882F-5F742D2514DD',26354
*		EXEC Reports.rpt_PortalLeads_Bob_TEST '1A0D6CD1-1C7B-4588-A45A-85EF9654285C',0100037818
		EXEC Reports.rpt_PortalLeads '1A0D6CD1-1C7B-4588-A45A-85EF9654285C',0,1
*		EXEC Reports.rpt_PortalLeads 'E11A9543-E50D-46A5-B3A2-A0CFCBFF6A95',0
*		EXEC Reports.rpt_PortalLeads '94CFCCC9-8F4A-4B36-9730-E5C0B4BAA75B',0
*		EXEC Reports.rpt_PortalLeads 'F06243CD-0225-4A1B-B54C-17A228D1E3F7',100045220
*		EXEC Reports.rpt_PortalLeads  '6A779593-37A4-4A14-B13F-5C158E185BE9',45813 , 2
*
*
EXEC Reports.rpt_PortalLeads '1A0D6CD1-1C7B-4588-A45A-85EF9654285C',100045220,2
EXEC Reports.rpt_PortalLeads '1A0D6CD1-1C7B-4588-A45A-85EF9654285C',0,1
EXEC Reports.rpt_PortalLeads '1A0D6CD1-1C7B-4588-A45A-85EF9654285C',0,2
EXEC Reports.rpt_PortalLeads '1A0D6CD1-1C7B-4588-A45A-85EF9654285C',0,3
EXEC Reports.rpt_PortalLeads '1A0D6CD1-1C7B-4588-A45A-85EF9654285C',100045220,1
*100045220
EXEC Reports.rpt_PortalLeads '1A0D6CD1-1C7B-4588-A45A-85EF9654285C',100045220,2
*
* Note: This procedure has built in security checks for the user.  This is the entire list of properties
*		the user can see regardless of whether individual properties are active at the time the list is
*		generated.  Whether the user gets data back from the remaining queries will be dictated by whether
*		the property was active at any point in the time period.
*		DateRange:  1 = 3 Months
*					2 = 13 Months
*					3 = Year to Date
*
* Hist:	01	01/14/2015		Sarah Mims			Initial Version. Ticket # 17937.
* Hist:	02	01/28/2015		Don Wert			Added Listing and Property IDs to the output.
* Hist: 03	02/10/2015		Don Wert			Add ISNULL to the return so as to return 0 instead of NULL values.
* Hist: 04	02/17/2015		Bob Langley			Ticket - 18155 - modified to use the views for DSUM data 
* Hist: 05	04/01/2015		Bob Langley			Set start date correctly (start with today - 1 day) instead of today
* Hist: 06	04/29/2015		Shetal Gandhi		Removed join to ApartmentGuide.Dimension.AGRentCombinedDimensionListings and selected agpropertyid from Mart.ListingsCombinedAGRent
* Hist: 07	05/01/2015		Shetal Gandhi		Modified to use ListingID in the join instead of AG_PropertyID
* Hist: 08	06/23/2015		Shetal Gandhi		Modified to include a date parameter
* Hist: 09	06/25/2015		Bob Langley			Fixed issue with doubling values for dates that appeared twice in the finaloutput table (once as CY and once as LY, only possible with new DateRange value of 3 (13 months))
* Hist: 10	08/17/2015		Shetal Gandhi		Ticket 20421 - Modified to use the New Rentpath tables instead of the AG Combined views
**************************************************************************************************/
AS 
SET NOCOUNT ON

/* Testing 
 DECLARE @UserGUID uniqueidentifier
 DECLARE @AGPropertyID INT
 DECLARE @DateRange INT = NULL

 SET @UserGUID = '1A0D6CD1-1C7B-4588-A45A-85EF9654285C'
 SET @AGPropertyID = 100045220
 SET @DateRange = 2
*/


-------------------------------
--Declare and set variables
-------------------------------
DECLARE  @StartCYYM INT
   ,@EndCYYM INT
   ,@StartLYYM INT
   ,@EndLYYM INT
   ,@StartCYDate DATETIME
   ,@StartLYDate DATETIME
   ,@EndLYDate DATETIME
   ,@AccessToAll INT
   ,@ListingID INT

IF @DateRange IS NULL 
	SET @DateRange = 1





SELECT  @StartCYDate = MonthStartDate
FROM    DBAUtility.Dimension.Dates
WHERE   YMDID = CASE WHEN @DateRange = 1 THEN CONVERT(int, Convert(varchar(10),CAST(DATEADD(m,-2,DATEADD(dd,-1,GETDATE())) AS DATE),112))
					 WHEN @DateRange = 2 THEN CONVERT(int, Convert(varchar(10),CAST(DATEADD(m,-12,DATEADD(dd,-1,GETDATE())) AS DATE),112))
					 WHEN @DateRange = 3 THEN CONVERT(int, Convert(varchar(10),CAST(DATEADD(yy, DATEDIFF(yy,0,getdate()), 0) AS DATE),112))
					 END

SELECT  @StartLYDate = MonthStartDate
FROM    DBAUtility.Dimension.Dates
WHERE   YMDID = CONVERT(int, Convert(varchar(10),DATEADD(year,-1,@StartCYDate),112))		--Date = DATEADD(year,-1,@StartCYDate)

SELECT  @EndLYDate = DATEADD(year,-1,CAST(GETDATE() - 1 AS DATE))

SELECT  @StartCYYM = CAST(LEFT(CONVERT(VARCHAR,@StartCYDate,112),6) AS INT)
       ,@StartLYYM = CAST(LEFT(CONVERT(VARCHAR,@StartLYDate,112),6) AS INT)
       ,@EndLYYM = CAST(LEFT(CONVERT(VARCHAR,@EndLYDate,112),6) AS INT)


PRINT '@StartCYDate = ' + CONVERT(varchar(30),@StartCYDate,109)
PRINT '@StartLYDate = ' + CONVERT(varchar(30),@StartLYDate,109)
PRINT '@EndLYDate = ' + CONVERT(varchar(30),@EndLYDate,109)
PRINT '@StartCYYM = ' + CONVERT(varchar(30),@StartCYYM)
PRINT '@StartLYYM = ' + CONVERT(varchar(30),@StartLYYM)
PRINT '@EndLYYM   = ' + CONVERT(varchar(30),@EndLYYM)


/* ============================================================================================================================================================== */

SELECT  @ListingID = CASE WHEN ISNULL(@AGPropertyID,0) = 0 THEN 0
                          ELSE (
                                SELECT  MAX(ListingID) AS ListingID
                                FROM    Rentpath.Dimension.Listings
                                WHERE   PropertyIDAG = @AGPropertyID
                               )
                     END

/* ============================================================================================================================================================== */
-- Copied from PropertyDisplay to speed up the query

---------------------------------------------------------------------------------------------------------------------------------
--Hard-code Access To All to 1 for all roles except 6,7, and 14 (Property Manager (Client),Management Company (Client) and Read Only)
---------------------------------------------------------------------------------------------------------------------------------
SELECT  @AccessToAll = ISNULL(CASE WHEN dur.RoleID NOT IN (6,7,14) THEN 1
                                   ELSE 0
                              END,0)
FROM    Dimension.vw_DSUM_User AS du
JOIN    Dimension.vw_DSUM_UserRole AS dur
        ON du.UserID = dur.UserID
WHERE   du.UserGUID = @UserGUID

------------------------------------------------------
--Create a temp table to dump User/Listing info into because this proc has a lot going on already
------------------------------------------------------
IF OBJECT_ID('tempdb..#UserListing') IS NOT NULL 
    BEGIN
        DROP TABLE #UserListing
    END		  

CREATE TABLE #UserListing (
    UserGUID uniqueidentifier
   ,ListingID INT
   ,AGPropertyID INT)
   

		
------------------------------------------------------------------------------------------------
--Get property list. If they have Access To All, give them the top @RecordsReturned Properties
------------------------------------------------------------------------------------------------
IF @AccessToAll > 0 
    BEGIN
	INSERT INTO #UserListing  
        SELECT  @UserGUID AS UserGUID
				,dl.ListingID AS ListingID
				,dl.PropertyIDAG AS AGPropertyID
		FROM    Rentpath.Dimension.Listings AS dl
        WHERE   (dl.StatusIDAG = 1 OR dl.StatusIDRent = 1)
				AND (dl.PropertyIDAG IS NOT NULL OR dl.PropertyIDRent IS NOT NULL)
		GROUP BY dl.ListingID, dl.PropertyIDAG
    END

ELSE
------------------------------------------------------------------------------------------------
-- If they do NOT have Access To All, find out what they can see and give them the top @RecordsReturned Properties
------------------------------------------------------------------------------------------------
	INSERT INTO #UserListing
	SELECT  x.UserGUID
			,pd.ListingID
			,pd.AGPropertyID
    FROM    (
             SELECT UserGUID
                   ,ListingID
             FROM   Dimension.vw_DSUM_Management
             WHERE  UserGuid = @UserGUID
             UNION
             SELECT UserGUID
                   ,ListingID
             FROM   Dimension.vw_DSUM_Property
             WHERE  UserGuid = @UserGUID
             UNION
             SELECT ds.UserGUID
                   ,dl.ListingID
             FROM   Dimension.vw_DSUM_Market AS ds
             JOIN   Rentpath.Dimension.Listings AS dl
					ON ds.ListingID = dl.ListingID
                    AND ds.LocalLookupValue = CASE WHEN dl.MarketCD = 'P00SAL' THEN 'W02000'
                                                  ELSE dl.MarketCD
                                             END
             WHERE ds.UserGUID = @UserGUID
                    AND (dl.StatusIDAG = 1 OR dl.StatusIDRent = 1)
             GROUP BY ds.UserGUID
                   ,dl.ListingID
            ) AS X
    JOIN    (
             SELECT dl.ListingID AS ListingID
                   ,MAX(dl.PropertyIDAG) AS AGPropertyID
                   ,MAX(dl.PropertyIDRent) AS RentPropertyID

             FROM   Rentpath.Dimension.Listings AS  dl
             WHERE  (dl.StatusIDAG = 1 OR dl.StatusIDRent = 1)
					AND (PropertyIDAG IS NOT NULL OR PropertyIDRent IS NOT NULL)
			 GROUP BY dl.ListingID
            ) AS pd
            ON X.ListingID = pd.ListingID




if @AGPropertyID <> 0 
	DELETE FROM #UserListing WHERE AGPropertyID <> @AGPropertyID
--diag
--SELECT * FROM #UserListing	


/* ============================================================================================================================================================== */

IF (
    SELECT  OBJECT_ID(N'tempdb..#FinalOutput')
   ) IS NOT NULL 
    DROP TABLE #FinalOutput

CREATE TABLE #FinalOutput (
    YearMonth INT
   ,Timeframe CHAR(2)
   ,Leads INT
   ,PageViews INT
   ,AGPropertyID INT
  )


INSERT  INTO #FinalOutput
        (YearMonth
        ,Timeframe
        ,AGPropertyID
		)
        SELECT DISTINCT YearMonth, TimeFrame = 'CY', AGPropertyID = @AGPropertyID
		FROM DBAUtility.dimension.dates
		WHERE yearmonth between 
			CASE WHEN @DateRange = 1 THEN LEFT(CAST(CONVERT(VARCHAR,DATEADD(mm,-2,DATEADD(dd,-1,GETDATE())),112) AS VARCHAR(10)),6) 
				 WHEN @DateRange = 2 THEN LEFT(CAST(CONVERT(VARCHAR,DATEADD(mm,-12,DATEADD(dd,-1,GETDATE())),112) AS VARCHAR(10)),6)   
				 WHEN @DateRange = 3 THEN LEFT(CONVERT(int, Convert(varchar(10),CAST(DATEADD(yy, DATEDIFF(yy,0,DATEADD(dd,-1,GETDATE())), 0) AS DATE),112)),6) END
					AND
					LEFT(CAST(CONVERT(VARCHAR,DATEADD(dd,-1,GETDATE()),112) AS INT),6)

	UNION
			SELECT DISTINCT YearMonth, TimeFrame = 'LY', AGPropertyID = @AGPropertyID
			FROM DBAUtility.dimension.dates
			WHERE yearmonth between @StartLYYM AND @EndLYYM


BEGIN TRY
DROP TABLE #tmpdupyearmonth
END TRY
BEGIN CATCH 
END CATCH




--Get list of duplicate yearmonth values (only possible if running for 13 months) to be used later to only take one of the values (either CY or LY) not both.
SELECT YearMonth, COUNT(*) AS RecCt 
INTO #tmpdupyearmonth							--duplicate yearmonths
FROM #FinalOutput 
GROUP BY YearMonth
HAVING COUNT(*) > 1

--Diag
--SELECT * FROM #tmpdupyearmonth


/* ============================================================================================================== */
		BEGIN TRY
			DROP TABLE #tmpcyinfo
		END TRY
		BEGIN CATCH
		END CATCH

		------------------------------------------------
		----results for CY (Current Year)
		------------------------------------------------
		SELECT YearMonth, Timeframe,AGPropertyID,SUM(Leads) AS Leads, SUM(PageViews) AS PageViews
		INTO #tmpcyinfo
		FROM
		(		SELECT  l.YearMonth
               ,'CY' AS Timeframe
               ,SUM(l.AllLeads)  AS Leads
               ,SUM(l.ViewsListingPageWeb) + SUM(l.ViewsListingPageMobile) AS PageViews  --note that viewslistingpage doesn't exist for Rentcom
               ,CASE WHEN @ListingID = 0 THEN 0
					ELSE l.PropertyIDAG
                END AS AGPropertyID
		FROM    Rentpath.Mart.Listings AS l WITH (NOLOCK)
        INNER JOIN #UserListing AS X
                ON l.ListingID = X.ListingID
                   AND l.StatusIDAG + l.StatusIDRent > 0
                   AND l.YearMonth >= @StartCYYM
		WHERE l.PropertyIDAG IN (SELECT AGPropertyID FROM #UserListing)
        GROUP BY l.YearMonth
			   ,CASE WHEN @ListingID = 0 THEN 0
					 ELSE l.PropertyIDAG
                END
			) AS g
		GROUP BY g.YearMonth, Timeframe,AGPropertyID


		--Diag
		--SELECT * FROM #tmpcyinfo ORDER BY YearMonth


		BEGIN TRY
			DROP TABLE #tmplyinfo
		END TRY
		BEGIN CATCH
		END CATCH
		------------------------------------------------
		----results for LY (Last Year)
		------------------------------------------------
		SELECT YearMonth, Timeframe,AGPropertyID,SUM(Leads) AS Leads, SUM(PageViews) AS PageViews
        INTO #tmplyinfo
		FROM (
		           SELECT   lm.YearMonth
                   ,'LY' AS Timeframe
                   ,SUM(AllLeads) AS Leads
                   ,SUM(lm.[ViewsListingPageWeb]) + SUM(lm.[ViewsListingPageMobile])  AS PageViews  --note that viewlistingpage doesn't exist for Rent.com
                   ,CASE WHEN @ListingID = 0 THEN 0
                        -- ELSE dl.AGPropertyID
						ELSE lm.PropertyIDAG
                    END AS AGPropertyID
		   FROM     Rentpath.Mart.Listings AS lm WITH (NOLOCK)
           INNER JOIN #UserListing AS X
                    ON lm.ListingID = X.ListingID
                       AND lm.StatusIDAG + lm.StatusIDRent > 0
                       AND lm.YearMonth BETWEEN @StartLYYM AND @EndLYYM
		   WHERE lm.PropertyIDAG IN (SELECT AGPropertyID FROM #UserListing)
           GROUP BY lm.YearMonth
                   ,CASE WHEN @ListingID = 0 THEN 0
						 ELSE lm.PropertyIDAG
                    END
		) AS g
	GROUP BY g.YearMonth, g.Timeframe, g.AGPropertyID


		--Diag
		--SELECT * FROM #tmplyinfo ORDER BY YearMonth

/* ============================================================================================================== */

UPDATE  fo
SET     Leads = ISNULL(cy.Leads,0) + (CASE WHEN dym.YearMonth IS NOT NULL THEN 0 ELSE ISNULL(ly.Leads,0) END)				--if this month is in the list of duplicate yearmonth values, only count once (both will have same totals).
       ,PageViews = ISNULL(cy.PageViews,0) + (CASE WHEN dym.YearMonth IS NOT NULL THEN 0 ELSE ISNULL(ly.PageViews,0) END)	--same goes for this one.
FROM    #FinalOutput fo
LEFT OUTER JOIN #tmpcyinfo cy
	ON cy.YearMonth = fo.YearMonth
LEFT OUTER JOIN #tmplyinfo ly
	ON ly.YearMonth = fo.YearMonth
LEFT OUTER JOIN #tmpdupyearmonth dym
	ON fo.YearMonth = dym.YearMonth









SELECT RIGHT(YearMonth,2) AS Month,
RowNum,
MAX([Leads_CY]) AS LeadsCurrentYear, 
MAX([Leads_LY]) AS LeadsLastYear,
MAX(PageViews_CY) AS PageViewsCurrentYear, 
MAX(PageViews_LY) AS PageViewsLastYear
FROM (
SELECT  YearMonth AS YearMonth
,ROW_NUMBER() OVER (PARTITION BY TimeFrame ORDER BY YearMonth) AS RowNum
       ,'Leads_'+Timeframe AS TimeFrameLeads
	   ,'PageViews_'+Timeframe AS TimeFramePageViews
       ,ISNULL(Leads,0) AS Leads
       ,ISNULL(PageViews,0) AS PageViews
       ,AGPropertyID
FROM    #FinalOutput

) a
PIVOT ( MAX(Leads)  FOR TimeframeLeads IN ( [Leads_CY],[Leads_LY] )) AS Pivot1 
PIVOT ( MAX(PageViews) FOR TimeframePageViews IN ([PageViews_CY],[PageViews_LY])) AS Pivot2
GROUP BY RIGHT(YearMonth,2),
 AGPropertyID
 ,RowNum
 ORDER BY rowNum

 









 

SET NOCOUNT OFF





GO
/****** Object:  StoredProcedure [Reports].[rpt_PPLbyManagement]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Reports].[rpt_PPLbyManagement] (
    @MgtCoID VARCHAR(28) = NULL)

/*************************************************************************************************
*
* Name:	Reports.rpt_PPLbyManagement
*
* Desc:	PPL Properties 
*
* Test:	EXEC Reports.rpt_PPLbyManagement '13444'

* Hist:	01	01/13/2017		Kimberley Morrow			Case 01375680 - Initial Version

**************************************************************************************************/
AS 
SET NOCOUNT ON

--DECLARE @MgtCoID VARCHAR(28)= '13444'		
		

		select 
				 dl.MarketName
				,dl.MgtCoIDAG
				,dl.MgtCoNameAG MgtCoName
				,dl.PropertyName
				,dl.PropertyAddress
				,dl.PropertyCity
				,dl.PropertyState
				,dl.ListingSource
				,dl.ListingID
				,x.Status__c Status
				,x.Pay_Per_Lead_Capacity__c			LeadCap
				,x.Active_Monthly_Price__c			PricePerLead
		from RentPath.Dimension.Listings dl
		join
				(
						select 
								f.Advertiser__c
								,f.Status__c
								,c.Pay_Per_Lead_Capacity__c
								,f.Active_Monthly_Price__c
						from salesforce.dbo.fulfillment_line_item__c f
						join SalesForce.dbo.Contract_Line_Item__c c
						on f.Contract_Line_Item__c = c.Id
						where f.product__c in ('01t4400000AGWWHAA5','01tE0000008opm7IAA')
								and f.status__c in ('active','Drop Requested')
				) x
		on dl.SFPropertyAcctID = x.Advertiser__c
		where dl.MgtCoIDAG = @MgtCoID
		order by 
				 dl.MarketName
				,dl.MgtCoNameAG
				,dl.ListingID


SET NOCOUNT OFF





GO
/****** Object:  StoredProcedure [Reports].[rpt_PropEmailLeadsSummary]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Reports].[rpt_PropEmailLeadsSummary]
	(
	@STARTDATE DATETIME
	,@ENDDATE DATETIME
	,@ListingID INT
	)
/*************************************************************************************************
*
* Name:	Reports.rpt_PropEmailLeadsSummary
*
* Desc:	This is the new version of the Property Email Leads report
*
* Test:	EXEC Reports.rpt_PropEmailLeadsSummary '09/01/2015','09/23/2015',16689
*		EXEC Reports.rpt_PropEmailLeadsSummary '09/01/2015','09/23/2015',192476
*		EXEC Reports.rpt_PropEmailLeadsSummary '08/01/2015','09/23/2015',2187
*		EXEC Reports.rpt_PropEmailLeadsSummary '01/01/2013','11/30/2014',24256
*		EXEC Reports.rpt_PropEmailLeadsSummary '01/01/2015','02/19/2015',100016005
*       EXEC Reports.rpt_PropEmailLeadsSummary '07/01/2015','08/16/2015',15487
*
*
* Hist:	01	02/02/2015		Colleen Rocks		Ticket 18062; moved Oracle procedure RPT_PropertyLeadSummaryUser_CB
*												to RentPath db for new email lead report
* Hist: 02  08/17/2015      Julie DiPietro      Ticket 20392; added mailingnames (B2B_Lead_Details_Email; B2B_Lead_Details_Email_Text)
* Hist: 03  09/23/2015      Julie DiPietro      Ticket 20749; added rent leads
**************************************************************************************************/
AS

SET NOCOUNT ON

	--------------------------------------
	--Declare and set variables
	--------------------------------------

DECLARE @TSQL varchar(8000)

SET @TSQL = 'SELECT * FROM OPENQUERY(ORACLEAPTG, ''SELECT edi.EMAIL
															,SUM(CASE edi.DELIVERED
															      WHEN ''''Y'''' THEN 1 ELSE 0
															      END) as TotalDelivered
															,SUM(CASE edi.OPENED
															      WHEN ''''Y'''' then 1 ELSE 0
															      END) as TotalOpened
															,SUM(CASE edi.REPLIED
															      WHEN ''''Y'''' then 1 ELSE 0
															      END) as TotalReply
												    FROM ( 
														  SELECT cl.LeadID, cl.ListingID, cl.When_Entered, cl.Status
														  FROM  common.allleads cl 
														  WHERE cl.When_Entered BETWEEN to_date(''''' + CONVERT(VARCHAR(15), @STARTDATE, 101) + ''''',''''MM/DD/YYYY'''') AND 
														  to_date(''''' + CONVERT(VARCHAR(15), @ENDDATE, 101) + ''''',''''MM/DD/YYYY'''')
														  AND cl.status=1
														  AND cl.ListingID = '+ CAST(@ListingID AS VARCHAR(30)) +'                             
													     ) l
												    JOIN COMMON.EDIALOG_LEADINFO edi 
														ON edi.leadid=l.leadid
												    WHERE edi.email is not null
												    AND LTRIM (RTRIM (edi.mailingname)) IN (''''B2B_Email_Lead_Text'''',''''B2B_Email_Leads_HTML'''',''''B2B_Lead_Details_Email'''',''''B2B_Lead_Details_Email_Text'''')
													AND l.When_Entered BETWEEN to_date(''''' + CONVERT(VARCHAR(15), @STARTDATE, 101) + ''''',''''MM/DD/YYYY'''') AND 
													to_date(''''' + CONVERT(VARCHAR(15), @ENDDATE, 101) + ''''',''''MM/DD/YYYY'''')
													AND l.listingid = '+ CAST(@ListingID AS VARCHAR(30)) +'
												    GROUP BY edi.EMAIL

												    UNION ALL

                                                    SELECT redi.EMAIL
					                                       ,SUM(CASE redi.DELIVERED
						                                         WHEN ''''Y'''' THEN 1 ELSE 0
						                                        END) as TotalDelivered
					                                      ,SUM(CASE redi.OPENED
						                                        WHEN ''''Y'''' then 1 ELSE 0
					                                            END) as TotalOpened
					                                      ,SUM(CASE redi.REPLIED
						                                        WHEN ''''Y'''' then 1 ELSE 0
						                                        END) as TotalReply
					 
			                                        FROM ( 
					                                      SELECT rcl.LeadID, rcl.ListingID, rcl.When_Entered, rcl.Status
					                                      FROM  common.allleads_rent rcl 
					                                      WHERE rcl.When_Entered BETWEEN to_date(''''' + CONVERT(VARCHAR(15), @STARTDATE, 101) + ''''',''''MM/DD/YYYY'''') AND 
					                                      to_date(''''' + CONVERT(VARCHAR(15), @ENDDATE, 101) + ''''',''''MM/DD/YYYY'''')
					                                      AND rcl.status=1
					                                      AND rcl.ListingID = '+ CAST(@ListingID AS VARCHAR(30)) +'                             
				                                         ) rl
			                                        JOIN common.et_leadinfo_rent redi 
			                                            ON redi.leadid=rl.leadid
			                                        WHERE redi.email is not null
			                                        AND LTRIM (RTRIM (redi.mailingname)) IN (''''Rent_B2B_Lead_Details_Email'''',''''Rent_B2B_Lead_Details_Email_Text'''')
			                                        AND rl.When_Entered BETWEEN to_date(''''' + CONVERT(VARCHAR(15), @STARTDATE, 101) + ''''',''''MM/DD/YYYY'''') AND 
			                                        to_date(''''' + CONVERT(VARCHAR(15), @ENDDATE, 101) + ''''',''''MM/DD/YYYY'''')
			                                        AND rl.listingid = '+ CAST(@ListingID AS VARCHAR(30)) +'
			                                        GROUP BY redi.EMAIL
			 
										           '')'


--PRINT @TSQL

IF (SELECT OBJECT_ID(N'tempdb..#edialogsum')) IS NOT NULL
	DROP TABLE #edialogsum

CREATE TABLE #edialogsum (
Email			VARCHAR(200)
,TotalDelivered	INT		
,TotalOpened	INT
,TotalReply		INT

)

INSERT INTO #edialogsum
EXEC (@TSQL)


	--------------------------------------
	--Select out results
	--------------------------------------
SELECT e.Email
	  ,SUM(e.TotalDelivered) AS TotalDelivered
	  ,SUM(e.TotalOpened) AS TotalOpened
	  ,SUM(e.TotalReply) AS TotalReply
FROM #edialogsum AS e
GROUP BY e.Email






GO
/****** Object:  StoredProcedure [Reports].[rpt_PropertyADItemDesc]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Reports].[rpt_PropertyADItemDesc] 
(@ListingID INT
)
AS /******************************************************************************************
*
* Name:	Reports.rpt_PropertyADItemDesc
*
* Desc:	Used by property performance Detail
*
* Test:	EXEC Reports.rpt_PropertyADItemDesc  1
*
* 
*
* Hist:	01	11/12/2009	Richard Chen		Initial Version
* Hist: 02  05/22/2013  Shetal Gandhi		Set the ItemDescription to upper case
* Hist: 03	01/03/2014	Sarah Mims			Ticket # 14141 - Modified to include Rent
* Hist: 04	01/27/2014	Sarah Mims			Ticket # 13853 -  hardcoded Option Types for Rent
* Hist: 04	03/22/2014	Sarah Mims			Changed pull from QA to PROD. Woohoo!!
* Hist:	05	12/15/2014	Shetal Gandhi		Modified to Remove the Website Parameter
******************************************************************************************/

    SET NOCOUNT ON
-----------------------------------------------------------------------------------------
--Declare and set variables
-----------------------------------------------------------------------------------------
DECLARE @SQL VARCHAR (4000)

-----------------------------------------------------------------------------------------
--Create temp table
-----------------------------------------------------------------------------------------
CREATE TABLE #Items
(Website VARCHAR (5)
,PropertyItemDesc VARCHAR(4000)
)
-------------------------------------------------------------------------------------------
--Get AG Items for the selected listing and dump into temp table
-------------------------------------------------------------------------------------------  
INSERT INTO #Items
    SELECT  'AG' AS Website
           ,PropertyItemDesc = dbautility.dbo.fn_rtrim((
                                                      SELECT DISTINCT
                                                                UPPER(itemdescription) + ',' AS [data()]
                                                      FROM      ApartmentGuide.Dimension.MaxPropertyListingPoints
                                                      WHERE     ListingID = @ListingID
                                                     FOR
                                                      XML PATH('')
                                                     ),',')

	

-------------------------------------------------------------------------------------------
--Get Rent Items for the selected listing and dump into temp table
-------------------------------------------------------------------------------------------  
SET @SQL = 
'SELECT ''Rent'' AS Website
,PropertyItemDesc =   dbautility.dbo.fn_rtrim((
                                 SELECT UPPER(d.OptionType) + '','' AS [data()]
                                 FROM   
								 (
                                         SELECT *
                                         FROM   OPENQUERY(ORACLEAPTG,''SELECT pl.ListingID
																		,ot.OptionType
																		FROM Properties.PropListings pl    
																		JOIN Properties.PropListOptions plo
																			ON pl.ListingID = plo.ListingID
																				AND pl.PropertyID = plo.PropertyID
																			JOIN Properties.OptionTypes ot
																				ON plo.OptionTypeID = ot.OptionTypeID
																		WHERE pl.IsActiveRent = 1
																			AND pl.ListingID = '+ CAST(@ListingID AS VARCHAR(20))+'
																			AND plo.IsActive = 1
																			AND plo.StartDate <= TRUNC(SYSDATE) AND plo.EndDate >= TRUNC(SYSDATE)
																			AND ot.OptionTypeID IN (300,302,303,304)
															'') AS o
                                        ) AS d
                                FOR
                                 XML PATH('''')
                                ),'','')'

INSERT INTO #Items
EXEC (@SQL)

-------------------------------------------------------------------------------------------
--Select out final result set
-------------------------------------------------------------------------------------------  
SELECT i.Website
,i.PropertyItemDesc
FROM #Items AS i

 SET NOCOUNT OFF




GO
/****** Object:  StoredProcedure [Reports].[rpt_PropertyDisplay]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

















CREATE PROCEDURE [Reports].[rpt_PropertyDisplay] (
    @UserGUID UNIQUEIDENTIFIER
   ,@RecordsReturned INT
   ,@SearchTerm VARCHAR(50))
/*************************************************************************************************
* Name:	Reports.rpt_PropertyDisplay
*-------------------------------------------------------------------------------------------------
* Desc:	This displays all properties that a particular user can see
*-------------------------------------------------------------------------------------------------
* Test:	EXEC Reports.rpt_PropertyDisplay '32732F2B-85E7-4142-B7E3-2D0E6F95C538',300000,NULL
*		EXEC Reports.rpt_PropertyDisplay 'E11A9543-E50D-46A5-B3A2-A0CFCBFF6A95',300000,NULL
*		EXEC Reports.rpt_PropertyDisplay_Bob_TEST '1A0D6CD1-1C7B-4588-A45A-85EF9654285C',300000,NULL

*		EXEC Reports.rpt_PropertyDisplay 'E11A9543-E50D-46A5-B3A2-A0CFCBFF6A95',500,'craft'
*		EXEC Reports.rpt_PropertyDisplay 'cb2d1aaf-609b-4514-8440-15cc53525638',25,NULL
*-------------------------------------------------------------------------------------------------
* Notes: This pulls back the top number of records determined by the input parameter sorted by Property Name
* THIS IS A CLIENT PORTAL DASHBOARD PROC. BEFORE MAKING CHANGES IN PRODUCTION, THEY MUST BE
* VETTED AND TESTED IN THE DEV & QA DATABASES FIRST.
*-------------------------------------------------------------------------------------------------
* Hist:	01	01/14/2015		Sarah Mims			Initial Version. TIcket # 17937.
* Hist:	02	01/23/2015		Don Wert			Ticket 17937, in final output added code to remove non-printing characters 
*												from property name so order is logical and consistent.  Also, per request from
*												devs, return the number of properties the user has rights to and add the AG and Rent property IDs.
* Hist 03:	01/29/2015		Don Wert			Ticket 17937 addition, suppress return of records with NULL AGPropertyID, remove ListingID, 
*												return total listings the user can see as part of the recordset so a second pass thru the data is not needed.
* Hist 04:	02/18/2015		Bob Langley			Ticket 18155 - modified to use the new views
* Hist 05:	08/17/2015		Shetal Gandhi		Ticket 20421 - Modified to use the New Rentpath tables instead of the AG Combined views
* Hist 06:	12/15/2015		Kimberley Morrow	Ticket 21652 - Add flags for Axio Data Product
* Hist 07:	01/14/2016		Kimberley Morrow	Ticket 21859 - Add SFDC flags for Axio Data Product
* Hist 08:	05/11/2016		Colleen Rocks		Ticket 22366; replace join to community__c table to use account table instead
* Hist 09:	05/18/2016		Kimberley Morrow	Ticket 23085;  Add Axio Market ID
**************************************************************************************************/
AS
SET NOCOUNT ON;



/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
If this code changes make a corresponding change to the code in Reports.rpt_PropertyLeadsSummary.
The code there uses the same logic but gets different columns
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/


------------------------------------------------------
--Declare & Set Variables
------------------------------------------------------
DECLARE @AccessToAll INT
  
SET @SearchTerm = CONCAT('%',@SearchTerm,'%')  

BEGIN TRY
    DROP TABLE #workingset
END TRY
BEGIN CATCH
END CATCH
  
	

CREATE TABLE #workingset (
    ListingID INT
   ,UserGUID UNIQUEIDENTIFIER
   ,AGPropertyID INT
   ,RentPropertyID INT
   ,PropertyName VARCHAR(1000)
   ,PropertyCity VARCHAR(300)
   ,PropertyState CHAR(20)
   ,PropertyZip INT
   ,AGStatus INT
   ,RentStatus INT
   ,TotalUserCanSee INT)
CREATE CLUSTERED INDEX CI_workingset_77219_on_ListingID ON #workingset(ListingID)

	---------------------------------------------------------------------------------------------------------------------------------
	--Hard-code Access To All to 1 for all roles except 6,7, and 14 (Property Manager (Client),Management Company (Client) and Read Only)
	---------------------------------------------------------------------------------------------------------------------------------
SELECT  @AccessToAll = ISNULL(CASE WHEN dur.RoleID NOT IN (6,7,14) THEN 1
                                   ELSE 0
                              END,0)
FROM    Dimension.vw_DSUM_User AS du
JOIN    Dimension.vw_DSUM_UserRole AS dur
        ON du.UserID = dur.UserID
WHERE   du.UserGUID = @UserGUID
		
------------------------------------------------------------------------------------------------
--Get property list. If they have Access To All, give them the top @RecordsReturned Properties
------------------------------------------------------------------------------------------------
IF @AccessToAll > 0
    BEGIN
        SELECT TOP (@RecordsReturned)
				--dl.ListingID,
                @UserGUID AS UserGUID
               ,MAX(PropertyIDAG) AS AGPropertyID
               ,MAX(dl.PropertyIDRent) AS RentPropertyID
               ,MAX(CASE WHEN ASCII(LEFT(dl.PropertyName,1)) BETWEEN 33 AND 126 THEN LTRIM(dl.PropertyName)
                         ELSE LTRIM(RIGHT(dl.PropertyName,LEN(dl.PropertyName) - 1))
                    END) AS PropertyName
               ,MAX(dl.PropertyCity) AS PropertyCity
               ,MAX(dl.PropertyState) AS PropertyState
               ,MAX(dl.PropertyZipCode) AS PropertyZip
               ,MAX(StatusIDAG) AS AGStatus
               ,MAX(StatusIDRent) AS RentStatus
               ,COUNT(dl.ListingID) OVER () AS TotalUserCanSee
               ,a.Axio_Project_ID__c AS ProjectID
			   ,a.Axio_Market_ID__c AS MarketID
               ,a.Is_Axio_Active__c AS AxioActive
        FROM    RentPath.Dimension.Listings AS dl
        INNER JOIN SalesForce.dimension.SALESFORCE_XREF AS sx
                ON dl.PropertyIDAG = sx.AGPropertyID
        INNER JOIN SalesForce.dbo.Account AS a
                ON sx.SalesforceAccountID = a.Id
        WHERE   (dl.StatusIDAG = 1
                 OR dl.StatusIDRent = 1)
                AND dl.PropertyName LIKE CASE WHEN @SearchTerm IS NOT NULL THEN @SearchTerm
                                              ELSE dl.PropertyName
                                         END
                AND PropertyIDAG IS NOT NULL
        GROUP BY dl.ListingID
               ,a.Axio_Project_ID__c
			   ,a.Axio_Market_ID__c
               ,a.Is_Axio_Active__c
        ORDER BY PropertyName
    END

ELSE
------------------------------------------------------------------------------------------------
-- If they do NOT have Access To All, find out what they can see and give them the top @RecordsReturned Properties
------------------------------------------------------------------------------------------------
    SELECT TOP (@RecordsReturned)
			--x.ListingID,
            X.UserGUID
           ,pd.AGPropertyID
           ,pd.RentPropertyID
           ,pd.PropertyName
           ,pd.PropertyCity
           ,pd.PropertyState
           ,pd.PropertyZip
           ,pd.AGStatus
           ,pd.RentStatus
           ,COUNT(X.UserGUID) OVER () AS TotalUserCanSee
           ,pd.ProjectID
		   ,pd.MarketID
           ,pd.AxioActive
    FROM    (
             SELECT UserGUID
                   ,ListingID
             FROM   Dimension.vw_DSUM_Management
             WHERE  UserGUID = @UserGUID
             UNION
             SELECT UserGUID
                   ,ListingID
             FROM   Dimension.vw_DSUM_Property
             WHERE  UserGUID = @UserGUID
             UNION
             SELECT ds.UserGUID
                   ,dl.ListingID
             FROM   Dimension.vw_DSUM_Market AS ds
             JOIN   RentPath.Dimension.Listings AS dl
                    ON ds.ListingID = dl.ListingID
                       AND ds.LocalLookupValue = CASE WHEN dl.MarketCD = 'P00SAL' THEN 'W02000'
                                                      ELSE dl.MarketCD
                                                 END
             WHERE  ds.UserGUID = @UserGUID
                    AND (dl.StatusIDAG = 1
                         OR dl.StatusIDRent = 1)
             GROUP BY ds.UserGUID
                   ,dl.ListingID
            ) AS X
    JOIN    (
             SELECT dl.ListingID
                   ,MAX(dl.PropertyIDAG) AS AGPropertyID
                   ,MAX(dl.PropertyIDRent) AS RentPropertyID
                   ,MAX(CASE WHEN ASCII(LEFT(dl.PropertyName,1)) BETWEEN 33 AND 126 THEN LTRIM(dl.PropertyName)
                             ELSE LTRIM(RIGHT(dl.PropertyName,LEN(dl.PropertyName) - 1))
                        END) AS PropertyName
                   ,MAX(dl.PropertyCity) AS PropertyCity
                   ,MAX(dl.PropertyState) AS PropertyState
                   ,MAX(dl.PropertyZipCode) AS PropertyZip
                   ,MAX(dl.StatusIDAG) AS AGStatus
                   ,MAX(dl.StatusIDRent) AS RentStatus
                   ,a.Axio_ID__c AS ProjectID
				   ,a.Axio_Market_ID__c AS MarketID
                   ,a.Is_Axio_Active__c AS AxioActive
             FROM   RentPath.Dimension.Listings AS dl
             INNER JOIN SalesForce.dimension.SALESFORCE_XREF AS sx
                    ON dl.PropertyIDAG = sx.AGPropertyID
             INNER JOIN SalesForce.dbo.Account AS a
                    ON sx.SalesforceAccountID = a.Id
             WHERE  (dl.StatusIDAG = 1
                     OR dl.StatusIDRent = 1)
                    AND dl.PropertyName LIKE CASE WHEN @SearchTerm IS NOT NULL THEN @SearchTerm
                                                  ELSE dl.PropertyName
                                             END
                    AND dl.PropertyIDAG IS NOT NULL
             GROUP BY dl.ListingID
                   ,a.Axio_ID__c
				   ,a.Axio_Market_ID__c
                   ,a.Is_Axio_Active__c
            ) AS pd
            ON X.ListingID = pd.ListingID
    ORDER BY pd.PropertyName



SET NOCOUNT OFF;



/*******************************************************************************************************************************/
/*******************************************************************************************************************************/
/*******************************************************************************************************************************/
/*******************************************************************************************************************************/

/****** Object:  StoredProcedure [Reports].[rpt_PropertyEmailLeadsDetail]    Script Date: 9/9/2015 2:51:08 PM ******/
SET ANSI_NULLS ON













GO
/****** Object:  StoredProcedure [Reports].[rpt_PropertyEmailLeads]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Reports].[rpt_PropertyEmailLeads] (
    @STARTDATE DATETIME
   ,@ENDDATE DATETIME
   ,@ListingID INT)
/*************************************************************************************************
*
* Name:	Reports.rpt_PropertyEmailLeads
*
* Desc:	This is the new version of the Property Email Leads report
*
* Test:	EXEC Reports.rpt_PropertyEmailLeads '02/02/2015','02/09/2015',20522
*		EXEC Reports.rpt_PropertyEmailLeads '11/01/2014','11/30/2014',100022043
*		EXEC Reports.rpt_PropertyEmailLeads '01/01/2013','11/30/2014',100019314
*		EXEC Reports.rpt_PropertyEmailLeads '01/01/2013','11/30/2014',24256
*		EXEC Reports.rpt_PropertyEmailLeads '01/01/2015','02/19/2015',100016005
*
* Note: This is a simplified version that includes Edialog information, but shows not available for 
* any lead without it to lessen the chance of differentiating AG from Rent leads.
*
* Hist:	01	12/01/2014		Sarah Mims			Initial Version. No ticket - rewrite for DMac project.
*		02	01/30/2015		Colleen Rocks		Ticket 18062; oracle stored proc rewrite
*		03	09/16/2015		Clinton Woody		Ticket 19977; added new mailing type B2B_Lead_Details_Email
**************************************************************************************************/
AS 
SET NOCOUNT ON

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
DECLARE @TrackDate DATETIME
   ,@LengthInSeconds INT
   ,@DatabaseName VARCHAR(128)
                
SET @TrackDate = GETDATE()
SET @LengthInSeconds = 0
SET @DatabaseName = DB_NAME()        
		
EXEC DBAUtility.dbo.pr_Logging_StoredProcsNoTemp 
    @DatabaseName = @DatabaseName
   , -- varchar(128)
    @ProcName = 'Reports.rpt_PropertyEmailLeads'
   , -- varchar(128)
    @StepName = 'Execute Procedure'
   , -- varchar(128)
    @VariableStates = ''
   , -- varchar(500)
    @LengthInSeconds = @LengthInSeconds
   , -- int
    @Comments = 'Execute Procedure'; -- varchar(500)

	--------------------------------------
	--Declare and set variables
	--------------------------------------

DECLARE @TSQL VARCHAR(8000)
   ,@StartYMDID INT
   ,@EndYMDID INT

SET @StartYMDID = CAST(CONVERT(VARCHAR(8),@STARTDATE,112) AS INT)
SET @EndYMDID = CAST(CONVERT(VARCHAR(8),@ENDDATE,112) AS INT)
SET @TSQL = 'SELECT * FROM OPENQUERY(ORACLEAPTG, ''SELECT cl.listingid,
                      cl.when_entered,
                      edi.LEADID, 
					  edi.EMAIL || CASE WHEN INSTR(UPPER (edi.mailingname), ''''TEXT'''') > 0 THEN ''''(text)''''
										WHEN INSTR(UPPER (edi.mailingname), ''''TEXT'''') = 0 AND LENGTH (edi.mailingname) > 0 THEN ''''(html)''''
										ELSE '''''''' END ResponseEmail,
                      edi.DELIVERED,
                      edi.DELIVERTIME,
                      edi.OPENED,
                      edi.OPENTIME,
                      edi.REPLIED,
                      edi.REPLYTIME
                  FROM COMMON.EDIALOG_LEADINFO edi
                  JOIN COMMON.ALLLEADS cl
                    ON edi.leadid = cl.leadid
                  WHERE LTRIM (RTRIM (edi.mailingname)) IN
                    (''''B2B_Email_Lead_Text'''',''''B2B_Email_Leads_HTML'''',''''B2B_Lead_Details_Email'''')
                    AND cl.When_Entered BETWEEN to_date(''''' + CONVERT(VARCHAR(15),@STARTDATE,101) + ''''',''''MM/DD/YYYY'''') AND 
                    to_date(''''' + CONVERT(VARCHAR(15),DATEADD(DAY,1,@ENDDATE),101) + ''''',''''MM/DD/YYYY'''')
					AND cl.Status = 1
                    AND cl.listingid = ' + CAST(@ListingID AS VARCHAR(30)) + '

                  union

                  SELECT tp.listingid,
                      tp.whenentered,
					  null as ResponseEmail,
                      null as LEADID,
                      null as DELIVERED,
                      null as DELIVERTIME,
                      null as OPENED,
                      null as OPENTIME,
                      null as REPLIED,
                      null as REPLYTIME
                  FROM COMMON.thirdpartyfeedleads tp
                  WHERE tp.WhenEntered BETWEEN to_date(''''' + CONVERT(VARCHAR(15),@STARTDATE,101) + ''''',''''MM/DD/YYYY'''') AND 
                    to_date(''''' + CONVERT(VARCHAR(15),DATEADD(DAY,1,@ENDDATE),101) + ''''',''''MM/DD/YYYY'''')
                    AND tp.listingid = ' + CAST(@ListingID AS VARCHAR(30)) + '

                  union

                  SELECT rcl.listingid,
                      rcl.when_entered,
                      null as LEADID, 
					  null as ResponseEmail,
                      null as DELIVERED,
                      null as DELIVERTIME,
                      null as OPENED,
                      null as OPENTIME,
                      null as REPLIED,
                      null as REPLYTIME
                  FROM COMMON.allleads_rentcom rcl
                  WHERE rcl.When_Entered BETWEEN to_date(''''' + CONVERT(VARCHAR(15),@STARTDATE,101) + ''''',''''MM/DD/YYYY'''') AND 
                    to_date(''''' + CONVERT(VARCHAR(15),DATEADD(DAY,1,@ENDDATE),101) + ''''',''''MM/DD/YYYY'''')
                    AND rcl.listingid = ' + CAST(@ListingID AS VARCHAR(30)) + '
						'')'

--PRINT @TSQL

IF (
    SELECT  OBJECT_ID(N'tempdb..#edialog')
   ) IS NOT NULL 
    DROP TABLE #edialog

CREATE TABLE #edialog (
    LISTINGID INT
   ,WHEN_ENTERED DATETIME
   ,LEADID INT
   ,RESPONSEEMAIL VARCHAR(200)
   ,DELIVERED VARCHAR(5)
   ,DELIVERTIME DATETIME
   ,OPENED VARCHAR(5)
   ,OPENTIME DATETIME
   ,REPLIED VARCHAR(5)
   ,REPLYTIME DATETIME)

INSERT  INTO #edialog
        EXEC (@TSQL)

	--------------------------------------
	--Select out results
	--------------------------------------
SELECT  ar.ListingID
       ,ar.LeadID
       ,ar.WhenEntered
       ,CONCAT(CAST(ar.WhenEntered AS DATE),' ',LTRIM(STUFF(RIGHT(CONVERT(CHAR(26),ar.WhenEntered,109),14),6,7,' '))) AS LeadDate
       ,ar.YMDID
       ,ar.Email AS ProspectEmail
       ,CONCAT(ar.FirstName,' ',ar.LastName) AS LeadName
       ,ISNULL(COALESCE(ar.DayPhone,ar.NightPhone),0) AS Phone
       ,ar.MoveMonth
       ,ar.Bedrooms
       ,ar.Bathrooms
       ,ISNULL(ar.Bedrooms,'') + CASE WHEN ar.Bathrooms IS NULL THEN ''
                                      ELSE '/'
                                 END + ISNULL(ar.Bathrooms,'') AS BedBath
       ,ar.Comments
       ,e.RESPONSEEMAIL
       ,e.DELIVERTIME
       ,e.OPENTIME
       ,e.REPLYTIME
FROM    ApartmentGuide.Fact.AGRentWebFormLeads AS ar
LEFT JOIN #edialog AS e
        ON ar.LeadID = e.LEADID
           AND ar.ListingID = e.LISTINGID
WHERE   ar.YMDID BETWEEN @StartYMDID AND @EndYMDID
        AND ar.ListingID = @ListingID
        AND ar.Status = 1
ORDER BY LeadDate DESC

SET NOCOUNT OFF







GO
/****** Object:  StoredProcedure [Reports].[rpt_PropertyEmailLeadsDetail]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO














CREATE PROCEDURE [Reports].[rpt_PropertyEmailLeadsDetail] 
(@AGPropertyID INT
,@DateRange INT = NULL
)
/*************************************************************************************************
* Name:	Reports.rpt_PropertyEmailLeadsDetail
*-------------------------------------------------------------------------------------------------
* Desc:	This returns the detail for email leads for the appropriate time period (defaults to two months prior to currently reported month plus currently reported month to date)
*-------------------------------------------------------------------------------------------------
* Test:	EXEC Reports.rpt_PropertyEmailLeadsDetail 100518
		EXEC Reports.rpt_PropertyEmailLeadsDetail 100045220, 1
* SELECT * FROM dbo.DashboardSubscriptions
*-------------------------------------------------------------------------------------------------
* Notes: THIS IS A CLIENT PORTAL DASHBOARD PROC. BEFORE MAKING CHANGES IN PRODUCTION, THEY MUST BE
* VETTED AND TESTED IN THE DEV & QA DATABASES FIRST.
*-------------------------------------------------------------------------------------------------
* Hist:	01	01/23/2015		Don Wert			Initial Version. TIcket # 17937.
* Hist: 02	02/09/2015		Don Wert			Ticket 18155, concatenate beds and baths.  Note that some records will return this in the
*												format 2/2 and some will return 2 Bedrooms/2 Bathrooms.  This is in the underlying data.
*												There are even records that will return 1 Bedroom,2 Bedrooms,3 Bedroom/1 Bath,2 Bath,3 Bath
* Hist: 03	02/10/2015		Don Wert			Ticket 18155, upon review of the data, undo the concatenation of beds and baths.
* Hist:	04	06/04/2015		Kimberley Morrow	Ticket 19664, adding ExternalId to pass for csv.
* Hist: 05	06/23/2015		Shetal Gandhi		Ticket 19723 - Modified to include a date parameter
* Hist: 06	07/31/2015		Bob Langley			Ticket 19882 - changed to pull listingid for statusid=1 (wasn't doing that before)
* Hist: 07	08/17/2015		Shetal Gandhi		Ticket 20421 - Modified to use the New Rentpath tables instead of the AG Combined views
**************************************************************************************************/
AS 
SET NOCOUNT ON

BEGIN
	/*test
    DECLARE @AGPropertyID INT = 100052871

	*/


 	/* ======================================================================================== */
	
	--start and end dates
	DECLARE @StartYMDID int
	DECLARE @EndYMDID int
    
	    
	IF @DateRange IS NULL 
	SET @DateRange = 1

	--original way of running this SPROC
	--SET @StartYMDID  =  CAST(CONVERT(VARCHAR,DATEADD(MONTH,DATEDIFF(MONTH,0,GETDATE()) - 2,0),112) AS INT)
	SELECT @StartYMDID = MonthStartYMDID
	FROM    DBAUtility.Dimension.Dates
	WHERE   YMDID = CASE WHEN @DateRange = 1 THEN CONVERT(int, Convert(varchar(10),CAST(DATEADD(m,-2,DATEADD(dd,-1,GETDATE())) AS DATE),112))
						 WHEN @DateRange = 2 THEN CONVERT(int, Convert(varchar(10),CAST(DATEADD(m,-12,DATEADD(dd,-1,GETDATE())) AS DATE),112))
						 WHEN @DateRange = 3 THEN CONVERT(int, Convert(varchar(10),CAST(DATEADD(yy, DATEDIFF(yy,0,getdate()), 0) AS DATE),112))
						 END
                     
	SET @EndYMDID =  CAST(CONVERT(VARCHAR,GETDATE() - 1,112) AS INT)


	--SELECT @StartYMDID AS StartYMDID
	--SELECT @EndYMDID AS EndYMDID


	--PRINT '@startYMDID = ' + CONVERT(varchar(30),@startYMDID)
	--PRINT '@endYMDID = ' + CONVERT(varchar(30),@endYMDID)


	/* ======================================================================================== */
   DECLARE @ListingID INT

    SELECT  @ListingID = CASE WHEN ISNULL(@AGPropertyID,0) = 0 THEN 0
                              ELSE (
                                    SELECT  MAX(ListingID) AS ListingID
                                    FROM    Rentpath.Dimension.Listings WITH (NOLOCK)
                                    WHERE   PropertyIDAG = @AGPropertyID
									AND (StatusIDAG = 1 OR StatusIDRent = 1)
                                   )
                         END

    SELECT  @AGPropertyID AS AGPropertyID, ar.ListingID
           ,CONCAT(CAST(ar.WhenEntered AS DATE),' ',LTRIM(STUFF(RIGHT(CONVERT(CHAR(26),ar.WhenEntered,109),14),6,7,' '))) AS [LeadDate (Eastern)]
           ,ar.Email AS ProspectEmail
           ,CONCAT(ar.FirstName,' ',ar.LastName) AS LeadName
           ,ISNULL(COALESCE(ar.DayPhone,ar.NightPhone),0) AS Phone
           ,ar.MoveMonth
		   ,ISNULL(ar.bedrooms,'') AS Bedrooms
		   ,ISNULL(ar.bathrooms,'') AS Bathrooms
           ,REPLACE(REPLACE(ar.Comments,CHAR(13),''),CHAR(10),'') AS Comments
		   ,dl.ExternalID
	FROM    Rentpath.Mart.EmailLeads AS ar WITH (NOLOCK)
	LEFT OUTER JOIN	(SELECT ListingID, MAX(ExternalID) AS ExternalID 
					 FROM Rentpath.Dimension.Listings WITH (NOLOCK) 
					 GROUP BY ListingID
					) AS dl
		ON	dl.ListingID = ar.ListingID
    WHERE   ar.YMDID BETWEEN @StartYMDID AND @EndYMDID
            AND ar.ListingID = @ListingID
            AND ar.Status = 1
    ORDER BY WhenEntered DESC



END





GO
/****** Object:  StoredProcedure [Reports].[rpt_PropertyEmailLeadsDetail_For_AdvancedReport]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO









CREATE PROCEDURE [Reports].[rpt_PropertyEmailLeadsDetail_For_AdvancedReport] 
(@AGPropertyID INT
,@subscriptionid	int = NULL
)
/*************************************************************************************************
*
* Name:	Reports.rpt_PropertyEmailLeadsDetail_For_AdvancedReport
*
* Desc:	This returns the detail for email leads 
*  DEV
* Test:	EXEC Reports.rpt_PropertyEmailLeadsDetail_For_AdvancedReport 100518
* Test:	EXEC Reports.rpt_PropertyEmailLeadsDetail_For_AdvancedReport 100518,NULL
* Test:	EXEC Reports.rpt_PropertyEmailLeadsDetail_For_AdvancedReport 100052871,NULL
* Test:	EXEC Reports.rpt_PropertyEmailLeadsDetail_For_AdvancedReport 0,18
*   QA
* Test:	EXEC Reports.rpt_PropertyEmailLeadsDetail_For_AdvancedReport 0,6070
*
* SELECT * FROM dbo.DashboardSubscriptions
*
* Hist:	01	01/23/2015		Don Wert			Initial Version. TIcket # 17937.
* Hist: 02	02/09/2015		Don Wert			Ticket 18155, concatenate beds and baths.  Note that some records will return this in the
*												format 2/2 and some will return 2 Bedrooms/2 Bathrooms.  This is in the underlying data.
*												There are even records that will return 1 Bedroom,2 Bedrooms,3 Bedroom/1 Bath,2 Bath,3 Bath
* Hist: 03	02/10/2015		Don Wert			Ticket 18155, upon review of the data, undo the concatenation of beds and baths.
* Hist:	04	06/04/2015		Kimberley Morrow	Ticket 19664, adding ExternalId to pass for csv.
* Hist: 05	06/12/2015		Bob Langley			Ticket 19612 - Copied rpt_PropertyEmailLeadsDetail SPROC to this one and modified to add the logic needed for AdvancedReport process.
* Hist: 06	08/17/2015		Shetal Gandhi		Ticket 20421 - Modified to use the New Rentpath tables instead of the AG Combined views
* Hist: 07	01/21/2016		Kimberley Morrow	Ticket 21858 - Add flags for Axio Data Product
* Hist: 08	05/18/2016		Kimberley Morrow	Ticket 23085;  Add Axio Market ID
**************************************************************************************************/
AS 

BEGIN
	SET NOCOUNT ON; 
	/*test
    DECLARE @AGPropertyID INT = 100518
	DECLARE @subscriptionid INT = NULL
	*/	

	DECLARE @advancedreporttype	int
	DECLARE @userguid uniqueidentifier
	DECLARE @ListingID int
	DECLARE @AGPropertyIDAlt int

	DECLARE @recct int
	DECLARE @recnumtoreturn int
 	/* ======================================================================================== */
	--Set the proper dates


	DECLARE @report int
	DECLARE @frequency int

	
	--start and end dates
	DECLARE @StartYMDID int
	DECLARE @EndYMDID int
    


	DECLARE @dayofweek int
	DECLARE @offset int


	
	SET @report = NULL
	SET @frequency = NULL


	--last three months (this month inclusive to yesterday)
	--SET @StartYMDID  =  CAST(CONVERT(VARCHAR,DATEADD(MONTH,DATEDIFF(MONTH,0,GETDATE()) - 2,0),112) AS INT)
	--SET @EndYMDID =  CAST(CONVERT(VARCHAR,GETDATE() - 1,112) AS INT)

	--Set dates to Monthly (last month)
	--Monthly
	SET @StartYMDID = CAST(CONVERT(VARCHAR(8),DATEADD(m,-1,DATEADD(m,DATEDIFF(m,0,GETDATE()),0)),112) AS INT)
	SET @EndYMDID = CAST(CONVERT(VARCHAR(8),DATEADD(d,-1,DATEADD(m,1,DATEADD(m,-1,DATEADD(m,DATEDIFF(m,0,GETDATE()),0)))),112) AS INT)


	if (@subscriptionid IS NOT NULL) AND (@subscriptionid > 0)
		BEGIN
			SET @report = (SELECT Report FROM dbo.DashboardSubscriptions WITH (NOLOCK) WHERE SubscriptionID = @subscriptionid)
			SET @frequency = (SELECT Frequency FROM dbo.DashboardSubscriptions WITH (NOLOCK) WHERE SubscriptionID = @subscriptionid)
			SET @advancedreporttype = (SELECT AdvancedReportType FROM dbo.DashboardSubscriptions WITH (NOLOCK) WHERE SubscriptionID = @subscriptionid)
		END







	if @advancedreporttype = 2 OR @advancedreporttype = 3
		BEGIN
			--reset the dates to last three months (this month inclusive to yesterday)
			SET @StartYMDID = CAST(CONVERT(VARCHAR(8),DATEADD(m,-1,DATEADD(m,DATEDIFF(m,0,GETDATE()),0)),112) AS INT)		--first day of last month
			SET @EndYMDID = CAST(CONVERT(VARCHAR(8),DATEADD(d,-1,DATEADD(m,1,DATEADD(m,-1,DATEADD(m,DATEDIFF(m,0,GETDATE()),0)))),112) AS INT)		--last day of last month



			if @frequency = 2
				BEGIN
					--reset the dates to the Weekly dates
					SET @dayofweek = DATEPART(dw,GETDATE())
					SET @EndYMDID = CONVERT(int, Convert(varchar(10),DATEADD(dd,@dayofweek * (-1),GETDATE()),112))
					SET @StartYMDID = CONVERT(int, Convert(varchar(10),DATEADD(dd,-6,CONVERT(datetime,CONVERT(varchar(8),@endYMDID))),112))
				END


			--reset the dates to the Daily dates
			if @frequency = 1
				BEGIN
					SET @StartYMDID = CONVERT(int, Convert(varchar(10),DATEADD(dd,-1,GETDATE()),112))
					SET @EndYMDID = CONVERT(int, Convert(varchar(10),DATEADD(dd,-1,GETDATE()),112))
				END
		END

	if (@subscriptionid IS NULL) OR (@subscriptionid = 0)		--this denotes a SEND_TEST situation, where Frequency is not known (since not an input parameter) and SubscriptionID is blank, so can't get from that record,either.
		BEGIN
			SET @StartYMDID = CONVERT(int, Convert(varchar(10),CONVERT(datetime,'01/01/2013'),112))
			SET @EndYMDID = CAST(CONVERT(VARCHAR(8),DATEADD(d,-1,DATEADD(m,1,DATEADD(m,-1,DATEADD(m,DATEDIFF(m,0,GETDATE()),0)))),112) AS INT)
		END

	--SELECT @StartYMDID AS StartYMDID
	--SELECT @EndYMDID AS EndYMDID


	--PRINT '@startYMDID = ' + CONVERT(varchar(30),@startYMDID)
	--PRINT '@endYMDID = ' + CONVERT(varchar(30),@endYMDID)


	/* ======================================================================================== */
	BEGIN TRY
		DROP TABLE #tmpfinalresultset
	END TRY
	BEGIN CATCH
	END CATCH

	CREATE TABLE #tmpfinalresultset
	(
	YMDID	int
	,AGPropertyID	int
	,ListingID	int
	,PropertyName varchar(100)
	,PropertyAddress	varchar(80)
	,PropertyCity		varchar(40)
	,PropertyState		varchar(20)
	,ZipCode		varchar(20)
	,LeadDate		datetime
	,PropectEmail	varchar(255)
	,LeadName	varchar(80)
	,Phone	varchar(30)
	,MoveMonth	varchar(15)
	,Bedrooms	varchar(50)
	,Bathrooms	varchar(50)
	,Comments	varchar(2500)
	,ExternalID	varchar(50)
	)

	/* ======================================================================================== */
	BEGIN TRY
		DROP TABLE #tmpmasterlist
	END TRY
	BEGIN CATCH
	END CATCH



	--Get unified data from ApartmentGuide.Dimension.AGRentCombinedDimensionListings
	--;WITH cte AS
	--(
	--	SELECT DISTINCT ListingID FROM Rentpath.Dimension.Listings dl WITH (NOLOCK)
	--)
		SELECT dlr.ListingID
		, dlr.PropertyIDAG AS PropertyIDAG		--AGPropertyID on the AG website line
		, dlr.PropertyIDRent AS PropertyIDAGRent		--AGPropertyID on the Rent website line
		--, ISNULL(dlag.AGPropertyID,dlr.AGPropertyID) AS AGPropertyID
		--, dlr.RentPropertyID
		--, rdl.PropertyID AS RentComPropertyID
		, dlr.PropertyName  AS PropertyName
		, dlr.PropertyAddress  AS PropertyAddress		--base it on whether name was there to see where to get from.  Keeps consistency.
		, dlr.PropertyCity  AS PropertyCity
		, dlr.PropertyState  AS PropertyState
		, dlr.PropertyZipCode  AS ZipCode
		, dlr.MgtCoIDAG AS MgtCoIDAG
		, dlr.MgtCoIDRent AS MgtCoIDRent
		, ISNULL(dlr.StatusIDAG,0) AS StatusIDAG 
		, ISNULL(dlr.StatusIDRent,0) AS StatusIDRent
		, dlr.ExternalID AS ExternalID
		INTO #tmpmasterlist
		FROM Rentpath.Dimension.Listings AS dlr
		--FROM cte
		--LEFT OUTER JOIN ApartmentGuide.Dimension.AGRentCombinedDimensionListings dlag WITH (NOLOCK)
		--	ON dlag.ListingID = cte.ListingID AND dlag.Website = 'AG'
		--LEFT OUTER JOIN ApartmentGuide.Dimension.AGRentCombinedDimensionListings dlr WITH (NOLOCK)
		--	ON dlr.ListingID = cte.ListingID AND dlr.Website = 'Rent'
		--LEFT OUTER JOIN RentCom.Dimension.Listings rdl WITH (NOLOCK)
		--	ON rdl.ListingID = cte.ListingID
		ORDER BY dlr.ListingID

	--SELECT * FROM #tmpmasterlist
	/* ======================================================================================== */

	BEGIN TRY
		DROP TABLE #tmppropertylist
	END TRY
	BEGIN CATCH
	END CATCH

	CREATE TABLE #tmppropertylist
	(UserGUID	uniqueidentifier
	,AGPropertyID	int
	,RentPropertyID	int
	,PropertyName	varchar(2000)
	,PropertyCity	varchar(2000)
	,PropertyState	varchar(100)
	,PropertyZip	int
	,AGStatus		int
	,RentStatus		int
	,TotalUserCanSee	int
	,ProjectID		varchar(128)
	,MarketID		varchar(128)
	,AxioActive		int
	)
	
	--if only giving PropertyID
	if @subscriptionid IS NULL AND @advancedreporttype IS NULL
		BEGIN
			INSERT INTO #tmppropertylist
			VALUES (NULL,@AGPropertyID,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL)
		END

	--Running through AdvancedReport process - gives subscriptionID
	if (@subscriptionid IS NOT NULL) AND (@subscriptionid > 0)			--subscriptionid not null takes precedence over advancedreporttype, since we can get that from the subscription record
		BEGIN
			SET @userguid = (SELECT Creator FROM dbo.DashboardSubscriptions WITH (NOLOCK) WHERE SubscriptionID = @subscriptionid)			--'CBF5E01E-ED26-4280-882F-5F742D2514DD'


			--get list of allowed PropertyID values for the user on this subscription
			INSERT INTO 
			#tmppropertylist
			EXEC Reports.rpt_PropertyDisplay @userguid,300000,NULL
		END


	--if has specific property id, delete all the ones but that property from the table
	if @AGPropertyID IS NOT NULL AND @AGPropertyID > 0
		BEGIN
			DELETE FROM #tmppropertylist WHERE AGPropertyID <> @AGPropertyID
		END


	--SELECT * FROM #tmppropertylist
	/* ======================================================================================== */

	DECLARE myCursorVariable CURSOR FOR  
	   SELECT tml.ListingID, a.AGPropertyID 
	   FROM #tmppropertylist a WITH (NOLOCK)
	   LEFT OUTER JOIN #tmpmasterlist tml WITH (NOLOCK)
			ON tml.PropertyIDAG = a.AGPropertyID

	OPEN myCursorVariable  

	-- Loop through all the files for the database  
	FETCH NEXT FROM myCursorVariable INTO @ListingID, @AGPropertyIDAlt

	WHILE @@FETCH_STATUS = 0  
		BEGIN  


			INSERT INTO #tmpfinalresultset
			SELECT  @EndYMDID AS YMDID
					, @AGPropertyIDAlt AS AGPropertyID
					, ar.ListingID
					,tml.PropertyName
					,tml.PropertyAddress
					,tml.PropertyCity
					,tml.PropertyState
					,tml.ZipCode
				   ,CONCAT(CAST(ar.WhenEntered AS DATE),' ',LTRIM(STUFF(RIGHT(CONVERT(CHAR(26),ar.WhenEntered,109),14),6,7,' '))) AS LeadDate
				   ,ar.Email AS ProspectEmail
				   ,CONCAT(ar.FirstName,' ',ar.LastName) AS LeadName
				   ,ISNULL(COALESCE(ar.DayPhone,ar.NightPhone),0) AS Phone
				   ,ar.MoveMonth
				   ,ISNULL(ar.bedrooms,'') AS Bedrooms
				   ,ISNULL(ar.bathrooms,'') AS Bathrooms
				   ,REPLACE(REPLACE(ar.Comments,CHAR(13),''),CHAR(10),'') AS Comments
				   ,tml.ExternalID
			FROM    Rentpath.[Mart].[EmailLeads] AS ar WITH (NOLOCK)
			LEFT OUTER JOIN #tmpmasterlist tml WITH (NOLOCK)
				ON tml.ListingID = ar.ListingID
			WHERE   ar.YMDID BETWEEN @StartYMDID AND @EndYMDID
					AND ar.ListingID = @ListingID
					AND ar.Status = 1
			ORDER BY WhenEntered DESC




			FETCH NEXT FROM myCursorVariable INTO @ListingID, @AGPropertyIDAlt
		END 

	CLOSE myCursorVariable  
	DEALLOCATE myCursorVariable 


	--Find the record count for the final resultset
	SELECT @recct = COUNT(*) FROM #tmpfinalresultset

	--Set the number of records to return (all for subscription, only most recent 10 if SEND_TEST situation (SubscriptionID is NULL or 0)
	if (@subscriptionid IS NULL) OR (@subscriptionid = 0)		--this denotes a SEND_TEST situation, where Frequency is not known (since not an input parameter) and SubscriptionID is blank, so can't get from that record,either.
		BEGIN
			SET @recnumtoreturn = 10
		END
	else
		BEGIN
			SET @recnumtoreturn = @recct
		END

	--Now return the records (whether 10 or all) and sort ascending
	SELECT * FROM 
	(
		SELECT TOP (@recnumtoreturn)				--either all or first 10
		* FROM #tmpfinalresultset
		ORDER BY YMDID, AGPropertyID, LeadDate DESC		--just for the TOP N, so if SEND_TEST, will get most recent 10.  If all, then doesn't matter
	) AS a
	ORDER BY YMDID, AGPropertyID, LeadDate			--show ascending

	SET NOCOUNT OFF;

	end

	


/*******************************************************************************************************************************/
/*******************************************************************************************************************************/
/*******************************************************************************************************************************/
/*******************************************************************************************************************************/

/****** Object:  StoredProcedure [Reports].[rpt_PropertyLeadsSummary]    Script Date: 9/9/2015 2:53:13 PM ******/
SET ANSI_NULLS ON







GO
/****** Object:  StoredProcedure [Reports].[rpt_PropertyIDAGDropdown]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Reports].[rpt_PropertyIDAGDropdown]
/*******************************************************************************************
* Name:	Reports.rpt_PropertyIDAGDropdown
* ------------------------------------------------------------------------------------------
* Desc:	List of property ids with All
* ------------------------------------------------------------------------------------------
* Test:	exec Reports.rpt_PropertyIDAGDropdown
* ------------------------------------------------------------------------------------------
* Hist:	01	06/29/2016		dwert		Ticket 21200, initial version
********************************************************************************************/
AS 
	SELECT  0 AS PropertyIDAG
		   ,'<All>' AS PropertyName
	UNION
	SELECT  PropertyIDAG
		   ,PropertyName
	FROM    Dimension.Listings
	ORDER BY PropertyIDAG



GO
/****** Object:  StoredProcedure [Reports].[rpt_PropertyLeadbyHourOrDay]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Reports].[rpt_PropertyLeadbyHourOrDay]
    (
      @ListingID INT ,
      @StartDate DATETIME ,
      @EndDate DATETIME ,
      @TimeGrain INT
    ) 

/****************************************************************************************************************************************************
*
* Name:	Reports.rpt_PropertyLeadbyHourOrDay
*
* Desc:	The detail data for the Property Lead Summary report
*
* Test:	EXEC Reports.rpt_PropertyLeadbyHourOrDay 10010, '11/01/2013', '12/31/2013',0,1
	
* Note: This report uses the logic from Reports.rpt_PropertyLeadbyHour /Reports.rpt_PropertyLeadbyDay_WithMobile except it passes in
*		CBSACode(s) instead of AG MarketCode(s). Instead of having two separate procedures that basically do the same thing, I have combined
*		it into one using the @TimeGrain parameter where 0 = Hour and 1 = Day.
*
* Hist:	01	01/08/2014	Don Wert		Initial Version, ticket 13853
*		02	03/22/2014	Sarah Mims		Modified Conformed.LeadSource JOIN to depend on website because the Rent data is now there 
*		03	12/15/2014	Shetal Gandhi	Removed references to @Website in Code
*		04  09/16/2016	Clinton Woody	changed warexhouse donformed.leadsource to rentpath.dimension.leadtypes # 23874
*		05	10/25/2016	Bob Langley		Ticket 24212 - Changed to add MissedCalls to leads (where does connectedcalls)
*	    06	02/24/2017	Kimbo Morrow	No case - Changed website to businessunit since I changed the column name in my RentPath.Dimension.LeadTypes table replacing the old.
******************************************************************************************************************************************************/
AS
    SET NOCOUNT ON;

    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    DECLARE @TrackDate DATETIME ,
        @LengthInSeconds INT ,
        @DatabaseName VARCHAR(128);
                
    SET @TrackDate = GETDATE();
    SET @LengthInSeconds = 0;
    SET @DatabaseName = DB_NAME();        
		
    EXEC DBAUtility.dbo.pr_Logging_StoredProcsNoTemp @DatabaseName = @DatabaseName, -- varchar(128)
        @ProcName = 'Reports.rpt_PropertyLeadbyHourOrDay', -- varchar(128)
        @StepName = 'Execute Procedure', -- varchar(128)
        @VariableStates = '', -- varchar(500)
        @LengthInSeconds = @LengthInSeconds, -- int
        @Comments = 'Execute Procedure'; -- varchar(500)

---------------------------------------------------------------------------------------------------
--Declare and set variables
---------------------------------------------------------------------------------------------------
    BEGIN
	/*test
	DECLARE	@ListingID INT
	   ,@StartDate DATETIME
	   ,@EndDate DATETIME
	   ,@TimeGrain INT

	SELECT	@ListingID = 186853
		   ,@StartDate = '11/01/2013'
		   ,@EndDate = '12/31/2013'
		   ,@TimeGrain = 1
	*/

        DECLARE @iStartYMDID INT ,
            @iEndYMDID INT ,
            @LastYearStartYMDID INT ,
            @LastYearEndYMDID INT;

        SET @iStartYMDID = ( SELECT YMDID
                             FROM   DBAUtility.Dimension.Dates
                             WHERE  YMDDate = @StartDate
                           );
        PRINT @iStartYMDID;		
        SET @iEndYMDID = ( SELECT   YMDID
                           FROM     DBAUtility.Dimension.Dates
                           WHERE    YMDDate = @EndDate
                         );
                     
        SET @LastYearStartYMDID = @iStartYMDID - 10000;
        SET @LastYearEndYMDID = @iEndYMDID - 10000;
                                          
	------------------------------------------------------------------------------------------
	--Select out result set. 
	------------------------------------------------------------------------------------------

        SELECT  type ,
                CASE WHEN @TimeGrain = 0 THEN iv.HourName
                     ELSE iv.DayOfWeekName
                END AS TimeGrainName ,
                CASE WHEN @TimeGrain = 0 THEN iv.HourOfDay
                     ELSE iv.DayOfWeekNum
                END AS TimeGrainNum ,
                LEFT(YMDID, 6) AS yearMonthInt ,
                LEFT(DATENAME(MONTH, CAST(YMDID AS VARCHAR(8))), 3) + ' '
                + LEFT(YMDID, 4) AS MonthAndYear ,
                COUNT(uid) AS LeadCount
        FROM    ( SELECT    c.YMDID ,
                            'Call' + CallID uid ,
                            lt.LeadMediumDesc + ' ' + lt.LeadTypeDesc AS type ,
                            DATEPART(HOUR, c.CallStartDateTime) AS HourOfDay ,
                            CAST(DATEPART(HOUR, c.CallStartDateTime) % 12 AS CHAR(2))
                            + CASE DATEPART(HOUR, c.CallStartDateTime) / 12
                                WHEN 1 THEN ' pm'
                                ELSE ' am'
                              END AS HourName ,
                            LEFT(DATENAME(WEEKDAY, c.CallStartDateTime), 3) AS DayOfWeekName ,
                            DATEPART(WEEKDAY, c.CallStartDateTime) AS DayOfWeekNum
                  FROM      ApartmentGuide.Fact.AGRentPhoneLeads AS c --ApartmentGuide.dbo.CallsApartmentGuide AS c
                            JOIN ApartmentGuide.Dimension.AGRentCombinedDimensionListings
                            AS dl ON dl.ListingID = c.ListingID
                                     AND dl.Website = c.Website
                            LEFT OUTER JOIN DBAUtility.dbo.ZipCBSA AS zc ON dl.ZipCode = zc.ZIPCode
                            LEFT OUTER JOIN RentPath.Dimension.leadtypes lt --(
    --                           SELECT   LTRIM(SUBSTRING(LeadSourceBusinessKey,CHARINDEX('-',LeadSourceBusinessKey) + 1,LEN(LeadSourceBusinessKey))) AS LeadType
    --                                   ,DBSourceSystemDesc
    --                                   ,CASE WHEN dss.DBSourceSystemKey = 1 THEN 'AG'
    --                                         ELSE 'Rent'
    --                                    END																											AS Website
    --                                   ,LeadTypeDesc
    --                                   ,LeadMediumDesc
    --                           FROM     Warexhouse.Conformed.LeadSource AS ls
    --                           JOIN     Warexhouse.Conformed.DBSourceSystem AS dss
    --                                    ON ls.DBSourceSystemKey = dss.DBSourceSystemKey
    --                           WHERE    dss.DBSourceSystemKey IN (1,6)
    --                                    AND ls.LeadTypeDesc = 'Phone'
				--			 ) lt
                            ON c.CallType = lt.LeadType
                               AND c.Website = lt.BusinessUnit
                               AND lt.DBSourceSystemKey IN ( 1, 6 )
                               AND lt.LeadTypeDesc = 'Phone'
                  WHERE     dl.ListingID = @ListingID
                            AND c.CallStatus IN (1,2,3)			--Ticket 24212 added Missed calls in with the connected
                            AND c.YMDID BETWEEN @iStartYMDID AND @iEndYMDID
                  UNION
                  SELECT    fwf.YMDID ,
                            'Email' + CAST(fwf.LeadID AS VARCHAR(10)) uid ,
                            lt.LeadMediumDesc + ' ' + lt.LeadTypeDesc AS TYPE ,
                            DATEPART(HOUR, fwf.WhenEntered) AS HourOfDay ,
                            CAST(DATEPART(HOUR, fwf.WhenEntered) % 12 AS CHAR(2))
                            + CASE DATEPART(HOUR, fwf.WhenEntered) / 12
                                WHEN 1 THEN ' pm'
                                ELSE ' am'
                              END AS HourName ,
                            LEFT(DATENAME(WEEKDAY, fwf.WhenEntered), 3) AS DayOfWeekName ,
                            DATEPART(WEEKDAY, fwf.WhenEntered) AS DayOfWeekNum
                  FROM      ApartmentGuide.Fact.AGRentWebFormLeads AS fwf --ApartmentGuide.dbo.FactWebFormLeads AS fwf
                            JOIN ApartmentGuide.Dimension.AGRentCombinedDimensionListings
                            AS dl ON dl.ListingID = fwf.ListingID
                                     AND fwf.Website = dl.Website
                            LEFT OUTER JOIN DBAUtility.dbo.ZipCBSA AS zc ON dl.ZipCode = zc.ZIPCode
                            LEFT OUTER JOIN RentPath.Dimension.leadtypes lt --(
				--			  SELECT   LTRIM(SUBSTRING(LeadSourceBusinessKey,CHARINDEX('-',LeadSourceBusinessKey) + 1,LEN(LeadSourceBusinessKey))) AS LeadType
    --                                   ,DBSourceSystemDesc
    --                                   ,CASE WHEN dss.DBSourceSystemKey = 1 THEN 'AG'
    --                                         ELSE 'Rent'
    --                                    END																											AS Website
    --                                   ,LeadTypeDesc
    --                                   ,LeadMediumDesc
    --                           FROM     Warexhouse.Conformed.LeadSource AS ls
    --                           JOIN     Warexhouse.Conformed.DBSourceSystem AS dss
    --                                    ON ls.DBSourceSystemKey = dss.DBSourceSystemKey
    --                           WHERE    dss.DBSourceSystemKey IN (1,6)
    --                                    AND ls.LeadTypeDesc = 'Email'
				--			 ) lt
                            ON fwf.Source = lt.LeadType
                               AND fwf.Website = lt.BusinessUnit
                               AND lt.DBSourceSystemKey IN ( 1, 6 )
                               AND lt.LeadTypeDesc = 'Email'
                  WHERE     dl.ListingID = @ListingID
                            AND fwf.YMDID BETWEEN @iStartYMDID AND @iEndYMDID
                            AND fwf.Status = 1
                ) iv
        GROUP BY CASE WHEN @TimeGrain = 0 THEN iv.HourName
                      ELSE iv.DayOfWeekName
                 END ,
                CASE WHEN @TimeGrain = 0 THEN iv.HourOfDay
                     ELSE iv.DayOfWeekNum
                END ,
                type ,
                LEFT(YMDID, 6) ,
                LEFT(DATENAME(MONTH, CAST(YMDID AS VARCHAR(8))), 3) + ' '
                + LEFT(YMDID, 4)	

	------------------------------------------------------------------------------------------------------------
	--Union in Previous Year All Leads but set the YearMonthInt and MonthAndYear columns to present year 
	--so that the data appears in the chart correctly. If you don't like this, take it up with David McFarland.
	------------------------------------------------------------------------------------------------------------	   
        UNION
        SELECT  'Previous Year All Leads' AS TYPE ,
                'x' AS TimeGrainName ,
                25 AS TimeGrainNum ,
                CAST(LEFT(CONVERT(VARCHAR(8), DATEADD(YEAR, 1,
                                                      CAST(ml.YearMonth AS VARCHAR(6))
                                                      + '01'), 112), 6) AS INT) AS yearMonthint ,
                LEFT(DATENAME(MONTH, CAST(ml.YearMonth AS VARCHAR(6)) + '01'),
                     3) + ' ' + LEFT(CONVERT(VARCHAR(8), DATEADD(YEAR, 1,
                                                              CAST(ml.YearMonth AS VARCHAR(6))
                                                              + '01'), 112), 4) AS MonthAndYear ,
                SUM(ml.AllLeads) AS LeadCount
        FROM    ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
                JOIN ApartmentGuide.Mart.AGRentCombinedMartListings AS ml --ApartmentGuide.Mart.Listings AS ml
                ON dl.ListingID = ml.ListingID
                   AND ml.Website = dl.Website
        WHERE   ml.YMDID BETWEEN @LastYearStartYMDID
                         AND     @LastYearEndYMDID
                AND dl.ListingID = @ListingID
        GROUP BY ml.YearMonth
        ORDER BY CASE WHEN @TimeGrain = 0 THEN iv.HourOfDay
                      ELSE iv.DayOfWeekNum
                 END ,
                type;							

    END;              

    SET NOCOUNT OFF;





GO
/****** Object:  StoredProcedure [Reports].[rpt_PropertyLeadbyHourOrDay_RCTest]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

Create PROCEDURE [Reports].[rpt_PropertyLeadbyHourOrDay_RCTest] (
	@ListingID INT
   ,@StartDate DATETIME
   ,@EndDate DATETIME
   ,@TimeGrain INT
  ) 

/****************************************************************************************************************************************************
*
* Name:	Reports.rpt_PropertyLeadbyHourOrDay
*
* Desc:	The detail data for the Property Lead Summary report
*
* Test:	EXEC Reports.rpt_PropertyLeadbyHourOrDay 10010, '11/01/2013', '12/31/2013',0,1
	
* Note: This report uses the logic from Reports.rpt_PropertyLeadbyHour /Reports.rpt_PropertyLeadbyDay_WithMobile except it passes in
*		CBSACode(s) instead of AG MarketCode(s). Instead of having two separate procedures that basically do the same thing, I have combined
*		it into one using the @TimeGrain parameter where 0 = Hour and 1 = Day.
*
* Hist:	01	01/08/2014	Don Wert		Initial Version, ticket 13853
*		02	03/22/2014	Sarah Mims		Modified Conformed.LeadSource JOIN to depend on website because the Rent data is now there 
*		03	12/15/2014	Shetal Gandhi	Removed references to @Website in Code
******************************************************************************************************************************************************/
AS 
SET NOCOUNT ON

	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    DECLARE @TrackDate DATETIME
       ,@LengthInSeconds INT
       ,@DatabaseName VARCHAR(128)
                
    SET @TrackDate = GETDATE()
    SET @LengthInSeconds = 0
    SET @DatabaseName = DB_NAME()        
		
    EXEC DBAUtility.dbo.pr_Logging_StoredProcsNoTemp 
        @DatabaseName = @DatabaseName
       , -- varchar(128)
        @ProcName = 'Reports.rpt_PropertyLeadbyHourOrDay'
       , -- varchar(128)
        @StepName = 'Execute Procedure'
       , -- varchar(128)
        @VariableStates = ''
       , -- varchar(500)
        @LengthInSeconds = @LengthInSeconds
       , -- int
        @Comments = 'Execute Procedure'; -- varchar(500)

---------------------------------------------------------------------------------------------------
--Declare and set variables
---------------------------------------------------------------------------------------------------
BEGIN
	/*test
	DECLARE	@ListingID INT
	   ,@StartDate DATETIME
	   ,@EndDate DATETIME
	   ,@TimeGrain INT

	SELECT	@ListingID = 186853
		   ,@StartDate = '11/01/2013'
		   ,@EndDate = '12/31/2013'
		   ,@TimeGrain = 1
	*/

	DECLARE	@iStartYMDID INT
	   ,@iEndYMDID INT
	   ,@LastYearStartYMDID INT
	   ,@LastYearEndYMDID INT

	SET @iStartYMDID = (
						SELECT	YMDID
						FROM	DBAUtility.Dimension.Dates
						WHERE	YMDDate = @StartDate
					   )
	PRINT @iStartYMDID		
	SET @iEndYMDID = (
					  SELECT	YMDID
					  FROM		DBAUtility.Dimension.Dates
					  WHERE		YMDDate = @EndDate
					 )
                     
	SET @LastYearStartYMDID = @iStartYMDID - 10000
	SET @LastYearEndYMDID = @iEndYMDID - 10000
                                          
	------------------------------------------------------------------------------------------
	--Select out result set. 
	------------------------------------------------------------------------------------------

	SELECT	TYPE
		   ,CASE WHEN @TimeGrain = 0 THEN iv.HourName
				 ELSE iv.DayofWeekName
			END AS TimeGrainName
		   ,CASE WHEN @TimeGrain = 0 THEN iv.HourOfDay
				 ELSE iv.DayofWeekNum
			END AS TimeGrainNum
		   ,LEFT(YMDID,6) AS yearMonthInt
		   ,LEFT(DATENAME(MONTH,CAST(YMDID AS VARCHAR(8))),3) + ' ' + LEFT(YMDID,4) AS MonthAndYear
		   ,COUNT(uid) AS LeadCount
	FROM	(
			 SELECT	c.ymdid
				   ,'Call' + callid uid
				   ,lt.LeadMediumDesc + ' ' + lt.LeadTypeDesc AS type
				   ,DATEPART(hour,c.CallStartDateTime) AS HourOfDay
				   ,CAST(DATEPART(hour,c.CallStartDateTime) % 12 AS CHAR(2)) + CASE DATEPART(hour,c.CallStartDateTime) / 12
																				 WHEN 1 THEN ' pm'
																				 ELSE ' am'
																			   END AS HourName
				   ,LEFT(DATENAME(weekday,c.CallStartDateTime),3) AS DayOfWeekName
				   ,DATEPART(weekday,c.CallStartDateTime) AS DayOfWeekNum
			 FROM	ApartmentGuide.fact.AGRentPhoneLeads AS c  --ApartmentGuide.dbo.CallsApartmentGuide AS c
			 JOIN 	ApartmentGuide.Dimension.AGRentCombinedDimensionListingsRCTest AS dl
					ON dl.listingid = c.listingid
					AND dl.Website = c.Website
			 LEFT OUTER JOIN DBAUtility.dbo.ZipCBSA AS zc
					ON dl.ZipCode = zc.ZIPCode
			 LEFT OUTER JOIN (
                               SELECT   LTRIM(SUBSTRING(LeadSourceBusinessKey,CHARINDEX('-',LeadSourceBusinessKey) + 1,LEN(LeadSourceBusinessKey))) AS LeadType
                                       ,DBSourceSystemDesc
                                       ,CASE WHEN dss.DBSourceSystemKey = 1 THEN 'AG'
                                             ELSE 'Rent'
                                        END																											AS Website
                                       ,LeadTypeDesc
                                       ,LeadMediumDesc
                               FROM     Warehouse.Conformed.LeadSource AS ls
                               JOIN     Warehouse.Conformed.DBSourceSystem AS dss
                                        ON ls.DBSourceSystemKey = dss.DBSourceSystemKey
                               WHERE    dss.DBSourceSystemKey IN (1,6)
                                        AND ls.LeadTypeDesc = 'Phone'
							 ) lt
					ON c.CallType = lt.LeadType
						AND c.Website = lt.Website
			 WHERE	dl.ListingID = @ListingID
					AND c.callstatus = 1
					AND c.ymdid BETWEEN @iStartYMDID AND @iEndYMDID
				 UNION
			 SELECT	fwf.ymdid
				   ,'Email' + CAST(fwf.leadid AS VARCHAR(10)) uid
				   ,lt.LeadMediumDesc + ' ' + lt.LeadTypeDesc AS TYPE
				   ,DATEPART(hour,fwf.whenentered) AS HourOfDay
				   ,CAST(DATEPART(hour,fwf.whenentered) % 12 AS CHAR(2)) + CASE DATEPART(hour,fwf.whenentered) / 12
																			 WHEN 1 THEN ' pm'
																			 ELSE ' am'
																		   END AS HourName
				   ,LEFT(DATENAME(weekday,fwf.whenentered),3) AS DayOfWeekName
				   ,DATEPART(weekday,fwf.whenentered) AS DayOfWeekNum
			 FROM	ApartmentGuide.fact.AGRentWebFormLeads  AS fwf --ApartmentGuide.dbo.FactWebFormLeads AS fwf
			 JOIN 	ApartmentGuide.Dimension.AGRentCombinedDimensionListingsRCTest AS dl
					ON dl.listingid = fwf.listingid
					AND fwf.Website = dl.Website
			 LEFT OUTER JOIN DBAUtility.dbo.ZipCBSA AS zc
					ON dl.ZipCode = zc.ZIPCode
			 LEFT OUTER JOIN (
							  SELECT   LTRIM(SUBSTRING(LeadSourceBusinessKey,CHARINDEX('-',LeadSourceBusinessKey) + 1,LEN(LeadSourceBusinessKey))) AS LeadType
                                       ,DBSourceSystemDesc
                                       ,CASE WHEN dss.DBSourceSystemKey = 1 THEN 'AG'
                                             ELSE 'Rent'
                                        END																											AS Website
                                       ,LeadTypeDesc
                                       ,LeadMediumDesc
                               FROM     Warehouse.Conformed.LeadSource AS ls
                               JOIN     Warehouse.Conformed.DBSourceSystem AS dss
                                        ON ls.DBSourceSystemKey = dss.DBSourceSystemKey
                               WHERE    dss.DBSourceSystemKey IN (1,6)
                                        AND ls.LeadTypeDesc = 'Email'
							 ) lt
					ON fwf.Source = lt.LeadType
						AND fwf.Website = lt.Website
			 WHERE	dl.ListingID = @ListingID
					AND fwf.ymdid BETWEEN @iStartYMDID AND @iEndYMDID
					AND fwf.status = 1

			) iv
	GROUP BY CASE WHEN @TimeGrain = 0 THEN iv.HourName
				  ELSE iv.DayofWeekName
			 END
		   ,CASE WHEN @TimeGrain = 0 THEN iv.HourOfDay
				 ELSE iv.DayofWeekNum
			END
		   ,type
		   ,LEFT(YMDID,6)
		   ,LEFT(DATENAME(MONTH,CAST(YMDID AS VARCHAR(8))),3) + ' ' + LEFT(YMDID,4)	

	------------------------------------------------------------------------------------------------------------
	--Union in Previous Year All Leads but set the YearMonthInt and MonthAndYear columns to present year 
	--so that the data appears in the chart correctly. If you don't like this, take it up with David McFarland.
	------------------------------------------------------------------------------------------------------------	   
	UNION
	SELECT	'Previous Year All Leads' AS TYPE
		   ,'x' AS TimeGrainName
		   ,25 AS TimeGrainNum
		   ,CAST(LEFT(CONVERT(VARCHAR(8),DATEADD(Year,1,CAST(ml.YearMonth AS VARCHAR(6)) + '01'),112),6) AS INT) AS yearMonthint
		   ,LEFT(DATENAME(MONTH,CAST(ml.YearMonth AS VARCHAR(6)) + '01'),3) + ' ' + LEFT(CONVERT(VARCHAR(8),DATEADD(Year,1,CAST(ml.YearMonth AS VARCHAR(6)) + '01'),112),4) AS MonthAndYear
		   ,SUM(ml.AllLeads) AS LeadCount
	FROM	ApartmentGuide.Dimension.AGRentCombinedDimensionListingsRCTest AS dl
	JOIN 	ApartmentGuide.mart.AGRentCombinedMartListingsRCTest AS ml  --ApartmentGuide.Mart.Listings AS ml
			ON dl.ListingID = ml.ListingID
			AND ml.Website = dl.Website
	WHERE	ml.YMDID BETWEEN @LastYearStartYMDID
					 AND	 @LastYearEndYMDID
			AND dl.ListingID = @ListingID
	GROUP BY ml.YearMonth
	ORDER BY CASE WHEN @TimeGrain = 0 THEN iv.HourOfDay
				  ELSE iv.DayofWeekNum
			 END
		   ,type							

END              

SET NOCOUNT OFF



GO
/****** Object:  StoredProcedure [Reports].[rpt_PropertyLeadContacts]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Reports].[rpt_PropertyLeadContacts] 
(@ListingID INT)

AS
SET NOCOUNT ON

/***********************************************************************************************************************
* Name:    Reports.rpt_PropertyLeadContacts
* Desc:    Proc grabs the lead contact by lead type for a specific property
* -----------------------------------------------------------------------------------------
* Test:    EXEC Reports.rpt_PropertyLeadContacts 1
*		   EXEC Reports.rpt_PropertyLeadContacts 187748
*		   EXEC Reports.rpt_PropertyLeadContacts 47887
* -----------------------------------------------------------------------------------------
* Notes:
* Hist:    01    02/26/2010    Mary Pollard        Initial Version
* Hist:    02    03/11/2010    Richard Chen        Listing Lead Contact only for Active listing
* Hist:    03    03/15/2011    Francine Grant      Removed list.StatusID=1
* Hist:    04    05/02/2012    Richard Chen        Ticket 9001, add property Address
*		   05	 02/01/2013	   Sarah Mims		   Ticket #11441 - modified to show CBSA instead of AG Market
*		   06    01/06/2014	   Sarah Mims		   Ticket #14141 - modified to include Rent. Added Items here because
*												   of presentation issues in report.
*		   07	 01/09/2014	   Sarah Mims		   Ticket # 13853 - added MgtCoID 
*		   08	 01/27/2014	   Sarah Mims		   Ticket # 13853 -  hardcoded Option Types for Rent
*		   09	 03/22/2014	   Sarah Mims		   Changed pull from QA to PROD. Woohoo!!!!
*          10    12/15/2014    Sarah Mims		   No ticket  - removed website parameter
*		   11	 01/02/2015	   Sarah Mims		   No ticket - added StatusID = 1 filter to final result set pull
*		   12	 01/08/2015	   Sarah Mims		   No ticket - added ListingID for grouping in report headers
************************************************************************************************************************/
-----------------------------------------------------------------------------------------
--Declare and set variables
-----------------------------------------------------------------------------------------
DECLARE @SQL VARCHAR (4000)

-----------------------------------------------------------------------------------------
--Create temp table
-----------------------------------------------------------------------------------------
CREATE TABLE #Items
(Website VARCHAR (5)
,PropertyItemDesc VARCHAR(4000)
)
-------------------------------------------------------------------------------------------
--Get AG Items for the selected listing and dump into temp table
-------------------------------------------------------------------------------------------  
INSERT INTO #Items
    SELECT  'AG' AS Website
           ,PropertyItemDesc = dbautility.dbo.fn_rtrim((
                                                      SELECT DISTINCT
                                                                UPPER(itemdescription) + ',' AS [data()]															
                                                      FROM      ApartmentGuide.Dimension.MaxPropertyListingPoints
                                                      WHERE     ListingID = @ListingID
                                                     FOR
                                                      XML PATH('')
                                                     ),',')

	

-------------------------------------------------------------------------------------------
--Get Rent Items for the selected listing and dump into temp table
-------------------------------------------------------------------------------------------  
SET @SQL = 
'SELECT ''Rent'' AS Website
,PropertyItemDesc =   dbautility.dbo.fn_rtrim((
                                 SELECT UPPER(d.OptionType) + '','' AS [data()]
                                 FROM   
								 (
                                         SELECT *
                                         FROM   OPENQUERY(ORACLEAPTG,''SELECT pl.ListingID
																		,ot.OptionType
																		FROM Properties.PropListings pl    
																		JOIN Properties.PropListOptions plo
																			ON pl.ListingID = plo.ListingID
																				AND pl.PropertyID = plo.PropertyID
																			JOIN Properties.OptionTypes ot
																				ON plo.OptionTypeID = ot.OptionTypeID
																		WHERE pl.IsActiveRent = 1
																			AND pl.ListingID = '+ CAST(@ListingID AS VARCHAR(20))+'
																			AND plo.IsActive = 1
																			AND plo.StartDate <= TRUNC(SYSDATE) AND plo.EndDate >= TRUNC(SYSDATE)
																			AND ot.OptionTypeID IN (300,302,303,304)
															'') AS o
                                        ) AS d
                                FOR
                                 XML PATH('''')
                                ),'','')'

INSERT INTO #Items
EXEC (@SQL)	
----------------------------------------------------------------
 -- Select out final result set
----------------------------------------------------------------
    SELECT list.Website
		   ,list.ListingID
		   ,i.PropertyItemDesc
		   ,zc.CBSACode            
           ,zc.CBSAName 
           ,list.PropertyName
           ,list.PropertyAddress + ' ' + list.PropertyCity + ' ' + list.PropertyState + ' ' + list.ZipCode	AS PropAddress 
           ,list.MgtCoName																					AS MgtCompany
		   ,list.MgtCoID
           ,list.WebTollFree
           ,list.LocalTestNumber
           ,list.WebTarget
           ,ISNULL(AGCTollFree,ASGTollFree)																	AS AGPrintTollFree
           ,ISNULL(AGCTarget,ASGTarget)																		AS AGPrintTarget  													
           ,CASE WHEN list.UnusedLeadEmail <> ''
                      AND list.LeadFax <> '' THEN list.UnusedLeadEmail + ', ' + list.LeadFax
                 ELSE CASE WHEN list.UnusedLeadEmail <> '' THEN list.UnusedLeadEmail
                           ELSE list.LeadFax
                      END
            END																								AS LeadContact
           ,CASE WHEN list.LeadEmailWithType <> ''
                      AND list.LeadFax <> '' THEN list.LeadEmailWithType + ', ' + list.LeadFax
                 ELSE CASE WHEN list.LeadEmailWithType <> '' THEN list.LeadEmailWithType
                           ELSE list.LeadFax
                      END
            END																								AS LeadContactWithType
    FROM    ApartmentGuide.dimension.AGRentCombinedDimensionListings AS list
    LEFT OUTER JOIN DBAUtility.dbo.ZipCBSA AS zc
            ON list.ZipCode = zc.ZIPCode
	LEFT OUTER JOIN #Items AS i
			ON list.Website = i.Website
    WHERE   list.ListingID = @ListingID
		AND list.StatusID = 1


ORDER BY Website                        

SET NOCOUNT OFF





GO
/****** Object:  StoredProcedure [Reports].[rpt_PropertyLeadContactsRCtest_deleteCR20170206]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create PROCEDURE [Reports].[rpt_PropertyLeadContactsRCtest_deleteCR20170206] 
(@ListingID INT)

AS
SET NOCOUNT ON

/***********************************************************************************************************************
* Name:    Reports.rpt_PropertyLeadContacts
* Desc:    Proc grabs the lead contact by lead type for a specific property
* -----------------------------------------------------------------------------------------
* Test:    EXEC Reports.[rpt_PropertyLeadContactsRCtest] 1
*		   EXEC Reports.[rpt_PropertyLeadContactsRCtest] 187748
*		   EXEC Reports.[rpt_PropertyLeadContactsRCtest] 47887
* -----------------------------------------------------------------------------------------
* Notes:
* Hist:    01    02/26/2010    Mary Pollard        Initial Version
* Hist:    02    03/11/2010    Richard Chen        Listing Lead Contact only for Active listing
* Hist:    03    03/15/2011    Francine Grant      Removed list.StatusID=1
* Hist:    04    05/02/2012    Richard Chen        Ticket 9001, add property Address
*		   05	 02/01/2013	   Sarah Mims		   Ticket #11441 - modified to show CBSA instead of AG Market
*		   06    01/06/2014	   Sarah Mims		   Ticket #14141 - modified to include Rent. Added Items here because
*												   of presentation issues in report.
*		   07	 01/09/2014	   Sarah Mims		   Ticket # 13853 - added MgtCoID 
*		   08	 01/27/2014	   Sarah Mims		   Ticket # 13853 -  hardcoded Option Types for Rent
*		   09	 03/22/2014	   Sarah Mims		   Changed pull from QA to PROD. Woohoo!!!!
*          10    12/15/2014    Sarah Mims		   No ticket  - removed website parameter
*		   11	 01/02/2015	   Sarah Mims		   No ticket - added StatusID = 1 filter to final result set pull
*		   12	 01/08/2015	   Sarah Mims		   No ticket - added ListingID for grouping in report headers
************************************************************************************************************************/
-----------------------------------------------------------------------------------------
--Declare and set variables
-----------------------------------------------------------------------------------------
DECLARE @SQL VARCHAR (4000)

-----------------------------------------------------------------------------------------
--Create temp table
-----------------------------------------------------------------------------------------
CREATE TABLE #Items
(Website VARCHAR (5)
,PropertyItemDesc VARCHAR(4000)
)
-------------------------------------------------------------------------------------------
--Get AG Items for the selected listing and dump into temp table
-------------------------------------------------------------------------------------------  
INSERT INTO #Items
    SELECT  'AG' AS Website
           ,PropertyItemDesc = dbautility.dbo.fn_rtrim((
                                                      SELECT DISTINCT
                                                                UPPER(itemdescription) + ',' AS [data()]															
                                                      FROM      ApartmentGuide.Dimension.MaxPropertyListingPoints
                                                      WHERE     ListingID = @ListingID
                                                     FOR
                                                      XML PATH('')
                                                     ),',')

	

-------------------------------------------------------------------------------------------
--Get Rent Items for the selected listing and dump into temp table
-------------------------------------------------------------------------------------------  
SET @SQL = 
'SELECT ''Rent'' AS Website
,PropertyItemDesc =   dbautility.dbo.fn_rtrim((
                                 SELECT UPPER(d.OptionType) + '','' AS [data()]
                                 FROM   
								 (
                                         SELECT *
                                         FROM   OPENQUERY(ORACLEAPTG,''SELECT pl.ListingID
																		,ot.OptionType
																		FROM Properties.PropListings pl    
																		JOIN Properties.PropListOptions plo
																			ON pl.ListingID = plo.ListingID
																				AND pl.PropertyID = plo.PropertyID
																			JOIN Properties.OptionTypes ot
																				ON plo.OptionTypeID = ot.OptionTypeID
																		WHERE pl.IsActiveRent = 1
																			AND pl.ListingID = '+ CAST(@ListingID AS VARCHAR(20))+'
																			AND plo.IsActive = 1
																			AND plo.StartDate <= TRUNC(SYSDATE) AND plo.EndDate >= TRUNC(SYSDATE)
																			AND ot.OptionTypeID IN (300,302,303,304)
															'') AS o
                                        ) AS d
                                FOR
                                 XML PATH('''')
                                ),'','')'

INSERT INTO #Items
EXEC (@SQL)	
----------------------------------------------------------------
 -- Select out final result set
----------------------------------------------------------------
    SELECT list.Website
		   ,list.ListingID
		   ,i.PropertyItemDesc
		   ,zc.CBSACode            
           ,zc.CBSAName 
           ,list.PropertyName
           ,list.PropertyAddress + ' ' + list.PropertyCity + ' ' + list.PropertyState + ' ' + list.ZipCode	AS PropAddress 
           ,list.MgtCoName																					AS MgtCompany
		   ,list.MgtCoID
           ,list.WebTollFree
           ,list.LocalTestNumber
           ,list.WebTarget
           ,ISNULL(AGCTollFree,ASGTollFree)																	AS AGPrintTollFree
           ,ISNULL(AGCTarget,ASGTarget)																		AS AGPrintTarget  													
           ,CASE WHEN list.UnusedLeadEmail <> ''
                      AND list.LeadFax <> '' THEN list.UnusedLeadEmail + ', ' + list.LeadFax
                 ELSE CASE WHEN list.UnusedLeadEmail <> '' THEN list.UnusedLeadEmail
                           ELSE list.LeadFax
                      END
            END																								AS LeadContact
           ,CASE WHEN list.LeadEmailWithType <> ''
                      AND list.LeadFax <> '' THEN list.LeadEmailWithType + ', ' + list.LeadFax
                 ELSE CASE WHEN list.LeadEmailWithType <> '' THEN list.LeadEmailWithType
                           ELSE list.LeadFax
                      END
            END																								AS LeadContactWithType
    --FROM    ApartmentGuide.dimension.AGRentCombinedDimensionListings AS list
    FROM    ApartmentGuide.dimension.AGRentCombinedDimensionListingsRCTest AS list
    LEFT OUTER JOIN DBAUtility.dbo.ZipCBSA AS zc
            ON list.ZipCode = zc.ZIPCode
	LEFT OUTER JOIN #Items AS i
			ON list.Website = i.Website
    WHERE   list.ListingID = @ListingID
		AND list.StatusID = 1


ORDER BY Website                        

SET NOCOUNT OFF





GO
/****** Object:  StoredProcedure [Reports].[rpt_PropertyLeadDetails]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Reports].[rpt_PropertyLeadDetails]
    (
      @startdate DATETIME ,
      @enddate DATETIME,
	  @Mgtcoid INT ,
      @listingID INT 
    ) 

/**************************************************************************************************
* Name:	[Reports].[rpt_PropertyLeadDetails]
*-------------------------------------------------------------------------------------------------
* Desc:	The detail data for the Property Lead
*-------------------------------------------------------------------------------------------------
* Test:	EXEC [Reports].[rpt_PropertyLeadDetails]  '08/01/2015', '08/31/2015', 17565,0
*		EXEC [Reports].[rpt_PropertyLeadDetails]  '08/01/2015', '08/31/2015', 0,0
*-------------------------------------------------------------------------------------------------
* Hist:	01	Richard Chen	Initial Version, ticket 20793, AG and Rent Lead Breakdown for Sale
* Hist:	02	Shetal Gandhi	Ticket 21877 - Added AdvertisingStatus from Salesforce to Results, also 
*							modified to include all properties during the timeframe selected
* Hist: 03	Colleen Rocks	Ticket 23452; update SFDCCommunityID to SFPropertyAcctID
* Hist: 04	10/29/2016		Bob Langley			Ticket 24212 - Changed to add MissedCalls to leads (where does connectedcalls)
*****************************************************************************************************/
AS 
    SET NOCOUNT ON

    BEGIN
	-------------------------------------------------------------------------------------------------------------------
	--Declare and set variables
	-------------------------------------------------------------------------------------------------------------------

	/*test
	DECLARE	@ListingID INT
			,@StartDate	DATETIME
			,@EndDate	DATETIME
		       

	SELECT	@ListingID = 84736
			,@StartDate = '12/01/2012'
			,@EndDate = '01/14/2014'
			
	*/
BEGIN TRY
DROP TABLE #Leads
END TRY
BEGIN CATCH 
END CATCH


SELECT *
INTO #Leads
FROM (
        SELECT  [Site] = 'Apartmentguide.com' ,
                DeliverMethod = 'Email Lead' ,
                l.ymdid ,
                dl.PropertyName ,
                dl.PropertyIDAG ,
                dl.PropertyIDRent ,
                l.Listingid ,
                LeadDateTime = WhenEntered ,
                source ,
                LeadSubmitter = l.email ,
                pagetype ,
                LeadContents = comments,
				device= CASE WHEN source IN ('AGMOBILE','ANDROIDTAB','KindleAG','ANDROID','IPAD','IPHONE','M.RENTALS','ANDROIDRT','IPHONERENTALS','ANDROIDRENT','IPADRENT','IPHONERENT') THEN 'Mobile'
				             WHEN source IN ('RENT','LOVELY','MICROSITE','CAMPUSHOMESONLINE','VAST','AG','METRO','HOOD','AIMCO','POPPINS','RENTALS','RENTALHOUSES','OODLE','HOTPADS','AGLUXURY','TRULIA','ZILLOW','FEED_RDT','FEED_YARDIRC') THEN 'Desktop'
                             ELSE 'Unknown' END,
				vsfc.Joint_Advertising__c AS AdvertisingStatus                           
        FROM    ApartmentGuide.dbo.FactWebFormLeads l WITH ( NOLOCK )
                JOIN rentpath.dimension.listings dl WITH ( NOLOCK ) ON l.listingid = dl.listingid
                                                              AND ( dl.mgtcoidAG = @Mgtcoid
                                                              OR dl.MgtCoIDRent = @Mgtcoid
                                                              OR dl.MgtCoIDAG
                                                              + dl.MgtCoIDRent = @Mgtcoid
                                                              )
                                                              AND ( dl.listingid = @listingid
                                                              OR @listingid = 0
                                                              )
				LEFT JOIN Salesforce.dbo.VW_SalesForceCommunity AS vsfc
					ON vsfc.PropAccountID = dl.SFPropertyAcctID
        WHERE   status = 1
                AND l.ymdid BETWEEN CAST(CONVERT(VARCHAR(8), @startdate, 112) AS INT)
                            AND     CAST(CONVERT(VARCHAR(8), @enddate, 112) AS INT)
        UNION
        SELECT  [Site] = 'rent.com' ,
                DeliverMethod = 'Email Lead' ,
                l.ymdid ,
                dl.PropertyName ,
                dl.PropertyIDAG ,
                dl.PropertyIDRent ,
                l.Listingid ,
                LeadDateTime = WhenEntered ,
                source ,
                LeadSubmitter = l.email ,
                pagetype ,
                LeadContents = comments,
				device= CASE WHEN source IN ('ANDROIDRENT','IPADRENT','IPHONERENT') THEN 'Mobile'
				             WHEN source IN ('RENT') THEN 'Desktop'
                             ELSE 'Unknown' END,
				vsfc.Joint_Advertising__c AS AdvertisingStatus   
        FROM    RentCom.Fact.EmailsRentCom l WITH ( NOLOCK )
                JOIN rentpath.dimension.listings dl WITH ( NOLOCK ) ON l.listingid = dl.listingid
                                                              AND ( dl.mgtcoidAG = @Mgtcoid
                                                              OR dl.MgtCoIDRent = @Mgtcoid
                                                              OR dl.MgtCoIDAG
                                                              + dl.MgtCoIDRent = @Mgtcoid
                                                              )
                                                              AND ( dl.listingid = @listingid
                                                              OR @listingid = 0
                                                              )
				LEFT JOIN Salesforce.dbo.VW_SalesForceCommunity AS vsfc
					ON vsfc.PropAccountID = dl.SFPropertyAcctID
        WHERE   status = 1
                AND l.ymdid BETWEEN CAST(CONVERT(VARCHAR(8), @startdate, 112) AS INT)
                            AND     CAST(CONVERT(VARCHAR(8), @enddate, 112) AS INT)
        UNION
        SELECT  [Site] = 'Apartmentguide.com' ,
                DeliverMethod = 'Phone Lead' ,
                l.ymdid ,
                dl.PropertyName ,
                dl.PropertyIDAG ,
                dl.PropertyIDRent ,
                l.ListingID ,
                LeadDateTime = CallStartDateTime ,
                CallType ,
                LeadSubmitter = CallerPhoneNumber ,
                pageType = '' ,
                LeadContents = AudioURL,
				device= CASE WHEN calltype IN ('Web','RENT_mobile','RENT_mobiles','MobileSEM','TPLMobileSem','TPLWeb') THEN 'Mobile'
				             WHEN calltype IN ('AGC','ASG','CRAIGSLIST','FEEDS','INFOUSA','LEADMAIL','LOCALTEST','MARCHEX','Rentals','SEM','SITES','SMS','TPLLocal','TPLRentals','TPLSem','Video') THEN 'Desktop'
                             ELSE 'Unknown' END,
				vsfc.Joint_Advertising__c AS AdvertisingStatus   
        FROM    apartmentguide.[dbo].[CallsApartmentGuide] l WITH ( NOLOCK )
                JOIN rentpath.dimension.listings dl WITH ( NOLOCK ) ON l.listingid = dl.listingid
                                                              AND ( dl.mgtcoidAG = @Mgtcoid
                                                              OR dl.MgtCoIDRent = @Mgtcoid
                                                              OR dl.MgtCoIDAG
                                                              + dl.MgtCoIDRent = @Mgtcoid
                                                              )
                                                              AND ( dl.listingid = @listingid
                                                              OR @listingid = 0
                                                              )
				LEFT JOIN Salesforce.dbo.VW_SalesForceCommunity AS vsfc
					ON vsfc.PropAccountID = dl.SFPropertyAcctID
        WHERE   callstatus IN (1,2,3)													--Ticket 24212  added missed calls to connected
                AND l.ymdid BETWEEN CAST(CONVERT(VARCHAR(8), @startdate, 112) AS INT)
                            AND     CAST(CONVERT(VARCHAR(8), @enddate, 112) AS INT)
        UNION
        SELECT  [Site] = 'rent.com' ,
                DeliverMethod = 'Phone Lead' ,
                l.ymdid ,
                dl.PropertyName ,
                dl.PropertyIDAG ,
                dl.PropertyIDRent ,
                l.ListingID ,
                LeadDateTime = CallStartDateTime ,
                Calltype ,
                LeadSubmitter = CallerPhoneNumber ,
                PageType = '' ,
                LeadContents = AudioURL,
				device= CASE WHEN calltype IN ('mobile','MOBILESEM') THEN 'Mobile'
				             WHEN calltype IN ('default','oneweb','SEM') THEN 'Desktop'
                             ELSE 'Unknown' END,
				vsfc.Joint_Advertising__c AS AdvertisingStatus   
        FROM    RentCom.Fact.CallsRentCom l WITH ( NOLOCK )
                JOIN rentpath.dimension.listings dl WITH ( NOLOCK ) ON l.listingid = dl.listingid
                                                              AND ( dl.mgtcoidAG = @Mgtcoid
                                                              OR dl.MgtCoIDRent = @Mgtcoid
                                                              OR dl.MgtCoIDAG
                                                              + dl.MgtCoIDRent = @Mgtcoid
                                                              )
                                                              AND ( dl.listingid = @listingid
                                                              OR @listingid = 0
                                                              )
				LEFT JOIN Salesforce.dbo.VW_SalesForceCommunity AS vsfc
					ON vsfc.PropAccountID = dl.SFPropertyAcctID
        WHERE   callstatus IN (1,2,3)													--Ticket 24212  added missed calls to connected
                AND l.ymdid BETWEEN CAST(CONVERT(VARCHAR(8), @startdate, 112) AS INT)
                            AND     CAST(CONVERT(VARCHAR(8), @enddate, 112) AS INT)

   ) AS a
    
	


SELECT *
FROM #Leads AS l
UNION 
	SELECT  DISTINCT [Site] = NULL ,
                DeliverMethod = NULL ,
                CAST(CONVERT(VARCHAR(8), @enddate, 112) AS INT)  AS ymdid,
                dl.PropertyName ,
                dl.PropertyIDAG ,
                dl.PropertyIDRent ,
                dl.Listingid ,
                LeadDateTime = NULL ,
                source = NULL ,
                LeadSubmitter = NULL ,
                pagetype =NULL,
                LeadContents = NULL,
				device= NULL,
				vsfc.Joint_Advertising__c AS AdvertisingStatus 
	FROM Rentpath.Dimension.Listings AS dl
	LEFT JOIN Rentpath.Mart.Listings AS ml
		ON dl.ListingID = ml.ListingID

	LEFT JOIN Salesforce.dbo.VW_SalesForceCommunity AS vsfc
					ON vsfc.PropAccountID = dl.SFPropertyAcctID
	--LEFT JOIN #TempA AS a
	--	ON a.ListingID = dl.ListingID
WHERE ml.YMDID BETWEEN CAST(CONVERT(VARCHAR(8), @startdate, 112) AS INT)
                            AND     CAST(CONVERT(VARCHAR(8), @enddate, 112) AS INT)
							AND (ml.StatusIDAG = 1 OR ml.StatusIDRent  = 1)
	AND ( dl.mgtcoidAG = @Mgtcoid
        OR dl.MgtCoIDRent = @Mgtcoid
        OR dl.MgtCoIDAG + dl.MgtCoIDRent = @Mgtcoid
        )
        AND ( dl.listingid = @listingid OR @listingid = 0)
		AND dl.listingid NOT IN (SELECT listingid FROM #Leads)
		END

    SET NOCOUNT OFF





GO
/****** Object:  StoredProcedure [Reports].[rpt_PropertyLeadsSummary]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE [Reports].[rpt_PropertyLeadsSummary] 
(@AGPropertyID INT = NULL
,@UserID uniqueidentifier = NULL
,@DateRange INT = NULL)
/*************************************************************************************************
*
* Name:	Reports.rpt_PropertyLeadsSummary
*
* Desc:	This returns the summary for phone leads for the two months prior to currently reported month plus currently reported month to date
*
* Test:	EXEC Reports.rpt_PropertyLeadsSummary 6225, null
*		EXEC Reports.rpt_PropertyLeadsSummary 0, 'E11A9543-E50D-46A5-B3A2-A0CFCBFF6A95'
*		EXEC Reports.rpt_PropertyLeadsSummary null, '1A0D6CD1-1C7B-4588-A45A-85EF9654285C'
*
* Hist:	01	01/23/2015		Don Wert			Initial Version. TIcket # 17937.
* Hist: 02	02/06/2015		Don Wert			Ticket 18155, change datatype on AvgDuration and AvgWaitTime to Int
* Hist: 03	02/10/2015		Don Wert			Place ISNULL around numeric data so as to return 0 instead of a NULL value.
* Hist: 04	02/17/2015		Bob Langley			Ticket - 18155 - modified to use the views for DSUM data
* Hist: 05	05/12/2015		Shetal Gandhi		Modified to put new PropertyDisplay code in here
* Hist: 06	06/23/2015		Shetal Gandhi		Ticket 19723 - Modified to include a date parameter
* Hist: 07	08/17/2015		Shetal Gandhi		Ticket 20421 - Modified to use the New Rentpath tables instead of the AG Combined views
* Hist:	08	06/23/2016		Sarah Mims			Ticket # 23364 - CAST IsAbandoned AS INT until the column data type can be changed so that
*												dashboard reports can continue to work
* Hist: 09	10/30/2016		Bob Langley			Ticket 24212 - Changed to add MissedCalls to leads (where does connectedcalls)
**************************************************************************************************/
AS 
SET NOCOUNT ON

	/*test
	DECLARE @AGPropertyID INT
	,@UserID UNIQUEIDENTIFIER
	--SET @ListingID = NULL --5933 --
	SET @UserID = 'E11A9543-E50D-46A5-B3A2-A0CFCBFF6A95'
	--SET @UserID = '32732F2B-85E7-4142-B7E3-2D0E6F95C538'
	SET @AGPropertyID = 6225 --0 --
	*/

DECLARE @StartYMDID int
	DECLARE @EndYMDID INT
    
    --DECLARE @StartYMDID INT = CAST(CONVERT(VARCHAR,DATEADD(MONTH,DATEDIFF(MONTH,0,GETDATE()) - 2,0),112) AS INT)
    --   ,@EndYMDID INT = CAST(CONVERT(VARCHAR,GETDATE() - 1,112) AS INT)

    DECLARE @ListingID INT,
			@AccessToAll INT
  
  
  IF @DateRange IS NULL 
	SET @DateRange = 1

	--original way of running this SPROC
	--SET @StartYMDID  =  CAST(CONVERT(VARCHAR,DATEADD(MONTH,DATEDIFF(MONTH,0,GETDATE()) - 2,0),112) AS INT)
	SELECT @StartYMDID = MonthStartYMDID
	FROM    DBAUtility.Dimension.Dates
	WHERE   YMDID = CASE WHEN @DateRange = 1 THEN CONVERT(int, Convert(varchar(10),CAST(DATEADD(m,-2,DATEADD(dd,-1,GETDATE())) AS DATE),112))
						 WHEN @DateRange = 2 THEN CONVERT(int, Convert(varchar(10),CAST(DATEADD(m,-12,DATEADD(dd,-1,GETDATE())) AS DATE),112))
						 WHEN @DateRange = 3 THEN CONVERT(int, Convert(varchar(10),CAST(DATEADD(yy, DATEDIFF(yy,0,getdate()), 0) AS DATE),112))
						 END
                     
    SET @EndYMDID = CAST(CONVERT(VARCHAR,GETDATE() - 1,112) AS INT)    

    SELECT  @ListingID = CASE WHEN ISNULL(@AGPropertyID,0) = 0 THEN 0
                              ELSE (
                                    SELECT  MAX(ListingID) AS ListingID
                                    FROM    Rentpath.Dimension.Listings AS dl
                                    WHERE   PropertyIDAG = @AGPropertyID 
                                   )
                         END
  
  	IF (SELECT OBJECT_ID(N'tempdb..#UserList')) IS NOT NULL
			DROP TABLE #UserList

		CREATE TABLE #UserList (
		ListingID INT PRIMARY KEY
		)
  
	---------------------------------------------------------------------------------------------------------------------------------
	--Hard-code Access To All to 1 for all roles except 6,7, and 14 (Property Manager (Client),Management Company (Client) and Read Only)
	---------------------------------------------------------------------------------------------------------------------------------
	SELECT  @AccessToAll = ISNULL(CASE WHEN dur.RoleID NOT IN (6,7,14) THEN 1
										ELSE 0
									END,0)
	FROM    Dimension.vw_DSUM_User AS du
	JOIN    Dimension.vw_DSUM_UserRole AS dur
			ON du.UserID = dur.UserID
	WHERE   du.UserGUID = @UserID
		                       

	IF @Listingid > 0  --the specific listing ID was specified
    BEGIN
		SELECT  @AGPropertyID AS AGPropertyID
			   ,SUM(CASE WHEN cag.CallStatus = 1 THEN 1
						 ELSE 0
					END) AS ConnectedCalls
			   ,SUM(CASE WHEN cag.CallStatus IN (2,3) THEN 1
						 ELSE 0
					END) AS MissedCalls
			   ,SUM(CAST(IsAbandoned AS INT)) AS AbandonnedCalls
			   ,AVG(cag.DurationInSeconds) AS AvgCallDuration
			   ,CAST(AVG(CASE WHEN CASE WHEN cag.CallStatus IN (1,2,3)					--Ticket 24212  added missed to connected
										AND cag.TotalCallerTrimTalkTime IS NOT NULL
										AND cag.AudioURL IS NOT NULL THEN 1
								   ELSE 0
							  END = 0 THEN 0
						 ELSE CAST(cag.TimePriorToCallerSpeaking AS MONEY) / CASE WHEN cag.CallStatus IN (1,2,3)		--Ticket 24212  added missed to connected
																					   AND cag.TotalCallerTrimTalkTime IS NOT NULL
																					   AND cag.AudioURL IS NOT NULL THEN 1
																				  ELSE 0
																			 END
					END) AS INT) AS AvgCallWaitTime
		FROM    Rentpath.[Mart].[PhoneLeads] AS cag
		--JOIN    (
		--		 SELECT ListingID
		--			   ,MAX(AGPropertyID) AS AGPropertyID
		--			   ,MAX(RentPropertyID) AS RentPropertyID
		--		 FROM   ApartmentGuide.Dimension.AGRentCombinedDimensionListings
		--		 WHERE  ListingID = @Listingid
		--		 --AND AGPropertyID IS NOT NULL
		--		 GROUP BY ListingID
		--		) AS dl
		--		ON cag.ListingID = dl.ListingID
		WHERE   cag.YMDID BETWEEN @StartYMDID AND @EndYMDID
				AND cag.CallType <> 'CRAIGSLIST'
				AND cag.ListingID = @Listingid
		--GROUP BY dl.AGPropertyID
	END
	ELSE  --need to get the list of the user's listings
    BEGIN
		
		------------------------------------------------------------------------------------------------
		--Get property list. If they have Access To All, give them the top @RecordsReturned Properties
		------------------------------------------------------------------------------------------------
		IF @AccessToAll > 0 
			BEGIN
				INSERT INTO #UserList
				SELECT  ListingID AS ListingID
				FROM    Rentpath.Dimension.Listings AS  dl WITH (NOLOCK)
				WHERE   (dl.StatusIDAG = 1 OR dl.StatusIDRent  = 1)
						AND (dl.PropertyIDAG IS NOT NULL OR dl.PropertyIDRent  IS NOT NULL)
				GROUP BY ListingID
			END

		ELSE
		BEGIN      
		------------------------------------------------------------------------------------------------
		-- If they do NOT have Access To All, find out what they can see and give them the top @RecordsReturned Properties
		------------------------------------------------------------------------------------------------
			INSERT INTO #UserList
			SELECT   pd.ListingID
			FROM    (
					 SELECT ListingID
					 FROM   Dimension.vw_DSUM_Management
					 WHERE  UserGuid = @UserID
					 UNION
					 SELECT ListingID
					 FROM   Dimension.vw_DSUM_Property
					 WHERE  UserGuid = @UserID
					 UNION
					 SELECT dl.ListingID
					 FROM   Dimension.vw_DSUM_Market AS ds
					 JOIN    Rentpath.Dimension.Listings AS dl
							ON ds.ListingID = dl.ListingID                   
							AND ds.LocalLookupValue = CASE WHEN dl.MarketCD = 'P00SAL' THEN 'W02000'
														  ELSE dl.MarketCD
													 END
					 WHERE ds.UserGUID = @UserID
							AND (dl.StatusIDAG = 1 OR dl.StatusIDRent = 1)
					 GROUP BY dl.ListingID
					) AS X
			JOIN    (
					 SELECT dl.ListingID  AS ListingID
						   ,MAX(dl.PropertyIDAG) AS AGPropertyID
						   ,MAX(dl.PropertyIDRent) AS RentPropertyID

					 FROM   Rentpath.Dimension.Listings AS dl
					 WHERE  (dl.StatusIDAG = 1 OR dl.StatusIDRent = 1)
							AND (PropertyIDAG IS NOT NULL OR PropertyIDRent IS NOT NULL)
					 GROUP BY ListingID
					) AS pd
					ON X.ListingID = pd.ListingID

			--CREATE CLUSTERED INDEX idx_userlist_listingid ON #UserList(listingid)
 		END

		SELECT  0 AS AGPropertyID
				,SUM(CASE WHEN cag.CallStatus = 1 THEN 1
							ELSE 0
					END) AS ConnectedCalls
				,SUM(CASE WHEN cag.CallStatus IN (2,3) THEN 1
							ELSE 0
					END) AS MissedCalls
				,ISNULL(SUM(IsAbandoned),0) AS AbandonnedCalls
				,ISNULL(AVG(cag.DurationInSeconds),0) AS AvgCallDuration
				,CAST(AVG(CASE WHEN CASE WHEN cag.CallStatus IN (1,2,3)		--Ticket 24212  added missed to connected
										AND cag.TotalCallerTrimTalkTime IS NOT NULL
										AND cag.AudioURL IS NOT NULL THEN 1
									ELSE 0
								END = 0 THEN 0
							ELSE CAST(cag.TimePriorToCallerSpeaking AS MONEY) / CASE WHEN cag.CallStatus IN (1,2,3)			--Ticket 24212  added missed to connected
																						AND cag.TotalCallerTrimTalkTime IS NOT NULL
																						AND cag.AudioURL IS NOT NULL THEN 1
																					ELSE 0
																				END
					END) AS INT) AS AvgCallWaitTime
		FROM    Rentpath.[Mart].[PhoneLeads] AS cag
		JOIN	#UserList ul
				ON cag.ListingID = ul.ListingID
		WHERE   cag.YMDID BETWEEN @StartYMDID AND @EndYMDID
				AND cag.CallType <> 'CRAIGSLIST'
	
	




	END







GO
/****** Object:  StoredProcedure [Reports].[rpt_PropertyLeadSummary]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Reports].[rpt_PropertyLeadSummary] (
	@ListingID INT
   ,@StartDate DATETIME
   ,@EndDate DATETIME
   ) 

/****************************************************************************************************************************************************************
* Name:	Reports.rpt_PropertyLeadSummary
*
* Desc:	The detail data for the Property Lead Summary report by CBSA instead of AG Market
*
* Test:	EXEC Reports.[rpt_PropertyLeadSummary_24212_TEST]  20336, '02/01/2013', '02/28/2014'
*		
* Note:
*
* Hist:	01	Don Wert		Initial Version, ticket 13853
*		02	Sarah Mims		Ticket #13853 - removed INNER JOIN to ListingMarket because Rent data does not live there and we don't need any data from that table
*		03	Sarah Mims		Ticket # 14997 - removed OVER PARITION clause in Tier select because it was giving the wrong data.
*		04	Sarah Mims		Ticket # 15362 - added AG Sites Phone and Email leads
*		05	Shetal Gandhi	12/15/2014	Removed references to @Website in Code
*		02	10/15/2016		Bob Langley		Ticket 24212 - Changed to add MissedCalls to leads (where does connectedcalls)
****************************************************************************************************************************************************************/
AS 
SET NOCOUNT ON

BEGIN
	-------------------------------------------------------------------------------------------------------------------
	--Declare and set variables
	-------------------------------------------------------------------------------------------------------------------

	/*test
	DECLARE	@ListingID INT
			,@StartDate	DATETIME
			,@EndDate	DATETIME
		       

	SELECT	@ListingID = 84736
			,@StartDate = '12/01/2012'
			,@EndDate = '01/14/2014'
			
	*/

	DECLARE	@iStartYMDID INT
	   ,@iEndYMDID INT
	   ,@LastYearStartYMDID INT
	   ,@LastYearEndYMDID INT
	
	SET @iStartYMDID = (
						SELECT	YMDID
						FROM	DBAUtility.Dimension.Dates
						WHERE	YMDDate = @StartDate
					   )
	SET @iEndYMDID = (
					  SELECT	YMDID
					  FROM		DBAUtility.Dimension.Dates
					  WHERE		YMDDate = @EndDate
					 )


	IF @iEndYMDID > CAST(CONVERT(VARCHAR(8),GETDATE() - 1,112) AS INT) 
		BEGIN
			SET @iEndYMDID = CAST(CONVERT(VARCHAR(8),GETDATE() - 1,112) AS INT)
		END

	SET @LastYearStartYMDID = @iStartYMDID - 10000
	SET @LastYearEndYMDID = @iEndYMDID - 10000

	-------------------------------------------------------------------------------------------------------------------
	-- Find the last date of each month in select date range
	-------------------------------------------------------------------------------------------------------------------
	--BEGIN TRY
	--	DROP TABLE #d  
	--END TRY
	--BEGIN CATCH
	--END CATCH	

	SELECT	d.monthEndYmdID
	INTO	#d
	FROM	(
			 SELECT DISTINCT
					monthendymdid
			 FROM	dbautility.dimension.dates
			 WHERE	ymdid BETWEEN @iStartYmdid AND @iEndYmdid
					AND monthendymdid BETWEEN @iStartYmdid AND @iEndYmdid
			 UNION
			 SELECT	@iEndYmdid
			) d
        
	-------------------------------------------------------------------------------------------------------------------        
	--Find all the ListingIDs for the Property selected. 
	-------------------------------------------------------------------------------------------------------------------
	--BEGIN TRY
	--	DROP TABLE #lim  
	--END TRY
	--BEGIN CATCH
	--END CATCH	

	SELECT  DISTINCT
			dl.ListingID
		   ,zc.CBSACode
	INTO	#lim
	FROM	ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
	JOIN 	DBAUtility.dbo.ZipCBSA AS zc
			ON dl.ZipCode = zc.ZIPCode
	WHERE	dl.ListingID = @ListingID
			
        
	-------------------------------------------------------------------------------------------------------------------   
	--Create a series of CTEs for Leads, Tier and Cost.
	-------------------------------------------------------------------------------------------------------------------           
	;
	WITH	Leads
			  AS (
				  SELECT	MIN(dl.ListingId) AS ListingId
						   ,CASE 
							WHEN ml.website = 'AG' THEN max(ml.ListingStatusId)
							ELSE 0
							END									AS AGListingStatusID
						   ,CASE 
							WHEN ml.website = 'Rent' THEN max(ml.ListingStatusId)
							ELSE 0
							END									AS RentListingStatusID
						   ,ml.YearMonth AS yearMonthInt
						   ,ml.Website
						   ,d.MonthEndYMDID
						   ,DATENAME(MONTH,CAST(ml.YearMonth AS VARCHAR(6)) + '01') + ' ' + LEFT(ml.YearMonth,4) AS MonthAndYear
						   ,SUM(ml.AllLeads) AS AllLeads
						   ,SUM(ml.AGCPrintConnectedCalls + ml.AGCPrintMissedCalls)		AS AGPrintPhoneLeads		--Ticket 24212
						   ,SUM(ml.InternetPhoneLeads_NoMobile) AS AGInternetPhoneLeads
						   ,SUM(ml.InternetEmailLeads_NoMobile) AS AGInternetEmailLeads
						   ,SUM(ml.MobileCalls)					AS MobileCalls
						   ,SUM(ml.MobileEmails)				AS MobileEmails
						   ,SUM(ml.ThirdPartyFeedLeads)			AS ThirdPartyFeedLeads
						   ,SUM(ml.CraigsListConnectedCalls + ml.CraigsListMissedCalls)	AS CraigsListConnectedCalls	--Ticket 24212
						   ,SUM(ml.SitesConnectedCalls + ml.SitesMissedCalls)			AS SitesConnectedCalls		--Ticket 24212
						   ,SUM(ml.SitesEmailLeads)				AS SitesEmailLeads
						   ,dl.PropertyName
				  FROM		ApartmentGuide.Dimension.AGRentCombinedDimensionListings dl
				  INNER JOIN ApartmentGuide.mart.AGRentCombinedMartListings AS ml
								ON dl.listingid = ml.listingID
								AND dl.Website = ml.Website
				  INNER JOIN dbautility.dimension.dates d
							ON ml.YMDID = d.ymdid
				  WHERE		dl.ListingID = @ListingID
							AND ml.YMDID BETWEEN @iStartYmdid AND @iEndYmdid
				  GROUP BY	ml.yearmonth
				  ,ml.Website
				  ,d.MonthEndYMDID
				  ,dl.PropertyName
				 ),
			Tier
			  AS (
				  SELECT	ml.yearmonth
						   ,d.MonthEndYmdID
						   ,ml.listingid
						   ,ml.website
						   ,CASE max(ml.PlacementTier) 
							  WHEN 05 THEN 'D'
							  WHEN 10 THEN 'P'
							  WHEN 20 THEN 'G'
							  WHEN 30 THEN 'S'
							  ELSE ''
							END AS PlacementTier
						   ,ml.PrintProductPoints AS PrintProductPoints
						   ,ml.InternetProductPoints AS InternetProductPoints
						   ,ml.LegacyLoyaltyPoints AS LegacyLoyaltyPoints
						   ,ml.ContractLoyaltyPoints AS ContractLoyaltyPoints
				  FROM		ApartmentGuide.mart.AGRentCombinedMartListings AS ml --ApartmentGuide.Mart.Listings AS ml
				  JOIN 		#lim AS lim
							ON ml.listingid = lim.listingid
				  JOIN 		#d AS d
							ON ml.ymdid = d.MonthEndYmdid
				GROUP BY ml.yearmonth
						   ,d.MonthEndYmdID
						   ,ml.listingid
						   ,ml.website
						   ,ml.PrintProductPoints 
						   ,ml.InternetProductPoints 
						   ,ml.LegacyLoyaltyPoints 
						   ,ml.ContractLoyaltyPoints                                         
                                         
				 )		
		-------------------------------------------------------------------------------------------------------------------   
	--Select out final result set.
	-------------------------------------------------------------------------------------------------------------------       
            
    SELECT	l.ListingID
		   ,max(l.AGListingStatusId) AS AGListingStatusId
		   ,max(l.RentListingStatusId) AS RentListingStatusId
		   ,CASE WHEN ISNULL(max(l.AGListingStatusId),0)+ISNULL(max(l.RentListingStatusId),0) >= 1 THEN 1 ELSE 0 END AS ListingStatusId
		   ,l.MonthAndYear
		   ,l.YearMonthInt
		   ,SUM(l.AllLeads)							AS AllLeads
		   ,0 AS MonthlyClientCost
		   ,SUM(l.AGPrintPhoneLeads)				AS AGPrintPhoneLeads
		   ,SUM(l.AGInternetPhoneLeads)				AS AGInternetPhoneLeads
		   ,SUM(l.AGInternetEmailLeads)				AS AGInternetEmailLeads
		   ,SUM(l.MobileCalls)						AS MobileCalls
		   ,SUM(l.MobileEmails)						AS MobileEmails
		   ,SUM(l.ThirdPartyFeedLeads)				AS ThirdPartyFeedLeads
		   ,SUM(l.CraigsListConnectedCalls)			AS CraigsListTotalCalls	--CraigsListConnectedCalls	--Ticket 24212  Already includes missed, done above
		   ,SUM(l.SitesConnectedCalls)				AS SitesTotalCalls		--SitesConnectedCalls	--Ticket 24212  Already includes missed, done above
		   ,SUM(l.SitesEmailLeads)					AS SitesEmailLeads
		   ,MAX(t.PlacementTier)					AS PlacementTier
		   ,SUM(t.PrintProductPoints)				AS PrintProductPoints
		   ,SUM(t.InternetProductPoints)			AS InternetProductPoints
		   ,SUM(t.LegacyLoyaltyPoints)				AS LegacyLoyaltyPoints
		   ,SUM(t.ContractLoyaltyPoints)			AS ContractLoyaltyPoints
		   ,l.propertyname
	FROM	Leads l
	LEFT OUTER JOIN tier t
			ON l.yearMonthInt = t.yearmonth
			   AND l.listingid = t.listingid
			   AND l.Website = t.Website
	GROUP BY l.ListingID
			,l.MonthAndYear
			,l.YearMonthInt
			,l.propertyname
	ORDER BY L.YearMonthInt 

END

SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [Reports].[rpt_PropertyPageViewsData]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








CREATE PROCEDURE [Reports].[rpt_PropertyPageViewsData] (
    @AGPropertyID INT
   ,@DateRange INT = NULL		--1 = 3 months; 2 = 13 months; 3 = YTD
   )
/*******************************************************************************************
* Name:	Reports.rpt_PropertyPageViewsData
* ------------------------------------------------------------------------------------------
* Desc:	This is used for the page views square of dashboard.apartmentguide.com. It returns 
*		summarized page view data for either the past 3 months, 13 months or YTD. Because 
*		tiers are property-specific, this proc can only be for one property, not for all 
*		properties the user can see
* ------------------------------------------------------------------------------------------
* Test:	EXEC Reports.rpt_PropertyPageViewsData 100045220,1
*		EXEC Reports.rpt_PropertyPageViewsData 100045220,2
*		EXEC Reports.rpt_PropertyPageViewsData 100045220,3
* ------------------------------------------------------------------------------------------
* Hist:	01	01/23/2015		Don Wert			Initial Version. TIcket # 17937.
* Hist: 02	02/09/2015		Don Wert			Ticket 18155, update tier text.
* Hist:	03	02/10/2015		Don Wert			Add ISNULL to the return so as to return 0 instead of NULL values.
* Hist: 04	03/30/2015		Bob Langley			Ticket 18155, changed to add prior year information
* Hist: 05	06/23/2015		Bob Langley			Ticket 19723 - (Shetal's ticket)  Modified to include a date parameter
* Hist: 06	08/18/2015		Shetal Gandhi		Ticket 20421 - Modified to use the New Rentpath tables instead of the AG Combined views
* Hist: 07	09/17/2015		Colleen Rocks		Tickets 19738 & 20070; change current month points and tier to reflect values from
*												yesterday, rather than from the 1st of the month
* Hist: 08  05/02/2016      Kimberley Morrow    Add other Click Events for ClicksMgtCoURLAG, ClicksMgtCoURLRent, ClicksWebURLAG, ClicksWebURLRent
********************************************************************************************/
AS
BEGIN
   SET NOCOUNT ON ;
	/*--Test:
	DECLARE @AGPropertyID INT
		,@DateRange INT
	SET @AGPropertyID = 100052296
	SET @DateRange = 1

	--If you want to test a different propertyID:
	SELECT * FROM RentPath.Dimension.Listings WITH (NOLOCK) 
	WHERE PropertyIDAG IS NOT NULL 
	ORDER BY PropertyIDAG
	*/

	--------------------------------------------------------------------
	--Declare and set variables
	--------------------------------------------------------------------
    DECLARE @enddatetouse DATETIME
    DECLARE @fdendmonthtouse DATETIME
    DECLARE @monthoffset INT

    SET @enddatetouse = CONVERT(DATETIME,CONVERT(VARCHAR(10),DATEADD(dd,-1,GETDATE()),101))							--get yesterday's date
    SET @fdendmonthtouse = CAST(CONVERT(VARCHAR(8),DATEADD(m,DATEDIFF(m,0,@enddatetouse),0),112) AS DATETIME)		--get the 1st day of the month for yesterday's date

    SET @monthoffset = (CASE WHEN @DateRange = 1 THEN -3									--Determines how many months to subtract from the end date
                             WHEN @DateRange = 2 THEN -13									--Dashboard allows for 3 months, 13 months or YTD
                             WHEN @DateRange = 3 THEN ((-1) * (MONTH(@enddatetouse)))
                             ELSE -3
                        END)

    --PRINT 'Month(@enddatetouse) = ' + CONVERT(VARCHAR(30),MONTH(@enddatetouse))

    DECLARE @StartDate DATETIME = DATEADD(m,@monthoffset + 1,@fdendmonthtouse)
       ,@EndDate DATETIME = @fdendmonthtouse
 
    DECLARE @PrevStartDate DATETIME = DATEADD(YEAR,-1,@StartDate)		--Dashboard compares current timeframe with last year's same timeframe
       ,@PrevEndDate DATETIME = DATEADD(YEAR,-1,@EndDate)
	   
    DECLARE @iStartYMDID INT = CONVERT(INT,CONVERT(VARCHAR(10),@StartDate,112))		--Converts the current dates to integer YMDIDs
       ,@iEndYMDID INT = CONVERT(INT,CONVERT(VARCHAR(10),@enddatetouse,112))
	
    DECLARE @PreviStartYMDID INT = CONVERT(INT,CONVERT(VARCHAR(10),DATEADD(YEAR,-1,@StartDate),112))		--Converts the last year dates to integer YMDIDs
       ,@PreviEndYMDID INT = CONVERT(INT,CONVERT(VARCHAR(10),EOMONTH(DATEADD(YEAR,-1,@enddatetouse)),112))	--since a year ago, want the actual end of the month

	--PRINT '@monthoffset = ' + CONVERT(Varchar(30),@monthoffset)
	--PRINT ' '
	--PRINT '@enddatetouse = ' + CONVERT(varchar(30),@enddatetouse,109)
	--PRINT '@fdendmonthtouse = ' + CONVERT(varchar(30),@fdendmonthtouse,109)
	--PRINT '------------------------------'
    --PRINT '@StartDate = ' + CONVERT(VARCHAR(30),@StartDate,109)
    --PRINT '@EndDate = ' + CONVERT(VARCHAR(30),@EndDate,109)
    --PRINT ' '
    --PRINT '@PrevStartDate = ' + CONVERT(VARCHAR(30),@PrevStartDate,109)
    --PRINT '@PrevEndDate = ' + CONVERT(VARCHAR(30),@PrevEndDate,109)
    --PRINT ' '
    --PRINT '@iStartYMDID = ' + CONVERT(VARCHAR(30),@iStartYMDID)
    --PRINT '@iEndYMDID = ' + CONVERT(VARCHAR(30),@iEndYMDID)
    --PRINT ' '
    --PRINT '@PreviStartYMDID = ' + CONVERT(VARCHAR(30),@PreviStartYMDID)
    --PRINT '@PreviEndYMDID = ' + CONVERT(VARCHAR(30),@PreviEndYMDID)

	/*
	Get the dates to be used for tiers.  They are based on last day of the month for completed months.  For current month, use first day of the month.
	*/
    BEGIN TRY
        DROP TABLE #EOMDates
    END TRY
    BEGIN CATCH
    END CATCH ;

    CREATE TABLE #EOMDates (
        TierDate INT
       ,YearMonth INT
       ,SortOrder INT) ;

	/* =================================================================================================================================================================================== */
	/*
	/*  Original code  */
	CREATE TABLE #EOMDatesalt
	(TierDate INT
	,YearMonth INT
	,SortOrder INT)

		INSERT  INTO #EOMDatesalt
			(TierDate,YearMonth, SortOrder)
			SELECT  CAST(CONVERT(VARCHAR,EOMONTH(DATEADD(MONTH,0,@StartDate)),112) AS INT), CAST(CONVERT(VARCHAR,EOMONTH(DATEADD(MONTH,0,@StartDate)),112) AS INT) * .01, 1
			UNION
			SELECT  CAST(CONVERT(VARCHAR,EOMONTH(DATEADD(MONTH,1,@StartDate)),112) AS INT), CAST(CONVERT(VARCHAR,EOMONTH(DATEADD(MONTH,1,@StartDate)),112) AS INT) * .01, 3
			UNION
			SELECT  CAST(CONVERT(VARCHAR,@EndDate,112) AS INT),CAST(CONVERT(VARCHAR,EOMONTH(DATEADD(MONTH,2,@StartDate)),112) AS INT) * .01, 5
			UNION
			SELECT  CAST(CONVERT(VARCHAR,EOMONTH(DATEADD(MONTH,0,@PrevStartDate)),112) AS INT),CAST(CONVERT(VARCHAR,EOMONTH(DATEADD(MONTH,0,@PrevStartDate)),112) AS INT) * .01, 2
			UNION
			SELECT  CAST(CONVERT(VARCHAR,EOMONTH(DATEADD(MONTH,1,@PrevStartDate)),112) AS INT),CAST(CONVERT(VARCHAR,EOMONTH(DATEADD(MONTH,1,@PrevStartDate)),112) AS INT) * .01, 4
			UNION
			SELECT  CAST(CONVERT(VARCHAR,EOMONTH(DATEADD(MONTH,2,@PrevStartDate)),112) AS INT), CAST(CONVERT(VARCHAR,EOMONTH(DATEADD(MONTH,2,@PrevStartDate)),112) AS INT) * .01, 6
		SELECT TierDate AS TierDateAlt, YearMonth AS YearMonthAlt, SortOrder AS SortOrderAlt FROM #EOMDatesalt ORDER BY SortOrder
	*/
	/* =================================================================================================================================================================================== */

    DECLARE @lcv INT
    SET @lcv = 0

    WHILE @lcv < ABS(@monthoffset)
        BEGIN
            IF @lcv = 0
                BEGIN
                    INSERT  INTO #EOMDates
                            (TierDate
                            ,YearMonth
                            ,SortOrder)
                            SELECT  CAST(CONVERT(VARCHAR,DATEADD(MONTH,-@lcv,@enddatetouse),112) AS INT)
                                   ,CAST(CONVERT(VARCHAR,DATEADD(MONTH,-@lcv,@enddatetouse),112) AS INT) * .01
                                   , /*(((-@monthoffset) * 2) + 1) - */((@lcv * 2) + 1)
                            --SELECT  CAST(CONVERT(VARCHAR,DATEADD(MONTH,-@lcv,@EndDate),112) AS INT)
                            --       ,CAST(CONVERT(VARCHAR,DATEADD(MONTH,-@lcv,@EndDate),112) AS INT) * .01
                            --       , /*(((-@monthoffset) * 2) + 1) - */((@lcv * 2) + 1)

                    INSERT  INTO #EOMDates
                            (TierDate
                            ,YearMonth
                            ,SortOrder)
                            SELECT  CAST(CONVERT(VARCHAR,EOMONTH(DATEADD(MONTH,-@lcv,DATEADD(YEAR,-1,@EndDate))),112) AS INT)
                                   ,CAST(CONVERT(VARCHAR,EOMONTH(DATEADD(MONTH,-@lcv,DATEADD(YEAR,-1,@EndDate))),112) AS INT) * .01
                                   , /*(((-@monthoffset) * 2) + 1) -*/((@lcv * 2) + 2)
					--SELECT CAST(CONVERT(VARCHAR,DATEADD(MONTH,-@lcv,DATEADD(YEAR,-1,@EndDate)),112) AS INT),CAST(CONVERT(VARCHAR,DATEADD(MONTH,-@lcv,DATEADD(YEAR,-1,@EndDate)),112) AS INT) * .01, (@lcv * 2) + 2
                END
            ELSE
                BEGIN
                    INSERT  INTO #EOMDates
                            (TierDate
                            ,YearMonth
                            ,SortOrder)
                            SELECT  CAST(CONVERT(VARCHAR,EOMONTH(DATEADD(MONTH,-@lcv,@EndDate)),112) AS INT)
                                   ,CAST(CONVERT(VARCHAR,EOMONTH(DATEADD(MONTH,-@lcv,@EndDate)),112) AS INT) * .01
                                   , /*(((-@monthoffset) * 2) + 1) - */((@lcv * 2) + 1)


                    INSERT  INTO #EOMDates
                            (TierDate
                            ,YearMonth
                            ,SortOrder)
                            SELECT  CAST(CONVERT(VARCHAR,EOMONTH(DATEADD(MONTH,-@lcv,DATEADD(YEAR,-1,@EndDate))),112) AS INT)
                                   ,CAST(CONVERT(VARCHAR,EOMONTH(DATEADD(MONTH,-@lcv,DATEADD(YEAR,-1,@EndDate))),112) AS INT) * .01
                                   , /*((((-@monthoffset) * 2) + 1) -*/((@lcv * 2) + 2)
                END


            SET @lcv = @lcv + 1
        END ;

		
	/*
	WHILE @lcv < ABS(@monthoffset)
		BEGIN
			
			INSERT  INTO #EOMDates
				(TierDate,YearMonth, SortOrder)
			SELECT CAST(CONVERT(VARCHAR,EOMONTH(DATEADD(MONTH,@lcv,@StartDate)),112) AS INT),CAST(CONVERT(VARCHAR,EOMONTH(DATEADD(MONTH,@lcv,@StartDate)),112) AS INT) * .01, (@lcv * 2) + 1

			INSERT  INTO #EOMDates
				(TierDate,YearMonth, SortOrder)
			SELECT CAST(CONVERT(VARCHAR,EOMONTH(DATEADD(MONTH,@lcv,DATEADD(YEAR,-1,@StartDate))),112) AS INT),CAST(CONVERT(VARCHAR,EOMONTH(DATEADD(MONTH,@lcv,DATEADD(YEAR,-1,@StartDate))),112) AS INT) * .01, (@lcv * 2) + 2


			SET @lcv = @lcv + 1
		END
	*/

	--SELECT * FROM #EOMDates ORDER BY SortOrder
	--SELECT YearMonth, COUNT(*) AS RecCt FROM #EOMDates GROUP BY YearMonth HAVING COUNT(*) > 1 ORDER BY YearMonth
	--SELECT * FROM #EOMDates WHERE (SortOrder % 2) = 0 ORDER BY SortOrder		--even
	--SELECT * FROM #EOMDates WHERE (SortOrder % 2) = 1 ORDER BY SortOrder		--odd


	--------------------------------------------------------------------------------
	-- Drop tables
	--------------------------------------------------------------------------------
    IF OBJECT_ID('tempdb..#d') IS NOT NULL
        BEGIN
            DROP TABLE #d
        END ;

    IF OBJECT_ID('tempdb..#lim') IS NOT NULL
        BEGIN
            DROP TABLE #lim
        END ;

    IF OBJECT_ID('tempdb..#tier') IS NOT NULL
        BEGIN
            DROP TABLE #tier
        END ;

    IF OBJECT_ID('tempdb..#LeadAndTraffic') IS NOT NULL
        BEGIN
            DROP TABLE #LeadAndTraffic
        END ;

	--------------------------------------------------------------------------------
	--Get the listingID
	--------------------------------------------------------------------------------
    SELECT	DISTINCT
            l.ListingID
		  -- ,l.Website
           ,l.PropertyIDAG
           ,l.PropertyIDRent
    INTO    #lim
    FROM    RentPath.Dimension.Listings AS l
    WHERE   l.PropertyIDAG = @AGPropertyID ;

	--------------------------------------------------------------------------------
	--Points and tiers are based on yesterday for current month and last day of the month
	--for previous months
	--------------------------------------------------------------------------------
    SELECT  ml.YearMonth
           ,d.TierDate
           ,ml.ListingID
           ,ml.PropertyIDAG
           ,ml.PropertyIDRent
           ,AGPlacementTier = MAX(CASE ml.PlacementTierAG
                                    WHEN 05 THEN 'Diamond'
                                    WHEN 10 THEN 'Platinum'
                                    WHEN 20 THEN 'Gold'
                                    WHEN 30 THEN 'Silver'
                                    ELSE ''
                                  END)
           ,RentPlacementTier = MAX(CASE ml.PlacementTierRent
                                      WHEN 05 THEN 'Diamond'
                                      WHEN 10 THEN 'Platinum'
                                      WHEN 20 THEN 'Gold'
                                      WHEN 30 THEN 'Silver'
                                      ELSE NULL
                                    END)
           ,PrintProductPoints = MAX(ml.PrintProductPoints)
           ,InternetProductPoints = MAX(ml.InternetProductPoints)
           ,LegacyLoyaltyPoints = MAX(ml.LegacyLoyaltyPoints)
           ,ContractLoyaltyPoints = MAX(ml.ContractLoyaltyPoints)
    INTO    #tier
    FROM    RentPath.Mart.Listings AS ml
    JOIN    #lim AS lim
            ON ml.ListingID = lim.ListingID
			  -- AND ml.Website = lim.Website
    JOIN    #EOMDates AS d
            ON ml.YMDID = d.TierDate
	----LEFT JOIN (
	----		   SELECT   l.ListingID
	----				   ,CAST(LEFT(CAST(d.TierDate AS CHAR),6) AS INT) AS YearMonth
	----				   ,MAX(CASE rt.NewProductChannel
	----						  WHEN 'Diamond Package' THEN 'Diamond'
	----						  WHEN 'Platinum Package' THEN 'Platinum'
	----						  WHEN 'Gold Package' THEN 'Gold'
	----						  WHEN 'Silver Package' THEN 'Silver'
	----						  ELSE ''
	----						END) AS RentTier
	----		   FROM     ApartmentGuide.dbo.vw_MAXRentEasyPay AS rt
	----		   JOIN     #lim AS l
	----					ON rt.RENTPROPERTYID = l.PropertyIDRent
	----		   JOIN     #EOMDates AS d
	----					ON (d.TierDate BETWEEN rt.MAXContractDateBeginYMDID
	----								  AND     rt.MAXContractDateEndYMDID)
	----		   WHERE    l.PropertyIDAG = @AGPropertyID
	----					AND MAXContractStatus <> 'dropped'
	----		   GROUP BY l.ListingID
	----				   ,d.TierDate
	----		  ) rt
			--ON ml.ListingID = rt.ListingID
			--   AND ml.YearMonth = rt.YearMonth
    WHERE   ml.PropertyIDAG = @AGPropertyID
    GROUP BY ml.YearMonth
           ,d.TierDate
           ,ml.ListingID
           ,ml.PropertyIDAG
           ,ml.PropertyIDRent ;
--		   ,rt.RentTier

	--------------------------------------------------------------------------------
	--Traffic is based on sum during the whole month; Status is based on the max
	--------------------------------------------------------------------------------
    SELECT  YearMonth = DATENAME(MONTH,CAST(dl.YearMonthInt AS VARCHAR(6)) + '01') + ' ' + LEFT(dl.YearMonthInt,4)
           ,YearMonthInt = dl.YearMonthInt
           ,ListingID = dl.ListingID
           ,AGActive = CASE WHEN dl.AGActive = 1 THEN 'Y'
                            ELSE 'N'
                       END
           ,RentActive = CASE WHEN dl.RentActive = 1 THEN 'Y'
                              ELSE 'N'
                         END
           ,MissedCalls = dl.MissedCalls
           ,MapClicks = dl.MapClicks
           ,YourWebsiteClicks = dl.YourWebsiteClicks
           ,ImprSearchResults = dl.ImprSearchResults
           ,PageViews = dl.PageViews
           ,PhoneLeads
           ,EmailLeads
    INTO    #LeadAndTraffic
    FROM    (
             SELECT YearMonthInt = ml.YearMonth
                   ,AGActive = MAX(ml.StatusIDAG)
                   ,RentActive = MAX(ml.StatusIDRent)
                   ,ListingID = MIN(dl.ListingID)
                   ,ImprSearchResults = ISNULL(SUM(ml.[SRPListingImprAG]),0) + ISNULL(SUM([SRPListingImprRent]),0)
                   ,PageViews = ISNULL(SUM([ViewsListingPageWeb]),0) + ISNULL(SUM([ViewsListingPageMobile]),0)
                   ,MissedCalls = ISNULL(SUM(MissedCallsAG),0) + ISNULL(SUM(MissedCallsRent),0)
                   ,MapClicks = ISNULL(SUM(ml.[ClicksMapAG]),0) + ISNULL(SUM(ml.[ClicksMapRent]),0)
                   ,YourWebsiteClicks = (ISNULL(SUM(ml.[ClicksWebURL]),0) + ISNULL(SUM(ml.[ClicksMgtCoURLAG]),0))
                   ,SUM([PhoneLeads]) AS PhoneLeads
                   ,SUM(ml.EmailLeads) AS EmailLeads
             FROM   RentPath.Mart.Listings AS ml
             JOIN   RentPath.Dimension.Listings AS dl
                    ON ml.ListingID = dl.ListingID
             WHERE  dl.PropertyIDAG = @AGPropertyID
                    AND ((ml.YMDID BETWEEN @iStartYMDID AND @iEndYMDID)
                         OR (ml.YMDID BETWEEN @PreviStartYMDID
                                      AND     @PreviEndYMDID))
             GROUP BY ml.YearMonth
            ) AS dl ;

	--------------------------------------------------------------------------------
	--Select out final result set
	--------------------------------------------------------------------------------
	--modified version.  make it print a line for each date in the temp table #EOMDates
    SELECT  ISNULL(l.YearMonthInt,a.YearMonth) AS YearMonthInt
           ,ISNULL(t.PropertyIDAG,@AGPropertyID) AS AGPropertyID
           ,ISNULL(l.AGActive,'N') AS AGActive
           ,ISNULL(t.PrintProductPoints + t.InternetProductPoints + t.LegacyLoyaltyPoints + t.ContractLoyaltyPoints,0) AS TotalAGPoints
           ,t.AGPlacementTier
           ,ISNULL(l.RentActive,'N') AS RentActive
           ,t.RentPlacementTier AS RentPlacementTier
           ,ISNULL(l.PhoneLeads,0) AS PhoneLeads
           ,ISNULL(l.EmailLeads,0) AS EmailLeads
           ,ISNULL(l.ImprSearchResults,0) AS ImprSearchResults
           ,ISNULL(l.PageViews,0) AS PageViews
           ,ISNULL(l.MissedCalls,0) AS MissedCalls
           ,ISNULL(l.YourWebsiteClicks,0) AS YourWebsiteClicks
           ,ISNULL(l.MapClicks,0) AS MapClicks
    FROM    #EOMDates a
    LEFT OUTER JOIN #LeadAndTraffic l
            ON a.YearMonth = l.YearMonthInt
    LEFT OUTER JOIN #tier t
            ON l.YearMonthInt = t.YearMonth
               AND l.ListingID = t.ListingID
    ORDER BY a.SortOrder
           ,l.YearMonthInt ;
	

	/*
	SELECT  l.YearMonthInt
		   ,t.AGPropertyID
		   ,l.AGActive
		   ,ISNULL(t.PrintProductPoints + t.InternetProductPoints + t.LegacyLoyaltyPoints + t.ContractLoyaltyPoints,0) AS TotalAGPoints
		   ,t.AGPlacementTier
		   ,l.RentActive
		   ,t.RentTier AS RentPlacementTier
		   ,ISNULL(l.PhoneLeads,0) AS PhoneLeads
		   ,ISNULL(l.EmailLeads,0) AS EmailLeads
		   ,ISNULL(l.ImprSearchResults,0) AS ImprSearchResults
		   ,ISNULL(l.PageViews,0) AS PageViews
		   ,ISNULL(l.MissedCalls,0) AS MissedCalls
		   ,ISNULL(l.YourWebsiteClicks,0) AS YourWebsiteClicks
		   ,ISNULL(l.MapClicks,0) AS MapClicks
	FROM    #LeadAndTraffic l
	LEFT OUTER JOIN #tier t
			ON l.yearMonthInt = t.yearmonth
			   AND l.listingid = t.listingid
	LEFT OUTER JOIN #EOMDates a
		ON a.YearMonth = l.YearMonthInt
	ORDER BY a.SortOrder,L.YearMonthInt
	*/
	--SELECT * FROM #EOMDates

    SET NOCOUNT OFF ;

END









GO
/****** Object:  StoredProcedure [Reports].[rpt_PropertyPerformance]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Reports].[rpt_PropertyPerformance] (
	@StartDate DATETIME
   ,@EndDate DATETIME
   ,@ListingID INT) 
/**************************************************************************************************************
*
* Name:	Reports.rpt_PropertyPerformance
*
* Desc:	The main stored proc for the Property Performance Report CBSA
*
* Test: EXEC Reports.rpt_PropertyPerformance_24212_TEST '11/01/2013', '11/30/2014', 182631
*
*
* Hist:	
*       01  04/17/2012  Richard Chen        Ticket 8999 Mobile and Cost Per Lead to MyAG
*       02  02/25/2013  Brian Trembley		Ticket 11704, convert rpt_PropertyPerformance_CPL to rpt_PropertyPerformance_CPL_CBSA
*		03  09/27/2013	Shetal Gandhi		Ticket 13395 - Added + SUM(ml.ClicksListingMap) to mapclicks
*		04	11/21/2013	Don Wert			Ticket 13772, add EasyPay leads
*		05	01/03/2014	Sarah Mims			Ticket #14141 - modified to include Rent
*		06	01/24/2014  Shetal Gandhi		Ticket #14141 - Added RentActive, RentFeatured ,RentPTE, RentBundle, RentVIP, RentVIPBundle to Query
*															Removed MonthlyCost,CostPerLead,AgEasyPayLeads,AGEasyPayEmailLeads Columns
*		07	02/06/2013	Sarah Mims			Ticket #14141 - Removed individual Rent upsells and setting a flag of the listing had any of them
*		08	02/11/2014	Sarah Mims			Ticket #14141 - added Invoiced Leases
*		09	04/23/2014	Sarah Mims			Ticket #15296 - added ImprSearchResults
*       10  12/15/2014  Bob Langley			Changed to take out the website parameter.  Changed code to not care bout the website.
* Hist: 11  04/15/2016   Clinton Woody		Ticket 22564 - No longer have leases so removed them from the report and this sp
*       12	10/15/2016	Bob Langley			Ticket 24212 - Changed to add MissedCalls to leads (where does connectedcalls)
***************************************************************************************************************/
AS 

BEGIN 

--------------------------------------------------------------------
--Declare and set variables
--------------------------------------------------------------------
	SET NOCOUNT ON
    
	DECLARE	@iStartYMDID INT
	   ,@iEndYMDID INT

	-- Until they tell us otherwise, we'll default to the last full month
	IF @StartDate IS NULL 
		SET @StartDate = DATEADD(MONTH,DATEDIFF(MONTH,0,GETDATE()) - 1,0)

	IF @EndDate IS NULL 
		SET @EndDate = DATEADD(DAY,-1,DATEADD(MONTH,DATEDIFF(MONTH,0,GETDATE()),0))

	-- Grab the int start date from the dimension.dates table, based on the end date
	SET @iStartYMDID = (
						SELECT	YMDID
						FROM	DBAUtility.Dimension.Dates
						WHERE	YMDDate = DATEADD(DAY,DATEDIFF(day,0,@StartDate),0)
					   )

	-- Now turn end date into an int
	SET @iEndYMDID = (
					  SELECT	YMDID
					  FROM		DBAUtility.Dimension.Dates
					  WHERE		YMDDate = DATEADD(DAY,DATEDIFF(day,0,@EndDate),0)
					 )

	IF @iEndYMDID > CAST(CONVERT(VARCHAR(8),GETDATE() - 1,112) AS INT) 
		BEGIN
			SET @iEndYMDID = CAST(CONVERT(VARCHAR(8),GETDATE() - 1,112) AS INT)
		END

--------------------------------------------------------------------------------
-- Find the last date of each month in select date range
--------------------------------------------------------------------------------
	SELECT	d.monthEndYmdID
	INTO	#d
	FROM	(
			 SELECT DISTINCT
					monthendymdid
			 FROM	dbautility.dimension.dates
			 WHERE	ymdid BETWEEN @iStartYmdid AND @iEndYmdid
					AND monthendymdid BETWEEN @iStartYmdid AND @iEndYmdid
			 UNION
			 SELECT	@iEndYmdid
			) d
--------------------------------------------------------------------------------
--Get the listingID
--------------------------------------------------------------------------------
	SELECT	DISTINCT l.listingid
			,l.Website
	INTO	#lim
	FROM	ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS l
	WHERE	l.ListingID = @ListingID

--------------------------------------------------------------------------------
	--Tier information is base on the last date of that month. 
--------------------------------------------------------------------------------
	SELECT	ml.YearMonth
		   ,d.MonthEndYMDID
		   ,ml.ListingID
		   ,PlacementTier = MAX(CASE ml.PlacementTier
							  WHEN 05 THEN 'D'
							  WHEN 10 THEN 'P'
							  WHEN 20 THEN 'G'
							  WHEN 30 THEN 'S'
							  ELSE ''
							END)
		   ,PrintProductPoints = MAX(ml.PrintProductPoints)
		   ,InternetProductPoints = MAX(ml.InternetProductPoints)
		   ,LegacyLoyaltyPoints = MAX(ml.LegacyLoyaltyPoints)
		   ,ContractLoyaltyPoints = MAX(ml.ContractLoyaltyPoints)
	INTO	#tier
	FROM	ApartmentGuide.Mart.AGRentCombinedMartListings AS ml
	JOIN 	#lim AS lim
			ON ml.listingid = lim.listingid
				AND ml.Website = lim.Website
	JOIN 	#d	AS d
			ON ml.ymdid = d.MonthEndYmdid
	--WHERE	ml.ListingStatusID = 1		--added 12/15/2014  BL
GROUP BY ml.YearMonth
,d.MonthEndYMDID
,ml.ListingID

--------------------------------------------------------------------------------
--Lead and traffic is basic on sum or max during the whole month
--------------------------------------------------------------------------------
	SELECT	YearMonth = DATENAME(MONTH,CAST(dl.YearMonthInt AS VARCHAR(6)) + '01') + ' ' + LEFT(dl.YearMonthInt,4)
		   ,YearMonthInt = dl.YearMonthInt
		   ,ListingID = dl.ListingID
		   ,AGActive = dl.AGActive
		   ,RentActive = dl.RentActive
		   ,AllLeads = dl.AllLeads
		   ,InternetPhoneLeads_NoMobile = dl.InternetPhoneLeads_NoMobile
		   ,InternetEmailLeads_NoMobile = dl.InternetEmailLeads_NoMobile
		   ,MobileCalls = dl.MobileCalls
		   ,MobileEmails = dl.MobileEmails
		   ,EmailLeads = dl.EmailLeads
		   ,ThirdPartyFeedLeads = dl.ThirdPartyFeedLeads
		   ,PrintPhoneLeads = dl.PrintPhoneLeads
		   ,InternetPhoneLeads = dl.InternetPhoneLeads
		   ,MissedCalls = dl.MissedCalls
		   ,MapClicks = dl.MapClicks
		   ,YourWebsiteClicks = dl.YourWebsiteClicks
		   ,ListingPrinted = dl.ListingPrinted
		   ,UniqueVisits = dl.UniqueVisits
		   ,ImprSearchResults = dl.ImprSearchResults
		   ,HasRentUpsell =  CASE WHEN dl.RentFeatured + dl.RentPTE + dl.RentVIP > 0 THEN 1 ELSE 0 END
--		   ,InvoicedLeases = dl.InvoicedLeases
	INTO	#LeadAndTraffic
	FROM	(
			 SELECT	YearMonthInt = ml.yearmonth
				   ,AGActive = MAX(case when ml.Website = 'AG' then ml.ListingStatusId else null end)
				   ,RentActive = MAX(case when ml.Website = 'Rent' then ml.ListingStatusId else null end)
				   ,ListingID = MIN(dl.ListingId)
				   ,AllLeads = SUM(AllLeads)
				   ,InternetPhoneLeads_NoMobile = SUM(InternetPhoneLeads_NoMobile)
				   ,InternetEmailLeads_NoMobile = SUM(InternetEmailLeads_NoMobile)
				   ,MobileCalls = SUM(ml.MobileCalls)
				   ,MobileEmails = SUM(ml.MobileEmails)
				   ,EmailLeads = SUM(ml.EmailLeads) - SUM(ml.ThirdPartyFeedLeads)
				   ,ThirdPartyFeedLeads = SUM(ml.ThirdPartyFeedLeads)
				   ,PrintPhoneLeads = SUM(ml.ASGPrintConnectedCalls + ml.AGCPrintConnectedCalls + ml.ASGPrintMissedCalls + ml.AGCPrintMissedCalls)	--Ticket 24212
				   ,InternetPhoneLeads = SUM(ml.InternetPhoneLeads)
				   ,MissedCalls = SUM(AllMissedCalls)
				   ,MapClicks = SUM(ml.ClicksMapDirections) + SUM(ml.ClicksListingMap)
				   ,YourWebsiteClicks = SUM(ml.ClicksListingWebLink)
				   ,ListingPrinted = SUM(ml.ClicksPrintableGuide)
				   ,UniqueVisits = SUM(ml.UniqueVisits)
				   ,ImprSearchResults = SUM(ml.ImprSearchResults)
				   ,RentFeatured = MAX(ml.UpsellRentFeaturedPlacement)
				   ,RentPTE = MAX(ml.UpsellRentPTE)
				   ,RentVIP = MAX(ml.UpsellRentVIPPlacement)
--				   ,InvoicedLeases = SUM(ml.InvoicedLeases)
			 FROM	ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
			 INNER JOIN ApartmentGuide.Mart.AGRentCombinedMartListings AS ml
					ON dl.listingid = ml.listingid
						AND dl.Website = ml.Website
			 WHERE	 ml.ListingID = @ListingID					 
				AND ml.YMDID BETWEEN @iStartYMDID AND @iEndYMDID
				--AND ml.ListingStatusID = 1		--added 12/15/2014	BL
			 GROUP BY ml.yearmonth
			) AS dl
          

		  
--------------------------------------------------------------------------------
--Select out final result set
--------------------------------------------------------------------------------
	SELECT	l.YearMonth
		   ,l.YearMonthInt
		   ,l.ListingID
		   ,l.AGActive
		   ,l.RentActive
		   ,l.AllLeads
		   ,l.InternetPhoneLeads_NoMobile
		   ,l.InternetEmailLeads_NoMobile
		   ,l.MobileCalls
		   ,l.MobileEmails
		   ,l.EmailLeads
		   ,l.PrintPhoneLeads
		   ,l.InternetPhoneLeads
		   ,l.MissedCalls
		   ,l.MapClicks
		   ,l.YourWebsiteClicks
		   ,l.ListingPrinted
		   ,l.UniqueVisits
		   ,l.ImprSearchResults
		   ,l.ThirdPartyFeedLeads
		   ,t.MonthEndYmdID
		   ,t.PlacementTier
		   ,t.PrintProductPoints + t.InternetProductPoints + t.LegacyLoyaltyPoints + t.ContractLoyaltyPoints AS TotalPoints
		   ,l.HasRentUpsell
--		   ,l.InvoicedLeases         
	FROM	#LeadAndTraffic l
	LEFT OUTER JOIN #tier t
			ON l.yearMonthInt = t.yearmonth
			   AND l.listingid = t.listingid
	ORDER BY L.YearMonthInt
		
	SET NOCOUNT OFF

END




GO
/****** Object:  StoredProcedure [Reports].[rpt_PropertyPerformanceRCTest]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Reports].[rpt_PropertyPerformanceRCTest] (
	@StartDate DATETIME
   ,@EndDate DATETIME
   ,@ListingID INT) 
/**************************************************************************************************************
*
* Name:	Reports.rpt_PropertyPerformance
*
* Desc:	The main stored proc for the Property Performance Report CBSA
*
* Test: 
EXEC Reports.rpt_PropertyPerformance '05/01/2015', '05/31/2016', 182631
EXEC Reports.rpt_PropertyPerformance '05/01/2015', '05/31/2016', 100026351
*
*
* Hist:	
*       01  04/17/2012  Richard Chen        Ticket 8999 Mobile and Cost Per Lead to MyAG
*       02  02/25/2013  Brian Trembley		Ticket 11704, convert rpt_PropertyPerformance_CPL to rpt_PropertyPerformance_CPL_CBSA
*		03  09/27/2013	Shetal Gandhi		Ticket 13395 - Added + SUM(ml.ClicksListingMap) to mapclicks
*		04	11/21/2013	Don Wert			Ticket 13772, add EasyPay leads
*		05	01/03/2014	Sarah Mims			Ticket #14141 - modified to include Rent
*		06	01/24/2014  Shetal Gandhi		Ticket #14141 - Added RentActive, RentFeatured ,RentPTE, RentBundle, RentVIP, RentVIPBundle to Query
*															Removed MonthlyCost,CostPerLead,AgEasyPayLeads,AGEasyPayEmailLeads Columns
*		07	02/06/2013	Sarah Mims			Ticket #14141 - Removed individual Rent upsells and setting a flag of the listing had any of them
*		08	02/11/2014	Sarah Mims			Ticket #14141 - added Invoiced Leases
*		09	04/23/2014	Sarah Mims			Ticket #15296 - added ImprSearchResults
*       10  12/15/2014  Bob Langley			Changed to take out the website parameter.  Changed code to not care bout the website.
* Hist: 11  04/15/2016   Clinton Woody		Ticket 22564 - No longer have leases so removed them from the report and this sp
***************************************************************************************************************/
AS 

BEGIN 

--------------------------------------------------------------------
--Declare and set variables
--------------------------------------------------------------------
	SET NOCOUNT ON
    
	DECLARE	@iStartYMDID INT
	   ,@iEndYMDID INT

	-- Until they tell us otherwise, we'll default to the last full month
	IF @StartDate IS NULL 
		SET @StartDate = DATEADD(MONTH,DATEDIFF(MONTH,0,GETDATE()) - 1,0)

	IF @EndDate IS NULL 
		SET @EndDate = DATEADD(DAY,-1,DATEADD(MONTH,DATEDIFF(MONTH,0,GETDATE()),0))

	-- Grab the int start date from the dimension.dates table, based on the end date
	SET @iStartYMDID = (
						SELECT	YMDID
						FROM	DBAUtility.Dimension.Dates
						WHERE	YMDDate = DATEADD(DAY,DATEDIFF(day,0,@StartDate),0)
					   )

	-- Now turn end date into an int
	SET @iEndYMDID = (
					  SELECT	YMDID
					  FROM		DBAUtility.Dimension.Dates
					  WHERE		YMDDate = DATEADD(DAY,DATEDIFF(day,0,@EndDate),0)
					 )

	IF @iEndYMDID > CAST(CONVERT(VARCHAR(8),GETDATE() - 1,112) AS INT) 
		BEGIN
			SET @iEndYMDID = CAST(CONVERT(VARCHAR(8),GETDATE() - 1,112) AS INT)
		END

--------------------------------------------------------------------------------
-- Find the last date of each month in select date range
--------------------------------------------------------------------------------
	SELECT	d.monthEndYmdID
	INTO	#d
	FROM	(
			 SELECT DISTINCT
					monthendymdid
			 FROM	dbautility.dimension.dates
			 WHERE	ymdid BETWEEN @iStartYmdid AND @iEndYmdid
					AND monthendymdid BETWEEN @iStartYmdid AND @iEndYmdid
			 UNION
			 SELECT	@iEndYmdid
			) d
--------------------------------------------------------------------------------
--Get the listingID
--------------------------------------------------------------------------------
	SELECT	DISTINCT l.listingid
			,l.Website
	INTO	#lim
	FROM	ApartmentGuide.Dimension.AGRentCombinedDimensionListingsRCTest AS l
	WHERE	l.ListingID = @ListingID

--------------------------------------------------------------------------------
	--Tier information is base on the last date of that month. 
--------------------------------------------------------------------------------
	SELECT	ml.YearMonth
		   ,d.MonthEndYMDID
		   ,ml.ListingID
		   ,PlacementTier = MAX(CASE ml.PlacementTier
							  WHEN 05 THEN 'D'
							  WHEN 10 THEN 'P'
							  WHEN 20 THEN 'G'
							  WHEN 30 THEN 'S'
							  ELSE ''
							END)
		   ,PrintProductPoints = MAX(ml.PrintProductPoints)
		   ,InternetProductPoints = MAX(ml.InternetProductPoints)
		   ,LegacyLoyaltyPoints = MAX(ml.LegacyLoyaltyPoints)
		   ,ContractLoyaltyPoints = MAX(ml.ContractLoyaltyPoints)
	INTO	#tier
	FROM	ApartmentGuide.Mart.AGRentCombinedMartListingsRCTest AS ml
	JOIN 	#lim AS lim
			ON ml.listingid = lim.listingid
				AND ml.Website = lim.Website
	JOIN 	#d	AS d
			ON ml.ymdid = d.MonthEndYmdid
	--WHERE	ml.ListingStatusID = 1		--added 12/15/2014  BL
GROUP BY ml.YearMonth
,d.MonthEndYMDID
,ml.ListingID

--------------------------------------------------------------------------------
--Lead and traffic is basic on sum or max during the whole month
--------------------------------------------------------------------------------
	SELECT	YearMonth = DATENAME(MONTH,CAST(dl.YearMonthInt AS VARCHAR(6)) + '01') + ' ' + LEFT(dl.YearMonthInt,4)
		   ,YearMonthInt = dl.YearMonthInt
		   ,ListingID = dl.ListingID
		   ,AGActive = dl.AGActive
		   ,RentActive = dl.RentActive
		   ,AllLeads = dl.AllLeads
		   ,InternetPhoneLeads_NoMobile = dl.InternetPhoneLeads_NoMobile
		   ,InternetEmailLeads_NoMobile = dl.InternetEmailLeads_NoMobile
		   ,MobileCalls = dl.MobileCalls
		   ,MobileEmails = dl.MobileEmails
		   ,EmailLeads = dl.EmailLeads
		   ,ThirdPartyFeedLeads = dl.ThirdPartyFeedLeads
		   ,PrintPhoneLeads = dl.PrintPhoneLeads
		   ,InternetPhoneLeads = dl.InternetPhoneLeads
		   ,MissedCalls = dl.MissedCalls
		   ,MapClicks = dl.MapClicks
		   ,YourWebsiteClicks = dl.YourWebsiteClicks
		   ,ListingPrinted = dl.ListingPrinted
		   ,UniqueVisits = dl.UniqueVisits
		   ,ImprSearchResults = dl.ImprSearchResults
		   ,HasRentUpsell =  CASE WHEN dl.RentFeatured + dl.RentPTE + dl.RentVIP > 0 THEN 1 ELSE 0 END
--		   ,InvoicedLeases = dl.InvoicedLeases
	INTO	#LeadAndTraffic
	FROM	(
			 SELECT	YearMonthInt = ml.yearmonth
				   ,AGActive = MAX(CASE WHEN ml.Website = 'AG' THEN ml.ListingStatusId ELSE NULL END)
				   ,RentActive = MAX(CASE WHEN ml.Website = 'Rent' THEN ml.ListingStatusId ELSE NULL END)
				   ,ListingID = MIN(dl.ListingId)
				   ,AllLeads = SUM(AllLeads)
				   ,InternetPhoneLeads_NoMobile = SUM(InternetPhoneLeads_NoMobile)
				   ,InternetEmailLeads_NoMobile = SUM(InternetEmailLeads_NoMobile)
				   ,MobileCalls = SUM(ml.MobileCalls)
				   ,MobileEmails = SUM(ml.MobileEmails)
				   ,EmailLeads = SUM(ml.EmailLeads) - SUM(ml.ThirdPartyFeedLeads)
				   ,ThirdPartyFeedLeads = SUM(ml.ThirdPartyFeedLeads)
				   ,PrintPhoneLeads = SUM(ml.ASGPrintConnectedCalls + ml.AGCPrintConnectedCalls)
				   ,InternetPhoneLeads = SUM(ml.InternetPhoneLeads)
				   ,MissedCalls = SUM(AllMissedCalls)
				   ,MapClicks = SUM(ml.ClicksMapDirections) + SUM(ml.ClicksListingMap)
				   ,YourWebsiteClicks = SUM(ml.ClicksListingWebLink)
				   ,ListingPrinted = SUM(ml.ClicksPrintableGuide)
				   ,UniqueVisits = SUM(ml.UniqueVisits)
				   ,ImprSearchResults = SUM(ml.ImprSearchResults)
				   ,RentFeatured = MAX(ml.UpsellRentFeaturedPlacement)
				   ,RentPTE = MAX(ml.UpsellRentPTE)
				   ,RentVIP = MAX(ml.UpsellRentVIPPlacement)
--				   ,InvoicedLeases = SUM(ml.InvoicedLeases)
			 FROM	ApartmentGuide.Dimension.AGRentCombinedDimensionListingsRCTest AS dl
			 INNER JOIN ApartmentGuide.Mart.AGRentCombinedMartListingsRCTest AS ml
					ON dl.listingid = ml.listingid
						AND dl.Website = ml.Website
			 WHERE	 ml.ListingID = @ListingID					 
				AND ml.YMDID BETWEEN @iStartYMDID AND @iEndYMDID
				--AND ml.ListingStatusID = 1		--added 12/15/2014	BL
			 GROUP BY ml.yearmonth
			) AS dl
          

		  
--------------------------------------------------------------------------------
--Select out final result set
--------------------------------------------------------------------------------
	SELECT	l.YearMonth
		   ,l.YearMonthInt
		   ,l.ListingID
		   ,l.AGActive
		   ,l.RentActive
		   ,l.AllLeads
		   ,l.InternetPhoneLeads_NoMobile
		   ,l.InternetEmailLeads_NoMobile
		   ,l.MobileCalls
		   ,l.MobileEmails
		   ,l.EmailLeads
		   ,l.PrintPhoneLeads
		   ,l.InternetPhoneLeads
		   ,l.MissedCalls
		   ,l.MapClicks
		   ,l.YourWebsiteClicks
		   ,l.ListingPrinted
		   ,l.UniqueVisits
		   ,l.ImprSearchResults
		   ,l.ThirdPartyFeedLeads
		   ,t.MonthEndYmdID
		   ,t.PlacementTier
		   ,t.PrintProductPoints + t.InternetProductPoints + t.LegacyLoyaltyPoints + t.ContractLoyaltyPoints AS TotalPoints
		   ,l.HasRentUpsell
--		   ,l.InvoicedLeases         
	FROM	#LeadAndTraffic l
	LEFT OUTER JOIN #tier t
			ON l.yearMonthInt = t.yearmonth
			   AND l.listingid = t.listingid
	ORDER BY L.YearMonthInt
		
	SET NOCOUNT OFF

END




GO
/****** Object:  StoredProcedure [Reports].[rpt_PropertyPerformanceSummary]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Reports].[rpt_PropertyPerformanceSummary] 
	(@ListingID INT)
AS /******************************************************************************************
*
* Name:	Reports.rpt_PropertyPerformanceSummary
*
* Desc:	The dimension based portion of the prop performance report, displayed at the top
*
* Test:	EXEC Reports.rpt_PropertyPerformanceSummary 1,0
*
*
* Hist:	01	11/07/2008	David McFarland		Initial Version
*
*		02	11/10/2008	David McFarland		Changed ListingType to use the ListingTypeShort column
*
*		03	12/01/2008	David McFarland		Added logic to return print and internet tollfree
*											as well as how long we've been tracking them. This
*											also required adding MarketCD as a parameter.
*
*		04	01/09/2009	David McFarland		Removed PrintTollFree number when CallTrackingInBook
*											is not turned on
*		05	03/11/2009	David McFarland		Fully qualified the table names
*       06  04/14/2009  Richard Chen        Remove Carriag Return, Line Feed in Coupon text
*       07  11/12/2009  Richard Chen        Add rentals toll free number
*       08  06/15/2010  Richard Chen        Use MaxPrimaryMarketCD
*       09  02/15/2011  Francine Grant	    Updated to use data for the min ListingTypeId
*       10  02/25/2013  Brian Trembley		Created rpt_PropertyPerformanceSummary_CBSA based on [rpt_PropertyPerformanceSummary]
*		11	01/03/2013	Sarah Mims			Ticket # 14141 -  Modified to include Rent.
*       12  12/15/2014  Bob Langley			Changed to take out the website parameter.  Changed code to not care bout the website.
******************************************************************************************/

SET NOCOUNT ON

------------------------------------------------------------------------------------------
--Get the listingID
------------------------------------------------------------------------------------------
SELECT   Website
,ListingID
INTO #Listings
FROM ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS ar
WHERE ar.ListingID = @ListingID

------------------------------------------------------------------------------------------
--Select out the results. One row per website.
------------------------------------------------------------------------------------------   

SELECT  l.Website
	   ,ListingID = l.ListingID
	   ,PropertyName = l.PropertyName
       ,MgtCoName = l.MgtCoName
       ,DateString = 'As of ' + CONVERT(VARCHAR(10),CAST(CAST(l.YMDID AS VARCHAR(8)) AS DATETIME),101)
       ,ListingType = l.ListingTypeShort
       ,Active = l.StatusID
       ,LastUpdated = CONVERT(VARCHAR(10),CAST(CAST(l.LastUpdateYMDID AS VARCHAR(8)) AS DATETIME),101)
       ,Photos = l.ActivePhotos
       ,FloorPlans = l.ActiveFloorPlans
       ,StandardAmenities = CAST(l.ActiveAmenities AS VARCHAR(3)) + ' of ' + CAST(l.TotalAmenities AS VARCHAR(3))
       ,Pricing = l.ShowPricing
       ,Coupon = l.CouponActiveOnSite
       ,CouponExpiration = l.CouponExpirationDate
       ,CouponText = REPLACE(REPLACE(l.CouponText,CHAR(10),' '),CHAR(13),' ')
       ,PrintTollFree = CASE WHEN l.CallTrackingInBook = 1 THEN CASE WHEN lm.MarketType = 'ASG' THEN l.ASGTollFree
                                                                     ELSE l.AGCTollFree
                                                                END
                             ELSE ''
                        END
       ,PrintTarget = CASE WHEN l.CallTrackingInBook = 1 THEN CASE WHEN lm.MarketType = 'ASG' THEN l.ASGTarget
                                                                   ELSE l.AGCTarget
                                                              END
                           ELSE ''
                      END
       ,InternetTollFree = l.WebTollFree
       ,InternetTarget = l.WebTarget
       ,RentalsTollFree = l.RentalsTollFree
       ,RentalsTarget = l.RentalsTarget	 
       ,CallTrackingInBookSince = l.CallTrackingInBookStartDate
       ,AllListingLeadContact = dbautility.dbo.fn_rtrim((
                                                         SELECT CASE WHEN LeadFax <> ''
                                                                          AND UnusedLeadEmail <> '' THEN LeadFax + ' / ' + UnusedLeadEmail + ';'
                                                                     ELSE LeadFax + UnusedLeadEmail + ';'
                                                                END
                                                         FROM   ApartmentGuide.Dimension.AGRentCombinedDimensionListings
                                                         WHERE ListingID = @ListingID
                                                         GROUP BY CASE WHEN LeadFax <> ''
                                                                            AND UnusedLeadEmail <> '' THEN LeadFax + ' / ' + UnusedLeadEmail + ';'
                                                                       ELSE LeadFax + UnusedLeadEmail + ';'
                                                                  END
                                                        FOR
                                                         XML PATH('')
                                                        ),';')		
		,' (' + z.CBSAName + ' )' AS CBSAName
FROM    ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS l
JOIN	#Listings AS ls
	ON l.ListingID = ls.ListingID
	AND l.Website = ls.Website
LEFT OUTER JOIN ApartmentGuide.Dimension.ListingMarket AS lm
        ON l.ListingID = lm.ListingID
LEFT JOIN DBAUtility.dbo.ZipCBSA z 
		ON z.ZIPCode = l.ZipCode

ORDER BY ListingType
	
SET NOCOUNT OFF
    



GO
/****** Object:  StoredProcedure [Reports].[rpt_PropertyPerformanceSummary_CRTest]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Reports].[rpt_PropertyPerformanceSummary_CRTest] 
	(@ListingID INT)
AS /******************************************************************************************
*
* Name:	Reports.rpt_PropertyPerformanceSummary
*
* Desc:	The dimension based portion of the prop performance report, displayed at the top
*
* Test:	EXEC Reports.rpt_PropertyPerformanceSummary 1,0
*
*
* Hist:	01	11/07/2008	David McFarland		Initial Version
*
*		02	11/10/2008	David McFarland		Changed ListingType to use the ListingTypeShort column
*
*		03	12/01/2008	David McFarland		Added logic to return print and internet tollfree
*											as well as how long we've been tracking them. This
*											also required adding MarketCD as a parameter.
*
*		04	01/09/2009	David McFarland		Removed PrintTollFree number when CallTrackingInBook
*											is not turned on
*		05	03/11/2009	David McFarland		Fully qualified the table names
*       06  04/14/2009  Richard Chen        Remove Carriag Return, Line Feed in Coupon text
*       07  11/12/2009  Richard Chen        Add rentals toll free number
*       08  06/15/2010  Richard Chen        Use MaxPrimaryMarketCD
*       09  02/15/2011  Francine Grant	    Updated to use data for the min ListingTypeId
*       10  02/25/2013  Brian Trembley		Created rpt_PropertyPerformanceSummary_CBSA based on [rpt_PropertyPerformanceSummary]
*		11	01/03/2013	Sarah Mims			Ticket # 14141 -  Modified to include Rent.
*       12  12/15/2014  Bob Langley			Changed to take out the website parameter.  Changed code to not care bout the website.
******************************************************************************************/

SET NOCOUNT ON

------------------------------------------------------------------------------------------
--Get the listingID
------------------------------------------------------------------------------------------
SELECT   Website
,ListingID
INTO #Listings
FROM ApartmentGuide.Dimension.AGRentCombinedDimensionListingsRCTest AS ar
WHERE ar.ListingID = @ListingID

------------------------------------------------------------------------------------------
--Select out the results. One row per website.
------------------------------------------------------------------------------------------   

SELECT  l.Website
	   ,ListingID = l.ListingID
	   ,PropertyName = l.PropertyName
       ,MgtCoName = l.MgtCoName
       ,DateString = 'As of ' + CONVERT(VARCHAR(10),CAST(CAST(l.YMDID AS VARCHAR(8)) AS DATETIME),101)
       ,ListingType = l.ListingTypeShort
       ,Active = l.StatusID
       ,LastUpdated = CONVERT(VARCHAR(10),CAST(CAST(l.LastUpdateYMDID AS VARCHAR(8)) AS DATETIME),101)
       ,Photos = l.ActivePhotos
       ,FloorPlans = l.ActiveFloorPlans
       ,StandardAmenities = CAST(l.ActiveAmenities AS VARCHAR(3)) + ' of ' + CAST(l.TotalAmenities AS VARCHAR(3))
       ,Pricing = l.ShowPricing
       ,Coupon = l.CouponActiveOnSite
       ,CouponExpiration = l.CouponExpirationDate
       ,CouponText = REPLACE(REPLACE(l.CouponText,CHAR(10),' '),CHAR(13),' ')
       ,PrintTollFree = CASE WHEN l.CallTrackingInBook = 1 THEN CASE WHEN lm.MarketType = 'ASG' THEN l.ASGTollFree
                                                                     ELSE l.AGCTollFree
                                                                END
                             ELSE ''
                        END
       ,PrintTarget = CASE WHEN l.CallTrackingInBook = 1 THEN CASE WHEN lm.MarketType = 'ASG' THEN l.ASGTarget
                                                                   ELSE l.AGCTarget
                                                              END
                           ELSE ''
                      END
       ,InternetTollFree = l.WebTollFree
       ,InternetTarget = l.WebTarget
       ,RentalsTollFree = l.RentalsTollFree
       ,RentalsTarget = l.RentalsTarget	 
       ,CallTrackingInBookSince = l.CallTrackingInBookStartDate
       ,AllListingLeadContact = dbautility.dbo.fn_rtrim((
                                                         SELECT CASE WHEN LeadFax <> ''
                                                                          AND UnusedLeadEmail <> '' THEN LeadFax + ' / ' + UnusedLeadEmail + ';'
                                                                     ELSE LeadFax + UnusedLeadEmail + ';'
                                                                END
                                                         FROM   ApartmentGuide.Dimension.AGRentCombinedDimensionListingsRCTest
                                                         WHERE ListingID = @ListingID
                                                         GROUP BY CASE WHEN LeadFax <> ''
                                                                            AND UnusedLeadEmail <> '' THEN LeadFax + ' / ' + UnusedLeadEmail + ';'
                                                                       ELSE LeadFax + UnusedLeadEmail + ';'
                                                                  END
                                                        FOR
                                                         XML PATH('')
                                                        ),';')		
		,' (' + z.CBSAName + ' )' AS CBSAName
FROM    ApartmentGuide.Dimension.AGRentCombinedDimensionListingsRCTest AS l
JOIN	#Listings AS ls
	ON l.ListingID = ls.ListingID
	AND l.Website = ls.Website
LEFT OUTER JOIN ApartmentGuide.Dimension.ListingMarket AS lm
        ON l.ListingID = lm.ListingID
LEFT JOIN DBAUtility.dbo.ZipCBSA z 
		ON z.ZIPCode = l.ZipCode

ORDER BY ListingType
	
SET NOCOUNT OFF
    




GO
/****** Object:  StoredProcedure [Reports].[rpt_PropertyPhoneLeadsDetail]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Reports].[rpt_PropertyPhoneLeadsDetail] (
    @AGPropertyID INT
   ,@DateRange INT = NULL)
/*************************************************************************************************
* Name:	Reports.rpt_PropertyPhoneLeadsDetail
*-------------------------------------------------------------------------------------------------
* Desc:	This returns the detail for phone leads for the two months prior to currently reported month plus currently reported month to date
*-------------------------------------------------------------------------------------------------
* Test:	
*		EXEC Reports.rpt_PropertyPhoneLeadsDetail 100518
*		EXEC Reports.rpt_PropertyPhoneLeadsDetail 100037397
*		EXEC Reports.rpt_PropertyPhoneLeadsDetail 6225
*		EXEC Reports.rpt_PropertyPhoneLeadsDetail 100011609
*	SELECT * FROM dbo.DashboardSubscriptions
*-------------------------------------------------------------------------------------------------
* Notes: THIS IS A CLIENT PORTAL DASHBOARD PROC. BEFORE MAKING CHANGES IN PRODUCTION, THEY MUST BE
* VETTED AND TESTED IN THE DEV & QA DATABASES FIRST.
*-------------------------------------------------------------------------------------------------
* Hist:	01	01/23/2015		Don Wert			Initial Version. TIcket # 17937.
* Hist: 02	02/11/2015		Don Wert			Ticket 18155, add ISNULL to prevent return of NULL values
* Hist: 03	03/09/2015		Bob Langley			Ticket 18155, change the AudioURL column value to use the nwe audio player
* Hist: 04	05/14/2015		Bob Langley			Changed to add additional check on building AudioURL by checking UpsellPropCallRecording > 0
* Hist:	05	06/05/2015		Kimberley Morrow	Ticket 19664, adding ExternalId to pass for csv.
* Hist: 06	06/23/2015		Shetal Gandhi		Ticket 19723 - Modified to include a date parameter
* Hist: 07	07/31/2015		Bob Langley			Ticket 19882 - changed to pull listingid for statusid=1 (wasn't doing that before)
* Hist: 08	08/18/2015		Shetal Gandhi		Ticket 20421 - Modified to use the New Rentpath tables instead of the AG Combined views
* Hist: 09	10/30/2016		Bob Langley			Ticket 24212 - Changed to add MissedCalls to leads (where does connectedcalls)
* Hist: 10  05/04/2017		Kimberley Morrow	Case# 01468091 - Changed new audio link for new location - https://dashboard.apartmentguide.com/audio/mp3player/
**************************************************************************************************/
AS
SET NOCOUNT ON;

/*test
DECLARE @AGPropertyID INT
SET @AGPropertyID = 6225
*/

BEGIN

 	/* ======================================================================================== */
	--Set the proper dates



	

	--start and end dates
    DECLARE @StartYMDID INT;
    DECLARE @EndYMDID INT;
    
    IF @DateRange IS NULL
        SET @DateRange = 1;

	--SET @StartYMDID  =  CAST(CONVERT(VARCHAR,DATEADD(MONTH,DATEDIFF(MONTH,0,GETDATE()) - 2,0),112) AS INT)
    SELECT  @StartYMDID = MonthStartYMDID
    FROM    DBAUtility.Dimension.Dates
    WHERE   YMDID = CASE WHEN @DateRange = 1 THEN CONVERT(INT,CONVERT(VARCHAR(10),CAST(DATEADD(m,-2,DATEADD(dd,-1,GETDATE())) AS DATE),112))
                         WHEN @DateRange = 2 THEN CONVERT(INT,CONVERT(VARCHAR(10),CAST(DATEADD(m,-12,DATEADD(dd,-1,GETDATE())) AS DATE),112))
                         WHEN @DateRange = 3 THEN CONVERT(INT,CONVERT(VARCHAR(10),CAST(DATEADD(yy,DATEDIFF(yy,0,GETDATE()),0) AS DATE),112))
                    END;
  

    SET @EndYMDID = CAST(CONVERT(VARCHAR,GETDATE() - 1,112) AS INT);
	 

	--SELECT @StartYMDID AS StartYMDID
	--SELECT @EndYMDID AS EndYMDID


	--PRINT '@startYMDID = ' + CONVERT(varchar(30),@startYMDID)
	--PRINT '@endYMDID = ' + CONVERT(varchar(30),@endYMDID)


	/* ======================================================================================== */


    DECLARE @ListingID INT;

    SELECT  @ListingID = CASE WHEN ISNULL(@AGPropertyID,0) = 0 THEN 0
                              ELSE (
                                    SELECT  MAX(ListingID) AS ListingID
                                    FROM    RentPath.Dimension.Listings
                                    WHERE   PropertyIDAG = @AGPropertyID
                                            AND (StatusIDAG = 1
                                                 OR StatusIDRent = 1)
                                   )
                         END;



    SELECT  @AGPropertyID AS AGPropertyID
           ,CONVERT(VARCHAR(10),cag.CallStartDateTime,101) AS CallDate
           ,SUBSTRING(CONVERT(VARCHAR(30),cag.CallStartDateTime,100),13,7) AS CallTime
           ,ISNULL(cag.CallerPhoneNumber,'') AS CallerPhoneNumber
           ,cag.CallerName
           ,ISNULL(cag.CallerLocation,'') AS CallerLocation
           ,CASE cag.CallStatus
              WHEN 1 THEN 'Connected'
              WHEN 2 THEN 'Busy'
              WHEN 3 THEN 'Missed'
              ELSE 'Other'
            END AS CallStatus
           ,cag.IsAbandoned
           ,ISNULL(cag.DurationInSeconds,0) AS DurationInSeconds
           ,ISNULL(CAST(CASE WHEN CASE WHEN cag.CallStatus IN (1,2,3)				--Ticket 24212 added missed calls to connected
                                            AND cag.TotalCallerTrimTalkTime IS NOT NULL
                                            AND cag.AudioURL IS NOT NULL THEN 1
                                       ELSE 0
                                  END = 0 THEN 0
                             ELSE CAST(cag.TimePriorToCallerSpeaking AS MONEY) / CASE WHEN cag.CallStatus IN (1,2,3)				--Ticket 24212 added missed calls to connected
                                                                                           AND cag.TotalCallerTrimTalkTime IS NOT NULL
                                                                                           AND cag.AudioURL IS NOT NULL THEN 1
                                                                                      ELSE 0
                                                                                 END
                        END AS INT),0) AS CallWaitTime
           ,(CASE WHEN (cag.AudioURL IS NOT NULL) THEN 'https://dashboard.apartmentguide.com/audio/mp3player/' + LTRIM(RTRIM(CONVERT(VARCHAR(300),cag.CallId)))
                  ELSE NULL
             END) AS AudioURL
		   ,cag.CallId
           ,cr.ExternalID
    FROM    RentPath.Mart.PhoneLeads AS cag WITH (NOLOCK)
    LEFT OUTER JOIN (
                     SELECT ListingID
                           ,ExternalID
                           ,MAX(ISNULL(CallRecordingOptOut,0)) AS UpsellPropCallRecording
                     FROM   RentPath.Dimension.Listings WITH (NOLOCK)
                     GROUP BY ListingID
                           ,ExternalID
                    ) AS cr
            ON cr.ListingID = cag.ListingID
    WHERE   cag.YMDID BETWEEN @StartYMDID AND @EndYMDID
            AND cag.CallType <> 'CRAIGSLIST'
            AND cag.ListingID = @ListingID
    ORDER BY cag.CallStartDateTime DESC;


    SET NOCOUNT OFF;

END;










GO
/****** Object:  StoredProcedure [Reports].[rpt_PropertyPhoneLeadsDetail_For_AdvancedReport]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Reports].[rpt_PropertyPhoneLeadsDetail_For_AdvancedReport] (
    @AGPropertyID INT
   ,@subscriptionid INT = NULL)
/*************************************************************************************************
*
* Name:	Reports.rpt_PropertyPhoneLeadsDetail_For_AdvancedReport
*
* Desc:	This returns the detail for phone leads for advanced reports
*
* Test:	
*    DEV
		EXEC Reports.rpt_PropertyPhoneLeadsDetail_For_AdvancedReport 100518
		EXEC Reports.rpt_PropertyPhoneLeadsDetail_For_AdvancedReport 100052871,NULL
		EXEC Reports.rpt_PropertyPhoneLeadsDetail_For_AdvancedReport 0,3

	QA
		EXEC Reports.rpt_PropertyPhoneLeadsDetail_For_AdvancedReport 100518
		EXEC Reports.rpt_PropertyPhoneLeadsDetail_For_AdvancedReport 100052871,NULL
		EXEC Reports.rpt_PropertyPhoneLeadsDetail_For_AdvancedReport 0,6070

*
*	SELECT * FROM dbo.DashboardSubscriptions
*
* Hist:	01	01/23/2015		Don Wert			Initial Version. TIcket # 17937.
* Hist: 02	02/11/2015		Don Wert			Ticket 18155, add ISNULL to prevent return of NULL values
* Hist: 03	03/09/2015		Bob Langley			Ticket 18155, change the AudioURL column value to use the nwe audio player
* Hist: 04	05/14/2015		Bob Langley			Changed to add additional check on building AudioURL by checking UpsellPropCallRecording > 0
* Hist: 05	06/05/2015		Bob Langley			Changed to  add new parameters for AdvancedReportType and SubscriptionID
* Hist:	06	06/05/2015		Kimberley Morrow	Ticket 19664, adding ExternalId to pass for csv.
* Hist: 07	06/12/2015		Bob Langley			Ticket 19612 - Copied rpt_PropertyEmailLeadsDetail SPROC to this one and modified to add the logic needed for AdvancedReport process.
* Hist: 08	08/18/2015		Shetal Gandhi		Ticket 20421 - Modified to use the New Rentpath tables instead of the AG Combined views
* Hist: 09	01/21/2016		Kimberley Morrow	Ticket 21858 - Add flags for Axio Data Product
* Hist: 10	05/18/2016		Kimberley Morrow	Ticket 23085;  Add Axio Market ID
* Hist: 11	10/30/2016		Bob Langley			Ticket 24212 - Changed to add MissedCalls to leads (where does connectedcalls)
* Hist: 12  05/05/2017		Kimberley Morrow	Case# 01468091 - Changed new audio link for new location - https://dashboard.apartmentguide.com/audio/mp3player/
**************************************************************************************************/
AS
SET NOCOUNT ON;




BEGIN
    DECLARE @advancedreporttype INT;
    DECLARE @userguid UNIQUEIDENTIFIER;
    DECLARE @ListingID INT;
    DECLARE @AGPropertyIDAlt INT;

    DECLARE @recct INT;
    DECLARE @recnumtoreturn INT;


	/*test
	DECLARE @AGPropertyID INT
	DECLARE @subscriptionid	int

	SET @AGPropertyID = 6225
	SET @subscriptionid = NULL
	*/


 	/* ======================================================================================== */
	--Set the proper dates


    DECLARE @report INT;
    DECLARE @frequency INT;

	
	--start and end dates
    DECLARE @StartYMDID INT;
    DECLARE @EndYMDID INT;
    


    DECLARE @dayofweek INT;
    DECLARE @offset INT;


	
    SET @report = NULL;
    SET @frequency = NULL;


	--last three months (this month inclusive to yesterday)
	--SET @StartYMDID  =  CAST(CONVERT(VARCHAR,DATEADD(MONTH,DATEDIFF(MONTH,0,GETDATE()) - 2,0),112) AS INT)
	--SET @EndYMDID =  CAST(CONVERT(VARCHAR,GETDATE() - 1,112) AS INT)

	--Set dates to Monthly (last month)
	--Monthly
    SET @StartYMDID = CAST(CONVERT(VARCHAR(8),DATEADD(m,-1,DATEADD(m,DATEDIFF(m,0,GETDATE()),0)),112) AS INT);
    SET @EndYMDID = CAST(CONVERT(VARCHAR(8),DATEADD(d,-1,DATEADD(m,1,DATEADD(m,-1,DATEADD(m,DATEDIFF(m,0,GETDATE()),0)))),112) AS INT);


    IF (@subscriptionid IS NOT NULL)
        AND (@subscriptionid > 0)
        BEGIN
            SET @report = (
                           SELECT   Report
                           FROM     dbo.DashboardSubscriptions WITH (NOLOCK)
                           WHERE    SubscriptionID = @subscriptionid
                          );
            SET @frequency = (
                              SELECT    Frequency
                              FROM      dbo.DashboardSubscriptions WITH (NOLOCK)
                              WHERE     SubscriptionID = @subscriptionid
                             );
            SET @advancedreporttype = (
                                       SELECT   AdvancedReportType
                                       FROM     dbo.DashboardSubscriptions WITH (NOLOCK)
                                       WHERE    SubscriptionID = @subscriptionid
                                      );
        END;







    IF @advancedreporttype = 2
        OR @advancedreporttype = 3
        BEGIN
			--reset the dates to last three months (this month inclusive to yesterday)
            SET @StartYMDID = CAST(CONVERT(VARCHAR(8),DATEADD(m,-1,DATEADD(m,DATEDIFF(m,0,GETDATE()),0)),112) AS INT);		--first day of last month
            SET @EndYMDID = CAST(CONVERT(VARCHAR(8),DATEADD(d,-1,DATEADD(m,1,DATEADD(m,-1,DATEADD(m,DATEDIFF(m,0,GETDATE()),0)))),112) AS INT);		--last day of last month



            IF @frequency = 2
                BEGIN
					--reset the dates to the Weekly dates
                    SET @dayofweek = DATEPART(dw,GETDATE());
                    SET @EndYMDID = CONVERT(INT,CONVERT(VARCHAR(10),DATEADD(dd,@dayofweek * (-1),GETDATE()),112));
                    SET @StartYMDID = CONVERT(INT,CONVERT(VARCHAR(10),DATEADD(dd,-6,CONVERT(DATETIME,CONVERT(VARCHAR(8),@EndYMDID))),112));
                END;


			--reset the dates to the Daily dates
            IF @frequency = 1
                BEGIN
                    SET @StartYMDID = CONVERT(INT,CONVERT(VARCHAR(10),DATEADD(dd,-1,GETDATE()),112));
                    SET @EndYMDID = CONVERT(INT,CONVERT(VARCHAR(10),DATEADD(dd,-1,GETDATE()),112));
                END;
        END;

    IF (@subscriptionid IS NULL)
        OR (@subscriptionid = 0)		--this denotes a SEND_TEST situation, where Frequency is not known (since not an input parameter) and SubscriptionID is blank, so can't get from that record,either.
        BEGIN
            SET @StartYMDID = CONVERT(INT,CONVERT(VARCHAR(10),CONVERT(DATETIME,'01/01/2013'),112));		--doing most recent top 10, so get full listing to chose those from
            SET @EndYMDID = CAST(CONVERT(VARCHAR(8),DATEADD(d,-1,DATEADD(m,1,DATEADD(m,-1,DATEADD(m,DATEDIFF(m,0,GETDATE()),0)))),112) AS INT);
        END;
	--SELECT @StartYMDID AS StartYMDID
	--SELECT @EndYMDID AS EndYMDID


	--PRINT '@startYMDID = ' + CONVERT(varchar(30),@startYMDID)
	--PRINT '@endYMDID = ' + CONVERT(varchar(30),@endYMDID)


	/* ======================================================================================== */
    BEGIN TRY
        DROP TABLE #tmpfinalresultset;
    END TRY
    BEGIN CATCH
    END CATCH;

    CREATE TABLE #tmpfinalresultset (
        YMDID INT
       ,AGPropertyID INT
       ,PropertyName VARCHAR(100)
       ,PropertyAddress VARCHAR(80)
       ,PropertyCity VARCHAR(40)
       ,PropertyState VARCHAR(20)
       ,ZipCode VARCHAR(20)
       ,CallDate VARCHAR(10)
       ,CallTime VARCHAR(255)
       ,CallStartDateTime DATETIME		--is silent, only used for sorting
       ,CallerPhoneNumber VARCHAR(15)
       ,CallerName VARCHAR(255)
       ,CallerLocation VARCHAR(255)
       ,CallStatus VARCHAR(20)
       ,IsAbandoned INT
       ,DurationinSeconds INT
       ,CallWaitTime INT
       ,AudioURL VARCHAR(500)
       ,ExternalID VARCHAR(50));
	/* ======================================================================================== */
    BEGIN TRY
        DROP TABLE #tmpmasterlist;
    END TRY
    BEGIN CATCH
    END CATCH;


    SELECT  dlr.ListingID
           ,dlr.PropertyIDAG AS PropertyIDAG		--AGPropertyID on the AG website line
           ,dlr.PropertyIDRent AS PropertyIDAGRent		--AGPropertyID on the Rent website line
           ,dlr.PropertyName AS PropertyName
           ,dlr.PropertyAddress AS PropertyAddress		--base it on whether name was there to see where to get from.  Keeps consistency.
           ,dlr.PropertyCity AS PropertyCity
           ,dlr.PropertyState AS PropertyState
           ,dlr.PropertyZipCode AS ZipCode
           ,dlr.MgtCoIDAG AS MgtCoIDAG
           ,dlr.MgtCoIDRent AS MgtCoIDRent
           ,ISNULL(dlr.StatusIDAG,0) AS StatusIDAG
           ,ISNULL(dlr.StatusIDRent,0) AS StatusIDRent
           ,dlr.ExternalID AS ExternalID
    INTO    #tmpmasterlist
    FROM    RentPath.Dimension.Listings AS dlr
    ORDER BY dlr.ListingID;

	--SELECT * FROM #tmpmasterlist
	/* ======================================================================================== */

    BEGIN TRY
        DROP TABLE #tmppropertylist;
    END TRY
    BEGIN CATCH
    END CATCH;

    CREATE TABLE #tmppropertylist (
        UserGUID UNIQUEIDENTIFIER
       ,AGPropertyID INT
       ,RentPropertyID INT
       ,PropertyName VARCHAR(2000)
       ,PropertyCity VARCHAR(2000)
       ,PropertyState VARCHAR(100)
       ,PropertyZip INT
       ,AGStatus INT
       ,RentStatus INT
       ,TotalUserCanSee INT
       ,ProjectID VARCHAR(128)
       ,MarketID VARCHAR(128)
       ,AxioActive INT);
	
	--if only giving PropertyID
    IF @subscriptionid IS NULL
        AND @advancedreporttype IS NULL
        BEGIN
            INSERT  INTO #tmppropertylist
            VALUES  (NULL,@AGPropertyID,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
        END;

	--Running through AdvancedReport process - gives subscriptionID
    IF (@subscriptionid IS NOT NULL)
        AND (@subscriptionid > 0)			--subscriptionid not null takes precedence over advancedreporttype, since we can get that from the subscription record
        BEGIN
            SET @userguid = (
                             SELECT Creator
                             FROM   dbo.DashboardSubscriptions WITH (NOLOCK)
                             WHERE  SubscriptionID = @subscriptionid
                            );			--'CBF5E01E-ED26-4280-882F-5F742D2514DD'


			--get list of allowed PropertyID values for the user on this subscription
            INSERT  INTO #tmppropertylist
                    EXEC Reports.rpt_PropertyDisplay
                        @userguid
                       ,300000
                       ,NULL;
        END;


	--if has specific property id, delete all the ones but that property from the table
    IF @AGPropertyID IS NOT NULL
        AND @AGPropertyID > 0
        BEGIN
            DELETE  FROM #tmppropertylist
            WHERE   AGPropertyID <> @AGPropertyID;
        END;


	--SELECT * FROM #tmppropertylist
	/* ======================================================================================== */
	/* ======================================================================================== */
	/* ======================================================================================== */

    DECLARE myCursorVariable CURSOR
    FOR
    SELECT  tml.ListingID
           ,a.AGPropertyID
    FROM    #tmppropertylist a WITH (NOLOCK)
    LEFT OUTER JOIN #tmpmasterlist tml WITH (NOLOCK)
            ON tml.PropertyIDAG = a.AGPropertyID;

    OPEN myCursorVariable;  

	-- Loop through all the files for the database  
    FETCH NEXT FROM myCursorVariable INTO @ListingID,@AGPropertyIDAlt;

    WHILE @@FETCH_STATUS = 0
        BEGIN  
            INSERT  INTO #tmpfinalresultset
                    SELECT  @EndYMDID AS YMDID
                           ,@AGPropertyIDAlt AS AGPropertyID
                           ,tml.PropertyName
                           ,tml.PropertyAddress
                           ,tml.PropertyCity
                           ,tml.PropertyState
                           ,tml.ZipCode
                           ,CONVERT(VARCHAR(10),cag.CallStartDateTime,101) AS CallDate
                           ,SUBSTRING(CONVERT(VARCHAR(30),cag.CallStartDateTime,100),13,7) AS CallTime
                           ,cag.CallStartDateTime			--silent, used only for sorting
                           ,ISNULL(cag.CallerPhoneNumber,'') AS CallerPhoneNumber
				 --  ,CASE WHEN ph.firstName IS NULL
					--		  AND ph.LastName IS NULL THEN cag.CallerName
					--	 ELSE ISNULL(ph.firstname,'') + ' ' + ISNULL(ph.lastname,'')
					--END AS CallerName
                           ,cag.CallerName
                           ,ISNULL(cag.CallerLocation,'') AS CallerLocation
				   --,ISNULL(cag.CallType,'') AS CallType
                           ,CASE cag.CallStatus
                              WHEN 1 THEN 'Connected'
                              WHEN 2 THEN 'Busy'
                              WHEN 3 THEN 'Missed'
                              ELSE 'Other'
                            END AS CallStatus
                           ,cag.IsAbandoned
                           ,ISNULL(cag.DurationInSeconds,0) AS DurationInSeconds
                           ,ISNULL(CAST(CASE WHEN CASE WHEN cag.CallStatus IN (1,2,3)			--Ticket 24212  added missed calls to connected
                                                            AND cag.TotalCallerTrimTalkTime IS NOT NULL
                                                            AND cag.AudioURL IS NOT NULL THEN 1
                                                       ELSE 0
                                                  END = 0 THEN 0
                                             ELSE CAST(cag.TimePriorToCallerSpeaking AS MONEY) / CASE WHEN cag.CallStatus IN (1,2,3)			--Ticket 24212  added missed calls to connected
                                                                                                           AND cag.TotalCallerTrimTalkTime IS NOT NULL
                                                                                                           AND cag.AudioURL IS NOT NULL THEN 1
                                                                                                      ELSE 0
                                                                                                 END
                                        END AS INT),0) AS CallWaitTime
				   --,ISNULL(cag.AudioURL,'Not available') AS AudioURL
                           ,(CASE WHEN (cag.CallId IS NOT NULL) THEN 'https://dashboard.apartmentguide.com/audio/mp3player/' + LTRIM(RTRIM(CONVERT(VARCHAR(300),cag.CallId)))
                                  ELSE NULL
                             END) AS AudioURL
                           ,cr.ExternalID
                    FROM    RentPath.Mart.PhoneLeads AS cag WITH (NOLOCK)
                    LEFT OUTER JOIN (
                                     SELECT ListingID
                                           ,ExternalID--, MAX(ISNULL(UpsellPropCallRecording,0)) AS UpsellPropCallRecording 
                                     FROM   RentPath.Dimension.Listings WITH (NOLOCK)
							--GROUP BY ListingID, ExternalID
                                    ) AS cr
                            ON cr.ListingID = cag.ListingID
                    LEFT OUTER JOIN #tmpmasterlist tml WITH (NOLOCK)
                            ON tml.ListingID = cag.ListingID
                    WHERE   cag.YMDID BETWEEN @StartYMDID AND @EndYMDID
                            AND cag.CallType <> 'CRAIGSLIST'
                            AND cag.ListingID = @ListingID
                    ORDER BY cag.CallStartDateTime DESC;

			

            FETCH NEXT FROM myCursorVariable INTO @ListingID,@AGPropertyIDAlt;
        END; 

    CLOSE myCursorVariable;  
    DEALLOCATE myCursorVariable; 




	--Find the record count for the final resultset
    SELECT  @recct = COUNT(*)
    FROM    #tmpfinalresultset;

	--Set the number of records to return (all for subscription, only most recent 10 if SEND_TEST situation (SubscriptionID is NULL or 0)
    IF (@subscriptionid IS NULL)
        OR (@subscriptionid = 0)		--this denotes a SEND_TEST situation, where Frequency is not known (since not an input parameter) and SubscriptionID is blank, so can't get from that record,either.
        BEGIN
            SET @recnumtoreturn = 10;
        END;
    ELSE
        BEGIN
            SET @recnumtoreturn = @recct;
        END;

	--Now return the records (whether 10 or all) and sort ascending
    SELECT  YMDID
           ,AGPropertyID
           ,PropertyName
           ,PropertyAddress
           ,PropertyCity
           ,PropertyState
           ,ZipCode
           ,CallDate
           ,CallTime
           ,CallStartDateTime
           ,CallerPhoneNumber
           ,CallerName
           ,CallerLocation
           ,CallStatus
           ,IsAbandoned
           ,DurationinSeconds
           ,CallWaitTime
           ,AudioURL
           ,ExternalID
    FROM    (
             SELECT TOP (@recnumtoreturn)				--either all or first 10
                    YMDID
                   ,AGPropertyID
                   ,PropertyName
                   ,PropertyAddress
                   ,PropertyCity
                   ,PropertyState
                   ,ZipCode
                   ,CallDate
                   ,CallTime
                   ,CallStartDateTime
                   ,CallerPhoneNumber
                   ,CallerName
                   ,CallerLocation
                   ,CallStatus
                   ,IsAbandoned
                   ,DurationinSeconds
                   ,CallWaitTime
                   ,AudioURL
                   ,ExternalID
             FROM   #tmpfinalresultset
             ORDER BY YMDID
                   ,AGPropertyID
                   ,CallStartDateTime DESC		--just for the TOP N, so if SEND_TEST, will get most recent 10.  If all, then doesn't matter
            ) AS a
    ORDER BY YMDID
           ,AGPropertyID
           ,CallStartDateTime;			--show ascending

END;

SET NOCOUNT OFF;


















GO
/****** Object:  StoredProcedure [Reports].[rpt_PropertyPhoneLeadsDetail_Rollback]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Reports].[rpt_PropertyPhoneLeadsDetail_Rollback] 
(@AGPropertyID INT,
@DateRange INT = NULL
)
/*************************************************************************************************
*
* Name:	Reports.rpt_PropertyPhoneLeadsDetail
*
* Desc:	This returns the detail for phone leads for the two months prior to currently reported month plus currently reported month to date
*
* Test:	
*		EXEC Reports.rpt_PropertyPhoneLeadsDetail 100518
*		EXEC Reports.rpt_PropertyPhoneLeadsDetail 100052871
*		EXEC Reports.rpt_PropertyPhoneLeadsDetail 6225
*		EXEC Reports.rpt_PropertyPhoneLeadsDetail 14230
*
*	SELECT * FROM dbo.DashboardSubscriptions
*
* Hist:	01	01/23/2015		Don Wert			Initial Version. TIcket # 17937.
* Hist: 02	02/11/2015		Don Wert			Ticket 18155, add ISNULL to prevent return of NULL values
* Hist: 03	03/09/2015		Bob Langley			Ticket 18155, change the AudioURL column value to use the nwe audio player
* Hist: 04	05/14/2015		Bob Langley			Changed to add additional check on building AudioURL by checking UpsellPropCallRecording > 0
* Hist:	05	06/05/2015		Kimberley Morrow	Ticket 19664, adding ExternalId to pass for csv.
* Hist: 06	06/23/2015		Shetal Gandhi		Ticket 19723 - Modified to include a date parameter
* Hist: 07	07/31/2015		Bob Langley			Ticket 19882 - changed to pull listingid for statusid=1 (wasn't doing that before)
**************************************************************************************************/
AS 
SET NOCOUNT ON

/*test
DECLARE @AGPropertyID INT
SET @AGPropertyID = 6225
*/

BEGIN

 	/* ======================================================================================== */
	--Set the proper dates



	
	--start and end dates
	DECLARE @StartYMDID int
	DECLARE @EndYMDID int
    
	IF @DateRange IS NULL 
	SET @DateRange = 1

	--SET @StartYMDID  =  CAST(CONVERT(VARCHAR,DATEADD(MONTH,DATEDIFF(MONTH,0,GETDATE()) - 2,0),112) AS INT)
SELECT @StartYMDID = MonthStartYMDID
FROM    DBAUtility.Dimension.Dates
WHERE   YMDID = CASE WHEN @DateRange = 1 THEN CONVERT(int, Convert(varchar(10),CAST(DATEADD(m,-2,DATEADD(dd,-1,GETDATE())) AS DATE),112))
					 WHEN @DateRange = 2 THEN CONVERT(int, Convert(varchar(10),CAST(DATEADD(m,-12,DATEADD(dd,-1,GETDATE())) AS DATE),112))
					 WHEN @DateRange = 3 THEN CONVERT(int, Convert(varchar(10),CAST(DATEADD(yy, DATEDIFF(yy,0,getdate()), 0) AS DATE),112))
					 END
  

	SET @EndYMDID =  CAST(CONVERT(VARCHAR,GETDATE() - 1,112) AS INT)


	--SELECT @StartYMDID AS StartYMDID
	--SELECT @EndYMDID AS EndYMDID


	--PRINT '@startYMDID = ' + CONVERT(varchar(30),@startYMDID)
	--PRINT '@endYMDID = ' + CONVERT(varchar(30),@endYMDID)


	/* ======================================================================================== */


    DECLARE @ListingID INT

    SELECT  @ListingID = CASE WHEN ISNULL(@AGPropertyID,0) = 0 THEN 0
                              ELSE (
                                    SELECT  MAX(ListingID) AS ListingID
                                    FROM    ApartmentGuide.Dimension.AGRentCombinedDimensionListings
                                    WHERE   AGPropertyID = @AGPropertyID
									AND StatusID = 1
                                   )
                         END

    SELECT  @AGPropertyID AS AGPropertyID
           ,CONVERT(VARCHAR(10),cag.CallStartDateTime,101) AS CallDate
           ,SUBSTRING(CONVERT(VARCHAR(30),cag.CallStartDateTime,100),13,7) AS CallTime
           ,ISNULL(cag.CallerPhoneNumber,'') AS CallerPhoneNumber
           ,CASE WHEN ph.firstName IS NULL
                      AND ph.LastName IS NULL THEN cag.CallerName
                 ELSE ISNULL(ph.firstname,'') + ' ' + ISNULL(ph.lastname,'')
            END AS CallerName
           ,ISNULL(cag.CallerLocation,'') AS CallerLocation
           --,ISNULL(cag.CallType,'') AS CallType
           ,CASE cag.CallStatus WHEN 1 THEN 'Connected'
								WHEN 2 THEN 'Busy'
								WHEN 3 THEN 'Missed'
								ELSE 'Other'
			END AS CallStatus
           ,cag.IsAbandoned
           ,ISNULL(cag.DurationInSeconds,0) AS DurationInSeconds
           ,ISNULL(CAST(CASE WHEN CASE WHEN cag.CallStatus = 1
                                AND cag.TotalCallerTrimTalkTime IS NOT NULL
                                AND cag.AudioURL IS NOT NULL THEN 1
                           ELSE 0
                      END = 0 THEN 0
                 ELSE CAST(cag.TimePriorToCallerSpeaking AS MONEY) / CASE WHEN cag.CallStatus = 1
                                                                               AND cag.TotalCallerTrimTalkTime IS NOT NULL
                                                                               AND cag.AudioURL IS NOT NULL THEN 1
                                                                          ELSE 0
                                                                     END
            END AS INT),0) AS CallWaitTime
           --,ISNULL(cag.AudioURL,'Not available') AS AudioURL
		   ,(CASE WHEN (cag.CallID IS NOT NULL) AND ISNULL(cr.UpsellPropCallRecording,0) > 0 THEN 'https://audio.rentpath.com/audioplayer/mp3player.aspx?id=' + LTRIM(RTRIM(CONVERT(VARCHAR(300),cag.CallID))) ELSE NULL END) AS AudioURL
		   , cr.ExternalID
    FROM    ApartmentGuide.Fact.AGRentPhoneLeads AS cag WITH (NOLOCK)
    LEFT JOIN ApartmentGuide.Dimension.PhoneLookup AS ph WITH (NOLOCK)
            ON cag.CallerPhoneNumber = ph.PhoneNumber
	LEFT OUTER JOIN (
					SELECT ListingID, ExternalID, MAX(ISNULL(UpsellPropCallRecording,0)) AS UpsellPropCallRecording 
					FROM ApartmentGuide.Dimension.AGRentCombinedDimensionListings WITH (NOLOCK)
					GROUP BY ListingID, ExternalID
				) AS cr
				ON cr.ListingID = cag.ListingID
    WHERE   cag.YMDID BETWEEN @StartYMDID AND @EndYMDID
            AND cag.CallType <> 'CRAIGSLIST'
            AND cag.ListingID = @ListingID
    ORDER BY cag.CallStartDateTime DESC

END

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [Reports].[rpt_PropertyPhoneLeadsDetail_TEST]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Reports].[rpt_PropertyPhoneLeadsDetail_TEST] 
(@AGPropertyID INT,
@DateRange INT = NULL
)
/*************************************************************************************************
*
* Name:	Reports.rpt_PropertyPhoneLeadsDetail
*
* Desc:	This returns the detail for phone leads for the two months prior to currently reported month plus currently reported month to date
*
* Test:	
*		EXEC Reports.rpt_PropertyPhoneLeadsDetail 100518
*		EXEC Reports.rpt_PropertyPhoneLeadsDetail 100052871
*		EXEC Reports.rpt_PropertyPhoneLeadsDetail 6225
*		EXEC Reports.rpt_PropertyPhoneLeadsDetail 14230
*
*	SELECT * FROM dbo.DashboardSubscriptions
*
* Hist:	01	01/23/2015		Don Wert			Initial Version. TIcket # 17937.
* Hist: 02	02/11/2015		Don Wert			Ticket 18155, add ISNULL to prevent return of NULL values
* Hist: 03	03/09/2015		Bob Langley			Ticket 18155, change the AudioURL column value to use the nwe audio player
* Hist: 04	05/14/2015		Bob Langley			Changed to add additional check on building AudioURL by checking UpsellPropCallRecording > 0
* Hist:	05	06/05/2015		Kimberley Morrow	Ticket 19664, adding ExternalId to pass for csv.
* Hist: 06	06/23/2015		Shetal Gandhi		Ticket 19723 - Modified to include a date parameter
* Hist: 07	07/31/2015		Bob Langley			Ticket 19882 - changed to pull listingid for statusid=1 (wasn't doing that before)
**************************************************************************************************/
AS 
SET NOCOUNT ON

/*test
DECLARE @AGPropertyID INT
SET @AGPropertyID = 6225
*/

BEGIN

 	/* ======================================================================================== */
	--Set the proper dates



	
	--start and end dates
	DECLARE @StartYMDID int
	DECLARE @EndYMDID int
    
	IF @DateRange IS NULL 
	SET @DateRange = 1

	--SET @StartYMDID  =  CAST(CONVERT(VARCHAR,DATEADD(MONTH,DATEDIFF(MONTH,0,GETDATE()) - 2,0),112) AS INT)
SELECT @StartYMDID = MonthStartYMDID
FROM    DBAUtility.Dimension.Dates
WHERE   YMDID = CASE WHEN @DateRange = 1 THEN CONVERT(int, Convert(varchar(10),CAST(DATEADD(m,-2,DATEADD(dd,-1,GETDATE())) AS DATE),112))
					 WHEN @DateRange = 2 THEN CONVERT(int, Convert(varchar(10),CAST(DATEADD(m,-12,DATEADD(dd,-1,GETDATE())) AS DATE),112))
					 WHEN @DateRange = 3 THEN CONVERT(int, Convert(varchar(10),CAST(DATEADD(yy, DATEDIFF(yy,0,getdate()), 0) AS DATE),112))
					 END
  

	SET @EndYMDID =  CAST(CONVERT(VARCHAR,GETDATE() - 1,112) AS INT)


	--SELECT @StartYMDID AS StartYMDID
	--SELECT @EndYMDID AS EndYMDID


	--PRINT '@startYMDID = ' + CONVERT(varchar(30),@startYMDID)
	--PRINT '@endYMDID = ' + CONVERT(varchar(30),@endYMDID)


	/* ======================================================================================== */


    DECLARE @ListingID INT

    SELECT  @ListingID = CASE WHEN ISNULL(@AGPropertyID,0) = 0 THEN 0
                              ELSE (
                                    SELECT  MAX(ListingID) AS ListingID
                                    FROM    ApartmentGuide.Dimension.AGRentCombinedDimensionListings
                                    WHERE   AGPropertyID = @AGPropertyID
									AND StatusID = 1
                                   )
                         END

    SELECT  @AGPropertyID AS AGPropertyID
           ,CONVERT(VARCHAR(10),cag.CallStartDateTime,101) AS CallDate
           ,SUBSTRING(CONVERT(VARCHAR(30),cag.CallStartDateTime,100),13,7) AS CallTime
           ,ISNULL(cag.CallerPhoneNumber,'') AS CallerPhoneNumber
           ,CASE WHEN ph.firstName IS NULL
                      AND ph.LastName IS NULL THEN cag.CallerName
                 ELSE ISNULL(ph.firstname,'') + ' ' + ISNULL(ph.lastname,'')
            END AS CallerName
           ,ISNULL(cag.CallerLocation,'') AS CallerLocation
           --,ISNULL(cag.CallType,'') AS CallType
           ,CASE cag.CallStatus WHEN 1 THEN 'Connected'
								WHEN 2 THEN 'Busy'
								WHEN 3 THEN 'Missed'
								ELSE 'Other'
			END AS CallStatus
           ,cag.IsAbandoned
           ,ISNULL(cag.DurationInSeconds,0) AS DurationInSeconds
           ,ISNULL(CAST(CASE WHEN CASE WHEN cag.CallStatus = 1
                                AND cag.TotalCallerTrimTalkTime IS NOT NULL
                                AND cag.AudioURL IS NOT NULL THEN 1
                           ELSE 0
                      END = 0 THEN 0
                 ELSE CAST(cag.TimePriorToCallerSpeaking AS MONEY) / CASE WHEN cag.CallStatus = 1
                                                                               AND cag.TotalCallerTrimTalkTime IS NOT NULL
                                                                               AND cag.AudioURL IS NOT NULL THEN 1
                                                                          ELSE 0
                                                                     END
            END AS INT),0) AS CallWaitTime
           --,ISNULL(cag.AudioURL,'Not available') AS AudioURL
		   ,(CASE WHEN (cag.CallID IS NOT NULL) AND ISNULL(cr.UpsellPropCallRecording,0) > 0 THEN 'https://audio.rentpath.com/audioplayer/mp3player.aspx?id=' + LTRIM(RTRIM(CONVERT(VARCHAR(300),cag.CallID))) ELSE NULL END) AS AudioURL
		   , cr.ExternalID
    FROM    ApartmentGuide.Fact.AGRentPhoneLeads AS cag WITH (NOLOCK)
    LEFT JOIN ApartmentGuide.Dimension.PhoneLookup AS ph WITH (NOLOCK)
            ON cag.CallerPhoneNumber = ph.PhoneNumber
	LEFT OUTER JOIN (
					SELECT ListingID, ExternalID, MAX(ISNULL(UpsellPropCallRecording,0)) AS UpsellPropCallRecording 
					FROM ApartmentGuide.Dimension.AGRentCombinedDimensionListings WITH (NOLOCK)
					GROUP BY ListingID, ExternalID
				) AS cr
				ON cr.ListingID = cag.ListingID
    WHERE   cag.YMDID BETWEEN @StartYMDID AND @EndYMDID
            AND cag.CallType <> 'CRAIGSLIST'
            AND cag.ListingID = @ListingID
    ORDER BY cag.CallStartDateTime DESC

END

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [Reports].[rpt_PropertySRPPositionsByMgmtCo]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Reports].[rpt_PropertySRPPositionsByMgmtCo] (@MgtCoID INT)

/*******************************************************************************************
* Name:	Reports.rpt_PropertySRPPositionsBygmtCo
* ------------------------------------------------------------------------------------------
* Desc:	
* ------------------------------------------------------------------------------------------
* Test:	EXEC Reports.rpt_PropertySRPPositionsBygmtCo 6461
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist:	01	06/14/2016		Colleen Rocks		Ticket 23251; initial version
********************************************************************************************/
AS
BEGIN
    SET NOCOUNT ON;

------------------------------
/*Declare and set variables*/
------------------------------
/*--Test:
DECLARE @MgtCoID INT = 6461*/

    DECLARE @YMDID INT = (
                          SELECT    MAX(YMDID)
                          FROM      RentPath.Fact.CityStateListings
                         );

------------------------------
/*Get SRP page and position results*/
------------------------------
    SELECT  CONCAT(l.MgtCoNameAG,' - ',l.MgtCoIDAG) AS MgtCompany
           ,l.ListingID
           ,l.PropertyName
           ,l.PropertyTotalUnits
           ,l.PropertyCity
           ,l.PropertyState
           ,l.MarketName
           ,CASE WHEN l.StatusIDAG = 1
                      AND l.StatusIDRent = 1 THEN 'Joint'
                 WHEN l.StatusIDAG = 1
                      AND l.StatusIDRent = 0 THEN 'AG Only'
                 WHEN l.StatusIDAG = 0
                      AND l.StatusIDRent = 1 THEN 'Rent Only'
            END AS AdvertisingPlatform
           ,CASE WHEN l.PlacementTierAG = 5 THEN 'Diamond'
                 WHEN l.PlacementTierAG = 10 THEN 'Platinum'
                 WHEN l.PlacementTierAG = 20 THEN 'Gold'
                 WHEN l.PlacementTierAG = 30 THEN 'Silver'
                 ELSE 'N/A'
            END AS AGTier
           ,CASE WHEN l.PlacementTierRent = 5 THEN 'Diamond'
                 WHEN l.PlacementTierRent = 10 THEN 'Platinum'
                 WHEN l.PlacementTierRent = 20 THEN 'Gold'
                 WHEN l.PlacementTierRent = 30 THEN 'Silver'
                 ELSE 'N/A'
            END AS RentTier
           ,c.City
           ,c.State
           ,c.AGPage
           ,c.AGPosition
           ,c.AGMobilePage
           ,c.AGMobilePosition
           ,c.RentPage
           ,c.RentPosition
    FROM    RentPath.Dimension.Listings AS l
    LEFT OUTER JOIN (
                     SELECT City
                           ,[State]
                           ,ListingID
                           ,MAX([AG]) AS AGPage
                           ,MAX([AG2]) AS AGPosition
                           ,MAX([AG Mobile]) AS AGMobilePage
                           ,MAX([AG Mobile2]) AS AGMobilePosition
                           ,MAX([RENT]) AS RentPage
                           ,MAX([RENT2]) AS RentPosition
                     FROM   (
                             SELECT csl.City
                                   ,UPPER(cm.STATEABBR) AS [State]
                                   ,csl.ListingID
                                   ,csl.Sources
                                   ,CONCAT(csl.Sources,'2') AS Sources2
                                   ,csl.Page
                                   ,csl.Position
                             FROM   RentPath.Fact.CityStateListings AS csl
                             LEFT OUTER JOIN DBAUtility.dbo.CityMapping AS cm
                                    ON UPPER(REPLACE(csl.City,'-',' ')) = UPPER(cm.ACTUAL_CITY_NAME)
                                       AND UPPER(REPLACE(csl.[State],'-',' ')) = UPPER(cm.STATENAME)
                             WHERE  csl.YMDID = @YMDID
                            ) AS SourceTable PIVOT ( MAX(Page) FOR Sources IN ([AG],[AG Mobile],[RENT]) ) AS PivotTable1 PIVOT
						( MAX(Position) FOR Sources2 IN ([AG2],[AG Mobile2],[RENT2]) ) AS PivotTable2
                     GROUP BY City
                           ,[State]
                           ,ListingID
                    ) AS c
            ON CONVERT(VARCHAR(30),l.ListingID) = c.ListingID
    WHERE   l.MgtCoIDAG = @MgtCoID
            AND (l.StatusIDAG = 1
                 OR l.StatusIDRent = 1)
    ORDER BY l.PropertyName
           ,c.City;

    SET NOCOUNT OFF;
END 











GO
/****** Object:  StoredProcedure [Reports].[Rpt_PropUpsellListWithSort_CBSA_delete]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Reports].[Rpt_PropUpsellListWithSort_CBSA_delete] (
	@StartYMDDate DATETIME = NULL
   ,@EndYMDDate DATETIME = NULL
   ,@CBSACodes VARCHAR(8000) = NULL
   ,@Optiontypeid INT = NULL
   ,@Sorting INT = NULL)
/*************************************************************************************************************
* Name: reports.Rpt_PropUpsellListWithSort_CBSA
* Desc: Proc marts monthly upsell activity for select upsells.
* -------------------------------------------------------------------------------------------------------------
* Notes: This is to be used by the second section of the 46_Product_Analysis report.  It will feed in all properties 
*		 with the requested product, regardless of how many days they have had the upsell.  
*        
* select * from dimension.markets       
* -------------------------------------------------------------------------------------------------------------
* Test: 
EXEC reports.Rpt_PropUpsellListWithSort_CBSArc '01/01/2014' ,'04/30/2014',null,2,5
* -------------------------------------------------------------------------------------------------------------
* Hist:	   01	 09/25/2013	  Don Wert				Ticket 13381 - initial version
* Hist:    02    01/17/2013   Richard Chen          #14075  Mobile Diamond
* Hist:    03    04/02/2014   Chadwick Smith        tik#14968 MobileDiamond is MobileDiamond only without DiamondMax
* Hist:    04    04/03/2014   Chadwick Smith        tik#15080 Changed code so you can pass in NULL for @CBSACodes parameter, to show all CBSA's
                                                              Now this same stored proc is used by an internal report as well
* Hist:	   05	 04/17/2014	  Sarah Mims			Ticket # 14358 Added MgmtPeelAd, HD Pano Tour, HD Video,
*													HD Photo and 3D Floor Plan. Removed Community Video, Emercial, 
*													Video Spokesmodel and Virtual Tour
* Hist:	   06	 05/14/2014	  Shetal Gandhi			Ticket 15577 - Fixed the truncation error occuring on the Mgtconame field in temp tables from varchar(50) to (100)
* Hist:    01    07/08/2015   Richard Chen          Ticket 18986, Dynamic selection
*************************************************************************************************************/
AS 
SET NOCOUNT ON
BEGIN

	
	--declare    @StartYMDDate DATETIME
	--   ,@EndYMDDate DATETIME
	--   ,@CBSACodes VARCHAR(8000) -- dbautility.dbo.zipcbsa
	--   ,@Optiontypeid INT
	--   ,@Sorting INT

	--SELECT	@StartYMDDate = '01/01/2015'
	--		,@EndYMDDate = '06/30/2015'
	--		,@CBSACodes = '37860,18880'
	--		,@Optiontypeid = 30
	--		,@Sorting = 5
	

	DECLARE	@YesterdayYMDID INT
	   ,@StartYMDID INT
	   ,@ENDYMDID INT
	   ,@diff INT
	   ,@upsellColumn VARCHAR(50)
	   ,@sql0 VARCHAR(MAX)
       ,@sql VARCHAR(MAX)
        

	SET @StartYmdid = CAST(CONVERT(VARCHAR(8),@startymddate,112) AS INT)
	SET @EndYMDID = CAST(CONVERT(VARCHAR(8),@endymddate,112) AS INT)
	SET @diff = DATEDIFF("d",@startymddate,@EndYMDDate) + 1

	IF (SELECT OBJECT_ID(N'tempdb.dbo.#properties')) IS NOT NULL
		DROP TABLE #properties

	IF (SELECT OBJECT_ID(N'tempdb.dbo.#PropertiesToReport')) IS NOT NULL
		DROP TABLE #PropertiesToReport  

    IF ( SELECT OBJECT_ID(N'tempdb.dbo.#PropListOptionTypes')) IS NOT NULL 
            DROP TABLE #PropListOptionTypes  

    CREATE  TABLE #PropListOptionTypes
            (
              Propertyid INT ,
              ListingID INT ,
              OptionTypeID INT ,
              StartYMDID INT ,
              EndYMDID INT
            )


	CREATE  TABLE #properties (
		[mgtconame] [varchar](100) NULL
	   ,[PropertyCity] [varchar](75) NULL
	   ,[PropertyZipCode] [varchar](10) NULL
	   ,[CBSAName] [NVARCHAR] (200) NULL 
	   ,[propertyname] [varchar](100) NULL
	   ,[propertyidAG] [int] NULL
	   ,[DaysWithUpsells] [int] NULL
	   ,[DaysWithOUTUpsells] [int] NULL
	   ,LeadsWithUpsells INT NULL
	   ,LeadsWithoutUpsells INT NULL) 



	SET @sql0 = 'SELECT Propertyid, ListingID,OptionTypeID,StartYMDID, EndYMDID
FROM OPENQUERY(oracleAptg,
''select plo.propertyid, plo.listingid,plo.OptionTypeID
,to_number(to_char(plo.startdate,''''yyyymmdd'''')) StartYMDID
,to_number(to_char(plo.enddate,''''yyyymmdd'''')) EndYMDID  
from properties.PROPLISTOPTIONS plo
  join properties.properties p on plo.propertyid=p.propertyid
where plo.optiontypeid='+CAST(@Optiontypeid AS VARCHAR(10))+'
and (
    to_number(to_char(plo.startdate,''''yyyymmdd'''')) between ' + CAST(@startymdid AS VARCHAR(8)) + ' AND ' + CAST(@endYmdid AS VARCHAR(8)) + '
or to_number(to_char(plo.enddate,''''yyyymmdd'''')) between ' + CAST(@startymdid AS VARCHAR(8)) + ' AND ' + CAST(@endYmdid AS VARCHAR(8)) + '
or (' + CAST(@startymdid AS VARCHAR(8)) + ' between to_number(to_char(plo.startdate,''''yyyymmdd'''')) and to_number(to_char(plo.enddate,''''yyyymmdd'''') )
     and ' + CAST(@endYmdid AS VARCHAR(8)) + ' between to_number(to_char(plo.startdate,''''yyyymmdd'''')) and to_number(to_char(plo.enddate,''''yyyymmdd'''') )
   )
)'')'

	PRINT @sql0
        INSERT  INTO #PropListOptionTypes
                ( Propertyid ,
                  ListingID ,
                  OptionTypeID ,
                  StartYMDID ,
                  EndYMDID
                )
                EXEC ( @sql0
                    )
	INSERT	#properties
			([propertyidAG]
			,[DaysWithUpsells]
			,[DaysWithOUTUpsells] 
			,LeadsWithUpsells 
			,LeadsWithoutUpsells)
                SELECT  propertyidAG ,
                        DaysWithUpsells = COUNT(DISTINCT CASE WHEN propertystatus = 1
                                                              AND upsellStatus = 1
                                                              THEN ymdid
                                                              ELSE NULL
                                                         END) ,
                        DaysWithOUTUpsells = COUNT(DISTINCT CASE
                                                              WHEN propertystatus = 1
                                                              AND upsellStatus = 0
                                                              THEN ymdid
                                                              ELSE NULL
                                                            END) ,
                        LeadssWithUpsells = SUM(CASE WHEN propertystatus = 1
                                                          AND upsellStatus = 1
                                                     THEN allleads
                                                     ELSE 0
                                                END) ,
                        LeadsWithOUTUpsells = SUM(CASE WHEN propertystatus = 1
                                                            AND upsellStatus = 0
                                                       THEN allleads
                                                       ELSE 0
                                                  END)
                FROM    ( SELECT    ml.ymdid
                                    ,dl.propertyidAG ,
                                    PropertyStatus = MAX(ml.statusidAG) ,
                                    upsellStatus = CASE WHEN ml.ymdid >= plo.startymdid
                                                             AND ml.ymdid <= plo.EndYMDID
                                                        THEN 1
                                                        ELSE 0
                                                   END ,
                                    AllLeads = SUM(AllLeads)
                          FROM      dimension.listings dl
                                    JOIN dbautility.dbo.zipcbsa AS zc ON dl.Propertyzipcode = zc.zipcode
                                    JOIN mart.listings ml ON dl.listingid = ml.listingid
                                                             AND ml.ymdid BETWEEN @StartYMDID AND @ENDYMDID
                                    JOIN #PropListOptionTypes plo ON dl.listingid = plo.ListingID
                          GROUP BY  ml.ymdid
                                    ,dl.propertyidAG
                                    ,plo.startymdid
                                    ,plo.endymdid                          
                        ) v
                GROUP BY propertyidAG
                HAVING  COUNT(DISTINCT CASE WHEN propertystatus = 1
                                                 AND upsellStatus = 1
                                            THEN ymdid
                                            ELSE NULL
                                       END) > 0
                        --AND COUNT(DISTINCT CASE WHEN propertystatus = 1
                        --                             AND upsellStatus = 0
                        --                        THEN ymdid
                        --                        ELSE NULL
                        --                   END) > 0
   
	UPDATE	p
	SET		mgtconame = l.mgtconame
		   ,PropertyCity = l.PropertyCity
		   ,PropertyZipCode = l.PropertyZipCode
		   ,CBSAName = l.CBSAName
		   ,Propertyname = l.Propertyname
	FROM	#properties p
	JOIN 	(
			 SELECT	mgtconame = MAX(MgtCoNameAG)
                   ,PropertyCity = MAX(PropertyCity)
                   ,PropertyZipCode = MAX(dl.PropertyZipCode)
                   ,CBSAName = MAX(zc.CBSAName)
                   ,Propertyname = MAX(propertyname)
                   ,propertyidAG
			 FROM	dimension.listings dl
			 JOIN	DBAUtility.dbo.ZipCBSA zc
					ON dl.PropertyZipCode = zc.ZIPCode
			 GROUP BY PropertyIDAG
			) l
			ON p.propertyidAG = l.propertyidAG


	CREATE TABLE #PropertiesToReport (
		[mgtconame] [varchar](100) NULL
	   ,[propertyidAG] [int] NULL
	   ,[propertyname] [varchar](100) NULL
	   ,[PropertyCity] [varchar](75) NULL
	   ,[PropertyZipCode] [varchar](10) NULL
	   ,[CBSAName] [NVARCHAR] (200) NULL 
	   ,[DaysWithUpsell] [int] NULL
	   ,[LeadsWithUpsells] [int] NULL
	   ,[DaysWithOUTUpsells] [int] NULL
	   ,[LeadsWithoutUpsells] [int] NULL
	   )



	SET @sql = 'INSERT INTO #PropertiesToReport
					(mgtconame
					,propertyidAG
					,propertyname
					,PropertyCity
					,PropertyZipCode
					,CBSAName
					,DaysWithUpsell
					,LeadsWithUpsells
					,DaysWithOUTUpsells
					,LeadsWithoutUpsells
					)
				SELECT mgtconame=MAX(mgtconame)
					,propertyidAG
					,propertyName=MAX(propertyName)
					,PropertyCity=case when max(PropertyCity)= '''' then ''Z'' else max(PropertyCity) end
					,PropertyZipCode=case when max(PropertyZipCode)= '''' then ''Z'' else max(PropertyZipCode) end
					,CBSAName=case when max(CBSAName)= '''' then ''Z'' else max(CBSAName) end
					,DaysWithUpsells=MAX(DaysWithUpsells)
					,LeadsWithUpsells=max(LeadsWithUpsells)
					,DaysWithOUTUpsells=max(DaysWithOUTUpsells)
					,LeadsWithoutUpsells=max(LeadsWithoutUpsells)
				FROM 
				(SELECT mgtconame=MAX(P.mgtconame)
						,p.propertyidAG
						,propertyName=MAX(P.propertyName)
						,PropertyCity=MAX(p.PropertyCity)
						,PropertyZipCode=MAX(p.PropertyZipCode)
						,CBSAName=MAX(p.CBSAName)
						,ymdid
						,DaysWithUpsells=MAX(P.DaysWithUpsells)
   		                ,LeadsWithUpsells=max(LeadsWithUpsells)
						,DaysWithOUTUpsells=MAX(P.DaysWithOUTUpsells)
						,LeadsWithoutUpsells=max(LeadsWithoutUpsells)
				FROM #properties p 
				JOIN mart.listings ml 
					ON p.propertyidAG=ml.propertyidAG 
					AND ml.ymdid BETWEEN ' + CAST(@startYMDID AS VARCHAR(8))
            + ' AND ' + CAST(@endYMDID AS VARCHAR(8))
            + ' GROUP BY p.propertyidAG,ymdid
				) v
				GROUP BY propertyidAG ' + ' ORDER BY '
            + CASE WHEN @Sorting = 1 THEN 'propertyName'
                   WHEN @Sorting = 2 THEN 'PropertyCity'
                   WHEN @Sorting = 4 THEN 'PropertyZipCode'
                   WHEN @Sorting = 5 THEN 'CBSAName'
                   ELSE 'propertyidAG'
              END

    PRINT @sql
	EXEC (@sql)

	select 	mgtconame
			,propertyidAG
			,propertyname
			,PropertyCity
			,PropertyZipCode
			,CBSAName
			,DaysWithUpsell
			,LeadsWithUpsells
			,DaysWithOUTUpsells
			,LeadsWithoutUpsells
	from #PropertiesToReport

END
SET NOCOUNT OFF







GO
/****** Object:  StoredProcedure [Reports].[Rpt_PropUpsellPerformanceWithSort_CBSA]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Reports].[Rpt_PropUpsellPerformanceWithSort_CBSA] (
    @StartYMDDate DATETIME = NULL
   ,@EndYMDDate DATETIME = NULL
   --,@CBSACodes VARCHAR(8000) = NULL
   ,@Optiontypeid INT = NULL
   ,@Sorting INT = NULL)
/*************************************************************************************************************
* Name: reports.Rpt_PropUpsellPerformanceWithSort_CBSA
* Desc: Proc marts monthly upsell activity for select upsells.
* -------------------------------------------------------------------------------------------------------------
* Notes: For @Sorting, 0 = SubSection, 1 = Property, 2 = City, 3 = Section, 4 = Zip Code, 5 = CBSA    
* -------------------------------------------------------------------------------------------------------------
* Test: EXEC reports.Rpt_PropUpsellPerformanceWithSort_CBSA '10/01/2016' ,'02/28/2017',68,1
* Test: EXEC reports.Rpt_PropUpsellPerformanceWithSort_CBSA '06/01/2013' ,'05/30/2014','12060',69,4
        EXEC reports.Rpt_PropUpsellPerformanceWithSort_CBSA '06/01/2014','12/31/2015',30,5
        EXEC reports.Rpt_PropUpsellPerformanceWithSort_CBSA '01/01/2015','12/31/2015',69,5
* -------------------------------------------------------------------------------------------------------------
* Hist:		01		05/14/2011	Richard Chen		Initial Version
* Hist:		02		11/07/2011	Shetal Gandhi		Issue: 6976 - Emmercial wasnt showing up. Modified group by to >= min(ymdid)	
*													Also places ISNULL around the avgdailyleadswithoutupsells, Leadswithoutupsells, percentchange
* Hist:		03		01/30/2012	Richard Chen		Ticket 8000.  Add UpsellPropMobileDeal
* Hist:		04		02/02/2012	Richard Chen		Ticket 8052   Add "Select All" Market
* Hist:		05		03/14/2012	Dale Hill			Ticket 8525   Added Extra Buckets
* Hist:		06		03/27/2012	Richard Chen		Ticket 8525 & Ticket 8672
* Hist:		07		01/29/2013	Clinton Woody		Add Diamond Max # 11550
* Hist:		08		10/02/2013	Don Wert			Ticket 13381 - add temp table to use for report so SSRS can see the output structure
* Hist:		09		04/02/2014	Chadwick Smith		Ticket 14968 MobileDiamond is MobileDiamond only without DiamondMax
* Hist:		10		04/03/2014	Chadwick Smith		Ticket 15080 Changed code so you can pass in NULL for @CBSACodes parameter, to show all CBSA's
*													Now this same stored proc is used by an internal report as well
* Hist:		11		04/17/2014	Sarah Mims			Ticket # 14358 Added MgmtPeelAd, HD Pano Tour, HD Video,
*													HD Photo and 3D Floor Plan. Removed Community Video, Emercial, 
*													Video Spokesmodel and Virtual Tour														  
* Hist:		12		05/13/2014	Chadwick Smith		Ticket 15372 Added Sponsored Apartment (OptionTypeID 66)
* Hist:		13		05/14/2014	Shetal Gandhi		Ticket 15577 - Fixed the truncation error occuring on the Mgtconame field in temp tables from varchar(50) to (100)
* Hist:		14		06/18/2014	Bob Langley			Ticket 15946 - Fix the lead counts for Mobile Diamond (OptionTypeID = 69).  Wasn't taking into account the check for DiamondMax along with Mobile Diamond in the lead counts (don't want both at the same time)
* Hist:		15		01/21/2016	Brian Trembley		Ticket 21873 - taking this proc from APTG and adapting to RENTPATH since that version isn't correct
* Hist:		16		07/27/2016	Colleen Rocks		Ticket 23725; add mobile leads to the sproc
*************************************************************************************************************/
AS
SET NOCOUNT ON
BEGIN
------------------------------
/*Declare & set variables*/
------------------------------
/*--test:
DECLARE @StartYMDDate DATETIME = '01/01/2016'
   ,@EndYMDDate DATETIME	= '06/30/2016'
			   --,@CBSACodes VARCHAR(4000)	= '46060'		--37860,18880
   ,@Optiontypeid INT	= 69
   ,@Sorting INT = 2
*/

DECLARE @YesterdayYMDID INT
   ,@StartYMDID INT
   ,@ENDYMDID INT
   ,@diff INT
   ,@upsellColumn VARCHAR(50)
   ,@sql0 VARCHAR(MAX)


SET @StartYMDID = CAST(CONVERT(VARCHAR(8),@StartYMDDate,112) AS INT)
SET @ENDYMDID = CAST(CONVERT(VARCHAR(8),@EndYMDDate,112) AS INT)
SET @diff = DATEDIFF("d",@StartYMDDate,@EndYMDDate) + 1
    --PRINT @diff

------------------------------
/*Drop temp tables*/
------------------------------
BEGIN TRY
    DROP TABLE #properties
END TRY
BEGIN CATCH 
END CATCH;

BEGIN TRY
    DROP TABLE #PropertiesToReport
END TRY
BEGIN CATCH 
END CATCH; 

------------------------------
/*Create and populate a table that lists
all properties that had the upsell during the 
timeframe and count days they had it versus did not*/
------------------------------
CREATE  TABLE #properties (
    [mgtconame] [VARCHAR](100) NULL
   ,[SectionName] [VARCHAR](75) NULL
   ,[SubSectionName] [VARCHAR](50) NULL
   ,[PropertyCity] [VARCHAR](75) NULL
   ,[ZipCode] [VARCHAR](10) NULL
   ,[CBSAName] [NVARCHAR](200) NULL
   ,[propertyname] [VARCHAR](100) NULL
   ,[propertyid] [INT] NULL
   ,[DaysWithUpsells] [INT] NULL
   ,[DaysWithOUTUpsells] [INT] NULL) 

SET @upsellColumn = CASE WHEN @Optiontypeid = 1 THEN 'UpsellHighlighted' -- 'UpsellListHighlighted'
                         WHEN @Optiontypeid = 2 THEN 'UpsellCoupon' -- 'CouponActiveOnSite'
                         WHEN @Optiontypeid = 4 THEN 'UpsellPropFeaturedCommunityPlatinum'
                         WHEN @Optiontypeid = 10 THEN 'UpsellPhotoUpgrade' -- 'UpsellPropPhotoUpgrade'
                         WHEN @Optiontypeid = 14 THEN 'UpsellPremiumUpgrade' -- 'UpsellPropPremiumUpgrade'
                         WHEN @Optiontypeid = 20 THEN 'UpsellPremierListingRentals' -- 'UpsellPropRentalsPremier'
                         WHEN @Optiontypeid = 21 THEN 'UpsellFeaturedListingRentals' -- 'UpsellPropRentalsFeatured'
                         WHEN @Optiontypeid = 22 THEN 'UpsellListingRentals' -- 'UpsellListRentalsListing'
                         WHEN @Optiontypeid = 26 THEN 'UpsellPropFeaturedCommunityGold'
                         WHEN @Optiontypeid = 27 THEN 'UpsellPropFeaturedCommunitySilver'
                         WHEN @Optiontypeid = 28 THEN 'UpsellPayPerLead' -- 'UpsellListPayPerLead'
                         WHEN @Optiontypeid = 29 THEN 'UpsellSpotlightRentals' -- 'UpsellListRentalsSpotlightAd'
                         WHEN @Optiontypeid = 30 THEN 'UpsellSpotlightAG' -- 'UpsellListSpotLight'
                         WHEN @Optiontypeid = 35 THEN 'UpsellPayPerLease' -- 'UpsellListPayPerLease'
                         WHEN @Optiontypeid = 36 THEN 'UpsellDiamondMetro' -- 'UpsellListDiamondMetro'
                         WHEN @Optiontypeid = 37 THEN 'UpsellDiamondCity' -- 'UpsellListDiamondCity'
                         WHEN @Optiontypeid = 38 THEN 'UpsellStandardListingRentals' -- 'UpsellListRentalsStandard'
                         WHEN @Optiontypeid = 39 THEN 'UpsellCarousel' -- 'UpsellListCommunityCarousel'
                         WHEN @Optiontypeid = 40 THEN 'UpsellCarouselRentals' -- 'UpsellListRentalsCarousel'
                         WHEN @Optiontypeid = 42 THEN 'UpsellMobileSpotlight' -- 'UpsellListMobileSpotLight'
                         WHEN @Optiontypeid = 43 THEN 'UpsellMobileDealFulfilled' -- 'UpsellPropMobileDeal'
                         WHEN @Optiontypeid = 61 THEN 'UpsellDiamondMax'  --'UpsellListDiamondMax'
                         WHEN @Optiontypeid = 63 THEN 'UpsellHDPanoTourFulfilled' -- 'UpsellListHDPanoTours'
                         WHEN @Optiontypeid = 64 THEN 'UpsellHDVideoFulfilled' -- 'UpsellListHDVideo'
                         WHEN @Optiontypeid = 65 THEN 'UpsellHDPhoto' -- 'UpsellListHDPhoto'
                         WHEN @Optiontypeid = 66 THEN 'UpsellSponsoredApartment' -- 'UpsellListSponsoredApartment'
                         WHEN @Optiontypeid = 68 THEN 'UpsellMgmtPeelAd' -- 'UpsellMgmtPeelAd'
                         WHEN @Optiontypeid = 69 THEN 'UpsellMobileDiamond' -- 'UpsellListMobileDiamond'
                         WHEN @Optiontypeid = 72 THEN 'UpsellLinked3DFloorplanFulfilled' -- 'UpsellList3DFloorPlan'
                         WHEN @Optiontypeid = 74 THEN 'UpsellAGSites' -- AG Sites
                         WHEN @Optiontypeid = 75 THEN 'UpsellMediaCenter' --  Media Center
                         WHEN @Optiontypeid = 302 THEN 'UpsellFeaturedCommunityRent' -- Featured Community - Rent
                         WHEN @Optiontypeid = 309 THEN 'UpsellSpotlightRent'-- Spotlight - Rent
                    END  

SET @sql0 = 'SELECT propertyidAG as propertyid
					,DaysWithUpsells =SUM(CASE WHEN upsellStatus = 1 THEN 1 ELSE 0 END)
					,DaysWithOUTUpsells= SUM(CASE WHEN upsellStatus = 0 THEN 1 ELSE 0 END) 
				 FROM (
						SELECT ml.YMDID
						      ,ml.PropertyIDAG
						      ,upsellStatus =  ' + CASE WHEN @Optiontypeid = 4 THEN 'MAX(CASE WHEN ml.PlacementTierAG = 10 THEN 1 ELSE 0 END) ' -- plat
                                                        WHEN @Optiontypeid = 26 THEN 'MAX(CASE WHEN ml.PlacementTierAG = 20 THEN 1 ELSE 0 END) ' -- gold
                                                        WHEN @Optiontypeid = 27 THEN 'MAX(CASE WHEN ml.PlacementTierAG = 30 THEN 1 ELSE 0 END) ' -- silver
                                                        ELSE 'MAX(ml.' + @upsellColumn + ') '
                                                   END + '
						FROM mart.listings AS ml
						WHERE ml.YMDID BETWEEN ' + CAST(@StartYMDID AS VARCHAR(8)) + ' AND ' + CAST(@ENDYMDID AS VARCHAR(8)) + '
							AND (ml.StatusIDAG = 1 OR ml.StatusIDRent = 1)
						GROUP BY ml.YMDID
						       ,ml.PropertyIDAG
					) v
				 GROUP BY PropertyIDAG
				 HAVING SUM(CASE WHEN upsellStatus = 1 THEN 1 ELSE 0 END) > 0
				   AND SUM(CASE WHEN upsellStatus = 0 THEN 1 ELSE 0 END) > 0'  
   

-- removed from dynamic sql above
--            JOIN    mart.listings ml
--                    ON dl.listingid = ml.listingid
--                    AND ml.ymdid BETWEEN ' + CAST(@startymdid AS VARCHAR(8)) + ' AND ' + CAST(@endYmdid AS VARCHAR(8)) + '
--            JOIN dbautility.dbo.zipcbsa AS zc
--                 ON dl.PropertyZipCode = zc.zipcode	 and  (charindex(zc.cbsacode , ''' + ISNULL(@CBSACodes,'') + ''') > 0 OR 1 IN (' + ISNULL(@CBSACodes,1) + '))


INSERT  #properties
        ([propertyid]
        ,[DaysWithUpsells]
        ,[DaysWithOUTUpsells])
        EXEC (@sql0)
   
PRINT @sql0
   
    --PRINT GETDATE()

------------------------------
/*Update the properties table to include
additional attributes of the property*/
------------------------------
UPDATE  p
SET     mgtconame = l.mgtconame
       ,PropertyCity = l.PropertyCity
       ,ZipCode = l.ZipCode
       ,CBSAName = l.CBSAName
       ,propertyname = l.Propertyname
FROM    #properties p
JOIN    (
         SELECT mgtconame = MAX(MgtCoNameAG)
               ,PropertyCity = MAX(PropertyCity)
               ,ZipCode = MAX(dl.PropertyZipCode)
               ,CBSAName = MAX(zc.CBSAName)
               ,Propertyname = MAX(PropertyName)
               ,PropertyIDAG
         FROM   Dimension.Listings AS dl
         JOIN   DBAUtility.dbo.ZipCBSA AS zc
                ON dl.PropertyZipCode = zc.ZIPCode
         GROUP BY PropertyIDAG
        ) l
        ON p.propertyid = l.PropertyIDAG


------------------------------
/*Create and populate a table counts leads
for the properties so we can calculate the 
average daily leads with/without the upsell
and percentage changes*/
------------------------------
CREATE TABLE #PropertiesToReport (
    [mgtconame] [VARCHAR](100) NULL
   ,[propertyid] [INT] NULL
   ,[propertyName] [VARCHAR](100) NULL
   ,[SectionName] [VARCHAR](75) NULL
   ,[SubSectionName] [VARCHAR](50) NULL
   ,[PropertyCity] [VARCHAR](75) NULL
   ,[ZipCode] [VARCHAR](10) NULL
   ,[CBSAName] [NVARCHAR](200) NULL
   ,[DaysWithUpsells] [INT] NULL
   ,[LeadsWithUpsells] [INT] NULL
   ,[MobileLeadsWithUpsells] [INT] NULL
   ,[DaysWithOUTUpsells] [INT] NULL
   ,[AvgDailyLeadsWithUpsells] DECIMAL(9,2) NULL
   ,[AvgDailyMobileLeadsWithUpsells] DECIMAL(9,2) NULL
   ,[LeadsWithoutUpsells] [INT] NULL
   ,[MobileLeadsWithoutUpsells] [INT] NULL
   ,[AvgDailyLeadsWithoutUpsells] DECIMAL(9,2) NULL
   ,[AvgDailyMobileLeadsWithoutUpsells] DECIMAL(9,2) NULL
   ,[PercentChange] DECIMAL(9,2) NULL
   ,[MobilePercentChange] DECIMAL(9,2) NULL)

DECLARE @sql VARCHAR(MAX)
SET @sql = 'INSERT INTO #PropertiesToReport
					(mgtconame
					,propertyid
					,propertyName
					,PropertyCity
					,ZipCode
					,CBSAName
					,DaysWithUpsells
					,LeadsWithUpsells
					,MobileLeadsWithUpsells
					,DaysWithOUTUpsells
					,AvgDailyLeadsWithUpsells
					,AvgDailyMobileLeadsWithUpsells
					,LeadsWithoutUpsells
					,MobileLeadsWithoutUpsells
					,AvgDailyLeadsWithoutUpsells
					,AvgDailyMobileLeadsWithoutUpsells
					,PercentChange
					,MobilePercentChange)
				SELECT mgtconame = MAX(mgtconame)
					,propertyid
					,propertyName = MAX(propertyName)
					,PropertyCity = CASE WHEN MAX(PropertyCity)= '''' THEN ''Z'' ELSE MAX(PropertyCity) END
					,ZipCode = CASE WHEN MAX(ZipCode)= '''' THEN ''Z'' ELSE MAX(ZipCode) END
					,CBSAName = CASE WHEN MAX(CBSAName)= '''' THEN ''Z'' ELSE MAX(CBSAName) END
					,DaysWithUpsells = MAX(DaysWithUpsells)
					,LeadsWithUpsells = SUM(LeadsWithUpsells)
					,MobileLeadsWithUpsells = SUM(MobileLeadsWithUpsells)
					,DaysWithOUTUpsells = MAX(DaysWithOUTUpsells)
					,AvgDailyLeadsWithUpsells = SUM(LeadsWithUpsells)/CAST(MAX(DaysWithUpsells) AS DECIMAL(9,2))
					,AvgDailyMobileLeadsWithUpsells = SUM(MobileLeadsWithUpsells)/CAST(MAX(DaysWithUpsells) AS DECIMAL(9,2))
					,LeadsWithoutUpsells = SUM(LeadsWithoutUpsells)
					,MobileLeadsWithoutUpsells = SUM(MobileLeadsWithoutUpsells)
					,AvgDailyLeadsWithoutUpsells = SUM(LeadsWithoutUpsells)/CAST(MAX(DaysWithOUTUpsells) AS DECIMAL(9,2))
					,AvgDailyMobileLeadsWithoutUpsells = SUM(MobileLeadsWithoutUpsells)/CAST(MAX(DaysWithOUTUpsells) AS DECIMAL(9,2))
					,PercentChange = (SUM(LeadsWithUpsells)/CAST(MAX(DaysWithUpsells) AS DECIMAL(9,2))-SUM(LeadsWithoutUpsells)/CAST(MAX(DaysWithOUTUpsells) AS DECIMAL(9,2)))
						/CASE WHEN SUM(LeadsWithoutUpsells)/CAST(MAX(DaysWithOUTUpsells) AS DECIMAL(9,2)) = 0 THEN NULL 
								ELSE SUM(LeadsWithoutUpsells)/CAST(MAX(DaysWithOUTUpsells) AS DECIMAL(9,2)) END
					,MobilePercentChange = (SUM(MobileLeadsWithUpsells)/CAST(MAX(DaysWithUpsells) AS DECIMAL(9,2))-SUM(MobileLeadsWithoutUpsells)/CAST(MAX(DaysWithOUTUpsells) AS DECIMAL(9,2)))
						/CASE WHEN SUM(MobileLeadsWithoutUpsells)/CAST(MAX(DaysWithOUTUpsells) AS DECIMAL(9,2)) = 0 THEN NULL 
								ELSE SUM(MobileLeadsWithoutUpsells)/CAST(MAX(DaysWithOUTUpsells) AS DECIMAL(9,2)) END
				FROM (
						SELECT mgtconame = MAX(P.mgtconame)
							,p.PropertyID
							,propertyName = MAX(P.propertyName)
							,PropertyCity = MAX(p.PropertyCity)
							,ZipCode = MAX(p.ZipCode)
							,CBSAName = MAX(p.CBSAName)
							,ml.YMDID
							,DaysWithUpsells = MAX(p.DaysWithUpsells)
							,LeadsWithUpsells = ' + CASE WHEN @Optiontypeid = 4 THEN 'CASE WHEN MAX(ml.PlacementTierAG) = 10 ' -- plat
                                                         WHEN @Optiontypeid = 26 THEN 'CASE WHEN MAX(ml.PlacementTierAG) = 20 ' -- gold
                                                         WHEN @Optiontypeid = 27 THEN 'CASE WHEN MAX(ml.PlacementTierAG) = 30 ' -- silver
                                                         ELSE 'CASE WHEN MAX(ml.' + @upsellColumn + ') = 1 '
                                                    END + CASE WHEN @Optiontypeid IN (69) THEN ' AND MAX(ml.UpsellDiamondMax) = 0 '		-- Ticket 15946 - and check that DiamondMax = 0 when UpsellListMobileDiamond = 1 when running for Mobile Diamond
                                                               ELSE ''
                                                          END + CASE WHEN @Optiontypeid IN (6,7,8,12) THEN ' AND MAX(ml.StatusIDAG + ml.' + @upsellColumn + ') =2'
                                                                     ELSE ''
                                                                END + ' THEN SUM(ml.Allleads) ELSE 0 END
							,MobileLeadsWithUpsells = ' + CASE WHEN @Optiontypeid = 4 THEN 'CASE WHEN MAX(ml.PlacementTierAG) = 10 ' -- plat
                                                               WHEN @Optiontypeid = 26 THEN 'CASE WHEN MAX(ml.PlacementTierAG) = 20 ' -- gold
                                                               WHEN @Optiontypeid = 27 THEN 'CASE WHEN MAX(ml.PlacementTierAG) = 30 ' -- silver
                                                               ELSE 'CASE WHEN MAX(ml.' + @upsellColumn + ') = 1 '
                                                          END + CASE WHEN @Optiontypeid IN (69) THEN ' AND MAX(ml.UpsellDiamondMax) = 0 '		-- Ticket 15946 - and check that DiamondMax = 0 when UpsellListMobileDiamond = 1 when running for Mobile Diamond
                                                                     ELSE ''
                                                                END + CASE WHEN @Optiontypeid IN (6,7,8,12) THEN ' AND MAX(ml.StatusIDAG + ml.' + @upsellColumn + ') =2'
                                                                           ELSE ''
                                                                      END + ' THEN SUM(x.MobileAllLeads) ELSE 0 END
							,DaysWithOUTUpsells = MAX(P.DaysWithOUTUpsells)
							,LeadsWithoutUpsells = SUM(ml.AllLeads)-' + CASE WHEN @Optiontypeid = 4 THEN '(CASE WHEN MAX(ml.PlacementTierAG) = 10 ' -- plat
                                                                             WHEN @Optiontypeid = 26 THEN '(CASE WHEN MAX(ml.PlacementTierAG) = 20 ' -- gold
                                                                             WHEN @Optiontypeid = 27 THEN '(CASE WHEN MAX(ml.PlacementTierAG) = 30 ' -- silver
                                                                             ELSE '(CASE WHEN MAX(ml.' + @upsellColumn + ') = 1 '
                                                                        END + CASE WHEN @Optiontypeid IN (69) THEN ' AND MAX(ml.UpsellDiamondMax) = 0 '		-- Ticket 15946 - and check that DiamondMax = 0 when UpsellListMobileDiamond = 1 when running for Mobile Diamond
                                                                                   ELSE ''
                                                                              END + CASE WHEN @Optiontypeid IN (6,7,8,12) THEN ' AND MAX(ml.StatusIDAG + ml.' + @upsellColumn + ') =2'
                                                                                         ELSE ''
                                                                                    END + ' THEN SUM(ml.Allleads) ELSE 0 END)
							,MobileLeadsWithoutUpsells = SUM(x.MobileAllLeads)-' + CASE WHEN @Optiontypeid = 4 THEN '(CASE WHEN MAX(ml.PlacementTierAG) = 10 ' -- plat
                                                                                        WHEN @Optiontypeid = 26 THEN '(CASE WHEN MAX(ml.PlacementTierAG) = 20 ' -- gold
                                                                                        WHEN @Optiontypeid = 27 THEN '(CASE WHEN MAX(ml.PlacementTierAG) = 30 ' -- silver
                                                                                        ELSE '(CASE WHEN MAX(ml.' + @upsellColumn + ') = 1 '
                                                                                   END + CASE WHEN @Optiontypeid IN (69) THEN ' AND MAX(ml.UpsellDiamondMax) = 0 '		-- Ticket 15946 - and check that DiamondMax = 0 when UpsellListMobileDiamond = 1 when running for Mobile Diamond
                                                                                              ELSE ''
                                                                                         END + CASE WHEN @Optiontypeid IN (6,7,8,12) THEN ' AND MAX(ml.StatusIDAG + ml.' + @upsellColumn + ') =2'
                                                                                                    ELSE ''
                                                                                               END + ' THEN SUM(x.MobileAllLeads) ELSE 0 END)
						FROM #properties AS p 
						INNER JOIN mart.listings AS ml 
							ON p.PropertyID = ml.PropertyIDAG
							AND ml.YMDID BETWEEN ' + CAST(@StartYMDID AS VARCHAR(8)) + ' AND ' + CAST(@ENDYMDID AS VARCHAR(8)) + ' 
						INNER JOIN (
									SELECT YMDID
										,ListingID
										,SUM(MobileAllLeads) AS MobileAllLeads
									FROM ApartmentGuide.Mart.AGRentCombinedMartListings
									WHERE YMDID BETWEEN ' + CAST(@StartYMDID AS VARCHAR(8)) + ' AND ' + CAST(@ENDYMDID AS VARCHAR(8)) + '
									GROUP BY YMDID
										,ListingID
								) AS x
							ON ml.YMDID = x.YMDID
							AND ml.ListingID = x.ListingID
						GROUP BY p.PropertyID
							,ml.YMDID
					) v
				GROUP BY PropertyID ' + --CASE WHEN  @optionTypeid IN (6,7,8,12) THEN' HAVING SUM(LeadsWithoutUpsells) > 0' else '' end  +
    ' ORDER BY ' + CASE WHEN @Sorting = 3 THEN 'SectionName'
                        WHEN @Sorting = 0 THEN 'SubSectionName'
                        WHEN @Sorting = 1 THEN 'propertyName'
                        WHEN @Sorting = 2 THEN 'PropertyCity'
                        WHEN @Sorting = 4 THEN 'ZipCode'
                        WHEN @Sorting = 5 THEN 'CBSAName'
                        ELSE 'PropertyID'
                   END
PRINT @sql
EXEC (@sql)
	
    --PRINT GETDATE()


------------------------------
/*Get final result set*/
------------------------------
SELECT  mgtconame
       ,propertyid AS PropertyIDAG
       ,propertyName
       ,PropertyCity
       ,ZipCode AS PropertyZipCode
       ,CBSAName  --not displayed by summary section but needed for header
       ,DaysWithUpsells
       ,LeadsWithUpsells
       ,AvgDailyLeadsWithUpsells
       ,DaysWithOUTUpsells
       ,LeadsWithoutUpsells
       ,AvgDailyLeadsWithoutUpsells
       ,PercentChange
       ,MobileLeadsWithUpsells
       ,AvgDailyMobileLeadsWithUpsells
       ,MobileLeadsWithoutUpsells
       ,AvgDailyMobileLeadsWithoutUpsells
       ,MobilePercentChange
FROM    #PropertiesToReport

END
SET NOCOUNT OFF






GO
/****** Object:  StoredProcedure [Reports].[rpt_Read_DashboardSubscriptions_Audit]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/*--######################################################################################
*
* Name:	[Reports].[rpt_Read_DashboardSubscriptions_Audit]
*
* Desc:  Read all audit records for specific SubscriptionID value
*
* Test:	EXEC Reports.rpt_Read_DashboardSubscriptions_Audit 24
*
*
* SELECT * FROM dbo.DashboardSubscriptions WITH (NOLOCK)
* SELECT * FROM dbo.DashboardSubscriptionsAudit WITH (NOLOCK) WHERE SubscriptionID = 23
* Hist:	01	02/12/2015	Bob Langley		Ticket 18155 - Initial Version 
* Hist: 02	06/02/2015	Bob Langley		Ticket 19612 - Changed to add the new AdvancedReportType column
* Hist: 03	06/24/2015	Bob Langley		Ticket 19743, Story 96653792 - For release 1.6, changed to add the new column AdvancedMethod for sending by either email or FTP (was just FTP).
--#######################################################################################*/
CREATE PROCEDURE [Reports].[rpt_Read_DashboardSubscriptions_Audit]
(@subscriptionid		int)
AS

SET NOCOUNT ON

DECLARE @spstat		int
DECLARE @errmsg		varchar(200)
DECLARE @recn		int

DECLARE @numrecs int

DECLARE @continueproc bit		            --continue processing


SET @continueproc = 1     -- set to continue processing
SET @spstat = 1           -- go ahead and set to ok
SET @errmsg = ''          -- go ahead and set to ok
SET @recn = 0             -- go ahead and set to ok


BEGIN TRY


	if @continueproc = 1              --only continue if everything is ok
		BEGIN

			SELECT 0 AS SubscriptionAuditID,SubscriptionID,PropertyID,UserGUID,[Description],Report,AdvancedReportType,AdvancedMethod,[TO],Frequency,Creator,[Server],Port,[Login],[Password],DisplayColumns,LCHost,LCUser,LCDate, 0 AS FinalDelete
			FROM dbo.DashboardSubscriptions  WITH (NOLOCK)
			WHERE SubscriptionID = @subscriptionid

			UNION ALL

			SELECT SubscriptionAuditID,SubscriptionID,PropertyID,UserGUID,[Description],Report,AdvancedReportType,AdvancedMethod,[TO],Frequency,Creator,[Server],Port,[Login],[Password],DisplayColumns,LCHost,LCUser,LCDate, FinalDelete
			FROM dbo.DashboardSubscriptionsAudit WITH (NOLOCK)
			WHERE SubscriptionID = @subscriptionid
			ORDER BY LCDate DESC

			if @numrecs=0
				BEGIN
					SET @spstat = -1
					SET @errmsg = 'No records selected'
					SET @recn = 0
				END

		END
	else
		BEGIN
			SET @errmsg = 'Encountered unknown error.'
		END


	RETURN @spstat
END TRY
BEGIN CATCH
	DECLARE	@ErrorNo	int,
		@Severity	int,
		@State		int,
		@LineNo		int,
		@errmessage	varchar(2000)
	SELECT	@ErrorNo = ERROR_NUMBER(),
		@Severity = ERROR_SEVERITY(),
		@State = ERROR_STATE(),
		@LineNo = ERROR_LINE(),
		@errmessage = ERROR_MESSAGE()

	SET @spstat = 0


	SET @errmessage = 'Attempting to read audit records. In SPROC Reports.rpt_Read_DashboardSubscriptions_Audit.  Error - ' + @errmessage


	raiserror(@errmessage,16,1) with log;

	RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	



END CATCH



GO
/****** Object:  StoredProcedure [Reports].[rpt_SalesForceCallAnalysisData]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Reports].[rpt_SalesForceCallAnalysisData] (@PropertyID INT)
AS /*************************************************************************************************
*
* Name:	Reports.rpt_SalesForceCallAnalysisData
*
* Desc:	This provides the data needed for both the Property Phone Lead Details.
*
* Test:	EXEC Reports.rpt_SalesForceCallAnalysisData '84792'
*		EXEC Reports.rpt_SalesForceCallAnalysisData '100042435'
		EXEC Reports.rpt_SalesForceCallAnalysisData '100686'
*
* Hist:	01	03/09/2015		Julie DiPietro			Modified rpt_CallAnalysisData to use AG PropertyID

**************************************************************************************************/

SET NOCOUNT ON

--Drop temp table if not null
----------------------------------------------------------------------------------------------------------------

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
DECLARE @TrackDate DATETIME
   ,@LengthInSeconds INT
   ,@DatabaseName VARCHAR(128)
                
SET @TrackDate = GETDATE()
SET @LengthInSeconds = 0
SET @DatabaseName = DB_NAME()        
		
EXEC DBAUtility.dbo.pr_Logging_StoredProcsNoTemp 
    @DatabaseName = @DatabaseName
   , -- varchar(128)
    @ProcName = 'Reports.rpt_SalesForceCallAnalysisData'
   , -- varchar(128)
    @StepName = 'Execute Procedure'
   , -- varchar(128)
    @VariableStates = ''
   , -- varchar(500)
    @LengthInSeconds = @LengthInSeconds
   , -- int
    @Comments = 'Execute Procedure'; -- varchar(500)


IF OBJECT_ID('tempdb..#AllListings') IS NOT NULL 
    BEGIN    
        DROP TABLE #AllListings
    END

IF OBJECT_ID('tempdb..#QuintileCutoffs') IS NOT NULL 
    BEGIN   
        DROP TABLE #QuintileCutoffs
    END

IF OBJECT_ID('tempdb..#BaseData') IS NOT NULL 
    BEGIN    
        DROP TABLE #BaseData
    END


----------------------------------------------------------------------------------------------------------------
--Declare and set variables
----------------------------------------------------------------------------------------------------------------

/*test		

DECLARE  @PropertyID INT
			
Select @PropertyID = 100042435


*/


DECLARE @StartYMDID INT
   ,@EndYMDID INT
   ,@StartDate DATETIME
   ,@EndDate DATETIME
   ,@ListingID INT   
		


SET @Listingid = (
                  SELECT DISTINCT
                            ListingID
                  FROM      ApartmentGuide.Dimension.AGRentCombinedDimensionListings
                  WHERE     AGPropertyID = @PropertyID
                 )

SET @StartYMDID = CAST(CONVERT(VARCHAR(8),DATEADD(mm,-0,DATEADD(mm,DATEDIFF(mm,0,GETDATE() - 1),0)),112) AS INT)
SET @EndYMDID = CAST(CONVERT(VARCHAR(8),GETDATE() - 1,112) AS INT)

SET @StartDate = CONVERT(DATETIME,CONVERT(VARCHAR(10),@StartYMDID))
SET @EndDate = CONVERT(DATETIME,CONVERT(VARCHAR(10),@EndYmDID))


--All Listings (for Flags)
SELECT  dl.ListingID
       ,ISNULL(MAX(CASE WHEN dl.Website = 'AG' THEN 1
                        ELSE 0
                   END),0) AS AGFlag
       ,ISNULL(MAX(CASE WHEN ml.Website = 'AG'
                             AND ml.ListingStatusID = 1 THEN 1
                        ELSE 0
                   END),0) AS AGListingStatusID
       ,ISNULL(MAX(CASE WHEN dl.Website = 'Rent' THEN 1
                        ELSE 0
                   END),0) AS RentFlag
       ,ISNULL(MAX(CASE WHEN ml.Website = 'Rent'
                             AND ml.ListingStatusID = 1 THEN 1
                        ELSE 0
                   END),0) AS RentListingStatusID
INTO    #AllListings
FROM    ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
JOIN    ApartmentGuide.Mart.AGRentCombinedMartListings AS ml
        ON dl.ListingID = ml.ListingID
           AND dl.Website = ml.Website
LEFT OUTER JOIN DBAUtility.dbo.ZipCBSA AS zc
        ON dl.ZipCode = zc.ZIPCode
WHERE   ml.YMDID BETWEEN @StartYMDID AND @EndYMDID
        AND dl.ListingID = @ListingID
GROUP BY dl.ListingID


----------------------------------------------------------------------------------------------------------------
--Create Quintile Cutoffs for Percent Missed (includes Busy), Percent Abandoned and Average Wait Time
----------------------------------------------------------------------------------------------------------------

SELECT  AbandonCut45 = MAX(CASE WHEN ct.AbandonedQuintile = 5 THEN ct.PercentAbandoned
                                ELSE NULL
                           END)
       ,AbandonCut34 = MAX(CASE WHEN ct.AbandonedQuintile = 4 THEN ct.PercentAbandoned
                                ELSE NULL
                           END)
       ,AbandonCut23 = MAX(CASE WHEN ct.AbandonedQuintile = 3 THEN ct.PercentAbandoned
                                ELSE NULL
                           END)
       ,AbandonCut12 = MAX(CASE WHEN ct.AbandonedQuintile = 2 THEN ct.PercentAbandoned
                                ELSE NULL
                           END)
       ,MissedCut45 = MAX(CASE WHEN ct.MissedQuintile = 5 THEN ct.PercentMissed
                               ELSE NULL
                          END)
       ,MissedCut34 = MAX(CASE WHEN ct.MissedQuintile = 4 THEN ct.PercentMissed
                               ELSE NULL
                          END)
       ,MissedCut23 = MAX(CASE WHEN ct.MissedQuintile = 3 THEN ct.PercentMissed
                               ELSE NULL
                          END)
       ,MissedCut12 = MAX(CASE WHEN ct.MissedQuintile = 2 THEN ct.PercentMissed
                               ELSE NULL
                          END)
       ,WaitTimeCut45 = MAX(CASE WHEN ct.WaitTimeQuintile = 5 THEN ct.AvgCallWaitTime
                                 ELSE NULL
                            END)
       ,WaitTimeCut34 = MAX(CASE WHEN ct.WaitTimeQuintile = 4 THEN ct.AvgCallWaitTime
                                 ELSE NULL
                            END)
       ,WaitTimeCut23 = MAX(CASE WHEN ct.WaitTimeQuintile = 3 THEN ct.AvgCallWaitTime
                                 ELSE NULL
                            END)
       ,WaitTimeCut12 = MAX(CASE WHEN ct.WaitTimeQuintile = 2 THEN ct.AvgCallWaitTime
                                 ELSE NULL
                            END)
INTO    #QuintileCutoffs
FROM    (
         SELECT d.ListingID
               ,d.PercentAbandoned
               ,NTILE(5) OVER (ORDER BY d.PercentAbandoned DESC) AS AbandonedQuintile
               ,d.PercentMissed
               ,NTILE(5) OVER (ORDER BY d.PercentMissed DESC) AS MissedQuintile
               ,d.AvgCallWaitTime
               ,NTILE(5) OVER (ORDER BY d.AvgCallWaitTime DESC) AS WaitTimeQuintile
         FROM   (
                 SELECT cag.ListingID
                       ,CASE WHEN SUM(CASE WHEN cag.CallStatus = 1
                                                AND cag.AudioURL IS NOT NULL THEN 1
                                           ELSE 0
                                      END) = 0 THEN 0
                             ELSE SUM(CASE WHEN cag.IsAbandoned = 1 THEN 1
                                           ELSE 0
                                      END) / CAST(SUM(CASE WHEN cag.CallStatus = 1
                                                                AND cag.AudioURL IS NOT NULL THEN 1
                                                           ELSE 0
                                                      END) AS MONEY)
                        END AS PercentAbandoned
                       ,CASE WHEN SUM(1) = 0 THEN 0
                             ELSE SUM(CASE WHEN cag.CallStatus IN (2,3) THEN 1
                                           ELSE 0
                                      END) / CAST(SUM(1) AS MONEY)
                        END AS PercentMissed
                       ,CASE WHEN SUM(CASE WHEN cag.CallStatus = 1
                                                AND cag.AudioURL IS NOT NULL
                                                AND cag.TotalCallerTrimTalkTime IS NOT NULL THEN 1
                                           ELSE 0
                                      END) = 0 THEN 0
                             ELSE SUM(cag.TimePriorToCallerSpeaking) / CAST(SUM(CASE WHEN cag.CallStatus = 1
                                                                                          AND cag.AudioURL IS NOT NULL
                                                                                          AND cag.TotalCallerTrimTalkTime IS NOT NULL THEN 1
                                                                                     ELSE 0
                                                                                END) AS MONEY)
                        END AS AvgCallWaitTime
                 FROM   ApartmentGuide.Fact.AGRentPhoneLeads AS cag
                 WHERE  cag.YMDID BETWEEN @StartYMDID AND @EndYMDID
                        AND cag.CallType <> 'CRAIGSLIST'
                 GROUP BY cag.ListingID
                ) AS d
        ) AS ct

--------------------------------------------------------------------------------------------------------------------------------------
--Create base dataset
--------------------------------------------------------------------------------------------------------------------------------------
SELECT  dl.ListingID
       ,dl.PropertyName
       ,dl.MgtCoName
       ,cag.CallID
       ,DATEPART(HOUR,cag.CallStartDateTime) AS CallHourOfDay
       ,DATEPART(weekday,cag.CallStartDateTime) AS CallDayOfWeekNum
       ,LEFT(DATENAME(weekday,cag.CallStartDateTime),3) AS CallDayOfWeekName
       ,CONVERT(VARCHAR(10),cag.CallStartDateTime,101) AS CallDate
       ,SUBSTRING(CONVERT(VARCHAR(30),cag.CallStartDateTime,100),13,7) AS CallTime
       ,CASE WHEN ph.firstName IS NULL
                  AND ph.LastName IS NULL THEN cag.CallerName
             ELSE ISNULL(ph.firstname,'') + ' ' + ISNULL(ph.lastname,'')
        END AS CallerName
       ,cag.CallerPhoneNumber
       ,cag.CallerLocation
       ,zc.CBSACode
       ,zc.CBSAName
       ,ISNULL(pc.LeadMediumDesc,'Not Categorized') AS LeadMediumDesc
       ,CASE cag.CallStatus
          WHEN 1 THEN 'Connected'
          WHEN 2 THEN 'Missed'
          WHEN 3 THEN 'Missed'
          ELSE 'Unknown'
        END AS TextCallStatus
       ,cag.CallStatus
       ,cag.IsAbandoned
       ,cag.DurationInSeconds
       ,cag.TotalCallerTrimTalkTime
       ,cag.TimePriorToCallerSpeaking
       ,CASE WHEN CASE WHEN cag.CallStatus = 1
                            AND cag.TotalCallerTrimTalkTime IS NOT NULL
                            AND cag.AudioURL IS NOT NULL THEN 1
                       ELSE 0
                  END = 0 THEN 0
             ELSE CAST(cag.TimePriorToCallerSpeaking AS MONEY) / CASE WHEN cag.CallStatus = 1
                                                                           AND cag.TotalCallerTrimTalkTime IS NOT NULL
                                                                           AND cag.AudioURL IS NOT NULL THEN 1
                                                                      ELSE 0
                                                                 END
        END AS AvgCallWaitTime
       ,cag.AudioURL
       ,CASE WHEN cag.AudioURL IS NOT NULL THEN 1
             ELSE 0
        END AS CallRecording
       ,dl.Website
INTO    #BaseData
FROM    ApartmentGuide.Fact.AGRentPhoneLeads AS cag
JOIN    ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
        ON cag.ListingID = dl.ListingID
           AND cag.website = dl.website
LEFT OUTER JOIN ApartmentGuide.Dimension.PhoneLookup AS ph
        ON cag.CallerPhoneNumber = ph.phoneNumber
LEFT OUTER JOIN (
                 SELECT LTRIM(SUBSTRING(LeadSourceBusinessKey,CHARINDEX('-',LeadSourceBusinessKey) + 1,LEN(LeadSourceBusinessKey))) AS LeadType
                       ,DBSourceSystemDesc
                       ,CASE WHEN dss.DBSourceSystemKey = 1 THEN 'AG'
                             ELSE 'Rent'
                        END AS Website
                       ,LeadTypeDesc
                       ,LeadMediumDesc
                 FROM   Warehouse.Conformed.LeadSource AS ls
                 JOIN   Warehouse.Conformed.DBSourceSystem AS dss
                        ON ls.DBSourceSystemKey = dss.DBSourceSystemKey
                 WHERE  dss.DBSourceSystemKey IN (1,6)
                        AND ls.LeadTypeDesc = 'Phone'
                ) AS pc
        ON cag.CallType = pc.LeadType
           AND cag.Website = pc.Website
LEFT OUTER JOIN DBAUtility.dbo.ZipCBSA AS zc
        ON dl.ZipCode = zc.ZIPCode
WHERE   cag.YMDID BETWEEN @StartYMDID AND @EndYMDID
        AND cag.CallType <> 'CRAIGSLIST'
        AND cag.ListingID = @ListingID


---------------------------------------------------------------------------------------
--Get report data including summary 
---------------------------------------------------------------------------------------
		
SELECT  sd.ListingID
       ,sd.CBSAName
       ,sd.TotalCalls
       ,sd.ConnectedCalls
       ,sd.DesktopConnectedCalls
       ,sd.MobileConnectedCalls
       ,sd.PrintConnectedCalls
       ,sd.MissedCalls
       ,sd.PercentMissed
       ,CASE WHEN sd.PercentMissed > qc.MissedCut12 THEN 1
             WHEN sd.PercentMissed > qc.MissedCut23 THEN 2
             WHEN sd.PercentMissed > qc.MissedCut34 THEN 3
             WHEN sd.PercentMissed > qc.MissedCut45 THEN 4
             ELSE 5
        END AS MissedRank
       ,sd.AbandonedCalls
       ,sd.PercentAbandoned
       ,CASE WHEN sd.PercentAbandoned > qc.AbandonCut12 THEN 1
             WHEN sd.PercentAbandoned > qc.AbandonCut23 THEN 2
             WHEN sd.PercentAbandoned > qc.AbandonCut34 THEN 3
             WHEN sd.PercentAbandoned > qc.AbandonCut45 THEN 4
             ELSE 5
        END AS AbandondedRank
       ,sd.AvgCallDuration
       ,sd.AvgCallWaitTime
       ,CASE WHEN sd.AvgCallWaitTime > qc.WaitTimeCut12 THEN 1
             WHEN sd.AvgCallWaitTime > qc.WaitTimeCut23 THEN 2
             WHEN sd.AvgCallWaitTime > qc.WaitTimeCut34 THEN 3
             WHEN sd.AvgCallWaitTime > qc.WaitTimeCut45 THEN 4
             ELSE 5
        END AS WaitTimeRank
       ,dbd.CallDate
       ,dbd.CallHourOfDay
       ,dbd.CallDayOfWeekNum
       ,dbd.CallDayOfWeekName
       ,CASE WHEN dbd.CallHourOfDay IN (12,0) THEN CAST(12 AS CHAR(2))
             ELSE CAST(dbd.CallHourOfDay % 12 AS CHAR(2))
        END + CASE dbd.CallHourOfDay / 12
                WHEN 1 THEN ' PM'
                ELSE ' AM'
              END AS CallHour
       ,dbd.CallTime
       ,dbd.CallerName
       ,dbd.CallerLocation
       ,dbd.CallerPhoneNumber
       ,dbd.LeadMediumDesc
       ,dbd.TextCallStatus
       ,dbd.IsAbandoned
       ,dbd.DurationInSeconds
       ,CASE WHEN dbd.AvgWaitTime < 0 THEN 0
             ELSE dbd.AvgWaitTime
        END AS AvgWaitTime
       ,dbd.AudioURL
       ,dbd.CallRecording
       ,dbd.CallID
       ,dbd.Website
FROM    (
         SELECT bd.ListingID
               ,bd.CBSAName
               ,SUM(1) AS TotalCalls
               ,SUM(CASE WHEN bd.CallStatus = 1 THEN 1
                         ELSE 0
                    END) AS ConnectedCalls
               ,SUM(CASE WHEN bd.CallStatus = 1
                              AND bd.LeadMediumDesc = 'Desktop' THEN 1
                         ELSE 0
                    END) AS DesktopConnectedCalls
               ,SUM(CASE WHEN bd.CallStatus = 1
                              AND bd.LeadMediumDesc = 'Mobile' THEN 1
                         ELSE 0
                    END) AS MobileConnectedCalls
               ,SUM(CASE WHEN bd.CallStatus = 1
                              AND bd.LeadMediumDesc = 'Print' THEN 1
                         ELSE 0
                    END) AS PrintConnectedCalls
               ,SUM(CASE WHEN bd.CallStatus IN (2,3) THEN 1
                         ELSE 0
                    END) AS MissedCalls
               ,SUM(CASE WHEN bd.CallStatus IN (2,3) THEN 1
                         ELSE 0
                    END) / CAST(SUM(1) AS DECIMAL(15,4)) AS PercentMissed
               ,SUM(CASE WHEN bd.IsAbandoned = 1 THEN 1
                         ELSE 0
                    END) AS AbandonedCalls
               ,CAST(SUM(CASE WHEN bd.IsAbandoned = 1 THEN 1
                              ELSE 0
                         END) AS DECIMAL(15,4)) / SUM(CASE WHEN bd.CallStatus = 1
                                                                AND bd.AudioURL IS NOT NULL THEN 1
                                                      END) AS PercentAbandoned
               ,AVG(CASE WHEN bd.DurationInSeconds = 0 THEN NULL
                         ELSE bd.DurationInSeconds
                    END) AS AvgCallDuration
               ,CASE WHEN SUM(CASE WHEN bd.CallStatus = 1
                                        AND bd.TotalCallerTrimTalkTime IS NOT NULL
                                        AND bd.AudioURL IS NOT NULL THEN 1
                                   ELSE 0
                              END) = 0 THEN 0
                     ELSE SUM(bd.TimePriorToCallerSpeaking) / CAST(SUM(CASE WHEN bd.CallStatus = 1
                                                                                 AND bd.TotalCallerTrimTalkTime IS NOT NULL
                                                                                 AND bd.AudioURL IS NOT NULL THEN 1
                                                                            ELSE 0
                                                                       END) AS MONEY)
                END AS AvgCallWaitTime
         FROM   #BaseData AS bd
         GROUP BY bd.ListingID
               ,bd.CBSAName
        ) AS sd
CROSS JOIN #QuintileCutoffs qc
JOIN    (
         SELECT bd.ListingID
               ,bd.CallHourOfDay
               ,bd.CallDayOfWeekNum
               ,bd.CallDayOfWeekName
               ,bd.CallDate
               ,bd.CallTime
               ,bd.CallerName
               ,bd.CallerLocation
               ,bd.CallerPhoneNumber
               ,bd.LeadMediumDesc
               ,bd.TextCallStatus
               ,bd.IsAbandoned
               ,bd.DurationInSeconds
               ,bd.AvgCallWaitTime AS AvgWaitTime
               ,bd.AudioURL
               ,bd.CallRecording
               ,bd.CallID
               ,bd.Website
         FROM   #BaseData AS bd
        ) AS dbd
        ON sd.ListingID = dbd.ListingID

	

GO
/****** Object:  StoredProcedure [Reports].[rpt_SalesForcePropEmailLeadsSummary]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Reports].[rpt_SalesForcePropEmailLeadsSummary]
	(
     @PropertyID INT
	)
/*************************************************************************************************
*
* Name:	Reports.rpt_SalesForcePropEmailLeadsSummary
*
* Desc:	This is the new version of the Property Email Leads report. Modified to use AG Property ID.
*
* Test:	EXEC Reports.rpt_SalesForcePropEmailLeadsSummary '21485'

*
*
* Hist:	01	02/27/2015		Julie DiPietro		Modified Property Email Leads report to use AG Property ID.
* Hist: 02  08/17/2015      Julie DiPietro      Ticket 20392; added mailingnames (B2B_Lead_Details_Email; B2B_Lead_Details_Email_Text) 
**************************************************************************************************/
AS

SET NOCOUNT ON

	--------------------------------------
	--Declare and set variables
	--------------------------------------
		       
/*test	

DECLARE @PropertyID INT
    
SET @PropertyID = 46124

*/	

DECLARE @STARTDATE DATE
	   ,@ENDDATE DATE
	   ,@TSQL varchar(8000)



SET @StartDate = DATEADD(mm,-0,DATEADD(mm,DATEDIFF(mm,0,GETDATE()-1),0))

SET @EndDate = DATEADD(d, -1, GETDATE())

  

SET @TSQL = 'SELECT * FROM OPENQUERY(ORACLEAPTG, ''SELECT edi.EMAIL
															,SUM(CASE edi.DELIVERED
															      WHEN ''''Y'''' THEN 1 ELSE 0
															      END) as TotalDelivered
															,SUM(CASE edi.OPENED
															      WHEN ''''Y'''' then 1 ELSE 0
															      END) as TotalOpened
															,SUM(CASE edi.REPLIED
															      WHEN ''''Y'''' then 1 ELSE 0
															      END) as TotalReply
												FROM ( 
														SELECT cl.LeadID, cl.ListingID, cl.When_Entered, cl.Status
														FROM  common.allleads cl 
														WHERE cl.When_Entered BETWEEN to_date(''''' + CONVERT(VARCHAR(15), @STARTDATE, 101) + ''''',''''MM/DD/YYYY'''') AND 
															to_date(''''' + CONVERT(VARCHAR(15), @ENDDATE, 101) + ''''',''''MM/DD/YYYY'''')
														    AND cl.status=1
													) l
												JOIN COMMON.EDIALOG_LEADINFO edi 
														ON edi.leadid=l.leadid
												JOIN PROPERTIES.PROPLISTINGS pl 
                                                        ON  pl.ListingID = l.ListingID
												WHERE edi.email is not null
												AND LTRIM (RTRIM (edi.mailingname)) IN (''''B2B_Email_Lead_Text'''',''''B2B_Email_Leads_HTML'''',''''B2B_Lead_Details_Email'''',''''B2B_Lead_Details_Email_Text'''')
													AND l.When_Entered BETWEEN to_date(''''' + CONVERT(VARCHAR(15), @STARTDATE, 101) + ''''',''''MM/DD/YYYY'''') AND 
													to_date(''''' + CONVERT(VARCHAR(15), @ENDDATE, 101) + ''''',''''MM/DD/YYYY'''')
									            AND pl.PropertyID = '+ CAST(@PropertyID AS VARCHAR(30)) +'
												GROUP BY edi.EMAIL
										'')'

--PRINT @TSQL

IF (SELECT OBJECT_ID(N'tempdb..#edialogsum')) IS NOT NULL
	DROP TABLE #edialogsum

CREATE TABLE #edialogsum (
Email			VARCHAR(200)
,TotalDelivered	INT		
,TotalOpened	INT
,TotalReply		INT

)

INSERT INTO #edialogsum
EXEC (@TSQL)


	--------------------------------------
	--Select out results
	--------------------------------------
SELECT e.Email
	,e.TotalDelivered
	,e.TotalOpened
	,e.TotalReply
FROM #edialogsum AS e





GO
/****** Object:  StoredProcedure [Reports].[rpt_SalesForcePropertyADItemDesc]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [Reports].[rpt_SalesForcePropertyADItemDesc] 
(@PropertyID INT
)
AS /******************************************************************************************
*
* Name:	Reports.rpt_SalesForcePropertyADItemDesc
*
* Desc:	Used by property performance Detail
*
* Test:	EXEC Reports.rpt_SalesForcePropertyADItemDesc  100686
*
* Hist: 01  02/18/2015  Julie DiPietro      Modified PropertyADItemDesc to use AGPropertyId for SalesForce report
******************************************************************************************/

    SET NOCOUNT ON
-----------------------------------------------------------------------------------------
--Declare and set variables
-----------------------------------------------------------------------------------------
DECLARE @SQL VARCHAR (4000)

--DECLARE @PropertyID INT

--SET @PropertyID = 100044422

-----------------------------------------------------------------------------------------
--Create temp table
-----------------------------------------------------------------------------------------
CREATE TABLE #Items
(Website VARCHAR (5)
,PropertyItemDesc VARCHAR(4000)
)
-------------------------------------------------------------------------------------------
--Get AG Items for the selected listing and dump into temp table
-------------------------------------------------------------------------------------------  
INSERT INTO #Items
    SELECT  'AG' AS Website
           ,PropertyItemDesc = dbautility.dbo.fn_rtrim((
                                                      SELECT DISTINCT
                                                                UPPER(itemdescription) + ',' AS [data()]
                                                      FROM      ApartmentGuide.Dimension.MaxPropertyListingPoints
                                                      WHERE     PropertyId = @PropertyID
                                                     FOR
                                                      XML PATH('')
                                                     ),',')

	

-------------------------------------------------------------------------------------------
--Get Rent Items for the selected listing and dump into temp table
-------------------------------------------------------------------------------------------  
SET @SQL = 
'SELECT ''Rent'' AS Website
,PropertyItemDesc =   dbautility.dbo.fn_rtrim((
                                 SELECT UPPER(d.OptionType) + '','' AS [data()]
                                 FROM   
								 (
                                         SELECT *
                                         FROM   OPENQUERY(ORACLEAPTG,''SELECT pl.ListingID
																		,ot.OptionType
																		FROM Properties.PropListings pl    
																		JOIN Properties.PropListOptions plo
																			ON pl.ListingID = plo.ListingID
																				AND pl.PropertyID = plo.PropertyID
																			JOIN Properties.OptionTypes ot
																				ON plo.OptionTypeID = ot.OptionTypeID
																		WHERE pl.IsActiveRent = 1
																			AND pl.PropertyID = '+ CAST(@PropertyID AS VARCHAR(20))+'
																			AND plo.IsActive = 1
																			AND plo.StartDate <= TRUNC(SYSDATE) AND plo.EndDate >= TRUNC(SYSDATE)
																			AND ot.OptionTypeID IN (300,302,303,304)
															'') AS o
                                        ) AS d
                                FOR
                                 XML PATH('''')
                                ),'','')'

INSERT INTO #Items
EXEC (@SQL)

-------------------------------------------------------------------------------------------
--Select out final result set
-------------------------------------------------------------------------------------------  
SELECT i.Website
,i.PropertyItemDesc
FROM #Items AS i

 SET NOCOUNT OFF







GO
/****** Object:  StoredProcedure [Reports].[rpt_SalesForcePropertyContentScorecard]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Reports].[rpt_SalesForcePropertyContentScorecard]
	(
	@PropertyID INT
	)

AS

/*************************************************************************************************
*
* Name:	Reports.rpt_SalesForcePropertyContentScorecard
*
* Desc:	Property Level Content Scorecard
*
* Test:	EXEC Reports.rpt_SalesForcePropertyContentScorecard '84792'
*		EXEC Reports.rpt_SalesForcePropertyContentScorecard '100042435'
*		EXEC Reports.rpt_SalesForcePropertyContentScorecard '100686'
*
* Note: Modified Reports_rpt_ManagementContentScorecard to use AG PropertyID for property level report
*
* Hist:	01	03/10/2015		Julie DiPietro						Modified Reports_rpt_ManagementContentScorecard to use AG PropertyID

**************************************************************************************************/


SET NOCOUNT ON

---------------------------------
--Drop temp tables if NOT NULL
---------------------------------
IF OBJECT_ID('tempdb..#CR3Data') IS NOT NULL
	BEGIN
		DROP TABLE #CR3Data
	END		  

IF OBJECT_ID('tempdb..#NationalListings') IS NOT NULL
	BEGIN
		DROP TABLE #NationalListings
	END	



----------------------------------------------------------------------------------------------------------------
--Declare and set variables
----------------------------------------------------------------------------------------------------------------


DECLARE @ListingID INT  



---------------------------------
--Pull in CR3 Data
---------------------------------
CREATE TABLE #CR3Data
(ListingID INT
,CR3Reviews INT)

DECLARE @SQL NVARCHAR (4000)

SET @SQL = N'SELECT o.LISTINGID
				,o.CR3REVIEWS
		   FROM OPENQUERY(ORACLEAPTG,''SELECT LISTINGID
										,CR3Reviews
										FROM PROPERTIES.PROPLISTINGS pl
										JOIN
											(
											SELECT PROPERTYID
											,COUNT(ReviewID) AS CR3Reviews  
											FROM RATING.REVIEW_INFO_VIEW
											WHERE PUBLISHED  = 1
											GROUP BY PROPERTYID
											) y
										ON pl.PROPERTYID = y.PROPERTYID''
							) AS o'
--PRINT @SQL

INSERT INTO #CR3Data
EXECUTE sp_executeSQL @SQL

----------------------------------------------------------------------
--Grab base dataset (all active listings) and dump into temp table
----------------------------------------------------------------------

SELECT x.ListingID
	,x.AGPropertyID
	,x.NumActivePhotos
	,x.HasActiveHDPhotos
	,x.HasCommunityVideoURL
	,x.HasHDVideoURL
	,x.HasVirtualTour
	,x.HasHDTourURL
	,x.NumActiveFloorPlans
	,x.HasLinkedFloorPlans
	,x.HasActiveHDFloorPlans
	,x.HasLinked3DFloorPlans 
	,x.HasLinkedRoomPlanners 
	,x.HasMobileDeal         
	,x.NumActiveAmenities
	,x.NumCertRatingsReviews
	,x.HasCouponActive
	,x.HasPricing
	,x.HasOfficeHours
	,x.DescriptionLength
	,x.LastUpdate
	,x.IsActiveAG
	,x.IsActiveRent
INTO #NationalListings
FROM (
		SELECT ar.ListingID
		,ar.AGPropertyID
		,MAX(ar.ActivePhotos)														AS NumActivePhotos
		,MAX(ar.HDActivePhotosFulfilled)											AS HasActiveHDPhotos
		,MAX(ar.CommunityVideoURLFulfilled)											AS HasCommunityVideoURL
		,MAX(ar.HDVideoURLFulfilled)												AS HasHDVideoURL
		,MAX(ar.VirtualTourFulfilled)												AS HasVirtualTour
		,MAX(ar.HDTourURLFulfilled)													AS HasHDTourURL
		,MAX(ar.ActiveFloorPlans)													AS NumActiveFloorPlans
		,MAX(ar.LinkedFloorPlanFulfilled)											AS HasLinkedFloorPlans
		,MAX(ar.HDActiveFloorPlansFulfilled)										AS HasActiveHDFloorPlans
		,MAX(ar.Linked3DFloorPlanFulfilled)                                         AS HasLinked3DFloorPlans 
		,MAX(ar.LinkedRoomPlannerFulfilled)                                         AS HasLinkedRoomPlanners 
		,MAX(ar.MobileDealFulfilled)                                                AS HasMobileDeal         
		,MAX(ar.ActiveAmenities)													AS NumActiveAmenities
		,MAX(ISNULL(cd.CR3Reviews,0))												AS NumCertRatingsReviews
		,MAX(ar.CouponActiveOnSite)													AS HasCouponActive
		,MAX(ar.ShowPricing)														AS HasPricing
		,MAX(ar.ShowOfficeHours)													AS HasOfficeHours
		,MAX(ar.ListingDescriptionLength)											AS DescriptionLength
		,MAX(ar.LastUpdateYMDID)													AS LastUpdate
		,MAX(CASE WHEN ar.Website = 'AG' AND ar.StatusID = 1 THEN 1 ELSE 0 END)		AS IsActiveAG
		,MAX(CASE WHEN ar.Website = 'Rent' AND ar.StatusID = 1 THEN 1 ELSE 0 END)	AS IsActiveRent
		FROM ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS ar
		LEFT OUTER JOIN #CR3Data AS cd
			ON ar.ListingID = cd.ListingID
		WHERE ar.StatusID = 1 
		GROUP BY  ar.ListingID 
			     ,ar.AGPropertyID
		HAVING MAX(StatusID) = 1 
	) AS x

------------------------------------------------------
--This select gets the final results. It pulls from
--a series of subqueries to get scores.
------------------------------------------------------         

SELECT  c.ListingID
    ,c.AGPropertyID
	,c.RentPropertyID
	,c.MgtCoID
	,c.PropertyName
	,c.CBSACode
	,c.CBSAName
	,c.NumActivePhotos
	,c.HasActiveHDPhotos
	,c.HasCommunityVideoURL
	,c.HasHDVideoURL
	,c.HasVirtualTour
	,c.HasHDTourURL
	,c.NumActiveFloorPlans
	,c.HasLinkedFloorPlans
	,c.HasActiveHDFloorPlans
    ,c.HasLinked3DFloorPlans 
    ,c.HasLinkedRoomPlanners 
    ,c.HasMobileDeal         
	,c.NumActiveAmenities
	,c.NumCertRatingsReviews
	,c.HasCouponActive
	,c.HasPricing
	,c.HasOfficeHours
	,c.DescriptionLength
	,CAST(CONVERT(VARCHAR(8),c.LastUpdate,101) AS DATE) AS LastUpdate
	,c.IsActiveAG
	,c.IsActiveRent
	,c.OverallScore
	,c.q_OverallScore
	,c.q_NumActivePhotos
	,c.q_HasActiveHDPhotos
	,c.q_HasHDVideoURL
	,c.q_HasHDTourURL
	,c.q_NumActiveFloorPlans
	,c.q_HasLinkedFloorPlans
	,c.q_HasActiveHDFloorPlans
    ,c.q_HasLinked3DFloorPlans 
    ,c.q_HasLinkedRoomPlanners 
    ,c.q_HasMobileDeal         
	,c.q_NumActiveAmenities
	,c.q_NumCertRatingsReviews
	,c.q_HasCouponActive
	,c.q_HasPricing
	,c.q_HasOfficeHours
	,c.q_DescriptionLength
	,c.q_LastUpdate
FROM
		(
		--------------------------------------------------------------------------------------------------------------------------------
		--calculate overall score using the number of quintile values - so if you add/remove quintiles above, change the number below!
		--14 is the number of quintiles: get percentile score by adding up quintile values and dividing into highest possible score
		--------------------------------------------------------------------------------------------------------------------------------
		SELECT b.ListingID
		,b.AGPropertyID
		,l.RentPropertyID
		,l.MgtCoID
		,l.PropertyName
		,zc.CBSACode
		,zc.CBSAName
		,b.NumActivePhotos
		,b.HasActiveHDPhotos
		,b.HasCommunityVideoURL
		,b.HasHDVideoURL
		,b.HasVirtualTour
		,b.HasHDTourURL
		,b.NumActiveFloorPlans
		,b.HasLinkedFloorPlans
		,b.HasActiveHDFloorPlans
        ,b.HasLinked3DFloorPlans 
        ,b.HasLinkedRoomPlanners 
        ,b.HasMobileDeal         
		,b.NumActiveAmenities
		,b.NumCertRatingsReviews
		,b.HasCouponActive
		,b.HasPricing
		,b.HasOfficeHours
		,b.DescriptionLength
		,b.LastUpdate
		,b.IsActiveAG
		,b.IsActiveRent
		,b.q_NumActivePhotos
		,b.q_HasActiveHDPhotos
		,b.q_HasHDVideoURL
		,b.q_HasHDTourURL
		,b.q_NumActiveFloorPlans
		,b.q_HasLinkedFloorPlans
		,b.q_HasActiveHDFloorPlans
        ,b.q_HasLinked3DFloorPlans 
        ,b.q_HasLinkedRoomPlanners 
        ,b.q_HasMobileDeal         
		,b.q_NumActiveAmenities
		,b.q_NumCertRatingsReviews
		,b.q_HasCouponActive
		,b.q_HasPricing
		,b.q_HasOfficeHours
		,b.q_DescriptionLength
		,b.q_LastUpdate
		,q_OverallScore = NTILE(5) OVER (ORDER BY ROUND(100*((q_NumActivePhotos + q_HasActiveHDPhotos + q_HasHDVideoURL + q_HasHDTourURL + q_NumActiveFloorPlans + q_HasLinkedFloorPlans + q_HasActiveHDFloorPlans + q_HasLinked3DFloorPlans + q_HasLinkedRoomPlanners + q_HasMobileDeal + q_NumActiveAmenities + q_NumCertRatingsReviews + q_HasCouponActive + q_HasPricing + q_HasOfficeHours + q_DescriptionLength + q_LastUpdate) / CAST((17*5) AS DECIMAL (15,4))),0)) 
		,OverallScore = ROUND(100*((q_NumActivePhotos + q_HasActiveHDPhotos + q_HasHDVideoURL + q_HasHDTourURL + q_NumActiveFloorPlans + q_HasLinkedFloorPlans + q_HasActiveHDFloorPlans + q_HasLinked3DFloorPlans + q_HasLinkedRoomPlanners + q_HasMobileDeal + q_NumActiveAmenities + q_NumCertRatingsReviews + q_HasCouponActive + q_HasPricing + q_HasOfficeHours + q_DescriptionLength + q_LastUpdate) / CAST((17*5) AS DECIMAL (15,4))),0)
		FROM
				(
				----------------------------------------------------
				--add Quintiles based on all listings nationally, i.e. before filtering the Listings
				---------------------------------------------------- 
				SELECT a.ListingID
				,a.AGPropertyID
				,a.NumActivePhotos
				,a.HasActiveHDPhotos
				,a.HasCommunityVideoURL
				,a.HasHDVideoURL
				,a.HasVirtualTour
				,a.HasHDTourURL
				,a.NumActiveFloorPlans
				,a.HasLinkedFloorPlans
				,a.HasActiveHDFloorPlans
				,a.HasLinked3DFloorPlans
				,a.HasLinkedRoomPlanners
				,a.HasMobileDeal
				,a.NumActiveAmenities
				,a.NumCertRatingsReviews
				,a.HasCouponActive
				,a.HasPricing
				,a.HasOfficeHours
				,a.DescriptionLength
				,a.LastUpdate
				,a.IsActiveAG
				,a.IsActiveRent
				,NTILE(5) OVER (ORDER BY a.NumActivePhotos)																AS q_NumActivePhotos
				,CASE a.HasActiveHDPhotos WHEN 0 THEN 1 ELSE 5 END														AS q_HasActiveHDPhotos
				,CASE WHEN a.HasCommunityVideoURL = 0 AND a.HasHDVideoURL = 0 THEN 1 --1 if neither type of video
					  WHEN a.HasCommunityVideoURL = 1 AND a.HasHDVideoURL = 0 THEN 3 --3 if only community video
							ELSE 5 --5 if hd video regardless of whether it has community video
				END                                                                                                     AS q_HasHDVideoURL
				,CASE WHEN a.HasVirtualTour = 0 AND a.HasHDTourURL = 0 THEN 1 --1 if neither type of tour
					  WHEN a.HasVirtualTour = 1 AND a.HasHDTourURL = 0 THEN 3 --3 if only virtual tour
							ELSE 5 --5 if hd tour regardless of whether it has virtual tour
				END                                                                                                     AS q_HasHDTourURL
				,NTILE(5) OVER (ORDER BY a.NumActiveFloorPlans)															AS q_NumActiveFloorPlans
				,CASE a.HasLinkedFloorPlans   WHEN 0 THEN 1 ELSE 5 END													AS q_HasLinkedFloorPlans
				,CASE a.HasActiveHDFloorPlans WHEN 0 THEN 1 ELSE 5 END													AS q_HasActiveHDFloorPlans
				,CASE a.HasLinked3DFloorPlans WHEN 0 THEN 1 ELSE 5 END													AS q_HasLinked3DFloorPlans --new
				,CASE a.HasLinkedRoomPlanners WHEN 0 THEN 1 ELSE 5 END													AS q_HasLinkedRoomPlanners --new
				,CASE a.HasMobileDeal WHEN 0 THEN 1 ELSE 5 END													        AS q_HasMobileDeal         --new
				,NTILE(5) OVER (ORDER BY a.NumActiveAmenities)															AS q_NumActiveAmenities
				,NTILE(5) OVER (ORDER BY a.NumCertRatingsReviews)														AS q_NumCertRatingsReviews
				,CASE a.HasCouponActive       WHEN 0 THEN 1 ELSE 5 END													AS q_HasCouponActive
				,CASE a.HasPricing            WHEN 0 THEN 1 ELSE 5 END													AS q_HasPricing
				,CASE a.HasOfficeHours        WHEN 0 THEN 1 ELSE 5 END													AS q_HasOfficeHours
				,NTILE(5) OVER (ORDER BY a.DescriptionLength)															AS q_DescriptionLength
				,NTILE(5) OVER (ORDER BY a.LastUpdate)																	AS q_LastUpdate
				FROM #NationalListings AS a
				) AS b
JOIN 
		(
        SELECT  dl.ListingID
			   ,dl.AGPropertyID
               ,dl.RentPropertyID
               ,dl.MgtCoID
               ,dl.MgtCoName
			   ,dl.PropertyName
               ,dl.ZipCode
        FROM    ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
        GROUP BY dl.ListingID
			   ,dl.AGPropertyID
               ,dl.RentPropertyID
               ,dl.MgtCoID
               ,dl.MgtCoName
			   ,dl.PropertyName
               ,dl.ZipCode
		) AS l
		ON b.AGPropertyID = l.AGPropertyID
JOIN DBAUtility.dbo.ZipCBSA AS zc
	ON l.ZipCode = zc.ZIPCode
		) AS c
WHERE c.AGPropertyID = @PropertyID
	AND (c.IsActiveAG = 1
		 OR c.IsActiveRent = 1
		 )
		
ORDER BY c.OverallScore

SET NOCOUNT OFF






GO
/****** Object:  StoredProcedure [Reports].[rpt_SalesForcePropertyEmailLeads]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE [Reports].[rpt_SalesForcePropertyEmailLeads] (@PropertyID INT)
/*************************************************************************************************
*
* Name:	Reports.rpt_SalesForcePropertyEmailLeads
*
* Desc:	This is the new version of the Property Email Leads report. Modified to use AG PropertyID
*
* Test:	EXEC Reports.rpt_SalesForcePropertyEmailLeads  '100035881'
* Test: EXEC Reports.rpt_SalesForcePropertyEmailLeads  '84792'
* Test: EXEC Reports.rpt_SalesForcePropertyEmailLeads  '87235'
*
* Note: This is a simplified version that includes Edialog information, but shows not available for 
* any lead without it to lessen the chance of differentiating AG from Rent leads. Modified to use AG PropertyID
*
* Hist:	01	02/27/2015		Julie DiPietro			

**************************************************************************************************/
AS 
SET NOCOUNT ON

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
DECLARE @TrackDate DATETIME
   ,@LengthInSeconds INT
   ,@DatabaseName VARCHAR(128)
                
SET @TrackDate = GETDATE()
SET @LengthInSeconds = 0
SET @DatabaseName = DB_NAME()        
		
EXEC DBAUtility.dbo.pr_Logging_StoredProcsNoTemp 
    @DatabaseName = @DatabaseName
   , -- varchar(128)
    @ProcName = 'Reports.rpt_SalesForcePropertyEmailLeads'
   , -- varchar(128)
    @StepName = 'Execute Procedure'
   , -- varchar(128)
    @VariableStates = ''
   , -- varchar(500)
    @LengthInSeconds = @LengthInSeconds
   , -- int
    @Comments = 'Execute Procedure'; -- varchar(500)

	--------------------------------------
	--Declare and set variables
	--------------------------------------
		       
/*test		

DECLARE  @PropertyID INT
			

Select @PropertyID = 87235

*/


DECLARE @TSQL VARCHAR(8000)
   ,@StartYMDID INT
   ,@EndYMDID INT
   ,@StartDate DATETIME
   ,@EndDate DATETIME
   ,@ListingID INT
            

SET @Listingid = (
                  SELECT DISTINCT
                            ListingID
                  FROM      ApartmentGuide.Dimension.AGRentCombinedDimensionListings
                  WHERE     AGPropertyID = @PropertyID
                 )

SET @StartYMDID = CAST(CONVERT(VARCHAR(8),DATEADD(mm,-0,DATEADD(mm,DATEDIFF(mm,0,GETDATE() - 1),0)),112) AS INT)
SET @EndYMDID = CAST(CONVERT(VARCHAR(8),GETDATE() - 1,112) AS INT)

SET @StartDate = CONVERT(DATETIME,CONVERT(VARCHAR(10),@StartYMDID))
SET @EndDate = CONVERT(DATETIME,CONVERT(VARCHAR(10),@EndYmDID))

SET @TSQL = 'SELECT * FROM OPENQUERY(ORACLEAPTG, ''SELECT cl.listingid,
                      cl.when_entered,
                      edi.LEADID, 
					  edi.EMAIL || CASE WHEN INSTR(UPPER (edi.mailingname), ''''TEXT'''') > 0 THEN ''''(text)''''
										WHEN INSTR(UPPER (edi.mailingname), ''''TEXT'''') = 0 AND LENGTH (edi.mailingname) > 0 THEN ''''(html)''''
										ELSE '''''''' END ResponseEmail,
                      edi.DELIVERED,
                      edi.DELIVERTIME,
                      edi.OPENED,
                      edi.OPENTIME,
                      edi.REPLIED,
                      edi.REPLYTIME
                  FROM COMMON.EDIALOG_LEADINFO edi
                  JOIN COMMON.ALLLEADS cl
                    ON edi.leadid = cl.leadid
                  WHERE LTRIM (RTRIM (edi.mailingname)) IN
                    (''''B2B_Email_Lead_Text'''',''''B2B_Email_Leads_HTML'''')
                    AND cl.When_Entered BETWEEN to_date(''''' + CONVERT(VARCHAR(15),@STARTDATE,101) + ''''',''''MM/DD/YYYY'''') AND 
                    to_date(''''' + CONVERT(VARCHAR(15),@ENDDATE,101) + ''''',''''MM/DD/YYYY'''')
					AND cl.Status = 1
                    AND cl.listingid = ' + CAST(@ListingID AS VARCHAR(30)) + '

                  union

                  SELECT tp.listingid,
                      tp.whenentered,
					  null as ResponseEmail,
                      null as LEADID,
                      null as DELIVERED,
                      null as DELIVERTIME,
                      null as OPENED,
                      null as OPENTIME,
                      null as REPLIED,
                      null as REPLYTIME
                  FROM COMMON.thirdpartyfeedleads tp
                  WHERE tp.WhenEntered BETWEEN to_date(''''' + CONVERT(VARCHAR(15),@STARTDATE,101) + ''''',''''MM/DD/YYYY'''') AND 
                    to_date(''''' + CONVERT(VARCHAR(15),@ENDDATE,101) + ''''',''''MM/DD/YYYY'''')
                    AND tp.listingid = ' + CAST(@ListingID AS VARCHAR(30)) + '

                  union

                  SELECT rcl.listingid,
                      rcl.when_entered,
                      null as LEADID, 
					  null as ResponseEmail,
                      null as DELIVERED,
                      null as DELIVERTIME,
                      null as OPENED,
                      null as OPENTIME,
                      null as REPLIED,
                      null as REPLYTIME
                  FROM COMMON.allleads_rentcom rcl
                  WHERE rcl.When_Entered BETWEEN to_date(''''' + CONVERT(VARCHAR(15),@STARTDATE,101) + ''''',''''MM/DD/YYYY'''') AND 
                    to_date(''''' + CONVERT(VARCHAR(15),@ENDDATE,101) + ''''',''''MM/DD/YYYY'''')
                    AND rcl.listingid = ' + CAST(@ListingID AS VARCHAR(30)) + '
						'')'

--PRINT @TSQL

IF (
    SELECT  OBJECT_ID(N'tempdb..#edialog')
   ) IS NOT NULL 
    DROP TABLE #edialog


CREATE TABLE #edialog (
    LISTINGID INT
   ,WHEN_ENTERED DATETIME
   ,LEADID INT
   ,RESPONSEEMAIL VARCHAR(200)
   ,DELIVERED VARCHAR(5)
   ,DELIVERTIME DATETIME
   ,OPENED VARCHAR(5)
   ,OPENTIME DATETIME
   ,REPLIED VARCHAR(5)
   ,REPLYTIME DATETIME)

INSERT  INTO #edialog
        EXEC (@TSQL)

	--------------------------------------
	--Select out results
	--------------------------------------
SELECT  DISTINCT
        ar.ListingID
       ,dl.AGPropertyID AS PropertyID
       ,ar.LeadID
       ,ar.WhenEntered
       ,CONCAT(CAST(ar.WhenEntered AS DATE),' ',LTRIM(STUFF(RIGHT(CONVERT(CHAR(26),ar.WhenEntered,109),14),6,7,' '))) AS LeadDate
       ,ar.YMDID
       ,ar.Email AS ProspectEmail
       ,CONCAT(ar.FirstName,' ',ar.LastName) AS LeadName
       ,ISNULL(COALESCE(ar.DayPhone,ar.NightPhone),0) AS Phone
       ,ar.MoveMonth
       ,ar.Bedrooms
       ,ar.Bathrooms
       ,ISNULL(ar.Bedrooms,'') + CASE WHEN ar.Bathrooms IS NULL THEN ''
                                      ELSE '/'
                                 END + ISNULL(ar.Bathrooms,'') AS BedBath
       ,ar.Comments
       ,e.RESPONSEEMAIL
       ,e.DELIVERTIME
       ,e.OPENTIME
       ,e.REPLYTIME
FROM    ApartmentGuide.Fact.AGRentWebFormLeads AS ar
LEFT JOIN #edialog AS e
        ON ar.LeadID = e.LEADID
           AND ar.ListingID = e.LISTINGID
JOIN    ApartmentGuide.Dimension.AGRentCombinedDimensionListings dl
        ON ar.ListingID = dl.ListingID
WHERE   ar.YMDID BETWEEN @StartYMDID AND @EndYMDID
        AND dl.AGPropertyID = @PropertyID
        AND ar.Status = 1
ORDER BY LeadDate DESC

SET NOCOUNT OFF









GO
/****** Object:  StoredProcedure [Reports].[rpt_SalesForcePropertyLeadContacts]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [Reports].[rpt_SalesForcePropertyLeadContacts] 
(@PropertyID INT)

AS
SET NOCOUNT ON

/***********************************************************************************************************************
* Name:    Reports.rpt_SalesForcePropertyLeadContacts
* Desc:    Proc grabs the lead contact by lead type for a specific property
* -----------------------------------------------------------------------------------------
* Test:    EXEC Reports.rpt_SalesForcePropertyLeadContacts 100044422
*		   EXEC Reports.rpt_SalesForcePropertyLeadContacts 100686
*		   EXEC Reports.rpt_SalesForcePropertyLeadContacts 84792
* -----------------------------------------------------------------------------------------
* Notes:
* Hist:    01  02/18/2015    Julie DiPietro      Modified PropertyLeadContacts to use AGPropertyId for SalesForce report

************************************************************************************************************************/
-----------------------------------------------------------------------------------------
--Declare and set variables
-----------------------------------------------------------------------------------------
DECLARE @SQL VARCHAR (4000)

--DECLARE @PropertyID INT

--SET @PropertyID = 84792
-----------------------------------------------------------------------------------------
--Create temp table
-----------------------------------------------------------------------------------------
	--BEGIN TRY
	--	DROP TABLE #Items  
	--END TRY
	--BEGIN CATCH
	--END CATCH	

CREATE TABLE #Items
(Website VARCHAR (5)
,PropertyItemDesc VARCHAR(4000)
)
-------------------------------------------------------------------------------------------
--Get AG Items for the selected listing and dump into temp table
-------------------------------------------------------------------------------------------  
INSERT INTO #Items
    SELECT  'AG' AS Website
           ,PropertyItemDesc = dbautility.dbo.fn_rtrim((
                                                      SELECT DISTINCT
                                                                UPPER(itemdescription) + ',' AS [data()]															
                                                      FROM      ApartmentGuide.Dimension.MaxPropertyListingPoints
                                                      WHERE     PropertyID = @PropertyID
                                                     FOR
                                                      XML PATH('')
                                                     ),',')

	

-------------------------------------------------------------------------------------------
--Get Rent Items for the selected listing and dump into temp table
-------------------------------------------------------------------------------------------  
SET @SQL = 
'SELECT ''Rent'' AS Website
,PropertyItemDesc =   dbautility.dbo.fn_rtrim((
                                 SELECT UPPER(d.OptionType) + '','' AS [data()]
                                 FROM   
								 (
                                         SELECT *
                                         FROM   OPENQUERY(ORACLEAPTG,''SELECT pl.ListingID
																		,ot.OptionType
																		FROM Properties.PropListings pl    
																		JOIN Properties.PropListOptions plo
																			ON pl.ListingID = plo.ListingID
																				AND pl.PropertyID = plo.PropertyID
																			JOIN Properties.OptionTypes ot
																				ON plo.OptionTypeID = ot.OptionTypeID
																		WHERE pl.IsActiveRent = 1
																			AND pl.PropertyID = '+ CAST(@PropertyID AS VARCHAR(20))+'
																			AND plo.IsActive = 1
																			AND plo.StartDate <= TRUNC(SYSDATE) AND plo.EndDate >= TRUNC(SYSDATE)
																			AND ot.OptionTypeID IN (300,302,303,304)
															'') AS o
                                        ) AS d
                                FOR
                                 XML PATH('''')
                                ),'','')'

INSERT INTO #Items
EXEC (@SQL)	
----------------------------------------------------------------
 -- Select out final result set
----------------------------------------------------------------
    SELECT list.Website
		   ,list.ListingID
		   ,list.AGPropertyID
		   ,i.PropertyItemDesc
		   ,zc.CBSACode            
           ,zc.CBSAName 
           ,list.PropertyName
           ,list.PropertyAddress + ' ' + list.PropertyCity + ' ' + list.PropertyState + ' ' + list.ZipCode	AS PropAddress 
           ,list.MgtCoName																					AS MgtCompany
		   ,list.MgtCoID
           ,list.WebTollFree
           ,list.LocalTestNumber
           ,list.WebTarget
           ,ISNULL(AGCTollFree,ASGTollFree)																	AS AGPrintTollFree
           ,ISNULL(AGCTarget,ASGTarget)																		AS AGPrintTarget  													
           ,CASE WHEN list.UnusedLeadEmail <> ''
                      AND list.LeadFax <> '' THEN list.UnusedLeadEmail + ', ' + list.LeadFax
                 ELSE CASE WHEN list.UnusedLeadEmail <> '' THEN list.UnusedLeadEmail
                           ELSE list.LeadFax
                      END
            END																								AS LeadContact
           ,CASE WHEN list.LeadEmailWithType <> ''
                      AND list.LeadFax <> '' THEN list.LeadEmailWithType + ', ' + list.LeadFax
                 ELSE CASE WHEN list.LeadEmailWithType <> '' THEN list.LeadEmailWithType
                           ELSE list.LeadFax
                      END
            END																								AS LeadContactWithType
    FROM    ApartmentGuide.dimension.AGRentCombinedDimensionListings AS list
    LEFT OUTER JOIN DBAUtility.dbo.ZipCBSA AS zc
            ON list.ZipCode = zc.ZIPCode
	LEFT OUTER JOIN #Items AS i
			ON list.Website = i.Website
    WHERE   list.AGPropertyID = @PropertyID
		AND list.StatusID = 1


ORDER BY Website                        

SET NOCOUNT OFF








GO
/****** Object:  StoredProcedure [Reports].[rpt_SalesForcePropertyLeadSummary]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Reports].[rpt_SalesForcePropertyLeadSummary] (
	@AGPropertyID INT
   ) 

/****************************************************************************************************************************************************************
* Name:	Reports.rpt_SalesForcePropertyLeadSummary
*
* Desc:	The detail data for the Dales Froce Property Lead Summary report by CBSA
*
* Test:	EXEC Reports.[rpt_SalesForcePropertyLeadSummary]  90542
*		
* Note:
*
* Hist:	01	Julie DiPietro  02/18/2015 Modified PropertyLeadSummary stored proc to use AGPropertyId for SalesForce 

****************************************************************************************************************************************************************/
AS 
SET NOCOUNT ON

BEGIN
	-------------------------------------------------------------------------------------------------------------------
	--Declare and set variables
	-------------------------------------------------------------------------------------------------------------------

	/*test					
	DECLARE	@AGPropertyID INT
			,@StartDate	DATETIME
			,@EndDate	DATETIME
		       

	SELECT	@AGPropertyID = 90542
			--,@StartDate = '01/01/2014'
			--,@EndDate = '01/31/2015'

*/

	DECLARE	@iStartYMDID INT
	   ,@iEndYMDID INT

		
	
	SELECT @iStartYMDID = CAST(CONVERT(VARCHAR(8),DATEADD(mm,-2,DATEADD(mm,DATEDIFF(mm,0,GETDATE()-1),0)),112) AS INT)
					  
		  ,@iEndYMDID = CAST(CONVERT(VARCHAR(8),GETDATE() - 1,112) AS INT)



	-------------------------------------------------------------------------------------------------------------------
	-- Find the last date of each month in select date range
	-------------------------------------------------------------------------------------------------------------------
	--BEGIN TRY
	--	DROP TABLE #d  
	--END TRY
	--BEGIN CATCH
	--END CATCH	

	SELECT	d.monthEndYmdID
	INTO	#d
	FROM	(
			 SELECT DISTINCT
					monthendymdid
			 FROM	dbautility.dimension.dates
			 WHERE	ymdid BETWEEN @iStartYmdid AND @iEndYmdid
					AND monthendymdid BETWEEN @iStartYmdid AND @iEndYmdid
			 UNION
			 SELECT	@iEndYmdid
			) d
        
	-------------------------------------------------------------------------------------------------------------------        
	--Find all the ListingIDs for the Property selected. 
	-------------------------------------------------------------------------------------------------------------------
	--BEGIN TRY
	--	DROP TABLE #lim  
	--END TRY
	--BEGIN CATCH
	--END CATCH	

	SELECT  DISTINCT
			dl.ListingID
		   ,dl.AGPropertyID
		   ,zc.CBSACode
	INTO	#lim
	FROM	ApartmentGuide.Dimension.AGRentCombinedDimensionListings AS dl
	JOIN 	DBAUtility.dbo.ZipCBSA AS zc
			ON dl.ZipCode = zc.ZIPCode
	WHERE	dl.AGPropertyID = @AGPropertyID
			
        
	-------------------------------------------------------------------------------------------------------------------   
	--Create a series of CTEs for Leads, Tier and Cost.
	-------------------------------------------------------------------------------------------------------------------           
	;
	WITH	Leads
			  AS (
				  SELECT	MIN(dl.ListingId) AS ListingId
						   ,CASE 
							WHEN ml.website = 'AG' THEN max(ml.ListingStatusId)
							ELSE 0
							END									AS AGListingStatusID
						   ,CASE 
							WHEN ml.website = 'Rent' THEN max(ml.ListingStatusId)
							ELSE 0
							END									AS RentListingStatusID
						   ,ml.AGPropertyID
						   ,ml.YearMonth AS yearMonthInt
						   ,ml.Website
						   ,d.MonthEndYMDID
						   ,DATENAME(MONTH,CAST(ml.YearMonth AS VARCHAR(6)) + '01') + ' ' + LEFT(ml.YearMonth,4) AS MonthAndYear
						   ,SUM(ml.AllLeads) AS AllLeads
						   ,SUM(ml.AGCPrintConnectedCalls)		AS AGPrintPhoneLeads
						   ,SUM(ml.InternetPhoneLeads_NoMobile) AS AGInternetPhoneLeads
						   ,SUM(ml.InternetEmailLeads_NoMobile) AS AGInternetEmailLeads
						   ,SUM(ml.MobileCalls)					AS MobileCalls
						   ,SUM(ml.MobileEmails)				AS MobileEmails
						   ,SUM(ml.ThirdPartyFeedLeads)			AS ThirdPartyFeedLeads
						   ,SUM(ml.CraigsListConnectedCalls)	AS CraigsListConnectedCalls
						   ,SUM(ml.SitesConnectedCalls)			AS SitesConnectedCalls
						   ,SUM(ml.SitesEmailLeads)				AS SitesEmailLeads
						   ,dl.PropertyName
				  FROM		ApartmentGuide.Dimension.AGRentCombinedDimensionListings dl
				  INNER JOIN ApartmentGuide.mart.AGRentCombinedMartListings AS ml
								ON dl.listingid = ml.listingID
								AND dl.Website = ml.Website
				  INNER JOIN dbautility.dimension.dates d
							ON ml.YMDID = d.ymdid
				  WHERE		dl.AGPropertyID = @AGPropertyID
							AND ml.YMDID BETWEEN @iStartYmdid AND @iEndYmdid
				  GROUP BY	ml.AGPropertyID
				  ,ml.yearmonth
				  ,ml.Website
				  ,d.MonthEndYMDID
				  ,dl.PropertyName
				 ),
			Tier
			  AS (
				  SELECT	ml.yearmonth
						   ,d.MonthEndYmdID
						   ,ml.listingid
						   ,ml.AGPropertyID
						   ,ml.website
						   ,CASE max(ml.PlacementTier) 
							  WHEN 05 THEN 'D'
							  WHEN 10 THEN 'P'
							  WHEN 20 THEN 'G'
							  WHEN 30 THEN 'S'
							  ELSE ''
							END AS PlacementTier
						   ,ml.PrintProductPoints AS PrintProductPoints
						   ,ml.InternetProductPoints AS InternetProductPoints
						   ,ml.LegacyLoyaltyPoints AS LegacyLoyaltyPoints
						   ,ml.ContractLoyaltyPoints AS ContractLoyaltyPoints
				  FROM		ApartmentGuide.mart.AGRentCombinedMartListings AS ml --ApartmentGuide.Mart.Listings AS ml
				  JOIN 		#lim AS lim
							ON ml.listingid = lim.listingid
				  JOIN 		#d AS d
							ON ml.ymdid = d.MonthEndYmdid
				GROUP BY ml.yearmonth
						   ,d.MonthEndYmdID
						   ,ml.listingid
						   ,ml.AGPropertyID
						   ,ml.website
						   ,ml.PrintProductPoints 
						   ,ml.InternetProductPoints 
						   ,ml.LegacyLoyaltyPoints 
						   ,ml.ContractLoyaltyPoints                                         
                                         
				 )		
		-------------------------------------------------------------------------------------------------------------------   
	--Select out final result set.
	-------------------------------------------------------------------------------------------------------------------       
            
    SELECT	l.ListingID
	       ,l.AGPropertyID
		   ,max(l.AGListingStatusId) AS AGListingStatusId
		   ,max(l.RentListingStatusId) AS RentListingStatusId
		   ,CASE WHEN ISNULL(max(l.AGListingStatusId),0)+ISNULL(max(l.RentListingStatusId),0) >= 1 THEN 1 ELSE 0 END AS ListingStatusId
		   ,l.MonthAndYear
		   ,l.YearMonthInt
		   ,SUM(l.AllLeads)							AS AllLeads
		   ,0 AS MonthlyClientCost
		   ,SUM(l.AGPrintPhoneLeads)				AS AGPrintPhoneLeads
		   ,SUM(l.AGInternetPhoneLeads)				AS AGInternetPhoneLeads
		   ,SUM(l.AGInternetEmailLeads)				AS AGInternetEmailLeads
		   ,SUM(l.MobileCalls)						AS MobileCalls
		   ,SUM(l.MobileEmails)						AS MobileEmails
		   ,SUM(l.ThirdPartyFeedLeads)				AS ThirdPartyFeedLeads
		   ,SUM(L.CraigsListConnectedCalls)			AS CraigsListConnectedCalls
		   ,SUM(l.SitesConnectedCalls)				AS SitesConnectedCalls
		   ,SUM(l.SitesEmailLeads)					AS SitesEmailLeads
		   ,MAX(t.PlacementTier)					AS PlacementTier
		   ,SUM(t.PrintProductPoints)				AS PrintProductPoints
		   ,SUM(t.InternetProductPoints)			AS InternetProductPoints
		   ,SUM(t.LegacyLoyaltyPoints)				AS LegacyLoyaltyPoints
		   ,SUM(t.ContractLoyaltyPoints)			AS ContractLoyaltyPoints
		   ,l.propertyname
	FROM	Leads l
	LEFT OUTER JOIN tier t
			ON l.yearMonthInt = t.yearmonth
			   AND l.listingid = t.listingid
			   AND l.Website = t.Website
	GROUP BY l.ListingID
			,l.AGPropertyID
			,l.MonthAndYear
			,l.YearMonthInt
			,l.propertyname
	ORDER BY L.YearMonthInt 

END

SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [Reports].[rpt_Save_BasicSubOneTimeEmail]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








/*--######################################################################################
*
* Name:	[Reports].[rpt_Save_BasicSubOneTimeEmail]
*
* Desc:  Takes information and writes new record if RecID = 0, or updates data if RecID <> 0.
*
* Test:	EXEC Reports.rpt_Save_BasicSubOneTimeEmail 0,24998,'0C5AABFC-C6CB-493C-82D5-4A08AABE41CA','0C5AABFC-C6CB-493C-82D5-4A08AABE41CA','blangley@rentpath.com','This is a description',1,'blangley@rentpath.com'
* Test:	EXEC Reports.rpt_Save_BasicSubOneTimeEmail 2,24998,'0C5AABFC-C6CB-493C-82D5-4A08AABE41CA','0C5AABFC-C6CB-493C-82D5-4A08AABE41CA','blangley@rentpath.com','This is a NEW description',1,'blangley@rentpath.com'
*
* SELECT * FROM dbo.DashboardBasicSubOneTimeEmail WITH (NOLOCK) ORDER BY RecID
* SELECT * FROM dbo.DashboardBasicSubOneTimeEmailAudit WITH (NOLOCK) ORDER BY RecID, RecAuditID
*
* Hist:	01	04/01/2016	Bob Langley		Ticket 22595 - Initial Version 
--#######################################################################################*/
CREATE PROCEDURE [Reports].[rpt_Save_BasicSubOneTimeEmail]
(@RecID	int
,@PropertyID	int
,@UserGUID	uniqueidentifier
,@CreatorGUID	uniqueidentifier
,@CreatorEmail	varchar(300)
,@Description	varchar(2000)
,@Report	int
,@TO	varchar(2000)
)
AS 
BEGIN

    SET NOCOUNT ON;

	DECLARE
		@ErrorMessage					NVARCHAR(4000),
		@ErrorNumber					INT,
		@ErrorSeverity					INT,
		@ErrorState						INT,
		@ErrorLine						INT,
		@ErrorProcedure					NVARCHAR(200)



	DECLARE @userid int
	DECLARE @numrecs int
	DECLARE @recn int




	/* ===================================================================================================================== */
	--Main Section
	BEGIN TRY
		
		if @Report IS NULL
			SET @Report = 1				--default to 1  for null values



		if @RecID = 0
			BEGIN
				--brand new record, since the recid = 0
				INSERT INTO dbo.DashboardBasicSubOneTimeEmail
				([PropertyID],[UserGUID],[CreatorGUID],[CreatorEmail],[Description],[Report],[TO],[LCHost],[LCUser],[LCDate])
				VALUES(@PropertyID,@UserGUID,@CreatorGUID,@CreatorEmail,@Description,@Report,@TO, HOST_NAME(), USER, GETDATE())


				SET @recn = scope_identity()
				SET @numrecs = @@rowcount
			END
		else
			BEGIN
				BEGIN TRY
					BEGIN TRANSACTION
						-- since recid <> 0, modify that record


						--Step 1:  insert "BEFORE" record values to Audit
						INSERT INTO dbo.DashboardBasicSubOneTimeEmailAudit
						SELECT [RecID],[PropertyID],[UserGUID],[CreatorGUID],[CreatorEmail],[Description],[Report],[TO],[LCHost],[LCUser],[LCDate], 0 AS FinalDelete
						FROM dbo.DashboardBasicSubOneTimeEmail WITH (NOLOCK)
						WHERE RecID = @RecID

						--Step 2:  now update the current record to the input values
						UPDATE ds
						SET PropertyID = @PropertyID
							,UserGUID = @UserGUID
							,CreatorGUID = @CreatorGUID
							,CreatorEmail = @CreatorEmail
							,[Description] = @Description
							,Report = @Report
							,[TO] = @TO
							,LCHost = HOST_NAME()
							,LCUser = USER
							,LCDate = GETDATE()
						FROM dbo.DashboardBasicSubOneTimeEmail ds
						WHERE RecID = @RecID
		
						SET @numrecs = @@rowcount
						SET @recn = @RecID

					COMMIT TRANSACTION
				END TRY
				BEGIN CATCH
					SELECT 
						@ErrorMessage		= ERROR_MESSAGE(),
						@ErrorNumber		= ERROR_NUMBER(),
						@ErrorSeverity		= ERROR_SEVERITY(),
						@ErrorState			= ERROR_STATE(),
						@ErrorLine			= ERROR_LINE(),
						@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');
		
					SET @ErrorMessage = 'Attempting to update dashboard Basic subscriptions One Time Email table for RecID = ' + CONVERT(varchar(20),@RecID) + '. Rolling back transaction.   Error - ' + @ErrorMessage


					if @@trancount > 0
						ROLLBACK TRANSACTION


					raiserror(@ErrorMessage,16,1) with log;

					RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
					END CATCH

			END		
		

	

	END TRY
	BEGIN CATCH
		SELECT 
			@ErrorMessage		= ERROR_MESSAGE(),
			@ErrorNumber		= ERROR_NUMBER(),
			@ErrorSeverity		= ERROR_SEVERITY(),
			@ErrorState			= ERROR_STATE(),
			@ErrorLine			= ERROR_LINE(),
			@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');
		
		SET @ErrorMessage = 'Attempting to save dashboard Basic subscriptions One Time Email information. In SPROC [Reports].[rpt_Save_BasicSubOneTimeEmail].  Error - ' + @ErrorMessage


		raiserror(@ErrorMessage,16,1) with log;

		RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	
	END CATCH

	/* ===================================================================================================================== */

	SET NOCOUNT OFF;
END;









GO
/****** Object:  StoredProcedure [Reports].[rpt_Save_Subscription]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






/*--######################################################################################
*
* Name:	[Reports].[rpt_Save_Subscription]
*
* Desc:  Takes subscription information and writes new record if SubscriptionID = 0, or updates data if SubscriptionID <> 0.
*
* Test:	EXEC Reports.rpt_Save_Subscription 0,24998,'0C5AABFC-C6CB-493C-82D5-4A08AABE41CA','This is a description',1,2,NULL,'TO@someplace.com',2,'1A0D6CD1-1C7B-4588-A45A-85EF9654285C','myserver','21','mylogin','mypassword','ListingID, AGPropertyID, PropertyName, PropertyAddress, PropertyCity, PropertyState, ReserveNowClicks, AGSitesPageViews, TotalPhoneLeads, TotalLeads, TotalEmailLeads, UniqueDetailVisits'
*
* SELECT * FROM dbo.DashboardSubscriptions WITH (NOLOCK)
* Hist:	01	02/12/2015	Bob Langley		Ticket 18155 - Initial Version 
* Hist: 02	06/02/2015	Bob Langley		Ticket 19612 - Changed to add the new AdvancedReportType column
* Hist: 03	06/24/2015	Bob Langley		Ticket 19743, Story 96653792 - For release 1.6, changed to add the new column AdvancedMethod for sending by either email or FTP (was just FTP).
* Hist: 04	01/20/2016	Bob Langley		Ticket 21874 - Changed to allow email address size of 2000 (was 200), to allow for multiple email addresses
--#######################################################################################*/
CREATE PROCEDURE [Reports].[rpt_Save_Subscription]
(@SubscriptionID	int
,@PropertyID	int
,@UserGUID	uniqueidentifier
,@Description	varchar(1000)
,@Report	int
,@AdvancedReportType int
,@AdvancedMethod	int
,@TO	varchar(2000)
,@Frequency		int
,@Creator		uniqueidentifier
,@Server		varchar(200)
,@Port			varchar(20)
,@Login			varchar(100)
,@Password		varchar(100)
,@DisplayColumns	varchar(4000))
AS 
BEGIN

    SET NOCOUNT ON;

	DECLARE
		@ErrorMessage					NVARCHAR(4000),
		@ErrorNumber					INT,
		@ErrorSeverity					INT,
		@ErrorState						INT,
		@ErrorLine						INT,
		@ErrorProcedure					NVARCHAR(200)



	DECLARE @userid int
	DECLARE @numrecs int
	DECLARE @recn int




	/* ===================================================================================================================== */
	--Main Section
	BEGIN TRY
		
		if @AdvancedMethod IS NULL
			SET @AdvancedMethod = 1				--default to 1 (FTP) for null values

		if @AdvancedReportType IS NULL
			SET @AdvancedReportType = 1				--default to 1 (Custom) for null values


		if @SubscriptionID = 0
			BEGIN
				--brand new record, since the subscriptionid = 0
				INSERT INTO dbo.DashboardSubscriptions
				(PropertyID, UserGUID, [Description], Report, AdvancedReportType, AdvancedMethod, [TO], Frequency, Creator, [Server], Port, [Login], [Password], DisplayColumns, LCHost, LCUser, LCDate)
				VALUES(@PropertyID, @UserGUID, @Description, @Report, @AdvancedReportType, @AdvancedMethod, @TO, @Frequency, @Creator, @Server, @Port, @Login, @Password, @DisplayColumns, HOST_NAME(), USER, GETDATE())


				SET @recn = scope_identity()
				SET @numrecs = @@rowcount
			END
		else
			BEGIN
				BEGIN TRY
					BEGIN TRANSACTION
						-- since subscriptionid <> 0, modify that record


						--Step 1:  insert "BEFORE" record values to Audit
						INSERT INTO dbo.DashboardSubscriptionsAudit
						SELECT SubscriptionID, PropertyID, UserGUID, [Description], Report, AdvancedReportType, AdvancedMethod, [TO], Frequency, Creator, [Server], Port, [Login], [Password], DisplayColumns, LCHost, LCUser, LCDate, 0 AS FinalDelete
						FROM dbo.DashboardSubscriptions WITH (NOLOCK)
						WHERE SubscriptionID = @SubscriptionID

						--Step 2:  now update the current record to the input values
						UPDATE ds
						SET PropertyID = @PropertyID
							,UserGUID = @UserGUID
							,[Description] = @Description
							,Report = @Report
							,AdvancedReportType = @AdvancedReportType
							,AdvancedMethod = @AdvancedMethod
							,[TO] = @TO
							,Frequency = @Frequency
							,Creator = @Creator				--do we want this to be modified????
							,[Server] = @Server
							,Port = @Port
							,[Login] = @Login
							,[Password] = @Password
							,DisplayColumns = @DisplayColumns
							,LCHost = HOST_NAME()
							,LCUser = USER
							,LCDate = GETDATE()
						FROM dbo.DashboardSubscriptions ds
						WHERE SubscriptionID = @SubscriptionID
		
						SET @numrecs = @@rowcount
						SET @recn = @subscriptionid

					COMMIT TRANSACTION
				END TRY
				BEGIN CATCH
					SELECT 
						@ErrorMessage		= ERROR_MESSAGE(),
						@ErrorNumber		= ERROR_NUMBER(),
						@ErrorSeverity		= ERROR_SEVERITY(),
						@ErrorState			= ERROR_STATE(),
						@ErrorLine			= ERROR_LINE(),
						@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');
		
					SET @ErrorMessage = 'Attempting to update dashboard subscriptions table for SubscriptionID = ' + CONVERT(varchar(20),@SubscriptionID) + '. Rolling back transaction.   Error - ' + @ErrorMessage


					if @@trancount > 0
						ROLLBACK TRANSACTION


					raiserror(@ErrorMessage,16,1) with log;

					RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
					END CATCH

			END		
		

	

	END TRY
	BEGIN CATCH
		SELECT 
			@ErrorMessage		= ERROR_MESSAGE(),
			@ErrorNumber		= ERROR_NUMBER(),
			@ErrorSeverity		= ERROR_SEVERITY(),
			@ErrorState			= ERROR_STATE(),
			@ErrorLine			= ERROR_LINE(),
			@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');
		
		SET @ErrorMessage = 'Attempting to save Subscription information. In SPROC [Reports].[rpt_Save_Subscription].  Error - ' + @ErrorMessage


		raiserror(@ErrorMessage,16,1) with log;

		RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	
	END CATCH

	/* ===================================================================================================================== */

	SET NOCOUNT OFF;
END;







GO
/****** Object:  StoredProcedure [Reports].[rpt_SavingsandPerformance]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE [Reports].[rpt_SavingsandPerformance] (
    @MgtCoID VARCHAR(18)
   ,@Month DATE)

/*******************************************************************************************
* Name:	Reports.rpt_SavingsandPerformance
* ------------------------------------------------------------------------------------------
* Desc:	This compares invoice data for 1 month from Epicor to original market rate card in 
* SFDC to determine savings on products; also shows lead counts, CPL and CBSA averages for 
* the month
* ------------------------------------------------------------------------------------------
* Test:	EXEC Reports.rpt_SavingsandPerformance '001E000000DmGZXIA3', '06/01/2017'
* ------------------------------------------------------------------------------------------
* Notes: Does not include backbill
* ------------------------------------------------------------------------------------------
* Hist:	01	03/20/2017		Colleen Rocks		Case #01427296; initial version
* Hist: 02  07/12/2017      Julie DiPietro      Case #01494844; added GreystarID; removed one of the l.MgtCoBusinessUnit 
                                                from final results (duplicated) 
* Hist: 03  08/10/2017      Julie/Colleen       Case #01542793 - Changed source from Epicor to Zuora
********************************************************************************************/
AS
BEGIN
    SET NOCOUNT ON;

/*Greystar Report - Invoice Cost, Rate card rate, lead columns*/

-----------------------------------
/*Declare and set variables*/
-----------------------------------
/*
--test:
DECLARE @MgtCoID VARCHAR(18) = '001E000000DmGZXIA3'
   ,@Month DATE = '02/01/2017'
   */

    DECLARE @MgtCoName VARCHAR(250)
       ,@StartYMDID INT
       ,@EndYMDID INT;

    SET @MgtCoName = (
                      SELECT    a.Name
                      FROM      SalesForce.dbo.Account AS a
                      WHERE     a.Id = @MgtCoID
                     );
    SET @StartYMDID = CAST(CONVERT(VARCHAR(8),@Month,112) AS INT);
    SET @EndYMDID = CAST(CONVERT(VARCHAR(8),EOMONTH(@Month),112) AS INT);


-----------------------------------
/*Drop temp tables*/
-----------------------------------
BEGIN TRY
    DROP TABLE #ClientRateCard;
END TRY
BEGIN CATCH 
END CATCH;

BEGIN TRY
    DROP TABLE #Zuora;
END TRY
BEGIN CATCH 
END CATCH;

BEGIN TRY
    DROP TABLE #Leads;
END TRY
BEGIN CATCH 
END CATCH;	

BEGIN TRY
    DROP TABLE #Savings;
END TRY
BEGIN CATCH 
END CATCH;


-----------------------------------
/*Get all property accounts and appropriate 
local market rate card column*/
-----------------------------------
SELECT  x.Id AS accountID
       ,x.Rate_Card__c AS RateCard
       ,CASE WHEN x.CategoryPiece = 'UnitPrice' THEN 'UnitPrice__c'
             WHEN x.UnitCountPiece = '' THEN 'UnitPrice__c'
             ELSE CONCAT('price_',x.CategoryPiece,'_',x.UnitCountPiece,'__c')
        END AS RateCardColumn
INTO    #ClientRateCard
FROM    (
         SELECT a.Id
               ,a.Rate_Card__c
               ,a.Name
               ,a.CategoryP__c
               ,CASE WHEN a.CategoryP__c = 'Unit Based' THEN '1'
                     WHEN a.CategoryP__c = 'Step Up' THEN '2'
                     WHEN a.CategoryP__c = 'Affordable / Tax' THEN '3'
                     WHEN a.CategoryP__c = 'College' THEN '7'
                     WHEN a.CategoryP__c = 'Corporate' THEN '5'
                     WHEN a.CategoryP__c = 'Senior' THEN '4'
                     WHEN a.CategoryP__c = 'Military' THEN '6'
                     ELSE 'UnitPrice'
                END AS CategoryPiece
               ,a.Number_of_Units__c
               ,CASE WHEN a.Number_of_Units__c BETWEEN 1 AND 19 THEN 'A'
                     WHEN a.Number_of_Units__c BETWEEN 20 AND 49 THEN 'B'
                     WHEN a.Number_of_Units__c BETWEEN 50 AND 99 THEN 'C'
                     WHEN a.Number_of_Units__c BETWEEN 100 AND 149 THEN 'D'
                     WHEN a.Number_of_Units__c BETWEEN 150 AND 199 THEN 'E'
                     WHEN a.Number_of_Units__c BETWEEN 200 AND 299 THEN 'F'
                     WHEN a.Number_of_Units__c >= 300 THEN 'G'
                     ELSE ''
                END AS UnitCountPiece
         FROM   SalesForce.dbo.Account AS a
         WHERE  a.ParentId = @MgtCoID
        ) AS x;


-----------------------------------
/*Get cost data from EDW.Fact.InvoiceItem*/
-----------------------------------	
SELECT  d.YearMonth
       ,c.SFDCAccountID AS CubeClientBusinessKey
       ,c.CBSAName
       ,c.ClientName AS PropertyName
       ,a.Property_Address__c AS PropertyAddress
       ,pc.ClientName AS AGManagementCompanyName 
       ,p.SFDCProductID AS ItemBusinessKey
       ,p.ProductName AS ItemDescription
       ,CASE WHEN p.AGListingProduct = 'Yes'
                  OR p.RentListingProduct = 'Yes' THEN 'Basic'
             ELSE 'Upsell'
        END AS RevenueChannel
       ,COUNT(DISTINCT ii.ClientKey) AS ClientCount
       ,SUM(ii.BilledRevenue) AS TotalCost
INTO    #Zuora
FROM    EnterpriseDataWarehouse.Fact.InvoiceItem AS ii
INNER JOIN EnterpriseDataWarehouse.Dimension.Date AS d
        ON ii.PostedDateKey = d.DateKey
INNER JOIN EnterpriseDataWarehouse.Conformed.Client AS c
        ON ii.ClientKey = c.ClientKey
INNER JOIN SalesForce.dbo.Account AS a
        ON c.SFDCAccountID = a.Id
INNER JOIN EnterpriseDataWarehouse.Conformed.Product AS p
        ON ii.ProductKey = p.ProductKey
LEFT JOIN EnterpriseDataWarehouse.Conformed.Client AS pc
        ON c.SFDCParentAccountID = pc.SFDCAccountID
WHERE   c.ClientRecordType = 'PropertyAccount'
        AND ii.PostedDateKey BETWEEN @StartYMDID
                             AND     @EndYMDID
        AND c.SFDCAccountID IN (SELECT  accountID
                                FROM    #ClientRateCard)
GROUP BY d.YearMonth
       ,c.SFDCAccountID
       ,c.CBSAName
       ,c.ClientName
       ,a.Property_Address__c
       ,pc.ClientName
       ,p.SFDCProductID
       ,p.ProductName
       ,CASE WHEN p.AGListingProduct = 'Yes'
                  OR p.RentListingProduct = 'Yes' THEN 'Basic'
             ELSE 'Upsell'
        END;


-----------------------------------
/*Mash up cost data with original GEO
rate card price*/
-----------------------------------	
SELECT  cd.YearMonth
       ,cd.CubeClientBusinessKey
       ,cd.CBSAName
       ,cd.PropertyName
       ,cd.PropertyAddress
       ,cd.AGManagementCompanyName
       ,cd.ItemBusinessKey
       ,cd.ItemDescription
       ,cd.RevenueChannel
       ,cd.ClientCount
       ,cd.TotalCost
       ,ISNULL(CASE WHEN col.RateCardColumn = 'price_1_A__c' THEN rce.price_1_A__c
                    WHEN col.RateCardColumn = 'price_1_B__c' THEN rce.price_1_B__c
                    WHEN col.RateCardColumn = 'price_1_C__c' THEN rce.price_1_C__c
                    WHEN col.RateCardColumn = 'price_1_D__c' THEN rce.price_1_D__c
                    WHEN col.RateCardColumn = 'price_1_E__c' THEN rce.price_1_E__c
                    WHEN col.RateCardColumn = 'price_1_F__c' THEN rce.price_1_F__c
                    WHEN col.RateCardColumn = 'price_1_G__c' THEN rce.price_1_G__c
                    WHEN col.RateCardColumn = 'price_2_A__c' THEN rce.price_2_A__c
                    WHEN col.RateCardColumn = 'price_2_B__c' THEN rce.price_2_B__c
                    WHEN col.RateCardColumn = 'price_2_C__c' THEN rce.price_2_C__c
                    WHEN col.RateCardColumn = 'price_2_D__c' THEN rce.price_2_D__c
                    WHEN col.RateCardColumn = 'price_2_E__c' THEN rce.price_2_E__c
                    WHEN col.RateCardColumn = 'price_2_F__c' THEN rce.price_2_F__c
                    WHEN col.RateCardColumn = 'price_2_G__c' THEN rce.price_2_G__c
                    WHEN col.RateCardColumn = 'price_3_A__c' THEN rce.price_3_A__c
                    WHEN col.RateCardColumn = 'price_3_B__c' THEN rce.price_3_B__c
                    WHEN col.RateCardColumn = 'price_3_C__c' THEN rce.price_3_C__c
                    WHEN col.RateCardColumn = 'price_3_D__c' THEN rce.price_3_D__c
                    WHEN col.RateCardColumn = 'price_3_E__c' THEN rce.price_3_E__c
                    WHEN col.RateCardColumn = 'price_3_F__c' THEN rce.price_3_F__c
                    WHEN col.RateCardColumn = 'price_3_G__c' THEN rce.price_3_G__c
                    WHEN col.RateCardColumn = 'price_4_A__c' THEN rce.price_4_A__c
                    WHEN col.RateCardColumn = 'price_4_B__c' THEN rce.price_4_B__c
                    WHEN col.RateCardColumn = 'price_4_C__c' THEN rce.price_4_C__c
                    WHEN col.RateCardColumn = 'price_4_D__c' THEN rce.price_4_D__c
                    WHEN col.RateCardColumn = 'price_4_E__c' THEN rce.price_4_E__c
                    WHEN col.RateCardColumn = 'price_4_F__c' THEN rce.price_4_F__c
                    WHEN col.RateCardColumn = 'price_4_G__c' THEN rce.price_4_G__c
                    WHEN col.RateCardColumn = 'price_5_A__c' THEN rce.price_5_A__c
                    WHEN col.RateCardColumn = 'price_5_B__c' THEN rce.price_5_B__c
                    WHEN col.RateCardColumn = 'price_5_C__c' THEN rce.price_5_C__c
                    WHEN col.RateCardColumn = 'price_5_D__c' THEN rce.price_5_D__c
                    WHEN col.RateCardColumn = 'price_5_E__c' THEN rce.price_5_E__c
                    WHEN col.RateCardColumn = 'price_5_F__c' THEN rce.price_5_F__c
                    WHEN col.RateCardColumn = 'price_5_G__c' THEN rce.price_5_G__c
                    WHEN col.RateCardColumn = 'price_6_A__c' THEN rce.price_6_A__c
                    WHEN col.RateCardColumn = 'price_6_B__c' THEN rce.price_6_B__c
                    WHEN col.RateCardColumn = 'price_6_C__c' THEN rce.price_6_C__c
                    WHEN col.RateCardColumn = 'price_6_D__c' THEN rce.price_6_D__c
                    WHEN col.RateCardColumn = 'price_6_E__c' THEN rce.price_6_E__c
                    WHEN col.RateCardColumn = 'price_6_F__c' THEN rce.price_6_F__c
                    WHEN col.RateCardColumn = 'price_6_G__c' THEN rce.price_6_G__c
                    WHEN col.RateCardColumn = 'price_7_A__c' THEN rce.price_7_A__c
                    WHEN col.RateCardColumn = 'price_7_B__c' THEN rce.price_7_B__c
                    WHEN col.RateCardColumn = 'price_7_C__c' THEN rce.price_7_C__c
                    WHEN col.RateCardColumn = 'price_7_D__c' THEN rce.price_7_D__c
                    WHEN col.RateCardColumn = 'price_7_E__c' THEN rce.price_7_E__c
                    WHEN col.RateCardColumn = 'price_7_F__c' THEN rce.price_7_F__c
                    WHEN col.RateCardColumn = 'price_7_G__c' THEN rce.price_7_G__c
                    WHEN col.RateCardColumn = 'UnitPrice__c' THEN rce.UnitPrice__c
               END,rce.UnitPrice__c) AS OriginalPrice
INTO    #Savings
FROM    #Zuora AS cd
INNER JOIN #ClientRateCard AS col
        ON cd.CubeClientBusinessKey = col.accountID
LEFT OUTER JOIN SalesForce.dbo.Rate_Card_Entry__c AS rce
        ON col.RateCard = rce.RateCardId__c
		AND cd.ItemBusinessKey = rce.ProductId__c;



-----------------------------------
/*Get leads data*/
-----------------------------------
SELECT  a.*
       ,CASE WHEN a.AGStatus = 1
                  AND a.RentStatus = 0 THEN 'AG Only'
             WHEN a.AGStatus = 0
                  AND a.RentStatus = 1 THEN 'Rent Only'
             WHEN a.AGStatus = 1
                  AND a.RentStatus = 1 THEN 'Joint'
             ELSE 'No Status'
        END AS ClientType
INTO    #Leads
FROM    (
         SELECT CAST(ml.YearMonth AS VARCHAR(6)) AS YearMonth
               ,l.MgtCoNameAG
               ,l.ExternalID AS MgtCoBusinessUnit
               ,l.SFPropertyAcctID
               ,l.BillingIDAG AS ClientID
               ,l.PropertyIDAG
               ,l.ListingID
               ,l.PropertyName
               ,l.PropertyAddress
               ,l.PropertyZipCode
               ,l.CBSACode
               ,l.CBSAName
               ,g.propertyid AS GreystarID
               ,SUM(ml.EmailLeads) AS EmailLeads
               ,SUM(ml.PhoneLeads) AS PhoneLeads
               ,SUM(ml.AllLeads) AS TotalLeads
               ,SUM(ml.StatusIDAG) AS DaysActiveAG
               ,SUM(ml.StatusIDRent) AS DaysActiveRent
               ,SUM(ml.EmailLeadsAG) AS AGEmails
               ,SUM(ml.EmailLeadsRent) AS RentEmails
               ,SUM(ml.PhoneLeadsAG) + SUM(ml.MissedCallsAG) AS AGPhone
               ,SUM(ml.PhoneLeadsRent) + SUM(ml.MissedCallsRent) AS RentPhone
               ,MAX(ml.StatusIDAG) AS AGStatus
               ,MAX(ml.StatusIDRent) AS RentStatus
         FROM   RentPath.Dimension.Listings AS l
         JOIN   RentPath.Mart.Listings AS ml
                ON l.ListingID = ml.ListingID
         LEFT JOIN RentPath.Dimension.Greystar_XREF AS g
                ON l.ListingID = g.ListingID
         WHERE  ml.YMDID BETWEEN @StartYMDID AND @EndYMDID
                AND l.SFPropertyAcctID IN (SELECT DISTINCT
                                                    accountID
                                           FROM     #ClientRateCard)
         GROUP BY CAST(ml.YearMonth AS VARCHAR(6))
               ,l.MgtCoNameAG
               ,l.ExternalID
               ,l.SFPropertyAcctID
               ,l.BillingIDAG
               ,l.PropertyIDAG
               ,l.ListingID
               ,l.PropertyName
               ,l.PropertyAddress
               ,l.PropertyZipCode
               ,l.CBSACode
               ,l.CBSAName
               ,g.propertyid
        ) AS a; 


-----------------------------------
/*Get final results*/ 
-----------------------------------	
SELECT  d.MonthShortName AS [MonthName]
       ,LEFT(x.FinancialDate,4) AS [Year]
       ,l.DaysActiveAG
       ,l.DaysActiveRent
       ,l.ClientType AS AdvertisingStatus
       ,l.MgtCoNameAG
       ,l.MgtCoBusinessUnit
       ,x.AGManagementCompanyName AS MgmtClientName
       ,@MgtCoID AS MgmtClientID
       ,x.CubeClientBusinessKey AS ClientID
       ,l.PropertyName
       ,l.PropertyAddress
       ,l.PropertyZipCode
       ,l.CBSACode
       ,l.CBSAName
       ,l.GreystarID
       ,x.ClientCount
       ,x.CoreProducts
       ,x.CoreUnitPrice
       ,x.CoreTotalCost
       ,x.NonCoreProducts
       ,x.NonCoreUnitPrice
       ,x.NonCoreTotalCost
       ,l.YearMonth
       ,l.EmailLeads
       ,l.PhoneLeads
       ,l.AGEmails
       ,l.RentEmails
       ,l.AGPhone
       ,l.RentPhone
       ,x.TotalUnitPrice
       ,x.TotalCost
       ,x.TotalUnitPrice - x.TotalCost AS TotalSavings
       ,ISNULL(1 - (CAST(ISNULL(x.TotalCost,0) AS MONEY) / NULLIF(CAST(ISNULL(x.TotalUnitPrice,0) AS MONEY),0)),0) AS TotalDiscountPct
       ,CAST(ISNULL(x.TotalUnitPrice,0) AS MONEY) - CAST(ISNULL(x.TotalCost,0) AS MONEY) AS TotalDiscountAmt
       ,l.TotalLeads
       ,CAST(ISNULL(x.TotalCost,0) AS MONEY) / NULLIF(l.TotalLeads,0) AS CPL
       ,Ave.CBSAAverage
FROM    (
         SELECT c.[YearMonth] AS FinancialDate
               ,c.CubeClientBusinessKey
               ,c.CBSAName
               ,c.PropertyName
               ,c.PropertyAddress
               ,c.AGManagementCompanyName
               ,c.ClientCount
               ,STUFF((
                       SELECT   ', ' + ItemDescription
                       FROM     #Savings
                       WHERE    CubeClientBusinessKey = c.CubeClientBusinessKey
                                AND RevenueChannel = 'Basic'
                                AND YearMonth = c.YearMonth
                       GROUP BY ItemDescription
                       ORDER BY ItemDescription
                      FOR
                       XML PATH('')
                      ),1,2,'') AS CoreProducts
               ,STUFF((
                       SELECT   ', ' + ItemBusinessKey
                       FROM     #Savings
                       WHERE    CubeClientBusinessKey = c.CubeClientBusinessKey
                                AND RevenueChannel = 'Basic'
                                AND YearMonth = c.YearMonth
                       GROUP BY ItemBusinessKey
                       ORDER BY ItemBusinessKey
                      FOR
                       XML PATH('')
                      ),1,2,'') AS CoreItemIDS
               ,STUFF((
                       SELECT   ', ' + ItemDescription
                       FROM     #Savings
                       WHERE    CubeClientBusinessKey = c.CubeClientBusinessKey
                                AND RevenueChannel <> 'Basic'
                                AND YearMonth = c.YearMonth
                       GROUP BY ItemDescription
                       ORDER BY ItemDescription
                      FOR
                       XML PATH('')
                      ),1,2,'') AS NonCoreProducts
               ,STUFF((
                       SELECT   ', ' + ItemBusinessKey
                       FROM     #Savings
                       WHERE    CubeClientBusinessKey = c.CubeClientBusinessKey
                                AND RevenueChannel <> 'Basic'
                                AND YearMonth = c.YearMonth
                       GROUP BY ItemBusinessKey
                       ORDER BY ItemBusinessKey
                      FOR
                       XML PATH('')
                      ),1,2,'') AS NonCoreItemIDs
               ,SUM(CASE WHEN c.RevenueChannel = 'Basic' THEN c.OriginalPrice
                         ELSE 0
                    END) AS CoreUnitPrice
               ,SUM(CASE WHEN c.RevenueChannel = 'Basic' THEN c.TotalCost
                         ELSE 0
                    END) AS CoreTotalCost
               ,SUM(CASE WHEN c.RevenueChannel <> 'Basic' THEN c.OriginalPrice
                         ELSE 0
                    END) AS NonCoreUnitPrice
               ,SUM(CASE WHEN c.RevenueChannel <> 'Basic' THEN c.TotalCost
                         ELSE 0
                    END) AS NonCoreTotalCost
               ,SUM(c.OriginalPrice) AS TotalUnitPrice
               ,SUM(c.TotalCost) AS TotalCost
         FROM   #Savings AS c
         GROUP BY c.YearMonth
               ,c.CubeClientBusinessKey
               ,c.CBSAName
               ,c.PropertyName
               ,c.PropertyAddress
               ,c.AGManagementCompanyName
               ,c.ClientCount
        ) AS x
INNER JOIN (
SELECT DISTINCT YearMonth, MonthShortName
FROM DBAUtility.Dimension.Dates

) AS d
	ON d.YearMonth = x.FinancialDate
INNER JOIN #Leads AS l
        ON x.CubeClientBusinessKey = l.SFPropertyAcctID
LEFT OUTER JOIN (
                 SELECT COALESCE(ld.CBSACode,ls.CBSACode) AS CBSACode
                       ,ld.TotalLeads / ls.Listings AS CBSAAverage
                 FROM   (
                         SELECT dl.CBSACode
                               ,SUM(ml.AllLeads) AS TotalLeads
                         FROM   RentPath.Mart.Listings AS ml
                         JOIN   RentPath.Dimension.Listings AS dl
                                ON ml.ListingID = dl.ListingID
                         WHERE  ml.YMDID BETWEEN @StartYMDID AND @EndYMDID
                         GROUP BY dl.CBSACode
                        ) ld
                 JOIN   (
                         SELECT dl.CBSACode
                               ,COUNT(DISTINCT ml.ListingID) AS Listings
                         FROM   RentPath.Mart.Listings AS ml
                         JOIN   RentPath.Dimension.Listings AS dl
                                ON ml.ListingID = dl.ListingID
                         WHERE  ml.YMDID BETWEEN @StartYMDID AND @EndYMDID
                                AND (ml.StatusIDAG = 1
                                     OR ml.StatusIDRent = 1)
                         GROUP BY dl.CBSACode
                        ) ls
                        ON ld.CBSACode = ls.CBSACode
                ) Ave
        ON l.CBSACode = Ave.CBSACode;


/*
-----------------------------------
/*Drop temp tables*/
-----------------------------------
    BEGIN TRY
        DROP TABLE #ClientRateCard;
    END TRY
    BEGIN CATCH 
    END CATCH;

    BEGIN TRY
        DROP TABLE #CostData;
    END TRY
    BEGIN CATCH 
    END CATCH;

    BEGIN TRY
        DROP TABLE #Savings;
    END TRY
    BEGIN CATCH 
    END CATCH;

    BEGIN TRY
        DROP TABLE #Leads;
    END TRY
    BEGIN CATCH 
    END CATCH;	

-----------------------------------
/*Get all property accounts and appropriate 
local market rate card column*/
-----------------------------------
    SELECT  x.Id AS accountID
           ,x.Rate_Card__c AS RateCard
           ,CASE WHEN x.CategoryPiece = 'UnitPrice' THEN 'UnitPrice__c'
                 WHEN x.UnitCountPiece = '' THEN 'UnitPrice__c'
                 ELSE CONCAT('price_',x.CategoryPiece,'_',x.UnitCountPiece,'__c')
            END AS RateCardColumn
    INTO    #ClientRateCard
    FROM    (
             SELECT a.Id
                   ,a.Rate_Card__c
                   ,a.Name
                   ,a.CategoryP__c
                   ,CASE WHEN a.CategoryP__c = 'Unit Based' THEN '1'
                         WHEN a.CategoryP__c = 'Step Up' THEN '2'
                         WHEN a.CategoryP__c = 'Affordable / Tax' THEN '3'
                         WHEN a.CategoryP__c = 'College' THEN '7'
                         WHEN a.CategoryP__c = 'Corporate' THEN '5'
                         WHEN a.CategoryP__c = 'Senior' THEN '4'
                         WHEN a.CategoryP__c = 'Military' THEN '6'
                         ELSE 'UnitPrice'
                    END AS CategoryPiece
                   ,a.Number_of_Units__c
                   ,CASE WHEN a.Number_of_Units__c BETWEEN 1 AND 19 THEN 'A'
                         WHEN a.Number_of_Units__c BETWEEN 20 AND 49 THEN 'B'
                         WHEN a.Number_of_Units__c BETWEEN 50 AND 99 THEN 'C'
                         WHEN a.Number_of_Units__c BETWEEN 100 AND 149 THEN 'D'
                         WHEN a.Number_of_Units__c BETWEEN 150 AND 199 THEN 'E'
                         WHEN a.Number_of_Units__c BETWEEN 200 AND 299 THEN 'F'
                         WHEN a.Number_of_Units__c >= 300 THEN 'G'
                         ELSE ''
                    END AS UnitCountPiece
             FROM   SalesForce.dbo.Account AS a
             WHERE  a.ParentId = @MgtCoID
            ) AS x;

-----------------------------------
/*Get cost data from EpicorFinance*/
-----------------------------------	
    SELECT  ed.Date
           ,c.CubeClientBusinessKey
           ,c.CubeClientBusinessKeySource
           ,c.CBSAName
           ,c.PropertyName
           ,c.ClientAddress1 AS PropertyAddress
           ,c.AGManagementCompanyName
           ,ct.ClientType
           ,i.ItemBusinessKey
           ,i.ItemDescription
           ,rh.RevenueChannel
           ,COUNT(DISTINCT r.ClientKey) AS ClientCount
           ,SUM(r.AGRevenue) AS AGCost
           ,SUM(r.RentRevenue) AS RentCost
           ,SUM(r.Revenue) AS TotalCost
           ,SUM(r.OriginalRate) AS TotalOpenRate
    INTO    #CostData
    FROM    EpicorFinance.Fact.Revenue AS r
    JOIN    EpicorFinance.Conformed.Dates AS ed
            ON r.FinancialDateKey = ed.DateKey
    JOIN    EpicorFinance.Conformed.Client AS c
            ON r.ClientKey = c.ClientKey
    JOIN    EpicorFinance.Conformed.ClientType AS ct
            ON r.ClientTypeKey = ct.ClientTypeKey
    JOIN    EpicorFinance.Conformed.RevenueCategory AS rc
            ON r.RevenueCategoryKey = rc.RevenueCategoryKey
    JOIN    EpicorFinance.Conformed.RevenueChannel AS rh
            ON r.RevenueChannelKey = rh.RevenueChannelKey
    JOIN    EpicorFinance.Conformed.Item AS i
            ON r.ItemKey = i.ItemKey
    WHERE   r.FinancialDateKey BETWEEN @StartYMDID
                               AND     @EndYMDID
            AND r.MonthGroupKey = 1
            AND r.RevenueCategoryKey <> 11
            AND c.CubeClientBusinessKey IN (SELECT  accountID
                                            FROM    #ClientRateCard)
    GROUP BY ed.Date
           ,c.CubeClientBusinessKey
           ,c.CubeClientBusinessKeySource
           ,c.CBSAName
           ,c.PropertyName
           ,c.ClientAddress1
           ,c.AGManagementCompanyName
           ,ct.ClientType
           ,i.ItemBusinessKey
           ,i.ItemDescription
           ,rh.RevenueChannel;

-----------------------------------
/*Mash up cost data with original GEO
rate card price*/
-----------------------------------	
    SELECT  cd.Date
           ,cd.CubeClientBusinessKey
           ,cd.CubeClientBusinessKeySource
           ,cd.CBSAName
           ,cd.PropertyName
           ,cd.PropertyAddress
           ,cd.AGManagementCompanyName
           ,cd.ClientType
           ,cd.ItemBusinessKey
           ,cd.ItemDescription
           ,cd.RevenueChannel
           ,cd.ClientCount
           ,cd.AGCost
           ,cd.RentCost
           ,cd.TotalCost
           ,cd.TotalOpenRate
           ,ISNULL(CASE WHEN col.RateCardColumn = 'price_1_A__c' THEN rce.price_1_A__c
                        WHEN col.RateCardColumn = 'price_1_B__c' THEN rce.price_1_B__c
                        WHEN col.RateCardColumn = 'price_1_C__c' THEN rce.price_1_C__c
                        WHEN col.RateCardColumn = 'price_1_D__c' THEN rce.price_1_D__c
                        WHEN col.RateCardColumn = 'price_1_E__c' THEN rce.price_1_E__c
                        WHEN col.RateCardColumn = 'price_1_F__c' THEN rce.price_1_F__c
                        WHEN col.RateCardColumn = 'price_1_G__c' THEN rce.price_1_G__c
                        WHEN col.RateCardColumn = 'price_2_A__c' THEN rce.price_2_A__c
                        WHEN col.RateCardColumn = 'price_2_B__c' THEN rce.price_2_B__c
                        WHEN col.RateCardColumn = 'price_2_C__c' THEN rce.price_2_C__c
                        WHEN col.RateCardColumn = 'price_2_D__c' THEN rce.price_2_D__c
                        WHEN col.RateCardColumn = 'price_2_E__c' THEN rce.price_2_E__c
                        WHEN col.RateCardColumn = 'price_2_F__c' THEN rce.price_2_F__c
                        WHEN col.RateCardColumn = 'price_2_G__c' THEN rce.price_2_G__c
                        WHEN col.RateCardColumn = 'price_3_A__c' THEN rce.price_3_A__c
                        WHEN col.RateCardColumn = 'price_3_B__c' THEN rce.price_3_B__c
                        WHEN col.RateCardColumn = 'price_3_C__c' THEN rce.price_3_C__c
                        WHEN col.RateCardColumn = 'price_3_D__c' THEN rce.price_3_D__c
                        WHEN col.RateCardColumn = 'price_3_E__c' THEN rce.price_3_E__c
                        WHEN col.RateCardColumn = 'price_3_F__c' THEN rce.price_3_F__c
                        WHEN col.RateCardColumn = 'price_3_G__c' THEN rce.price_3_G__c
                        WHEN col.RateCardColumn = 'price_4_A__c' THEN rce.price_4_A__c
                        WHEN col.RateCardColumn = 'price_4_B__c' THEN rce.price_4_B__c
                        WHEN col.RateCardColumn = 'price_4_C__c' THEN rce.price_4_C__c
                        WHEN col.RateCardColumn = 'price_4_D__c' THEN rce.price_4_D__c
                        WHEN col.RateCardColumn = 'price_4_E__c' THEN rce.price_4_E__c
                        WHEN col.RateCardColumn = 'price_4_F__c' THEN rce.price_4_F__c
                        WHEN col.RateCardColumn = 'price_4_G__c' THEN rce.price_4_G__c
                        WHEN col.RateCardColumn = 'price_5_A__c' THEN rce.price_5_A__c
                        WHEN col.RateCardColumn = 'price_5_B__c' THEN rce.price_5_B__c
                        WHEN col.RateCardColumn = 'price_5_C__c' THEN rce.price_5_C__c
                        WHEN col.RateCardColumn = 'price_5_D__c' THEN rce.price_5_D__c
                        WHEN col.RateCardColumn = 'price_5_E__c' THEN rce.price_5_E__c
                        WHEN col.RateCardColumn = 'price_5_F__c' THEN rce.price_5_F__c
                        WHEN col.RateCardColumn = 'price_5_G__c' THEN rce.price_5_G__c
                        WHEN col.RateCardColumn = 'price_6_A__c' THEN rce.price_6_A__c
                        WHEN col.RateCardColumn = 'price_6_B__c' THEN rce.price_6_B__c
                        WHEN col.RateCardColumn = 'price_6_C__c' THEN rce.price_6_C__c
                        WHEN col.RateCardColumn = 'price_6_D__c' THEN rce.price_6_D__c
                        WHEN col.RateCardColumn = 'price_6_E__c' THEN rce.price_6_E__c
                        WHEN col.RateCardColumn = 'price_6_F__c' THEN rce.price_6_F__c
                        WHEN col.RateCardColumn = 'price_6_G__c' THEN rce.price_6_G__c
                        WHEN col.RateCardColumn = 'price_7_A__c' THEN rce.price_7_A__c
                        WHEN col.RateCardColumn = 'price_7_B__c' THEN rce.price_7_B__c
                        WHEN col.RateCardColumn = 'price_7_C__c' THEN rce.price_7_C__c
                        WHEN col.RateCardColumn = 'price_7_D__c' THEN rce.price_7_D__c
                        WHEN col.RateCardColumn = 'price_7_E__c' THEN rce.price_7_E__c
                        WHEN col.RateCardColumn = 'price_7_F__c' THEN rce.price_7_F__c
                        WHEN col.RateCardColumn = 'price_7_G__c' THEN rce.price_7_G__c
                        WHEN col.RateCardColumn = 'UnitPrice__c' THEN rce.UnitPrice__c
                   END,rce.UnitPrice__c) AS OriginalPrice
    INTO    #Savings
    FROM    #CostData AS cd
    INNER JOIN #ClientRateCard AS col
            ON cd.CubeClientBusinessKey = col.accountID
    LEFT OUTER JOIN SalesForce.dbo.ProductFulfillment__c AS pfc
            ON cd.ItemBusinessKey = pfc.SKU__c
    LEFT OUTER JOIN SalesForce.dbo.Rate_Card_Entry__c AS rce
            ON col.RateCard = rce.RateCardId__c
               AND pfc.Product__c = rce.ProductId__c;

-----------------------------------
/*Get leads data*/
-----------------------------------
    SELECT  CAST(ml.YearMonth AS VARCHAR(6)) AS YearMonth
           ,l.MgtCoNameAG
           ,l.ExternalID AS MgtCoBusinessUnit
           ,l.SFPropertyAcctID
           ,l.BillingIDAG AS ClientID
           ,l.PropertyIDAG
           ,l.ListingID
           ,l.PropertyName
           ,l.PropertyAddress
           ,l.PropertyZipCode
           ,l.CBSACode
           ,l.CBSAName
		   ,g.propertyid AS GreystarID
           ,SUM(ml.EmailLeads) AS EmailLeads
           ,SUM(ml.PhoneLeads) AS PhoneLeads
           ,SUM(ml.AllLeads) AS TotalLeads
           ,SUM(ml.StatusIDAG) AS DaysActiveAG
           ,SUM(ml.StatusIDRent) AS DaysActiveRent
           ,SUM(ml.EmailLeadsAG) AS AGEmails
           ,SUM(ml.EmailLeadsRent) AS RentEmails
           ,SUM(ml.PhoneLeadsAG) + SUM(ml.MissedCallsAG) AS AGPhone
           ,SUM(ml.PhoneLeadsRent) + SUM(ml.MissedCallsRent) AS RentPhone
           ,MAX(ml.StatusIDAG) AS AGStatus
           ,MAX(ml.StatusIDRent) AS RentStatus
    INTO    #Leads
    FROM    RentPath.Dimension.Listings AS l
    JOIN    RentPath.Mart.Listings AS ml
            ON l.ListingID = ml.ListingID
	LEFT JOIN Rentpath.Dimension.Greystar_XREF AS g
	        ON l.ListingID = g.ListingID
    WHERE   ml.YMDID BETWEEN @StartYMDID AND @EndYMDID
            AND l.SFPropertyAcctID IN (SELECT DISTINCT
                                                accountID
                                       FROM     #ClientRateCard)
    GROUP BY CAST(ml.YearMonth AS VARCHAR(6))
           ,l.MgtCoNameAG
           ,l.ExternalID
           ,l.SFPropertyAcctID
           ,l.BillingIDAG
           ,l.PropertyIDAG
           ,l.ListingID
           ,l.PropertyName
           ,l.PropertyAddress
           ,l.PropertyZipCode
           ,l.CBSACode
           ,l.CBSAName
		   ,g.propertyid;

-----------------------------------
/*Get final results*/ 
-----------------------------------	
    SELECT  DATENAME(MONTH,x.FinancialDate) AS [MonthName]
           ,YEAR(x.FinancialDate) AS [Year]
		   ,CONCAT(DATENAME(MONTH,x.FinancialDate),' ',YEAR(x.FinancialDate)) AS MonthYear
           ,l.DaysActiveAG
           ,l.DaysActiveRent
           ,x.ClientType AS AdvertisingStatus
           ,l.MgtCoNameAG
		   ,l.MgtCoBusinessUnit
           ,x.AGManagementCompanyName AS MgmtClientName
           ,@MgtCoID AS MgmtClientID
           ,x.CubeClientBusinessKey AS ClientID
           ,l.PropertyName
           ,l.PropertyAddress
           ,l.PropertyZipCode
           ,l.CBSACode
           ,l.CBSAName
		   ,l.GreystarID
           ,x.ClientCount
           ,x.CoreProducts
           ,x.CoreUnitPrice
           ,x.CoreTotalCost
           ,x.NonCoreProducts
           ,x.NonCoreUnitPrice
           ,x.NonCoreTotalCost
           ,l.YearMonth
           ,l.EmailLeads
           ,l.PhoneLeads
           ,l.AGEmails
           ,l.RentEmails
           ,l.AGPhone
           ,l.RentPhone
           ,x.TotalUnitPrice
           ,x.TotalCost
           ,x.TotalUnitPrice - x.TotalCost AS TotalSavings
           ,ISNULL(1 - (CAST(ISNULL(x.TotalCost,0) AS MONEY) / NULLIF(CAST(ISNULL(x.TotalUnitPrice,0) AS MONEY),0)),0) AS TotalDiscountPct
           ,CAST(ISNULL(x.TotalUnitPrice,0) AS MONEY) - CAST(ISNULL(x.TotalCost,0) AS MONEY) AS TotalDiscountAmt
           ,l.TotalLeads
           ,CAST(ISNULL(x.TotalCost,0) AS MONEY) / NULLIF(l.TotalLeads,0) AS CPL
           ,Ave.CBSAAverage
    FROM    (
             SELECT c.[Date] AS FinancialDate
                   ,LEFT(CAST(CONVERT(VARCHAR(8),c.[Date],112) AS INT),6) AS YearMonth
                   ,c.CubeClientBusinessKey
                   ,c.CubeClientBusinessKeySource
                   ,c.CBSAName
                   ,c.PropertyName
                   ,c.PropertyAddress
                   ,c.AGManagementCompanyName
                   ,c.ClientType
                   ,c.ClientCount
                   ,STUFF((
                           SELECT   ', ' + ItemDescription
                           FROM     #Savings
                           WHERE    CubeClientBusinessKey = c.CubeClientBusinessKey
                                    AND RevenueChannel = 'Basic'
                                    AND Date = c.Date
                           GROUP BY ItemDescription
                           ORDER BY ItemDescription
                          FOR
                           XML PATH('')
                          ),1,2,'') AS CoreProducts
                   ,STUFF((
                           SELECT   ', ' + ItemBusinessKey
                           FROM     #Savings
                           WHERE    CubeClientBusinessKey = c.CubeClientBusinessKey
                                    AND RevenueChannel = 'Basic'
                                    AND Date = c.Date
                           GROUP BY ItemBusinessKey
                           ORDER BY ItemBusinessKey
                          FOR
                           XML PATH('')
                          ),1,2,'') AS CoreItemIDS
                   ,STUFF((
                           SELECT   ', ' + ItemDescription
                           FROM     #Savings
                           WHERE    CubeClientBusinessKey = c.CubeClientBusinessKey
                                    AND RevenueChannel <> 'Basic'
                                    AND Date = c.Date
                           GROUP BY ItemDescription
                           ORDER BY ItemDescription
                          FOR
                           XML PATH('')
                          ),1,2,'') AS NonCoreProducts
                   ,STUFF((
                           SELECT   ', ' + ItemBusinessKey
                           FROM     #Savings
                           WHERE    CubeClientBusinessKey = c.CubeClientBusinessKey
                                    AND RevenueChannel <> 'Basic'
                                    AND Date = c.Date
                           GROUP BY ItemBusinessKey
                           ORDER BY ItemBusinessKey
                          FOR
                           XML PATH('')
                          ),1,2,'') AS NonCoreItemIDs
                   ,SUM(CASE WHEN c.RevenueChannel = 'Basic' THEN c.OriginalPrice
                             ELSE 0
                        END) AS CoreUnitPrice
                   ,SUM(CASE WHEN c.RevenueChannel = 'Basic' THEN c.TotalCost
                             ELSE 0
                        END) AS CoreTotalCost
                   ,SUM(CASE WHEN c.RevenueChannel <> 'Basic' THEN c.OriginalPrice
                             ELSE 0
                        END) AS NonCoreUnitPrice
                   ,SUM(CASE WHEN c.RevenueChannel <> 'Basic' THEN c.TotalCost
                             ELSE 0
                        END) AS NonCoreTotalCost
                   ,SUM(c.OriginalPrice) AS TotalUnitPrice
                   ,SUM(c.TotalCost) AS TotalCost
             FROM   #Savings AS c
             GROUP BY c.Date
                   ,c.CubeClientBusinessKey
                   ,c.CubeClientBusinessKeySource
                   ,c.CBSAName
                   ,c.PropertyName
                   ,c.PropertyAddress
                   ,c.AGManagementCompanyName
                   ,c.ClientType
                   ,c.ClientCount
            ) AS x
    INNER JOIN #Leads AS l
            ON x.CubeClientBusinessKey = l.SFPropertyAcctID
    LEFT OUTER JOIN (
                     SELECT COALESCE(ld.CBSACode,ls.CBSACode) AS CBSACode
                           ,ld.TotalLeads / ls.Listings AS CBSAAverage
                     FROM   (
                             SELECT dl.CBSACode
                                   ,SUM(ml.AllLeads) AS TotalLeads
                             FROM   RentPath.Mart.Listings AS ml
                             JOIN   RentPath.Dimension.Listings AS dl
                                    ON ml.ListingID = dl.ListingID
                             WHERE  ml.YMDID BETWEEN @StartYMDID AND @EndYMDID
                             GROUP BY dl.CBSACode
                            ) ld
                     JOIN   (
                             SELECT dl.CBSACode
                                   ,COUNT(DISTINCT ml.ListingID) AS Listings
                             FROM   RentPath.Mart.Listings AS ml
                             JOIN   RentPath.Dimension.Listings AS dl
                                    ON ml.ListingID = dl.ListingID
                             WHERE  ml.YMDID BETWEEN @StartYMDID AND @EndYMDID
                                    AND (ml.StatusIDAG = 1
                                         OR ml.StatusIDRent = 1)
                             GROUP BY dl.CBSACode
                            ) ls
                            ON ld.CBSACode = ls.CBSACode
                    ) Ave
            ON l.CBSACode = Ave.CBSACode;
*/ 


    SET NOCOUNT OFF;
END;






GO
/****** Object:  StoredProcedure [Reports].[rpt_SavingsandPerformance_OLD]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Reports].[rpt_SavingsandPerformance_OLD] (
    @MgtCoID VARCHAR(18)
   ,@Month DATE)

/*******************************************************************************************
* Name:	Reports.rpt_SavingsandPerformance
* ------------------------------------------------------------------------------------------
* Desc:	This compares invoice data for 1 month from Epicor to original market rate card in 
* SFDC to determine savings on products; also shows lead counts, CPL and CBSA averages for 
* the month
* ------------------------------------------------------------------------------------------
* Test:	EXEC Reports.rpt_SavingsandPerformance '001E000000DmGZXIA3', '02/01/2017'
* ------------------------------------------------------------------------------------------
* Notes: Does not include backbill
* ------------------------------------------------------------------------------------------
* Hist:	01	03/20/2017		Colleen Rocks		Case #01427296; initial version
********************************************************************************************/
AS
BEGIN
    SET NOCOUNT ON;

/*Greystar Report - Invoice Cost, Rate card rate, lead columns*/

-----------------------------------
/*Declare and set variables*/
-----------------------------------
/*
--test:
DECLARE @MgtCoID VARCHAR(18) = '001E000000DmGZXIA3'
   ,@Month DATE = '02/01/2017'
   */

    DECLARE @MgtCoName VARCHAR(250)
       ,@StartYMDID INT
       ,@EndYMDID INT;

    SET @MgtCoName = (
                      SELECT    a.Name
                      FROM      SalesForce.dbo.Account AS a
                      WHERE     a.Id = @MgtCoID
                     );
    SET @StartYMDID = CAST(CONVERT(VARCHAR(8),@Month,112) AS INT);
    SET @EndYMDID = CAST(CONVERT(VARCHAR(8),EOMONTH(@Month),112) AS INT);


-----------------------------------
/*Drop temp tables*/
-----------------------------------
    BEGIN TRY
        DROP TABLE #ClientRateCard;
    END TRY
    BEGIN CATCH 
    END CATCH;

    BEGIN TRY
        DROP TABLE #CostData;
    END TRY
    BEGIN CATCH 
    END CATCH;

    BEGIN TRY
        DROP TABLE #Savings;
    END TRY
    BEGIN CATCH 
    END CATCH;

    BEGIN TRY
        DROP TABLE #Leads;
    END TRY
    BEGIN CATCH 
    END CATCH;	

-----------------------------------
/*Get all property accounts and appropriate 
local market rate card column*/
-----------------------------------
    SELECT  x.Id AS accountID
           ,x.Rate_Card__c AS RateCard
           ,CASE WHEN x.CategoryPiece = 'UnitPrice' THEN 'UnitPrice__c'
                 WHEN x.UnitCountPiece = '' THEN 'UnitPrice__c'
                 ELSE CONCAT('price_',x.CategoryPiece,'_',x.UnitCountPiece,'__c')
            END AS RateCardColumn
    INTO    #ClientRateCard
    FROM    (
             SELECT a.Id
                   ,a.Rate_Card__c
                   ,a.Name
                   ,a.CategoryP__c
                   ,CASE WHEN a.CategoryP__c = 'Unit Based' THEN '1'
                         WHEN a.CategoryP__c = 'Step Up' THEN '2'
                         WHEN a.CategoryP__c = 'Affordable / Tax' THEN '3'
                         WHEN a.CategoryP__c = 'College' THEN '7'
                         WHEN a.CategoryP__c = 'Corporate' THEN '5'
                         WHEN a.CategoryP__c = 'Senior' THEN '4'
                         WHEN a.CategoryP__c = 'Military' THEN '6'
                         ELSE 'UnitPrice'
                    END AS CategoryPiece
                   ,a.Number_of_Units__c
                   ,CASE WHEN a.Number_of_Units__c BETWEEN 1 AND 19 THEN 'A'
                         WHEN a.Number_of_Units__c BETWEEN 20 AND 49 THEN 'B'
                         WHEN a.Number_of_Units__c BETWEEN 50 AND 99 THEN 'C'
                         WHEN a.Number_of_Units__c BETWEEN 100 AND 149 THEN 'D'
                         WHEN a.Number_of_Units__c BETWEEN 150 AND 199 THEN 'E'
                         WHEN a.Number_of_Units__c BETWEEN 200 AND 299 THEN 'F'
                         WHEN a.Number_of_Units__c >= 300 THEN 'G'
                         ELSE ''
                    END AS UnitCountPiece
             FROM   SalesForce.dbo.Account AS a
             WHERE  a.ParentId = @MgtCoID
            ) AS x;

-----------------------------------
/*Get cost data from EpicorFinance*/
-----------------------------------	
    SELECT  ed.Date
           ,c.CubeClientBusinessKey
           ,c.CubeClientBusinessKeySource
           ,c.CBSAName
           ,c.PropertyName
           ,c.ClientAddress1 AS PropertyAddress
           ,c.AGManagementCompanyName
           ,ct.ClientType
           ,i.ItemBusinessKey
           ,i.ItemDescription
           ,rh.RevenueChannel
           ,COUNT(DISTINCT r.ClientKey) AS ClientCount
           ,SUM(r.AGRevenue) AS AGCost
           ,SUM(r.RentRevenue) AS RentCost
           ,SUM(r.Revenue) AS TotalCost
           ,SUM(r.OriginalRate) AS TotalOpenRate
    INTO    #CostData
    FROM    EpicorFinance.Fact.Revenue AS r
    JOIN    EpicorFinance.Conformed.Dates AS ed
            ON r.FinancialDateKey = ed.DateKey
    JOIN    EpicorFinance.Conformed.Client AS c
            ON r.ClientKey = c.ClientKey
    JOIN    EpicorFinance.Conformed.ClientType AS ct
            ON r.ClientTypeKey = ct.ClientTypeKey
    JOIN    EpicorFinance.Conformed.RevenueCategory AS rc
            ON r.RevenueCategoryKey = rc.RevenueCategoryKey
    JOIN    EpicorFinance.Conformed.RevenueChannel AS rh
            ON r.RevenueChannelKey = rh.RevenueChannelKey
    JOIN    EpicorFinance.Conformed.Item AS i
            ON r.ItemKey = i.ItemKey
    WHERE   r.FinancialDateKey BETWEEN @StartYMDID
                               AND     @EndYMDID
            AND r.MonthGroupKey = 1
            AND r.RevenueCategoryKey <> 11
            AND c.CubeClientBusinessKey IN (SELECT  accountID
                                            FROM    #ClientRateCard)
    GROUP BY ed.Date
           ,c.CubeClientBusinessKey
           ,c.CubeClientBusinessKeySource
           ,c.CBSAName
           ,c.PropertyName
           ,c.ClientAddress1
           ,c.AGManagementCompanyName
           ,ct.ClientType
           ,i.ItemBusinessKey
           ,i.ItemDescription
           ,rh.RevenueChannel;

-----------------------------------
/*Mash up cost data with original GEO
rate card price*/
-----------------------------------	
    SELECT  cd.Date
           ,cd.CubeClientBusinessKey
           ,cd.CubeClientBusinessKeySource
           ,cd.CBSAName
           ,cd.PropertyName
           ,cd.PropertyAddress
           ,cd.AGManagementCompanyName
           ,cd.ClientType
           ,cd.ItemBusinessKey
           ,cd.ItemDescription
           ,cd.RevenueChannel
           ,cd.ClientCount
           ,cd.AGCost
           ,cd.RentCost
           ,cd.TotalCost
           ,cd.TotalOpenRate
           ,ISNULL(CASE WHEN col.RateCardColumn = 'price_1_A__c' THEN rce.price_1_A__c
                        WHEN col.RateCardColumn = 'price_1_B__c' THEN rce.price_1_B__c
                        WHEN col.RateCardColumn = 'price_1_C__c' THEN rce.price_1_C__c
                        WHEN col.RateCardColumn = 'price_1_D__c' THEN rce.price_1_D__c
                        WHEN col.RateCardColumn = 'price_1_E__c' THEN rce.price_1_E__c
                        WHEN col.RateCardColumn = 'price_1_F__c' THEN rce.price_1_F__c
                        WHEN col.RateCardColumn = 'price_1_G__c' THEN rce.price_1_G__c
                        WHEN col.RateCardColumn = 'price_2_A__c' THEN rce.price_2_A__c
                        WHEN col.RateCardColumn = 'price_2_B__c' THEN rce.price_2_B__c
                        WHEN col.RateCardColumn = 'price_2_C__c' THEN rce.price_2_C__c
                        WHEN col.RateCardColumn = 'price_2_D__c' THEN rce.price_2_D__c
                        WHEN col.RateCardColumn = 'price_2_E__c' THEN rce.price_2_E__c
                        WHEN col.RateCardColumn = 'price_2_F__c' THEN rce.price_2_F__c
                        WHEN col.RateCardColumn = 'price_2_G__c' THEN rce.price_2_G__c
                        WHEN col.RateCardColumn = 'price_3_A__c' THEN rce.price_3_A__c
                        WHEN col.RateCardColumn = 'price_3_B__c' THEN rce.price_3_B__c
                        WHEN col.RateCardColumn = 'price_3_C__c' THEN rce.price_3_C__c
                        WHEN col.RateCardColumn = 'price_3_D__c' THEN rce.price_3_D__c
                        WHEN col.RateCardColumn = 'price_3_E__c' THEN rce.price_3_E__c
                        WHEN col.RateCardColumn = 'price_3_F__c' THEN rce.price_3_F__c
                        WHEN col.RateCardColumn = 'price_3_G__c' THEN rce.price_3_G__c
                        WHEN col.RateCardColumn = 'price_4_A__c' THEN rce.price_4_A__c
                        WHEN col.RateCardColumn = 'price_4_B__c' THEN rce.price_4_B__c
                        WHEN col.RateCardColumn = 'price_4_C__c' THEN rce.price_4_C__c
                        WHEN col.RateCardColumn = 'price_4_D__c' THEN rce.price_4_D__c
                        WHEN col.RateCardColumn = 'price_4_E__c' THEN rce.price_4_E__c
                        WHEN col.RateCardColumn = 'price_4_F__c' THEN rce.price_4_F__c
                        WHEN col.RateCardColumn = 'price_4_G__c' THEN rce.price_4_G__c
                        WHEN col.RateCardColumn = 'price_5_A__c' THEN rce.price_5_A__c
                        WHEN col.RateCardColumn = 'price_5_B__c' THEN rce.price_5_B__c
                        WHEN col.RateCardColumn = 'price_5_C__c' THEN rce.price_5_C__c
                        WHEN col.RateCardColumn = 'price_5_D__c' THEN rce.price_5_D__c
                        WHEN col.RateCardColumn = 'price_5_E__c' THEN rce.price_5_E__c
                        WHEN col.RateCardColumn = 'price_5_F__c' THEN rce.price_5_F__c
                        WHEN col.RateCardColumn = 'price_5_G__c' THEN rce.price_5_G__c
                        WHEN col.RateCardColumn = 'price_6_A__c' THEN rce.price_6_A__c
                        WHEN col.RateCardColumn = 'price_6_B__c' THEN rce.price_6_B__c
                        WHEN col.RateCardColumn = 'price_6_C__c' THEN rce.price_6_C__c
                        WHEN col.RateCardColumn = 'price_6_D__c' THEN rce.price_6_D__c
                        WHEN col.RateCardColumn = 'price_6_E__c' THEN rce.price_6_E__c
                        WHEN col.RateCardColumn = 'price_6_F__c' THEN rce.price_6_F__c
                        WHEN col.RateCardColumn = 'price_6_G__c' THEN rce.price_6_G__c
                        WHEN col.RateCardColumn = 'price_7_A__c' THEN rce.price_7_A__c
                        WHEN col.RateCardColumn = 'price_7_B__c' THEN rce.price_7_B__c
                        WHEN col.RateCardColumn = 'price_7_C__c' THEN rce.price_7_C__c
                        WHEN col.RateCardColumn = 'price_7_D__c' THEN rce.price_7_D__c
                        WHEN col.RateCardColumn = 'price_7_E__c' THEN rce.price_7_E__c
                        WHEN col.RateCardColumn = 'price_7_F__c' THEN rce.price_7_F__c
                        WHEN col.RateCardColumn = 'price_7_G__c' THEN rce.price_7_G__c
                        WHEN col.RateCardColumn = 'UnitPrice__c' THEN rce.UnitPrice__c
                   END,rce.UnitPrice__c) AS OriginalPrice
    INTO    #Savings
    FROM    #CostData AS cd
    INNER JOIN #ClientRateCard AS col
            ON cd.CubeClientBusinessKey = col.accountID
    LEFT OUTER JOIN SalesForce.dbo.ProductFulfillment__c AS pfc
            ON cd.ItemBusinessKey = pfc.SKU__c
    LEFT OUTER JOIN SalesForce.dbo.Rate_Card_Entry__c AS rce
            ON col.RateCard = rce.RateCardId__c
               AND pfc.Product__c = rce.ProductId__c;

-----------------------------------
/*Get leads data*/
-----------------------------------
    SELECT  CAST(ml.YearMonth AS VARCHAR(6)) AS YearMonth
           ,l.MgtCoNameAG
           ,l.ExternalID AS MgtCoBusinessUnit
           ,l.SFPropertyAcctID
           ,l.BillingIDAG AS ClientID
           ,l.PropertyIDAG
           ,l.ListingID
           ,l.PropertyName
           ,l.PropertyAddress
           ,l.PropertyZipCode
           ,l.CBSACode
           ,l.CBSAName
           ,SUM(ml.EmailLeads) AS EmailLeads
           ,SUM(ml.PhoneLeads) AS PhoneLeads
           ,SUM(ml.AllLeads) AS TotalLeads
           ,SUM(ml.StatusIDAG) AS DaysActiveAG
           ,SUM(ml.StatusIDRent) AS DaysActiveRent
           ,SUM(ml.EmailLeadsAG) AS AGEmails
           ,SUM(ml.EmailLeadsRent) AS RentEmails
           ,SUM(ml.PhoneLeadsAG) + SUM(ml.MissedCallsAG) AS AGPhone
           ,SUM(ml.PhoneLeadsRent) + SUM(ml.MissedCallsRent) AS RentPhone
           ,MAX(ml.StatusIDAG) AS AGStatus
           ,MAX(ml.StatusIDRent) AS RentStatus
    INTO    #Leads
    FROM    RentPath.Dimension.Listings AS l
    JOIN    RentPath.Mart.Listings AS ml
            ON l.ListingID = ml.ListingID
    WHERE   ml.YMDID BETWEEN @StartYMDID AND @EndYMDID
            AND l.SFPropertyAcctID IN (SELECT DISTINCT
                                                accountID
                                       FROM     #ClientRateCard)
    GROUP BY CAST(ml.YearMonth AS VARCHAR(6))
           ,l.MgtCoNameAG
           ,l.ExternalID
           ,l.SFPropertyAcctID
           ,l.BillingIDAG
           ,l.PropertyIDAG
           ,l.ListingID
           ,l.PropertyName
           ,l.PropertyAddress
           ,l.PropertyZipCode
           ,l.CBSACode
           ,l.CBSAName;

-----------------------------------
/*Get final results*/ 
-----------------------------------	
    SELECT  DATENAME(MONTH,x.FinancialDate) AS [MonthName]
           ,YEAR(x.FinancialDate) AS [Year]
		   ,CONCAT(DATENAME(MONTH,x.FinancialDate),' ',YEAR(x.FinancialDate)) AS MonthYear
           ,l.DaysActiveAG
           ,l.DaysActiveRent
           ,x.ClientType AS AdvertisingStatus
           ,l.MgtCoNameAG
		   ,l.MgtCoBusinessUnit
           ,x.AGManagementCompanyName AS MgmtClientName
           ,@MgtCoID AS MgmtClientID
           ,x.CubeClientBusinessKey AS ClientID
           ,l.MgtCoBusinessUnit
           ,l.PropertyName
           ,l.PropertyAddress
           ,l.PropertyZipCode
           ,l.CBSACode
           ,l.CBSAName
           ,x.ClientCount
           ,x.CoreProducts
           ,x.CoreUnitPrice
           ,x.CoreTotalCost
           ,x.NonCoreProducts
           ,x.NonCoreUnitPrice
           ,x.NonCoreTotalCost
           ,l.YearMonth
           ,l.EmailLeads
           ,l.PhoneLeads
           ,l.AGEmails
           ,l.RentEmails
           ,l.AGPhone
           ,l.RentPhone
           ,x.TotalUnitPrice
           ,x.TotalCost
           ,x.TotalUnitPrice - x.TotalCost AS TotalSavings
           ,ISNULL(1 - (CAST(ISNULL(x.TotalCost,0) AS MONEY) / NULLIF(CAST(ISNULL(x.TotalUnitPrice,0) AS MONEY),0)),0) AS TotalDiscountPct
           ,CAST(ISNULL(x.TotalUnitPrice,0) AS MONEY) - CAST(ISNULL(x.TotalCost,0) AS MONEY) AS TotalDiscountAmt
           ,l.TotalLeads
           ,CAST(ISNULL(x.TotalCost,0) AS MONEY) / NULLIF(l.TotalLeads,0) AS CPL
           ,Ave.CBSAAverage
    FROM    (
             SELECT c.[Date] AS FinancialDate
                   ,LEFT(CAST(CONVERT(VARCHAR(8),c.[Date],112) AS INT),6) AS YearMonth
                   ,c.CubeClientBusinessKey
                   ,c.CubeClientBusinessKeySource
                   ,c.CBSAName
                   ,c.PropertyName
                   ,c.PropertyAddress
                   ,c.AGManagementCompanyName
                   ,c.ClientType
                   ,c.ClientCount
                   ,STUFF((
                           SELECT   ', ' + ItemDescription
                           FROM     #Savings
                           WHERE    CubeClientBusinessKey = c.CubeClientBusinessKey
                                    AND RevenueChannel = 'Basic'
                                    AND Date = c.Date
                           GROUP BY ItemDescription
                           ORDER BY ItemDescription
                          FOR
                           XML PATH('')
                          ),1,2,'') AS CoreProducts
                   ,STUFF((
                           SELECT   ', ' + ItemBusinessKey
                           FROM     #Savings
                           WHERE    CubeClientBusinessKey = c.CubeClientBusinessKey
                                    AND RevenueChannel = 'Basic'
                                    AND Date = c.Date
                           GROUP BY ItemBusinessKey
                           ORDER BY ItemBusinessKey
                          FOR
                           XML PATH('')
                          ),1,2,'') AS CoreItemIDS
                   ,STUFF((
                           SELECT   ', ' + ItemDescription
                           FROM     #Savings
                           WHERE    CubeClientBusinessKey = c.CubeClientBusinessKey
                                    AND RevenueChannel <> 'Basic'
                                    AND Date = c.Date
                           GROUP BY ItemDescription
                           ORDER BY ItemDescription
                          FOR
                           XML PATH('')
                          ),1,2,'') AS NonCoreProducts
                   ,STUFF((
                           SELECT   ', ' + ItemBusinessKey
                           FROM     #Savings
                           WHERE    CubeClientBusinessKey = c.CubeClientBusinessKey
                                    AND RevenueChannel <> 'Basic'
                                    AND Date = c.Date
                           GROUP BY ItemBusinessKey
                           ORDER BY ItemBusinessKey
                          FOR
                           XML PATH('')
                          ),1,2,'') AS NonCoreItemIDs
                   ,SUM(CASE WHEN c.RevenueChannel = 'Basic' THEN c.OriginalPrice
                             ELSE 0
                        END) AS CoreUnitPrice
                   ,SUM(CASE WHEN c.RevenueChannel = 'Basic' THEN c.TotalCost
                             ELSE 0
                        END) AS CoreTotalCost
                   ,SUM(CASE WHEN c.RevenueChannel <> 'Basic' THEN c.OriginalPrice
                             ELSE 0
                        END) AS NonCoreUnitPrice
                   ,SUM(CASE WHEN c.RevenueChannel <> 'Basic' THEN c.TotalCost
                             ELSE 0
                        END) AS NonCoreTotalCost
                   ,SUM(c.OriginalPrice) AS TotalUnitPrice
                   ,SUM(c.TotalCost) AS TotalCost
             FROM   #Savings AS c
             GROUP BY c.Date
                   ,c.CubeClientBusinessKey
                   ,c.CubeClientBusinessKeySource
                   ,c.CBSAName
                   ,c.PropertyName
                   ,c.PropertyAddress
                   ,c.AGManagementCompanyName
                   ,c.ClientType
                   ,c.ClientCount
            ) AS x
    INNER JOIN #Leads AS l
            ON x.CubeClientBusinessKey = l.SFPropertyAcctID
    LEFT OUTER JOIN (
                     SELECT COALESCE(ld.CBSACode,ls.CBSACode) AS CBSACode
                           ,ld.TotalLeads / ls.Listings AS CBSAAverage
                     FROM   (
                             SELECT dl.CBSACode
                                   ,SUM(ml.AllLeads) AS TotalLeads
                             FROM   RentPath.Mart.Listings AS ml
                             JOIN   RentPath.Dimension.Listings AS dl
                                    ON ml.ListingID = dl.ListingID
                             WHERE  ml.YMDID BETWEEN @StartYMDID AND @EndYMDID
                             GROUP BY dl.CBSACode
                            ) ld
                     JOIN   (
                             SELECT dl.CBSACode
                                   ,COUNT(DISTINCT ml.ListingID) AS Listings
                             FROM   RentPath.Mart.Listings AS ml
                             JOIN   RentPath.Dimension.Listings AS dl
                                    ON ml.ListingID = dl.ListingID
                             WHERE  ml.YMDID BETWEEN @StartYMDID AND @EndYMDID
                                    AND (ml.StatusIDAG = 1
                                         OR ml.StatusIDRent = 1)
                             GROUP BY dl.CBSACode
                            ) ls
                            ON ld.CBSACode = ls.CBSACode
                    ) Ave
            ON l.CBSACode = Ave.CBSACode;

    SET NOCOUNT OFF;
END; 







GO
/****** Object:  StoredProcedure [Reports].[rpt_Send_Test_Subscription]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO












/*--######################################################################################
*
* Name:	[Reports].[rpt_Send_Test_Subscription]
*
* Desc:  Send test subscription
*
* Test:	
EXEC Reports.rpt_Send_Test_Subscription 0,'1A0D6CD1-1C7B-4588-A45A-85EF9654285C','blangley@rentpath.com','ListingID, TotalPhoneLeads, CouponStartDate, ExternalPropertyID, TotalLeads, TotalEmailLeads',NULL
EXEC Reports.rpt_Send_Test_Subscription 0,'1A0D6CD1-1C7B-4588-A45A-85EF9654285C','blangley@rentpath.com','ListingID, TotalPhoneLeads, CouponStartDate, ExternalPropertyID, TotalLeads, TotalEmailLeads',2
EXEC Reports.rpt_Send_Test_Subscription 100052871,'1A0D6CD1-1C7B-4588-A45A-85EF9654285C','blangley@rentpath.com','ListingID, TotalPhoneLeads, CouponStartDate, ExternalPropertyID, TotalLeads, TotalEmailLeads',3
EXEC Reports.rpt_Send_Test_Subscription 100052871,'1A0D6CD1-1C7B-4588-A45A-85EF9654285C','blangley@rentpath.com','ListingID, TotalPhoneLeads, CouponStartDate, ExternalPropertyID, TotalLeads, TotalEmailLeads',2
EXEC Reports.rpt_Send_Test_Subscription 100052871,'1A0D6CD1-1C7B-4588-A45A-85EF9654285C','blangley@rentpath.com','ListingID, TotalPhoneLeads, CouponStartDate, ExternalPropertyID, TotalLeads, TotalEmailLeads',NULL

DEV
EXEC Reports.rpt_Send_Test_Subscription 100518,'1A0D6CD1-1C7B-4588-A45A-85EF9654285C','blangley@rentpath.com','ListingID, TotalPhoneLeads, CouponStartDate, ExternalPropertyID, TotalLeads, TotalEmailLeads',2
EXEC Reports.rpt_Send_Test_Subscription 100518,'1A0D6CD1-1C7B-4588-A45A-85EF9654285C','blangley@rentpath.com','ListingID, TotalPhoneLeads, CouponStartDate, ExternalPropertyID, TotalLeads, TotalEmailLeads',3



EXEC Reports.rpt_Send_Test_Subscription 0,'1A0D6CD1-1C7B-4588-A45A-85EF9654285C','blangley@rentpath.com','YearMonthDay,MonthDayYear,YearMonth,ListingID,AGPropertyID,RentPropertyID,ExternalPropertyID,AGStatusID,RentStatusID,AGMgtCoName,RentMgtCoName,PropertyName,PropertyAddress,PropertyCity,PropertyState,PropertyZipCode,AGAvgOverallRatings,RentAvgOverallRatings,NumberofCertifiedReview,AGPlacementTier,RentPlacementTier,TotalPoints,CBSAName,AGPropertyURL,RentPropertyURL,ReportURLLeads,ReportURLPageViews,ActiveHDFloorplans,ActiveHDPhotos,ActivePhotos,ActiveAmenities,ActiveFloorplans,AGSitesURL,LowRentalRate,HighRentalRate,AVGCBSALowRentalRate,AVGCBSAHighRentalRate,AVGZipLowRentalRate,AVGZipHighRentalRate,AVGCityLowRentalRate,AVGCityHighRentalRate,ActiveCoupononSite,CouponExpirationDate,CouponStartDate,CouponText,MobileCouponExpirationDate,MobileCouponStartDate,MobileCouponText,Linked3DFloorplans,LinkedRoomPlanner,TotalUnits,ShowsOfficeHours,ShowsPricing,Whisper,30SecondVideoUpsell,3DFloorplanUpsell,60SecondVideoUpsell,AGSitesUpsell,CommunityCarousel,Coupon,DiamondCity,DiamondMax,DiamondMetro,EasyPay,FloorplanUpgrade,AGHDPanoTours,HDPhoto,HDVideo,Highlighted,MobileDiamond,MobileSpotLight,PayPerLead,PayPerLease,RentalsCarousel,RentalsListing,RentalsSpotlight,RentalsStandard,RentalsStandardPlu,SponsoredApartment,SpotLight,ManagementPeelAd,CallRecording,CommunityVideo,DynamicLeadForm,GoldFeaturedCommunity,PlatinumFeaturedCommunity,SilverFeaturedCommunity,MobileDeal,PhotoUpgrade,PremiumUpgrade,RentalsFeatured,RentalsPremier,ReputationMonitor,SocialMediaManager,RentFeaturedPlacement,RentPTE,RentVIPPlacement,MediaCenter,RentMetroFeaturedListing,RentSpotlight,RentSubscription,CorporateBadge,CollegeBadge,MilitaryBadge,SeniorBadge,LuxuryBadge,CurrentMonthlySpend,TotalLeads,TotalPhoneLeads,TotalEmailLeads,UniqueDetailVisits,MobileDetailUniqueVisits,DetailPageViews,MobileDetailPageViews,AGSitesPageViews,SpotlightClicks,VideoClicks,SpotlightVideoClicks,PropertyWebLinkClicks,MgtCoWebLinkClicks,PropertyMapClicks,MapDirectionClicks,PhotoClicks,SpotlightPhotoClicks,SpotlightPhotoPopupClicks,FloorplanClicks,PanoramicToursClicks,HDVideosClicks,HDPhotosClicks,MgtCoPeelAdClicks,ReserveNowClicks,SearchResultsImpressions,DetailDiamondMaxImpressions,DetailVisitCountImpressions',NULL
EXEC Reports.rpt_Send_Test_Subscription 0,'1A0D6CD1-1C7B-4588-A45A-85EF9654285C','blangley@rentpath.com','YearMonthDay,MonthDayYear,YearMonth,ListingID,AGPropertyID,RentPropertyID,ExternalPropertyID',NULL

EXEC Reports.rpt_Send_Test_Subscription 2652,'1A0D6CD1-1C7B-4588-A45A-85EF9654285C','blangley@rentpath.com','ListingID,TotalLeads,TotalPhoneLeads,TotalEmailLeads',1
*
*
* Hist:	01	02/11/2015	Bob Langley		Ticket 18155 - Initial Version 
* Hist: 02	06/02/2015	Bob Langley		Ticket 19612 - Changed to add the new AdvancedReportType column
* Hist: 03	06/08/2015	Bob Langley		Ticket 19612 - Changed to add logic for using the AdvancedReportTYpe column
* Hist: 04	07/10/2015	Bob Langley		Ticket 20040 - Changed to add check for = 1 to check if null for @advancedreporttype to make 1 do same thing as NULL.
* Hist: 05	12/02/2015	Bob Langley		Ticket XXXXX - Changed to set max record size to 32767 (was default of 256).
* Hist: 06	01/20/2016	Bob Langley		Ticket 21874 - Changed to allow email address size of 2000 (was 200), to allow for multiple email addresses
* Hist: 07	01/21/2016	Kimberley Morrow Ticket 21858 - Add flags for Axio Data Product
* Hist: 08	05/18/2016	Kimberley Morrow Ticket 23085;  Add Axio Market ID
--#######################################################################################*/
CREATE PROCEDURE [Reports].[rpt_Send_Test_Subscription]
(@propertyid	int = NULL
,@userguid	uniqueidentifier	= NULL			--is the Creator id value (uniqueidentifier) (This is who the subscription belongs to)
,@emailaddress	varchar(2000) = NULL
,@displaycolumns	varchar(4000) = NULL
,@advancedreporttype	int = NULL)
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
    SET NOCOUNT ON;
	
	/* Testing 
	DECLARE @propertyid	int = 100052871
	DECLARE @userguid	uniqueidentifier	='1A0D6CD1-1C7B-4588-A45A-85EF9654285C'		--is the Creator id value (uniqueidentifier) (This is who the subscription belongs to)
	DECLARE @emailaddress	varchar(200) = 'blangley@rentpath.com'
	DECLARE @displaycolumns	varchar(4000) = 'ListingID, TotalPhoneLeads, CouponStartDate, ExternalPropertyID, TotalLeads, TotalEmailLeads'
	DECLARE @advancedreporttype	int = 3
	*/



	DECLARE
		@ErrorMessage					NVARCHAR(4000),
		@ErrorNumber					INT,
		@ErrorSeverity					INT,
		@ErrorState						INT,
		@ErrorLine						INT,
		@ErrorProcedure					NVARCHAR(200)



	--DECLARE @userid int

	DECLARE @sqlcmd nvarchar(MAX)
	DECLARE @sqlcmd2 varchar(8000)
	DECLARE @columnlist varchar(max)
	DECLARE @columnlistplain varchar(max)
	DECLARE @columnvalues varchar(max)

	DECLARE @agpropid int

	DECLARE @topnumprops int
	SET @topnumprops = 10


	DECLARE  @proplist varchar(7000)
	DECLARE	@dbname varchar(300)
	SET @dbname = DB_NAME()

	BEGIN TRY
		DROP TABLE #tmpelementlist
	END TRY
	BEGIN CATCH
	END CATCH


	CREATE TABLE #tmpelementlist
	(DataElement	varchar(300)
	,DataType		varchar(300)
	)



	/* ===================================================================================================================== */
	--Main Section
	BEGIN TRY

		SET @sqlcmd = ''

		BEGIN TRY
			DROP TABLE #tmppropertylist
		END TRY
		BEGIN CATCH
		END CATCH

		CREATE TABLE #tmppropertylist
		(UserGUID	uniqueidentifier
		,AGPropertyID	int
		,RentPropertyID	int
		,PropertyName	varchar(2000)
		,PropertyCity	varchar(2000)
		,PropertyState	varchar(100)
		,PropertyZip	int
		,AGStatus		int
		,RentStatus		int
		,TotalUserCanSee int
		,ProjectID		varchar(128)
		,MarketID		varchar(128)
		,AxioActive		int
		)

		BEGIN TRY
			DROP TABLE #tmpcolumns
		END TRY
		BEGIN CATCH
		END CATCH
		


		
				
		--get list of allowed PropertyID values for the user on this subscription
		if @propertyid = 0
			BEGIN
				INSERT INTO 
				#tmppropertylist
				EXEC Reports.rpt_PropertyDisplay @userguid,100000,NULL			--creator is the @userguid
			END
		else
			BEGIN
				INSERT INTO 
				#tmppropertylist
				VALUES(NULL,@PropertyID,0,'','','',0,0,0,0,NULL,NULL,0)
			END


		if @advancedreporttype IS NULL OR @advancedreporttype = 1		--is a advancedsubscription, not an AdvancedReport situation
			BEGIN
				if @propertyid = 0
					BEGIN
						SET @proplist = CONVERT(varchar(4000),STUFF(
											(
												SELECT TOP (@topnumprops) ',' + CONVERT(varchar(4000),dl3.AGPropertyID)			--just do the top N properties' data
												FROM #tmppropertylist dl3 WITH (NOLOCK)
												FOR XML PATH(''), type
											).value('.','varchar(4000)'),1,1,''
										)) --AS ColumnNames
					END
				else		-- <> 0
					BEGIN
						SET @proplist = CONVERT(varchar(30),@propertyid)
					END



				
				SELECT LTRIM(RTRIM(Params.measure)) AS ColumnName
					INTO   #tmpcolumns
					FROM   Dbautility.dbo.fn_Split(@displaycolumns,',')		AS Params
			
				--set the values to use as the first row of data, which is the column names
				SET @columnlist = CONVERT(varchar(max),STUFF(
									(
										SELECT  ',' + '''"' + CONVERT(varchar(4000),dl3.ColumnName) + '"'''
										FROM #tmpcolumns dl3 WITH (NOLOCK)
										FOR XML PATH(''), type
									).value('.','varchar(max)'),1,1,''
								)) --AS ColumnNames



				SET @sqlcmd2 = 'USE ' + @dbname + '; INSERT INTO #tmpelementlist SELECT 
				COLUMN_NAME AS DataElement
				, DATA_TYPE AS DataType
				FROM information_schema.columns gg
				WHERE TABLE_SCHEMA = ''Staging''
				AND TABLE_NAME = ''DashboardAdvancedSubscriptionMainData'''

				EXEC (@sqlcmd2)


				SET @columnvalues = ''
				SET @columnvalues = CONVERT(varchar(max),STUFF(
									(
										SELECT  ',' + 
										(CASE WHEN (SELECT DataType FROM #tmpelementlist WHERE DataElement = dl3.ColumnName) IN ('varchar','char','nvarchar','nchar') THEN '''"''' + '+'
										WHEN (SELECT DataType FROM #tmpelementlist WHERE DataElement = dl3.ColumnName) IN ('date','datetime') THEN 'CONVERT(varchar(30),' 
										ELSE 'CONVERT(varchar(4000),' END) 
										+ '[' + CONVERT(varchar(4000),dl3.ColumnName) + ']' + 
										(CASE WHEN (SELECT DataType FROM #tmpelementlist WHERE DataElement = dl3.ColumnName) IN ('varchar','char','nvarchar','nchar') THEN  '+' + '''"''' --+ ' AS ' + dl3.ColumnName
										WHEN (SELECT DataType FROM #tmpelementlist WHERE DataElement = dl3.ColumnName) IN ('date','datetime') THEN ',101) ' --+ ' AS ' + dl3.ColumnName 
										ELSE ') ' /*+ ' AS ' + dl3.ColumnName*/ END)
										FROM #tmpcolumns dl3 WITH (NOLOCK)
										FOR XML PATH(''), type
									).value('.','varchar(max)'),1,1,''
								)) 




				SET @sqlcmd = 'SET NOCOUNT ON; SELECT  ' + @columnlist + ' UNION SELECT ' + @columnvalues + ' FROM ' + @dbname + '.Staging.DashboardAdvancedSubscriptionMainData WHERE AGPropertyID IN (' + @proplist + '); SET NOCOUNT OFF;'

			END		




		if @advancedreporttype IN (2,3)			--is an AdvancedReport situation, so trumps the alternative Advanced Subscription situation (no subscriptionId, but has columns to print, and does default time period)
			BEGIN


				--Truncate the tables
				if @advancedreporttype = 2		--email leads detail
					BEGIN
						TRUNCATE TABLE Staging.Dashboard_SendTestSub_EmailDetail 
					END
				if @advancedreporttype = 3		--phone leads detail
					BEGIN
						TRUNCATE TABLE Staging.Dashboard_SendTestSub_PhoneDetail 
					END

				/* =================================================================================================================================================== */
				DECLARE myCursorVariable32134 CURSOR FOR  
					SELECT TOP (@topnumprops) AGPropertyID FROM #tmppropertylist dl3 WITH (NOLOCK)					--only do the first N properties

				OPEN myCursorVariable32134

				-- Loop through all the files for the database  
				FETCH NEXT FROM myCursorVariable32134 INTO @agpropid

				WHILE @@FETCH_STATUS = 0
					BEGIN  


						--insert the data for this propertyid into the temp table for email details
						if @advancedreporttype = 2		--email leads detail
							BEGIN
								INSERT INTO Staging.Dashboard_SendTestSub_EmailDetail
								EXEC Reports.rpt_PropertyEmailLeadsDetail_For_AdvancedReport  @agpropid, NULL;
							END
						if @advancedreporttype = 3		--phone leads detail
							BEGIN
								INSERT INTO Staging.Dashboard_SendTestSub_PhoneDetail
								EXEC Reports.rpt_PropertyPhoneLeadsDetail_For_AdvancedReport  @agpropid, NULL;
							END

						FETCH NEXT FROM myCursorVariable32134 INTO @agpropid
					END 

				CLOSE myCursorVariable32134
				DEALLOCATE myCursorVariable32134

				/* =================================================================================================================================================== */
				--set the values to use as the first row of data, which is the column names
				TRUNCATE TABLE #tmpelementlist
				SET @sqlcmd2 = 'USE ' + @dbname + '; INSERT INTO #tmpelementlist SELECT 
				COLUMN_NAME AS DataElement
				, DATA_TYPE AS DataType
				FROM information_schema.columns gg
				WHERE TABLE_SCHEMA = ''Staging''
				AND TABLE_NAME = '


				if @advancedreporttype = 2		--email leads detail
					BEGIN
						SET @sqlcmd2 = @sqlcmd2 + '''Dashboard_SendTestSub_EmailDetail'''
					END
				if @advancedreporttype = 3		--phone leads detail
					BEGIN
						SET @sqlcmd2 = @sqlcmd2 + '''Dashboard_SendTestSub_PhoneDetail'''
					END
				EXEC (@sqlcmd2)
				
				SET @columnlist = CONVERT(varchar(max),STUFF(
									(
										SELECT  ',' + '''"' + CONVERT(varchar(4000),dl3.DataElement) + '"'''
										FROM #tmpelementlist dl3 WITH (NOLOCK)
										FOR XML PATH(''), type
									).value('.','varchar(max)'),1,1,''
								)) --AS ColumnNames


				SET @columnlistplain = CONVERT(varchar(max),STUFF(
									(
										SELECT  ',[' + CONVERT(varchar(4000),dl3.DataElement) + ']'
										FROM #tmpelementlist dl3 WITH (NOLOCK)
										FOR XML PATH(''), type
									).value('.','varchar(max)'),1,1,''
								)) --AS ColumnNames




				SET @columnvalues = CONVERT(varchar(max),STUFF(
									(
										SELECT  ',' + 
										(CASE WHEN dl3.DataType IN ('varchar','char','nvarchar','nchar') THEN 'CONVERT(varchar(4000),''"''' + '+'
										WHEN dl3.DataType IN ('date') THEN 'CONVERT(varchar(30),' 
										WHEN dl3.DataType IN ('datetime') THEN 'CONVERT(varchar(30),' 
										ELSE 'CONVERT(varchar(4000),' END) 
										+ '[' + CONVERT(varchar(4000),dl3.DataElement) + ']' + 
										(CASE WHEN dl3.DataType IN ('varchar','char','nvarchar','nchar') THEN  ' +' + '''"'')' --+ ' AS ' + dl3.ColumnName
										WHEN dl3.DataType IN ('date') THEN ',101) ' --+ ' AS ' + dl3.ColumnName 
										WHEN dl3.DataType IN ('datetime') THEN ',120) ' --+ ' AS ' + dl3.ColumnName 
										ELSE ') ' /*+ ' AS ' + dl3.ColumnName*/ END)
										FROM #tmpelementlist dl3 WITH (NOLOCK)
										--WHERE (@advancedreporttype = 2) OR (@advancedreporttype = 3 AND DataElement <> 'CallStartDateTime')		--for Phone, leave off this column from the output
										FOR XML PATH(''), type
									).value('.','varchar(max)'),1,1,''
								)) 
				

				/* =================================================================================================================================================== */

				/* saved the sort code in case we get it to work
				if @advancedreporttype = 2		--email leads detail
						SET @sqlcmd = 'SET NOCOUNT ON;  SELECT  ' + @columnlist + ' UNION SELECT ' + @columnvalues + ' FROM ' + @dbname + '.Staging.Dashboard_SendTestSub_EmailDetail ORDER BY YMDID, AGPropertyID, CONVERT(datetime,LeadDate) DESC; SET NOCOUNT OFF;'
				if @advancedreporttype = 3		--phone leads detail
						SET @sqlcmd = 'SET NOCOUNT ON;  SELECT  ' + @columnlist + ' UNION SELECT ' + @columnvalues + 'FROM ' + @dbname + '.Staging.Dashboard_SendTestSub_PhoneDetail ORDER BY YMDID, AGPropertyID, CallStartDateTime; SET NOCOUNT OFF;'


				*/
	
				if @advancedreporttype = 2		--email leads detail
						SET @sqlcmd = 'SET NOCOUNT ON;  SELECT  ' + @columnlist + ' UNION SELECT ' + @columnvalues + ' FROM ' + @dbname + '.Staging.Dashboard_SendTestSub_EmailDetail; SET NOCOUNT OFF;'
				if @advancedreporttype = 3		--phone leads detail
						SET @sqlcmd = 'SET NOCOUNT ON;  SELECT  ' + @columnlist + ' UNION SELECT ' + @columnvalues + 'FROM ' + @dbname + '.Staging.Dashboard_SendTestSub_PhoneDetail; SET NOCOUNT OFF;'


			END


				--PRINT @sqlcmd
				--EXEC (@sqlcmd)

		if @sqlcmd <> ''
			BEGIN
				EXEC msdb.dbo.sp_send_dbmail
				@profile_name = 'BI Team Account',
				@recipients = @emailaddress,
				@query = @sqlcmd,
				@subject = 'Test Subscription Message',
				@Body= 'Test Subscription with attached information.',
				@attach_query_result_as_file = 1,
				@query_attachment_filename = 'sample.csv',
				@query_result_separator = ',',
				@query_result_header = 0,
				@query_result_no_padding = 1,
				@exclude_query_output = 0,
				@append_query_error = 0,
				@query_no_truncate = 0,
				@query_result_width = 32767
			END


	END TRY
	BEGIN CATCH
		SELECT 
			@ErrorMessage		= ERROR_MESSAGE(),
			@ErrorNumber		= ERROR_NUMBER(),
			@ErrorSeverity		= ERROR_SEVERITY(),
			@ErrorState			= ERROR_STATE(),
			@ErrorLine			= ERROR_LINE(),
			@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');
		
		SET @ErrorMessage = 'Attempting to send Test Subscription information. In SPROC [Reports].[rpt_Send_Test_Subscription].  Error - ' + @ErrorMessage


		raiserror(@ErrorMessage,16,1) with log;

		RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	
	END CATCH

	/* ===================================================================================================================== */

	SET NOCOUNT OFF;
END;













GO
/****** Object:  StoredProcedure [Reports].[rpt_TierPerformanceAnalysis]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Reports].[rpt_TierPerformanceAnalysis] (
	@MarketCD VARCHAR(200) 
	,@Start datetime
	,@End datetime)
AS
--* Hist: 01	11/03/2016		Bob Langley			Ticket 24212 - Changed to add MissedCalls to leads (where does connectedcalls)

-- exec Reports.rpt_TierPerformanceAnalysis 'ALL','2015-01-01','2015-05-26 10:30:36.983'
--DECLARE @MarketCD VARCHAR(200) = NULL
--SET @MarketCD = 'Atlanta Apartment Guide'

DECLARE @StartYMDID INT, @EndYMDID INT
SELECT @StartYMDID = CONVERT(varchar(8),@Start,112)
		,@EndYMDID = CONVERT(varchar(8),@End,112)

BEGIN TRY
	DROP TABLE #temp
END TRY
BEGIN CATCH
END CATCH

select 
	'Rent' As Biz
	--,ml.PlacementTierRent	
	,CASE WHEN ml.PlacementTierRent = 5 THEN 'Diamond'
			WHEN ml.PlacementTierRent =10 THEN 'Platinum'
			WHEN ml.PlacementTierRent =20 THEN 'Gold'
			WHEN ml.PlacementTierRent =30 THEN 'Silver'
			ELSE 'NoTier'
			END as Tier
	,SUM(ml.[PhoneLeadsRent]) + SUM(ml.[MissedCallsRent]) + SUM(ml.[EmailLeadsRent]) leads	--Ticket 24212 added missed calls to connected for total
	,count(distinct dl.ListingID) as listings
	,(SUM(ml.[PhoneLeadsRent]) + SUM(ml.[MissedCallsRent]) + SUM(ml.[EmailLeadsRent]) *1.0 )/ count(distinct dl.ListingID) as LPP	--Ticket 24212 added missed calls to connected for total
	,COUNT(Distinct ml.ymdid) as daycnt
into #temp
from [Dimension].[Listings] dl
join [Mart].[Listings] ml on dl.listingid = ml.ListingID
where ml.YMDID BETWEEN @StartYMDID AND @EndYMDID
	and ml.StatusIDRent > 0
	and (@MarketCD = 'ALL' OR dl.MarketCD = @MarketCD)
group by 
	--ml.PlacementTierRent
	CASE WHEN ml.PlacementTierRent = 5 THEN 'Diamond'
			WHEN ml.PlacementTierRent =10 THEN 'Platinum'
			WHEN ml.PlacementTierRent =20 THEN 'Gold'
			WHEN ml.PlacementTierRent =30 THEN 'Silver'
			ELSE 'NoTier'
			END
union 
select 
	'AG' As Biz
	--,ml.PlacementTierRent	
	,CASE WHEN ml.PlacementTierAG = 5 THEN 'Diamond'
			WHEN ml.PlacementTierAG =10 THEN 'Platinum'
			WHEN ml.PlacementTierAG =20 THEN 'Gold'
			WHEN ml.PlacementTierAG =30 THEN 'Silver'
			ELSE 'NoTier'
			END as Tier
	,SUM(ml.[PhoneLeadsAG]) + SUM(ml.[MissedCallsAG]) + SUM(ml.[EmailLeadsAG]) leads	--Ticket 24212 added missed calls to connected for total
	,count(distinct dl.ListingID) as listings
	,(SUM(ml.[PhoneLeadsAG]) + SUM(ml.[MissedCallsAG]) + SUM(ml.[EmailLeadsAG]) *1.0 )/ count(distinct dl.ListingID) as LPP	--Ticket 24212 added missed calls to connected for total
	,COUNT(Distinct ml.ymdid) as daycnt
from [Dimension].[Listings] dl
join [Mart].[Listings] ml on dl.listingid = ml.ListingID
where ml.YMDID BETWEEN @StartYMDID AND @EndYMDID
	and ml.StatusIDAG > 0
	and (@MarketCD = 'ALL' OR dl.MarketCD = @MarketCD)
group by 
	--ml.PlacementTierRent
	CASE WHEN ml.PlacementTierAG = 5 THEN 'Diamond'
			WHEN ml.PlacementTierAG =10 THEN 'Platinum'
			WHEN ml.PlacementTierAG =20 THEN 'Gold'
			WHEN ml.PlacementTierAG =30 THEN 'Silver'
			ELSE 'NoTier'
			END


select a.*
	,CASE WHEN B.LPP = 0 or A.Tier='Silver' THEN 0 ELSE (a.LPP / B.LPP)-1  END as LiftFromSilver
	,CASE WHEN a.daycnt = 0 THEN 0 ELSE (a.leads/a.daycnt )* 30 END as EstimatedLeadsForMonth
	,CASE WHEN a.daycnt = 0 THEN 0 ELSE ((a.leads/a.daycnt )* 30) / a.listings  END as EstimatedLPPForMonth
from #temp a
join #temp b on b.Tier='Silver' and a.Biz = b.Biz
order by LPP




GO
/****** Object:  StoredProcedure [Reports].[rpt_UzidWebSiteBasicXDays]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







CREATE PROCEDURE [Reports].[rpt_UzidWebSiteBasicXDays] (
    @StartDate INT = NULL
   ,@EndDate INT = NULL
   ,@DaysLookBack INT
   ,@InclAGSites INT	-- -1 = Yes; 0 = No
   ,@MgtCoID INT		-- 0 = All
   --,@Domain VARCHAR(7000)
   )

/*******************************************************************************************
* Name:	Reports.rpt_UzidWebSiteBasicXDays
* ------------------------------------------------------------------------------------------
* Desc:	
* ------------------------------------------------------------------------------------------
* Test:	EXEC Reports.[rpt_UzidWebSiteBasicXDays] null, null, 5, -1, 0
        EXEC Reports.[rpt_UzidWebSiteBasicXDays] '06/13/2016', '06/14/2016',45,0,0
		EXEC Reports.[rpt_UzidWebSiteBasicXDays] '09/13/2016', '09/14/2016',45,0,6069
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist:	01	05/24/2016	Richard Chen        Ticket 23202; initial version
* Hist: 02	09/22/2016	Colleen Rocks		Ticket 23755; included path, changed the ExternalSites table
*											to a ZutronVisitedSites table and included an AG sites parameter
* Hist: 03	10/17/2016	Colleen Rocks		Ticket 24427; update start and end parameters to be INT so that default
*											sprocs can be used to populate previous month
********************************************************************************************/
AS
BEGIN
    SET NOCOUNT ON;
	
    SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

/*
--test:
DECLARE @StartDate DATETIME = '09/19/2016'
   ,@EndDate DATETIME = '09/19/2016'
   ,@DaysLookBack INT = 5
   ,@InclAGSites INT = 0
   ,@MgtCoID INT
   */

----------------------------------
/*Declare and set variables*/
----------------------------------
/*DECLARE @StartYMDID INT
   ,@EndYMDID INT

SET @StartDate = ISNULL(@StartDate,DATEADD(YEAR,-1,GETDATE()))
SET @EndDate = ISNULL(@EndDate,GETDATE() - 1)

SET @StartYMDID = CAST(CONVERT(VARCHAR(10),@StartDate,112) AS INT)
SET @EndYMDID = CAST(CONVERT(VARCHAR(10),@EndDate,112) AS INT)*/

SET @DaysLookBack = @DaysLookBack * -1

----------------------------------
/*Drop temp tables*/
----------------------------------
BEGIN TRY
    DROP TABLE #Websites
END TRY
BEGIN CATCH 
END CATCH;

BEGIN TRY
    DROP TABLE #Traffic
END TRY
BEGIN CATCH 
END CATCH;

----------------------------------
/*Get list of domains to include*/
----------------------------------
SELECT  domain = REPLACE(REPLACE(REPLACE(UpsellAGSitesCustomURL,'https:',''),'http:',''),'/','')
       ,upsellAGSites = 1
       ,PropertyName
       ,PropertyIDAG
       ,ListingID
       ,MgtCoIDAG
       ,MgtCoNameAG
INTO    #Websites
FROM    RentPath.Dimension.Listings
WHERE   UpsellAGSitesCustomURL <> ''
UNION
SELECT  Domain COLLATE DATABASE_DEFAULT AS domain
       ,upsellagsites = 0
       ,PropertyName
       ,PropertyIDAG
       ,ListingID
       ,MGTCoIDAG
       ,MgtCoNameAG COLLATE DATABASE_DEFAULT AS MgtCoNameAG
FROM    RentPath.dbo.ZutronTaggedWebSite;

----------------------------------
/*Get zutron and RentPath traffic*/
----------------------------------
SELECT  s.WebsiteDomain
       ,s.WebsitePath
       ,r.Profilekey
       ,s.UZID AS AllUzid
       ,r.UZID AS RentPathUzid
INTO    #Traffic
FROM    RentPath.Mart.ZutronSitesVisited AS s
LEFT JOIN Mart.zutronRentPath AS r
        ON r.UZID COLLATE DATABASE_DEFAULT = s.UZID
           AND r.Profilekey <> 5
           AND s.YMDID >= r.YMDID
           AND r.YMDID >= CAST(CONVERT(VARCHAR(8),DATEADD(d,@DaysLookBack,CONVERT(DATE,CAST(s.YMDID AS VARCHAR(8)),112)),112) AS INT)
WHERE   s.YMDID BETWEEN @StartDate AND @EndDate;

----------------------------------
/*Get final result set*/
----------------------------------
SELECT  d.domain
       ,e.WebsitePath
       ,d.upsellAGSites
       ,d.PropertyName
       ,d.PropertyIDAG
       ,d.ListingID
       ,d.MgtCoIDAG
       ,d.MgtCoNameAG
	   ,MAX(x.TotalUzidToDomain) AS TotalUzidToDomain
       ,MAX(x.TotalRPUzidToDomain) AS TotalRPUzidToDomain
	   ,COUNT(DISTINCT e.AllUzid) AS TotalUzidCount
       ,COUNT(DISTINCT e.RentPathUzid) AS UzidCount
FROM    #Websites AS d
JOIN    #Traffic AS e
        ON d.domain = e.WebsiteDomain COLLATE DATABASE_DEFAULT
JOIN (
		SELECT WebsiteDomain
			,COUNT(DISTINCT AllUzid) AS TotalUzidToDomain
			,COUNT(DISTINCT RentPathUzid) AS TotalRPUzidToDomain
		FROM #Traffic
		GROUP BY WebsiteDomain
	) AS x
	ON d.domain = x.WebsiteDomain COLLATE DATABASE_DEFAULT
WHERE (@InclAGSites = d.upsellAGSites
	OR @InclAGSites = -1)
	AND (@MgtCoID = d.MgtCoIDAG
	OR @MgtCoID = 0)
	--AND CHARINDEX(d.domain,@Domain) > 0
GROUP BY d.domain
       ,e.WebsitePath
       ,d.upsellAGSites
       ,d.PropertyName
       ,d.PropertyIDAG
       ,d.ListingID
       ,d.MgtCoIDAG
       ,d.MgtCoNameAG
ORDER BY d.upsellAGSites
	,d.MgtCoNameAG;

    SET NOCOUNT OFF;
END 








GO
/****** Object:  StoredProcedure [Reports].[rpt_UzidWebSiteListingDetail]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE [Reports].[rpt_UzidWebSiteListingDetail] (
    @StartDate DATETIME = NULL
   ,@EndDate DATETIME = NULL)

/*******************************************************************************************
* Name:	Reports.rpt_LeadDetails
* ------------------------------------------------------------------------------------------
* Desc:	New version of Mgmt Lead Details for Save Desk; can be broken down by mgmt or property
* ------------------------------------------------------------------------------------------
* Test:	EXEC Reports.[rpt_UzidWebSiteListingDetail] null, null
        EXEC Reports.[rpt_UzidWebSiteListingDetail] '06/06/2016', '06/06/2016'
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist:	01	05/24/2016	Richard Chen        Ticket ; initial version
********************************************************************************************/
AS
BEGIN
    SET NOCOUNT ON;
	
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    DECLARE @TrackDate DATETIME
       ,@LengthInSeconds INT
       ,@DatabaseName VARCHAR(128)
                

/*test
DECLARE 
    @StartDate DATETIME = '05/24/2016'
   ,@EndDate DATETIME = '05/24/2016'
   */

----------------------------------
--Declare and set variables
----------------------------------
    DECLARE @StartYMDID INT
       ,@EndYMDID INT

    SET @StartDate = ISNULL(@StartDate,DATEADD(YEAR,-1,GETDATE()))
    SET @EndDate = ISNULL(@EndDate,GETDATE() - 1)

    SET @StartYMDID = CAST(CONVERT(VARCHAR(10),@StartDate,112) AS INT)
    SET @EndYMDID = CAST(CONVERT(VARCHAR(10),@EndDate,112) AS INT)

----------------------------------
--Drop temp tables
----------------------------------
----------------------------------
--Get final result set
----------------------------------
--SELECT e.profilekey,d.*, e.uzidCount,e.DesktopUzidCount ,e.MobileUzidCount ,e.PDPPageviews ,e.SRPImpressions ,e.phoneLeadCount ,e.EmailLeadCount
--from
--    (--select domain=replace(replace(replace(upsellagsitescustomurl,'https:',''),'http:',''),'/',''),upsellAGSites=1,PropertyName, propertyidag, listingid ,mgtcoidAG, mgtconameAG
--     --  from dimension.listings where upsellagsitescustomurl <> ''
--     -- union
--     select domain COLLATE database_default as domain, upsellagsites=0,PropertyName,propertyidAG, listingid,MgtcoIDAG, MGtcoNameAG COLLATE database_default as MgtCoNameAG 
--       from rentpath.dbo.zutrontaggedwebsite
--    ) d
--join
--    (select e.listingid,e.profilekey, uzidCount=count(distinct e.uzid) 
--            ,DesktopUzidCount= count(distinct case when r.screen_type='desktop' then e.uzid else null end)
--            ,MobileUzidCount= count(distinct case when r.screen_type<>'desktop' then e.uzid else null end)
--            ,PDPPageviews=count(distinct case when e.page='pdp' then e.parseid end),SRPImpressions=count(distinct case when e.page='srp' then e.parseid end)
--            ,phoneLeadCount=count(distinct case when e.action='lead_submission' and seq='phone lead' then e.parseid end)
--            ,EmailLeadCount=count(distinct case when e.action='lead_submission' and seq='email lead' then e.parseid end)
--    from mart.zutronrentpathEvent e
--    join mart.zutronrentpath r on e.uzid=r.uzid
--	--JOIN dimension.listings dl ON e.listingid=dl.listingid
--	WHERE e.ymdid BETWEEN @StartYMDID AND @EndYMDID
--	AND e.profilekey <> 27
--    group by e.listingid,e.profileKey

--    ) e
--on cast(d.listingid as varchar(100))=e.listingid
--order by upsellAGSites,mgtconameAG

		SELECT e.DOMAIN,upsellagsites=0,e.PropertyName,e.propertyidAG,e.listingid,e.MgtcoIDAG,e.MGtcoNameAG
			  ,TotaluzidCount=count(DISTINCT  e.ALLUzid)
			  ,uzidCount=COUNT(DISTINCT 
			                  CASE WHEN e.profilekey  IN (3,4) AND dlListingid =Listingid then  e.RentPathUzid
			                       when e.profilekey NOT IN (3,4) AND elistingid=CAST(Listingid AS VARCHAR(100)) THEN e.rentPathUzid
								   ELSE null
								   END
			                   )
			  ,DesktopUzidCount=count(DISTINCT 
			                          CASE WHEN e.profilekey  IN (3,4) AND dlListingid =Listingid then   e.DesktopUzid
									  when e.profilekey NOT IN (3,4) AND elistingid=CAST(Listingid AS VARCHAR(100)) THEN e.DesktopUzid
									  ELSE NULL
									  end) 
			  ,MobileUzidCount=count(DISTINCT
			                         CASE WHEN e.profilekey  IN (3,4) AND dlListingid =Listingid then e.MobileUzid
									 when e.profilekey NOT IN (3,4) AND elistingid=CAST(Listingid AS VARCHAR(100)) THEN e.MobileUzid
									  ELSE NULL
									  end)
			  ,PDPPageviews=count(DISTINCT
			                         CASE WHEN e.profilekey  IN (3,4) AND dlListingid =Listingid then e.PDPPageviews
									 when e.profilekey NOT IN (3,4) AND elistingid=CAST(Listingid AS VARCHAR(100)) THEN e.PDPPageviews
									  ELSE NULL
									  end)
			  ,SRPImpressions=count(DISTINCT
			                         CASE WHEN e.profilekey  IN (3,4) AND dlListingid =Listingid then e.SRPImpressions
									 when e.profilekey NOT IN (3,4) AND elistingid=CAST(Listingid AS VARCHAR(100)) THEN e.SRPImpressions
									  ELSE NULL
									  end)
			  ,phoneLeadCount=count(DISTINCT
			                         CASE WHEN e.profilekey  IN (3,4) AND dlListingid =Listingid then e.phoneLead
									 when e.profilekey NOT IN (3,4) AND elistingid=CAST(Listingid AS VARCHAR(100)) THEN e.phoneLead
									  ELSE NULL
									  end)
			  ,EmailLeadCount=count(DISTINCT
			                         CASE WHEN e.profilekey  IN (3,4) AND dlListingid =Listingid then e.EmailLead
									 when e.profilekey NOT IN (3,4) AND elistingid=CAST(Listingid AS VARCHAR(100)) THEN e.EmailLead
									  ELSE NULL
									  end)
		from
		--	(select domain COLLATE database_default as domain, upsellagsites=0,PropertyName,propertyidAG, listingid,MgtcoIDAG, MGtcoNameAG COLLATE database_default as MgtCoNameAG 
		--	   from rentpath.dbo.zutrontaggedwebsite
		--	   --WHERE domain='www.crystaltowersapartments.com'
		--	) d
		--join
			(select   listingid=z.listingid,dlListingid=dl.listingid
			          ,z.DOMAIN COLLATE database_default as domain, z.PropertyName,z.propertyidAG, z.MgtcoIDAG, z.MGtcoNameAG COLLATE database_default as MgtCoNameAG 
                      ,eListingid=e.listingid
					  ,s.ExternalSite,e.profilekey, AllUzid=s.uzid,RentPathUzid=e.uzid --uzidCount=count(distinct e.uzid) 
					  ,DesktopUzid=case when r.screen_type='desktop' then e.uzid else null END
					  ,MobileUzid= case when r.screen_type<>'desktop' then e.uzid else null end  
					  ,PDPPageviews= case when e.page='pdp' then e.parseid END
					  ,SRPImpressions =case when e.page='srp' then e.parseid END
					  ,phoneLead=case when e.action='lead_submission' and seq='phone lead' then e.parseid end
					  ,EmailLead=case when e.action='lead_submission' and seq='email lead' then e.parseid end            
			  from  mart.zutronExternalSite s 
                    JOIN zutrontaggedwebsite z ON s.externalsite=  z.domain COLLATE database_default
            --7 days look back
        	        LEFT join mart.zutronrentpath r on s.uzid=r.uzid AND s.ymdid >=r.ymdid AND r.ymdid >=CAST(CONVERT(VARCHAR(8),DATEADD(d,-7,CONVERT(DATE,CAST(s.ymdid AS VARCHAR(8)),112)),112) AS int)--s.ymdid -7
			        LEFT JOIN mart.zutronrentpathEvent e ON e.uzid=s.uzid AND s.ymdid >=e.ymdid AND e.ymdid >=CAST(CONVERT(VARCHAR(8),DATEADD(d,-7,CONVERT(DATE,CAST(s.ymdid AS VARCHAR(8)),112)),112) AS int)--s.ymdid-7
                    LEFT JOIN dimension.listings dl ON e.listingid=CAST (dl.PropertyIDRent AS VARCHAR(100)) and e.profilekey IN (3 ,4)
	  WHERE s.ymdid BETWEEN @StartYMDID AND @EndYMDID--  AND s.ExternalSite='www.crystaltowersapartments.com'
			) e
		--on cast(d.listingid as varchar(100))=e.listingid
		--ON d.domain=e.externalSite --AND cast(d.listingid as varchar(100))=e.listingid
		GROUP BY e.DOMAIN,e.PropertyName,e.propertyidAG,e.listingid,e.MgtcoIDAG,e.MGtcoNameAG
		order by mgtconameAG




    SET NOCOUNT OFF;
END 


















GO
/****** Object:  StoredProcedure [Reports].[rpt_UzidWebSiteTagging]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Reports].[rpt_UzidWebSiteTagging] (
    @StartDate DATETIME = NULL
   ,@EndDate DATETIME = NULL)

/*******************************************************************************************
* Name:	Reports.rpt_LeadDetails
* ------------------------------------------------------------------------------------------
* Desc:	New version of Mgmt Lead Details for Save Desk; can be broken down by mgmt or property
* ------------------------------------------------------------------------------------------
* Test:	EXEC Reports.[rpt_UzidWebSiteTagging] null, null
        EXEC Reports.[rpt_UzidWebSiteTagging] '06/06/2016', '06/06/2016'
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist:	01	05/24/2016	Richard Chen        Ticket ; initial version
********************************************************************************************/
AS
BEGIN
    SET NOCOUNT ON;
	
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
    DECLARE @TrackDate DATETIME
       ,@LengthInSeconds INT
       ,@DatabaseName VARCHAR(128)
                

/*test
DECLARE 
    @StartDate DATETIME = '05/24/2016'
   ,@EndDate DATETIME = '05/24/2016'
   */

----------------------------------
--Declare and set variables
----------------------------------
    DECLARE @StartYMDID INT
       ,@EndYMDID INT

    SET @StartDate = ISNULL(@StartDate,DATEADD(YEAR,-1,GETDATE()))
    SET @EndDate = ISNULL(@EndDate,GETDATE() - 1)

    SET @StartYMDID = CAST(CONVERT(VARCHAR(10),@StartDate,112) AS INT)
    SET @EndYMDID = CAST(CONVERT(VARCHAR(10),@EndDate,112) AS INT)

----------------------------------
--Drop temp tables
----------------------------------
----------------------------------
--Get final result set
----------------------------------
--SELECT e.profilekey,d.*, e.uzidCount,e.DesktopUzidCount ,e.MobileUzidCount ,e.PDPPageviews ,e.SRPImpressions ,e.phoneLeadCount ,e.EmailLeadCount
--from
--    (--select domain=replace(replace(replace(upsellagsitescustomurl,'https:',''),'http:',''),'/',''),upsellAGSites=1,PropertyName, propertyidag, listingid ,mgtcoidAG, mgtconameAG
--     --  from dimension.listings where upsellagsitescustomurl <> ''
--     -- union
--     select domain COLLATE database_default as domain, upsellagsites=0,PropertyName,propertyidAG, listingid,MgtcoIDAG, MGtcoNameAG COLLATE database_default as MgtCoNameAG 
--       from rentpath.dbo.zutrontaggedwebsite
--    ) d
--join
--    (select e.listingid,e.profilekey, uzidCount=count(distinct e.uzid) 
--            ,DesktopUzidCount= count(distinct case when r.screen_type='desktop' then e.uzid else null end)
--            ,MobileUzidCount= count(distinct case when r.screen_type<>'desktop' then e.uzid else null end)
--            ,PDPPageviews=count(distinct case when e.page='pdp' then e.parseid end),SRPImpressions=count(distinct case when e.page='srp' then e.parseid end)
--            ,phoneLeadCount=count(distinct case when e.action='lead_submission' and seq='phone lead' then e.parseid end)
--            ,EmailLeadCount=count(distinct case when e.action='lead_submission' and seq='email lead' then e.parseid end)
--    from mart.zutronrentpathEvent e
--    join mart.zutronrentpath r on e.uzid=r.uzid
--	--JOIN dimension.listings dl ON e.listingid=dl.listingid
--	WHERE e.ymdid BETWEEN @StartYMDID AND @EndYMDID
--	AND e.profilekey <> 27
--    group by e.listingid,e.profileKey

--    ) e
--on cast(d.listingid as varchar(100))=e.listingid
--order by upsellAGSites,mgtconameAG

		SELECT d.DOMAIN,d.upsellagsites,d.PropertyName,d.propertyidAG,d.listingid,d.MgtcoIDAG,d.MGtcoNameAG
			  ,TotaluzidCount=count(DISTINCT e.ALLUzid)
			  ,uzidCount=COUNT(DISTINCT e.RentPathUzid)
			  ,DesktopUzidCount=count(DISTINCT e.DesktopUzid) 
			  ,MobileUzidCount=count(DISTINCT e.MobileUzid )
			  ,PDPPageviews=count(DISTINCT e.PDPPageviews) ,SRPImpressions=count(distinct e.SRPImpressions) 
			  ,phoneLeadCount=count(DISTINCT e.phoneLead) ,EmailLeadCount=count(DISTINCT e.EmailLead)
		from
			(select domain COLLATE database_default as domain, upsellagsites=0,PropertyName,propertyidAG, listingid,MgtcoIDAG, MGtcoNameAG COLLATE database_default as MgtCoNameAG 
			   from rentpath.dbo.zutrontaggedwebsite
			   --WHERE domain='www.crystaltowersapartments.com'
			) d
		join
			(select e.listingid,s.ExternalSite,e.profilekey, AllUzid=s.uzid,RentPathUzid=e.uzid --uzidCount=count(distinct e.uzid) 
					  ,DesktopUzid=case when r.screen_type='desktop' then e.uzid else null END
					  ,MobileUzid= case when r.screen_type<>'desktop' then e.uzid else null end  
					  ,PDPPageviews= case when e.page='pdp' then e.parseid END
					  ,SRPImpressions =case when e.page='srp' then e.parseid END
					  ,phoneLead=case when e.action='lead_submission' and seq='phone lead' then e.parseid end
					  ,EmailLead=case when e.action='lead_submission' and seq='email lead' then e.parseid end            
			from  mart.zutronExternalSite s 
--			LEFT join mart.zutronrentpath r on s.uzid=r.uzid AND s.ymdid=r.ymdid
--			LEFT JOIN mart.zutronrentpathEvent e ON e.uzid=s.uzid AND s.ymdid=e.ymdid
            --7 days look back
        	LEFT join mart.zutronrentpath r on s.uzid=r.uzid AND s.ymdid >=r.ymdid AND r.ymdid >=CAST(CONVERT(VARCHAR(8),DATEADD(d,-7,CONVERT(DATE,CAST(s.ymdid AS VARCHAR(8)),112)),112) AS int)--s.ymdid -7
			LEFT JOIN mart.zutronrentpathEvent e ON e.uzid=s.uzid AND s.ymdid >=e.ymdid AND e.ymdid >=CAST(CONVERT(VARCHAR(8),DATEADD(d,-7,CONVERT(DATE,CAST(s.ymdid AS VARCHAR(8)),112)),112) AS int)--s.ymdid-7
			--LEFT JOIN dimension.listings dl ON e.listingid=CASE WHEN e.profilekey IN (3 ,4)THEN CAST (dl.PropertyIDRent AS VARCHAR(20))
            --                                         ELSE CAST(dl.listingid AS VARCHAR(20)) end
			WHERE s.ymdid BETWEEN @StartYMDID AND @EndYMDID--  AND s.ExternalSite='www.crystaltowersapartments.com'
			) e
		--on cast(d.listingid as varchar(100))=e.listingid
		ON d.domain=e.externalSite --AND cast(d.listingid as varchar(100))=e.listingid
		GROUP BY d.DOMAIN,d.upsellagsites,d.PropertyName,d.propertyidAG,d.listingid,d.MgtcoIDAG,d.MGtcoNameAG
		order by upsellAGSites,mgtconameAG




    SET NOCOUNT OFF;
END 


















GO
/****** Object:  StoredProcedure [Reports].[rpt_WatertonRentDecileLeadComparison]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Reports].[rpt_WatertonRentDecileLeadComparison] (@Month DATE)

/*******************************************************************************************
* Name:	Reports.rpt_WatertonRentDecileLeadComparison
* ------------------------------------------------------------------------------------------
* Desc:	This is for a hidden report on sqlrpt02; hardcoded to 15 properties in Waterton's
* portfolio. Don't want to expose to everyone for use and will hopefully be a temporary
* solution until we find a better way to do this.
* ------------------------------------------------------------------------------------------
* Test:	EXEC Reports.rpt_WatertonRentDecileLeadComparison '06/01/2016'
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist:	01	08/11/2016		Colleen Rocks		Ticket 23554; initial version
********************************************************************************************/
AS
BEGIN
    SET NOCOUNT ON;

------------------------------------
/*Declare variables*/
------------------------------------
/*--test:
DECLARE @Month DATE = '07/01/2016';*/


    DECLARE @YearMonth INT = CAST(CONVERT(VARCHAR(6),@Month,112) AS INT);

------------------------------------
/*Drop temp tables*/
------------------------------------
    BEGIN TRY
        DROP TABLE #Decile
    END TRY
    BEGIN CATCH 
    END CATCH;

    BEGIN TRY
        DROP TABLE #LeadPackage
    END TRY
    BEGIN CATCH 
    END CATCH;

    BEGIN TRY
        DROP TABLE #CBSAAvg
    END TRY
    BEGIN CATCH 
    END CATCH;


------------------------------------
/*Get rent decile for all properties 
based on median low price for the month*/
------------------------------------
    SELECT  x.PropertyIDAG
           ,x.ListingID
           ,x.SFPropertyAcctID
           ,x.PropertyName
           ,x.CBSAName
           ,x.CBSACode
           ,x.MgtCo
           ,AVG(x.LowPrice) AS MedianLowPrice
           ,NTILE(10) OVER (PARTITION BY x.CBSACode ORDER BY AVG(x.LowPrice)) AS LowPriceDecile
    INTO    #Decile
    FROM    (
             SELECT l.PropertyIDAG
                   ,l.ListingID
                   ,l.SFPropertyAcctID
                   ,l.PropertyName
                   ,l.CBSAName
                   ,l.CBSACode
                   ,CONCAT(l.MgtCoNameAG,' - ',l.MgtCoIDAG) AS MgtCo
                   ,ml.LowPrice AS LowPrice
                   ,ROW_NUMBER() OVER (PARTITION BY l.ListingID ORDER BY ml.LowPrice, ml.YMDID) AS RowAsc
                   ,ROW_NUMBER() OVER (PARTITION BY l.ListingID ORDER BY ml.LowPrice DESC, ml.YMDID DESC) AS RowDesc
             FROM   RentPath.Dimension.Listings AS l
             INNER JOIN RentPath.Mart.Listings AS ml
                    ON l.ListingID = ml.ListingID
                       AND ml.YearMonth = @YearMonth
                       AND (ml.StatusIDAG = 1
                            OR ml.StatusIDRent = 1)
                       AND ml.LowPrice > 0
            ) AS x
    WHERE   x.RowAsc IN (x.RowDesc,x.RowDesc - 1,x.RowDesc + 1)
    GROUP BY x.PropertyIDAG
           ,x.ListingID
           ,x.SFPropertyAcctID
           ,x.PropertyName
           ,x.CBSAName
           ,x.CBSACode
           ,x.MgtCo;

------------------------------------
/*Get leads and package type for all 
properties for that month*/
------------------------------------       
    SELECT  d.ListingID
           ,d.PropertyIDAG
           ,d.PropertyName
           ,d.CBSAName
           ,d.CBSACode
           ,d.MgtCo
           ,d.MedianLowPrice
           ,d.LowPriceDecile
           ,s.Bucket
           ,s.ProductName
           ,SUM(ml.AllLeads) AS LeadCount
    INTO    #LeadPackage
    FROM    #Decile AS d
    INNER JOIN RentPath.Mart.Listings AS ml
            ON d.ListingID = ml.ListingID
               AND ml.YearMonth = @YearMonth
               AND (ml.StatusIDAG = 1
                    OR ml.StatusIDRent = 1)
    INNER JOIN (
                SELECT  fli.Advertiser__c AS SalesforceAccountID
                       ,p.Product_Bucket__c AS Bucket
                       ,p.Name AS ProductName
                       ,fli.StartDate__c AS ContractStart
                       ,fli.EndDate__c AS ContractEnd
                       ,CAST(CONVERT(VARCHAR(6),fli.StartDate__c,112) AS INT) AS ContractStartYM
                       ,CAST(CONVERT(VARCHAR(6),fli.EndDate__c,112) AS INT) AS ContractEndYM
                       ,CONVERT(VARCHAR(10),fli.EndDate__c,101) AS EndDate
                       ,ROW_NUMBER() OVER (PARTITION BY fli.Advertiser__c ORDER BY CASE WHEN p.Name LIKE '%alm%'
                                                                                             OR p.Name LIKE '%cpa%'
                                                                                             OR p.Name LIKE '%pay per%' THEN 1
                                                                                        ELSE 0
                                                                                   END) AS RowNum
                FROM    SalesForce.dbo.Fulfillment_Line_Item__c AS fli
                JOIN    SalesForce.dbo.Contract_Line_Item__c AS cli
                        ON cli.Fulfillment_Line_Item__c = fli.Id
                JOIN    SalesForce.dbo.Account AS a
                        ON cli.Advertiser__c = a.Id
                JOIN    SalesForce.dbo.Product2 AS p
                        ON cli.Product__c = p.Id
                WHERE   p.Name <> 'Billing Adjustment'
                        AND p.Product_Bucket__c = 'Core'
                        AND @YearMonth BETWEEN CAST(CONVERT(VARCHAR(6),fli.StartDate__c,112) AS INT)
                                       AND     CAST(CONVERT(VARCHAR(6),fli.EndDate__c,112) AS INT)
               ) AS s
            ON s.SalesforceAccountID = d.SFPropertyAcctID
               AND ml.YearMonth BETWEEN s.ContractStartYM
                                AND     s.ContractEndYM
    WHERE   s.RowNum = 1
    GROUP BY d.ListingID
           ,d.PropertyIDAG
           ,d.PropertyName
           ,d.CBSAName
           ,d.CBSACode
           ,d.MgtCo
           ,d.MedianLowPrice
           ,d.LowPriceDecile
           ,s.Bucket
           ,s.ProductName
           ,s.ContractStart
           ,s.ContractEnd;

------------------------------------
/*Get CBSA averages*/
------------------------------------    
    SELECT  lp.CBSACode
           ,lp.LowPriceDecile
           ,lp.ProductName
           ,AVG(lp.LeadCount) AS AvgLeads
    INTO    #CBSAAvg
    FROM    #LeadPackage AS lp
    GROUP BY lp.CBSACode
           ,lp.LowPriceDecile
           ,lp.ProductName;

------------------------------------
/*Get final results*/
------------------------------------
    SELECT  DATENAME(MONTH,@Month) + ' ' + DATENAME(YEAR,@Month) AS MonthYear
		   ,lp.ListingID
           ,lp.PropertyIDAG
           ,lp.PropertyName
           ,CONCAT(lp.CBSAName,' - ',lp.CBSACode) AS CBSA
           ,lp.MgtCo
           ,lp.MedianLowPrice
           ,lp.LowPriceDecile
           ,lp.LeadCount
           ,ca.AvgLeads
    FROM    #LeadPackage AS lp
    INNER JOIN #CBSAAvg AS ca
            ON lp.CBSACode = ca.CBSACode
               AND lp.LowPriceDecile = ca.LowPriceDecile
               AND lp.ProductName = ca.ProductName
    WHERE   lp.PropertyIDAG IN (79126,2465,100048704,24516,231,377,5310,100636,7139,53447,81018,33404,13097,9457,5299)
	--,81333 Arium Westside is under Carroll Mgmt in listing editor and SFDC
	ORDER BY lp.CBSAName, lp.PropertyName;

    SET NOCOUNT OFF;
END 










GO
/****** Object:  StoredProcedure [Staging].[create_TealiumParsedPivot2_JulyProcess]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [Staging].[create_TealiumParsedPivot2_JulyProcess]
as

/*************************************************************************************************
*
* Name:	Staging.Create_TealiumParsedPivot2_JulyProcess
*
* Desc:	This is used to calculate the first_pageview_true, entry_campaign_id_True,last_entry_true
*
* Test:	EXEC Staging.Create_TealiumParsedPivot2_JulyProcess
*
* Note:5
*
* Hist:	01	04/27/2015	Marting Team		Initial Version
* Hist: 02	07/14/2015	Don Wert			Ticket 19918, filter the code that creates TealiumParsedPivot2 so that it only
*											flags a record as entry_campaign_id_True if the Action is pageview.
* Hist: 03	07/20/2015	Don Wert			Ticket 20075, add a flag to TealiumParsedPivot2 to identify the last action record
*											to calculate duration.
* Hist: 04	07/23/2015	Sarah Mims			Ticket # 19918 - changed how we are pulling First and Last ParseID to avoid duplicates
*											I also broke the pieces up into temp tables for now so that we could identify any breakdowns
*											in the logic faster. We can always piece these back together when we are confident in the logic.
* Hist: 05	07/28/2015	Sarah and Don		No ticket - making a copy of this for the July process David asked us to run
*		06	08/11/2015	Sarah Mims			No ticket - added Parsed_EF_ID, EntryPage and EntryCampaign columns in ParsedPivot2
**************************************************************************************************/
SET NOCOUNT ON

----------------------------------------
--Drop temp tables if not NULL
----------------------------------------

IF OBJECT_ID('tempdb..#FirstEventDate') IS NOT NULL
	BEGIN
		DROP TABLE #FirstEventDate
	END		  

IF OBJECT_ID('tempdb..#Actions') IS NOT NULL
	BEGIN
		DROP TABLE #Actions
	END		  

IF OBJECT_ID('tempdb..#ActionJackson') IS NOT NULL
	BEGIN
		DROP TABLE #ActionJackson
	END		  

IF OBJECT_ID('tempdb..#FirstParseID') IS NOT NULL
	BEGIN
		DROP TABLE #FirstParseID
	END		  

IF OBJECT_ID('tempdb..#MaxEventDate') IS NOT NULL
	BEGIN
		DROP TABLE #MaxEventDate
	END		  

IF OBJECT_ID('tempdb..#ExitPoint') IS NOT NULL
	BEGIN
		DROP TABLE #ExitPoint
	END		  

IF OBJECT_ID('tempdb..#ExitParseID') IS NOT NULL
	BEGIN
		DROP TABLE #ExitParseID
	END	

---------------------------------------
--Get Min Event Date for Each Visit
--Original Query - no dupes
---------------------------------------
SELECT  fp.Visit
       ,MIN(fp.EventDate) AS MinEventDate
INTO    #FirstEventDate
FROM    RentPath.Staging.TealiumParsedPivot AS fp
GROUP BY fp.Visit


---------------------------------------
--Get Action/Min Event Date combination for Each Visit
---------------------------------------
SELECT  action
       ,ParseID
       ,CASE action
          WHEN 'pageview' THEN 1
          WHEN 'click' THEN 2
          WHEN 'lead_submission' THEN 3
          WHEN NULL THEN 4
        END AS SecondarySortOrder
       ,Visit
       ,MIN(EventDate) AS EventDate
INTO    #Actions
FROM    RentPath.Staging.TealiumParsedPivot
GROUP BY Visit
       ,action
       ,ParseID

---------------------------------------
--Get Final Action for Min Event Date combination for Each Visit
---------------------------------------
SELECT a.ParseID
,a.SecondarySortOrder
,a.action
,a.EventDate
,fed.visit
,fed.MinEventDate
,ROW_NUMBER()OVER(PARTITION BY fed.visit ORDER BY a.SecondarySortOrder,fed.MinEventDate) AS RowNumber
INTO #ActionJackson
FROM #Actions AS a
JOIN #FirstEventDate AS fed
	ON a.visit = fed.visit
	AND a.EventDate = fed.MinEventDate

---------------------------------------
--Grab Parse ID associated with "First Action" 
---------------------------------------
SELECT *
INTO #FirstParseID
FROM #ActionJackson AS aj
WHERE aj.RowNumber = 1

----------------------------------------------
--Get the last action the user performed in this visit
----------------------------------------------
		-----------------------------------------
		--Get ParseID associated with Max Event Date
		--Row Number arbitrary over ParseIDs with same Max Event Date
		--Updated Query to remove dupes
		-----------------------------------------
		SELECT  X.ParseID
			   ,X.Visit
			   ,X.EventDate
			   ,ROW_NUMBER() OVER (PARTITION BY X.Visit ORDER BY X.EventDate) AS RowNumber
		INTO    #MaxEventDate
		FROM    (
				 SELECT ParseID
					   ,Visit
					   ,MAX(EventDate) AS EventDate
				 FROM   RentPath.Staging.TealiumParsedPivot				 
				 GROUP BY ParseID
					   ,Visit
				) AS X
		---------------------------------------
		--Get Max Event Date for Each Visit
		---------------------------------------
		SELECT  Visit
			   ,MAX(EventDate) AS ExitPoint
		INTO    #ExitPoint
		FROM    RentPath.Staging.TealiumParsedPivot tpp
		JOIN    RentPathCube.Conformed.Profile_JulyProcess cp
				ON tpp.profileid = cp.profileid
				   AND tpp.subprofileid = cp.SubProfileID
				   AND cp.StatusKey = 1
		GROUP BY Visit
		
		----------------------------------------------
		--Get list of Exit ParseIDs
		----------------------------------------------
		SELECT  ParseID
		INTO    #ExitParseID
		FROM    (
				 SELECT *
				 FROM   #MaxEventDate AS med
				 WHERE  med.RowNumber = 1
				) AS x
		INNER JOIN #ExitPoint AS y
				ON x.Visit = y.Visit
				   AND x.EventDate = y.ExitPoint


--------------------------------------------------
--Drop table if it already exists
--------------------------------------------------
IF (SELECT OBJECT_ID(N'RentPath.Staging.TealiumParsedPivot2_JulyProcess')) IS NOT NULL
	DROP TABLE RentPath.Staging.TealiumParsedPivot2_JulyProcess

--------------------------------------------------
--Dump final data in Tealium Parsed Pivot 2 table
--------------------------------------------------
SELECT  p.*
		,COALESCE(CASE WHEN p.referrer LIKE '%WT.mc_id=[0-9]%' THEN SUBSTRING(p.referrer,(CHARINDEX('WT.mc_id=',p.referrer)) + 9,CASE WHEN (PATINDEX('%[a-z,$,-,?#,%,&]%',SUBSTRING(p.referrer,CHARINDEX('WT.mc_id=',p.referrer) + 9,999)) - 1) = -1 THEN 99
																																		ELSE PATINDEX('%[a-z,$,-,?,#,%,&]%',SUBSTRING(p.referrer,CHARINDEX('WT.mc_id=',p.referrer) + 9,999)) - 1
																																END)
						ELSE NULL
					END,CASE WHEN p.url LIKE '%WT.mc_id=[0-9]%' THEN SUBSTRING(p.url,(CHARINDEX('WT.mc_id=',p.url)) + 9,CASE WHEN (PATINDEX('%[a-z,$,-,?,#,%,&]%',SUBSTRING(p.url,CHARINDEX('WT.mc_id=',p.url) + 9,999)) - 1) = -1 THEN 99
																															ELSE PATINDEX('%[a-z,$,-,?,#,%,&]%',SUBSTRING(p.url,CHARINDEX('WT.mc_id=',p.url) + 9,999)) - 1
																														END)
							ELSE NULL
						END)				AS EntryCampaignID
		,CASE WHEN referrer LIKE '%ef^_id%' ESCAPE '^' THEN SUBSTRING(referrer,CHARINDEX('ef_id',referrer)+6,33) 
			  WHEN path LIKE '%ef^_id%' ESCAPE '^' THEN SUBSTRING(path,CHARINDEX('ef_id',path)+6,33) 

		ELSE NULL END						AS Parsed_EF_ID
		,CASE WHEN z.ParseID IS NOT NULL THEN 1
				ELSE 0
		END									AS first_pageview_true
		,CASE WHEN epi.parseid IS NOT NULL THEN 1
				ELSE 0
		END									AS last_entry_true
		,CASE WHEN z.ParseID IS NOT NULL THEN p.page ELSE NULL END				AS EntryPage
		,CASE WHEN z.ParseID IS NOT NULL THEN p.campaign_id ELSE NULL END		AS EntryCampaignID_ParseIDOnly
INTO    RentPath.Staging.TealiumParsedPivot2_JulyProcess
FROM    RentPath.Staging.TealiumParsedPivot AS p
LEFT OUTER JOIN #FirstParseID AS z
        ON p.ParseID = z.ParseID
LEFT OUTER JOIN #ExitParseID AS epi
		ON p.ParseID = epi.ParseID


IF COLUMNPROPERTY( OBJECT_ID(N'RentPath.Staging.TealiumParsedPivot2_JulyProcess'), 'ef_id', 'ColumnId') IS NULL
	BEGIN
	ALTER TABLE RentPath.Staging.TealiumParsedPivot2_JulyProcess
		ADD ef_id varchar(7000) NULL;
		print 'added'
	END

SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [Staging].[Dashboard_Set_Advanced_Subscription_Data]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*****************************************************************************************************
* Name:	[Staging].[Dashboard_Set_Advanced_Subscription_Data]
*-------------------------------------------------------------------------------------------------
* Desc:	Save data in staging that will be used in periodic running of process to FTP advanced subscriptions 
* for Dashboard.  Creates info like averages, Invoice data, URL data, etc.
*-------------------------------------------------------------------------------------------------
* Notes: THIS IS A CLIENT PORTAL DASHBOARD PROC. BEFORE MAKING CHANGES IN PRODUCTION, THEY MUST BE
* VETTED AND TESTED IN THE DEV & QA DATABASES FIRST.
*-------------------------------------------------------------------------------------------------
* Test:	EXEC Staging.Dashboard_Set_Advanced_Subscription_Data
*    SELECT * FROM Staging.DashboardInvInfo WITH (NOLOCK) ORDER BY ListingID
*-------------------------------------------------------------------------------------------------
* Hist:	01	04/21/2015	Bob Langley		Ticket_18155 - Initial Version
* Hist: 02	06/14/2015	Don Wert		Ticket 19771 - Add a Distinct to the query that creates/populates #tmpmasterlist.
* Hist: 03	07/06/2015	Bob Langley		Ticket XXXXX - Changed to load Combined Dimension Listings to a temp table so can eliminate duplicate records (so process will continue running)
* Hist: 04	08/06/2015	Bob Langlely	Ticket 20231 - Add new columns AGPackageType and RentPackageType to Invoice information.
* Hist: 05	08/24/2015	Shetal Gandhi	Ticket 20421 - Modified to use the New Rentpath tables instead of the AG Combined views
* Hist: 06	10/19/2015	Bob Langley		TIcket 20986 - Modified to add new Product and cost values to invoice data table (For AG, Rent and Combo).
* Hist:	07	07/18/2017	Sarah Mims		SFDC Case # 01506255 - changed source of invoice data from MAX to Zuora
*										--Zuora has both posted dates and service start/end dates. After discussion with Kimbo, we decided to go with
*										service dates for dashboard subscriptions.
*******************************************************************************************************************************************************/
CREATE PROCEDURE [Staging].[Dashboard_Set_Advanced_Subscription_Data]
AS 
BEGIN

    SET NOCOUNT ON;

	DECLARE
		@ErrorMessage					NVARCHAR(4000),
		@ErrorNumber					INT,
		@ErrorSeverity					INT,
		@ErrorState						INT,
		@ErrorLine						INT,
		@ErrorProcedure					NVARCHAR(200)

	DECLARE @cmd nvarchar(4000)
	DECLARE @codesection varchar(2000)
	

	BEGIN TRY
		DROP TABLE #tmpmasterlist
	END TRY
	BEGIN CATCH
	END CATCH

	

        SELECT DISTINCT
                dl.ListingID
               ,dl.PropertyIDAG AS AGPropertyID		--AGPropertyID on the AG website line
               ,dl.PropertyIDRent AS RentPropertyID
               ,ISNULL(dl.PropertyZipCode,0) AS ZipCode	--(CASE WHEN dlag.ZipCode > dlr.ZipCode THEN dlag.ZipCode ELSE dlr.ZipCode END) AS ZipCode
               ,dl.MgtCoIDAG AS AGMgtCoID
               ,dl.MgtCoIDRent AS RentMgtCoID
               ,ISNULL(dl.StatusIDAG,0) AS AGStatusID
               ,ISNULL(dl.StatusIDRent,0) AS RentStatusID
        INTO    #tmpmasterlist
        FROM    RentPath.Dimension.Listings AS dl WITH (NOLOCK);

	ALTER TABLE #tmpmasterlist ADD CONSTRAINT PK_tmpmasterlist_49121_ListingID PRIMARY KEY CLUSTERED (ListingID);


	/* ===================================================================================================================== */
	--Set date variables

	DECLARE @startYMDID int
	DECLARE @endYMDID int
	--SET @startYMDID = (SELECT MonthStartYMDID FROM DBAUtility.Dimension.Dates WITH (NOLOCK) WHERE YMDDate = CONVERT(datetime, Convert(varchar(10),GETDATE(),101)))
	--SET @endYMDID = (SELECT MonthEndYMDID FROM DBAUtility.Dimension.Dates WITH (NOLOCK) WHERE YMDDate = CONVERT(datetime, Convert(varchar(10),GETDATE(),101)))
	
	SET @startYMDID = CAST(CONVERT(VARCHAR(8),DATEADD(m,-1,DATEADD(m,DATEDIFF(m,0,GETDATE()),0)),112) AS INT)		--first day of previous month
	SET @endYMDID = CAST(CONVERT(VARCHAR(8),DATEADD(d,-1,DATEADD(m,1,DATEADD(m,-1,DATEADD(m,DATEDIFF(m,0,GETDATE()),0)))),112) AS INT)  --last day of previous month
	--for prev month
	--SET @startYMDID = CAST(CONVERT(VARCHAR(8),DATEADD(m,-1,DATEADD(m,DATEDIFF(m,0,GETDATE()),0)),112) AS INT)
	--SET @endYMDID = CAST(CONVERT(VARCHAR(8),DATEADD(d,-1,DATEADD(m,1,DATEADD(m,-1,DATEADD(m,DATEDIFF(m,0,GETDATE()),0)))),112) AS INT)
	PRINT '@startYMDID = ' + CONVERT(varchar(30),@startYMDID)
	PRINT '@endYMDID = ' + CONVERT(varchar(30),@endYMDID)
	PRINT ' '
	
	DECLARE @MonthBeginDate date
	DECLARE @MonthEndDate date

	set @MonthBeginDate = CAST(CAST(@startYMDID AS VARCHAR) AS DATE)
	SET @MonthEndDate = DATEADD(dd,-(DAY(DATEADD(mm,1,@MonthBeginDate))),DATEADD(mm,1,@MonthBeginDate))


	PRINT '@MonthBeginDate = ' + CONVERT(varchar(40), @MonthBeginDate,109)
	PRINT '@MonthEndDate = ' + CONVERT(varchar(40), @MonthEndDate,109)
	/* ===================================================================================================================== */
	SET @codesection = 'Get URL info'

	--Do the data loads to temp tables
	BEGIN TRY


		SET @codesection = 'Get URL info - Load temp table'

		BEGIN TRY
			DROP TABLE #tmpurlinfo
		END TRY
		BEGIN CATCH
		END CATCH

		CREATE TABLE #tmpurlinfo
		(ListingID	int
		,Website	varchar(20)
		,PropertyID	int
		,RentPropertyID	int
		,PropertyName	varchar(1000)
		,PropertyURL	varchar(3000)
		)

		SELECT @cmd = N'
		SELECT OPI.LISTINGID
		,''AG'' AS WEBSITE
		,PROPERTYID
		,NULL AS RENTPROPERTYID
		,PROPERTYNAME
		,PROPERTYURL
		FROM  OPENQUERY([ORACLEAPTG], '' 
		   SELECT pl.ListingID
			,pl.PropertyID
			,p.PropertyName
			,''''www.apartmentguide.com/'''' || MAX(ListingSEOPath) AS PropertyURL
			FROM Properties.PropListings pl
				JOIN Properties.Properties p
					ON pl.PropertyID = p.PropertyID
				LEFT OUTER JOIN  Properties.ENDECA_APT60_VIEW pe
					ON pl.ListingID = pe.ListingID     
			WHERE pl.IsActive = 1    
			GROUP BY pl.ListingID
			,pl.PropertyID
			,p.PropertyName
		'') OPI ';


		--load the data from the OPENQUERY into the dummy table
		INSERT	INTO #tmpurlinfo
				EXEC sp_executesql 
					@cmd;

		SELECT @cmd = N'
		SELECT OPI.LISTINGID
		,''Rent'' AS WEBSITE
		,PROPERTYID
		,RENTPROPERTYID
		,PROPERTYNAME
		,PROPERTYURL
		FROM  OPENQUERY([ORACLEAPTG], '' 
			SELECT pl.ListingID
			,pl.PropertyID
			,p.RentPropertyID
			,p.PropertyName
			,''''www.rent.com/'''' || MAX(ListingSEOPath) AS PropertyURL
			FROM Properties.PropListings pl
				JOIN Properties.Properties p
					ON pl.PropertyID = p.PropertyID
			LEFT OUTER JOIN  Properties.ENDECA_RENT_VIEW pe
				ON p.RentPropertyID = pe.PropertyID     
			WHERE pl.IsActiveRent = 1    
			GROUP BY pl.ListingID
			,pl.PropertyID
			,p.RentPropertyID
			,p.PropertyName
		'') OPI ';


		--load the data from the OPENQUERY into the dummy table
		INSERT	INTO #tmpurlinfo
				EXEC sp_executesql 
					@cmd;
	END TRY
	BEGIN CATCH
		SELECT 
			@ErrorMessage		= ERROR_MESSAGE(),
			@ErrorNumber		= ERROR_NUMBER(),
			@ErrorSeverity		= ERROR_SEVERITY(),
			@ErrorState			= ERROR_STATE(),
			@ErrorLine			= ERROR_LINE(),
			@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');

		SET @ErrorMessage = 'Attempting to load data to URL temp table. Error in code section - ' + @codesection + '   Error - ' + @ErrorMessage


		raiserror(@ErrorMessage,16,1) with log;

		RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	
	END CATCH

	--Now mart the data
	BEGIN TRY
		BEGIN TRANSACTION

			SET @codesection = 'Mart URL Info from temp table'

			DELETE FROM Staging.DashboardURLInfo

			INSERT INTO Staging.DashboardURLInfo
			SELECT * FROM #tmpurlinfo

		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		SELECT 
			@ErrorMessage		= ERROR_MESSAGE(),
			@ErrorNumber		= ERROR_NUMBER(),
			@ErrorSeverity		= ERROR_SEVERITY(),
			@ErrorState			= ERROR_STATE(),
			@ErrorLine			= ERROR_LINE(),
			@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');

		SET @ErrorMessage = 'Attempting to mart URL info. Error in code section - ' + @codesection + '   Error - ' + @ErrorMessage

		if @@trancount > 0
			ROLLBACK TRANSACTION


		raiserror(@ErrorMessage,16,1) with log;

		RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	
	END CATCH
	/* ===================================================================================================================== */
	SET @codesection = 'Get CR3 Info'

	--Do the data loads to temp tables
	BEGIN TRY


		SET @codesection = 'Data Load To Temp Tables - CR3 Info'

		BEGIN TRY
			DROP TABLE #tmpcr3info
		END TRY
		BEGIN CATCH
		END CATCH

		CREATE TABLE #tmpcr3info
		(
			ListingID int
			,RentPropertyID int
			,MGTCOID		int
			,PROPERTYNAME	varchar(500)
			,addressline1	varchar(500)
			,addressline2	varchar(500)
			,CITY			varchar(500)
			,statecd		varchar(50)
			,postalcode		varchar(50)
			,cbsacode		varchar(50)
			,cbsaname		varchar(500)
			,PrimaryMarketName	varchar(500)
			,NumActivePhotos	int
			,HasActiveHDPhotos	int
			,HasCommunityVideoURL	int
			,HasHDVideoURL	int
			,HasVirtualTour	int
			,HasHDTourURL	int
			,NumActiveFloorPlans	int
			,HasLinkedFloorPlans	int
			,HasActiveHDFloorPlans	int
			,NumActiveAmenities	int
			,NumCertRatingsReviews	int
			,HasCouponActive	int
			,HasPricing			int
			,HasOfficeHours		int
			,HasDescriptionLength	int
			,LastUpdate		datetime
			,HasDynamicLeadForm	int
			,PlacementTier		varchar(500)
			,Points				int
			,LeadEmail		varchar(500)
		);


		SELECT @cmd = N'
		SELECT CONVERT(int,OPI.ListingID) AS ListingID
			,CONVERT(int,OPI.RentPropertyID) AS RentPropertyID
			,CONVERT(int,OPI.MGTCOID) AS MGTCOID
			,OPI.PROPERTYNAME
			,OPI.addressline1
			,OPI.addressline2
			,OPI.CITY
			,OPI.statecd
			,OPI.postalcode
			,OPI.cbsacode
			,OPI.cbsaname
			,OPI.PrimaryMarketName
			,OPI.NumActivePhotos
			,OPI.HasActiveHDPhotos
			,OPI.HasCommunityVideoURL
			,OPI.HasHDVideoURL
			,OPI.HasVirtualTour
			,OPI.HasHDTourURL
			,OPI.NumActiveFloorPlans
			,OPI.HasLinkedFloorPlans
			,OPI.HasActiveHDFloorPlans
			,OPI.NumActiveAmenities
			,OPI.NumCertRatingsReviews
			,OPI.HasCouponActive
			,OPI.HasPricing
			,OPI.HasOfficeHours
			,OPI.DescriptionLength
			,OPI.LastUpdate
			,OPI.HasDynamicLeadForm
			,OPI.PlacementTier
			,OPI.Points
			,OPI.LeadEmail
		FROM  OPENQUERY([ORACLEAPTG], '' 
		   SELECT
			 ListingID, RentPropertyID, MGTCOID,PROPERTYNAME,addressline1,addressline2,CITY,statecd,postalcode,cbsacode,cbsaname,PrimaryMarketName,NumActivePhotos,HasActiveHDPhotos
		,HasCommunityVideoURL,HasHDVideoURL,HasVirtualTour,HasHDTourURL,NumActiveFloorPlans,HasLinkedFloorPlans,HasActiveHDFloorPlans,NumActiveAmenities,NumCertRatingsReviews
		,HasCouponActive,HasPricing,HasOfficeHours,DescriptionLength,TO_CHAR(LastUpdate,''''MM/DD/YYYY'''') AS LastUpdate,HasDynamicLeadForm,PlacementTier,Points,LeadEmail
		   FROM SQLSERVERSEL.TMP_CONTENT_SCORECARD
		'') OPI ';


		--load the data from the OPENQUERY into the dummy table
		INSERT	INTO #tmpcr3info
				EXEC sp_executesql 
					@cmd;
	END TRY
	BEGIN CATCH
		SELECT 
			@ErrorMessage		= ERROR_MESSAGE(),
			@ErrorNumber		= ERROR_NUMBER(),
			@ErrorSeverity		= ERROR_SEVERITY(),
			@ErrorState			= ERROR_STATE(),
			@ErrorLine			= ERROR_LINE(),
			@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');

		SET @ErrorMessage = 'Attempting to load data to CR3 temp table. Error in code seciton - ' + @codesection + '   Error - ' + @ErrorMessage


		raiserror(@ErrorMessage,16,1) with log;

		RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	
	END CATCH

	--Now mart the data
	BEGIN TRY
		BEGIN TRANSACTION

			SET @codesection = 'Mart the CR3 info from temp table'

			DELETE FROM Staging.DashboardCR3info

			INSERT INTO Staging.DashboardCR3info
			SELECT * FROM #tmpcr3info 			

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		SELECT 
			@ErrorMessage		= ERROR_MESSAGE(),
			@ErrorNumber		= ERROR_NUMBER(),
			@ErrorSeverity		= ERROR_SEVERITY(),
			@ErrorState			= ERROR_STATE(),
			@ErrorLine			= ERROR_LINE(),
			@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');

		SET @ErrorMessage = 'Attempting to mart CR3 data. Error in code seciton - ' + @codesection + '   Error - ' + @ErrorMessage

		if @@trancount > 0
			ROLLBACK TRANSACTION


		raiserror(@ErrorMessage,16,1) with log;

		RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	
	END CATCH
	-----------------------------------------------------------------------
	--Get invoice information from Zuora (changed from MAX to Zuora on 7/10/17)
	-----------------------------------------------------------------------
	
	SET @codesection = 'Get Invoice Info'

	--Do the data loads to temp tables
	BEGIN TRY

		SET @codesection = 'Data Load To Temp Tables - Invoice Info'

		SELECT *
		,inv.BilledRevenue * p.AGRevAllocation		AS AGRevenue
		,inv.BilledRevenue * p.RentRevAllocation	AS RentRevenue
		,CASE WHEN p.Combo =1 THEN 'Combo'
				WHEN p.IsAGProduct = 1 AND p.IsRentProduct = 0 THEN 'AG'
				WHEN p.IsRentProduct = 1 AND p.IsAGProduct = 0 THEN 'Rent'
				WHEN p.RentRevAllocation = 0 AND p.AGRevAllocation > 0 THEN 'AG'
				WHEN p.AGRevAllocation = 0 AND p.RentRevAllocation > 0 THEN 'Rent'
				ELSE 'What is left' END AS ProductBrand
		INTO #InvoicingData
		FROM
			(
			SELECT  CAST(CONVERT(VARCHAR(8),i.posted_date,112) AS INT)						AS PostedDateKey
				   ,'Zuora'																	AS SourceSystem
				   ,ISNULL(s.account_id,'No ID') AS CustomerID --this comes from the subscription (not invoice item b/c of consolidated billing situations)
				   ,ISNULL(CAST(a.crm_id AS VARCHAR(18)),'No SFDC ID')						AS SFDCPropertyAccountID
				   ,a.account_number
				   ,p.sku
				   ,ISNULL(i.account_id,'No ID')											AS InvoiceCustomerID--this is who the bill went to
				   ,ISNULL(i.id,'No ID')													AS InvoiceID--Chose this as a degenerate dimension for now b/c the only other things we may want/need are Bill Run (source_id) and maybe invoice_number?
				   ,ISNULL(s.id,'No ID')													AS SubscriptionID
				   ,ISNULL(ii.product_id,'No ID')											AS ProductID
				   ,ISNULL(CAST(CONVERT(VARCHAR(8),ii.service_start_date,112) AS INT),0)	AS ServiceStartDateKey
				   ,ISNULL(CAST(CONVERT(VARCHAR(8),ii.service_end_date,112) AS INT),0)		AS ServiceEndDateKey
				   ,ISNULL(ii.charge_amount,0)												AS ChargeAmount
				   ,ISNULL(d.charge_amount,0)												AS DiscountAmount
				   ,i.transferred_to_accounting
				   ,i.transferred_to_accounting_c
				   ,ISNULL(ii.charge_amount,0) + ISNULL(d.charge_amount,0)					AS BilledRevenue
			FROM    FiveTran.fivetranzuora.invoice_item AS ii
			LEFT OUTER JOIN FiveTran.fivetranzuora.invoice_item AS d
					ON ii.id = d.applied_to_invoice_item_id
					   AND d.processing_type = 1
					   AND d.is_deleted = 0
				--AND t.applied_to_invoice_item_id IS NOT NULL
			INNER JOIN FiveTran.fivetranzuora.subscription AS s
					ON ii.subscription_id = s.id
			INNER JOIN FiveTran.fivetranzuora.invoice AS i
					ON ii.invoice_id = i.id
					   AND i.is_deleted = 0
					   AND i.status = 'Posted'
			JOIN    FiveTran.fivetranzuora.account AS a
					ON s.account_id = a.id
			JOIN	FiveTran.fivetranzuora.product AS p
					ON ii.product_id = p.id
			WHERE   ii.is_deleted = 0
					AND ii.processing_type = 0
				AND ISNULL(CAST(CONVERT(VARCHAR(8),ii.service_start_date,112) AS INT),0) BETWEEN @StartYMDID AND @EndYMDID
				AND ISNULL(CAST(CONVERT(VARCHAR(8),ii.service_end_date,112) AS INT),0) BETWEEN @StartYMDID AND @EndYMDID
				AND ii.accounting_code <> '111013 - A/R Offset Transfer Balance Zuora'
			) AS inv
		LEFT OUTER JOIN
						(
						SELECT p.zqu__ZuoraId__c																			AS ZuoraProductID
						,p.name																								AS ProductName
						,MAX(CAST(p.Rent_com_Product__c AS INT))															AS IsRentProduct
						,MAX(CAST(p.AG_Product__c AS INT))																	AS IsAGProduct
						,MAX(CAST(ot.Is_Rent_Listing__c AS INT))															AS IsRentListing
						,MAX(CAST(ot.Is_AG_Listing__c AS INT))																AS IsAGListing
						,MAX(CASE WHEN p.Rent_com_Product__c =1 AND p.AG_Product__c =1 THEN 1 ELSE 0 END)					AS Combo
						,MAX(CAST(p.Is_AG_Package__c AS INT))																AS IsAGPackage
						,MAX(p.Package_Type__c)																				AS PackageType
						,ISNULL(MAX(p.AG_Revenue__c),0)																		AS AGRevAllocation
						,ISNULL(MAX(p.Rent_Revenue__c),0)																	AS RentRevAllocation
						FROM    SalesForce.dbo.Product2 AS p
						LEFT OUTER JOIN	SalesForce.dbo.ProductFulfillment__c AS pf
								ON p.id = pf.Product__c
						LEFT OUTER JOIN	SalesForce.dbo.Product_Option__c AS po
								ON pf.id = po.Product_Fulfillment__c
						LEFT OUTER JOIN	SalesForce.dbo.Option_Type__c AS ot
								ON po.Option_Type__c = ot.id
						GROUP BY p.zqu__ZuoraId__c		
						,p.name
						) AS p
		ON inv.ProductID = p.ZuoraProductID

		------------------------
		--Drop client temp tables
		------------------------

		BEGIN TRY
			DROP TABLE #Clients
		END TRY
		BEGIN CATCH
		END CATCH

		BEGIN TRY
			DROP TABLE #ComboClients
		END TRY
		BEGIN CATCH
		END CATCH

		BEGIN TRY
			DROP TABLE #AGClients
		END TRY
		BEGIN CATCH
		END CATCH

		BEGIN TRY
			DROP TABLE #RentClients
		END TRY
		BEGIN CATCH
		END CATCH

		------------------------
		---Get all clients and spend
		------------------------
		SELECT  i.SFDCPropertyAccountID
		,dl.ListingID
		,dl.PropertyIDAG		AS AGPropertyID
		,dl.PropertyIDRent		AS RentcomPropertyID
		,i.ProductName
		,i.InvAmount
		,i.AGRevenue
		,i.RentRevenue
		,CASE WHEN i.AGRevAlloc = 0 AND i.RentRevAlloc = 0 THEN 1 ELSE 0 END AS NoBrandRevAllocation
		INTO    #Clients
		FROM    (
				 SELECT inv.SFDCPropertyAccountID
				 ,inv.ProductName
				,SUM(inv.BilledRevenue)		AS InvAmount
				,SUM(inv.AGRevenue)			AS AGRevenue
				,SUM(inv.RentRevenue)		AS RentRevenue
				,MAX(inv.AGRevAllocation)	AS AGRevAlloc
				,MAX(inv.RentRevAllocation)	AS RentRevAlloc
				 FROM   #InvoicingData AS inv
				 GROUP BY inv.SFDCPropertyAccountID
				 ,inv.ProductName
				) AS i
		JOIN    RentPath.Dimension.Listings AS dl
				ON i.SFDCPropertyAccountID = dl.SFPropertyAcctID;

		-------------------------
		--Index SFDCPropertyAccountID	
		-------------------------	
		CREATE NONCLUSTERED INDEX [idx_sf] ON #Clients (SFDCPropertyAccountID ASC)
		-------------------------
		--Grab each "Product Brand" client (AG, Rent or Combo)
		-------------------------	
		SELECT SFDCPropertyAccountID
				,ProductName
				,BilledRevenue
		INTO	#ComboClients
		FROM    #InvoicingData
		WHERE   ProductBrand = 'Combo';

		SELECT SFDCPropertyAccountID
				,ProductName
				,BilledRevenue
		INTO	#AGClients
		FROM    #InvoicingData
		WHERE   ProductBrand = 'AG';

		SELECT SFDCPropertyAccountID
				,ProductName
				,BilledRevenue
		INTO	#RentClients
		FROM    #InvoicingData
		WHERE   ProductBrand = 'Rent'

		-------------------------
		--Index SFDCPropertyAccountID on "Product Brand" tables
		-------------------------	
		CREATE NONCLUSTERED INDEX [idx_sf] ON #ComboClients (SFDCPropertyAccountID ASC)
		
		CREATE NONCLUSTERED INDEX [idx_sf] ON #AGClients (SFDCPropertyAccountID ASC)

		CREATE NONCLUSTERED INDEX [idx_sf] ON #RentClients (SFDCPropertyAccountID ASC)

	END TRY
	BEGIN CATCH
		-------------------------
		--Error Handling
		-------------------------	

		SELECT 
			@ErrorMessage		= ERROR_MESSAGE(),
			@ErrorNumber		= ERROR_NUMBER(),
			@ErrorSeverity		= ERROR_SEVERITY(),
			@ErrorState			= ERROR_STATE(),
			@ErrorLine			= ERROR_LINE(),
			@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');

		SET @ErrorMessage = 'Attempting to load data to Invoice temp table. Error in code section - ' + @codesection + '   Error - ' + @ErrorMessage


		raiserror(@ErrorMessage,16,1) with log;

		RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	
	END CATCH

		-------------------------
		--Put the invoice data into the Staging table to pick up later
		-------------------------	
	BEGIN TRY
		BEGIN TRANSACTION

			SET @codesection = 'Mart Invoice info'

		DELETE FROM Staging.DashboardInvInfo

		INSERT INTO Staging.DashboardInvInfo
		SELECT c.ListingID
		,c.AGPropertyID
		,NULL AS RentcomPropertyID
		,CAST(ISNULL(c.InvAmount,0) AS MONEY)				AS InvAmount
		,pck.AGPackageType			
		,pck.RentPackageType
		,ag.AGProductDescription
		,CAST(ISNULL(ag.AGMonthlySpend,0) AS MONEY)			AS AGMonthlySpend
		,rnt.RentProductDescription
		,CAST(ISNULL(rnt.RentMonthlySpend,0) AS MONEY)		AS RentMonthlySpend
		,cm.ComboProductDescription
		,CAST(ISNULL(cm.ComboMonthlySpend,0) AS MONEY)		AS ComboMonthlySpend
		FROM 	(
				SELECT  SFDCPropertyAccountID
						,ListingID
						,AGPropertyID
						,RentcomPropertyID
						,CAST(ISNULL(SUM(InvAmount),0) AS MONEY)	AS InvAmount
						,CAST(ISNULL(SUM(AGRevenue),0) AS MONEY)	AS AGMonthlySpend
						,CAST(ISNULL(SUM(RentRevenue),0) AS MONEY)	AS RentMonthlySpend
				FROM    #Clients
				GROUP BY SFDCPropertyAccountID
						,ListingID
						,AGPropertyID
						,RentcomPropertyID
				) AS c
		LEFT OUTER JOIN
				(
				SELECT cte.SFDCPropertyAccountID
				, CONVERT(varchar(8000),STUFF(
					(
						SELECT  ', ' + CONVERT(varchar(8000),dl3.ProductName)
						FROM #ComboClients dl3 
						WHERE dl3.SFDCPropertyAccountID = cte.SFDCPropertyAccountID								
						FOR XML PATH(''), type
					).value('.','varchar(8000)'),1,1,''
				)) AS ComboProductDescription
				, 
					(
						SELECT  SUM(dl3.BilledRevenue)
						FROM #ComboClients dl3 
						WHERE dl3.SFDCPropertyAccountID = cte.SFDCPropertyAccountID
					)
					AS ComboMonthlySpend
				FROM #ComboClients AS cte
				GROUP BY cte.SFDCPropertyAccountID
				) AS cm
		ON c.SFDCPropertyAccountID = cm.SFDCPropertyAccountID
		LEFT OUTER JOIN
				(
				SELECT cte.SFDCPropertyAccountID
				, CONVERT(varchar(8000),STUFF(
					(
						SELECT  ', ' + CONVERT(varchar(8000),dl3.ProductName)
						FROM #AGClients dl3 
						WHERE dl3.SFDCPropertyAccountID = cte.SFDCPropertyAccountID							
						FOR XML PATH(''), type
					).value('.','varchar(8000)'),1,1,''
				)) AS AGProductDescription
				, 
					(
						SELECT  SUM(dl3.BilledRevenue)
						FROM #AGClients dl3 
						WHERE dl3.SFDCPropertyAccountID = cte.SFDCPropertyAccountID
					)
					AS AGMonthlySpend
				FROM #AGClients AS cte
				GROUP BY cte.SFDCPropertyAccountID
				) AS ag
		ON c.SFDCPropertyAccountID = ag.SFDCPropertyAccountID
		LEFT OUTER JOIN
				(
				SELECT cte.SFDCPropertyAccountID
				, CONVERT(varchar(8000),STUFF(
					(
						SELECT  ', ' + CONVERT(varchar(8000),dl3.ProductName)
						FROM #RentClients dl3 
						WHERE dl3.SFDCPropertyAccountID = cte.SFDCPropertyAccountID							
						FOR XML PATH(''), type
					).value('.','varchar(8000)'),1,1,''
				)) AS RentProductDescription
				, 
					(
						SELECT  SUM(dl3.BilledRevenue)
						FROM #RentClients dl3 
						WHERE dl3.SFDCPropertyAccountID = cte.SFDCPropertyAccountID
					)
					AS RentMonthlySpend
				FROM #RentClients AS cte
				GROUP BY cte.SFDCPropertyAccountID
				) AS rnt
		ON c.SFDCPropertyAccountID = rnt.SFDCPropertyAccountID
		LEFT OUTER JOIN
						(SELECT SFDCPropertyAccountID
						,MAX(CASE WHEN IsRentProduct = 1 THEN PackageType END)	AS RentPackageType
						,MAX(CASE WHEN IsAGProduct = 1 THEN PackageType END)	AS AGPackageType
						FROM #InvoicingData
						GROUP BY SFDCPropertyAccountID
						) AS pck
		ON c.SFDCPropertyAccountID = pck.SFDCPropertyAccountID
		
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		-------------------------
		--Error Handling
		-------------------------
		SELECT 
			@ErrorMessage		= ERROR_MESSAGE(),
			@ErrorNumber		= ERROR_NUMBER(),
			@ErrorSeverity		= ERROR_SEVERITY(),
			@ErrorState			= ERROR_STATE(),
			@ErrorLine			= ERROR_LINE(),
			@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');

		SET @ErrorMessage = 'Attempting to mart AVG Info. Error in code seciton - ' + @codesection + '   Error - ' + @ErrorMessage

		if @@trancount > 0
			ROLLBACK TRANSACTION


		raiserror(@ErrorMessage,16,1) with log;

		RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	
	END CATCH

	/* ===================================================================================================================== */

	SET @codesection = 'Average Information'

	--Do the data loads to temp tables
	BEGIN TRY


		SET @codesection = 'Data Load To Average Temp Tables'


		--SELECT TOP 10 * FROM ApartmentGuide.Dimension.AGRentCombinedDimensionListings agrdl WITH (NOLOCK)

		BEGIN TRY
			DROP TABLE #tmplistingcbsa
		END TRY
		BEGIN CATCH
		END CATCH

		BEGIN TRY
			DROP TABLE #tmpavginfo
		END TRY
		BEGIN CATCH
		END CATCH

		;WITH cte AS
		(
		SELECT mlist.ListingID, MAX(agrdl.PropertyZipCode) AS ZipCode
		,MAX(agrdl.PropertyCity) AS PropertyCity
		,MAX(agrdl.PropertyState) AS PropertyState
		,MAX(agrdl.LowPrice) AS LowRent, MAX(agrdl.HighPrice) AS HighRent
		,MAX(CASE WHEN agrdl.StatusIDAG = 1 THEN StatusIDAG ELSE StatusIDRent END) AS StatusID
		FROM #tmpmasterlist mlist WITH (NOLOCK)
		LEFT OUTER JOIN Rentpath.Dimension.Listings as agrdl WITH (NOLOCK)
			ON mlist.ListingID = agrdl.ListingID
		GROUP BY mlist.ListingID
		)
			SELECT cte.ListingID, cte.ZipCode, cte.PropertyCity, cte.PropertyState, cbsa.CBSACode, LowRent, HighRent, StatusID
			INTO #tmplistingcbsa
			FROM cte
			LEFT OUTER JOIN DBAUtility.dbo.ZipCBSA cbsa WITH (NOLOCK)
				ON cbsa.ZIPCode = cte.ZipCode
			WHERE StatusID = 1								--only do the current ones that are in either AG or Rent

		--SELECT * FROM #tmplistingcbsa ORDER BY ListingID
		UPDATE #tmplistingcbsa
		SET HighRent = LowRent
		WHERE HighRent = 0 AND LowRent > 0

		UPDATE #tmplistingcbsa
		SET LowRent = HighRent
		WHERE LowRent = 0 AND HighRent > 0

		UPDATE #tmplistingcbsa			--so won't mess up the AVG
		SET LowRent = NULL
		WHERE LowRent = 0 

		UPDATE #tmplistingcbsa
		SET HighRent = NULL
		WHERE HighRent = 0 
		
		--Now get the averages and tie them back to the listings
		;WITH cte AS
		(
			SELECT lcbsa.ZipCode, AVG(LowRent) AS AVGZipLowRentalRate, AVG(HighRent) AS AVGZipHighRentalRate
			FROM #tmplistingcbsa lcbsa WITH (NOLOCK)
			GROUP BY lcbsa.ZipCode
		)
			, cte2 AS
			(
				SELECT lcbsa.CBSACode, AVG(LowRent) AS AVGCBSALowRentalRate, AVG(HighRent) AS AVGCBSAHighRentalRate
				FROM #tmplistingcbsa lcbsa WITH (NOLOCK)
				GROUP BY lcbsa.CBSACode
			)
				, cte3 AS
				(
					SELECT lcbsa.PropertyCity, lcbsa.PropertyState, AVG(LowRent) AS AVGCityLowRentalRate, AVG(HighRent) AS AVGCityHighRentalRate
					FROM #tmplistingcbsa lcbsa WITH (NOLOCK)
					GROUP BY lcbsa.PropertyCity, lcbsa.PropertyState
				)
					SELECT mlist.ListingID
					, ISNULL(cte.AVGZipLowRentalRate,0) AS AVGZipLowRentalRate
					, ISNULL(cte.AVGZipHighRentalRate,0) AS AVGZipHighRentalRate
					, ISNULL(cte2.AVGCBSALowRentalRate,0) AS AVGCBSALowRentalRate
					, ISNULL(cte2.AVGCBSAHighRentalRate,0) AS AVGCBSAHighRentalRate
					, ISNULL(cte3.AVGCityLowRentalRate,0) AS AVGCityLowRentalRate
					, ISNULL(cte3.AVGCityHighRentalRate,0) AS AVGCityHighRentalRate
					INTO #tmpavginfo 
					FROM #tmpmasterlist mlist WITH (NOLOCK)
					LEFT OUTER JOIN #tmplistingcbsa lcbsa WITH (NOLOCK)
						ON lcbsa.ListingID = mlist.ListingID
					LEFT OUTER JOIN cte
						ON cte.ZipCode = lcbsa.ZipCode
					LEFT OUTER JOIN cte2
						ON cte2.CBSACode = lcbsa.CBSACode
					LEFT OUTER JOIN cte3
						ON cte3.PropertyCity = lcbsa.PropertyCity AND cte3.PropertyState = lcbsa.PropertyState
					--ORDER BY mlist.ListingID
	END TRY
	BEGIN CATCH
		SELECT 
			@ErrorMessage		= ERROR_MESSAGE(),
			@ErrorNumber		= ERROR_NUMBER(),
			@ErrorSeverity		= ERROR_SEVERITY(),
			@ErrorState			= ERROR_STATE(),
			@ErrorLine			= ERROR_LINE(),
			@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');

		SET @ErrorMessage = 'Attempting to load data to Average Temp table. Error in code seciton - ' + @codesection + '   Error - ' + @ErrorMessage


		raiserror(@ErrorMessage,16,1) with log;

		RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	
	END CATCH

	--Now mart the data
	BEGIN TRY
		BEGIN TRANSACTION

			SET @codesection = 'Marting Average information'

			DELETE FROM Staging.DashboardAVGInfo

			INSERT INTO Staging.DashboardAVGInfo
			SELECT av.ListingID, AVGZipLowRentalRate, AVGZipHighRentalRate, AVGCBSALowRentalRate, AVGCBSAHighRentalRate, AVGCityLowRentalRate, AVGCityHighRentalRate
			FROM #tmpavginfo av WITH (NOLOCK)

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		SELECT 
			@ErrorMessage		= ERROR_MESSAGE(),
			@ErrorNumber		= ERROR_NUMBER(),
			@ErrorSeverity		= ERROR_SEVERITY(),
			@ErrorState			= ERROR_STATE(),
			@ErrorLine			= ERROR_LINE(),
			@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');

		SET @ErrorMessage = 'Attempting to load data to Average table. Error in code seciton - ' + @codesection + '   Error - ' + @ErrorMessage

		if @@trancount > 0
			ROLLBACK TRANSACTION


		raiserror(@ErrorMessage,16,1) with log;

		RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	
	END CATCH


	/* ===================================================================================================================== */
	
	SET @codesection = 'Get Mobile Coupon Info'

	--Do the data loads to temp tables
	BEGIN TRY


		SET @codesection = 'Data Load To Temp Tables - Mobile Coupon Info'


		BEGIN TRY
			DROP TABLE #tmpcouponinfo
		END TRY
		BEGIN CATCH
		END CATCH

		CREATE TABLE #tmpcouponinfo
		(ListingID	int
		,MobileCouponActive	int
		,MobileCouponText	varchar(3000)
		,MobileCouponStartDate	datetime
		,MobileCouponExpirationDate	datetime
		)

		SELECT @cmd = 
		N'SELECT OPI.LISTINGID AS ListingID
		,OPI.MOBILECOUPONACTIVE AS MobileCouponActive
		,OPI.MOBILECOUPONTEXT AS MobileCouponText
		,OPI.MOBILECOUPONSTARTDATE AS MobileCouponStartDate
		,OPI.MOBILECOUPONEXPIRATIONDATE AS MobileCouponExpirationDate
		FROM  OPENQUERY([ORACLEAPTG], '' 
		   		 SELECT    lf.ListingID AS ListingID
                                           ,CAST (1 AS INT) AS MobileCouponActive
                                           ,lf.mobile_coupon AS MobileCouponText
                                           ,TRUNC(lo.StartDate) AS MobileCouponStartDate
                                           ,TRUNC(lo.EndDate) AS MobileCouponExpirationDate
                                  FROM      PROPERTIES.proplistings lf
                                  INNER JOIN PROPERTIES.PROPLISTOPTIONS lo
                                            ON lf.ListingID = lo.ListingID
                                               AND TRUNC(SYSDATE) BETWEEN lo.StartDate AND lo.EndDate
                                               AND lo.OptionTypeID = 43
                                               AND lo.IsActive = 1
		'') OPI ';



		--load the data from the OPENQUERY into the dummy table
		INSERT	INTO #tmpcouponinfo
				EXEC sp_executesql 
					@cmd;

	END TRY
	BEGIN CATCH
		SELECT 
			@ErrorMessage		= ERROR_MESSAGE(),
			@ErrorNumber		= ERROR_NUMBER(),
			@ErrorSeverity		= ERROR_SEVERITY(),
			@ErrorState			= ERROR_STATE(),
			@ErrorLine			= ERROR_LINE(),
			@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');

		SET @ErrorMessage = 'Attempting to load data to AVG temp table. Error in code section - ' + @codesection + '   Error - ' + @ErrorMessage


		raiserror(@ErrorMessage,16,1) with log;

		RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	
	END CATCH

	--Now mart the data
	BEGIN TRY
		BEGIN TRANSACTION

			SET @codesection = 'Mart Mobile Coupon info'

			DELETE FROM Staging.DashboardMobileCouponInfo

			INSERT INTO Staging.DashboardMobileCouponInfo
			SELECT ListingID, MobileCouponActive, MobileCouponText, MobileCouponStartDate, MobileCouponExpirationDate FROM #tmpcouponinfo


		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		SELECT 
			@ErrorMessage		= ERROR_MESSAGE(),
			@ErrorNumber		= ERROR_NUMBER(),
			@ErrorSeverity		= ERROR_SEVERITY(),
			@ErrorState			= ERROR_STATE(),
			@ErrorLine			= ERROR_LINE(),
			@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');

		SET @ErrorMessage = 'Attempting to mart AVG Info. Error in code seciton - ' + @codesection + '   Error - ' + @ErrorMessage

		if @@trancount > 0
			ROLLBACK TRANSACTION


		raiserror(@ErrorMessage,16,1) with log;

		RETURN 0		-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.
	
	END CATCH
	
	SET NOCOUNT OFF;
END;







GO
/****** Object:  StoredProcedure [Staging].[pr_LastEventFlagUpdate]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [Staging].[pr_LastEventFlagUpdate]

/*************************************************************************************************
*
* Name:	Staging.pr_LastEventFlagUpdate
*
* Desc:	
*
* Test:	
*
* Note:
*
* Hist:	01	09/25/2015		Sarah Mims			Initial Version
*
**************************************************************************************************/
AS

SET NOCOUNT ON


----------------------------------------------
--Drop temp tables
----------------------------------------------

IF OBJECT_ID('tempdb..#MaxEventDate') IS NOT NULL
	BEGIN
		DROP TABLE #MaxEventDate
	END		  

IF OBJECT_ID('tempdb..#ExitPoint') IS NOT NULL
	BEGIN
		DROP TABLE #ExitPoint
	END		  

IF OBJECT_ID('tempdb..#ExitParseID') IS NOT NULL
	BEGIN
		DROP TABLE #ExitParseID
	END	
----------------------------------------------
--Set LastEventFlag to 0
----------------------------------------------
UPDATE RentPath.Staging.TealiumParsedPivot
SET LastEventFlag = 0

----------------------------------------------
--Get the last action the user performed in this visit
----------------------------------------------
		-----------------------------------------
		--Get ParseID associated with Max Event Date
		--Row Number arbitrary over ParseIDs with same Max Event Date
		--Updated Query to remove dupes
		-----------------------------------------
		SELECT  X.ParseID
			   ,X.Visit
			   ,X.EventDate
			   ,ROW_NUMBER() OVER (PARTITION BY X.Visit ORDER BY X.EventDate DESC) AS RowNumber
		INTO    #MaxEventDate
		FROM    (
                 SELECT ParseID
                       ,Visit
                       ,MAX(EventDate) AS EventDate
                 FROM   RentPath.Staging.TealiumParsedPivot AS tpp
                 JOIN   TealiumWebMetrics.Conformed.Profile cp
                        ON tpp.profileid = cp.profileid
                           AND tpp.subprofileid = cp.SubProfileID
                           AND cp.StatusKey = 1
                 GROUP BY ParseID
                       ,Visit
				) AS X
		---------------------------------------
		--Get Max Event Date for Each Visit
		---------------------------------------
		SELECT  Visit
			   ,MAX(EventDate) AS ExitPoint
		INTO    #ExitPoint
		FROM    RentPath.Staging.TealiumParsedPivot tpp
		JOIN    TealiumWebMetrics.Conformed.Profile cp
				ON tpp.profileid = cp.profileid
				   AND tpp.subprofileid = cp.SubProfileID
				   AND cp.StatusKey = 1
		GROUP BY Visit
		
		----------------------------------------------
		--Get list of Exit ParseIDs
		----------------------------------------------
		SELECT  ParseID
		INTO    #ExitParseID
		FROM    (
				 SELECT *
				 FROM   #MaxEventDate AS med
				 WHERE  med.RowNumber = 1
				) AS x
		INNER JOIN #ExitPoint AS y
				ON x.Visit = y.Visit
				   AND x.EventDate = y.ExitPoint

----------------------------------------------
--Update Last Event Flag column
----------------------------------------------
UPDATE  rs
SET     rs.LastEventFlag = CASE WHEN epi.parseid IS NOT NULL THEN 1
                                ELSE 0
                           END
FROM    RentPath.Staging.TealiumParsedPivot AS rs
LEFT OUTER JOIN #ExitParseID AS epi
        ON rs.ParseID = epi.ParseID

SET NOCOUNT OFF

GO
/****** Object:  StoredProcedure [Staging].[pr_MonthlyAxioComps]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROC [Staging].[pr_MonthlyAxioComps] AS
/*
* Name:	Staging.pr_MonthlyAxioComps
* ------------------------------------------------------------------------------------------
* Desc:	
* ------------------------------------------------------------------------------------------
* Test:	EXEC Staging.pr_MonthlyAxioComps
* ------------------------------------------------------------------------------------------
* Notes:
* ------------------------------------------------------------------------------------------
* Hist:	01	05/24/2017	Kimberley Morrow		Use Case for POC - Initial Version.	
* ------------------------------------------------------------------------------------------
*/
 
BEGIN TRY
		-----------------------
		--Declare Error Handling Variables
		-----------------------
		DECLARE @ErrorMessage				NVARCHAR(4000)
			,@ErrorSeverity					INT
			,@ErrorState					INT
			,@ErrorDesc						VARCHAR(500)

	----------------------------------
	--Declare and Set Logging Variables
	----------------------------------
	 DECLARE @TrackDate DATETIME 
			,@LocalYMDID INT 
			,@YMDID INT
			,@LengthInSeconds INT 
			,@DatabaseName VARCHAR(128) 
			,@ProcedureName VARCHAR(128) 
			,@CommentLine VARCHAR (500)

	SET	@TrackDate = GETDATE();
	SET @LengthInSeconds = 0;
	SET @DatabaseName = DB_NAME()  ;      
	SET @ProcedureName = 'Staging.pr_MonthlyAxioComps';	
	SET @YMDID = CAST(CONVERT(VARCHAR(8),GETDATE()-1,112) AS INT);
	SET	@LocalYMDID = ISNULL(@YMDID,CAST(CONVERT(VARCHAR(8),GETDATE()-1,112) AS INT));
	



	----------------------------------
	--Start Logging
	----------------------------------	
	SET @LengthInSeconds = DATEDIFF(ss, @TrackDate,GETDATE())            
	EXEC DBAUtility.dbo.pr_Logging_StoredProcs @DatabaseName = @DatabaseName,
		@ProcName = @ProcedureName,
		@StepName = '1 - Start Procedure: Staging.pr_MonthlyAxioComps',
		@VariableStates = @LocalYMDID,
		@LengthInSeconds = @LengthInSeconds,
		@Comments = 'Start Procedure';
	SET @TrackDate = GETDATE();

	----------------------------------
	-- Logging Staging Table is Empty
	----------------------------------	
	
	IF (SELECT COUNT(*) Records from Staging.MonthlyAxioComps) = 0 
	BEGIN
		SET @LengthInSeconds = DATEDIFF(ss, @TrackDate,GETDATE())            
		EXEC DBAUtility.dbo.pr_Logging_StoredProcs @DatabaseName = @DatabaseName,
			@ProcName = @ProcedureName,
			@StepName = '2 - ERROR WITH SOURCE - NO DATA - Procedure: Staging.pr_MonthlyAxioComps',
			@VariableStates = @LocalYMDID,
			@LengthInSeconds = @LengthInSeconds,
			@Comments = 'ERROR WITH SOURCE - NO DATA - Procedure: Staging.pr_MonthlyAxioComps';
		SET @TrackDate = GETDATE();

		RAISERROR ('Staging.MonthlyAxioComps has no data. Contact Dallon to Axio Comp file.', -- Message text.
            16, -- Severity.
            1 -- State.
            );
	END 

----------------------------------------
--TRUNCATE Last Months DATA
------------------------------------------

DELETE FROM Dimension.MonthlyAxioComps;

----------------------------------------
--Change AxioIDs to SFDCIDs
------------------------------------------

INSERT INTO Staging.MonthlyAxioCompsPivot
(
	[External_Id__c]
	,[ID]
	,[AXIO_COMP1__c]
	,[AXIO_COMP2__c]
	,[AXIO_COMP3__c]
	,[AXIO_COMP4__c]
	,[AXIO_COMP5__c]
	,[AXIO_COMP6__c]
	,[AXIO_COMP7__c]
	,[AXIO_COMP8__c]
)

SELECT a.External_ID__c
,a.ID
,b.ID AS AXIO_COMP1__c
,c.ID AS AXIO_COMP2__c
,d.ID AS AXIO_COMP3__c
,e.ID AS AXIO_COMP4__c
,f.ID AS AXIO_COMP5__c
,g.ID AS AXIO_COMP6__c
,h.ID AS AXIO_COMP7__c
,i.ID AS AXIO_COMP8__c
FROM staging.MonthlyAxioComps AS a
LEFT OUTER JOIN staging.MonthlyAxioComps AS b
   ON CAST(a.Axio_Comp1__c AS INT) = CAST(b.External_ID__c AS INT)
LEFT OUTER JOIN staging.MonthlyAxioComps AS c
   ON CAST(a.Axio_Comp2__c AS INT) = CAST(c.External_ID__c AS INT)
LEFT OUTER JOIN staging.MonthlyAxioComps AS d
   ON CAST(a.Axio_Comp3__c AS INT) = CAST(d.External_ID__c AS INT)
LEFT OUTER JOIN staging.MonthlyAxioComps AS e
   ON CAST(a.Axio_Comp4__c AS INT) = CAST(e.External_ID__c AS INT)
LEFT OUTER JOIN staging.MonthlyAxioComps AS f
   ON CAST(a.Axio_Comp5__c AS INT) = CAST(f.External_ID__c AS INT)
LEFT OUTER JOIN staging.MonthlyAxioComps AS g
   ON CAST(a.Axio_Comp6__c AS INT) = CAST(g.External_ID__c AS INT)
LEFT OUTER JOIN staging.MonthlyAxioComps AS h
   ON CAST(a.Axio_Comp7__c AS INT) = CAST(h.External_ID__c AS INT)
LEFT OUTER JOIN staging.MonthlyAxioComps AS i
   ON CAST(a.Axio_Comp8__c AS INT) = CAST(i.External_ID__c AS INT)

----------------------------------------
--Unpivot and insert into Dimension.MonthlyAxioComps
------------------------------------------

INSERT INTO Dimension.MonthlyAxioComps
(
	[External_Id__c]
	,[ID]
	,[Axio_Comps]
)
SELECT  DISTINCT unpvt.External_Id__c
       ,unpvt.ID
       ,Axio_Comps
FROM    Staging.MonthlyAxioCompsPivot UNPIVOT
   (Axio_Comps FOR Details IN (Axio_Comp1__c,Axio_Comp2__c,Axio_Comp3__c,Axio_Comp4__c,Axio_Comp5__c,Axio_Comp6__c,Axio_Comp7__c,Axio_Comp8__c)) AS unpvt


END TRY
BEGIN CATCH
	SET @ErrorMessage		= ERROR_MESSAGE()
	SET @ErrorSeverity		= ERROR_SEVERITY()
	SET @ErrorState			= ERROR_STATE()
		
	SET @ErrorMessage = 'Error occured in loading Dimension.MonthlyAxioComps for date ' + CONVERT(VARCHAR(30),@ymdid) + '.   Error - ' + @ErrorMessage
	
	----------------------------------
	--Logging
	----------------------------------	
	SET @LengthInSeconds = DATEDIFF(ss, @TrackDate,GETDATE())            
	EXEC DBAUtility.dbo.pr_Logging_StoredProcs @DatabaseName = @DatabaseName,
		@ProcName = @ProcedureName,
		@StepName = 'Error Occured.',
		@VariableStates = @LocalYMDID,
		@LengthInSeconds = @LengthInSeconds,
		@Comments = @ErrorMessage;
	SET @TrackDate = GETDATE();

 --------------------------------------------- 
 --Use RAISERROR inside the CATCH block to return error information about the original error that caused
 --execution to jump to the CATCH block.  Without this, it does not print or actually raise the error.
 --------------------------------------------- 
    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               );
			   	   	
END CATCH							



GO
/****** Object:  StoredProcedure [Staging].[pr_SmallPropertyListings]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



/*--######################################################################################
*
* Name:	[Staging].[pr_SmallPropertyListings]
*
* Desc:	This SPROC pulls down the data for Rentals/Lovely Syndication to AG to save to Staging.SmallPropertyListings.
*
* Test:	EXEC Staging.pr_SmallPropertyListings NULL
*	SELECT * FROM RentPath.Staging.SmallPropertyListings WHERE YMDID = 20150227
* Notes:
*		Note that the Rentals and Lovely property records that come in are on the syndication,
*			so there is no need to check either for status value.
*
* Hist:	01	03/06/2015	Bob Langley		Initial Version - Ticket 18228
* Hist: 02	05/12/2015	Don Wert		Ticket 19408, add DBAUtility.dbo.fnDigitOnly around the propertyid when building the Lovely temp table.  The property ID now includes
*										LV at the front same as the listingid.
--#######################################################################################*/
CREATE PROCEDURE [Staging].[pr_SmallPropertyListings]
(@datetorun	int = NULL)
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
    SET NOCOUNT ON;


	/* Testing 
	DECLARE @datetorun int
	SET @datetorun = NULL--20150227
	*/


	DECLARE
		@ErrorMessage					NVARCHAR(4000),
		@ErrorNumber					INT,
		@ErrorSeverity					INT,
		@ErrorState						INT,
		@ErrorLine						INT,
		@ErrorProcedure					NVARCHAR(200)
		
	DECLARE @codesection varchar(300)

	DECLARE @sqlcmd varchar(8000)
	DECLARE @sqlcmd2 nvarchar(4000)


	DECLARE @yearmonth int
	DECLARE @datetouse datetime
	DECLARE @datetouseymdid int
	DECLARE @periodbegymdid int
	DECLARE @periodendymdid int

	--Note:  input parameter @datetorun should be yesterday's date (only have data up through yesterday).  If null, will take today's date and subtract a day to get the run date to use.
	SET @datetouse = ISNULL(CONVERT(datetime,CONVERT(varchar(10),@datetorun)),CONVERT(datetime, Convert(varchar(10),GETDATE(),101)))		-- if null, set to today
	SET @datetouseymdid = CONVERT(int, Convert(varchar(10),@datetouse,112))											-- Get the date as integer			
	
	SET @periodbegymdid = (SELECT MonthStartYMDID FROM DBAUtility.Dimension.Dates WITH (NOLOCK) WHERE YMDID = @datetouseymdid)
	SET @periodendymdid = (SELECT MonthEndYMDID FROM DBAUtility.Dimension.Dates WITH (NOLOCK) WHERE YMDID = @datetouseymdid)
	SET @yearmonth = CONVERT(int,@periodbegymdid * .01)


	
	PRINT '@datetouse = ' + CONVERT(varchar(30),@datetouse)
	PRINT '@datetouseymdid = ' + CONVERT(varchar(30),@datetouseymdid)
	PRINT '@yearmonth = ' + CONVERT(varchar(30),@yearmonth)
	PRINT '@periodbegymdid = ' + CONVERT(varchar(30),@periodbegymdid)
	PRINT '@periodendymdid = ' + CONVERT(varchar(30),@periodendymdid)
	PRINT ' '


	/* ===================================================================================================================== */
   
   	-- Drop all temporary working tables
	SET @codesection = 'Drop temp working tables'


	BEGIN TRY
		DROP TABLE #tmpworkingtable
	END TRY
	BEGIN CATCH
	END CATCH

	BEGIN TRY
		DROP TABLE #tmprentalproperties
	END TRY
	BEGIN CATCH
	END CATCH

	BEGIN TRY
		DROP TABLE #tmplovelyproperties
	END TRY
	BEGIN CATCH
	END CATCH

	

	CREATE TABLE #tmplovelyproperties
	(ListingID		varchar(30)
	,ListingIDAlt	int
	,PropertyID		int
	, EndecaID		varchar(200)
	, PropertyName	varchar(300)
	, AddressLine1	varchar(300)
	, PropertyCity	varchar(300)
	, PropertyState varchar(20)
	, PropertyZip	int
	, GeoLat		decimal(10,4)
	, GeoLong		decimal(10,4)
	, PriceLow		int
	, PriceHigh		int
	)


	CREATE TABLE #tmprentalproperties
	(ListingID	varchar(30)
	,ListingIDAlt		int
	,ListingPriceLow	int
	,ListingPriceHigh	int
	,PropertyName		varchar(200)
	,AddressLine1		varchar(200)
	,PropertyCity		varchar(200)
	,PropertyState		varchar(20)
	,PropertyZIP		int
	,GeoLat				decimal(10,4)
	,GeoLong			decimal(10,4)
	,CBSACode			int
	)


	CREATE TABLE #tmpworkingtable				--same as Mart.SmallPropertyListings
	(
	YMDID		 					int					NOT NULL,
	YearMonth						int					NOT NULL,
	ListingID						int					NOT NULL,
	IsRentals						tinyint				NULL,
	IsLovely						tinyint				NULL,
	ListingStatusID					tinyint				NULL,
	ShowPricing						tinyint				NULL		DEFAULT 0,
	LowPrice						int					NOT NULL	DEFAULT 0,
	HighPrice						int					NOT NULL	DEFAULT 0,
	PropertyCity					varchar(40)			NOT NULL	DEFAULT '',
	PropertyState					varchar(2)			NOT NULL	DEFAULT '',
	ZipCode							varchar(10)			NOT NULL	DEFAULT '',
	GeoLong							decimal(10,4)		NULL,
	GeoLat							decimal(10,4)		NULL,
	GeogPoint						geography			NULL
	)
	/* ===================================================================================================================== */
	--Build the table to use in a temp table

	--Build the temp table for Rentals
	SET @codesection = 'Build the Rentals temp table'

	
	--not needed now - DBAUtility.dbo.fnDigitOnly(LISTINGID)
	
	SET @sqlcmd2 = 
		'select LISTINGID AS ListingID
		, CONVERT(int,DBAUtility.dbo.fnDigitOnly(LISTINGID)) AS ListingIDAlt		
		, LISTINGPRICELOW AS ListingPriceLow
		, LISTINGPRICEHIGH AS ListingPriceHigh
		, PROPERTYNAME AS PropertyName
		, ADDRESSLINE1 AS AddressLine1
		, PROPERTYCITY AS PropertyCity
		, PROPERTYSTATE AS PropertyState
		, PROPERTYZIP AS PropertyZip
		, LATITUDE AS GeoLat
		, LONGITUDE AS GeoLong
		, cbsacode AS CBSACode
		from OPENQUERY(ORACLEAPTG,''
					select a.LISTINGID, a.LISTINGPRICELOW, a.LISTINGPRICEHIGH, a.PROPERTYNAME, a.ADDRESSLINE1, a.PROPERTYCITY, a.PROPERTYSTATE, a.PROPERTYZIP, a.LATITUDE, a.LONGITUDE, c.cbsacode 
      from properties.tmp_endeca_rentals a,
           properties.smallprop_cbsa b,
           common.zip_cbsa c
     where b.source = ''''RENTALS''''
       and b.onag = 1
       and b.cbsacode = c.cbsacode
       and a.propertyzip = c.zipcode ''
				)'

	--PRINT @sqlcmd2

	
	INSERT	INTO #tmprentalproperties			--preliminary list of rental properties.  for final, take only the ones that are current from Rentals.Dimension.Listings
	EXEC sp_executesql 
		@sqlcmd2;
	

	--SELECT * FROM #tmprentalproperties



	PRINT 'Finished loading tmprentalproperties ' + CONVERT(varchar(50),GETDATE(),101) + '  ' + CONVERT(varchar(50),GETDATE(),108)

	/* ===================================================================================================================== */
	--Build the temp table for Lovely
	SET @codesection = 'Build the Lovely temp tables'
	

	SET @sqlcmd2 = 
		'select LISTINGID AS ListingID
		, CONVERT(int,DBAUtility.dbo.fnDigitOnly(LISTINGID)) AS ListingIDAlt
		, CONVERT(int,DBAUtility.dbo.fnDigitOnly(PROPERTYID)) AS PropertyID
		, ENDECA_ID AS EndecaID
		, PROPERTYNAME AS PropertyName
		, ADDRESSLINE1 AS AddressLine1
		, PROPERTYCITY AS PropertyCity
		, PROPERTYSTATE AS PropertyState
		, PROPERTYZIP AS PropertyZip
		, LATITUDE AS GeoLat
		, LONGITUDE AS GeoLong
		, LISTINGPRICELOW AS PriceLow
		, LISTINGPRICEHIGH AS PriceHigh
		from OPENQUERY(ORACLEAPTG,''
					SELECT LISTINGID
					, PROPERTYID
					, ENDECA_ID
					, PROPERTYNAME
					, ADDRESSLINE1
					, PROPERTYCITY
					, PROPERTYSTATE
					, PROPERTYZIP
					, LATITUDE
					, LONGITUDE
					, LISTINGPRICELOW
					, LISTINGPRICEHIGH 
					from properties.endeca_lovely_view ''
				)'

	--PRINT @sqlcmd2

	
	INSERT	INTO #tmplovelyproperties			--preliminary list of rental properties.  for final, take only the ones that are current from Rentals.Dimension.Listings
	EXEC sp_executesql 
		@sqlcmd2;
	

	--SELECT * FROM #tmplovelyproperties




	PRINT 'Finished loading tmplovelyproperties ' + CONVERT(varchar(50),GETDATE(),101) + '  ' + CONVERT(varchar(50),GETDATE(),108)


	/* ===================================================================================================================== */
	--Insert the records from both sources, Rentals and Lovely, to the working table

	SET @codesection = 'Insert records to the working table from both sources - Rentals'

	--, dl.UnitCount AS PropertyTotalUnits
	--insert the Rentals records into the working table
	INSERT INTO #tmpworkingtable
	SELECT 
	@datetouseymdid AS YMDID
	, @yearmonth AS YearMonth
	, rp.ListingIDAlt AS ListingID
	, 1 AS IsRentals
	, 0 AS IsLovely
	, (CASE WHEN dl.ListingStatus = 'Active' THEN 1 ELSE 0 END) AS ListingStatusID
	, 0 AS ShowPricing
	, (CASE WHEN (rp.ListingPriceLow IS NOT NULL) AND (rp.ListingPriceLow > 50) THEN rp.ListingPriceLow ELSE 0 END) AS LowPrice		--dl.UnitRentMin
	, (CASE WHEN (rp.ListingPriceHigh IS NOT NULL)  AND (rp.ListingPriceHigh > 50) THEN rp.ListingPriceHigh ELSE 0 END) AS HighPrice		--dl.UnitRentMax
	, rp.PropertyCity AS PropertyCity
	, rp.PropertyState AS PropertyState
	, rp.PropertyZIP AS ZipCode
	, rp.GeoLong AS GeoLong
	, rp.GeoLat AS GeoLat
	, NULL AS GeogPoint
	FROM #tmprentalproperties rp
	LEFT OUTER JOIN Rentals.Dimension.Listings dl WITH (NOLOCK)
		ON dl.ListingNumber = rp.ListingIDAlt
	WHERE 1 = (CASE WHEN dl.ListingStatus = 'Active' THEN 1 ELSE 0 END)			--only want active properties


	--SELECT TOP 1000 * FROM Rentals.Fact.EmailLeads WHERE ISNUMERIC(CustomerReference) = 0 AND  YMDID >= 20150201
	--CustomerReference = ListingID
	--SELECT * FROM Rentals.Dimension.Listings WHERE ISNUMERIC(ListingCustomerReference) = 0

	PRINT 'Finished loading tmpworkingtable for Rentals ' + CONVERT(varchar(50),GETDATE(),101) + '  ' + CONVERT(varchar(50),GETDATE(),108)

	/* ============================================================================================================================================================= */
	SET @codesection = 'Insert records to the working table from both sources - Lovely'

	--insert the Lovely records into the working table
	INSERT INTO #tmpworkingtable
	SELECT 
	@datetouseymdid AS YMDID
	, @yearmonth AS YearMonth
	, lp.ListingIDAlt AS ListingID
	, 0 AS IsRentals
	, 1 AS IsLovely
	, 1 AS ListingStatusID
	, 0 AS ShowPricing
	, lp.PriceLow AS LowPrice
	, lp.PriceHigh AS HighPrice
	, lp.PropertyCity AS PropertyCity
	, lp.PropertyState AS PropertyState
	, lp.PropertyZIP AS ZipCode
	, lp.GeoLong AS GeoLong
	, lp.GeoLat AS GeoLat
	, NULL AS GeogPoint
	FROM #tmplovelyproperties lp



	PRINT 'Finished loading tmpworkingtable for Lovely ' + CONVERT(varchar(50),GETDATE(),101) + '  ' + CONVERT(varchar(50),GETDATE(),108)


	/* ===================================================================================================================== */
	--Calc the GeogPoint value, but do not let it mess things up
	BEGIN TRY
		UPDATE #tmpworkingtable 
		SET GeogPoint = (CASE WHEN ((GeoLong IS NOT NULL) AND (GeoLat IS NOT NULL)) THEN geography::Point(GeoLat, GeoLong, 4326) ELSE NULL END)
		, ShowPricing = (CASE WHEN LowPrice > 50 OR HighPrice > 50 THEN 1 ELSE 0 END)
	END TRY
	BEGIN CATCH
	END CATCH

	--SELECT * FROM #tmpworkingtable ORDER BY ListingID

	/* ===================================================================================================================== */
	--Now mart the data after deleting from current table if any records exist in the new data
	SET @codesection = 'Move the data to the live tables'


	BEGIN TRY
		
		if EXISTS(SELECT * FROM #tmpworkingtable)					--check to make sure new data exists before we get rid of old data
			BEGIN
				BEGIN TRANSACTION
					
					SET @codesection = 'Delete appropriate data from live table'
					--Delete appropriate data from the live table
					DELETE FROM Staging.SmallPropertyListings

					SET @codesection = 'Place the new data into the live table'
					--Now replace it with new data
					INSERT INTO Staging.SmallPropertyListings
					SELECT 	
					YMDID,
					YearMonth,
					ListingID,
					IsRentals,
					IsLovely,
					ListingStatusID,
					ShowPricing,
					LowPrice,
					HighPrice,
					PropertyCity,
					PropertyState,
					ZipCode,
					GeoLong,
					GeoLat,
					GeogPoint
					FROM #tmpworkingtable

				COMMIT TRANSACTION
			END


	END TRY
	BEGIN CATCH
		SELECT 
			@ErrorMessage		= ERROR_MESSAGE(),
			@ErrorNumber		= ERROR_NUMBER(),
			@ErrorSeverity		= ERROR_SEVERITY(),
			@ErrorState			= ERROR_STATE(),
			@ErrorLine			= ERROR_LINE(),
			@ErrorProcedure		= ISNULL(ERROR_PROCEDURE(), '-');

		if @@trancount > 0					--if a transaction was started (will = 0 if no transaction was started)
			ROLLBACK TRANSACTION


		SET @ErrorMessage = 'Attempting to load SmallPropertyListings Staging information for Rentals/Lovely Syndication to AG. SPROC is [Staging].[pr_SmallPropertyListings].  Error in code seciton - ' + @codesection + '   Error - ' + @ErrorMessage

		raiserror(@ErrorMessage,16,1) with log;

		RETURN 	0	-- for SPROC              This jumps out of the code or SPROC.  Note that RAISEERROR no longer jumps out, must have RETURN to make it stop execution.

	
	END CATCH
		
	PRINT 'Finished saving data to Staging table. ' + CONVERT(varchar(50),GETDATE(),101) + '  ' + CONVERT(varchar(50),GETDATE(),108)

	SET NOCOUNT OFF;
END;




GO
/****** Object:  StoredProcedure [Staging].[pr_split_MC_Contacts]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC [Staging].[pr_split_MC_Contacts]
as

/*************************************************************************************************
*
* Name:	[Staging].[pr_split_MC_Contacts]
*
* Desc: Break out staging.mc_contacts_singleColumn into 60 columns and insert into
        Rentpath.dbo.mc_contacts
*
* Test:	EXEC [Staging].[pr_split_MC_Contacts]
*
* Note:
*
* Hist:	01	04/28/2017	Richard Chen		Initial Version, case 01340228
**************************************************************************************************/
SET NOCOUNT ON

----------------------------------------
--Drop temp tables if not NULL
----------------------------------------
IF OBJECT_ID('rentpath.staging.mc_contacts_tmp') IS NOT NULL
	BEGIN
		DROP TABLE rentpath.staging.mc_contacts_tmp
	END	




SELECT  replace([1],'|','') as CustomerID,[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20]
        ,[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36],[37],[38],[39],[40]
		,[41],[42],[43],[44],[45],[46],[47],[48],[49],[50],[51],[52],[53],[54],[55],[56],[57],[58],[59]
		,replace([60],'|','')  UnitTypeSqFt
into rentpath.staging.NC_Contacts
    FROM (	
select text,measure, row_number() over (partition by text order by  startposition ) as col
from (select * from rentpath.staging.MC_Contacts_SingleColumn) a
cross apply dbautility.dbo.fn_split(text,'|,|') c
    ) X	
    PIVOT (	
        MAX(X.Measure) FOR X.col IN ([1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20]
        ,[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36],[37],[38],[39],[40]
		,[41],[42],[43],[44],[45],[46],[47],[48],[49],[50],[51],[52],[53],[54],[55],[56],[57],[58],[59],[60])	
    ) P	;



Truncate table dbo.mc_contacts

insert into dbo.MC_Contacts
--(CustomerID, ContactType, PropertyID, FirstName, LastName, Email, Phone, PhoneType, SubscriptionEmail, SubscriptionSurvey, SubscriptionText, PreferredMeansOfContact, Unit#, Building#, Status, MoveInDate, Source, PriceMin, PriceMax, Beds(#), Baths(#), ResponseDate, ReasonForMove, Comments, LeaseTermDateStart, LeaseTermDateEnd, Birthday, UnitType, ContactID, DateUpdate, DateCreated, IdentificationType, IdentificationScopeType, IdentificationRank, IdentificationIDValue, IdentificationOrganizationName, CustomerType, CustomerDescription, PropertyPrimaryID, PropertyMarketingName, AddressType, CurrentRent, ExpectedMoveOutDate, ActualMoveInDate, DesiredUnitID, DesiredPropertyPrimaryID, DesiredPropertyMarketingName, ApplicationDate, ApproveDate, LeaseSignDate, RenewDate, NoticeDate, WalkInDate, UnitCode, UnitRent, UnitSqFt, UnitEconomicStatus, UnitTypeDescription, UnitTypeRent, UnitTypeSqFt)
select 
 left([CustomerID],50)
 ,left([2],50)
 ,left([3],50)
 ,left([4],128)
 ,left([5],128)
 ,left([6],128)
 ,left([7],50)
 ,left([8],50)
 ,left([9],50)
 ,left([10],50), left([11],50), left([12],50), left([13],50), left([14],50), left([15],50), left([16],50), left([17],50), left([18],50), left([19],50), left([20],50), left([21],50), left([22],50), left([23],50)
 ,left([24],4000)
 ,left([25],50), left([26],50), left([27],50), left([28],50), left([29],50), left([30],50), left([31],50), left([32],50), left([33],50), left([34],50), left([35],50), left([36],50), left([37],50), left([38],50), left([39],50), left([40],50)
 ,left([41],50), left([42],50), left([43],50), left([44],50), left([45],50), left([46],50), left([47],50), left([48],50), left([49],50), left([50],50), left([51],50), left([52],50), left([53],50), left([54],50), left([55],50), left([56],50)
 ,left([57],50), left([58],50), left([59],50), left([UnitTypeSqFt],50)
from rentpath.staging.MC_Contacts


SET NOCOUNT OFF


GO
/****** Object:  StoredProcedure [Staging].[pr_TealiumParsedPivot]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Staging].[pr_TealiumParsedPivot]
/*******************************************************************************************
* Name:	Staging.pr_TealiumParsedPivot
* ------------------------------------------------------------------------------------------
* Desc:	This pivots the parsed tealium tag data for later consumption
* ------------------------------------------------------------------------------------------
* Test:	EXEC Staging.pr_TealiumParsedPivot
* ------------------------------------------------------------------------------------------
* Hist:	01	04/27/2015	Marting Team		Initial Version
* Hist: 02	07/14/2015	Don Wert			Ticket 19918, filter the code that creates TealiumParsedPivot2 so that it only
*											flags a record as entry_campaign_id_True if the Action is pageview.
* HIst: 03	07/20/2015	Don Wert			Ticket 20075, add a flag to TealiumParsedPivot2 to identify the last action record
*											to calculate duration.
* Hist: 04	07/23/2015	Sarah Mims			Ticket # 19918 - changed how we are pulling First and Last ParseID to avoid duplicates
*											I also broke the pieces up into temp tables for now so that we could identify any breakdowns
*											in the logic faster. We can always piece these back together when we are confident in the logic.
* Hist: 05	08/05/2015	Don Wert			Ticket 20287, update to remove references to first_pageview. 
* Hist:	06	08/12/2015	Cube Team 2 (Sarah and Don) Rewrite to have only one ParsedPivot table with the columns we need
* Hist:	07	08/13/2015	Cube Team 2 (Sarah and Don) Added JOIN to Profile for calculating FirstEntryFlag due to visits crossing over valid/invalid profiles/subprofiles
* Hist: 08	08/22/2015	Sarah Mims			No ticket - added WHERE MeasureType NOT LIKE '%]%' to the #tmpmeasures build because of weird measure type causing failure 
* Hist: 09	08/25/2015	Don Wert			Ticket 20510.  Replace references to Rentpathcube with TealiumWebMetrics in rentpath.staging.pr_TealiumParsedPivot.
* Hist: 10  09/08/2015	Cube Team 2 (Sarah and Don) - Added creation of device and screen_type column if not found so it doesn't break the process of creating Web Event records
* Hist: 11	09/25/2015	Sarah Mims			No ticket - found an issue with the RowNum order logic for calculating LastEventFlag so I changed it to DESC.
* Hist:	12	03/09/2016	Sarah Mims			Ticket # 22367 Changed the RAISE ERROR for the non matching YMDID from 10 to 16 so it jumps out of
*											the procedure and provides us with an error		
* Hist:	13	05/17/2016	Clinton Woody		Ticket # 22968 added ef_id, campaign_id already exists
********************************************************************************************/
AS 

BEGIN
    SET NOCOUNT ON;

	IF (
		SELECT TOP 1 YMDID FROM RentPath.dbo.ParsedData
		) = CAST(CONVERT(VARCHAR(8),GETDATE()-1,112) AS INT)

	BEGIN 

	------------------------------------------
	/*Declare & set variables*/ 
	------------------------------------------
		DECLARE @strsql VARCHAR(MAX)
		   ,@MeasureTypeStr AS VARCHAR(150)
		   ,@MeasurePivotStr AS VARCHAR(150)
		   ,@MeasurePivotStr2 AS VARCHAR(150)
		   ,@YMDIDStr AS VARCHAR(8)
		SET @YMDIDSTr = (
						 SELECT TOP 1
								ymdid

						 FROM   rentpath.dbo.parseddata
						);

	------------------------------------------
	/*Drop and recreate tables everday so the code
	doesn't have to change as new tags are added*/ 
	------------------------------------------
		IF (SELECT OBJECT_ID(N'staging.TealiumParsedPivot')) IS NOT NULL
			DROP TABLE staging.TealiumParsedPivot

		IF (SELECT OBJECT_ID(N'#tmpMeasures')) IS NOT NULL
			DROP TABLE #tmpMeasures

	------------------------------------------
	/*Set variables*/ 
	------------------------------------------
		SET @strsql = 'select ymdid,parseid,profileid,subprofileid,eventdate';

	-----------------------------------------
	--Grab web data into #tmpMeasures table
	-----------------------------------------
		SELECT  measuretype
			   ,CASE WHEN sortorder < 105 THEN ',[' + LTRIM(RTRIM(measuretype)) + ']'
					 ELSE '[' + LTRIM(RTRIM(measuretype)) + ']'
				END AS MeasuretypeStr
			   ,',[' + LTRIM(RTRIM(measuretype)) + ']=[' + LTRIM(RTRIM(measuretype)) + ']' AS MeasurePivotStr
			   ,CASE WHEN sortorder < 105 THEN ',[' + LTRIM(RTRIM(measuretype)) + ']'
					 ELSE '[' + LTRIM(RTRIM(measuretype)) + ']'
				END AS MeasurePivotStr2
			   ,SortOrder
		INTO    #tmpMeasures
		FROM    (
				 SELECT
						DISTINCT
						measuretype
					   ,CASE WHEN measuretype = 'action' THEN 94
							 WHEN measuretype = 'click' THEN 80
							 WHEN measuretype = 'campaign_id' THEN 93
							 WHEN measuretype = 'subprofile' THEN 100
							 WHEN measuretype = 'profile' THEN 105
-- added ef_id here, make the sort order just below the lower ones here
							 WHEN measuretype = 'ef_id' THEN 79
							 WHEN measuretype = 'entry_campaign_id' THEN 90
							 WHEN measuretype = 'visit' THEN 90
							 WHEN measuretype = 'page' THEN 99
							 WHEN measuretype = 'page-sub' THEN 98
							 WHEN measuretype = 'position' THEN 97
							 WHEN measuretype = 'selection' THEN 96
							 --WHEN measuretype = 'value' THEN 96
							 WHEN measuretype = 'listingid' THEN 95
							 WHEN measuretype = 'session_id' THEN 89
							 WHEN measuretype = 'referrer' THEN 26
							 WHEN measuretype = 'referring_domain' THEN 3
							 ELSE 0
						END AS SortOrder
				 FROM   rentpath.dbo.ParsedData WITH (NOLOCK)
				 WHERE MeasureType NOT LIKE '%]%'
				) a;
--SELECT * FROM #tmpMeasures ORDER BY sortorder desc
-- drop table #tmpMeasures 
		DECLARE SQLCursor CURSOR
		FOR
		SELECT  MeasuretypeStr
			   ,MeasurePivotStr
			   ,MeasurePivotStr2 --,max(SortOrder) as SortOrder
		FROM    #tmpMeasures
		WHERE   CHARINDEX('-',measuretype) = 0
		GROUP BY measuretype
			   ,MeasuretypeStr
			   ,MeasurePivotStr
			   ,MeasurePivotStr2
		ORDER BY MAX(SortOrder) DESC
			   ,measuretype;
		OPEN SQLCursor;

		FETCH NEXT FROM SQLCursor INTO @MeasuretypeStr,@MeasurePivotStr,@MeasurePivotStr2;
		WHILE @@FETCH_STATUS = 0 
			BEGIN
				SET @strsql = @strsQL + @MeasurePivotStr;
				FETCH NEXT FROM SQLCursor INTO @MeasuretypeStr,@MeasurePivotStr,@MeasurePivotStr2;
			END

		SET @strsql = @strsql + ' into staging.TealiumParsedPivot FROM (
							SELECT 
							parseid,profileid,ymdid,eventdate
							,measuretype
							,measure
							,subprofileid
							FROM 
							rentpath.dbo.ParsedData WITH (NOLOCK)';

		SET @strsql = @strsql + ') X PIVOT ( MAX(X.Measure) FOR X.MeasureType IN (';

		CLOSE SQLCursor;
		OPEN SQLCursor;
		FETCH NEXT FROM SQLCursor INTO @MeasureTypeStr,@MeasurePivotStr,@MeasurePivotStr2
		WHILE @@FETCH_STATUS = 0 
			BEGIN
				SET @strsql = @strsQL + @MeasurePivotStr2;
				FETCH NEXT FROM SQLCursor INTO @MeasuretypeStr,@MeasurePivotStr,@MeasurePivotStr2;
			END

		CLOSE SQLCursor;
		DEALLOCATE SQLCursor;

		SET @strsql = @strsql + ') ) X';
	--PRINT @strsql;
		EXEC(@StrSQL);
	    
	/*This is where we start calculating Derived columns as well as First/Last Event columns*/
	----------------------------------------
	--Drop temp tables if not NULL
	----------------------------------------

	IF OBJECT_ID('tempdb..#FirstEventDate') IS NOT NULL
		BEGIN
			DROP TABLE #FirstEventDate
		END		  

	IF OBJECT_ID('tempdb..#Actions') IS NOT NULL
		BEGIN
			DROP TABLE #Actions
		END		  

	IF OBJECT_ID('tempdb..#ActionJackson') IS NOT NULL
		BEGIN
			DROP TABLE #ActionJackson
		END		  

	IF OBJECT_ID('tempdb..#FirstParseID') IS NOT NULL
		BEGIN
			DROP TABLE #FirstParseID
		END		  

	IF OBJECT_ID('tempdb..#MaxEventDate') IS NOT NULL
		BEGIN
			DROP TABLE #MaxEventDate
		END		  

	IF OBJECT_ID('tempdb..#ExitPoint') IS NOT NULL
		BEGIN
			DROP TABLE #ExitPoint
		END		  

	IF OBJECT_ID('tempdb..#ExitParseID') IS NOT NULL
		BEGIN
			DROP TABLE #ExitParseID
		END	

	---------------------------------------
	--Get Min Event Date for Each Visit
	--Original Query - no dupes
	---------------------------------------
	SELECT  fp.Visit
		   ,MIN(fp.EventDate) AS MinEventDate
	INTO    #FirstEventDate
	FROM    RentPath.Staging.TealiumParsedPivot AS fp
	JOIN    TealiumWebMetrics.Conformed.Profile cp
			ON fp.profileid = cp.profileid
			   AND fp.subprofileid = cp.SubProfileID
			   AND cp.StatusKey = 1
			--WHERE action='pageview'
	GROUP BY fp.Visit

	---------------------------------------
	--Get Action/Min Event Date combination for Each Visit
	---------------------------------------
	SELECT  action
		   ,ParseID
		   ,CASE action
			  WHEN 'pageview' THEN 1
			  WHEN 'click' THEN 2
			  WHEN 'lead_submission' THEN 3
			  WHEN NULL THEN 4
			END AS SecondarySortOrder
		   ,Visit
		   ,MIN(EventDate) AS EventDate
	INTO    #Actions
	FROM    RentPath.Staging.TealiumParsedPivot AS tpp
	JOIN    TealiumWebMetrics.Conformed.Profile cp
			ON tpp.profileid = cp.profileid
			   AND tpp.subprofileid = cp.SubProfileID
			   AND cp.StatusKey = 1
	GROUP BY Visit
		   ,action
		   ,ParseID

	---------------------------------------
	--Get Final Action for Min Event Date combination for Each Visit
	---------------------------------------
	SELECT a.ParseID
	,a.SecondarySortOrder
	,a.action
	,a.EventDate
	,fed.visit
	,fed.MinEventDate
	,ROW_NUMBER()OVER(PARTITION BY fed.visit ORDER BY a.SecondarySortOrder,fed.MinEventDate) AS RowNumber
	INTO #ActionJackson
	FROM #Actions AS a
	JOIN #FirstEventDate AS fed
		ON a.visit = fed.visit
		AND a.EventDate = fed.MinEventDate

	---------------------------------------
	--Grab Parse ID associated with "First Action" 
	---------------------------------------
	SELECT *
	INTO #FirstParseID
	FROM #ActionJackson AS aj
	WHERE aj.RowNumber = 1

	----------------------------------------------
	--Get the last action the user performed in this visit
	----------------------------------------------
			-----------------------------------------
			--Get ParseID associated with Max Event Date
			--Row Number arbitrary over ParseIDs with same Max Event Date
			--Updated Query to remove dupes
			-----------------------------------------
			SELECT  X.ParseID
				   ,X.Visit
				   ,X.EventDate
				   ,ROW_NUMBER() OVER (PARTITION BY X.Visit ORDER BY X.EventDate DESC) AS RowNumber
			INTO    #MaxEventDate
			FROM    (
					 SELECT ParseID
						   ,Visit
						   ,MAX(EventDate) AS EventDate
					 FROM   RentPath.Staging.TealiumParsedPivot AS tpp
					 JOIN   TealiumWebMetrics.Conformed.Profile cp
							ON tpp.profileid = cp.profileid
							   AND tpp.subprofileid = cp.SubProfileID
							   AND cp.StatusKey = 1
					 GROUP BY ParseID
						   ,Visit
					) AS X
			---------------------------------------
			--Get Max Event Date for Each Visit
			---------------------------------------
			SELECT  Visit
				   ,MAX(EventDate) AS ExitPoint
			INTO    #ExitPoint
			FROM    RentPath.Staging.TealiumParsedPivot tpp
			JOIN    TealiumWebMetrics.Conformed.Profile cp
					ON tpp.profileid = cp.profileid
					   AND tpp.subprofileid = cp.SubProfileID
					   AND cp.StatusKey = 1
			GROUP BY Visit
		
			----------------------------------------------
			--Get list of Exit ParseIDs
			----------------------------------------------
			SELECT  ParseID
			INTO    #ExitParseID
			FROM    (
					 SELECT *
					 FROM   #MaxEventDate AS med
					 WHERE  med.RowNumber = 1
					) AS x
			INNER JOIN #ExitPoint AS y
					ON x.Visit = y.Visit
					   AND x.EventDate = y.ExitPoint

	--------------------------------------------------
	--Update the 4 columns needed for Fact building
	--------------------------------------------------
	SELECT  p.Parseid
			,COALESCE(CASE WHEN p.referrer LIKE '%WT.mc_id=[0-9]%' THEN SUBSTRING(p.referrer,(CHARINDEX('WT.mc_id=',p.referrer)) + 9,CASE WHEN (PATINDEX('%[a-z,$,-,?#,%,&]%',SUBSTRING(p.referrer,CHARINDEX('WT.mc_id=',p.referrer) + 9,999)) - 1) = -1 THEN 99
																																			ELSE PATINDEX('%[a-z,$,-,?,#,%,&]%',SUBSTRING(p.referrer,CHARINDEX('WT.mc_id=',p.referrer) + 9,999)) - 1
																																	END)
							ELSE NULL
						END,CASE WHEN p.url LIKE '%WT.mc_id=[0-9]%' THEN SUBSTRING(p.url,(CHARINDEX('WT.mc_id=',p.url)) + 9,CASE WHEN (PATINDEX('%[a-z,$,-,?,#,%,&]%',SUBSTRING(p.url,CHARINDEX('WT.mc_id=',p.url) + 9,999)) - 1) = -1 THEN 99
																																ELSE PATINDEX('%[a-z,$,-,?,#,%,&]%',SUBSTRING(p.url,CHARINDEX('WT.mc_id=',p.url) + 9,999)) - 1
																															END)
								ELSE NULL
							END)				AS DerivedCampaignID
			,CASE WHEN referrer LIKE '%ef^_id%' ESCAPE '^' THEN SUBSTRING(referrer,CHARINDEX('ef_id',referrer)+6,33) 
				  WHEN path LIKE '%ef^_id%' ESCAPE '^' THEN SUBSTRING(path,CHARINDEX('ef_id',path)+6,33) 

			ELSE NULL END						AS DerivedEFID
			,CASE WHEN z.ParseID IS NOT NULL THEN 1
					ELSE 0
			END									AS FirstEventFlag
			,CASE WHEN epi.parseid IS NOT NULL THEN 1
					ELSE 0
			END									AS LastEventFlag
	INTO	#ParseFlags
	FROM    RentPath.Staging.TealiumParsedPivot AS p
	LEFT OUTER JOIN #FirstParseID AS z
			ON p.ParseID = z.ParseID
	LEFT OUTER JOIN #ExitParseID AS epi
			ON p.ParseID = epi.ParseID

	---------------------------------------------------------------------------
	-- ef_id column may not be present, so check and run alternative code if so
	---------------------------------------------------------------------------
	IF COLUMNPROPERTY( OBJECT_ID(N'RentPath.Staging.TealiumParsedPivot'), 'ef_id', 'ColumnId') IS NULL
		BEGIN
		ALTER TABLE RentPath.Staging.TealiumParsedPivot
			ADD ef_id varchar(7000) NULL;
			print 'added'
		END
  
	---------------------------------------------------------------------------
	-- Safeguard for screen_type column 
	---------------------------------------------------------------------------
	IF COLUMNPROPERTY( OBJECT_ID(N'RentPath.Staging.TealiumParsedPivot'), 'screen_type', 'ColumnId') IS NULL
		BEGIN
		ALTER TABLE RentPath.Staging.TealiumParsedPivot
			ADD screen_type varchar(7000) NULL;
			print 'added'
		END   

	---------------------------------------------------------------------------
	-- Safeguard for device column 
	---------------------------------------------------------------------------
	IF COLUMNPROPERTY( OBJECT_ID(N'RentPath.Staging.TealiumParsedPivot'), 'device', 'ColumnId') IS NULL
		BEGIN
		ALTER TABLE RentPath.Staging.TealiumParsedPivot
			ADD device varchar(7000) NULL;
			print 'added'
		END  
    
	--------------------------------------------------
	--Create 4 columns needed for Fact building
	--------------------------------------------------
	--Add in campaign ID column for campaign derived from referrer or path
		ALTER TABLE RentPath.Staging.TealiumParsedPivot
			ADD DerivedCampaignID varchar(7000) NULL;
			print 'added'

	--Add in EF ID column for ef_id derived from referrer or path
		ALTER TABLE RentPath.Staging.TealiumParsedPivot
			ADD DerivedEFID varchar(64) NULL;
			print 'added'

	--Add in FirstEventFlag column
		ALTER TABLE RentPath.Staging.TealiumParsedPivot
			ADD FirstEventFlag TINYINT NULL;
			print 'added'

	--Add in LastEventFlag column
		ALTER TABLE RentPath.Staging.TealiumParsedPivot
			ADD LastEventFlag TINYINT NULL;
			print 'added'


	----------------------------------------------
	--Update Derived and Flag columns
	----------------------------------------------
	UPDATE rs
	SET rs.DerivedCampaignID =  pf.DerivedCampaignID
	,rs.DerivedEFID =  pf.DerivedEFID
	,rs.FirstEventFlag = pf.FirstEventFlag
	,rs.LastEventFlag =  pf.LastEventFlag
	FROM RentPath.Staging.TealiumParsedPivot AS rs
	JOIN #ParseFlags AS pf
		ON rs.parseid = pf.parseid
	END
	
	ELSE
	
		BEGIN		
            DECLARE @StringVariable NVARCHAR(100);
            SET @StringVariable = N'RentPath.dbo.ParsedData YMDID does not match marting YMDID.';

            RAISERROR (@StringVariable, -- Message text.
		   16, -- Severity,
		   1 -- State,
			)
			RETURN 0; 

        END
        
    SET NOCOUNT OFF;    

END















GO
/****** Object:  StoredProcedure [Staging].[pr_TealiumParsedPivotBackMart]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Staging].[pr_TealiumParsedPivotBackMart]
(@ymdid int )
/*******************************************************************************************
* Name:	ng.Stagipr_TealiumParsedPivotBackMart
* ------------------------------------------------------------------------------------------
* Desc:	This pivots the parsed tealium tag data for later consumption
* ------------------------------------------------------------------------------------------
* Test:	EXEC Staging.pr_TealiumParsedPivotBackMart 20160716
* ------------------------------------------------------------------------------------------

* Hist:	13	05/17/2016	Clinton Woody		Ticket # 22968 made this use the same logic as current parspivot as of 2016/08/03
It will use tables and sp's that end in BackMart
********************************************************************************************/
AS 

BEGIN
    SET NOCOUNT ON;
	BEGIN TRY
		DROP TABLE #tmpProf;
	END TRY
    BEGIN CATCH
	END CATCH
    
	IF NOT EXISTS(SELECT TOP 1 * FROM  rentpath.Staging.parseddatabackmart WHERE ymdid=@ymdid)
	begin
		TRUNCATE TABLE rentpath.Staging.parseddatabackmart;

		insert INTO
		rentpath.Staging.parseddatabackmart
		SELECT * FROM ArchivedStaging.dbo.ArchivedParsedData WITH (NOLOCK) WHERE YMDID=@YMDID;

		SELECT DISTINCT profileid
		INTO #tmpProf
		 FROM staging.dbo.DimensionProfiles WHERE DestinationDatabase<>'rentpath';

		DELETE FROM rentpath.Staging.parseddatabackmart 
		WHERE profileid IN (SELECT profileid FROM #tmpProf);
		
		DELETE FROM rentpath.Staging.parseddatabackmart 
		WHERE profileid IN(0,32,91,99);
	end
	------------------------------------------
	/*Declare & set variables*/ 
	------------------------------------------
		DECLARE @strsql VARCHAR(MAX)
		   ,@MeasureTypeStr AS VARCHAR(150)
		   ,@MeasurePivotStr AS VARCHAR(150)
		   ,@MeasurePivotStr2 AS VARCHAR(150)
		   ,@YMDIDStr AS VARCHAR(8)
		SET @YMDIDSTr = (
						 SELECT TOP 1
								ymdid
						 FROM   rentpath.staging.parseddatabackmart
						);

	------------------------------------------
	/*Drop and recreate tables everday so the code
	doesn't have to change as new tags are added*/ 
	------------------------------------------
		IF (SELECT OBJECT_ID(N'staging.TealiumParsedPivotBackMart')) IS NOT NULL
			DROP TABLE staging.TealiumParsedPivotBackMart

		IF (SELECT OBJECT_ID(N'#tmpMeasures')) IS NOT NULL
			DROP TABLE #tmpMeasures

	------------------------------------------
	/*Set variables*/ 
	------------------------------------------
		SET @strsql = 'select ymdid,parseid,profileid,subprofileid,eventdate';

	-----------------------------------------
	--Grab web data into #tmpMeasures table
	-----------------------------------------
		SELECT  measuretype
			   ,CASE WHEN sortorder < 105 THEN ',[' + LTRIM(RTRIM(measuretype)) + ']'
					 ELSE '[' + LTRIM(RTRIM(measuretype)) + ']'
				END AS MeasuretypeStr
			   ,',[' + LTRIM(RTRIM(measuretype)) + ']=[' + LTRIM(RTRIM(measuretype)) + ']' AS MeasurePivotStr
			   ,CASE WHEN sortorder < 105 THEN ',[' + LTRIM(RTRIM(measuretype)) + ']'
					 ELSE '[' + LTRIM(RTRIM(measuretype)) + ']'
				END AS MeasurePivotStr2
			   ,SortOrder
		INTO    #tmpMeasures
		FROM    (
				 SELECT
						DISTINCT
						measuretype
					   ,CASE WHEN measuretype = 'action' THEN 94
							 WHEN measuretype = 'click' THEN 80
							 WHEN measuretype = 'campaign_id' THEN 93
							 WHEN measuretype = 'subprofile' THEN 100
							 WHEN measuretype = 'profile' THEN 105
-- added ef_id here, make the sort order just below the lower ones here
							 WHEN measuretype = 'ef_id' THEN 79
							 WHEN measuretype = 'entry_campaign_id' THEN 90
							 WHEN measuretype = 'visit' THEN 90
							 WHEN measuretype = 'page' THEN 99
							 WHEN measuretype = 'page-sub' THEN 98
							 WHEN measuretype = 'position' THEN 97
							 WHEN measuretype = 'selection' THEN 96
							 --WHEN measuretype = 'value' THEN 96
							 WHEN measuretype = 'listingid' THEN 95
							 WHEN measuretype = 'session_id' THEN 89
							 WHEN measuretype = 'referrer' THEN 26
							 WHEN measuretype = 'referring_domain' THEN 3
							 ELSE 0
						END AS SortOrder
				 FROM   rentpath.Staging.parseddatabackmart WITH (NOLOCK)
				 WHERE MeasureType NOT LIKE '%]%'
				) a;
--SELECT * FROM #tmpMeasures ORDER BY sortorder desc
-- drop table #tmpMeasures 
		DECLARE SQLCursor CURSOR
		FOR
		SELECT  MeasuretypeStr
			   ,MeasurePivotStr
			   ,MeasurePivotStr2 --,max(SortOrder) as SortOrder
		FROM    #tmpMeasures
		WHERE   CHARINDEX('-',measuretype) = 0
		GROUP BY measuretype
			   ,MeasuretypeStr
			   ,MeasurePivotStr
			   ,MeasurePivotStr2
		ORDER BY MAX(SortOrder) DESC
			   ,measuretype;
		OPEN SQLCursor;

		FETCH NEXT FROM SQLCursor INTO @MeasuretypeStr,@MeasurePivotStr,@MeasurePivotStr2;
		WHILE @@FETCH_STATUS = 0 
			BEGIN
				SET @strsql = @strsQL + @MeasurePivotStr;
				FETCH NEXT FROM SQLCursor INTO @MeasuretypeStr,@MeasurePivotStr,@MeasurePivotStr2;
			END

		SET @strsql = @strsql + ' into staging.TealiumParsedPivotBackMart FROM (
							SELECT 
							parseid,profileid,ymdid,eventdate
							,measuretype
							,measure
							,subprofileid
							FROM 
							rentpath.staging.ParsedDataBackMart WITH (NOLOCK)';

		SET @strsql = @strsql + ') X PIVOT ( MAX(X.Measure) FOR X.MeasureType IN (';

		CLOSE SQLCursor;
		OPEN SQLCursor;
		FETCH NEXT FROM SQLCursor INTO @MeasureTypeStr,@MeasurePivotStr,@MeasurePivotStr2
		WHILE @@FETCH_STATUS = 0 
			BEGIN
				SET @strsql = @strsQL + @MeasurePivotStr2;
				FETCH NEXT FROM SQLCursor INTO @MeasuretypeStr,@MeasurePivotStr,@MeasurePivotStr2;
			END

		CLOSE SQLCursor;
		DEALLOCATE SQLCursor;

		SET @strsql = @strsql + ') ) X';
	--PRINT @strsql;
		EXEC(@StrSQL);
	    
	/*This is where we start calculating Derived columns as well as First/Last Event columns*/
	----------------------------------------
	--Drop temp tables if not NULL
	----------------------------------------

	IF OBJECT_ID('tempdb..#FirstEventDate') IS NOT NULL
		BEGIN
			DROP TABLE #FirstEventDate
		END		  

	IF OBJECT_ID('tempdb..#Actions') IS NOT NULL
		BEGIN
			DROP TABLE #Actions
		END		  

	IF OBJECT_ID('tempdb..#ActionJackson') IS NOT NULL
		BEGIN
			DROP TABLE #ActionJackson
		END		  

	IF OBJECT_ID('tempdb..#FirstParseID') IS NOT NULL
		BEGIN
			DROP TABLE #FirstParseID
		END		  

	IF OBJECT_ID('tempdb..#MaxEventDate') IS NOT NULL
		BEGIN
			DROP TABLE #MaxEventDate
		END		  

	IF OBJECT_ID('tempdb..#ExitPoint') IS NOT NULL
		BEGIN
			DROP TABLE #ExitPoint
		END		  

	IF OBJECT_ID('tempdb..#ExitParseID') IS NOT NULL
		BEGIN
			DROP TABLE #ExitParseID
		END	

	---------------------------------------
	--Get Min Event Date for Each Visit
	--Original Query - no dupes
	---------------------------------------
	SELECT  fp.Visit
		   ,MIN(fp.EventDate) AS MinEventDate
	INTO    #FirstEventDate
	FROM    RentPath.Staging.TealiumParsedPivotBackMart AS fp
	JOIN    TealiumWebMetrics.Conformed.Profile cp
			ON fp.profileid = cp.profileid
			   AND fp.subprofileid = cp.SubProfileID
			   AND cp.StatusKey = 1
			--WHERE action='pageview'
	GROUP BY fp.Visit

	---------------------------------------
	--Get Action/Min Event Date combination for Each Visit
	---------------------------------------
	SELECT  action
		   ,ParseID
		   ,CASE action
			  WHEN 'pageview' THEN 1
			  WHEN 'click' THEN 2
			  WHEN 'lead_submission' THEN 3
			  WHEN NULL THEN 4
			END AS SecondarySortOrder
		   ,Visit
		   ,MIN(EventDate) AS EventDate
	INTO    #Actions
	FROM    RentPath.Staging.TealiumParsedPivotBackMart AS tpp
	JOIN    TealiumWebMetrics.Conformed.Profile cp
			ON tpp.profileid = cp.profileid
			   AND tpp.subprofileid = cp.SubProfileID
			   AND cp.StatusKey = 1
	GROUP BY Visit
		   ,action
		   ,ParseID

	---------------------------------------
	--Get Final Action for Min Event Date combination for Each Visit
	---------------------------------------
	SELECT a.ParseID
	,a.SecondarySortOrder
	,a.action
	,a.EventDate
	,fed.visit
	,fed.MinEventDate
	,ROW_NUMBER()OVER(PARTITION BY fed.visit ORDER BY a.SecondarySortOrder,fed.MinEventDate) AS RowNumber
	INTO #ActionJackson
	FROM #Actions AS a
	JOIN #FirstEventDate AS fed
		ON a.visit = fed.visit
		AND a.EventDate = fed.MinEventDate

	---------------------------------------
	--Grab Parse ID associated with "First Action" 
	---------------------------------------
	SELECT *
	INTO #FirstParseID
	FROM #ActionJackson AS aj
	WHERE aj.RowNumber = 1

	----------------------------------------------
	--Get the last action the user performed in this visit
	----------------------------------------------
			-----------------------------------------
			--Get ParseID associated with Max Event Date
			--Row Number arbitrary over ParseIDs with same Max Event Date
			--Updated Query to remove dupes
			-----------------------------------------
			SELECT  X.ParseID
				   ,X.Visit
				   ,X.EventDate
				   ,ROW_NUMBER() OVER (PARTITION BY X.Visit ORDER BY X.EventDate DESC) AS RowNumber
			INTO    #MaxEventDate
			FROM    (
					 SELECT ParseID
						   ,Visit
						   ,MAX(EventDate) AS EventDate
					 FROM   RentPath.Staging.TealiumParsedPivotBAckMart AS tpp
					 JOIN   TealiumWebMetrics.Conformed.Profile cp
							ON tpp.profileid = cp.profileid
							   AND tpp.subprofileid = cp.SubProfileID
							   AND cp.StatusKey = 1
					 GROUP BY ParseID
						   ,Visit
					) AS X
			---------------------------------------
			--Get Max Event Date for Each Visit
			---------------------------------------
			SELECT  Visit
				   ,MAX(EventDate) AS ExitPoint
			INTO    #ExitPoint
			FROM    RentPath.Staging.TealiumParsedPivotBackMart tpp
			JOIN    TealiumWebMetrics.Conformed.Profile cp
					ON tpp.profileid = cp.profileid
					   AND tpp.subprofileid = cp.SubProfileID
					   AND cp.StatusKey = 1
			GROUP BY Visit
		
			----------------------------------------------
			--Get list of Exit ParseIDs
			----------------------------------------------
			SELECT  ParseID
			INTO    #ExitParseID
			FROM    (
					 SELECT *
					 FROM   #MaxEventDate AS med
					 WHERE  med.RowNumber = 1
					) AS x
			INNER JOIN #ExitPoint AS y
					ON x.Visit = y.Visit
					   AND x.EventDate = y.ExitPoint

	--------------------------------------------------
	--Update the 4 columns needed for Fact building
	--------------------------------------------------
	SELECT  p.Parseid
			,COALESCE(CASE WHEN p.referrer LIKE '%WT.mc_id=[0-9]%' THEN SUBSTRING(p.referrer,(CHARINDEX('WT.mc_id=',p.referrer)) + 9,CASE WHEN (PATINDEX('%[a-z,$,-,?#,%,&]%',SUBSTRING(p.referrer,CHARINDEX('WT.mc_id=',p.referrer) + 9,999)) - 1) = -1 THEN 99
																																			ELSE PATINDEX('%[a-z,$,-,?,#,%,&]%',SUBSTRING(p.referrer,CHARINDEX('WT.mc_id=',p.referrer) + 9,999)) - 1
																																	END)
							ELSE NULL
						END,CASE WHEN p.url LIKE '%WT.mc_id=[0-9]%' THEN SUBSTRING(p.url,(CHARINDEX('WT.mc_id=',p.url)) + 9,CASE WHEN (PATINDEX('%[a-z,$,-,?,#,%,&]%',SUBSTRING(p.url,CHARINDEX('WT.mc_id=',p.url) + 9,999)) - 1) = -1 THEN 99
																																ELSE PATINDEX('%[a-z,$,-,?,#,%,&]%',SUBSTRING(p.url,CHARINDEX('WT.mc_id=',p.url) + 9,999)) - 1
																															END)
								ELSE NULL
							END)				AS DerivedCampaignID
			,CASE WHEN referrer LIKE '%ef^_id%' ESCAPE '^' THEN SUBSTRING(referrer,CHARINDEX('ef_id',referrer)+6,33) 
				  WHEN path LIKE '%ef^_id%' ESCAPE '^' THEN SUBSTRING(path,CHARINDEX('ef_id',path)+6,33) 

			ELSE NULL END						AS DerivedEFID
			,CASE WHEN z.ParseID IS NOT NULL THEN 1
					ELSE 0
			END									AS FirstEventFlag
			,CASE WHEN epi.parseid IS NOT NULL THEN 1
					ELSE 0
			END									AS LastEventFlag
	INTO	#ParseFlags
	FROM    RentPath.Staging.TealiumParsedPivotBackMart AS p
	LEFT OUTER JOIN #FirstParseID AS z
			ON p.ParseID = z.ParseID
	LEFT OUTER JOIN #ExitParseID AS epi
			ON p.ParseID = epi.ParseID

	---------------------------------------------------------------------------
	-- ef_id column may not be present, so check and run alternative code if so
	---------------------------------------------------------------------------
	IF COLUMNPROPERTY( OBJECT_ID(N'RentPath.Staging.TealiumParsedPivotBackMart'), 'ef_id', 'ColumnId') IS NULL
		BEGIN
		ALTER TABLE RentPath.Staging.TealiumParsedPivotBackMart
			ADD ef_id varchar(7000) NULL;
			PRINT 'added'
		END
  
	---------------------------------------------------------------------------
	-- Safeguard for screen_type column 
	---------------------------------------------------------------------------
	IF COLUMNPROPERTY( OBJECT_ID(N'RentPath.Staging.TealiumParsedPivotBackMart'), 'screen_type', 'ColumnId') IS NULL
		BEGIN
		ALTER TABLE RentPath.Staging.TealiumParsedPivotBackMart
			ADD screen_type varchar(7000) NULL;
			PRINT 'added'
		END   

	---------------------------------------------------------------------------
	-- Safeguard for device column 
	---------------------------------------------------------------------------
	IF COLUMNPROPERTY( OBJECT_ID(N'RentPath.Staging.TealiumParsedPivotBackMart'), 'device', 'ColumnId') IS NULL
		BEGIN
		ALTER TABLE RentPath.Staging.TealiumParsedPivotBackMart
			ADD device varchar(7000) NULL;
			PRINT 'added'
		END  
    
	--------------------------------------------------
	--Create 4 columns needed for Fact building
	--------------------------------------------------
	--Add in campaign ID column for campaign derived from referrer or path
		ALTER TABLE RentPath.Staging.TealiumParsedPivotBackMart
			ADD DerivedCampaignID varchar(7000) NULL;
			print 'added'

	--Add in EF ID column for ef_id derived from referrer or path
		ALTER TABLE RentPath.Staging.TealiumParsedPivotBackMart
			ADD DerivedEFID varchar(64) NULL;
			print 'added'

	--Add in FirstEventFlag column
		ALTER TABLE RentPath.Staging.TealiumParsedPivotBackMart
			ADD FirstEventFlag TINYINT NULL;
			print 'added'

	--Add in LastEventFlag column
		ALTER TABLE RentPath.Staging.TealiumParsedPivotBackMart
			ADD LastEventFlag TINYINT NULL;
			PRINT 'added'


	----------------------------------------------
	--Update Derived and Flag columns
	----------------------------------------------
	UPDATE rs
	SET rs.DerivedCampaignID =  pf.DerivedCampaignID
	,rs.DerivedEFID =  pf.DerivedEFID
	,rs.FirstEventFlag = pf.FirstEventFlag
	,rs.LastEventFlag =  pf.LastEventFlag
	FROM RentPath.Staging.TealiumParsedPivotBackMart AS rs
	JOIN #ParseFlags AS pf
		ON rs.parseid = pf.parseid

       
    SET NOCOUNT OFF;    

END
-- 15873499



GO
/****** Object:  StoredProcedure [Staging].[pr_TealiumParsedPivotRecover]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [Staging].[pr_TealiumParsedPivotRecover] ( @ymdid INT )
/*******************************************************************************************
* Name:	Staging.pr_TealiumParsedPivotRecover
* ------------------------------------------------------------------------------------------
* Desc:	get parseddata from archivestaging and recover data not interference with currnet marting.
* ------------------------------------------------------------------------------------------
* Test:	EXEC Staging.pr_TealiumParsedPivotRecover 20160304
* ------------------------------------------------------------------------------------------
* Hist:	01	03/08/2016	Richard		Initial Version
* Hist:	02	05/17/2016	Clinton Woody		Ticket # 22968 added ef_id, campaign_id already exists
* Hist:	03	07/20/2016	Clinton Woody		Ticket # 23643 pulled data from archivedparseddata into temp table due to cursor time
*		to pull the data in the cursor
********************************************************************************************/
AS
    BEGIN
        SET NOCOUNT ON;
--declare @ymdid INT = 20160304
------------------------------------------
/*Declare & set variables*/ 
------------------------------------------
        DECLARE @strsql VARCHAR(MAX) ,
            @MeasureTypeStr AS VARCHAR(150) ,
            @MeasurePivotStr AS VARCHAR(150) ,
            @MeasurePivotStr2 AS VARCHAR(150) ,
            @YMDIDStr AS VARCHAR(8);
        SET @YMDIDStr = CAST(@ymdid AS VARCHAR(8));
	--(
 --                    SELECT TOP 1
 --                           ymdid

 --                    FROM   ArchivedStaging.dbo.ArchivedParsedData WHERE ymdid=@ymdid AND profileid IN (84,86,88,89)
 --                   );
        PRINT @YMDIDStr;
        BEGIN TRY
            DROP TABLE ##tmpParse;
        END TRY
        BEGIN CATCH
        END CATCH;
------------------------------------------
/*Drop and recreate tables everday so the code
doesn't have to change as new tags are added*/ 
------------------------------------------
        IF ( SELECT OBJECT_ID(N'staging.TealiumParsedPivotRecover')
           ) IS NOT NULL
            DROP TABLE Staging.TealiumParsedPivotRecover;

        BEGIN TRY
            DROP TABLE #tmpMeasures;
        END TRY
        BEGIN CATCH
        END CATCH;

        SELECT  *
        INTO    ##tmpParse
        FROM    ArchivedStaging.dbo.ArchivedParsedData WITH ( NOLOCK )
        WHERE   YMDID = @ymdid
		and profileid in (84,86,88,89);
------------------------------------------
/*Set variables*/ 
------------------------------------------
        SET @strsql = 'select ymdid,parseid,profileid,subprofileid,eventdate';

-----------------------------------------
--Grab web data into #tmpMeasures table
-----------------------------------------
        SELECT  MeasureType ,
                CASE WHEN SortOrder < 105
                     THEN ',[' + LTRIM(RTRIM(MeasureType)) + ']'
                     ELSE '[' + LTRIM(RTRIM(MeasureType)) + ']'
                END AS MeasuretypeStr ,
                ',[' + LTRIM(RTRIM(MeasureType)) + ']=['
                + LTRIM(RTRIM(MeasureType)) + ']' AS MeasurePivotStr ,
                CASE WHEN SortOrder < 105
                     THEN ',[' + LTRIM(RTRIM(MeasureType)) + ']'
                     ELSE '[' + LTRIM(RTRIM(MeasureType)) + ']'
                END AS MeasurePivotStr2 ,
                SortOrder
        INTO    #tmpMeasures
        FROM    ( SELECT
					DISTINCT
                            MeasureType ,
                            CASE WHEN MeasureType = 'action' THEN 94
                                 WHEN MeasureType = 'click' THEN 80
                                 WHEN MeasureType = 'campaign_id' THEN 93
                                 WHEN MeasureType = 'subprofile' THEN 100
                                 WHEN MeasureType = 'profile' THEN 105
-- added ef_id here, make the sort order just below the lower ones here
                                 WHEN MeasureType = 'ef_id' THEN 79
                                 WHEN MeasureType = 'entry_campaign_id'
                                 THEN 90
                                 WHEN MeasureType = 'visit' THEN 90
                                 WHEN MeasureType = 'page' THEN 99
                                 WHEN MeasureType = 'page-sub' THEN 98
                                 WHEN MeasureType = 'position' THEN 97
                                 WHEN MeasureType = 'selection' THEN 96
                         --WHEN measuretype = 'value' THEN 96
                                 WHEN MeasureType = 'listingid' THEN 95
                                 WHEN MeasureType = 'session_id' THEN 89
                                 WHEN MeasureType = 'referrer' THEN 26
                                 WHEN MeasureType = 'referring_domain' THEN 3
                                 ELSE 0
                            END AS SortOrder
                  FROM      ##tmpParse WITH ( NOLOCK )
                  WHERE     MeasureType NOT LIKE '%]%'
                            AND ProfileID IN ( 84, 86, 88, 89 )
                            AND YMDID = @ymdid
                ) a;

        DECLARE SQLCursor CURSOR
        FOR
            SELECT  MeasuretypeStr ,
                    MeasurePivotStr ,
                    MeasurePivotStr2 --,max(SortOrder) as SortOrder
            FROM    #tmpMeasures
            WHERE   CHARINDEX('-', MeasureType) = 0
            GROUP BY MeasureType ,
                    MeasuretypeStr ,
                    MeasurePivotStr ,
                    MeasurePivotStr2
            ORDER BY MAX(SortOrder) DESC ,
                    MeasureType;
        OPEN SQLCursor;

        FETCH NEXT FROM SQLCursor INTO @MeasureTypeStr, @MeasurePivotStr,
            @MeasurePivotStr2;
        WHILE @@FETCH_STATUS = 0
            BEGIN
                SET @strsql = @strsql + @MeasurePivotStr;
                FETCH NEXT FROM SQLCursor INTO @MeasureTypeStr,
                    @MeasurePivotStr, @MeasurePivotStr2;
            END;

        SET @strsql = @strsql
            + ' into staging.TealiumParsedPivotRecover FROM (
						SELECT 
						parseid,profileid,ymdid,eventdate
						,measuretype
						,measure
						,subprofileid
						FROM 
						##tmpParse WITH (NOLOCK)
						where ymdid=' + @YMDIDStr
            + ' and profileid in (84,86,88,89)';

        SET @strsql = @strsql
            + ') X PIVOT ( MAX(X.Measure) FOR X.MeasureType IN (';

        CLOSE SQLCursor;
        OPEN SQLCursor;
        FETCH NEXT FROM SQLCursor INTO @MeasureTypeStr, @MeasurePivotStr,
            @MeasurePivotStr2;
        WHILE @@FETCH_STATUS = 0
            BEGIN
                SET @strsql = @strsql + @MeasurePivotStr2;
                FETCH NEXT FROM SQLCursor INTO @MeasureTypeStr,
                    @MeasurePivotStr, @MeasurePivotStr2;
            END;

        CLOSE SQLCursor;
        DEALLOCATE SQLCursor;

        SET @strsql = @strsql + ') ) X';
--PRINT @strsql;
        EXEC(@strsql);
	    
/*This is where we start calculating Derived columns as well as First/Last Event columns*/
----------------------------------------
--Drop temp tables if not NULL
----------------------------------------

        IF OBJECT_ID('tempdb..#FirstEventDate') IS NOT NULL
            BEGIN
                DROP TABLE #FirstEventDate;
            END;		  

        IF OBJECT_ID('tempdb..#Actions') IS NOT NULL
            BEGIN
                DROP TABLE #Actions;
            END;		  

        IF OBJECT_ID('tempdb..#ActionJackson') IS NOT NULL
            BEGIN
                DROP TABLE #ActionJackson;
            END;		  

        IF OBJECT_ID('tempdb..#FirstParseID') IS NOT NULL
            BEGIN
                DROP TABLE #FirstParseID;
            END;		  

        IF OBJECT_ID('tempdb..#MaxEventDate') IS NOT NULL
            BEGIN
                DROP TABLE #MaxEventDate;
            END;		  

        IF OBJECT_ID('tempdb..#ExitPoint') IS NOT NULL
            BEGIN
                DROP TABLE #ExitPoint;
            END;		  

        IF OBJECT_ID('tempdb..#ExitParseID') IS NOT NULL
            BEGIN
                DROP TABLE #ExitParseID;
            END;	

---------------------------------------
--Get Min Event Date for Each Visit
--Original Query - no dupes
---------------------------------------
        SELECT  fp.visit ,
                MIN(fp.eventdate) AS MinEventDate
        INTO    #FirstEventDate
        FROM    RentPath.Staging.TealiumParsedPivotRecover AS fp
                JOIN TealiumWebMetrics.Conformed.Profile cp ON fp.profileid = cp.ProfileID
                                                              AND fp.subprofileid = cp.SubProfileID
                                                              AND cp.StatusKey = 1
        GROUP BY fp.visit;


---------------------------------------
--Get Action/Min Event Date combination for Each Visit
---------------------------------------
        SELECT  action ,
                parseid ,
                CASE action
                  WHEN 'pageview' THEN 1
                  WHEN 'click' THEN 2
                  WHEN 'lead_submission' THEN 3
                  WHEN NULL THEN 4
                END AS SecondarySortOrder ,
                visit ,
                MIN(eventdate) AS EventDate
        INTO    #Actions
        FROM    RentPath.Staging.TealiumParsedPivotRecover AS tpp
                JOIN TealiumWebMetrics.Conformed.Profile cp ON tpp.profileid = cp.ProfileID
                                                              AND tpp.subprofileid = cp.SubProfileID
                                                              AND cp.StatusKey = 1
        GROUP BY visit ,
                action ,
                parseid;

---------------------------------------
--Get Final Action for Min Event Date combination for Each Visit
---------------------------------------
        SELECT  a.parseid ,
                a.SecondarySortOrder ,
                a.action ,
                a.EventDate ,
                fed.visit ,
                fed.MinEventDate ,
                ROW_NUMBER() OVER ( PARTITION BY fed.visit ORDER BY a.SecondarySortOrder, fed.MinEventDate ) AS RowNumber
        INTO    #ActionJackson
        FROM    #Actions AS a
                JOIN #FirstEventDate AS fed ON a.visit = fed.visit
                                               AND a.EventDate = fed.MinEventDate;

---------------------------------------
--Grab Parse ID associated with "First Action" 
---------------------------------------
        SELECT  *
        INTO    #FirstParseID
        FROM    #ActionJackson AS aj
        WHERE   aj.RowNumber = 1;

----------------------------------------------
--Get the last action the user performed in this visit
----------------------------------------------
		-----------------------------------------
		--Get ParseID associated with Max Event Date
		--Row Number arbitrary over ParseIDs with same Max Event Date
		--Updated Query to remove dupes
		-----------------------------------------
        SELECT  X.parseid ,
                X.visit ,
                X.EventDate ,
                ROW_NUMBER() OVER ( PARTITION BY X.visit ORDER BY X.EventDate DESC ) AS RowNumber
        INTO    #MaxEventDate
        FROM    ( SELECT    parseid ,
                            visit ,
                            MAX(eventdate) AS EventDate
                  FROM      RentPath.Staging.TealiumParsedPivotRecover AS tpp
                            JOIN TealiumWebMetrics.Conformed.Profile cp ON tpp.profileid = cp.ProfileID
                                                              AND tpp.subprofileid = cp.SubProfileID
                                                              AND cp.StatusKey = 1
                  GROUP BY  parseid ,
                            visit
                ) AS X;
		---------------------------------------
		--Get Max Event Date for Each Visit
		---------------------------------------
        SELECT  visit ,
                MAX(eventdate) AS ExitPoint
        INTO    #ExitPoint
        FROM    RentPath.Staging.TealiumParsedPivotRecover tpp
                JOIN TealiumWebMetrics.Conformed.Profile cp ON tpp.profileid = cp.ProfileID
                                                              AND tpp.subprofileid = cp.SubProfileID
                                                              AND cp.StatusKey = 1
        GROUP BY visit;
		
		----------------------------------------------
		--Get list of Exit ParseIDs
		----------------------------------------------
        SELECT  parseid
        INTO    #ExitParseID
        FROM    ( SELECT    *
                  FROM      #MaxEventDate AS med
                  WHERE     med.RowNumber = 1
                ) AS x
                INNER JOIN #ExitPoint AS y ON x.visit = y.visit
                                              AND x.EventDate = y.ExitPoint;

--------------------------------------------------
--Update the 4 columns needed for Fact building
--------------------------------------------------
        SELECT  p.parseid ,
                COALESCE(CASE WHEN p.referrer LIKE '%WT.mc_id=[0-9]%'
                              THEN SUBSTRING(p.referrer,
                                             ( CHARINDEX('WT.mc_id=',
                                                         p.referrer) ) + 9,
                                             CASE WHEN ( PATINDEX('%[a-z,$,-,?#,%,&]%',
                                                              SUBSTRING(p.referrer,
                                                              CHARINDEX('WT.mc_id=',
                                                              p.referrer) + 9,
                                                              999)) - 1 ) = -1
                                                  THEN 99
                                                  ELSE PATINDEX('%[a-z,$,-,?,#,%,&]%',
                                                              SUBSTRING(p.referrer,
                                                              CHARINDEX('WT.mc_id=',
                                                              p.referrer) + 9,
                                                              999)) - 1
                                             END)
                              ELSE NULL
                         END,
                         CASE WHEN p.url LIKE '%WT.mc_id=[0-9]%'
                              THEN SUBSTRING(p.url,
                                             ( CHARINDEX('WT.mc_id=', p.url) )
                                             + 9,
                                             CASE WHEN ( PATINDEX('%[a-z,$,-,?,#,%,&]%',
                                                              SUBSTRING(p.url,
                                                              CHARINDEX('WT.mc_id=',
                                                              p.url) + 9, 999))
                                                         - 1 ) = -1 THEN 99
                                                  ELSE PATINDEX('%[a-z,$,-,?,#,%,&]%',
                                                              SUBSTRING(p.url,
                                                              CHARINDEX('WT.mc_id=',
                                                              p.url) + 9, 999))
                                                       - 1
                                             END)
                              ELSE NULL
                         END) AS DerivedCampaignID ,
                CASE WHEN referrer LIKE '%ef^_id%' ESCAPE '^'
                     THEN SUBSTRING(referrer, CHARINDEX('ef_id', referrer) + 6,
                                    33)
                     WHEN path LIKE '%ef^_id%' ESCAPE '^'
                     THEN SUBSTRING(path, CHARINDEX('ef_id', path) + 6, 33)
                     ELSE NULL
                END AS DerivedEFID ,
                CASE WHEN z.parseid IS NOT NULL THEN 1
                     ELSE 0
                END AS FirstEventFlag ,
                CASE WHEN epi.parseid IS NOT NULL THEN 1
                     ELSE 0
                END AS LastEventFlag
        INTO    #ParseFlags
        FROM    RentPath.Staging.TealiumParsedPivotRecover AS p
                LEFT OUTER JOIN #FirstParseID AS z ON p.parseid = z.parseid
                LEFT OUTER JOIN #ExitParseID AS epi ON p.parseid = epi.parseid;

---------------------------------------------------------------------------
-- ef_id column may not be present, so check and run alternative code if so
---------------------------------------------------------------------------
        IF COLUMNPROPERTY(OBJECT_ID(N'RentPath.Staging.TealiumParsedPivotRecover'),
                          'ef_id', 'ColumnId') IS NULL
            BEGIN
                ALTER TABLE RentPath.Staging.TealiumParsedPivotRecover
                ADD ef_id VARCHAR(7000) NULL;
                PRINT 'added';
            END;
  
---------------------------------------------------------------------------
-- Safeguard for screen_type column 
---------------------------------------------------------------------------
        IF COLUMNPROPERTY(OBJECT_ID(N'RentPath.Staging.TealiumParsedPivotRecover'),
                          'screen_type', 'ColumnId') IS NULL
            BEGIN
                ALTER TABLE RentPath.Staging.TealiumParsedPivotRecover
                ADD screen_type VARCHAR(7000) NULL;
                PRINT 'added';
            END;   

---------------------------------------------------------------------------
-- Safeguard for device column 
---------------------------------------------------------------------------
        IF COLUMNPROPERTY(OBJECT_ID(N'RentPath.Staging.TealiumParsedPivotRecover'),
                          'device', 'ColumnId') IS NULL
            BEGIN
                ALTER TABLE RentPath.Staging.TealiumParsedPivotRecover
                ADD device VARCHAR(7000) NULL;
                PRINT 'added';
            END;  
    
--------------------------------------------------
--Create 4 columns needed for Fact building
--------------------------------------------------
--Add in campaign ID column for campaign derived from referrer or path
        ALTER TABLE RentPath.Staging.TealiumParsedPivotRecover
        ADD DerivedCampaignID VARCHAR(7000) NULL;
        PRINT 'added';

--Add in EF ID column for ef_id derived from referrer or path
        ALTER TABLE RentPath.Staging.TealiumParsedPivotRecover
        ADD DerivedEFID VARCHAR(64) NULL;
        PRINT 'added';

--Add in FirstEventFlag column
        ALTER TABLE RentPath.Staging.TealiumParsedPivotRecover
        ADD FirstEventFlag TINYINT NULL;
        PRINT 'added';

--Add in LastEventFlag column
        ALTER TABLE RentPath.Staging.TealiumParsedPivotRecover
        ADD LastEventFlag TINYINT NULL;
        PRINT 'added';


----------------------------------------------
--Update Derived and Flag columns
----------------------------------------------
        UPDATE  rs
        SET     rs.DerivedCampaignID = pf.DerivedCampaignID ,
                rs.DerivedEFID = pf.DerivedEFID ,
                rs.FirstEventFlag = pf.FirstEventFlag ,
                rs.LastEventFlag = pf.LastEventFlag
        FROM    RentPath.Staging.TealiumParsedPivotRecover AS rs
                JOIN #ParseFlags AS pf ON rs.parseid = pf.parseid;

        BEGIN TRY
            DROP TABLE ##tmpParse;
        END TRY
        BEGIN CATCH
        END CATCH;
    END;















GO
/****** Object:  StoredProcedure [Staging].[pr_UnitStyleClicks]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Staging].[pr_UnitStyleClicks]

/*******************************************************************************************
* Name:	Staging.pr_UnitStyleClicks
* ------------------------------------------------------------------------------------------
* Desc:	This marts daily floorplan clicks from staging.dbo.ParsedData.  This data will be
		rolled up at the end of the month to DataProduct.FloorplanAvailabilityVsClicked
* ------------------------------------------------------------------------------------------
* Test:	EXEC Staging.pr_UnitStyleClicks
* ------------------------------------------------------------------------------------------
* Hist:	01	12/18/2015	Don Wert	Initial Version, ticket 21713. From Data Product project
********************************************************************************************/

AS 

SET NOCOUNT ON

BEGIN	
	--remove any records from yesterday to make the procedure re-runnable
	DELETE FROM Rentpath.Staging.UnitStyleClicks
	WHERE YMDID = CAST(CONVERT(VARCHAR,GETDATE()-1,112) AS INT)

	--get yesterday's unit layout clicks
	INSERT INTO Rentpath.Staging.UnitStyleClicks
			(ParseID
			,YMDID
			,Listingid
			,unitstyle
			,ClickCount
			,YearMonth)
	SELECT pd1.ParseID
	,fp.YMDID
	,pd1.Measure AS Listingid
	,fp.unitstyle
	,1 AS ClickCount
	,CAST(LEFT(fp.YMDID,6) AS INT)
	FROM staging.dbo.ParsedData pd1 WITH (NOLOCK)
	JOIN (
		SELECT pd.ParseID
		,pd.YMDID
		,pd.Measure AS unitstyle
		FROM staging.dbo.ParsedData pd WITH (NOLOCK)
		JOIN (
			SELECT ParseID
			,YMDID
			,MeasureType
			FROM staging.dbo.ParsedData WITH (NOLOCK)
			WHERE Measure in ('room_planner_tab','floorplan_modal','a.floorplan.tab','dialog_floorplan','floorplans_and_pricing_tab','floorplans_and_pricing','floorplan_tab','floorplans_table')
			AND ProfileID IN (1,51)
		) apd
			ON pd.YMDID = apd.YMDID
			AND pd.ParseID = apd.ParseID
		AND pd.MeasureType = 'clickvalue'
		AND pd.Measure NOT IN ('Check Availability', 'ViewFloor Plan')
	) AS fp
		ON pd1.ParseID = fp.ParseID
		AND pd1.YMDID = fp.YMDID
	WHERE pd1.MeasureType = 'listingid'

END

SET NOCOUNT OFF



GO
/****** Object:  StoredProcedure [Staging].[pr_UpdateClickEvents_deleteme_maybe]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





















CREATE PROCEDURE [Staging].[pr_UpdateClickEvents_deleteme_maybe] 

/*******************************************************************************************
* Name:	[Staging].[pr_UpdateClickEvents] 
* ------------------------------------------------------------------------------------------
* Desc:	
* ------------------------------------------------------------------------------------------
* Test:	EXEC [Staging].[pr_UpdateClickEvents] 
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist:	01	10/19/2015	Colleen Rocks        Ticket 21096
********************************************************************************************/
AS
BEGIN
    SET NOCOUNT ON;

    --PRINT 'Starting prUpdateClickEvents'

    DECLARE @sql AS VARCHAR(MAX)
    DECLARE @pivot_list AS VARCHAR(MAX)
    DECLARE @select_list AS VARCHAR(MAX)
    DECLARE @table_columns AS VARCHAR(MAX)

    SELECT  @pivot_list = COALESCE(@pivot_list + ', ','') + '[' + PIVOT_CODE + ']'
           ,@select_list = COALESCE(@select_list + ', ','') + 'ISNULL([' + PIVOT_CODE + '], 0) AS [' + PIVOT_CODE + ']'
           ,@table_columns = COALESCE(@table_columns + ', ','') + (PIVOT_CODE + ' INT')
    FROM    (
             SELECT DISTINCT
                    [clickevent] AS PIVOT_CODE
             FROM   Dimension.ClickEventsMap_test
             WHERE  [clickevent] IS NOT NULL
                    AND ismarted = 1
            ) AS PIVOT_CODES

    SET @pivot_list = @pivot_list
    SET @select_list = @select_list
    SET @table_columns = 'ymdid INT, listingid INT, profileid INT, ' + @table_columns

	IF OBJECT_ID('tempdb..#MartList') IS NOT NULL
	    BEGIN
	        DROP TABLE #MartList
	    END 

	SELECT l.YMDID
		,l.ListingID
		,l.PropertyIDRent
	INTO #MartList
	FROM Rentpath.Mart.Listings AS l
	WHERE l.YMDID = (SELECT TOP 1 YMDID FROM Staging.TealiumParsedPivot)


	SET @sql = 'insert into RentPath.Staging.ClickEventUpdate (' + REPLACE(@table_columns,' INT','') + ')
			SELECT ymdid,cast(listingid as Int), profileid, ' + @select_list + '
			FROM (
					SELECT  tpp.ymdid
						,tpp.profileid
						,CASE WHEN tpp.profileid IN (86,87) THEN l.listingid      
									ELSE tpp.listingid END AS listingid
							,clm.[ClickEvent] AS Event
							,ISNULL(COUNT(1),0) AS EventCount
					FROM Staging.TealiumParsedPivot AS tpp 
					JOIN Dimension.ClickEventsMap_test AS clm
						ON clm.action = tpp.action
						AND ISNULL(clm.page_sub,'''') = ISNULL(tpp.page_sub,'''')
						AND ISNULL(clm.position,'''') = ISNULL(tpp.position,'''')
						AND clm.page = tpp.[page]
						AND ISNULL(clm.selection,'''') = ISNULL(tpp.selection,'''')
						AND tpp.subprofileid <> 99
						AND tpp.listingid NOT LIKE ''%[^0-9]%''
					LEFT JOIN #MartList AS l
						ON l.ymdid = tpp.ymdid
						AND tpp.profileid IN (86,87)
						AND tpp.listingid = l.PropertyIDRent
						AND tpp.listingid NOT LIKE ''%[^0-9]%''
					WHERE clm.ismarted = 1
					GROUP BY tpp.ymdid
						,tpp.profileid
						,CASE WHEN tpp.profileid IN (86,87) THEN l.listingid      
									ELSE tpp.listingid END
							,clm.[ClickEvent]
					) p
		PIVOT (
			SUM([EventCount])
			FOR Event IN (
		   		' + @pivot_list + '
			)
		) AS pvt
		'

/*
    --This section of code is just for use from 06/30-08/09 due to some listingid tag issues      

    SET @sql = 'INSERT INTO RentPath.Staging.ClickEventUpdate (' + REPLACE(@table_columns,' INT','') + ')
			SELECT ymdid, cast(listingid as Int), profileid, ' + @select_list + '
			FROM (
					SELECT tpp.ymdid 
						,tpp.profileid
						,CASE WHEN tpp.profileid IN (86,87) THEN l.ListingID
							WHEN tpp.PAGE = ''pdp'' THEN ISNULL(tpp.listingid,tpp.pdp_listing_id)
							ELSE tpp.listingid END AS listingid
						,clm.clickevent AS Event
						,ISNULL(COUNT(1),0) AS EventCount
					FROM RentPath.Staging.TealiumParsedPivot AS tpp
					JOIN Rentpath.Dimension.ClickEventsMap_test AS clm
							ON clm.action = tpp.action
							AND ISNULL(clm.page_sub,'''') = ISNULL(tpp.page_sub,'''')
							AND ISNULL(clm.position,'''') = ISNULL(tpp.position,'''')
							AND clm.page = tpp.[page]
							AND ISNULL(clm.selection,'''') = ISNULL(tpp.selection,'''')
							AND tpp.subprofileid <> 99
							AND CASE WHEN tpp.PAGE = ''pdp'' THEN ISNULL(tpp.listingid,tpp.pdp_listing_id)
							ELSE tpp.listingid END NOT LIKE ''%[^0-9]%''
					LEFT JOIN #MartList AS l
						ON l.ymdid = tpp.ymdid
						AND tpp.profileid IN (86,87)
						AND CASE WHEN tpp.page = ''pdp'' THEN ISNULL(tpp.listingid,tpp.pdp_listing_id)
								ELSE tpp.listingid END = l.PropertyIDRent
						AND CASE WHEN tpp.page = ''pdp'' THEN ISNULL(tpp.listingid,tpp.pdp_listing_id)
								ELSE tpp.listingid END NOT LIKE ''%[^0-9]%''
					WHERE clm.ismarted = 1
					GROUP BY tpp.ymdid
						,tpp.profileid
						,CASE WHEN tpp.profileid IN (86,87) THEN l.ListingID
							WHEN tpp.PAGE = ''pdp'' THEN ISNULL(tpp.listingid,tpp.pdp_listing_id)
							ELSE tpp.listingid END
						,clm.clickevent
					) p
		PIVOT (
			SUM([EventCount])
			FOR Event IN (
		   		' + @pivot_list + '
			)
		) AS pvt
		'
*/

    --PRINT @sql
    EXEC (@sql)

   -- PRINT 'Ending pr_UpdateClickEvents'

    SET NOCOUNT OFF;
END 









GO
/****** Object:  StoredProcedure [Tableau].[MgmtPresentation_ActiveFLIs]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








CREATE PROCEDURE [Tableau].[MgmtPresentation_ActiveFLIs] (@MgtCoID VARCHAR(MAX))

/*******************************************************************************************
* Name:	Tableau.MgmtPresentation_ActiveFLIs
* ------------------------------------------------------------------------------------------
* Desc:	Gets package mix as of today for management company
* ------------------------------------------------------------------------------------------
* Test:	EXEC Tableau.MgmtPresentation_ActiveFLIs '001E000000DmFUzIAN'
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist:	01	11/08/2016		Colleen Rocks		Ticket 24665; initial version
********************************************************************************************/
AS
BEGIN
    SET NOCOUNT ON;

SELECT a.Name AS AdvertiserAccountName
	,sa.Name AS AdvertiserManagementCompany
	,cli.Product_Bucket__c AS ProductBucket
	,p.Name AS ProductName
	,a.BillingState
	,cli.Monthly_Price_with_All_Discounts__c
	,fli.Name
FROM SalesForce.dbo.Contract_Detail__c AS cd
INNER JOIN Salesforce.dbo.Contract_Line_Item__c AS cli
	ON cd.Id = cli.Contract_Detail__c
INNER JOIN Salesforce.dbo.Fulfillment_Line_Item__c AS fli
	ON cli.Id = fli.Contract_Line_Item__c
INNER JOIN Salesforce.dbo.Account AS a
	ON cd.Advertiser__c = a.Id
INNER JOIN Salesforce.dbo.Account AS sa
	ON a.Selling_Mgmt_Account__c = sa.Id
INNER JOIN Salesforce.dbo.Product2 AS p
	ON cli.Product__c = p.Id
WHERE fli.StartDate__c <= GETDATE()
	AND fli.Effective_Drop_Date__c >= GETDATE()
	AND CHARINDEX(sa.id,@MgtCoID) > 0 ;


    SET NOCOUNT OFF;
END 








GO
/****** Object:  StoredProcedure [Tableau].[MgmtPresentation_Map]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








CREATE PROCEDURE [Tableau].[MgmtPresentation_Map] (
    @MgtCoID VARCHAR(MAX))

/*******************************************************************************************
* Name:	Tableau.MgmtPresentation_Map
* ------------------------------------------------------------------------------------------
* Desc:	
* ------------------------------------------------------------------------------------------
* Test:	EXEC Tableau.MgmtPresentation_Map '001E000000DmFHxIAN'
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist:	01	08/12/2016		Colleen Rocks		Ticket #####; Portfolio Advantage Initiative
********************************************************************************************/
AS
BEGIN
    SET NOCOUNT ON;
/*
--test:
DECLARE @MgtCoID VARCHAR(MAX) = '001E000000DmG8kIAF'
*/

-------------------------------
/*Declare and set variables*/
-------------------------------
--    DECLARE @StartDate DATE = DATEFROMPARTS(YEAR(GETDATE()),'01','01')
--       ,@EndDate DATE = EOMONTH(DATEADD(MONTH,-1,GETDATE()));

    DECLARE @StartDate DATE = DATEFROMPARTS('2016','01','01')
       ,@EndDate DATE = DATEFROMPARTS('2016','12','31')

    DECLARE @StartYMDID INT = CAST(CONVERT(VARCHAR(8),@StartDate,112) AS INT)
       ,@EndYMDID INT = CAST(CONVERT(VARCHAR(8),@EndDate,112) AS INT)


-------------------------------
/*Drop temp tables*/
-------------------------------
BEGIN TRY
    DROP TABLE #Dates
END TRY
BEGIN CATCH 
END CATCH;

BEGIN TRY
    DROP TABLE #PropList
END TRY
BEGIN CATCH 
END CATCH;

BEGIN TRY
    DROP TABLE #CBSACounts
END TRY
BEGIN CATCH 
END CATCH;

BEGIN TRY
    DROP TABLE #LPP
END TRY
BEGIN CATCH 
END CATCH;

BEGIN TRY
    DROP TABLE #CBSALPP
END TRY
BEGIN CATCH 
END CATCH;

-------------------------------
/*Get date range*/
-------------------------------
SELECT DISTINCT
        YearMonth
       ,MonthStartDate
INTO    #Dates
FROM    DBAUtility.Dimension.Dates WITH (NOLOCK)
WHERE   YMDID BETWEEN @StartYMDID AND @EndYMDID;

-------------------------------
/*Get property list*/
-------------------------------
SELECT  a.Name
       ,a.Id AS PropAcctID
	   ,l.ListingID
       ,pa.Name AS MgtCoName
       ,a.Joint_Advertising_Status__c AS AdvertisingStatus
       ,ISNULL(zc.CBSAName,'Unknown') AS CBSAName
       ,ISNULL(zc.CBSACode,'Unknown') AS CBSACode
       ,g.geopointe__Latitude__c AS Latitude
       ,g.geopointe__Longitude__c AS Longitude
INTO    #PropList
FROM    SalesForce.dbo.Account AS a
INNER JOIN SalesForce.dbo.Account AS pa
        ON pa.Id = a.Selling_Mgmt_Account__c
INNER JOIN SalesForce.dbo.geopointe__Geocode__c AS g
        ON a.Id = g.geopointe__Parent_Record_ID__c
LEFT OUTER JOIN DBAUtility.dbo.ZipCBSA AS zc
        ON a.ShippingPostalCode = zc.ZIPCode
LEFT OUTER JOIN Rentpath.Dimension.Listings AS l
	ON a.Id = l.SFPropertyAcctID
WHERE   CHARINDEX(a.Selling_Mgmt_Account__c,@MgtCoID) > 0;

-------------------------------
/*Get advertiser counts*/
-------------------------------
SELECT x.MgtCoName
	,x.CBSAName
	,x.CBSACode
	,x.NumActivePropsInGeo
	,x.NumPropertiesInGeo
	,x.NumInactivePropsInGeo
	,x.NumActivePropsInGeo / (CAST(x.NumPropertiesInGeo AS DECIMAL(18,2))) AS PctPenetration
INTO #CBSACounts
FROM (
		SELECT pl.MgtCoName
		       ,pl.CBSAName
		       ,pl.CBSACode
		       ,SUM(CASE WHEN pl.AdvertisingStatus <> 'True Prospect' THEN 1
		                 ELSE 0
		            END) AS NumActivePropsInGeo
		       ,SUM(CASE WHEN pl.AdvertisingStatus = 'True Prospect' THEN 1
		                 ELSE 0
		            END) AS NumInactivePropsInGeo
		       ,COUNT(pl.PropAcctID) AS NumPropertiesInGeo
		FROM    #PropList AS pl
		GROUP BY pl.MgtCoName
			,pl.CBSACode
			,pl.CBSAName 
	) AS x	
			
-------------------------------
/*Get avg leads per 
property in mgmt company in CBSA*/
-------------------------------
SELECT pl.CBSACode
	,SUM(ml.AllLeads) / MONTH(@EndDate) / CAST(COUNT(DISTINCT pl.ListingID) AS DECIMAL(18,2)) AS AvgLPPperMonth
INTO #LPP
FROM #PropList AS pl
INNER JOIN RentPath.Mart.Listings AS ml
	ON pl.ListingID = ml.ListingID
WHERE ml.YearMonth IN (SELECT YearMonth FROM #Dates)
	AND (ml.StatusIDAG = 1 OR ml.StatusIDRent = 1)
GROUP BY pl.CBSACode;


-------------------------------
/*Get avg leads per 
property in CBSA as a whole*/
-------------------------------
SELECT l.CBSACode
	,SUM(ml.AllLeads) / MONTH(@EndDate) / CAST(COUNT(DISTINCT l.ListingID) AS DECIMAL(18,2)) AS AvgCBSAPPperMonth
INTO #CBSALPP
FROM RentPath.Dimension.Listings AS l
INNER JOIN RentPath.Mart.Listings AS ml
	ON l.ListingID = ml.ListingID
WHERE l.CBSACode IN (SELECT DISTINCT CBSACode FROM #PropList)
	AND ml.YearMonth IN (SELECT YearMonth FROM #Dates)
	AND (ml.StatusIDAG = 1 OR ml.StatusIDRent = 1)
GROUP BY l.CBSACode;

-------------------------------
/*Get final result set*/
-------------------------------
SELECT c.MgtCoName
       ,c.CBSAName
       ,c.CBSACode
       ,c.NumActivePropsInGeo
       ,c.NumPropertiesInGeo
       ,c.NumInactivePropsInGeo
       ,c.PctPenetration
	   ,l.AvgLPPperMonth
	   ,cb.AvgCBSAPPperMonth
	   ,@StartDate AS StartDate
	   ,@EndDate AS EndDate
FROM #CBSACounts AS c
LEFT OUTER JOIN #LPP AS l
	ON c.CBSACode = l.CBSACode
LEFT OUTER JOIN #CBSALPP AS cb
	ON c.CBSACode = cb.CBSACode;

    SET NOCOUNT OFF;
END 










GO
/****** Object:  StoredProcedure [Tableau].[MgmtPresentation_PackageMix]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






CREATE PROCEDURE [Tableau].[MgmtPresentation_PackageMix] (@MgtCoID VARCHAR(MAX))

/*******************************************************************************************
* Name:	Tableau.MgmtPresentation_PackageMix
* ------------------------------------------------------------------------------------------
* Desc:	Gets package mix as of today for management company
* ------------------------------------------------------------------------------------------
* Test:	EXEC Tableau.MgmtPresentation_PackageMix '001E000000DmGahIAF,001E0000019EZ1WIAW'
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist:	01	08/10/2016		Colleen Rocks		Ticket #####; Portfolio Advantage Initiative
********************************************************************************************/
AS
BEGIN
    SET NOCOUNT ON;

/*
--test:
DECLARE @MgtCoID VARCHAR(MAX) = '001E000000DmGahIAF,001E0000019EZ1WIAW'
*/

-------------------------------
/*Declare & set variables*/
-------------------------------
    DECLARE @Date Date = CONVERT(DATE,GETDATE());

-------------------------------
/*Drop temp tables*/
-------------------------------
    BEGIN TRY
        DROP TABLE #PropList
    END TRY
    BEGIN CATCH 
    END CATCH;

    BEGIN TRY
        DROP TABLE #Products
    END TRY
    BEGIN CATCH 
    END CATCH;

-------------------------------
/*Get property list*/
-------------------------------
    SELECT  a.Id AS SFPropAcctID
           ,a.Joint_Advertising_Status__c AS JointAdvertising
           ,l.ListingID
    INTO    #PropList
    FROM    SalesForce.dbo.Account AS a
    LEFT OUTER JOIN RentPath.Dimension.Listings AS l
            ON a.Id = l.SFPropertyAcctID
    WHERE   CHARINDEX(a.Selling_Mgmt_Account__c,@MgtCoID) > 0;

-------------------------------
/*Get spend and product list*/
-------------------------------
    SELECT  fli.Advertiser__c AS SalesforceAccountID
           ,fli.StartDate__c
           ,fli.EndDate__c
           ,CASE WHEN p.Product_Bucket__c = 'Fee' THEN 'Extra Fee'
                 WHEN p.Product_Bucket__c = 'Core'
                      AND p.Family IN ('ALM','CPA')
                      OR p.Name IN ('Pay Per Lead','Pay Per Lease') THEN 'Core - Performance Based'
                 WHEN p.Product_Bucket__c = 'Core' THEN 'Core - Subscription'
                 ELSE 'Upsell'
            END AS Bucket
           ,CASE WHEN p.AG_Product__c = 1
                      AND p.Rent_com_Product__c = 1 THEN 'Both'
                 WHEN p.AG_Product__c = 1
                      AND p.Rent_com_Product__c = 0 THEN 'AG'
                 WHEN p.AG_Product__c = 0
                      AND p.Rent_com_Product__c = 1 THEN 'Rent'
                 ELSE p.Channel__c
            END AS ProductSite
           ,p.Name AS ProductName
           ,cli.Monthly_Price_with_All_Discounts__c AS SalesPrice
    INTO    #Products
    FROM    SalesForce.dbo.Fulfillment_Line_Item__c AS fli
    INNER JOIN SalesForce.dbo.Contract_Line_Item__c AS cli
            ON cli.Fulfillment_Line_Item__c = fli.Id
    INNER JOIN SalesForce.dbo.Product2 AS p
            ON fli.Product__c = p.Id
    WHERE   @Date BETWEEN fli.StartDate__c AND fli.EndDate__c
            AND p.Name <> 'Billing Adjustment'
            AND fli.Advertiser__c IN (SELECT    SFPropAcctID
                                      FROM      #PropList);

-------------------------------
/*Get final results*/
-------------------------------
    SELECT  p.Bucket
           ,p.ProductName
           ,p.ProductSite
           ,t.TotalProps
           ,COUNT(DISTINCT p.SalesforceAccountID) AS NumPropsWithProduct
    FROM    #Products AS p
    CROSS JOIN (
                SELECT  COUNT(DISTINCT SalesforceAccountID) AS TotalProps
				FROM    #Products
                WHERE   Bucket LIKE '%Core%'
               ) AS t
    WHERE   p.Bucket LIKE '%Core%'
    GROUP BY p.Bucket
           ,p.ProductName
           ,p.ProductSite
           ,t.TotalProps;


    SET NOCOUNT OFF;
END 















GO
/****** Object:  StoredProcedure [Tableau].[MgmtPresentation_Products]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO









CREATE PROCEDURE [Tableau].[MgmtPresentation_Products] (@MgtCoID VARCHAR(MAX))

/*******************************************************************************************
* Name:	Tableau.MgmtPresentation_Products
* ------------------------------------------------------------------------------------------
* Desc:	Gets package mix as of today for management company
* ------------------------------------------------------------------------------------------
* Test:	EXEC Tableau.MgmtPresentation_Products '001E000000DmGVbIAN'
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist:	01	09/11/2016		Colleen Rocks		Ticket #####; Portfolio Advantage Initiative
********************************************************************************************/
AS
BEGIN
    SET NOCOUNT ON;

/*--test:
DECLARE @MgtCoID VARCHAR(MAX) = --'001E000000DmGZeIAN'
    '001E000000DmGahIAF,001E0000019EZ1WIAW'*/

-------------------------------
/*Declare & set variables*/
-------------------------------
    DECLARE @Date Date = CONVERT(DATE,GETDATE());

	DECLARE @StartYMDID INT = CAST(CONVERT(VARCHAR(8),DATEADD(YEAR,-1,@Date),112) AS INT)

	--SELECT @Date, @StartYMDID
-------------------------------
/*Drop temp tables*/
-------------------------------
    BEGIN TRY
        DROP TABLE #PropList
    END TRY
    BEGIN CATCH 
    END CATCH;

	BEGIN TRY
	    DROP TABLE #ReviewCounts
	END TRY
	BEGIN CATCH 
	END CATCH;

	BEGIN TRY
	    DROP TABLE #CR3
	END TRY
	BEGIN CATCH 
	END CATCH;

	BEGIN TRY
	    DROP TABLE #MediaCenter
	END TRY
	BEGIN CATCH 
	END CATCH;

	BEGIN TRY
	    DROP TABLE #Products
	END TRY
	BEGIN CATCH 
	END CATCH;

-------------------------------
/*Get property list*/
-------------------------------
    SELECT  a.Id AS SFPropAcctID
           ,a.Joint_Advertising_Status__c AS JointAdvertising
           ,l.ListingID
		   ,l.PropertyIDAG
    INTO    #PropList
    FROM    SalesForce.dbo.Account AS a
    LEFT OUTER JOIN RentPath.Dimension.Listings AS l
            ON a.Id = l.SFPropertyAcctID
    WHERE   CHARINDEX(a.Selling_Mgmt_Account__c,@MgtCoID) > 0;

-------------------------------
/*Get CR3 data*/
-------------------------------
    DECLARE @OracleCmd VARCHAR(MAX)
       ,@OracleCmd2 VARCHAR(MAX)
       ,@SQL VARCHAR(MAX)

    SET @SQL = ISNULL(STUFF((
                      SELECT    ',' + CONVERT(VARCHAR(20),PropertyIDAG)
                      FROM      #PropList
                     FOR
                      XML PATH('')
                     ),1,1,''),0)

    CREATE TABLE #ReviewCounts (
        [PROPERTYID] [NUMERIC](15,0) NULL
       ,[ISLIVEAG] [INT] NULL
       ,[ISLIVERENT] [INT] NULL
       ,[AVGRATING] [DECIMAL](5,1) NULL
       ,[AGLIVEDATE] [NVARCHAR](10) NULL
       ,[RENTLIVEDATE] [NVARCHAR](10) NULL
       ,[PUBLISHEDREVIEWS] [INT] NULL
       ,[REPLIEDREVIEWS] [INT] NULL)

    SELECT  @OracleCmd = N'SELECT  y.propertyid
               ,CONVERT(INT,y.isliveag) AS isliveag
               ,CONVERT(INT,y.isliverent) AS isliverent
               ,CONVERT(DECIMAL(5,1),CONVERT(FLOAT(5),avgrating)) AS avgrating
               ,CONVERT(VARCHAR,y.aglivedate,101) AS aglivedate
               ,CONVERT(VARCHAR,y.rentlivedate,101) AS rentlivedate
               ,CONVERT(INT,y.publishedreviews) AS publishedreviews
               ,CONVERT(INT,y.repliedreviews) AS repliedreviews
        FROM    OPENQUERY([ORACLEAPTG],''SELECT x.propertyid
		                  ,MAX(x.agpublished)										AS IsLiveAG
						  ,MAX(x.rentpublished)										AS IsLiveRent
		                  ,AVG(CAST(x.overallrating AS NUMERIC))					AS AvgRating
						  ,MIN(x.agdatepublished)									AS AGLiveDate
						  ,MIN(x.rentdatepublished)									AS RentLiveDate
						  ,SUM(CASE WHEN x.published = 1 THEN 1 ELSE 0 END)			AS PublishedReviews
						  ,SUM(CASE WHEN x.commentid IS NOT NULL THEN 1 ELSE 0 END)	AS RepliedReviews
						FROM (
								SELECT ur.propertyid,
										ur.ReviewID,
										ur.Moderationstatus,
										ur.Emailsource,
										v.published,
										v.agPublished,
										v.rentpublished,
										v.overallrating,
										ur.datepublished AS agdatepublished,
										ur.rentdatepublished,
										MAX(c.commentid) AS commentid
								FROM rating.user_reviews ur
								LEFT JOIN rating.review_info_view v 
								  on ur.REVIEWID=v.reviewid 
								  and ur.PROPERTYID=v.propertyid 
								  and (v.publishtoag=1 or v.publishtorent=1)
								LEFT JOIN rating.review_comments c
								  on ur.reviewid=c.reviewid'

    SELECT  @OracleCmd2 = N'
								WHERE ur.propertyid IN (' + @SQL + ')
								GROUP BY ur.propertyid,
										ur.ReviewID,
										ur.Moderationstatus,
										ur.Emailsource,
										v.published,
										v.agPublished,
										v.rentpublished,
										v.overallrating,
										ur.datepublished,
										ur.rentdatepublished
							) x
		                GROUP BY x.propertyid
				'') y'

    INSERT  INTO #ReviewCounts
            (PROPERTYID
            ,ISLIVEAG
            ,ISLIVERENT
            ,AVGRATING
            ,AGLIVEDATE
            ,RENTLIVEDATE
            ,PUBLISHEDREVIEWS
            ,REPLIEDREVIEWS)
            EXEC (@OracleCmd + @OracleCmd2);

-------------------------------
/*Get current CR3 data for the proplist*/
-------------------------------
    SELECT  COUNT(pl.SFPropAcctID) AS NumPropswithCR3
           ,SUM(rc.PUBLISHEDREVIEWS) AS NumPublishedReviews
           ,SUM(rc.REPLIEDREVIEWS) AS NumRepliedReviews
           ,AVG(rc.AVGRATING) AS AvgRating
    INTO    #CR3
    FROM    #PropList AS pl
    INNER JOIN #ReviewCounts AS rc
            ON pl.PropertyIDAG = rc.PROPERTYID
    WHERE   pl.JointAdvertising <> 'True Prospect'
            AND (rc.ISLIVEAG = 1
                 OR rc.ISLIVERENT = 1);

-------------------------------
/*Get current year Media Center 
data for the proplist*/
-------------------------------
    SELECT  COUNT(DISTINCT mc.SFPropertyAcctID) AS NumPropsUsingMediaCenter
           ,SUM(CASE WHEN mc.CampaignFormat LIKE '%email%' THEN mc.NumCampaigns
                     ELSE 0
                END) AS TotalEmailCampaigns
           ,SUM(CASE WHEN mc.CampaignFormat = 'SMS' THEN mc.NumCampaigns
                     ELSE 0
                END) AS TotalSMSCampaigns
           ,SUM(CASE WHEN mc.CampaignFormat LIKE '%email%' THEN mc.TimesOpened
                     ELSE 0
                END) / NULLIF(CAST(SUM(CASE WHEN mc.CampaignFormat LIKE '%email%' THEN mc.TotalMessageDelivered
                                            ELSE 0
                                       END) AS NUMERIC(10,5)),0) AS AvgOpenRate
           ,SUM(CASE WHEN mc.CampaignFormat LIKE '%email%' THEN mc.TotalMessageDelivered
                     ELSE 0
                END) AS TotalEmailDelivered
           ,SUM(CASE WHEN mc.CampaignFormat = 'SMS' THEN mc.TotalMessageDelivered
                     ELSE 0
                END) AS TotalSMSDelivered
    INTO    #MediaCenter
    FROM    (
             SELECT mc.SFPropertyAcctID
                   ,mc.CampaignFormat
                   ,MAX(mc.CampaignCount) AS CampaignCount
                   ,COUNT(mc.CampaignId) AS NumCampaigns
                   ,SUM(mc.TotalRecipients) AS TotalRecipients
                   ,SUM(mc.TotalMessagesDelivered) AS TotalMessageDelivered
                   ,SUM(mc.TimesOpened) AS TimesOpened
             FROM   #PropList AS pl
             INNER JOIN Mart.vw_MediaCenterData AS mc
                    ON pl.SFPropAcctID = mc.SFPropertyAcctID
             WHERE  LEFT(mc.YMDID,4) = LEFT(@StartYMDID,4)
                    AND mc.CampaignStatus = 'Sent'
             GROUP BY mc.SFPropertyAcctID
                   ,mc.CampaignFormat
            ) AS mc;

-------------------------------
/*Get spend and product list*/
-------------------------------
    SELECT  fli.Advertiser__c AS SalesforceAccountID
		   ,a.Name AS PropertyName
           ,fli.StartDate__c
           ,fli.EndDate__c
           ,CASE WHEN p.Product_Bucket__c = 'Fee' THEN 'Extra Fee'
                 WHEN p.Name LIKE '%spotlight%' THEN 'Spotlight'
				 WHEN p.ID = '01tE0000008maJsIAI' THEN 'Comm Pro'
				 WHEN p.ID = '01tE0000008maLUIAY' THEN 'Soc Pro'
				 WHEN p.Product_Bucket__c = 'Leadmail' THEN p.Product_Bucket__c
				 WHEN p.Product_Bucket__c = 'Core'
                      AND p.Family IN ('ALM','CPA')
                      OR p.Name IN ('Pay Per Lead','Pay Per Lease') THEN 'Core - Performance Based'
                 WHEN p.Product_Bucket__c = 'Core' THEN 'Core - Subscription'
                 ELSE 'Upsell'
            END AS Bucket
           ,CASE WHEN p.AG_Product__c = 1
                      AND p.Rent_com_Product__c = 1 THEN 'Both'
                 WHEN p.AG_Product__c = 1
                      AND p.Rent_com_Product__c = 0 THEN 'AG'
                 WHEN p.AG_Product__c = 0
                      AND p.Rent_com_Product__c = 1 THEN 'Rent'
                 ELSE p.Channel__c
            END AS ProductSite
           ,p.Name AS ProductName
           ,cli.Monthly_Price_with_All_Discounts__c AS SalesPrice
    INTO #Products
	FROM    SalesForce.dbo.Fulfillment_Line_Item__c AS fli
    INNER JOIN SalesForce.dbo.Contract_Line_Item__c AS cli
            ON cli.Fulfillment_Line_Item__c = fli.Id
    INNER JOIN SalesForce.dbo.Product2 AS p
            ON fli.Product__c = p.Id
	INNER JOIN SalesForce.dbo.Account AS a
		ON fli.Advertiser__c = a.Id
    WHERE   @Date BETWEEN fli.StartDate__c AND fli.EndDate__c
            AND p.Name <> 'Billing Adjustment'
            AND fli.Advertiser__c IN (SELECT    SFPropAcctID
                                      FROM      #PropList);

-------------------------------
/*Get final result set*/
-------------------------------
SELECT p.SalesforceAccountID
       ,p.PropertyName
       ,p.StartDate__c
       ,p.EndDate__c
       ,p.Bucket
       ,p.ProductSite
       ,p.ProductName
       ,p.SalesPrice
       ,c.NumPropswithCR3
       ,c.NumPublishedReviews
       ,c.NumRepliedReviews
       ,c.AvgRating
       ,mc.NumPropsUsingMediaCenter
       ,mc.TotalEmailCampaigns
       ,mc.TotalSMSCampaigns
       ,mc.AvgOpenRate
       ,mc.TotalEmailDelivered
       ,mc.TotalSMSDelivered 
FROM #Products AS p
CROSS JOIN #CR3 AS c
CROSS JOIN #MediaCenter AS mc


    SET NOCOUNT OFF;
END 









GO
/****** Object:  StoredProcedure [Tableau].[MgmtPresentation_PropList]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO









CREATE PROCEDURE [Tableau].[MgmtPresentation_PropList] (
    @MgtCoID VARCHAR(MAX))

/*******************************************************************************************
* Name:	Tableau.MgmtPresentation_PropList
* ------------------------------------------------------------------------------------------
* Desc:	
* ------------------------------------------------------------------------------------------
* Test:	EXEC Tableau.MgmtPresentation_PropList '001E000000DmFUzIAN'
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist:	01	09/12/2016		Colleen Rocks		Ticket #####; Portfolio Advantage Initiative
* Hist: 02	11/08/2016		Colleen Rocks		Ticket 24665; added extra columns
********************************************************************************************/
AS
BEGIN
    SET NOCOUNT ON;
/*
--test:
DECLARE @MgtCoID VARCHAR(MAX) = '001E000000DmG8kIAF'
*/

SELECT pa.Name AS [Account Name]
	,pa.Joint_Advertising_Status__c AS [Joint Advertising Status]
	,a.Name AS [Parent Account: Account Name]
	,sa.Name AS [Selling Management Company: Account Name]
	,x.Name AS [Active Cross Reference: Client ID]
	,LEFT(pa.Id,15) AS [Account ID]
	,g.Name AS [GEO Area: Geo Area Name]
	,pa.ShippingCity AS [Physical City]
	,pa.ShippingState AS [Physical State/Province]
	,s.Name AS [Sales Market]
	,r.Name AS [Rate Card: Rate Card Name]
	,pa.Number_of_Units__c AS [Number of Units]
	,pa.CategoryP__c AS [Category]
	,pa.ShippingStreet AS [Physical Street]
	,pa.ShippingPostalCode AS [Physical Zip/Postal Code]
	,pa.Active_Competitors__c AS [Active Competitors]
	,pa.Move__c AS [Active Move]
	,pa.Apartment_Finder__c AS [Active Apartment Finder]
	,pa.My_New_Place__c AS [Active My New Place]
	,pa.Apartments__c AS [Active Apartments]
	,pa.For_Rent__c AS [Active For Rent]
	,(1*pa.Apartment_Finder__c) + (1*pa.Apartments__c) + (1*pa.For_Rent__c) AS [321]
	,CASE WHEN pa.Number_of_Units__c < 100 THEN 'Y'
		WHEN pa.CategoryP__c <> 'Unit Based' THEN 'Y'
		ELSE 'N' END AS [Segmentation]
	,pa.Number_of_Units__c AS NumberofUnits
	,pa.CategoryP__c AS Category
	,u.Name AS [Account Owner: Full Name]
	,pa.Apartments__c AS ActiveApartments
	,pa.Apartment_Finder__c AS ApartmentFinder
	,pa.For_Rent__c AS ActiveForRent
	,pa.Active_Trulia__c AS ActiveTrulia
	,pa.CBSA_Name__c AS CBSAName
FROM SalesForce.dbo.Account AS pa
INNER JOIN SalesForce.dbo.User2 AS u
	ON pa.OwnerId = u.Id
INNER JOIN SalesForce.dbo.Account AS sa
	ON pa.Selling_Mgmt_Account__c = sa.Id
LEFT OUTER JOIN SalesForce.dbo.Account AS a
	ON pa.ParentId = a.Id
LEFT OUTER JOIN SalesForce.dbo.Max_Cross_Reference__c AS x
	ON pa.MAX_Cross_Reference__c = x.Id
LEFT OUTER JOIN SalesForce.dbo.GEO_Area__c AS g	
	ON pa.GEOAreaId__c = g.Id
LEFT OUTER JOIN SalesForce.dbo.Sales_Market__c AS s
	ON g.Sales_Market__c = s.Id
LEFT OUTER JOIN SalesForce.dbo.Rate_Card__c AS r
	ON pa.Rate_Card__c = r.Id
WHERE CHARINDEX(pa.Selling_Mgmt_Account__c,@MgtCoID) > 0



    SET NOCOUNT OFF;
END 






GO
/****** Object:  StoredProcedure [Tableau].[MgmtPresentation_ProposalProducts]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO










CREATE PROCEDURE [Tableau].[MgmtPresentation_ProposalProducts] (
    @MgtCoID VARCHAR(MAX))

/*******************************************************************************************
* Name:	Tableau.MgmtPresentation_ProposalProducts
* ------------------------------------------------------------------------------------------
* Desc:	
* ------------------------------------------------------------------------------------------
* Test:	EXEC Tableau.MgmtPresentation_ProposalProducts '001E000000DmG8kIAF'
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist:	01	09/12/2016		Colleen Rocks		Ticket #####; Portfolio Advantage Initiative
********************************************************************************************/
AS
BEGIN
    SET NOCOUNT ON;
/*
--test:
DECLARE @MgtCoID VARCHAR(MAX) = '001E000000DmG8kIAF'
*/

SELECT a.Name AS [Contract Line Item: Advertiser]
	,a.Property_Joint_Advertiser__c AS [Property Joint Advertiser]
	,serva.Name AS [Servicing Management Company]
	,sela.Name AS [Selling Management Company]
	,fli.Is_Active__c AS [Is Active]
	,fli.Status__c AS [Status]
	,LEFT(a.Id,15) AS [Account ID]
	,g.Name AS [GEO Area]
	,a.CBSA_Code__c AS [CBSA Code]
	,a.CBSA_Name__c AS [CBSA Name]
	,p.Name AS [Product]
	,fli.ProductFulfillment__c AS [Product Fulfillment]
	,fli.StartDate__c AS [Fulfillment Start Date]
	,fli.Projected_End_Date__c AS [Projected End Date]
	,fli.DropDate__c AS [Drop Date]
	,fli.Effective_Drop_Date__c AS [Effective Drop Date]
	,cli.Discounted_Unit_Price__c  AS [Contract Line Item: Discounted Unit Price]
	,a.CategoryP__c AS [Category]
	,a.Number_of_Units__c AS [Number of Units]
	,CASE WHEN a.Number_of_Units__c < 100 THEN 'Y'
		WHEN a.CategoryP__c <> 'Unit Based' THEN 'Y'
		ELSE 'N' END AS [Segmentation]
FROM SalesForce.dbo.Account AS a
INNER JOIN SalesForce.dbo.Fulfillment_Line_Item__c AS fli
	ON a.id = fli.Advertiser__c
INNER JOIN SalesForce.dbo.Contract_Line_Item__c AS cli
	ON fli.Contract_Line_Item__c = cli.Id
INNER JOIN SalesForce.dbo.Product2 AS p
	ON fli.Product__c = p.Id
LEFT OUTER JOIN SalesForce.dbo.GEO_Area__c AS g
	ON a.GEOAreaId__c = g.Id
LEFT OUTER JOIN SalesForce.dbo.Account AS sela
	ON a.Selling_Mgmt_Account__c = sela.Id
LEFT OUTER JOIN SalesForce.dbo.Account AS serva
	ON a.Servicing_Mgmt_Account__c = serva.Id
WHERE fli.Status__c IN ('Active','Drop Requested')
	AND CHARINDEX(a.Selling_Mgmt_Account__c,@MgtCoID) > 0
	AND cli.Discounted_Unit_Price__c > 0

    SET NOCOUNT OFF;
END 







GO
/****** Object:  StoredProcedure [Tableau].[MgmtPresentation_v2]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO














CREATE PROCEDURE [Tableau].[MgmtPresentation_v2] (@MgtCoID VARCHAR(MAX))

/*******************************************************************************************
* Name:	Tableau.MgmtPresentation_v2
* ------------------------------------------------------------------------------------------
* Desc:	Gets different metrics (performance, spend) YOY completed months for the mgmt company
* ------------------------------------------------------------------------------------------
* Test:	EXEC Tableau.MgmtPresentation_v2 '001E000000DmFgZIAV'
* ------------------------------------------------------------------------------------------
* Notes: 
* ------------------------------------------------------------------------------------------
* Hist:	01	09/09/2016		Colleen Rocks		Ticket #####; Portfolio Advantage Initiative
********************************************************************************************/
AS
BEGIN
    SET NOCOUNT ON;

/*--test:
DECLARE @MgtCoID VARCHAR(MAX) = --'001E000000DmGZeIAN'
    '001E000000DmGahIAF,001E0000019EZ1WIAW'*/

-------------------------------
/*Declare & set variables*/
-------------------------------
--    DECLARE @StartDate DATE = DATEFROMPARTS(YEAR(GETDATE()),'01','01')
--       ,@EndDate DATE = DATEFROMPARTS(YEAR(GETDATE()),'12','31')
	   --CONVERT(DATE,EOMONTH(DATEADD(MONTH,-1,GETDATE())));

    DECLARE @StartDate DATE = DATEFROMPARTS('2016','01','01')
       ,@EndDate DATE = DATEFROMPARTS('2016','12','31')

    DECLARE @StartYMDID INT = CAST(CONVERT(VARCHAR(8),@StartDate,112) AS INT)
       ,@EndYMDID INT = CAST(CONVERT(VARCHAR(8),@EndDate,112) AS INT)
       ,@LastYearStartYMDID INT = CAST(CONVERT(VARCHAR(8),DATEADD(YEAR,-1,@StartDate),112) AS INT)
       ,@LastYearEndYMDID INT = CAST(CONVERT(VARCHAR(8),DATEADD(YEAR,-1,@EndDate),112) AS INT);

--SELECT @StartDate, @EndDate, @StartYMDID, @EndYMDID, @LastYearStartYMDID, @LastYearEndYMDID

-------------------------------
/*Drop temp tables*/
-------------------------------
    BEGIN TRY
        DROP TABLE #Dates
    END TRY
    BEGIN CATCH 
    END CATCH;

    BEGIN TRY
        DROP TABLE #PropList
    END TRY
    BEGIN CATCH 
    END CATCH;

    BEGIN TRY
        DROP TABLE #Insight
    END TRY
    BEGIN CATCH 
    END CATCH;

    BEGIN TRY
        DROP TABLE #Spend
    END TRY
    BEGIN CATCH 
    END CATCH;

    BEGIN TRY
        DROP TABLE #Performance
    END TRY
    BEGIN CATCH 
    END CATCH;

    BEGIN TRY
        DROP TABLE #ReviewCounts
    END TRY
    BEGIN CATCH 
    END CATCH;

    BEGIN TRY
        DROP TABLE #CR3
    END TRY
    BEGIN CATCH 
    END CATCH;

    BEGIN TRY
        DROP TABLE #MediaCenter
    END TRY
    BEGIN CATCH 
    END CATCH;

-------------------------------
/*Get date range*/
-------------------------------
    SELECT DISTINCT
            YearMonth
           ,MonthStartDate
           ,MonthEndYMDID
    INTO    #Dates
    FROM    DBAUtility.Dimension.Dates WITH (NOLOCK)
    WHERE   YMDID BETWEEN @StartYMDID AND @EndYMDID
            OR YMDID BETWEEN @LastYearStartYMDID
                     AND     @LastYearEndYMDID;

-------------------------------
/*Get property list*/
-------------------------------
    SELECT  a.Id AS SFPropAcctID
           ,a.Joint_Advertising_Status__c AS JointAdvertising
           ,l.ListingID
           ,l.PropertyIDAG
           ,a.Insight_Report_Type__c AS InsightReportType
           ,a.New_Construction__c AS NewConstruction
    INTO    #PropList
    FROM    SalesForce.dbo.Account AS a
    LEFT OUTER JOIN RentPath.Dimension.Listings AS l
            ON a.Id = l.SFPropertyAcctID
    WHERE   CHARINDEX(a.Selling_Mgmt_Account__c,@MgtCoID) > 0;

-------------------------------
/*Get Insight Report counts*/
-------------------------------
    SELECT  InsightReportType
           ,CASE WHEN JointAdvertising = 'True Prospect' THEN 'NonAdvertising'
                 ELSE 'Advertising'
            END AS AdvertisingStatus
           ,COUNT(1) AS NumProps
    INTO    #Insight
    FROM    #PropList
    GROUP BY InsightReportType
           ,CASE WHEN JointAdvertising = 'True Prospect' THEN 'NonAdvertising'
                 ELSE 'Advertising'
            END;

-------------------------------
/*Get total spend*/
-------------------------------
    SELECT  s.MonthStartDate
           ,s.YearMonth
           ,COUNT(DISTINCT CASE WHEN s.Bucket = 'Core - Subscription' THEN s.SalesforceAccountID
                           END) AS NumSubscriptionProps
           ,SUM(CASE WHEN s.Bucket <> 'Core - Performance Based' THEN s.SalesPrice
                     ELSE 0
                END) AS SubscriptionSpend
           ,COUNT(DISTINCT CASE WHEN s.Bucket = 'Core - Performance Based' THEN s.SalesforceAccountID
                           END) AS NumPerformanceProps
           ,MAX(CASE WHEN s.Bucket = 'Core - Performance Based' THEN s.SalesPrice
                     ELSE 0
                END) AS PerformanceSpend
    INTO    #Spend
    FROM    (
             SELECT fli.Advertiser__c AS SalesforceAccountID
                   ,fli.StartDate__c
                   ,fli.EndDate__c
                   ,d.YearMonth
                   ,d.MonthStartDate
                   ,CASE WHEN p.Product_Bucket__c = 'Fee' THEN 'Extra Fee'
                         WHEN p.Product_Bucket__c = 'Core'
                              AND p.Family IN ('ALM','CPA')
                              OR p.Name IN ('Pay Per Lead','Pay Per Lease') THEN 'Core - Performance Based'
                         WHEN p.Product_Bucket__c = 'Core' THEN 'Core - Subscription'
                         ELSE 'Upsell'
                    END AS Bucket
                   ,CASE WHEN p.AG_Product__c = 1
                              AND p.Rent_com_Product__c = 1 THEN 'Both'
                         WHEN p.AG_Product__c = 1
                              AND p.Rent_com_Product__c = 0 THEN 'AG'
                         WHEN p.AG_Product__c = 0
                              AND p.Rent_com_Product__c = 1 THEN 'Rent'
                         ELSE p.Channel__c
                    END AS ProductSite
                   ,p.Name AS ProductName
                   ,cli.Monthly_Price_with_All_Discounts__c AS SalesPrice
             FROM   #Dates AS d
             INNER JOIN SalesForce.dbo.Fulfillment_Line_Item__c AS fli
                    ON d.YearMonth BETWEEN CAST(CONVERT(VARCHAR(6),fli.StartDate__c,112) AS INT)
                                   AND     CAST(CONVERT(VARCHAR(6),fli.EndDate__c,112) AS INT)
             INNER JOIN SalesForce.dbo.Contract_Line_Item__c AS cli
                    ON cli.Fulfillment_Line_Item__c = fli.Id
             INNER JOIN SalesForce.dbo.Product2 AS p
                    ON fli.Product__c = p.Id
             WHERE  p.Name <> 'Billing Adjustment'
                    AND fli.Advertiser__c IN (SELECT    SFPropAcctID
                                              FROM      #PropList)
            ) AS s
    GROUP BY s.MonthStartDate
           ,s.YearMonth

-------------------------------
/*Get lead, status and webmetrics data*/
-------------------------------
    SELECT  y.YearMonth
           ,y.NewConstruction
           ,SUM(y.AGStatus) AS AGAdvertisers
           ,SUM(y.RentStatus) AS RentAdvertisers
           ,COUNT(y.SFPropAcctID) AS TotalAdvertisers
           ,SUM(y.AllLeads) AS AllLeads
           ,SUM(y.WebsiteClicks) AS WebsiteClicks
           ,SUM(y.ListingViews) AS ListingViews
           ,SUM(y.SearchImpressions) AS SearchImpressions
           ,SUM(y.MapClicks) AS MapClicks
    INTO    #Performance
    FROM    (
             SELECT pl.SFPropAcctID
                   ,pl.ListingID
                   ,pl.NewConstruction
                   ,ml.YearMonth
                   ,MAX(ml.StatusIDAG) AS AGStatus
                   ,MAX(ml.StatusIDRent) AS RentStatus
                   ,SUM(ml.AllLeads) AS AllLeads
                   ,SUM(ml.ClicksWebURL + ml.ClicksMgtCoURLAG + ml.ClicksMgtCoURLRent) AS WebsiteClicks
                   ,SUM(ml.ViewsListingPageWeb + ml.ViewsListingPageMobile) AS ListingViews
                   ,SUM(ml.SRPListingImpr) AS SearchImpressions
                   ,SUM(ml.ClicksMap) AS MapClicks
             FROM   #PropList AS pl
             INNER JOIN RentPath.Mart.Listings AS ml
                    ON pl.ListingID = ml.ListingID
                       AND (ml.StatusIDAG = 1
                            OR ml.StatusIDRent = 1)
                       AND ml.YearMonth IN (SELECT  YearMonth
                                            FROM    #Dates)
             GROUP BY pl.SFPropAcctID
                   ,pl.ListingID
                   ,pl.NewConstruction
                   ,ml.YearMonth
            ) AS y
    GROUP BY y.YearMonth
           ,y.NewConstruction;

-------------------------------
/*Get results*/
-------------------------------
    SELECT LEFT(s.YearMonth,4) AS [Year]
		   ,DATENAME(M,s.MonthStartDate) AS [Month]
           ,s.MonthStartDate
		   ,s.YearMonth
           ,SUM(p.AllLeads) AS AllLeads
           ,s.NumSubscriptionProps
           ,s.SubscriptionSpend
           ,s.NumPerformanceProps
           ,s.PerformanceSpend
           ,SUM(p.AGAdvertisers) AS AGAdvertisers
           ,SUM(p.RentAdvertisers) AS RentAdvertisers
           ,SUM(p.TotalAdvertisers) AS TotalAdvertisers
           ,SUM(p.WebsiteClicks) AS WebsiteClicks
           ,SUM(p.ListingViews) AS ListingViews
           ,SUM(p.SearchImpressions) AS SearchImpressions
           ,SUM(p.MapClicks) AS MapClicks
		   ,SUM(p.AllLeads) / SUM(p.TotalAdvertisers) AS LPP
           ,SUM(CASE WHEN p.NewConstruction = 1 THEN p.AGAdvertisers
                     ELSE 0
                END) AS NCAGAdvertisers
           ,SUM(CASE WHEN p.NewConstruction = 1 THEN p.RentAdvertisers
                     ELSE 0
                END) AS NCRentAdvertisers
           ,SUM(CASE WHEN p.NewConstruction = 1 THEN p.TotalAdvertisers
                     ELSE 0
                END) AS NCTotalAdvertisers
           ,SUM(CASE WHEN p.NewConstruction = 1 THEN p.AllLeads
                     ELSE 0
                END) AS NCAllLeads
           ,SUM(CASE WHEN p.NewConstruction = 1 THEN p.WebsiteClicks
                     ELSE 0
                END) AS NCWebsiteClicks
           ,SUM(CASE WHEN p.NewConstruction = 1 THEN p.ListingViews
                     ELSE 0
                END) AS NCListingViews
           ,SUM(CASE WHEN p.NewConstruction = 1 THEN p.SearchImpressions
                     ELSE 0
                END) AS NCSearchImpressions
           ,SUM(CASE WHEN p.NewConstruction = 1 THEN p.MapClicks
                     ELSE 0
                END) AS NCMapClicks
           ,i.CommInsightActiveProps
           ,i.CommInsightProspectProps
           ,i.MktInsightActiveProps
           ,i.MktInsightProspectProps
           ,i.NoReportInsightProps
           ,pl.NumProps - SUM(p.TotalAdvertisers) AS NumProspects
		   ,@MgtCoID AS MgmtCompanies 
    FROM    #Spend AS s
    INNER JOIN #Performance AS p
            ON s.YearMonth = p.YearMonth
    CROSS JOIN (
                SELECT  SUM(CASE WHEN InsightReportType = 'Community Insight'
                                      AND AdvertisingStatus = 'Advertising' THEN NumProps
                                 ELSE 0
                            END) AS CommInsightActiveProps
                       ,SUM(CASE WHEN InsightReportType = 'Community Insight'
                                      AND AdvertisingStatus = 'NonAdvertising' THEN NumProps
                                 ELSE 0
                            END) AS CommInsightProspectProps
                       ,SUM(CASE WHEN InsightReportType = 'Market Insight'
                                      AND AdvertisingStatus = 'Advertising' THEN NumProps
                                 ELSE 0
                            END) AS MktInsightActiveProps
                       ,SUM(CASE WHEN InsightReportType = 'Market Insight'
                                      AND AdvertisingStatus = 'NonAdvertising' THEN NumProps
                                 ELSE 0
                            END) AS MktInsightProspectProps
                       ,SUM(CASE WHEN InsightReportType = 'No Report' THEN NumProps
                                 ELSE 0
                            END) AS NoReportInsightProps
                FROM    #Insight
               ) AS i
    CROSS JOIN (
                SELECT  COUNT(1) AS NumProps
                FROM    #PropList
               ) AS pl
    GROUP BY LEFT(s.YearMonth,4)
           ,CASE WHEN s.YearMonth = CAST(CONVERT(VARCHAR(6),GETDATE(),112) AS INT) THEN 0
                 WHEN s.YearMonth = CAST(CONVERT(VARCHAR(6),DATEADD(YEAR,-1,GETDATE()),112) AS INT) THEN 0
                 ELSE 1
            END
           ,s.MonthStartDate
           ,s.YearMonth
           ,s.NumSubscriptionProps
           ,s.SubscriptionSpend
           ,s.NumPerformanceProps
           ,s.PerformanceSpend
           ,i.CommInsightActiveProps
           ,i.CommInsightProspectProps
           ,i.MktInsightActiveProps
           ,i.MktInsightProspectProps
           ,i.NoReportInsightProps
           ,pl.NumProps
    ORDER BY s.MonthStartDate;


    SET NOCOUNT OFF;
END 









GO
/****** Object:  StoredProcedure [Tableau].[PDPClicks]    Script Date: 9/5/2017 7:20:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [Tableau].[PDPClicks] (
       @MarketCD  VARCHAR(20)
	   ,@TimeFrame INT --1 = Day; 2 = Last 2 Hours; 3 = Last Hour
	   )

/*******************************************************************************************
* Name:	Tableau.PDPClicks
* ------------------------------------------------------------------------------------------
* Desc:	
* ------------------------------------------------------------------------------------------
* Test:	EXEC Tableau.PDPClicks 'P01003',3
        EXEC Tableau.PDPClicks 'P01003',2
* ------------------------------------------------------------------------------------------
* Notes: Used in the Tableau Sales Dashboard
* ------------------------------------------------------------------------------------------
* Hist:	01	09/16/2015	Colleen Rocks        Ticket 20630; initial version
********************************************************************************************/
AS 
BEGIN
	SET NOCOUNT ON ;

IF @TimeFrame = 1
BEGIN
SELECT tpp.subprofile
	,tpp.listingid
	,tpp.eventdate
	,l.GeoLat
	,l.GeoLong
	,l.MarketCD
	,l.MarketName
  FROM [RentPath].[Staging].[TealiumParsedPivot20150909] AS tpp
  JOIN RentPath.Dimension.Listings AS l
	ON tpp.listingid = l.ListingID
  WHERE tpp.page = 'pdp'
	AND tpp.action = 'click'
	AND tpp.profileid IN (84,86)
	AND tpp.Listingid NOT LIKE '%[^0-9]%'
	AND l.MarketCD = @MarketCD
END ;

IF @TimeFrame = 2
BEGIN
SELECT tpp.subprofile
	,tpp.listingid
	,tpp.eventdate
	,l.GeoLat
	,l.GeoLong
	,l.MarketCD
	,l.MarketName
  FROM [RentPath].[Staging].[TealiumParsedPivot20150909] AS tpp
  JOIN RentPath.Dimension.Listings AS l
	ON tpp.listingid = l.ListingID
  WHERE tpp.page = 'pdp'
	AND tpp.action = 'click'
	AND tpp.profileid IN (84,86)
	AND tpp.Listingid NOT LIKE '%[^0-9]%'
	AND l.MarketCD = @MarketCD
	AND tpp.eventdate BETWEEN DATEADD(HOUR,-2,GETDATE()-7) AND GETDATE()-7
END ;

IF @TimeFrame = 3
BEGIN
SELECT tpp.subprofile
	,tpp.listingid
	,tpp.eventdate
	,l.GeoLat
	,l.GeoLong
	,l.MarketCD
	,l.MarketName
  FROM [RentPath].[Staging].[TealiumParsedPivot20150909] AS tpp
  JOIN RentPath.Dimension.Listings AS l
	ON tpp.listingid = l.ListingID
  WHERE tpp.page = 'pdp'
	AND tpp.action = 'click'
	AND tpp.profileid IN (84,86)
	AND tpp.Listingid NOT LIKE '%[^0-9]%'
	AND l.MarketCD = @MarketCD
	AND tpp.eventdate BETWEEN DATEADD(HOUR,-1,GETDATE()-7) AND GETDATE()-7
END ;


	SET NOCOUNT OFF ;
END 





GO
EXEC [RentPath].sys.sp_addextendedproperty @name=N'SQLSourceControl Scripts Location', @value=N'<?xml version="1.0" encoding="utf-16" standalone="yes"?>
<ISOCCompareLocation version="1" type="SvnLocation">
  <RepositoryUrl>http://svn.atl.primedia.com/repos/dev-project/trunk/BusinessIntelligence/Warehouse01/Databases/RentPath/</RepositoryUrl>
</ISOCCompareLocation>' 
GO
EXEC [RentPath].sys.sp_addextendedproperty @name=N'SQLSourceControl Database Revision', @value=74385 
GO
EXEC sys.sp_addextendedproperty @name=N'TABLEDOC', @value=N'One time emails for Basic Subscriptions' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DashboardBasicSubOneTimeEmail'
GO
EXEC sys.sp_addextendedproperty @name=N'TABLEDOC', @value=N'Audit Table For One time emails for Basic Subscriptions.  Holds all records before modification or ones that are deleted. Note that the SPROCs handle the saving of data to this table.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DashboardBasicSubOneTimeEmailAudit'
GO
EXEC sys.sp_addextendedproperty @name=N'TABLEDOC', @value=N'Subscriptions for Dashboard (which was created by Don Wert, marted information by Bob Langley)' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DashboardSubscriptions'
GO
EXEC sys.sp_addextendedproperty @name=N'TABLEDOC', @value=N'Subscriptions for Dashboard Audit table.  Holds all records before modification or ones that are deleted. Note that the SPROCs handle the saving of data to this table.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'DashboardSubscriptionsAudit'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'property is affected by search engine marketing' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Listings_old', @level2type=N'COLUMN',@level2name=N'IsSEM'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'this is the same as external price code, which is used by 3rd party feeds' , @level0type=N'SCHEMA',@level0name=N'Dimension', @level1type=N'TABLE',@level1name=N'Listings_old', @level2type=N'COLUMN',@level2name=N'ListingPricingSource'
GO
EXEC sys.sp_addextendedproperty @name=N'TABLEDESC', @value=N'This table is associated with the Rentals/Lovely Syndication to AG.  Original Ticket: 18228.  This table holds both Active and In-Active properties.' , @level0type=N'SCHEMA',@level0name=N'Staging', @level1type=N'TABLE',@level1name=N'SmallPropertyListings'
GO
EXEC sys.sp_addextendedproperty @name=N'TABLEDOC', @value=N'This table is associated with the Rentals/Lovely Syndication to AG.  Original Ticket: 18228.  This table holds both Active and In-Active properties.' , @level0type=N'SCHEMA',@level0name=N'Staging', @level1type=N'TABLE',@level1name=N'SmallPropertyListings'
GO
USE [master]
GO
ALTER DATABASE [RentPath] SET  READ_WRITE 
GO
